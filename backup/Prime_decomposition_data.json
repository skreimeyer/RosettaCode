{"task": "Prime_decomposition", "blocks": [{"lang": "360 Assembly", "loc": 76, "block": "<pre class=\"text highlighted_source\">PRIMEDE  CSECT  <br/>         USING  PRIMEDE,R13<br/>         B      80(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         DC     CL8'PRIMEDE'<br/>         STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15            end prolog<br/>         LA     R2,0<br/>         LA     R3,1023<br/>         LA     R4,1024<br/>         MR     R2,R4<br/>         ST     R3,N               n=1023*1024<br/>         LA     R5,WBUFFER<br/>         LA     R6,0<br/>         L      R1,N               n<br/>         XDECO  R1,0(R5)<br/>         LA     R5,12(R5)<br/>         MVC    0(3,R5),=C'\u00a0: '<br/>         LA     R5,3(R5)<br/>         LA     R0,2<br/>         ST     R0,I               i=2<br/>WHILE1   EQU    *                  do while(i&lt;=n/2)<br/>         L      R2,N<br/>         SRA    R2,1<br/>         L      R4,I<br/>         CR     R4,R2              i&lt;=n/2<br/>         BH     EWHILE1<br/>WHILE2   EQU    *                  do while(n//i=0)<br/>         L      R3,N<br/>         LA     R2,0<br/>         D      R2,I<br/>         LTR    R2,R2              n//i=0<br/>         BNZ    EWHILE2<br/>         ST     R3,N               n=n/i<br/>         ST     R3,M               m=n<br/>         L      R1,I               i<br/>         XDECO  R1,WDECO<br/>         MVC    0(5,R5),WDECO+7<br/>         LA     R5,5(R5)<br/>         MVI    OK,X'01'           ok<br/>         B      WHILE2<br/>EWHILE2  EQU    *<br/>         L      R4,I<br/>         CH     R4,=H'2'           if i=2 then<br/>         BNE    NE2<br/>         LA     R0,3<br/>         ST     R0,I               i=3<br/>         B      EIFNE2<br/>NE2      L      R2,I               else<br/>         LA     R2,2(R2)<br/>         ST     R2,I               i=i+2<br/>EIFNE2   B      WHILE1        <br/>EWHILE1  EQU    *<br/>         CLI    OK,X'01'           if ^ok then<br/>         BE     NOTPRIME<br/>         MVC    0(7,R5),=C'[prime]'<br/>         LA     R5,7(R5)<br/>         B      EPRIME<br/>NOTPRIME L      R1,M               m<br/>         XDECO  R1,WDECO<br/>         MVC    0(5,R5),WDECO+7<br/>EPRIME   XPRNT  WBUFFER,80         put <br/>         L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>N        DS     F<br/>I        DS     F<br/>M        DS     F<br/>OK       DC     X'00'<br/>WBUFFER  DC     CL80' '<br/>WDECO    DS     CL16<br/>         YREGS  <br/>         END    PRIMEDE</pre>"}, {"lang": "ABAP", "loc": 53, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">class</span></a> ZMLA_ROSETTA <span class=\"kw4\">definition</span><br/>  <span class=\"kw4\">public</span><br/>  <span class=\"kw9\">create public</span> <span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw8\"><span class=\"kw4\">public</span> section</span><span class=\"sy0\">.</span><br/>\u00a0<br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a><span class=\"sy0\">:</span><br/>      enumber         <span class=\"kw4\">TYPE</span>          N  <span class=\"kw4\">LENGTH</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span><br/>      listof_enumber  <span class=\"kw4\">TYPE</span> <span class=\"kw9\"><span class=\"kw4\">TABLE</span> OF</span> enumber <span class=\"sy0\">.</span><br/>\u00a0<br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">class-methods</span></a> FACTORS<br/>      <span class=\"kw4\">importing</span><br/>        <span class=\"kw4\">value</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw4\">type</span> ENUMBER<br/>      <span class=\"kw4\">exporting</span><br/>        <span class=\"kw4\">value</span><span class=\"br0\">(</span>ORET<span class=\"br0\">)</span> <span class=\"kw4\">type</span> LISTOF_ENUMBER <span class=\"sy0\">.</span><br/>  <span class=\"kw8\">protected section</span><span class=\"sy0\">.</span><br/>  <span class=\"kw8\">private section</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> ZMLA_ROSETTA <span class=\"kw4\">IMPLEMENTATION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">* &lt;SIGNATURE&gt;---------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | Static Public Method ZMLA_ROSETTA=&gt;FACTORS</span><br/><span class=\"co2\">* +-------------------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | [---&gt;] N                              TYPE        ENUMBER</span><br/><span class=\"co2\">* | [&lt;---] ORET                           TYPE        LISTOF_ENUMBER</span><br/><span class=\"co2\">* +--------------------------------------------------------------------------------------&lt;/SIGNATURE&gt;</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">method</span></a> FACTORS<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">CLEAR</span></a> oret<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> n <span class=\"kw4\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>      n <span class=\"sy1\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">APPEND</span></a> <span class=\"nu0\">2</span> <span class=\"kw4\">to</span> oret<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> lim <span class=\"kw4\">type</span> enumber<span class=\"sy0\">,</span><br/>          i   <span class=\"kw4\">type</span> enumber<span class=\"sy0\">.</span><br/>    lim <span class=\"sy1\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    i   <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> i <span class=\"sy1\">&lt;=</span> lim<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> n <span class=\"kw4\">mod</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">APPEND</span></a> i <span class=\"kw4\">to</span> oret<span class=\"sy0\">.</span><br/>        n <span class=\"sy1\">=</span> n <span class=\"sy0\">/</span> i<span class=\"sy0\">.</span><br/>        lim <span class=\"sy1\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>      i <span class=\"sy1\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">APPEND</span></a> n <span class=\"kw4\">to</span> oret<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">endmethod</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>include-book <span class=\"st0\">\"arithmetic-3/top\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">system</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prime-factors-r <span class=\"br0\">(</span>n i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">mode</span> <span class=\"sy0\">:</span><span class=\"me1\">program</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">list</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod n i<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i <span class=\"br0\">(</span>prime-factors-r <span class=\"br0\">(</span>floor n i<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span>prime-factors-r n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prime-factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">mode</span> <span class=\"sy0\">:</span><span class=\"me1\">program</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>prime-factors-r n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Number <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   Zero\u00a0: Number;<br/>   One \u00a0: Number;<br/>   Two \u00a0: Number;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"mod\"</span> <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"&gt;\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Prime_Numbers <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Number_List <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Number;<br/>   <span class=\"kw3\">function</span> Decompose <span class=\"br0\">(</span>N\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number_List;<br/>   <span class=\"kw3\">function</span> Is_Prime <span class=\"br0\">(</span>N\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/><span class=\"kw1\">end</span> Prime_Numbers;</pre>"}, {"lang": "ALGOL 68", "loc": 103, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#IF long int possible THEN #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> LINT <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>LINT lmax int <span class=\"sy1\">=</span> <span class=\"kw20\">long max int</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> LLENG <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> i<span class=\"br0\">)</span>LINT<span class=\"sy1\">:</span> <span class=\"kw8\">LENG</span> i<span class=\"sy1\">,</span><br/>   LSHORTEN <span class=\"sy1\">=</span> <span class=\"br0\">(</span>LINT i<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw8\">SHORTEN</span> i<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#ELSE<br/>\u00a0<br/>MODE LINT = INT;<br/>LINT lmax int = max int;<br/>OP LLENG = (INT i)LINT: i,<br/>   LSHORTEN = (LINT i)INT: i;<br/>\u00a0<br/>FI#</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> LLONG <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> i<span class=\"br0\">)</span>LINT<span class=\"sy1\">:</span> LLENG i<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> YIELDLINT <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>LINT<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>LINT<span class=\"sy1\">,</span> YIELDLINT<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> gen decompose<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> upb cache <span class=\"sy1\">=</span> <span class=\"kw20\">bits width</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">BITS</span> cache <span class=\"sy1\">:=</span> <span class=\"re0\">2r0</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">BITS</span> cached <span class=\"sy1\">:=</span> <span class=\"re0\">2r0</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span>LINT n<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw3\">BOOL</span><br/>        has factor <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span><br/>        out <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># FOR LINT factor IN #</span> gen decompose<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO ( #</span><br/>  <span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>LINT factor<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>      <span class=\"kw2\">IF</span> has factor <span class=\"kw2\">THEN</span> out <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span> <span class=\"kw2\">GO TO</span> done <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      has factor <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>  <span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    done<span class=\"sy1\">:</span> out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is prime cached <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>LINT n<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    LINT l half n <span class=\"sy1\">=</span> n <span class=\"kw12\">OVER</span> LLONG 2 <span class=\"sy1\">-</span> LLONG 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> l half n <span class=\"sy1\">&lt;=</span> LLENG upb cache <span class=\"kw2\">THEN</span><br/>        <span class=\"kw3\">INT</span> half n <span class=\"sy1\">=</span> LSHORTEN l half n<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> half n <span class=\"kw12\">ELEM</span> cached <span class=\"kw2\">THEN</span><br/>            <span class=\"kw3\">BOOL</span><span class=\"br0\">(</span>half n <span class=\"kw12\">ELEM</span> cache<span class=\"br0\">)</span><br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"kw3\">BOOL</span> out <span class=\"sy1\">=</span> is prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw3\">BITS</span> mask <span class=\"sy1\">=</span> <span class=\"re0\">2r1</span> <span class=\"kw11\">SHL</span> <span class=\"br0\">(</span>upb cache <span class=\"sy1\">-</span> half n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            cached <span class=\"sy1\">:=</span> cached <span class=\"kw16\">OR</span> mask<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> out <span class=\"kw2\">THEN</span> cache <span class=\"sy1\">:=</span> cache <span class=\"kw16\">OR</span> mask <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>            out<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">ELSE</span><br/>        is prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"coMULTI\"># above useful cache limit #</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">PROC</span> gen primes <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>YIELDLINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    yield<span class=\"br0\">(</span>LLONG 2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    LINT n <span class=\"sy1\">:=</span> LLONG 3<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> n <span class=\"sy1\">&lt;</span> l <span class=\"kw20\">maxint</span> <span class=\"sy1\">-</span> LLONG 2 <span class=\"kw2\">DO</span><br/>        yield<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        n <span class=\"sy1\">+:=</span> LLONG 2<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> n <span class=\"sy1\">&lt;</span> l <span class=\"kw20\">maxint</span> <span class=\"sy1\">-</span> LLONG 2 <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> is prime cached<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>            n <span class=\"sy1\">+:=</span> LLONG 2<br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC #</span> gen decompose <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>LINT in n<span class=\"sy1\">,</span> YIELDLINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    LINT n <span class=\"sy1\">:=</span> in n<span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># FOR LINT p IN #</span> gen primes<span class=\"br0\">(</span> <span class=\"coMULTI\"># ) DO ( #</span><br/>  <span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>LINT p<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        <span class=\"kw2\">IF</span> p<span class=\"sy1\">*</span>p <span class=\"sy1\">&gt;</span> n <span class=\"kw2\">THEN</span><br/>            <span class=\"kw2\">GO TO</span> done<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"kw2\">WHILE</span> n <span class=\"kw12\">MOD</span> p <span class=\"sy1\">=</span> LLONG 0 <span class=\"kw2\">DO</span><br/>                yield<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                n <span class=\"sy1\">:=</span> n <span class=\"kw12\">OVER</span> p<br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><br/>  <span class=\"coMULTI\"># OD #</span>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    done<span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> n <span class=\"sy1\">&gt;</span> LLONG 1 <span class=\"kw2\">THEN</span><br/>        yield<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\"># FOR LINT m IN #</span> gen primes<span class=\"br0\">(</span> <span class=\"coMULTI\"># ) DO ( #</span><br/><span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>LINT m<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>      LINT p <span class=\"sy1\">=</span> LLONG 2 <span class=\"sy1\">**</span> LSHORTEN m <span class=\"sy1\">-</span> LLONG 1<span class=\"sy1\">;</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"2**\"</span><span class=\"sy1\">,</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>m<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\"-1 = \"</span><span class=\"sy1\">,</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\", with factors:\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># FOR LINT factor IN #</span> gen decompose<span class=\"br0\">(</span>p<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO ( #</span><br/>    <span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>LINT factor<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>          <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>factor<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> m <span class=\"sy1\">&gt;=</span> LLONG 59 <span class=\"kw2\">THEN</span> <span class=\"kw2\">GO TO</span> done <span class=\"kw2\">FI</span><br/><span class=\"coMULTI\"># OD #</span>  <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  done<span class=\"sy1\">:</span> <span class=\"kw7\">EMPTY</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">9040 PF(0) = 0\u00a0: SC = 0<br/>9050 FOR CA = 2 TO INT( SQR(I))<br/>9060     IF I = 1 THEN RETURN<br/>9070     IF INT(I / CA) * CA = I THEN GOSUB 9200\u00a0: GOTO 9060<br/>9080     CA = CA + SC\u00a0: SC = 1<br/>9090 NEXT CA<br/>9100 IF I = 1 THEN RETURN<br/>9110 CA = I<br/>\u00a0<br/>9200 PF(0) = PF(0) + 1<br/>9210 PF(PF(0)) = CA<br/>9220 I = I / CA<br/>9230 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% factor<span class=\"br0\">(</span><span class=\"nu0\">8388607</span><span class=\"br0\">)</span>   <span class=\"co1\">; 47 * 178481</span><br/>\u00a0<br/>factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span><br/>    f <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            next <span class=\"sy0\">:=</span> factor<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> f<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">,</span>\u00a0% f <span class=\"st0\">\"`n\"</span> next<br/>        <span class=\"br0\">}</span><br/>        f<span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># Usage:  awk -f primefac.awk</span><br/><span class=\"kw6\">function</span> pfac<span class=\"br0\">(</span>n,    r, f<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tr = <span class=\"st0\">\"\"</span>; f = <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy2\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>n <span class=\"sy3\">%</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tn = n <span class=\"sy3\">/</span> f<br/>\t\t\tr = r <span class=\"st0\">\" \"</span> f<br/>\t\t<span class=\"br0\">}</span><br/>\t\tf = f <span class=\"sy3\">+</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span>f <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># For each line of input, print the prime factors.</span><br/><span class=\"br0\">{</span> <span class=\"kw5\">print</span> pfac<span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch file", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>::usage: cmd /k primefactor.cmd number <br/>setlocal enabledelayedexpansion<br/>\u00a0<br/>set /a compo=%1<br/>if \"%compo%\"==\"\" goto:eof<br/>set list=%compo%= (<br/>\u00a0<br/>set /a div=2 &amp; call\u00a0:loopdiv<br/>set /a div=3 &amp; call\u00a0:loopdiv<br/>set /a div=5,inc=2<br/>\u00a0<br/>:looptest<br/>call\u00a0:loopdiv<br/>set /a div+=inc,inc=6-inc,div2=div*div<br/>if\u00a0%div2% lss\u00a0%compo% goto looptest<br/>if\u00a0%compo% neq 1 set list=\u00a0%list%\u00a0%compo%<br/>echo\u00a0%list%)   &amp; goto:eof<br/>\u00a0<br/>:loopdiv<br/>set /a \"res=compo%%div<br/>if\u00a0%res% neq 0 goto:eof<br/>set list=%list%\u00a0%div%,<br/>set/a compo/=div<br/>goto:loopdiv<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&amp; 211p &gt;\u00a0: 1 - #v_ 25*, @ &gt; 11g:. /    v<br/>                &gt;\u00a0: 11g\u00a0%!|<br/>                          &gt; 11g 1+ 11p v<br/>       ^                               &lt;</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 12fC<br/>{2 2 3}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 171, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;inttypes.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint32_t</span> pint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint64_t</span> xint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> uint<span class=\"sy0\">;</span><br/><span class=\"co2\">#define PRIuPINT PRIu32\t\t/* printf macro for pint */</span><br/><span class=\"co2\">#define PRIuXINT PRIu64\t\t/* printf macro for xint */</span><br/><span class=\"co2\">#define MAX_FACTORS 63\t\t/* because 2^64 is too large for xint */</span><br/>\u00a0<br/><span class=\"kw4\">uint8_t</span> <span class=\"sy0\">*</span>pbits<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_PRIME (~(pint)0)</span><br/><span class=\"co2\">#define MAX_PRIME_SQ 65535U</span><br/><span class=\"co2\">#define PBITS (MAX_PRIME / 30 + 1)</span><br/>\u00a0<br/>pint next_prime<span class=\"br0\">(</span>pint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> is_prime<span class=\"br0\">(</span>xint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> sieve<span class=\"br0\">(</span>pint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint8_t</span> bit_pos<span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint8_t</span> rem_num<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> init_primes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tFILE <span class=\"sy0\">*</span>fp<span class=\"sy0\">;</span><br/>\tpint s<span class=\"sy0\">,</span> tgt <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pbits <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>PBITS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"malloc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"primebits\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>pbits<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> PBITS<span class=\"sy0\">,</span> fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>pbits<span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> PBITS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> s <span class=\"sy0\">&lt;=</span> MAX_PRIME_SQ<span class=\"sy0\">;</span> s <span class=\"sy0\">=</span> next_prime<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> tgt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\ttgt <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"sieve\u00a0%\"</span>PRIuPINT<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tsieve<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tfp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"primebits\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>pbits<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> PBITS<span class=\"sy0\">,</span> fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is_prime<span class=\"br0\">(</span>xint x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpint p<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> MAX_PRIME<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> pbits<span class=\"br0\">[</span>x<span class=\"sy0\">/</span><span class=\"nu0\">30</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> bit_pos<span class=\"br0\">[</span>x <span class=\"sy0\">%</span> <span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span>p <span class=\"sy0\">*</span> p <span class=\"sy0\">&lt;=</span> x<span class=\"sy0\">;</span> p <span class=\"sy0\">=</span> next_prime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sieve<span class=\"br0\">(</span>pint p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> b<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">off_t</span> ofs<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> q<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy0\">=</span> rem_num<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ~bit_pos<span class=\"br0\">[</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tofs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q <span class=\"sy0\">/</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>q <span class=\"sy0\">=</span> ofs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\tofs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> ofs<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>ofs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tofs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> ofs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> q <span class=\"sy0\">&lt;</span> PBITS<span class=\"sy0\">;</span> q <span class=\"sy0\">+=</span> ofs<span class=\"br0\">[</span>i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\tpbits<span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>pint next_prime<span class=\"br0\">(</span>pint p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">off_t</span> addr<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint8_t</span> bits<span class=\"sy0\">,</span> rem<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\taddr <span class=\"sy0\">=</span> p <span class=\"sy0\">/</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span><br/>\t\tbits <span class=\"sy0\">=</span> bit_pos<span class=\"br0\">[</span> p <span class=\"sy0\">%</span> <span class=\"nu0\">30</span> <span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>rem <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> rem<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> bits<span class=\"sy0\">;</span> rem<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>pbits<span class=\"br0\">[</span>addr<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> bits <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>bits<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>addr <span class=\"sy0\">&gt;=</span> PBITS<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tbits <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\trem <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>addr <span class=\"sy0\">&gt;=</span> PBITS<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pbits<span class=\"br0\">[</span>addr<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> bits<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\trem<span class=\"sy0\">++;</span><br/>\t\t\tbits <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> p <span class=\"sy0\">=</span> addr <span class=\"sy0\">*</span> <span class=\"nu0\">30</span> <span class=\"sy0\">+</span> rem_num<span class=\"br0\">[</span>rem<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> decompose<span class=\"br0\">(</span>xint n<span class=\"sy0\">,</span> xint <span class=\"sy0\">*</span>f<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpint p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* check small primes: not strictly necessary */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> MAX_PRIME <span class=\"sy0\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span>p <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> next_prime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tn <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>\t\t\tf<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> f<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/>\tpint p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\txint f<span class=\"br0\">[</span>MAX_FACTORS<span class=\"br0\">]</span><span class=\"sy0\">,</span> po<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinit_primes<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tpo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>1LLU <span class=\"sy0\">&lt;&lt;</span> p<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"2^%\"</span>PRIuPINT<span class=\"st0\">\" - 1 =\u00a0%\"</span>PRIuXINT<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> po<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>len <span class=\"sy0\">=</span> decompose<span class=\"br0\">(</span>po<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c\u00a0%\"</span>PRIuXINT<span class=\"sy0\">,</span> i<span class=\"sy0\">?</span><span class=\"st0\">'x'</span><span class=\"sy0\">:</span><span class=\"st0\">'='</span><span class=\"sy0\">,</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PrimeDecomposition<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            GetPrimes<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> GetPrimes<span class=\"br0\">(</span><span class=\"kw4\">decimal</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> storage <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span>                        <br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">decimal</span><span class=\"br0\">)</span>n <span class=\"sy0\">/</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">decimal</span><span class=\"br0\">)</span> n <span class=\"sy0\">/</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>                            storage<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>                            <br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                    i<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> storage<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 85, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;gmpxx.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// This function template works for any type representing integers or</span><br/><span class=\"co1\">// nonnegative integers, and has the standard operator overloads for</span><br/><span class=\"co1\">// arithmetic and comparison operators, as well as explicit conversion</span><br/><span class=\"co1\">// from int.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// OutputIterator must be an output iterator with value_type Integer. </span><br/><span class=\"co1\">// It receives the prime factors.</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Integer, <span class=\"kw2\">typename</span> OutputIterator<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">void</span> decompose<span class=\"br0\">(</span>Integer n, OutputIterator out<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Integer i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> Integer<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"sy2\">*</span>out<span class=\"sy2\">++</span> <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>      n <span class=\"sy2\">/</span><span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy2\">++</span>i<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// this is an output iterator similar to std::ostream_iterator, except</span><br/><span class=\"co1\">// that it outputs the separation string *before* the value, but not</span><br/><span class=\"co1\">// before the first value (i.e. it produces an infix notation).</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span> <span class=\"kw2\">class</span> infix_ostream_iterator<span class=\"sy4\">:</span><br/>  <span class=\"kw2\">public</span> std<span class=\"sy4\">::</span><span class=\"me2\">iterator</span><span class=\"sy1\">&lt;</span>T, std<span class=\"sy4\">::</span><span class=\"me2\">output_iterator_tag</span><span class=\"sy1\">&gt;</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">class</span> Proxy<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">friend</span> <span class=\"kw2\">class</span> Proxy<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">class</span> Proxy<br/>  <span class=\"br0\">{</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Proxy<span class=\"br0\">(</span>infix_ostream_iterator<span class=\"sy3\">&amp;</span> iter<span class=\"br0\">)</span><span class=\"sy4\">:</span> iterator<span class=\"br0\">(</span>iter<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Proxy<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span>T <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> value<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>iterator.<span class=\"me1\">first</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        iterator.<span class=\"me1\">stream</span> <span class=\"sy1\">&lt;&lt;</span> iterator.<span class=\"me1\">infix</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      iterator.<span class=\"me1\">stream</span> <span class=\"sy1\">&lt;&lt;</span> value<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    infix_ostream_iterator<span class=\"sy3\">&amp;</span> iterator<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  infix_ostream_iterator<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> inf<span class=\"br0\">)</span><span class=\"sy4\">:</span><br/>    stream<span class=\"br0\">(</span>os<span class=\"br0\">)</span>,<br/>    first<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>,<br/>    infix<span class=\"br0\">(</span>inf<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  <span class=\"br0\">}</span><br/>  infix_ostream_iterator<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> first <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  infix_ostream_iterator operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    infix_ostream_iterator prev<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"sy2\">++*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> prev<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  Proxy operator<span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Proxy<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> stream<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">bool</span> first<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> infix<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"please enter a positive number: \"</span><span class=\"sy4\">;</span><br/>  mpz_class number<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> number<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"this number is not positive!<span class=\"es1\">\\n</span>;\"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"decomposition: \"</span><span class=\"sy4\">;</span><br/>    decompose<span class=\"br0\">(</span>number, infix_ostream_iterator<span class=\"sy1\">&lt;</span>mpz_class<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" * \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"clojure highlighted_source\"><span class=\"co1\">;;; No stack consuming algorithm</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> factors<br/>  <span class=\"st0\">\"Return a list of factors of N.\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>factors n <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n k acc<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> n<span class=\"br0\">)</span>      <br/>      acc<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>rem n k<span class=\"br0\">)</span><span class=\"br0\">)</span>        <br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>quot n k<span class=\"br0\">)</span> k <span class=\"br0\">(</span><span class=\"kw1\">cons</span> k acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> n <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Commodore BASIC", "loc": 17, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">9000</span> <span class=\"co3\">REM ----- function generate</span><br/><span class=\"nu0\">9010</span> <span class=\"co3\">REM in ... i ... number</span><br/><span class=\"nu0\">9020</span> <span class=\"co3\">REM out ... pf() ... factors</span><br/><span class=\"nu0\">9030</span> <span class=\"co3\">REM mod ... ca ... pf candidate</span><br/><span class=\"nu0\">9040</span> pf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span>\u00a0: ca=<span class=\"nu0\">2</span>\u00a0: <span class=\"co3\">REM special case</span><br/><span class=\"nu0\">9050</span> <span class=\"kw1\">IF</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><br/><span class=\"nu0\">9060</span> <span class=\"kw1\">IF</span> <span class=\"kw3\">INT</span><span class=\"br0\">(</span>i/ca<span class=\"br0\">)</span>*ca=i <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">9200</span>\u00a0: <span class=\"kw1\">GOTO</span> <span class=\"nu0\">9050</span><br/><span class=\"nu0\">9070</span> <span class=\"kw1\">FOR</span> ca=<span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">INT</span><span class=\"br0\">(</span> <span class=\"kw3\">SQR</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">2</span><br/><span class=\"nu0\">9080</span> <span class=\"kw1\">IF</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span><br/><span class=\"nu0\">9090</span> <span class=\"kw1\">IF</span> <span class=\"kw3\">INT</span><span class=\"br0\">(</span>i/ca<span class=\"br0\">)</span>*ca=i <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">9200</span>\u00a0: <span class=\"kw1\">GOTO</span> <span class=\"nu0\">9080</span><br/><span class=\"nu0\">9100</span> <span class=\"kw1\">NEXT</span> <br/><span class=\"nu0\">9110</span> <span class=\"kw1\">IF</span> i&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> ca=i\u00a0: <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">9200</span><br/><span class=\"nu0\">9120</span> <span class=\"kw1\">RETURN</span><br/><span class=\"nu0\">9200</span> pf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>=pf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">9210</span> pf<span class=\"br0\">(</span>pf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>=ca<br/><span class=\"nu0\">9220</span> i=i/ca<br/><span class=\"nu0\">9230</span> <span class=\"kw1\">RETURN</span></pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; Recursive algorithm</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factor <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return a list of factors of N.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop with max-d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><br/>\t  for d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> then <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ d <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ d <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> d max-d<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; n is prime</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> d <span class=\"br0\">(</span>factor <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> n d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> decompose<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T number<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>    Unqual<span class=\"sy0\">!</span>T n <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> i<span class=\"br0\">)</span><br/>        result <span class=\"sy0\">~=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&gt;=</span> i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> i<span class=\"br0\">)</span><br/>            result <span class=\"sy0\">~=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">~=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>decompose<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    decompose<span class=\"br0\">(</span><span class=\"nu0\">1023</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1024</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    BigInt<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> <span class=\"nu0\">11</span> <span class=\"sy0\">*</span> <span class=\"nu0\">11</span> <span class=\"sy0\">*</span> <span class=\"nu0\">13</span> <span class=\"sy0\">*</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span>.<span class=\"me1\">decompose</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    decompose<span class=\"br0\">(</span>16860167264933UL.<span class=\"me1\">BigInt</span> <span class=\"sy0\">*</span> <span class=\"nu0\">179951</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    decompose<span class=\"br0\">(</span><span class=\"nu0\">2</span>.<span class=\"me1\">BigInt</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">100</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">group</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 29, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> primes <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> primesCache <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"coMULTI\">/** A collection of all prime numbers. */</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> primes <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> iterate<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            primesCache.<span class=\"me1\">iterate</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a> <span class=\"sy0\">&gt;</span> primesCache.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    f<span class=\"br0\">(</span>primesCache.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>                    primesCache with<span class=\"sy0\">=</span> x<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> primeDecomposition<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> x <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> factors <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> p <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> primes <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> p <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors with<span class=\"sy0\">=</span> p<br/>            x <span class=\"sy0\">//=</span> p<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/break\"><span class=\"kw1\">break</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return factors<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>prime-factors <span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"co1\">;; 2^59 - 1</span><br/><span class=\"br0\">(</span>prime-factors <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">179951</span> <span class=\"nu0\">3203431780337</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>prime-factors <span class=\"nu0\">100000000000000000037</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">31</span> <span class=\"nu0\">821</span> <span class=\"nu0\">66590107</span> <span class=\"nu0\">59004541</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 39, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>\tPRIME_DECOMPOSITION<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tfactor <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Prime decomposition of 'p'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tp_positive<span class=\"sy0\">:</span> p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tdiv, i, next, rest<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">if</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">force</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tdiv <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t\tnext <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\trest <span class=\"sy0\">:=</span> p<br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\trest <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\trest \\\\ div <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">force</span> <span class=\"br0\">(</span>div, i<span class=\"br0\">)</span><br/>\t\t\t\t\trest <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>rest <span class=\"sy0\">/</span> div<span class=\"br0\">)</span>.<span class=\"me1\">floor</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tdiv <span class=\"sy0\">:=</span> next<br/>\t\t\t\tnext <span class=\"sy0\">:=</span> next <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tis_divisor<span class=\"sy0\">:</span> across <span class=\"kw3\">Result</span> <span class=\"kw2\">as</span> r <span class=\"kw5\">all</span> p \\\\ r.<span class=\"me1\">item</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">end</span><br/>\t\t\tis_prime<span class=\"sy0\">:</span> across <span class=\"kw3\">Result</span> <span class=\"kw2\">as</span> r <span class=\"kw5\">all</span> prime <span class=\"br0\">(</span>r.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 9, "block": "<pre class=\"text highlighted_source\">open integer //arbitrary sized integers<br/>\u00a0<br/>decompose_prime n = loop n 2I<br/>  where <br/>    loop c p | c &lt; (p * p) = [c]<br/>             | c\u00a0% p == 0I = p\u00a0:: (loop (c / p) p)<br/>             | else = loop c (p + 1I)<br/>\u00a0<br/>decompose_prime 600851475143I</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Prime do<br/>  def decomposition(n), do: decomposition(n, 2, [])<br/>\u00a0<br/>  defp decomposition(n, k, acc) when n &lt; k*k, do: Enum.reverse(acc, [n])<br/>  defp decomposition(n, k, acc) when rem(n, k) == 0, do: decomposition(div(n, k), k, [k | acc])<br/>  defp decomposition(n, k, acc), do: decomposition(n, k+1, acc)<br/>end<br/>\u00a0<br/>prime = Stream.iterate(2, &amp;(&amp;1+1)) |&gt; <br/>        Stream.filter(fn n-&gt; length(Prime.decomposition(n)) == 1 end) |&gt;<br/>        Enum.take(17)<br/>mersenne = Enum.map(prime, fn n -&gt; {n, round(:math.pow(2,n)) - 1} end)<br/>Enum.each(mersenne, fn {n,m} -&gt;<br/> \u00a0:io.format \"~3s\u00a0:~20w = ~s~n\", [\"M#{n}\", m, Prime.decomposition(m) |&gt; Enum.join(\" x \")]<br/>end)</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% no stack consuming version</span><br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>     <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">K</span><span class=\"sy3\">*</span><span class=\"re5\">K</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">N</span>|Acc<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">K</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM DECOMPOSE<br/>\u00a0<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!VAR NUM,J<br/>\u00a0<br/>DIM PF[100]<br/>\u00a0<br/>PROCEDURE STORE_FACTOR<br/>   PF[0]=PF[0]+1<br/>   PF[PF[0]]=CA<br/>   I=I/CA<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE DECOMP(I)<br/>  PF[0]=0  CA=2\u00a0! special case<br/>  LOOP<br/>     IF I=1 THEN EXIT PROCEDURE END IF<br/>     EXIT IF INT(I/CA)*CA&lt;&gt;I<br/>     STORE_FACTOR<br/>  END LOOP<br/>  FOR CA=3 TO INT(SQR(I)) STEP 2 DO<br/>     LOOP<br/>        IF I=1 THEN EXIT PROCEDURE END IF<br/>        EXIT IF INT(I/CA)*CA&lt;&gt;I<br/>        STORE_FACTOR<br/>     END LOOP<br/>  END FOR<br/>  IF I&gt;1 THEN CA=I STORE_FACTOR END IF<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>\u00a0! ----- function generate<br/>\u00a0! in ...  I     ... number<br/>\u00a0! out ... PF[]  ... factors<br/>\u00a0!         PF[0] ... # of factors<br/>\u00a0! mod ... CA    ... pr.fact. candidate<br/> PRINT(CHR$(12);)\u00a0!CLS<br/> INPUT(\"Numero \",NUM)<br/> DECOMP(NUM)<br/> PRINT(NUM;\"=\";)<br/> FOR J=1 TO PF[0] DO<br/>    PRINT(PF[J];)<br/> END FOR<br/> PRINT<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Ezhil", "loc": 145, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0ba9\u0bcd \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bc8\u0b95\u0bcd \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0baf\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0ba3\u0bbe(\u0b8e\u0ba3\u0bcd1)<br/>\u00a0<br/>  ## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b8e\u0ba3\u0bcd \u0baa\u0b95\u0bc1 \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe \u0b8e\u0ba9\u0bcd\u0bb1\u0bc1 \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0ba8\u0bcd\u0ba4\u0bc1 \u0b9a\u0bca\u0bb2\u0bcd\u0bb2\u0bc1\u0bae\u0bcd<br/>  ## \u0baa\u0b95\u0bc1\u0b8e\u0ba3\u0bcd \u0b8e\u0ba9\u0bcd\u0bb1\u0bbe\u0bb2\u0bcd 0 \u0ba4\u0bbf\u0bb0\u0bc1\u0bae\u0bcd\u0baa\u0ba4\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd<br/>  ## \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd \u0b8e\u0ba9\u0bcd\u0bb1\u0bbe\u0bb2\u0bcd 1 \u0ba4\u0bbf\u0bb0\u0bc1\u0bae\u0bcd\u0baa\u0ba4\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd1 &lt; 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>   ## \u0b8e\u0ba4\u0bbf\u0bb0\u0bcd\u0bae\u0bb1\u0bc8 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc8 \u0ba8\u0bc7\u0bb0\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd<br/>\u00a0<br/>    \u0b8e\u0ba3\u0bcd1 = \u0b8e\u0ba3\u0bcd1 * (-1)<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd1 &lt; 2) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>   ## \u0baa\u0bc2\u0b9c\u0bcd\u0b9c\u0bbf\u0baf\u0bae\u0bcd, \u0b92\u0ba9\u0bcd\u0bb1\u0bc1 \u0b86\u0b95\u0bbf\u0baf\u0bb5\u0bc8 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bcd \u0b85\u0bb2\u0bcd\u0bb2<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 0<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd1 == 2) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>    ## \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bc1 \u0b8e\u0ba9\u0bcd\u0bb1 \u0b8e\u0ba3\u0bcd \u0b92\u0bb0\u0bc1 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 1<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  \u0bae\u0bc0\u0ba4\u0bae\u0bcd = \u0b8e\u0ba3\u0bcd1%2<br/>\u00a0<br/>  @(\u0bae\u0bc0\u0ba4\u0bae\u0bcd == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>    ## \u0b87\u0bb0\u0b9f\u0bcd\u0b9f\u0bc8\u0baa\u0bcd\u0baa\u0b9f\u0bc8 \u0b8e\u0ba3\u0bcd, \u0b86\u0b95\u0bb5\u0bc7, \u0b87\u0ba4\u0bc1 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd \u0b85\u0bb2\u0bcd\u0bb2<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 0<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0b8e\u0ba3\u0bcd1\u0bb5\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bae\u0bc2\u0bb2\u0bae\u0bcd = \u0b8e\u0ba3\u0bcd1^0.5<br/>\u00a0<br/>    @(\u0b8e\u0ba3\u0bcd2 = 3, \u0b8e\u0ba3\u0bcd2 &lt;= \u0b8e\u0ba3\u0bcd1\u0bb5\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bae\u0bc2\u0bb2\u0bae\u0bcd, \u0b8e\u0ba3\u0bcd2 = \u0b8e\u0ba3\u0bcd2 + 2) \u0b86\u0b95<br/>\u00a0<br/>      \u0bae\u0bc0\u0ba4\u0bae\u0bcd1 = \u0b8e\u0ba3\u0bcd1%\u0b8e\u0ba3\u0bcd2<br/>\u00a0<br/>      @(\u0bae\u0bc0\u0ba4\u0bae\u0bcd1 == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>        ## \u0b8f\u0ba4\u0bc7\u0ba9\u0bc1\u0bae\u0bcd \u0b93\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe\u0bb2\u0bcd \u0bae\u0bc1\u0bb4\u0bc1\u0bae\u0bc8\u0baf\u0bbe\u0b95 \u0bb5\u0b95\u0bc1\u0baa\u0b9f\u0bcd\u0b9f\u0bc1\u0bb5\u0bbf\u0b9f\u0bcd\u0b9f\u0ba4\u0bc1, \u0b86\u0b95\u0bb5\u0bc7 \u0b85\u0ba4\u0bc1 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd \u0b85\u0bb2\u0bcd\u0bb2<br/>\u00a0<br/>        \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 0<br/>\u00a0<br/>      \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 1<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0baa\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bc6\u0b9f\u0bc1(\u0b8e\u0ba3\u0bcd1)<br/>\u00a0<br/>  ## \u0b87\u0ba8\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0ba9\u0bcd \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bc8\u0b95\u0bcd \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0ba8\u0bcd\u0ba4\u0bc1 \u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0baf\u0bb2\u0bcd \u0b87\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>  \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd = \u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0baf\u0bb2\u0bcd()<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd1 &lt; 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>    ## \u0b8e\u0ba4\u0bbf\u0bb0\u0bcd\u0bae\u0bb1\u0bc8 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc8 \u0ba8\u0bc7\u0bb0\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0ba4\u0bb2\u0bcd<br/>\u00a0<br/>    \u0b8e\u0ba3\u0bcd1 = \u0b8e\u0ba3\u0bcd1 * (-1)<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd1 &lt;= 1) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>    ## \u0b92\u0ba9\u0bcd\u0bb1\u0bc1 \u0b85\u0bb2\u0bcd\u0bb2\u0ba4\u0bc1 \u0b85\u0ba4\u0bb1\u0bcd\u0b95\u0bc1\u0b95\u0bcd \u0b95\u0bc1\u0bb1\u0bc8\u0bb5\u0bbe\u0ba9 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0baa\u0bcd \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd \u0bb5\u0bbf\u0b95\u0bbf\u0ba4\u0bae\u0bcd \u0b95\u0ba3\u0bcd\u0b9f\u0bb1\u0bbf\u0baf\u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bbe\u0ba4\u0bc1<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  @(\u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0ba3\u0bbe(\u0b8e\u0ba3\u0bcd1) == 1) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>    ## \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b8e\u0ba3\u0bcd\u0ba3\u0bc7 \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe\u0b95 \u0b85\u0bae\u0bc8\u0ba8\u0bcd\u0ba4\u0bc1\u0bb5\u0bbf\u0b9f\u0bcd\u0b9f\u0bbe\u0bb2\u0bcd, \u0b85\u0ba4\u0bb1\u0bcd\u0b95\u0bc1 \u0b85\u0ba4\u0bc1\u0bb5\u0bc7 \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd \u0b95\u0bc2\u0bb1\u0bc1 \u0b86\u0b95\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b87\u0ba3\u0bc8(\u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd, \u0b8e\u0ba3\u0bcd1)<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  \u0ba4\u0bbe\u0bb1\u0bcd\u0b95\u0bbe\u0bb2\u0bbf\u0b95\u0b8e\u0ba3\u0bcd = \u0b8e\u0ba3\u0bcd1<br/>\u00a0<br/>  \u0b8e\u0ba3\u0bcd2 = 2<br/>\u00a0<br/>  @(\u0b8e\u0ba3\u0bcd2 &lt;= \u0ba4\u0bbe\u0bb1\u0bcd\u0b95\u0bbe\u0bb2\u0bbf\u0b95\u0b8e\u0ba3\u0bcd) \u0bb5\u0bb0\u0bc8<br/>\u00a0<br/>    \u0bb5\u0bbf\u0b9f\u0bc81 = \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0ba3\u0bbe(\u0b8e\u0ba3\u0bcd2)<br/>    \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd\u0ba4\u0bca\u0b9f\u0b99\u0bcd\u0b95\u0bc1 = 0<br/>\u00a0<br/>    @(\u0bb5\u0bbf\u0b9f\u0bc81 == 1) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>      \u0bb5\u0bbf\u0b9f\u0bc82 = \u0ba4\u0bbe\u0bb1\u0bcd\u0b95\u0bbe\u0bb2\u0bbf\u0b95\u0b8e\u0ba3\u0bcd%\u0b8e\u0ba3\u0bcd2<br/>\u00a0<br/>      @(\u0bb5\u0bbf\u0b9f\u0bc82 == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>        ## \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe\u0bb2\u0bcd \u0bae\u0bc1\u0bb4\u0bc1\u0bae\u0bc8\u0baf\u0bbe\u0b95 \u0bb5\u0b95\u0bc1\u0baa\u0b9f\u0bcd\u0b9f\u0bc1\u0bb3\u0bcd\u0bb3\u0ba4\u0bc1, \u0b85\u0ba4\u0ba9\u0bc8\u0baa\u0bcd \u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0baf\u0bb2\u0bbf\u0bb2\u0bcd \u0b87\u0ba3\u0bc8\u0b95\u0bcd\u0b95\u0bbf\u0bb1\u0bcb\u0bae\u0bcd<br/>\u00a0<br/>        \u0baa\u0bbf\u0ba9\u0bcd\u0b87\u0ba3\u0bc8(\u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd, \u0b8e\u0ba3\u0bcd2)<br/>        \u0ba4\u0bbe\u0bb1\u0bcd\u0b95\u0bbe\u0bb2\u0bbf\u0b95\u0b8e\u0ba3\u0bcd = \u0ba4\u0bbe\u0bb1\u0bcd\u0b95\u0bbe\u0bb2\u0bbf\u0b95\u0b8e\u0ba3\u0bcd/\u0b8e\u0ba3\u0bcd2<br/>\u00a0<br/>        ## \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bbf\u0bb2\u0bcd \u0ba4\u0bca\u0b9f\u0b99\u0bcd\u0b95\u0bbf \u0b87\u0ba4\u0bc7 \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bc1\u0ba4\u0bb2\u0bc8\u0ba4\u0bcd \u0ba4\u0bca\u0b9f\u0bb0\u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>        \u0b8e\u0ba3\u0bcd2 = 2<br/>        \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd\u0ba4\u0bca\u0b9f\u0b99\u0bcd\u0b95\u0bc1 = 1<br/>\u00a0<br/>      \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    @(\u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd\u0ba4\u0bca\u0b9f\u0b99\u0bcd\u0b95\u0bc1 == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>      ## \u0b85\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bc7\u0bb0\u0bcd\u0ba8\u0bcd\u0ba4\u0bc6\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bc1\u0ba4\u0bb2\u0bc8\u0ba4\u0bcd \u0ba4\u0bca\u0b9f\u0bb0\u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>      \u0b8e\u0ba3\u0bcd2 = \u0b8e\u0ba3\u0bcd2 + 1<br/>\u00a0<br/>    \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>  \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0b85 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0baa\u0bcd \u0baa\u0bbf\u0b9f\u0bbf\u0ba4\u0bcd\u0ba4 \u0b93\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd: \"))<br/>\u00a0<br/>\u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd = \u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0baf\u0bb2\u0bcd()<br/>\u00a0<br/>\u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd = \u0baa\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bc6\u0b9f\u0bc1(\u0b85)<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba4\u0ba8\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0ba9\u0bcd \u0baa\u0b95\u0bbe \u0b8e\u0ba3\u0bcd \u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd \u0b87\u0bb5\u0bc8: \", \u0baa\u0b95\u0bbe\u0b8e\u0ba3\u0bcd\u0b95\u0bc2\u0bb1\u0bc1\u0b95\u0bb3\u0bcd <br/>\u00a0</pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> decompose_prime n <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop c p <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> c <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>    <span class=\"kw1\">elif</span> c <span class=\"sy0\">%</span> p <span class=\"sy0\">=</span> 0I <span class=\"kw1\">then</span> p\u00a0:: <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>c<span class=\"sy0\">/</span>p<span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> loop c <span class=\"br0\">(</span>p <span class=\"sy0\">+</span> 1I<span class=\"br0\">)</span><br/>\u00a0<br/>  loop n 2I<br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>decompose_prime 600851475143I<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USING: io kernel math math.parser math.primes.factors sequences\u00a0;<br/>\u00a0<br/>27720 factors <br/>[ number&gt;string ] map<br/>\" \" join print\u00a0;</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">[2[\\<a class=\"__cf_email__\" data-cfemail=\"99bdd9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$$*@&gt;~][\\<a class=\"__cf_email__\" data-cfemail=\"694d29\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"b296f2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"133753\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"3f1b7f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/*=$[%$.\" \"<a class=\"__cf_email__\" data-cfemail=\"c4e084\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/\\0~]?~[1+1|]?]#%.]d:<br/>27720d;!   {2 2 2 3 3 5 7 11}</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: decomp ( n -- )<br/>  2<br/>  begin  2dup dup * &gt;=<br/>  while  2dup /mod swap<br/>         if   drop  1+ 1 or    \\ next odd number<br/>         else -rot nip  dup .<br/>         then<br/>  repeat<br/>  drop .\u00a0;</pre>"}, {"lang": "Fortran", "loc": 31, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> PrimeDecompose<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"kw4\">huge</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">! =&gt; integer(8) ... more fails on my 32 bit machine with gfortran(gcc) 4.3.2</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> find_factors<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">div</span>, next, rest<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    div <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; next <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>; rest <span class=\"sy0\">=</span> n<br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> rest <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>rest, div<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <br/>          d<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> div<br/>          i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>          rest <span class=\"sy0\">=</span> rest <span class=\"sy0\">/</span> div<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>       div <span class=\"sy0\">=</span> next<br/>       next <span class=\"sy0\">=</span> next <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> find_factors<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> PrimeDecompose</pre>"}, {"lang": "FreeBASIC", "loc": 53, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">While</span> d * d &lt;= n<br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> getPrimeFactors<span class=\"br0\">(</span>factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Redim</span> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    factors<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = n<br/>    <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Dim</span> factor <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> factor = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> factors<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      factors<span class=\"br0\">(</span><span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"br0\">)</span> = factor<br/>      n \\= factor     <br/>      <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>      <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> factor = n<br/>    <span class=\"kw1\">Else</span><br/>      factor += <span class=\"nu0\">1</span>  <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span>    <br/>  <span class=\"kw1\">Loop</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/><span class=\"kw1\">Dim</span> primes<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">29</span>, <span class=\"nu0\">31</span>, <span class=\"nu0\">37</span>, <span class=\"nu0\">41</span>, <span class=\"nu0\">43</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">53</span>, <span class=\"nu0\">59</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> <br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">17</span><br/>  <span class=\"kw1\">Erase</span> factors<br/>  n = <span class=\"nu0\">1</span> <span class=\"kw1\">Shl</span> primes<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>  getPrimeFactors factors<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"2^\"</span>;<span class=\"kw1\">Str</span><span class=\"br0\">(</span>primes<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" - 1 = \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; <span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>;<span class=\"st0\">\" =&gt; \"</span>;<br/>  <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><br/>     <span class=\"kw1\">Print</span> factors<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>     <span class=\"kw1\">If</span> j &lt; <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\" x \"</span>;<br/>  <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">println[factor[2^508-1]]</pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">FactorsInt(2^67-1); <br/># [ 193707721, 761838257287 ]</pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>\tZERO <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\tONE  <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Primes<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>\tres <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">{}</span><br/>\tmod<span class=\"sy1\">,</span> div <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">),</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>\t\tdiv<span class=\"sy3\">.</span>DivMod<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> mod<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> mod<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>ZERO<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tres <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>res<span class=\"sy1\">,</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>\t\t\tn<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>div<span class=\"sy1\">)</span><br/>\t\t\tdiv<span class=\"sy3\">.</span>DivMod<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> mod<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"nu2\">i</span><span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> ONE<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> res<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tvals <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int64</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"nu0\">1</span> &lt;&lt; <span class=\"nu0\">31</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">1234567</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">333333</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">987653</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> <span class=\"nu0\">7</span> <span class=\"sy3\">*</span> <span class=\"nu0\">11</span> <span class=\"sy3\">*</span> <span class=\"nu0\">13</span> <span class=\"sy3\">*</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> vals <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>v<span class=\"sy1\">,</span> <span class=\"st0\">\"-&gt;\"</span><span class=\"sy1\">,</span> Primes<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span><span class=\"me1\">NewInt</span><span class=\"sy1\">(</span>v<span class=\"sy1\">)))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 29, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factorize <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20long\"><span class=\"kw4\">long</span></a> target <span class=\"sy0\">-&gt;</span> <br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>target <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L<span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>target <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L, target<span class=\"br0\">]</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> targetSqrt <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> lowfactors <span class=\"sy0\">=</span> <span class=\"br0\">(</span>2L..<span class=\"me1\">targetSqrt</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span>target <span class=\"sy0\">%</span> it<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lowfactors <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span>1L, target<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nhalf <span class=\"sy0\">=</span> lowfactors.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lowfactors<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> target<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> lowfactors <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nhalf<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> target.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span>lowfactors<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>target<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> decomposePrimes <span class=\"sy0\">=</span> <span class=\"br0\">{</span> target <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factors <span class=\"sy0\">=</span> factorize<span class=\"br0\">(</span>target<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> primeFactors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    factors.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a> <span class=\"br0\">{</span> f, i <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">||</span> factors<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>i<span class=\"br0\">]</span>.<span class=\"me1\">every</span> <span class=\"br0\">{</span>f <span class=\"sy0\">%</span> it <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            primeFactors <span class=\"sy0\">&lt;&lt;</span> f<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> pfPower <span class=\"sy0\">=</span> f<span class=\"sy0\">*</span>f<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>target <span class=\"sy0\">%</span> pfPower <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                primeFactors <span class=\"sy0\">&lt;&lt;</span> f<br/>                pfPower <span class=\"sy0\">*=</span> f<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    primeFactors<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\">factorize n <span class=\"sy0\">=</span> <span class=\"br0\">[</span> d <span class=\"sy0\">|</span> p <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> isPrime p<span class=\"sy0\">,</span> d <span class=\"sy0\">&lt;-</span> divs n p <span class=\"br0\">]</span><br/>           <span class=\"co1\">-- [2..n] &gt;&gt;= (\\p-&gt; [p|isPrime p]) &gt;&gt;= divs n</span><br/>    <span class=\"kw1\">where</span><br/>    divs n p <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> p\u00a0: divs <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n p<span class=\"br0\">)</span> p <br/>             <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>    <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>factors <span class=\"sy1\">:=</span> primedecomp<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">^</span><span class=\"nu0\">43</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\"># a big int</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> primedecomp<span class=\"br0\">(</span>n<span class=\"br0\">)</span>         <span class=\"co1\">#: return a list of factors</span><br/><span class=\"kw2\">local</span> F<span class=\"sy1\">,</span>o<span class=\"sy1\">,</span>x<br/>F <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>o<span class=\"sy1\">,</span>n<span class=\"sy1\">|</span><span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> genfactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"sy1\">\\</span>o <span class=\"sy1\">:=</span> <span class=\"st0\">\"*\"</span><br/>   <span class=\"sy1\">/</span>o <span class=\"sy1\">:=</span> <span class=\"st0\">\"=\"</span><br/>   <span class=\"kw4\">put</span><span class=\"br0\">(</span>F<span class=\"sy1\">,</span>x<span class=\"br0\">)</span>   <span class=\"co1\"># build a list of factors to satisfy the task</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> F<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> factors</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">q:</pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> prime<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> i<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 39, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> run_factorize<span class=\"br0\">(</span>input<span class=\"sy0\">,</span> output<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> BigInteger<span class=\"br0\">(</span>input.<span class=\"me1\">value</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> TWO <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> divisor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> prod <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>    output.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> qr <span class=\"sy0\">=</span> n.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>qr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>BigInteger.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prod<span class=\"br0\">)</span> <br/>                output.<span class=\"me1\">value</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span> <br/>            <span class=\"kw1\">else</span> <br/>                prod <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <br/>            output.<span class=\"me1\">value</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">=</span> qr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span><span class=\"sy0\">!</span>n.<span class=\"me1\">equals</span><span class=\"br0\">(</span>BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> qr <span class=\"sy0\">=</span> n.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>divisor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>qr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>BigInteger.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prod<span class=\"br0\">)</span> <br/>                output.<span class=\"me1\">value</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span> <br/>            <span class=\"kw1\">else</span> <br/>                prod <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <br/>            output.<span class=\"me1\">value</span> <span class=\"sy0\">+=</span> divisor<span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">=</span> qr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <br/>            divisor <span class=\"sy0\">=</span> divisor.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 14, "block": "<pre class=\"text highlighted_source\">def factors:<br/>  . as $in <br/>  | [2, $in, false]<br/>  | recurse( .[0] as $p |.[1] as $q | .[2] as $valid | .[3] as $s<br/>             | if $q == 1        then empty<br/>\t       elif $q\u00a0% $p == 0 then [$p, $q/$p, true]<br/>               elif $p == 2      then [3, $q, false, $s]<br/>               else<br/>\t         ($s // ($q | sqrt)) as $s<br/>\t         | if $p + 2 &lt;= $s then [$p + 2, $q, false, $s]<br/>      \t           else [$q, 1, true]<br/>\t\t   end<br/>\t       end )<br/>   | if .[2] then .[0] else empty end\u00a0;</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>julia&gt; Pkg.add(\"Primes\")<br/>julia&gt; factor(8796093022207)<br/>[9719=&gt;1,431=&gt;1,2099863=&gt;1]<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigTwo   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>2L<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigThree <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>3L<span class=\"br0\">)</span><br/>\u00a0<br/>fun getPrimeFactors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>BigInteger<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>BigInteger<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> bigTwo<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> factor <span class=\"sy0\">=</span> bigTwo<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> factor <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>factor<span class=\"br0\">)</span><br/>            nn /<span class=\"sy0\">=</span> factor<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> factors<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> factor <span class=\"sy0\">=</span> nn<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factor <span class=\"sy0\">&gt;=</span> bigThree<span class=\"br0\">)</span> factor +<span class=\"sy0\">=</span> bigTwo <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factor <span class=\"sy0\">=</span> bigThree<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">29</span>, <span class=\"nu0\">31</span>, <span class=\"nu0\">37</span>, <span class=\"nu0\">41</span>, <span class=\"nu0\">43</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">53</span>, <span class=\"nu0\">59</span>, <span class=\"nu0\">61</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">71</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">79</span>, <span class=\"nu0\">83</span>, <span class=\"nu0\">89</span>, <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>prime in primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigPow2 <span class=\"sy0\">=</span> bigTwo.<span class=\"me1\">pow</span><span class=\"br0\">(</span>prime<span class=\"br0\">)</span> - BigInteger.<span class=\"me1\">ONE</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"2^${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(prime)} - 1 = ${bigPow2.toString().padEnd(30)} =&gt; ${getPrimeFactors(bigPow2)}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 12, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>factors n <span class=\"nu0\">2</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factors<br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> _ acc<span class=\"br0\">)</span><br/>    acc<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>n k acc<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>factors <span class=\"br0\">(</span>div n k<span class=\"br0\">)</span> k <span class=\"br0\">(</span><span class=\"kw1\">cons</span> k acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>n k acc<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>factors n <span class=\"br0\">(</span>+ k <span class=\"nu0\">1</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 23, "block": "<pre class=\"text highlighted_source\">-- Returns list of prime factors for given number.<br/>-- To overcome the limits of integers (signed 32-bit in Lingo),<br/>-- the number can be specified as float (which works up to 2^53).<br/>-- For the same reason, values in returned list are floats, not integers.<br/>on getPrimeFactors (n)<br/>  f = []<br/>  f.sort()<br/>  c = sqrt(n)<br/>  i = 1.0<br/>  repeat while TRUE<br/>    i=i+1<br/>    if i&gt;c then exit repeat<br/>    check = n/i<br/>    if bitOr(check,0)=check then<br/>      f.add(i)<br/>      n = check<br/>      c = sqrt(n)<br/>      i = 1.0<br/>    end if<br/>  end repeat<br/>  f.add(n)<br/>  return f<br/>end</pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to decompose\u00a0:n [:p 2]<br/>  if\u00a0:p*:p &gt;\u00a0:n [output (list\u00a0:n)]<br/>  if less? 0 modulo\u00a0:n\u00a0:p [output (decompose\u00a0:n bitor 1\u00a0:p+1)]<br/>  output fput\u00a0:p (decompose\u00a0:n/:p\u00a0:p)<br/>end</pre>"}, {"lang": "Lua", "loc": 22, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> PrimeDecomposition<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> IsPrime<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">return</span> f<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">repeat</span><br/>        <span class=\"kw1\">while</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>            f<span class=\"br0\">[</span><span class=\"sy0\">#</span>f<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> i<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">repeat</span><br/>            i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">until</span> IsPrime<span class=\"br0\">(</span> i <span class=\"br0\">)</span>       <br/>    <span class=\"kw1\">until</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt; ifactor(1337);<br/>                                   (7)  (191)<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\"> FactorInteger[2016] =&gt; {{2, 5}, {3, 2}, {7, 1}}</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>outputPrimeDecomposition<span class=\"br0\">]</span> = primedecomposition<span class=\"br0\">(</span>inputValue<span class=\"br0\">)</span><br/>   outputPrimeDecomposition = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/factor.html\"><span class=\"kw2\">factor</span></a><span class=\"br0\">(</span>inputValue<span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">(%i1) display2d: false$ /* disable rendering exponents as superscripts */<br/>(%i2) factor(2016);<br/>(%o2) 2^5*3^2*7<br/>\u00a0</pre>"}, {"lang": "MUMPS", "loc": 22, "block": "<pre class=\"text highlighted_source\">ERATO1(HI)<br/> SET HI=HI\\1<br/> KILL ERATO1\u00a0;Don't make it new - we want it to remain after the quit<br/> NEW I,J,P<br/> FOR I=2:1:(HI**.5)\\1 DO<br/> .FOR J=I*I:I:HI DO<br/> ..SET P(J)=1\u00a0;$SELECT($DATA(P(J))#10:P(J)+1,1:1)<br/>\u00a0;WRITE\u00a0!,\"Prime numbers between 2 and \",HI,\": \"<br/> FOR I=2:1:HI DO<br/> .S:'$DATA(P(I)) ERATO1(I)=I\u00a0;WRITE $SELECT((I&lt;3):\"\",1:\", \"),I<br/> KILL I,J,P<br/> QUIT<br/>PRIMDECO(N)<br/>\u00a0;Returns its results in the string PRIMDECO<br/>\u00a0;Kill that before the first call to this recursive function<br/> QUIT:N&lt;=1<br/> IF $D(PRIMDECO)=1 SET PRIMDECO=\"\" D ERATO1(N)<br/> SET N=N\\1,I=0<br/> FOR  SET I=$O(ERATO1(I)) Q:+I&lt;1  Q:'(N#I)<br/> IF I&gt;1 SET PRIMDECO=$S($L(PRIMDECO)&gt;0:PRIMDECO_\"^\",1:\"\")_I D PRIMDECO(N/I)<br/>\u00a0;that is, if I is a factor of N, add it to the string<br/> QUIT</pre>"}, {"lang": "Nim", "loc": 47, "block": "<pre class=\"text highlighted_source\">import strutils, math, sequtils, times<br/>\u00a0<br/>proc getStep(n: int64)\u00a0: int64 {.inline.} =<br/>   result = 1 + n*4 - int64(n /% 2)*2<br/>\u00a0<br/>proc primeFac(n: int64): seq[int64] =    <br/>    var res: seq[int64] = @[]<br/>    var maxq = int64(floor(sqrt(float(n))))<br/>    var d = 1<br/>    var q: int64 = (n\u00a0%% 2) and 2 or 3    # either 2 or 3, alternating<br/>    while (q &lt;= maxq) and ((n\u00a0%% q)\u00a0!= 0):<br/>        q = getStep(d)<br/>        d += 1<br/>    if q &lt;= maxq:        <br/>        var q1: seq[int64] = primeFac(n /% q)<br/>        var q2: seq[int64] = primeFac(q)<br/>        res = concat(q2, q1, res)<br/>    else: <br/>        res.add(n)    <br/>    result = res<br/>\u00a0<br/>var is_prime: seq[Bool] = @[]<br/>is_prime.add(False)<br/>is_prime.add(False)<br/>\u00a0<br/>iterator primes(limit: int): int =<br/>    for n in high(is_prime) .. limit+2: is_prime.add(True)    <br/>    for n in 2 .. limit + 1:<br/>        if is_prime[n]:<br/>            yield n<br/>            for i in countup((n *% n), limit+1, n): # start at ``n`` squared<br/>                try:<br/>                    is_prime[i] = False<br/>                except EInvalidIndex: break<br/>\u00a0<br/># Example: calculate factors of Mersenne numbers to M59 #<br/>\u00a0<br/>for m in primes(59):<br/>    var p = int64(pow(2.0,float(m)) - 1) <br/>    write(stdout,\"2**$1-1 = $2, with factors: \"\u00a0% [$m, $p] )<br/>    var start = cpuTime()<br/>    var f = primeFac(p)<br/>    for factor in f:<br/>        write(stdout, factor)<br/>        write(stdout, \", \")<br/>        FlushFile(stdout)<br/>    writeln(stdout, \"=&gt; $#ms\"\u00a0% $int(1000*(cpuTime()-start)) )</pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Big_int.html\"><span class=\"kw2\">Big_int</span></a><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> prime_decomposition x <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> inner c p <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> lt_big_int p <span class=\"br0\">(</span>square_big_int c<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> eq_big_int <span class=\"br0\">(</span>mod_big_int p c<span class=\"br0\">)</span> zero_big_int <span class=\"kw1\">then</span><br/>      c <span class=\"sy0\">::</span> inner c <span class=\"br0\">(</span>div_big_int p c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      inner <span class=\"br0\">(</span>succ_big_int c<span class=\"br0\">)</span> p<br/>  <span class=\"kw1\">in</span><br/>  inner <span class=\"br0\">(</span>succ_big_int <span class=\"br0\">(</span>succ_big_int zero_big_int<span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\">r <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/factor.html\"><span class=\"kw6\">factor</span></a><span class=\"br0\">(</span><span class=\"nu0\">120202039393</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 14, "block": "<pre class=\"text highlighted_source\">: factors(n) \t// ( aInteger -- aList )<br/>| k p |<br/>   ListBuffer new<br/>   2 -&gt;k<br/>   n nsqrt -&gt;p<br/>   while( k p &lt;= ) [<br/>      n k /mod swap ifZero: [ <br/>         dup -&gt;n nsqrt -&gt;p <br/>         k over add continue<br/>         ]<br/>      drop k 1+ -&gt;k<br/>      ]<br/>   n 1 &gt; ifTrue: [ n over add ] <br/>   dup freeze\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">pd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>f<span class=\"sy0\">=</span><span class=\"kw1\">factor</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"sy0\">=</span>f<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span>~<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">--,</span><br/>      v<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>f<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 38, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> PrimeDecomposition<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  DynArray <span class=\"sy3\">=</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> findFactors<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span> <span class=\"kw1\">var</span> d<span class=\"sy1\">:</span> DynArray<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    divisor<span class=\"sy1\">,</span> next<span class=\"sy1\">,</span> rest<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    divisor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    next <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>    rest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>rest &lt;&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>rest <span class=\"kw1\">mod</span> divisor <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        setlength<span class=\"br0\">(</span>d<span class=\"sy1\">,</span> i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> divisor<span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        rest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> rest <span class=\"kw1\">div</span> divisor<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      divisor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> next<span class=\"sy1\">;</span><br/>      next <span class=\"sy1\">:</span><span class=\"sy3\">=</span> next <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  factors<span class=\"sy1\">:</span> DynArray<span class=\"sy1\">;</span><br/>  j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  setlength<span class=\"br0\">(</span>factors<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  findFactors<span class=\"br0\">(</span><span class=\"nu0\">1023</span><span class=\"sy3\">*</span><span class=\"nu0\">1024</span><span class=\"sy1\">,</span> factors<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>factors<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>factors<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> prime_factors <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">@out</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$d</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$n</span> <span class=\"sy0\">/=</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"kw1\">until</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">@out</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@{[prime_factors(1001)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 31, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> prime<span class=\"sy0\">-</span>factors <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">sort</span> flat prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> find<span class=\"sy0\">-</span>factor <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span>      <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rho</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$rho</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$fixed</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$rho</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$constant</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$fixed</span> <span class=\"br0\">)</span> gcd <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">2</span>\u00b2\u2079<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u2074\u00b9<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u2075\u2079<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u2077\u00b9<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u2077\u2079<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u2079\u2077<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>\u00b9\u00b9\u2077<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/><span class=\"nu0\">5465610891074107968111136514192945634873647594456118359804135903459867604844945580205745718497</span><br/> <span class=\"sy0\">-&gt;</span>  <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"factors of $n: \"</span><span class=\"sy0\">,</span><br/>    prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' \u00d7 '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span> in \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>now <span class=\"sy0\">-</span> <span class=\"re0\">$start</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%0.3f\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" sec.\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 31, "block": "<pre class=\"text highlighted_source\">atom t0 = time()<br/>include builtins\\bigatom.e<br/>constant zero = ba_new(0)<br/>\u00a0<br/>function ba_factorise(bigatom n)<br/>sequence res = {}<br/>bigatom p = ba_new(2),<br/>        lim = ba_floor(ba_sqrt(n))<br/>integer step = 1<br/>\u00a0<br/>    while ba_compare(p,lim)&lt;=0 do<br/>        while ba_remainder(n,p)=zero do<br/>            res = append(res,ba_sprint(p))<br/>            n = ba_divide(n,p)<br/>            if ba_compare(n,p)=0 then exit end if<br/>            lim = ba_floor(ba_sqrt(n))<br/>        end while<br/>        p = ba_add(p,step)<br/>        step = 2<br/>    end while<br/>    res = append(res,ba_sprint(n))<br/>    return res<br/>end function<br/>\u00a0<br/>sequence primes = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47}--,53,59}<br/>\u00a0<br/>for i=1 to length(primes) do<br/>   \u00a0?ba_factorise(ba_sub(ba_power(2,primes[i]),1))<br/>end for<br/>?ba_factorise(ba_new(\"600851475143\"))<br/>?time()-t0</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de factor (N)<br/>   (make<br/>      (let (D 2  L (1 2 2 . (4 2 4 2 4 6 2 6 .))  M (sqrt N))<br/>         (while (&gt;= M D)<br/>            (if (=0 (% N D))<br/>               (setq M (sqrt (setq N (/ N (link D)))))<br/>               (inc 'D (pop 'L)) ) )<br/>         (link N) ) ) )<br/>\u00a0<br/>(factor 1361129467683753853853498429727072845823)</pre>"}, {"lang": "PL/I", "loc": 39, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/>test<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"sy0\">,</span> <span class=\"kw1\">reorder</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> n<span class=\"sy0\">,</span> <span class=\"st0\">'['</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>restart<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">if</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">']'</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">stop</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> is_prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> restart<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> <span class=\"st0\">' ]'</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>is_prime<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">reorder</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">by</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> is_prime<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> test<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 34, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> eratosthenes <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$prime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">function</span> multiple<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$j</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        multiple <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>multiple <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span><span class=\"br0\">{</span><span class=\"re0\">$prime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Error</span> <span class=\"st0\">\"$n is not greater than 1\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> prime<span class=\"sy0\">-</span>decomposition <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$array</span> <span class=\"sy0\">=</span> eratosthenes <span class=\"re0\">$n</span><br/>    <span class=\"re0\">$prime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"kw3\">in</span> <span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$p</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span> <span class=\"sy0\">/=</span> <span class=\"re0\">$p</span><br/>            <span class=\"re0\">$prime</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$prime</span><br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$(prime-decomposition  12)\"</span><br/><span class=\"st0\">\"$(prime-decomposition  100)\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 37, "block": "<pre class=\"prolog highlighted_source\">prime_decomp<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tSN <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprime_decomp_1<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> SN<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>prime_decomp_1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Special case for 2, increment 1</span><br/>prime_decomp_1<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> SN<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> D <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t    Q <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">/</span> D<span class=\"sy4\">,</span><br/>\t    SQ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>Q<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    prime_decomp_1<span class=\"br0\">(</span>Q<span class=\"sy4\">,</span> SQ<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> <span class=\"br0\">[</span>D <span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span><br/>\t    D1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> D<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t    <span class=\"br0\">(</span>\tD1 <span class=\"sy6\">&gt;</span> SN <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t        LF <span class=\"sy6\">=</span> <span class=\"br0\">[</span>N <span class=\"sy5\">|</span>L<span class=\"br0\">]</span><br/>\t    <span class=\"sy4\">;</span><br/>\t        prime_decomp_2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> SN<span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% General case, increment 2</span><br/>prime_decomp_2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>prime_decomp_2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> SN<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> D <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t    Q <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">/</span> D<span class=\"sy4\">,</span><br/>\t    SQ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>Q<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t    prime_decomp_2<span class=\"br0\">(</span>Q<span class=\"sy4\">,</span> SQ<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> <span class=\"br0\">[</span>D <span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    D1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> D<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\t    <span class=\"br0\">(</span>\tD1 <span class=\"sy6\">&gt;</span> SN <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t        LF <span class=\"sy6\">=</span> <span class=\"br0\">[</span>N <span class=\"sy5\">|</span>L<span class=\"br0\">]</span><br/>\t    <span class=\"sy4\">;</span><br/>\t        prime_decomp_2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> SN<span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Pure", "loc": 6, "block": "<pre class=\"text highlighted_source\">factor n = factor 2 n with<br/>  factor k n = k\u00a0: factor k (n div k) if n mod k == 0;<br/>\t     = if n&gt;1 then [n] else [] if k*k&gt;n;<br/>\t     = factor (k+1) n if k==2;<br/>\t     = factor (k+2) n otherwise;<br/>end;</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">CompilerIf</span> #PB_Compiler_Debugger<br/>  <span class=\"kw1\">CompilerError</span> <span class=\"st0\">\"Turn off the debugger if you want reasonable speed in this example.\"</span><br/><span class=\"kw1\">CompilerEndIf</span><br/>\u00a0<br/><span class=\"kw1\">Define</span>.q<br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Factor<span class=\"br0\">(</span>Number, List Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">While</span> Number <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    Number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Protected</span> Max <span class=\"sy0\">=</span> Number<br/>  <span class=\"kw1\">While</span> I <span class=\"sy0\">&lt;=</span> Max <span class=\"kw1\">And</span> Number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">While</span> Number <span class=\"sy0\">%</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<br/>      Number<span class=\"sy0\">/</span>I<br/>    <span class=\"kw1\">Wend</span><br/>    I <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>Number <span class=\"sy0\">=</span> <span class=\"nu0\">9007199254740991</span><br/><span class=\"kw1\">NewList</span> Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>time <span class=\"sy0\">=</span> <span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Factor<span class=\"br0\">(</span>Number, Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>time <span class=\"sy0\">=</span> <span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>time<br/>S.s <span class=\"sy0\">=</span> <span class=\"st0\">\"Factored \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" in \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>time<span class=\"sy0\">/</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" seconds.\"</span><br/><span class=\"kw1\">ForEach</span> Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  S <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, S<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 88, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> islice<span class=\"sy0\">,</span> cycle<span class=\"sy0\">,</span> count<br/>\u00a0<br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> compress<br/><span class=\"kw1\">except</span> <span class=\"kw2\">ImportError</span>:<br/>    <span class=\"kw1\">def</span> compress<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> selectors<span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F\"\"\"</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>d <span class=\"kw1\">for</span> d<span class=\"sy0\">,</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> selectors<span class=\"br0\">)</span> <span class=\"kw1\">if</span> s<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> decompose<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">class</span> IsPrimeCached<span class=\"br0\">(</span><span class=\"kw2\">dict</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> __missing__<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>        r <span class=\"sy0\">=</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw2\">self</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r<br/>        <span class=\"kw1\">return</span> r<br/>\u00a0<br/>is_prime_cached <span class=\"sy0\">=</span> IsPrimeCached<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> croft<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Yield prime integers using the Croft Spiral sieve.<br/>\u00a0<br/>    This is a variant of wheel factorisation modulo 30.<br/>    \"\"\"</span><br/>    <span class=\"co1\"># Copied from:</span><br/>    <span class=\"co1\">#   https://code.google.com/p/pyprimes/source/browse/src/pyprimes.py</span><br/>    <span class=\"co1\"># Implementation is based on erat3 from here:</span><br/>    <span class=\"co1\">#   http://stackoverflow.com/q/2211990</span><br/>    <span class=\"co1\"># and this website:</span><br/>    <span class=\"co1\">#   http://www.primesdemystified.com/</span><br/>    <span class=\"co1\"># Memory usage increases roughly linearly with the number of primes seen.</span><br/>    <span class=\"co1\"># dict ``roots`` stores an entry x:p for every prime p.</span><br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">yield</span> p<br/>    roots <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">9</span>: <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span>: <span class=\"nu0\">5</span><span class=\"br0\">}</span>  <span class=\"co1\"># Map d**2 -&gt; d.</span><br/>    primeroots <span class=\"sy0\">=</span> <span class=\"kw2\">frozenset</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    selectors <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> compress<span class=\"br0\">(</span><br/>            <span class=\"co1\"># Iterate over prime candidates 7, 9, 11, 13, ...</span><br/>            islice<span class=\"br0\">(</span>count<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"co1\"># Mask out those that can't possibly be prime.</span><br/>            cycle<span class=\"br0\">(</span>selectors<span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span>:<br/>        <span class=\"co1\"># Using dict membership testing instead of pop gives a</span><br/>        <span class=\"co1\"># 5-10% speedup over the first three million primes.</span><br/>        <span class=\"kw1\">if</span> q <span class=\"kw1\">in</span> roots:<br/>            p <span class=\"sy0\">=</span> roots<span class=\"br0\">[</span>q<span class=\"br0\">]</span><br/>            <span class=\"kw1\">del</span> roots<span class=\"br0\">[</span>q<span class=\"br0\">]</span><br/>            x <span class=\"sy0\">=</span> q + <span class=\"nu0\">2</span>*p<br/>            <span class=\"kw1\">while</span> x <span class=\"kw1\">in</span> roots <span class=\"kw1\">or</span> <span class=\"br0\">(</span>x\u00a0% <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> primeroots:<br/>                x +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>*p<br/>            roots<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<br/>        <span class=\"kw1\">else</span>:<br/>            roots<span class=\"br0\">[</span>q*q<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<br/>            <span class=\"kw1\">yield</span> q<br/>primes <span class=\"sy0\">=</span> croft<br/>\u00a0<br/><span class=\"kw1\">def</span> decompose<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> p*p <span class=\"sy0\">&gt;</span> n: <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">while</span> n\u00a0% p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">yield</span> p<br/>            n //<span class=\"sy0\">=</span>p<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">yield</span> n<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"co1\"># Example: calculate factors of Mersenne numbers to M59 #</span><br/>\u00a0<br/>    <span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> ** m - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"2**{0:d}-1 = {1:d}, with factors:\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        start <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> factor <span class=\"kw1\">in</span> decompose<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span>factor<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">sys</span>.<span class=\"me1\">stdout</span>.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"=&gt; {0:.2f}s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-start <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> m <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">59</span>:<br/>            <span class=\"kw1\">break</span></pre>"}, {"lang": "R", "loc": 15, "block": "<pre class=\"text highlighted_source\">findfactors &lt;- function(num) {<br/>  x &lt;- c()<br/>  1stprime&lt;- 2; 2ndprime &lt;- 3; everyprime &lt;- num<br/>  while( everyprime\u00a0!= 1 ) {<br/>    while( everyprime%%1stprime == 0 ) {<br/>      x &lt;- c(x, 1stprime)<br/>      everyprime &lt;- floor(everyprime/ 1stprime)<br/>    }<br/>    1stprime &lt;- 2ndprime<br/>    2ndprime &lt;- 2ndprime + 2<br/>  }<br/>  x<br/>}<br/>\u00a0<br/>print(findfactors(1027*4))</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define (factors n)<br/>  (append-map (\u03bb (x) (make-list (cadr x) (car x))) (factorize n)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm does prime decomposition of a range of positive integers (with a prime count)*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                              <span class=\"coMULTI\">/*handle thousand digits for the powers*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>  bot  top  step   base  add            <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span>  bot==<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  bot=<span class=\"nu0\">1</span>;  top=<span class=\"nu0\">100</span>;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*no  BOT given?  Then use the default.*/</span><br/><span class=\"kw1\">if</span>  top==<span class=\"st0\">''</span>   <span class=\"kw3\">then</span>              top=bot          <span class=\"coMULTI\">/* \"  TOP?  \"       \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> step==<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> step=  <span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* \" STEP?  \"       \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> add ==<span class=\"st0\">''</span>   <span class=\"kw3\">then</span>  add= -<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* \"  ADD?  \"       \"   \"   \"     \"    */</span><br/>tell= top<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>;       top=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*if TOP is negative, suppress displays*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*get maximum width for aligned display*/</span><br/><span class=\"kw1\">if</span> base<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>base<span class=\"sy0\">**</span>top<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*will be testing powers of two later? */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>;   @<span class=\"sy0\">.</span>0=<span class=\"st0\">\"{unity}\"</span>;   @<span class=\"sy0\">.</span>1=<span class=\"st0\">'[prime]'</span> <span class=\"coMULTI\">/*some literals:  pad;  prime (or not).*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*maybe increase the digits precision. */</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*#:    is the number of primes found. */</span><br/>        <span class=\"kw1\">do</span> n=bot  <span class=\"kw2\">to</span> top  <span class=\"kw2\">by</span> step                <span class=\"coMULTI\">/*process a single number  or  a range.*/</span><br/>       \u00a0?=n;  <span class=\"kw1\">if</span> base<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>\u00a0?=base<span class=\"sy0\">**</span>n + add <span class=\"coMULTI\">/*should we perform a \"Mercenne\" test? */</span><br/>        pf=factr<span class=\"br0\">(</span>?<span class=\"br0\">)</span>;      f=<span class=\"kw6\">words</span><span class=\"br0\">(</span>pf<span class=\"br0\">)</span>            <span class=\"coMULTI\">/*get prime factors; number of factors.*/</span><br/>        <span class=\"kw1\">if</span> f==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> #=#+<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*Is N prime?  Then bump prime counter.*/</span><br/>        <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>?,w<span class=\"br0\">)</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'('</span>f<span class=\"st0\">\")\"</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>   <span class=\"st0\">'prime factors: '</span>     @<span class=\"sy0\">.</span>f     pf<br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/><span class=\"kw1\">say</span><br/>ps= <span class=\"st0\">'primes'</span>;    <span class=\"kw1\">if</span> p==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> ps= <span class=\"st0\">\"prime\"</span>       <span class=\"coMULTI\">/*setup for proper English in sentence.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>#, w+<span class=\"nu0\">9</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>       ps       <span class=\"st0\">'found.'</span>      <span class=\"coMULTI\">/*display the number of primes found.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>factr: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> d,$             <span class=\"coMULTI\">/*set X, D  to argument 1;  $  to null.*/</span><br/><span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>                          <span class=\"coMULTI\">/*handle the special case of   X = 1.  */</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"nu0\">2</span>;  x=x%2;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*append all the  2  factors of new  X.*/</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"nu0\">3</span>;  x=x%3;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*   \"    \"   \"   3     \"     \"  \"   \" */</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span><span class=\"nu0\">5</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"nu0\">5</span>;  x=x%5;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*   \"    \"   \"   5     \"     \"  \"   \" */</span><br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span><span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>;  $=$ <span class=\"nu0\">7</span>;  x=x%7;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*   \"    \"   \"   7     \"     \"  \"   \" */</span><br/>                                                 <span class=\"coMULTI\">/*                                  ___*/</span><br/>q=<span class=\"nu0\">1</span>;   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> q<span class=\"sy0\">&lt;</span>=x;  q=q<span class=\"sy0\">*</span><span class=\"nu0\">4</span>;  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*these two lines compute integer  \u221a X */</span><br/>r=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> q<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;   q=q%4;  _=d-r-q;  r=r%2;   <span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; d=_; r=r+q; <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">11</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">6</span>  <span class=\"kw2\">to</span> r                       <span class=\"coMULTI\">/*insure that  J  isn't divisible by 3.*/</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> j  <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  _                    <span class=\"coMULTI\">/*obtain the last decimal digit of  J. */</span><br/>       <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span>;  $=$ j;  x=x%j;  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*maybe reduce by J. */</span><br/>       <span class=\"kw1\">if</span> _ ==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                    <span class=\"coMULTI\">/*Is next  Y  is divisible by 5?  Skip.*/</span><br/>       y=j+<span class=\"nu0\">2</span>;          <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">//</span>y==<span class=\"nu0\">0</span>;  $=$ y;  x=x%y;  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*maybe reduce by J. */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  The $ list has a leading blank.*/</span><br/><span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> $                           <span class=\"coMULTI\">/*Is residual=unity? Then don't append.*/</span><br/>              <span class=\"kw1\">return</span> $ x                         <span class=\"coMULTI\">/*return   $   with appended residual. */</span></pre>"}, {"lang": "Ring", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>prime = 18705<br/>decomp(prime)<br/>\u00a0<br/>func decomp nr<br/>x = \"\"<br/>for i = 1 to nr<br/>    if isPrime(i) and nr\u00a0% i = 0<br/>       x = x + string(i) + \" * \" ok<br/>    if i = nr<br/>       x2 = substr(x,1,(len(x)-2))<br/>       see string(nr) + \" = \" + x2 + nl ok<br/>next <br/>\u00a0<br/>func isPrime num<br/>     if (num &lt;= 1) return 0 ok<br/>     if (num\u00a0% 2 = 0) and num\u00a0!= 2 return 0 ok<br/>     for i = 3 to floor(num / 2) -1 step 2<br/>         if (num\u00a0% i = 0) return 0 ok<br/>     next<br/>     return 1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:003:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">2543821448263974486045199</span>.<span class=\"me1\">prime_division</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">701</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1123</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2411</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1092461</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Scala", "loc": 43, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> annotation.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> collection.<span class=\"me1\">parallel</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">ParSeq</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PrimeFactors <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorize<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">@</span>tailrec<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factors<span class=\"br0\">(</span>tuple<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Long, Long, List<span class=\"br0\">[</span>Long<span class=\"br0\">]</span>, Int<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      tuple <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"sy0\">_</span>, acc, <span class=\"sy0\">_</span><span class=\"br0\">)</span>                 <span class=\"sy0\">=&gt;</span> acc<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n, k, acc, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> factors<span class=\"br0\">(</span><span class=\"br0\">(</span>n / k, k, acc ++ ParSeq<span class=\"br0\">(</span>k<span class=\"br0\">)</span>, Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n / k<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n, k, acc, sqr<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> sqr<span class=\"br0\">)</span>  <span class=\"sy0\">=&gt;</span> factors<span class=\"br0\">(</span>n, k + <span class=\"nu0\">1</span>, acc, sqr<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n, k, acc, sqr<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> sqr<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> factors<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, k, acc ++ ParSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    factors<span class=\"br0\">(</span><span class=\"br0\">(</span>n, <span class=\"nu0\">2</span>, List<span class=\"br0\">[</span>Long<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mersenne<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> pow p<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sieve<span class=\"br0\">(</span>nums<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    Stream.<span class=\"me1\">cons</span><span class=\"br0\">(</span>nums.<span class=\"me1\">head</span>, sieve<span class=\"br0\">(</span><span class=\"br0\">(</span>nums.<span class=\"me1\">tail</span><span class=\"br0\">)</span> filter <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">%</span> nums.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// An infinite stream of primes, lazy evaluation and memo-ized</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> oddPrimes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">#::</span> oddPrimes<span class=\"br0\">)</span><br/>\u00a0<br/>  oddPrimes takeWhile <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">59</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> p <span class=\"sy0\">=&gt;</span><br/>    <span class=\"br0\">{</span> <span class=\"co1\">// Needs some intermediate results for nice formatting</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numM <span class=\"sy0\">=</span> s<span class=\"st0\">\"M${p}\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nMersenne <span class=\"sy0\">=</span> mersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lit <span class=\"sy0\">=</span> f<span class=\"st0\">\"${nMersenne}%30d\"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> datum <span class=\"sy0\">=</span> System.<span class=\"me1\">nanoTime</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> factorize<span class=\"br0\">(</span>nMersenne<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mSec <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>System.<span class=\"me1\">nanoTime</span> - datum<span class=\"br0\">)</span> / 1.0e+6<span class=\"br0\">)</span>.<span class=\"me1\">round</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decStr <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lit.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> f<span class=\"st0\">\"(M has ${lit.length}%3d dec)\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sPrime <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <span class=\"st0\">\" is a prime number.\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>      println<span class=\"br0\">(</span><br/>        f<span class=\"st0\">\"$numM%4s = 2^$p%03d - 1 = ${lit}%s${sPrime} ($mSec%,4d msec) composed of ${result.mkString(\"</span> \u00d7 <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 11, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factor number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>factor divisor number<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> divisor divisor<span class=\"br0\">)</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">list</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> number divisor<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">cons</span> divisor <span class=\"br0\">(</span><span class=\"sy0\">*</span>factor divisor <span class=\"br0\">(</span><span class=\"sy0\">/</span> number divisor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span>factor <span class=\"br0\">(</span><span class=\"sy0\">+</span> divisor <span class=\"nu0\">1</span><span class=\"br0\">)</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>factor <span class=\"nu0\">2</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>factor <span class=\"nu0\">111111111111</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 18, "block": "<pre class=\"text highlighted_source\">const func array integer: factorise (in var integer: number) is func<br/>  result<br/>    var array integer: result is 0 times 0;<br/>  local<br/>    var integer: checker is 2;<br/>  begin<br/>    while checker * checker &lt;= number do<br/>      if number rem checker = 0 then<br/>        result &amp;:= [](checker);<br/>        number\u00a0:= number div checker;<br/>      else<br/>        incr(checker);<br/>      end if;<br/>    end while;<br/>    if number &lt;&gt; 1 then<br/>      result &amp;:= [](number);<br/>    end if;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 11, "block": "<pre class=\"text highlighted_source\">isPrime(n)\u00a0:= n = 2 or (n &gt; 1 and none(n mod ([2]++((1...floor(sqrt(n)/2))*2+1)) = 0));<br/>\u00a0<br/>primeFactorization(num)\u00a0:= primeFactorizationHelp(num, []);<br/>\u00a0<br/>primeFactorizationHelp(num, current(1))\u00a0:= <br/>\t let<br/>\t \tprimeFactors[i]\u00a0:= i when num mod i = 0 and isPrime(i) foreach i within 2 ... num;<br/>\t in<br/>\t\t\tcurrent when size(primeFactors) = 0<br/>\t\telse<br/>\t\t\tprimeFactorizationHelp(num / product(primeFactors), current ++ primeFactors);</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say factor<span class=\"br0\">(</span><span class=\"nu0\">536870911</span><span class=\"br0\">)</span>    <span class=\"co1\">#=&gt; [233, 1103, 2089]</span></pre>"}, {"lang": "Slate", "loc": 15, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"bad4fa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Integer traits) primesDo: block<br/>\"Decomposes the Integer into primes, applying the block to each (in increasing<br/>order).\"<br/>[| div next remaining |<br/>  div: 2.<br/>  next: 3.<br/>  remaining: n.<br/>  [[(remaining \\\\ div) isZero]<br/>     whileTrue:<br/>       [block applyTo: {div}.<br/>\tremaining: remaining // div].<br/>   remaining = 1] whileFalse:<br/>     [div: next.<br/>      next: next + 2] \"Just look at the next odd integer.\"<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 14, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Integer</span> extend <span class=\"br0\">[</span><br/>    <span class=\"re5\">primesDo</span>: <span class=\"re5\">aBlock</span> <span class=\"br0\">[</span><br/>        |<span class=\"re3\"> div next rest </span>|<br/>        <span class=\"re6\">div</span> <span class=\"sy0\">:=</span> <span class=\"re5\">2</span>. <span class=\"re5\">next</span> <span class=\"sy0\">:=</span> <span class=\"re5\">3</span>.<br/>        <span class=\"re5\">rest</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span>.<br/>        <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"re5\">rest</span> \\\\ div <span class=\"sy0\">==</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span><br/>              whileTrue: <span class=\"br0\">[</span><br/>                  <span class=\"re5\">aBlock</span> value: <span class=\"re5\">div</span>.<br/>                  <span class=\"re5\">rest</span> <span class=\"sy0\">:=</span> <span class=\"re5\">rest</span> // <span class=\"re5\">div</span> <span class=\"br0\">]</span>.<br/>          <span class=\"re5\">rest</span> <span class=\"sy0\">=</span> <span class=\"re5\">1</span><span class=\"br0\">]</span> whileFalse: <span class=\"br0\">[</span><br/>              <span class=\"re5\">div</span> <span class=\"sy0\">:=</span> <span class=\"re5\">next</span>. <span class=\"re5\">next</span> <span class=\"sy0\">:=</span> <span class=\"re5\">next</span> + <span class=\"re5\">2</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/><span class=\"nu0\">123456</span> primesDo: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">each</span> | each printNl <span class=\"br0\">]</span></pre>"}, {"lang": "SPAD", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>(1) -&gt; factor 102400<br/>\u00a0<br/>         12 2<br/>   (1)  2  5<br/>                                                      Type: Factored(Integer)<br/>(2) -&gt; factor 23193931893819371<br/>\u00a0<br/>   (2)  83 3469 71341 1129153<br/>                                                      Type: Factored(Integer)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 26, "block": "<pre class=\"text highlighted_source\">function factor(n_) {<br/>\tn = n_<br/>\ta = J(0,2,.)<br/>\tif (n&lt;2) {<br/>\t\treturn(a)<br/>\t}<br/>\telse if (n&lt;4) {<br/>\t\treturn((n,1))<br/>\t}<br/>\telse {<br/>\t\tif (mod(n,2)==0) {<br/>\t\t\tfor (i=0; mod(n,2)==0; i++) n = floor(n/2)<br/>\t\t\ta = a\\(2,i)<br/>\t\t}<br/>\u00a0<br/>\t\tfor (k=3; k*k&lt;=n; k=k+2) {<br/>\t\t\tif (mod(n,k)==0) {<br/>\t\t\t\tfor (i=0; mod(n,k)==0; i++) n = floor(n/k)<br/>\t\t\t\ta = a\\(k,i)<br/>\t\t\t}<br/>\t\t}<br/>\u00a0<br/>\t\tif (n&gt;1) a = a\\(n,1)<br/>\t\treturn(a)<br/>\t}<br/>}</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> factors <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># list the prime factors of x in ascending order</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> result <span class=\"re0\">$i</span><br/>            <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$x</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "TI-83 BASIC", "loc": 50, "block": "<pre class=\"text highlighted_source\">::prgmPREMIER<br/>Disp \"FACTEURS PREMIER\"<br/>Prompt N<br/>If N&lt;1:Stop<br/>ClrList L1\u0081,L2<br/>0\u2192K<br/>iPart(\u221a(N))\u2192L<br/>N\u2192M<br/>For(I,2,L)<br/>0\u2192J<br/>While fPart(M/I)=0<br/>J+1\u2192J<br/>M/I\u2192M<br/>End<br/>If J\u22600<br/>Then<br/>K+1\u2192K<br/>I\u2192L\u00811(K)<br/>J\u2192L2(K)<br/>I\u2192Z:prgmVSTR<br/>\"   \"+Str0\u2192Str1<br/>If J\u22601<br/>Then<br/>J\u2192Z:prgmVSTR<br/>Str1+\"^\"+Str0\u2192Str1<br/>End<br/>Disp Str1<br/>End<br/>If M=1:Stop<br/>End<br/>If M\u22601<br/>Then<br/>If M\u2260N<br/>Then<br/>M\u2192Z:prgmVSTR<br/>\"   \"+Str0\u2192Str1<br/>Disp Str1<br/>Else<br/>Disp \"PREMIER\"<br/>End<br/>End<br/>::prgmVSTR<br/>{Z,Z}\u2192L5<br/>{1,2}\u2192L6<br/>LinReg(ax+b)L6,L5,Y\u0080\u2080<br/>Equ\u25baString(Y\u2080,Str0)<br/>length(Str0)\u2192O<br/>sub(Str0,4,O-3)\u2192Str0<br/>ClrList L5,L6<br/>DelVar Y\u0080</pre>"}, {"lang": "TXR", "loc": 16, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(do <br/>  (defun factor (n)<br/>    (if (&gt; n 1)<br/>      (for ((max-d (isqrt n))<br/>            (d 2))<br/>           ()<br/>           ((inc d (if (evenp d) 1 2)))<br/>        (cond ((&gt; d max-d) (return (list n)))<br/>              ((zerop (mod n d)) <br/>               (return (cons d (factor (trunc n d))))))))))<br/>@{num /[0-9]+/}<br/>@(bind factors @(factor (int-str num 10)))<br/>@(output)<br/>@num -&gt; {@(rep)@factors, @(last)@<a class=\"__cf_email__\" data-cfemail=\"92f4f3f1e6fde0e1d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)}<br/>@(end)</pre>"}, {"lang": "V", "loc": 10, "block": "<pre class=\"text highlighted_source\">[prime-decomposition<br/>   [inner [c p] let<br/>       [c c * p &gt;]<br/>           [p unit]<br/>           [ [p c\u00a0% zero?]<br/>                   [c c p c / inner cons]<br/>                   [c 1 + p inner]<br/>             ifte]<br/>       ifte].<br/>   2 swap inner].</pre>"}, {"lang": "VBScript", "loc": 43, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> PrimeFactors(n)<br/>\tarrP = Split(ListPrimes(n),<span class=\"st0\">\" \"</span>)<br/>\tdivnum = n<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> divnum = 1<br/>\t\t<span class=\"co1\">'The -1 is to account for the null element of arrP<br/></span>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrP)-1<br/>\t\t\t<span class=\"kw3\">If</span> divnum = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">ElseIf</span> divnum <span class=\"kw4\">Mod</span> arrP(i) = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tdivnum = divnum/arrP(i)<br/>\t\t\t\tPrimeFactors = PrimeFactors &amp; arrP(i) &amp; <span class=\"st0\">\" \"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPrime(n)<br/>\t<span class=\"kw3\">If</span> n = 2 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">ElseIf</span> n &lt;= 1 <span class=\"kw3\">Or</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Int(Sqr(n)) <span class=\"kw3\">Step</span> 2<br/>\t\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> ListPrimes(n)<br/>\tListPrimes = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>\t\t<span class=\"kw3\">If</span> IsPrime(i) <span class=\"kw3\">Then</span><br/>\t\t\tListPrimes = ListPrimes &amp; i &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write PrimeFactors(CInt(WScript.Arguments(0)))<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "XSLT", "loc": 73, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span><span class=\"re2\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/numbers\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;html<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;body<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;ul<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span> <span class=\"re2\">/&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;/ul<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/body<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/html<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"number\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;li<span class=\"re2\">&gt;</span></span></span><br/>            Number:<br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span> <span class=\"re0\">mode</span>=<span class=\"st0\">\"value\"</span> <span class=\"re2\">/&gt;</span></span><br/>            Factors:<br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span> <span class=\"re0\">mode</span>=<span class=\"st0\">\"factors\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/li<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"value\"</span> <span class=\"re0\">mode</span>=<span class=\"st0\">\"value\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:apply-templates</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"value\"</span> <span class=\"re0\">mode</span>=<span class=\"st0\">\"factors\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"generate\"</span><span class=\"re2\">&gt;</span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"number\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"number(current())\"</span> <span class=\"re2\">/&gt;</span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"candidate\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"number(2)\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"generate\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"number\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"candidate\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!-- 1 is no prime and does not have any factors --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$number = 1\"</span><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!-- if the candidate is larger than the sqrt of the number, it's prime and the last factor --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$candidate * $candidate &amp;gt; $number\"</span><span class=\"re2\">&gt;</span></span> <br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$number\"</span> <span class=\"re2\">/&gt;</span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!-- if the number is factored by the candidate, add the factor and try again with the same factor --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$number mod $candidate = 0\"</span><span class=\"re2\">&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$candidate\"</span> <span class=\"re2\">/&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span> <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"generate\"</span><span class=\"re2\">&gt;</span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"number\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$number div $candidate\"</span> <span class=\"re2\">/&gt;</span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"candidate\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$candidate\"</span> <span class=\"re2\">/&gt;</span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc-1\">&lt;!-- else try again with the next factor --&gt;</span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc-1\">&lt;!-- increment by 2 to save stack depth --&gt;</span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"$candidate = 2\"</span><span class=\"re2\">&gt;</span></span><br/>                        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"generate\"</span><span class=\"re2\">&gt;</span></span><br/>                            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"number\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$number\"</span> <span class=\"re2\">/&gt;</span></span><br/>                            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"candidate\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$candidate + 1\"</span> <span class=\"re2\">/&gt;</span></span><br/>                        <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>                        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"generate\"</span><span class=\"re2\">&gt;</span></span><br/>                            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"number\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$number\"</span> <span class=\"re2\">/&gt;</span></span><br/>                            <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"candidate\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$candidate + 2\"</span> <span class=\"re2\">/&gt;</span></span><br/>                        <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>                    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>                <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>            <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">fcn primeFactors(n){  // Return a list of factors of n<br/>   acc:=fcn(n,k,acc,maxD){  // k is 2,3,5,7,9,... not optimum<br/>      if(n==1 or k&gt;maxD) acc.close();<br/>      else{<br/>\t q,r:=n.divr(k);   // divr--&gt;(quotient,remainder)<br/>\t if(r==0) return(self.fcn(q,k,acc.write(k),q.toFloat().sqrt()));<br/>\t return(self.fcn(n,k+1+k.isOdd,acc,maxD))<br/>      }<br/>   }(n,2,Sink(List),n.toFloat().sqrt());<br/>   m:=acc.reduce('*,1);      // mulitply factors<br/>   if(n!=m) acc.append(n/m); // opps, missed last factor<br/>   else acc;<br/>}</pre>"}]}