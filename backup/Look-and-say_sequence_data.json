{"task": "Look-and-say_sequence", "blocks": [{"lang": "Ada", "loc": 13, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Strings</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/>\u00a0<br/><span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>S\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>   Item\u00a0: <span class=\"kw3\">constant</span> Character\u00a0:= S <span class=\"br0\">(</span>S'First<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> S'First + <span class=\"nu0\">1</span>..<span class=\"me1\">S</span>'Last <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Item /= S <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> Trim <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Index - S'First<span class=\"br0\">)</span>, Both<span class=\"br0\">)</span> &amp; Item &amp; <span class=\"br0\">(</span>+<span class=\"br0\">(</span>S <span class=\"br0\">(</span>Index..<span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">return</span> Trim <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>S'Length<span class=\"br0\">)</span>, Both<span class=\"br0\">)</span> &amp; Item;<br/><span class=\"kw1\">end</span> <span class=\"st0\">\"+\"</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 27, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw3\">CHAR</span> item <span class=\"sy1\">=</span> s<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> s<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> index <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">IF</span> item <span class=\"sy1\">/=</span> s <span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>         out <span class=\"sy1\">:=</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>index <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> s<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span> <span class=\"sy1\">+</span> item <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span>s <span class=\"br0\">[</span>index<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">GO TO</span> return out<br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   out <span class=\"sy1\">:=</span> <span class=\"kw22\">whole</span> <span class=\"br0\">(</span><span class=\"kw8\">UPB</span> s<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span> <span class=\"sy1\">+</span> item<span class=\"sy1\">;</span><br/>   return out<span class=\"sy1\">:</span> out<br/><span class=\"kw2\">END</span>  <span class=\"coMULTI\"># + #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> s<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <br/>  <span class=\"sy1\">+</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"sy1\">+</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 37, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"re2\">AutoExecute:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>MinimizeBox<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> w500 r20 vInput<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x155 w100 <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Default\"><span class=\"kw7\">Default</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Calculate<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> xp<span class=\"sy0\">+</span><span class=\"nu0\">110</span> yp wp<span class=\"sy0\">,</span> E<span class=\"sy0\">&amp;</span>xit<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> Look<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>Say sequence<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">ButtonCalculate:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> <a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><span class=\"sy0\">,</span>\u00a0% LookAndSay<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><span class=\"re2\">ButtonExit:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>LookAndSay<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>    <span class=\"co1\">; credit for this function goes to AutoHotkey forum member Laslo </span><br/>    <span class=\"co1\">; http://www.autohotkey.com/forum/topic44657-161.html</span><br/>    <span class=\"co1\">;-----------------------------------------------------------------------</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a>          <span class=\"co1\">; look at every digit</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">=</span> d<span class=\"br0\">)</span>    <span class=\"co1\">; I've got another one! (of the same value)</span><br/>            c <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span>                  <span class=\"co1\">; Let's count them ...</span><br/>        <span class=\"kw1\">Else</span> <span class=\"br0\">{</span>                  <span class=\"co1\">; No, this one is different!</span><br/>            r <span class=\"sy0\">.=</span> c d                <span class=\"co1\">; remember what we've got so far</span><br/>            c <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>                  <span class=\"co1\">; It is the first one in a row</span><br/>            d <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a>        <span class=\"co1\">; Which one is it?</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> r c d<br/><span class=\"br0\">}</span></pre>"}, {"lang": "APL", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  \u2395IO\u21900<br/>  d\u2190{(1\u2193\u2375)-\u00af1\u2193\u2375}<br/>  f\u2190{m\u2190(0\u2260d \u2375),1 \u22c4 ,(d \u00af1,m/\u2373\u2374\u2375),[.5](m/\u2375)}<br/>  {(f\u2363\u2375) ,1}\u00a8\u237310<br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> lookandsay<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  s = <span class=\"st0\">\"\"</span><br/>  c = <span class=\"nu0\">1</span><br/>  p = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>a, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> p <span class=\"sy2\">==</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>a, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c<span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      s = s <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d%s\"</span>, c, p<span class=\"br0\">)</span><br/>      p = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>a, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      c = <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  s = s <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d%s\"</span>, c, p<span class=\"br0\">)</span><br/>  <span class=\"kw6\">return</span> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  b = <span class=\"st0\">\"1\"</span><br/>  <span class=\"kw5\">print</span> b<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>; k <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">10</span>; k<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    b = lookandsay<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span> b<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC256", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># look and say<br/>\u00a0<br/>dim a$(2)<br/>\u00a0<br/>i = 0  # input string index<br/>\u00a0<br/>a$[i] = \"1\"<br/>\u00a0<br/>print a$[i]<br/>\u00a0<br/>for n=1 to 10<br/>  j = 1 - i  # output string index<br/>  a$[j] = \"\"<br/>  k = 1<br/>  while (k &lt;= length(a$[i]))<br/>    k0 = k + 1<br/>    while ((k0 &lt;= length(a$[i])) and (mid(a$[i], k, 1) = mid(a$[i], k0, 1)))<br/>      k0 = k0 + 1<br/>    end while<br/>    a$[j] += string(k0 - k) + mid(a$[i], k, 1)<br/>    k = k0<br/>  end while<br/>  i = j<br/>  print a$[j]<br/>next n<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">      number$ = \"1\"<br/>      FOR i% = 1 TO 10<br/>        number$ = FNlooksay(number$)<br/>        PRINT number$<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNlooksay(n$)<br/>      LOCAL i%, j%, c$, o$<br/>      i% = 1<br/>      REPEAT<br/>        c$ = MID$(n$,i%,1)<br/>        j% = i% + 1<br/>        WHILE MID$(n$,j%,1) = c$<br/>          j% += 1<br/>        ENDWHILE<br/>        o$ += STR$(j%-i%) + c$<br/>        i% = j%<br/>      UNTIL i% &gt; LEN(n$)<br/>      = o$</pre>"}, {"lang": "Bracmat", "loc": 23, "block": "<pre class=\"text highlighted_source\">( 1:?number<br/>&amp; 0:?lines<br/>&amp;   whl<br/>  ' ( 1+!lines:~&gt;10:?lines<br/>    &amp;\u00a0:?say                           { This will accumulate all that has to be said after one iteration. }<br/>    &amp; 0:?begin<br/>    &amp; ( @(\u00a0!number                    { Pattern matching. The '@' indicates we're looking in a string rather than a tree structure. }<br/>        \u00a0:  \u00a0?<br/>             (   [!begin<br/>                \u00a0%@?digit<br/>                \u00a0?<br/>                 [?end<br/>                 ( (|(%@:~!digit)\u00a0?)  { The\u00a0%@ guarantees we're testing one character - not less (%) and not more (@). The\u00a0? takes the rest. }<br/>                 &amp;\u00a0!say\u00a0!end+-1*!begin\u00a0!digit:?say<br/>                 &amp;\u00a0!end:?begin        { When backtracking, 'begin' advances to the begin of the next sequence, or to the end of the string. }<br/>                 )<br/>             &amp; ~                      { fail! This forces backtracking. Backtracking stops when all begin positions have been tried. }<br/>             )<br/>         )<br/>      | out$(str$!say:?number)        { After backtracking, output string and set number to string for next iteration. }<br/>      )<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> c<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> cnt<span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> len <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> a <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>x <span class=\"sy0\">=</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"sy0\">*++</span>a<span class=\"br0\">)</span><br/>\t\t\t\tcnt<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tlen <span class=\"sy0\">+=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>b <span class=\"sy0\">+</span> len<span class=\"sy0\">,</span> <span class=\"st0\">\"%d%c\"</span><span class=\"sy0\">,</span> cnt<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tcnt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 30, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> lookandsay<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> r<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> new_i <span class=\"sy1\">=</span> s.<span class=\"me1\">find_first_not_of</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>new_i <span class=\"sy1\">==</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"br0\">)</span><br/>            new_i <span class=\"sy1\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        r <span class=\"sy1\">&lt;&lt;</span> new_i <span class=\"sy2\">-</span> i <span class=\"sy1\">&lt;&lt;</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        i <span class=\"sy1\">=</span> new_i<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> r.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> laf <span class=\"sy1\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> laf <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        laf <span class=\"sy1\">=</span> lookandsay<span class=\"br0\">(</span>laf<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> laf <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 40, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> lookandsay<span class=\"br0\">(</span><span class=\"kw4\">string</span> number<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        StringBuilder result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">char</span> repeat <span class=\"sy0\">=</span> number<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        number <span class=\"sy0\">=</span> number<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, number<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> actual <span class=\"kw1\">in</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>actual <span class=\"sy0\">!=</span> repeat<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                result<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>Convert<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span><span class=\"sy0\">+</span>repeat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                repeat <span class=\"sy0\">=</span> actual<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                times <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> num <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>             num <span class=\"sy0\">=</span> lookandsay<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span>             <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 28, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>    function lookAndSay(Integer|String input) {<br/>\u00a0<br/>        variable value digits = if (is Integer input) then input.string else input;<br/>        value builder = StringBuilder();<br/>\u00a0<br/>        while (exists currentChar = digits.first) {<br/>            if (exists index = digits.firstIndexWhere((char) =&gt; char\u00a0!= currentChar)) {<br/>                digits = digits[index...];<br/>                builder.append(\"``index````currentChar``\");<br/>            }<br/>            else {<br/>                builder.append(\"``digits.size````currentChar``\");<br/>                break;<br/>            }<br/>        }<br/>\u00a0<br/>        return builder.string;<br/>    }<br/>\u00a0<br/>    variable String|Integer result = 1;<br/>    print(result);<br/>    for (i in 1..14) {<br/>        result = lookAndSay(result);<br/>        print(result);<br/>    }<br/>}</pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> digits<span class=\"sy0\">-</span>seq<br/>  <span class=\"st0\">\"Returns a seq of the digits of a number (L-&gt;R).\"</span><br/>  <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>digits <span class=\"br0\">(</span><span class=\"br0\">)</span>, number n<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> number<span class=\"br0\">)</span> <span class=\"br0\">(</span>seq digits<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>mod number <span class=\"nu0\">10</span><span class=\"br0\">)</span> digits<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>quot number <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> join<span class=\"sy0\">-</span>digits<br/>  <span class=\"st0\">\"Converts a digits-seq back in to a number.\"</span><br/>  <span class=\"br0\">[</span>ds<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>n d<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">10</span> n<span class=\"br0\">)</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span> ds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> look<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>say <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> n digits<span class=\"sy0\">-</span>seq <span class=\"br0\">(</span>partition<span class=\"sy0\">-</span>by identity<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> <span class=\"br0\">(</span>juxt <span class=\"kw1\">count</span> <span class=\"kw1\">first</span><span class=\"br0\">)</span><span class=\"br0\">)</span> join<span class=\"sy0\">-</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compress <span class=\"br0\">(</span><span class=\"kw1\">array</span> <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Compresses array by returning a list of conses each of whose car is<br/>a number of occurrences and whose cdr is the element occurring.  For<br/>instance, (compress <span class=\"es0\">\\\"</span>abb<span class=\"es0\">\\\"</span>) produces ((1 . #<span class=\"es0\">\\a</span>) (2 . #<span class=\"es0\">\\b</span>)).\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>segments <span class=\"br0\">(</span>acons <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> i <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nreverse segments<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> test <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdar</span> segments<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>incf <span class=\"br0\">(</span><span class=\"kw1\">caar</span> segments<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> segments <span class=\"br0\">(</span>acons <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> i<span class=\"br0\">)</span> segments<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next-look-and-say <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n pair<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">100</span> n<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> <span class=\"br0\">(</span>string <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>compress <span class=\"br0\">(</span>princ-to-string number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> say <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">group</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> text<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"1\"</span>.<span class=\"me1\">recurrence</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">say</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 26, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> lookAndSayNext<span class=\"br0\">(</span>number <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> seen <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> result <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> put<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>seen <span class=\"sy0\">!=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      result <span class=\"sy0\">+=</span> count.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>seen<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> ch <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> number.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> seen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      put<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      seen <span class=\"sy0\">:=</span> ch<br/>      count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>  put<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  return <a href=\"http://wiki.erights.org/wiki/__makeInt\"><span class=\"kw6\">__makeInt</span></a><span class=\"br0\">(</span>result<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> number <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">20</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  number <span class=\"sy0\">:=</span> lookAndSayNext<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 15, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; for (number-&gt;list) = explode function</span><br/><span class=\"br0\">(</span>lib '<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"co1\">;; (group)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>next <span class=\"kw1\">L</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>acc null<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"br0\">(</span>group <span class=\"kw1\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">append</span> acc <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> g<span class=\"br0\">)</span> <span class=\"br0\">(</span>first g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task n starter<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span><span class=\"kw1\">L</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> starter<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>writeln <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"kw1\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>next <span class=\"kw1\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 23, "block": "<pre class=\"text highlighted_source\">defmodule LookAndSay do<br/>  def next(n) do<br/>    Enum.chunk_by(to_char_list(n), &amp;(&amp;1))<br/>    |&gt; Enum.map(fn cl=[h|_] -&gt; Enum.concat(to_char_list(length cl), [h]) end)<br/>    |&gt; Enum.concat<br/>    |&gt; List.to_integer<br/>  end<br/>\u00a0<br/>  def sequence_from(n) do<br/>    Stream.iterate n, &amp;(next/1)<br/>  end<br/>\u00a0<br/>  def main([start_str|_]) do<br/>    {start_val,_} = Integer.parse(start_str)<br/>    IO.inspect sequence_from(start_val) |&gt; Enum.take 9<br/>  end<br/>\u00a0<br/>  def main([]) do<br/>    main([\"1\"])<br/>  end<br/>end<br/>\u00a0<br/>LookAndSay.main(System.argv)</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>look_and_say<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> look_and_say<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% converts a single number</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% converts and accumulates as a loop</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Times</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Times</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Start</span> | <span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">Start</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Times</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% does the actual conversion for a number</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Current</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span> <span class=\"re6\">$0</span><span class=\"sy3\">+</span><span class=\"re5\">N</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Current</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">look_and_say</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span> <span class=\"re6\">$0</span><span class=\"sy3\">+</span><span class=\"re5\">N</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM LOOK<br/>\u00a0<br/>PROCEDURE LOOK_AND_SAY(N$-&gt;N$)<br/>      LOCAL I%,J%,C$,O$<br/>      I%=1<br/>      REPEAT<br/>        C$=MID$(N$,I%,1)<br/>        J%=I%+1<br/>        WHILE MID$(N$,J%,1)=C$ DO<br/>          J%+=1<br/>        END WHILE<br/>        O$+=MID$(STR$(J%-I%),2)+C$<br/>        I%=J%<br/>      UNTIL I%&gt;LEN(N$)<br/>      N$=O$<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>      NUMBER$=\"1\"<br/>      FOR I%=1 TO 10 DO<br/>        LOOK_AND_SAY(NUMBER$-&gt;NUMBER$)<br/>        PRINT(NUMBER$)<br/>      END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 22, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> brk p lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> lst <span class=\"kw1\">with</span><br/>  | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>lst, lst<span class=\"br0\">)</span><br/>  | x::xs <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> p x<br/>    <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, lst<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> <span class=\"br0\">(</span>ys, zs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> brk p xs<br/>      <span class=\"br0\">(</span>x::ys, zs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> span p lst <span class=\"sy0\">=</span> brk <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"sy0\">&lt;&lt;</span> p<span class=\"br0\">)</span> lst<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> groupBy eq lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> lst <span class=\"kw1\">with</span><br/>  | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span>  <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  | x::xs <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>ys,zs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> span <span class=\"br0\">(</span>eq x<span class=\"br0\">)</span> xs<br/>\t<span class=\"br0\">(</span>x::ys<span class=\"br0\">)</span>::groupBy eq zs<br/>\u00a0<br/><span class=\"kw1\">let</span> group lst\u00a0: list<span class=\"sy0\">&lt;</span>list<span class=\"sy0\">&lt;</span><span class=\"st0\">'a&gt;&gt; when '</span>a\u00a0: equality <span class=\"sy0\">=</span> groupBy <span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> lst<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">: (look-and-say) ( str -- )<br/>    unclip-slice swap [ 1 ] 2dip [<br/>        2dup = [ drop [ 1 + ] dip ] [<br/>            [ [ number&gt;string\u00a0% ] dip , 1 ] dip<br/>        ] if<br/>    ] each [ number&gt;string\u00a0% ] [ , ] bi*\u00a0;<br/>\u00a0<br/>: look-and-say ( str -- str' ) [ (look-and-say) ] \"\" make\u00a0;<br/>\u00a0<br/>\"1\" 10 [ dup print look-and-say ] times print</pre>"}, {"lang": "Forth", "loc": 28, "block": "<pre class=\"text highlighted_source\">create buf1 256 allot<br/>create buf2 256 allot<br/>buf1 value src<br/>buf2 value dest<br/>\u00a0<br/>s\" 1\" src place<br/>\u00a0<br/>: append-run ( digit run -- )<br/>  dest count +<br/>  tuck c!  1+ c!<br/>  dest <a class=\"__cf_email__\" data-cfemail=\"6b082b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2 + dest c!\u00a0;<br/>\u00a0<br/>: next-look-and-say<br/>  0 dest c!<br/>  src 1+ <a class=\"__cf_email__\" data-cfemail=\"d6b596\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [char] 0  ( digit run )<br/>  src count bounds do<br/>    over i <a class=\"__cf_email__\" data-cfemail=\"fb98bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =<br/>    if   1+<br/>    else append-run  i <a class=\"__cf_email__\" data-cfemail=\"680b28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] 1<br/>    then<br/>  loop<br/>  append-run<br/>  src dest to src to dest\u00a0;<br/>\u00a0<br/>: look-and-say ( n -- )<br/>  0 do next-look-and-say  cr src count type loop\u00a0;<br/>\u00a0<br/>10 look-and-say</pre>"}, {"lang": "Fortran", "loc": 31, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> LookAndSay<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> look_and_say<span class=\"br0\">(</span><span class=\"kw3\">in</span>, <span class=\"kw3\">out</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">in</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">out</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, c<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>\u00a0<br/>    <span class=\"kw3\">out</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    x <span class=\"sy0\">=</span> <span class=\"kw3\">in</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"sy0\">==</span> <span class=\"kw3\">in</span><span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">else</span><br/>          write<span class=\"br0\">(</span>d, <span class=\"st0\">\"(I2)\"</span><span class=\"br0\">)</span> c<br/>          <span class=\"kw3\">out</span> <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">adjustl</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>          c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>          x <span class=\"sy0\">=</span> <span class=\"kw3\">in</span><span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span>d, <span class=\"st0\">\"(I2)\"</span><span class=\"br0\">)</span> c<br/>    <span class=\"kw3\">out</span> <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">adjustl</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> look_and_say<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> LookAndSay</pre>"}, {"lang": "Gambas", "loc": 25, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> i, j, cnt <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> txt$, curr$, <a href=\"http://www.google.com/search?hl=en&amp;q=result+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">result</span></a>$ <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>txt$ <span class=\"sy0\">=</span> <span class=\"st0\">\"1211\"</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Sequence: \"</span> <span class=\"sy0\">&amp;</span> txt$ <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = \"</span>;<br/>  <a href=\"http://gambasdoc.org/help/lang/repeat\"><span class=\"kw1\">Repeat</span></a><br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=result+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">result</span></a>$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>      <a href=\"http://gambasdoc.org/help/lang/repeat\"><span class=\"kw1\">Repeat</span></a><br/>        curr$ <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>txt$, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          <a href=\"http://gambasdoc.org/help/lang/repeat\"><span class=\"kw1\">Repeat</span></a><br/>            <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> cnt <br/>            <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> j <br/>          <a href=\"http://gambasdoc.org/help/lang/until\"><span class=\"kw1\">Until</span></a> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>txt$, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> curr$<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=result+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">result</span></a>$ <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> curr$<br/>      <a href=\"http://gambasdoc.org/help/lang/until\"><span class=\"kw1\">Until</span></a> j <span class=\"sy0\">&gt;</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>txt$<span class=\"br0\">)</span><br/>    <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=result+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">result</span></a>$<br/>    txt$ <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=result+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">result</span></a>$<br/>    <a href=\"http://gambasdoc.org/help/lang/dec\"><span class=\"kw1\">Dec</span></a> i <br/>  <a href=\"http://gambasdoc.org/help/lang/until\"><span class=\"kw1\">Until</span></a> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 37, "block": "<pre class=\"text highlighted_source\">LookAndSay\u00a0:= function(s)<br/>  local c, r, cur, ncur, v;<br/>  v\u00a0:= \"123\";<br/>  r\u00a0:= \"\";<br/>  cur\u00a0:= 0;<br/>  ncur\u00a0:= 0;<br/>  for c in s do<br/>    if c = cur then<br/>      ncur\u00a0:= ncur + 1;<br/>    else<br/>      if ncur &gt; 0 then<br/>        Add(r, v[ncur]);<br/>        Add(r, cur);<br/>      fi;<br/>      cur\u00a0:= c;<br/>      ncur\u00a0:= 1;<br/>    fi;<br/>  od;<br/>  Add(r, v[ncur]);<br/>  Add(r, cur);<br/>  return r;<br/>end;<br/>\u00a0<br/>LookAndSay(\"1\");     # \"11\"<br/>LookAndSay(last);    # \"21\"<br/>LookAndSay(last);    # \"1211\"<br/>LookAndSay(last);    # \"111221\"<br/>LookAndSay(last);    # \"312211\"<br/>LookAndSay(last);    # \"13112221\"<br/>LookAndSay(last);    # \"1113213211\"<br/>LookAndSay(last);    # \"31131211131221\"<br/>LookAndSay(last);    # \"13211311123113112211\"<br/>LookAndSay(last);    # \"11131221133112132113212221\"<br/>LookAndSay(last);    # \"3113112221232112111312211312113211\"<br/>LookAndSay(last);    # \"1321132132111213122112311311222113111221131221\"<br/>LookAndSay(last);    # \"11131221131211131231121113112221121321132132211331222113112211\"<br/>LookAndSay(last);    # \"311311222113111231131112132112311321322112111312211312111322212311322113212221\"</pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> lss<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    nc <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        d <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy3\">==</span> c <span class=\"sy1\">{</span><br/>            nc<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        r <span class=\"sy2\">+=</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>nc<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>        c <span class=\"sy2\">=</span> d<br/>        nc <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r <span class=\"sy3\">+</span> strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>nc<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"1\"</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">8</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        s <span class=\"sy2\">=</span> lss<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> lookAndSay<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> encoded <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sequence.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>~ /<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\\<span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>/<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> matcher <span class=\"sy0\">-&gt;</span><br/>        encoded.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append\"><span class=\"kw7\">append</span></a><span class=\"br0\">(</span>matcher<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append\"><span class=\"kw7\">append</span></a><span class=\"br0\">(</span>matcher<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    encoded.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>liftM2<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>group<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- this function is composed out of many functions; data flows from the bottom up</span><br/>lookAndSay <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>lookAndSay <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a>                                   <span class=\"co1\">-- convert digits to integer</span><br/>           <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a>                              <span class=\"co1\">-- concatenate for each run,</span><br/>               <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span>         <span class=\"co1\">--    the length of it</span><br/>                            <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"co1\">--    and an example member</span><br/>           <span class=\"sy0\">.</span> group                                  <span class=\"co1\">-- collect runs of the same digit</span><br/>           <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a>                                   <span class=\"co1\">-- convert integer to digits</span><br/>\u00a0<br/><span class=\"co1\">-- less comments</span><br/>lookAndSay2 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>lookAndSay2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><br/>                                            <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span> group <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- same thing with more variable names</span><br/>lookAndSay3 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>lookAndSay3 n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> describe <span class=\"br0\">(</span>group <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> describe run <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> run<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> run<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> lookAndSay <span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"co1\">-- display sequence until interrupted</span></pre>"}, {"lang": "Haxe", "loc": 39, "block": "<pre class=\"text highlighted_source\">using Std;<br/>\u00a0<br/>class Main <br/>{<br/>\u00a0<br/>\tstatic function main() <br/>\t{<br/>\t\tvar test = \"1\";<br/>\t\tfor (i in 0...11) {<br/>\t\t\tSys.println(test);<br/>\t\t\ttest = lookAndSay(test);<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tstatic function lookAndSay(s:String)<br/>\t{<br/>\t\tif (s == null || s == \"\") return \"\";<br/>\u00a0<br/>\t\tvar results = \"\";<br/>\t\tvar repeat = s.charAt(0);<br/>\t\tvar amount = 1;<br/>\t\tfor (i in 1...s.length)<br/>\t\t{<br/>\t\t\tvar actual = s.charAt(i);<br/>\t\t\tif (actual\u00a0!= repeat)<br/>\t\t\t{<br/>\t\t\t\tresults += amount.string();<br/>\t\t\t\tresults += repeat;<br/>\t\t\t\trepeat = actual;<br/>\t\t\t\tamount = 0;<br/>\t\t\t}<br/>\t\t\tamount++;<br/>\t\t}<br/>\t\tresults += amount.string();<br/>\t\tresults += repeat;<br/>\u00a0<br/>\t\treturn results;<br/>\t}<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> nextlooknsayseq<span class=\"br0\">(</span><span class=\"sy1\">\\</span>n <span class=\"sy1\">|</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nextlooknsayseq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\">#: return next element in look and say sequence</span><br/>n2 <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>n <span class=\"sy1\">?</span> <span class=\"kw1\">until</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   i <span class=\"sy1\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">any</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span>  <span class=\"co1\"># or fail if not digits</span><br/>   <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>   n2 <span class=\"sy1\">||:=</span> <span class=\"sy1\">*</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> i     <span class=\"co1\"># accumulate count+digit</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> n2                                      <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">las=: ,@<span class=\"sy0\">((</span># , {.<span class=\"sy0\">)</span>;.<span class=\"nu0\">1</span>~ <span class=\"nu0\">1</span> , <span class=\"nu0\">2</span> ~:/\\ ]<span class=\"sy0\">)</span>&amp;.<span class=\"sy0\">(</span><span class=\"nu0\">10x</span>&amp;#.inv<span class=\"sy0\">)</span>@]^:<span class=\"sy0\">(</span><span class=\"nu0\">1</span><a class=\"__cf_email__\" data-cfemail=\"7853115638\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> lookandsay<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> number<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> result= <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">char</span> repeat= number.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tnumber= number.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">int</span> times= <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">char</span> actual: number.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>actual <span class=\"sy0\">!</span>= repeat<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tresult.<span class=\"me1\">append</span><span class=\"br0\">(</span>times + <span class=\"st0\">\"\"</span> + repeat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttimes= <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\trepeat= actual<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\ttimes+= <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">return</span> result.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> lookandsay<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/(.)\\1*/g</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>seq<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> seq.<span class=\"me1\">length</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> p1<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> num <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    alert<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    num <span class=\"sy0\">=</span> lookandsay<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\">def look_and_say:<br/>  def head(c; n): if .[n:n+1] == c then head(c; n+1) else n end;<br/>  tostring<br/>  | if length == 0 then \"\"<br/>    else head(.[0:1]; 1) as $len<br/>      | .[0:$len] as $head<br/>      | ($len | tostring) + $head[0:1] + (.[$len:] | look_and_say)<br/>    end\u00a0;<br/>\u00a0<br/># look and say n times<br/>def look_and_say(n):<br/>  if n == 0 then empty<br/>  else look_and_say as $lns<br/>       | $lns, ($lns|look_and_say(n-1))<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 27, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function lookandsay(n::String)<br/>    rst = IOBuffer()<br/>    i, c = 1, 1<br/>    while i \u2264 length(n)<br/>        if i\u00a0!= length(n) &amp;&amp; n[i] == n[i+1]<br/>            c += 1<br/>        else<br/>            print(rst, c, n[i])<br/>            c = 1<br/>        end<br/>        i += 1<br/>    end<br/>    return String(take!(rst))<br/>end<br/>\u00a0<br/>function lookandsayseq(n::Integer)<br/>    rst = Array{String}(n)<br/>    rst[1] = \"1\"<br/>    for i in 2:n<br/>        rst[i] = lookandsay(rst[i-1])<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>println(lookandsayseq(10))</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  las: {x{0$,//$(#:'n),'*:'n:(&amp;1,~=':x)_ x:0$'$x}\\1}<br/>  las 8<br/>1 11 21 1211 111221 312211 13112221 1113213211 31131211131221</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun lookAndSay<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> digit <span class=\"sy0\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until s.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> digit<span class=\"br0\">)</span><br/>            count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"$count$digit\"</span><span class=\"br0\">)</span><br/>            digit <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"$count$digit\"</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> las <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>las<span class=\"br0\">)</span><br/>        las <span class=\"sy0\">=</span> lookAndSay<span class=\"br0\">(</span>las<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 28, "block": "<pre class=\"text highlighted_source\">define rle(str::string)::string =&gt; {<br/>\tlocal(orig = #str-&gt;values-&gt;asCopy,newi=array, newc=array, compiled=string)<br/>\twhile(#orig-&gt;size) =&gt; {<br/>\t\tif(not #newi-&gt;size) =&gt; {<br/>\t\t\t#newi-&gt;insert(1)<br/>\t\t\t#newc-&gt;insert(#orig-&gt;first)<br/>\t\t\t#orig-&gt;remove(1)<br/>\t\telse<br/>\t\t\tif(#orig-&gt;first == #newc-&gt;last) =&gt; {<br/>\t\t\t\t#newi-&gt;get(#newi-&gt;size) += 1<br/>\t\t\telse<br/>\t\t\t\t#newi-&gt;insert(1)<br/>\t\t\t\t#newc-&gt;insert(#orig-&gt;first)<br/>\t\t\t}<br/>\t\t\t#orig-&gt;remove(1)<br/>\t\t} <br/>\t}<br/>\tloop(#newi-&gt;size) =&gt; {<br/>\t\t#compiled-&gt;append(#newi-&gt;get(loop_count)+#newc-&gt;get(loop_count))<br/>\t}<br/>\treturn #compiled<br/>}<br/>define las(n::integer,run::integer) =&gt; {<br/>\tlocal(str = #n-&gt;asString)<br/>\tloop(#run) =&gt; { #str = rle(#str) }<br/>\treturn #str<br/>}<br/>loop(15) =&gt; {^ las(1,loop_count) + '\\r' ^}</pre>"}, {"lang": "LiveCode", "loc": 21, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> lookAndSay S<br/>   put <span class=\"nu0\">0</span> into C<br/>   put char <span class=\"nu0\">1</span> of S into lastChar<br/>   <span class=\"kw1\">repeat</span> with i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> to length<span class=\"br0\">(</span>S<span class=\"br0\">)</span><br/>      add <span class=\"nu0\">1</span> to C<br/>      <span class=\"kw1\">if</span> char i of S is lastChar <span class=\"kw1\">then</span> <span class=\"kw3\">next</span> <span class=\"kw1\">repeat</span><br/>      put C &amp; lastChar after R<br/>      put <span class=\"nu0\">0</span> into C<br/>      put char i of S into lastChar<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">repeat</span><br/>   <span class=\"kw1\">return</span> R &amp; C <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> &amp; lastChar<br/><span class=\"kw1\">end</span> lookAndSay<br/>\u00a0<br/>on demoLookAndSay<br/>   put <span class=\"nu0\">1</span> into x<br/>   <span class=\"kw1\">repeat</span> <span class=\"nu0\">10</span><br/>      put x &amp; cr after message<br/>      put lookAndSay<span class=\"br0\">(</span>x<span class=\"br0\">)</span> into x<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">repeat</span><br/>   put x after message<br/><span class=\"kw1\">end</span> demoLookAndSay</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to look.and.say.loop\u00a0:in\u00a0:run\u00a0:c\u00a0:out<br/>  if empty?\u00a0:in [output (word\u00a0:out\u00a0:run\u00a0:c)]<br/>  if equal? first\u00a0:in\u00a0:c [output look.and.say.loop bf\u00a0:in\u00a0:run+1\u00a0:c\u00a0:out]<br/>  output look.and.say.loop bf\u00a0:in 1 first\u00a0:in (word\u00a0:out\u00a0:run\u00a0:c)<br/>end<br/>to look.and.say\u00a0:in<br/>  if empty?\u00a0:in [output\u00a0:in]<br/>  output look.and.say.loop bf\u00a0:in 1 first\u00a0:in \"||<br/>end<br/>\u00a0<br/>show cascade 10 [print\u00a0? look.and.say\u00a0?] 1</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">--returns an iterator over the first n copies of the look-and-say sequence</span><br/><span class=\"kw1\">function</span> lookandsayseq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> t<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw2\">and</span> v <span class=\"sy0\">==</span> t<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    t <span class=\"sy0\">=</span> ret<br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>ret<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> i <span class=\"kw2\">in</span> lookandsayseq<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 16, "block": "<pre class=\"text highlighted_source\">divert(-1)<br/>define(`for',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(eval($2&lt;=$3),1,<br/>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')<br/>\u00a0<br/>define(`las',<br/>   `patsubst(`$1',`\\(\\(.\\)\\2*\\)',`len(\\1)`'\\2')')<br/>\u00a0<br/>\u00a0<br/>define(`v',1)<br/>divert<br/>for(`x',1,10,<br/>   `v<br/>define(`v',las(v))')dnl<br/>v</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">RunLengthEncode[x_List]:=(Through[{First,Length}[#]]&amp;)/@Split[x]<br/> LookAndSay[n_,d_:1]:=NestList[Flatten[Reverse/@RunLengthEncode[#]]&amp;,{d},n-1]</pre>"}, {"lang": "Maxima", "loc": 20, "block": "<pre class=\"text highlighted_source\">collect(a)\u00a0:= block(<br/>   [n: length(a), b: [ ], x: a[1], m: 1],<br/>   for i from 2 thru n do<br/>      (if a[i] = x then m: m + 1 else (b: endcons([x, m], b), x: a[i], m: 1)),<br/>   b: endcons([x, m], b)<br/>)$<br/>\u00a0<br/>look_and_say(s)\u00a0:= apply(sconcat, map(lambda([p], sconcat(string(p[2]), p[1])), collect(charlist(s))))$<br/>\u00a0<br/>block([s: \"1\"], for i from 1 thru 10 do (disp(s), s: look_and_say(s)));<br/>/* \"1\"<br/>   \"11\"<br/>   \"21\"<br/>   \"1211\"<br/>   \"111221\"<br/>   \"312211\"<br/>   \"13112221\"<br/>   \"1113213211\"<br/>   \"31131211131221\"<br/>   \"13211311123113112211\" */</pre>"}, {"lang": "MAXScript", "loc": 30, "block": "<pre class=\"text highlighted_source\">fn lookAndSay num =<br/>(<br/>    local result = \"\"<br/>    num += \" \"<br/>    local current = num[1]<br/>    local numReps = 1<br/>\u00a0<br/>    for digit in 2 to num.count do<br/>    (<br/>        if num[digit]\u00a0!= current then<br/>        (<br/>            result += (numReps as string) + current<br/>            numReps = 1<br/>            current = num[digit]<br/>        )<br/>        else<br/>        (<br/>            numReps += 1<br/>        )<br/>    )<br/>    result<br/>)<br/>\u00a0<br/>local num = \"1\"<br/>\u00a0<br/>for i in 1 to 10 do<br/>(<br/>    print num<br/>    num = lookAndSay num<br/>)</pre>"}, {"lang": "Metafont", "loc": 23, "block": "<pre class=\"text highlighted_source\">vardef lookandsay(expr s) =<br/>string r; r\u00a0:= \"\";<br/>if string s:<br/>  i\u00a0:= 0;<br/>  forever: exitif not (i &lt; length(s));<br/>    c\u00a0:= i+1;<br/>    forever: exitif ( (substring(c,c+1) of s) &lt;&gt; (substring(i,i+1) of s) );<br/>      c\u00a0:= c + 1;<br/>    endfor<br/>    r\u00a0:= r &amp; decimal (c-i) &amp; substring(i,i+1) of s;<br/>    i\u00a0:= c;<br/>  endfor<br/>fi<br/>r<br/>enddef;<br/>\u00a0<br/>string p; p\u00a0:= \"1\";<br/>for el\u00a0:= 1 upto 10:<br/>  message p;<br/>  p\u00a0:= lookandsay(p);<br/>endfor<br/>\u00a0<br/>end</pre>"}, {"lang": "Nim", "loc": 22, "block": "<pre class=\"text highlighted_source\">proc NextInLookAndSaySequence (current: string): string =<br/>  assert(len(current) &gt; 0)<br/>  Result = \"\"<br/>  var ch = current[0]<br/>  var count = 1<br/>  for i in countup(1, len(current)-1):<br/>    if current[i]\u00a0!= ch:<br/>      Result &amp;= $count &amp; ch<br/>      ch = current[i]<br/>      count = 1<br/>    else:<br/>      count += 1<br/>  Result &amp;= $count &amp; ch<br/>\u00a0<br/>proc LookAndSay (n = 10) =<br/>  var next = \"1\"<br/>  for i in countup(1, n):<br/>    next = NextInLookAndSaySequence(next)<br/>    echo next<br/>\u00a0<br/>LookAndSay()<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 36, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a><span class=\"sy0\">*</span><span class=\"br0\">)</span>lookAndSay<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>word<span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span>;<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> new<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw4\">char</span> repeat <span class=\"sy0\">=</span> <span class=\"br0\">[</span>word characterAtIndex<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw4\">int</span> times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>    word <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"%@ \"</span>,<span class=\"br0\">[</span>word substringFromIndex<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSInteger index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; index &lt; word.length; index<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> actual <span class=\"sy0\">=</span> <span class=\"br0\">[</span>word characterAtIndex<span class=\"sy0\">:</span>index<span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>actual <span class=\"sy0\">!=</span> repeat<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span>result appendFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"%d%c\"</span>, times, repeat<span class=\"br0\">]</span>;<br/>            times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>            repeat <span class=\"sy0\">=</span> actual;<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            times <span class=\"sy0\">++</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>result copy<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>applicationDidFinishLaunching<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNotification_Class/\"><span class=\"kw5\">NSNotification</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>aNotification<br/><span class=\"br0\">{</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>num <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"1\"</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>;i&lt;<span class=\"sy0\">=</span><span class=\"nu0\">10</span>;i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, num<span class=\"br0\">)</span>;<br/>\u00a0<br/>        num <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self lookAndSay<span class=\"sy0\">:</span>num<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> seeAndSay <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>, nys <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev nys<br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs, <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> seeAndSay<span class=\"br0\">(</span>xs, <span class=\"br0\">[</span>x<span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs, y<span class=\"sy0\">::</span>n<span class=\"sy0\">::</span>nys <span class=\"kw1\">when</span> x<span class=\"sy0\">=</span>y <span class=\"sy0\">-&gt;</span> seeAndSay<span class=\"br0\">(</span>xs, y<span class=\"sy0\">::</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>n<span class=\"sy0\">::</span>nys<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs, nys <span class=\"sy0\">-&gt;</span> seeAndSay<span class=\"br0\">(</span>xs, x<span class=\"sy0\">::</span><span class=\"nu0\">1</span><span class=\"sy0\">::</span>nys<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: lookAndSay(n)  [ 1 ] n #[ dup .cr group map([#size, #first]) ] times\u00a0;</pre>"}, {"lang": "Oz", "loc": 30, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% e.g. \"21\" -&gt; \"1211\"</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LookAndSayString</span> S<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> DigitGroup <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Group S<span class=\"br0\">}</span> append:Add <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span>Add <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString <span class=\"br0\">{</span>Length DigitGroup<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>Add <span class=\"br0\">[</span>DigitGroup<span class=\"sy0\">.</span>1<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% lazy sequence of integers starting with N</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LookAndSay</span> N<span class=\"br0\">}</span><br/>     <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Loop</span> S<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt S<span class=\"br0\">}</span><span class=\"sy0\">|</span><span class=\"br0\">{</span>Loop <span class=\"br0\">{</span>LookAndSayString S<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Loop <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString N<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% like Haskell's \"group\"</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Group</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> Xs <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> nil<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> X<span class=\"sy0\">|</span>Xr <span class=\"kw1\">then</span><br/>\tYs Zs<br/>        <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>takeDropWhile Xr <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> W<span class=\"br0\">}</span> W<span class=\"sy0\">==</span>X <span class=\"kw1\">end</span>\u00a0?Ys\u00a0?Zs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>        <span class=\"br0\">(</span>X<span class=\"sy0\">|</span>Ys<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">{</span>Group Zs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take <span class=\"br0\">{</span>LookAndSay 1<span class=\"br0\">}</span> 10<span class=\"br0\">}</span> Show<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">step<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>cur<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>ct<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>out<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">99</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span>cur<span class=\"sy0\">,</span><br/>      ct<span class=\"sy0\">++</span><br/>    <span class=\"sy0\">,</span><br/>      out<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>out<span class=\"sy0\">,</span>ct<span class=\"sy0\">,</span>cur<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      cur<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      ct<span class=\"sy0\">=</span><span class=\"nu1\">1</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">eval</span><span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>n<span class=\"sy0\">=</span>step<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 39, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> LookAndSayDemo<span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LookAndSay <span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    item<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">index</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    count<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    LookAndSay <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    item <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    count <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">index</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> item <span class=\"sy3\">=</span> s<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        inc<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">begin</span><br/>\tLookAndSay <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LookAndSay <span class=\"sy3\">+</span> intTostr<span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"sy3\">+</span> item<span class=\"sy1\">;</span><br/>        item <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\tcount <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      LookAndSay <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LookAndSay <span class=\"sy3\">+</span> intTostr<span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"sy3\">+</span> item<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  number<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Press RETURN to continue and ^C to stop.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eof</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>   <span class=\"kw3\">write</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">readln</span><span class=\"sy1\">;</span><br/>   number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LookAndSay<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> lookandsay <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/((.)\\2*)/length($1) . $2/ge</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$num</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$num<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$num</span> <span class=\"sy0\">=</span> lookandsay<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"st_h\">'1'</span><span class=\"sy0\">,</span> <span class=\"sy0\">*.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/(.)$0*/</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">~</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">function lookandsay(string s)<br/>string res = \"\"<br/>integer p = s[1], c = 1<br/>    for i=2 to length(s) do<br/>        if p=s[i] then<br/>            c += 1<br/>        else<br/>            res &amp;= sprintf(\"%d%s\",{c,p})<br/>            p = s[i]<br/>            c = 1<br/>        end if<br/>    end for<br/>    res &amp;= sprintf(\"%d%s\",{c,p})<br/>    return res<br/>end function<br/>\u00a0<br/>string s = \"1\"<br/>?s<br/>for i=1 to 10 do<br/>    s = lookandsay(s)<br/>   \u00a0?s<br/>end for</pre>"}, {"lang": "PHP", "loc": 19, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"kw2\">function</span> lookAndSay<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.php.net/preg_replace_callback\"><span class=\"kw3\">preg_replace_callback</span></a><span class=\"br0\">(</span><span class=\"st_h\">'#(.)\\1*#'</span><span class=\"sy0\">,</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$matches</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$matches</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"re0\">$matches</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$num</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">echo</span> <span class=\"re0\">$num</span><span class=\"sy0\">.</span><span class=\"st0\">\"&lt;br/&gt;\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$num</span> <span class=\"sy0\">=</span> lookAndSay<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de las (Lst)<br/>   (make<br/>      (while Lst<br/>         (let (N 1  C)<br/>            (while (= (setq C (pop 'Lst)) (car Lst))<br/>               (inc 'N) )<br/>            (link N C) ) ) ) )</pre>"}, {"lang": "PowerBASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">FUNCTION RLEncode (i AS STRING) AS STRING<br/>    DIM tmp1 AS STRING, tmp2 AS STRING, outP AS STRING<br/>    DIM Loop0 AS LONG, count AS LONG<br/>\u00a0<br/>    FOR Loop0 = 1 TO LEN(i)<br/>        tmp1 = MID$(i, Loop0, 1)<br/>        IF tmp1 &lt;&gt; tmp2 THEN<br/>            IF count &gt; 1 THEN<br/>                outP = outP &amp; TRIM$(STR$(count)) &amp; tmp2<br/>                tmp2 = tmp1<br/>                count = 1<br/>            ELSEIF 0 = count THEN<br/>                tmp2 = tmp1<br/>                count = 1<br/>            ELSE<br/>                outP = outP &amp; \"1\" &amp; tmp2<br/>                tmp2 = tmp1<br/>            END IF<br/>        ELSE<br/>            INCR count<br/>        END IF<br/>    NEXT<br/>\u00a0<br/>    outP = outP &amp; TRIM$(STR$(count)) &amp; tmp2<br/>    FUNCTION = outP<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION lookAndSay(BYVAL count AS LONG) AS STRING<br/>    DIM iii AS STRING, tmp AS STRING<br/>\u00a0<br/>    IF count &gt; 1 THEN<br/>        iii = lookAndSay(count - 1)<br/>    ELSEIF count &lt; 2 THEN<br/>        iii = \"1\"<br/>    END IF<br/>\u00a0<br/>    tmp = RLEncode(iii)<br/>    lookAndSay = tmp<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION PBMAIN () AS LONG<br/>    DIM v AS LONG<br/>    v = VAL(INPUTBOX$(\"Enter a number.\"))<br/>    MSGBOX lookAndSay(v)<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 21, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>LookAndSay <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$re</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">regex</span><span class=\"br0\">]</span> <span class=\"st0\">'(.)\\1*'</span><br/>    <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"kw3\">in</span> <span class=\"re0\">$re</span>.Matches<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$ret</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span> <span class=\"re0\">$m</span>.Length <span class=\"sy0\">+</span> <span class=\"re0\">$m</span>.Value<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$ret</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>MultipleLookAndSay <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"re0\">$a</span><br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>LookAndSay <span class=\"re0\">$a</span><br/>            <span class=\"re0\">$a</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 45, "block": "<pre class=\"prolog highlighted_source\">look_and_say<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\tencode<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlook_and_say<span class=\"br0\">(</span>L1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% This code is almost identical to the code of \"run-length-encoding\" </span><br/>encode<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpackList<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>R1<span class=\"sy4\">,</span>Out<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% use of library clpfd allows packList(?In,\u00a0?Out) to works</span><br/><span class=\"co1\">% in both ways In --&gt; Out and In &lt;-- Out.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\u00a0?- packList([a,a,a,b,c,c,c,d,d,e], L).</span><br/><span class=\"co1\">%  L = [[3,a],[1,b],[3,c],[2,d],[1,e]] .</span><br/><span class=\"co1\">%\u00a0?- packList(R,  [[3,a],[1,b],[3,c],[2,d],[1,e]]).</span><br/><span class=\"co1\">% R = [a,a,a,b,c,c,c,d,d,e] .</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>X<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>XRun<span class=\"sy5\">|</span>Packed<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    run<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Rest<span class=\"sy4\">,</span> XRun<span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    packList<span class=\"br0\">(</span>RRest<span class=\"sy4\">,</span>Packed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy5\">|</span>LRest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>N1<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    N #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>    N1 #<span class=\"sy6\">=</span> N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span>LRest<span class=\"sy4\">,</span><span class=\"br0\">[</span>N<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    dif<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span>Other<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Pure", "loc": 14, "block": "<pre class=\"text highlighted_source\">using system;<br/>\u00a0<br/>// Remove the trailing \"L\" from the string representation of bigints.<br/>__show__ x::bigint = init (str x);<br/>\u00a0<br/>say x = val $ strcat $ map (sprintf \"%d%s\") $ look $ chars $ str x with<br/>  look [] = [];<br/>  look <a class=\"__cf_email__\" data-cfemail=\"0d757e4d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(x:_) = (#takewhile (==x) xs,x)\u00a0: look (dropwhile (==x) xs);<br/>end;<br/>\u00a0<br/>iteraten 5 say 1; // [1,11,21,1211,111221]<br/>\u00a0<br/>// This prints the entire sequence, press Ctrl-C to abort.<br/>do (puts.str) (iterate say 1);</pre>"}, {"lang": "PureBasic", "loc": 26, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, j, cnt, txt$, curr$, result$<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter start sequence: \"</span><span class=\"br0\">)</span>: txt$<span class=\"sy0\">=</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"How many repetitions: \"</span><span class=\"br0\">)</span>: i<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Sequence:\"</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>txt$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    result$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">Repeat</span><br/>      curr$<span class=\"sy0\">=</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>txt$,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      cnt<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">Repeat</span><br/>        cnt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Until</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>txt$,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span>curr$<br/>      result$<span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy0\">+</span>curr$<br/>    <span class=\"kw1\">Until</span> j<span class=\"sy0\">&gt;</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>txt$<span class=\"br0\">)</span>    <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>result$<span class=\"br0\">)</span><br/>    txt$<span class=\"sy0\">=</span>result$<br/>    i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Until</span> i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit.\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> lookandsay<span class=\"br0\">(</span>number<span class=\"br0\">)</span>:<br/>    result <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    repeat <span class=\"sy0\">=</span> number<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    number <span class=\"sy0\">=</span> number<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>+<span class=\"st0\">\" \"</span><br/>    times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> actual <span class=\"kw1\">in</span> number:<br/>        <span class=\"kw1\">if</span> actual <span class=\"sy0\">!=</span> repeat:<br/>            result +<span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span>+repeat<br/>            times <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            repeat <span class=\"sy0\">=</span> actual<br/>        <span class=\"kw1\">else</span>:<br/>            times +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<br/>\u00a0<br/>num <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> num<br/>    num <span class=\"sy0\">=</span> lookandsay<span class=\"br0\">(</span>num<span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 2, "block": "<pre class=\"q highlighted_source\">las:<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">raze</span> <span class=\"kw1\">string</span><span class=\"br0\">[</span><span class=\"kw1\">count</span><span class=\"sy0\">@'</span>x<span class=\"br0\">]</span><span class=\"sy0\">,'@'</span><span class=\"br0\">[</span>;<span class=\"nu0\">0</span><span class=\"br0\">]</span>x:<span class=\"kw2\">where</span><span class=\"br0\">[</span><span class=\"kw1\">differ</span> x<span class=\"br0\">]</span><span class=\"sy0\">_</span>x<span class=\"br0\">}</span><span class=\"sy0\">\\</span><span class=\"br0\">[</span>x;<span class=\"nu0\">1</span><span class=\"sy0\">#</span><span class=\"st0\">\"1\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>las <span class=\"nu0\">8</span></pre>"}, {"lang": "R", "loc": 15, "block": "<pre class=\"text highlighted_source\">look.and.say &lt;- function(x, return.an.int=FALSE)<br/>{<br/>   #convert number to character vector<br/>   xstr &lt;- unlist(strsplit(as.character(x), \"\"))<br/>   #get run length encoding   <br/>   rlex &lt;- rle(xstr)<br/>   #form new string<br/>   odds &lt;- as.character(rlex$lengths)<br/>   evens &lt;- rlex$values<br/>   newstr &lt;- as.vector(rbind(odds, evens))<br/>   #collapse to scalar<br/>   newstr &lt;- paste(newstr, collapse=\"\")<br/>   #convert to number, if desired<br/>   if(return.an.int) as.integer(newstr) else newstr<br/>}</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (encode str)<br/>  (regexp-replace* #px\"(.)\\\\1*\" str (lambda (m c) (~a (string-length m) c))))<br/>\u00a0<br/>(define (look-and-say-sequence n)<br/>  (reverse (for/fold ([r '(\"1\")]) ([n n]) (cons (encode (car r)) r))))<br/>\u00a0<br/>(for-each displayln (look-and-say-sequence 10))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the sequence (and/or lengths) for the    look and say    series.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N\u00a0! <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">20</span>                     <span class=\"coMULTI\">/*Not specified?  Then use the deault. */</span><br/><span class=\"kw1\">if</span>\u00a0!==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>\u00a0!==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>\u00a0!=<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*repeat a number of times to show NUMS*/</span><br/>     <span class=\"kw1\">if</span> j<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span>\u00a0!= $lookAndSay<span class=\"br0\">(</span>!<span class=\"br0\">)</span>            <span class=\"coMULTI\">/*invoke function to calculate next #. */</span><br/>     <span class=\"kw1\">if</span> N<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'length['</span>j<span class=\"st0\">\"]:\"</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span> <span class=\"coMULTI\">/*Also,  display the sequence's length.*/</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'['</span>j<span class=\"st0\">\"]:\"</span>     \u00a0!          <span class=\"coMULTI\">/*display the number to the terminal.  */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>$lookAndSay: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,,$           <span class=\"coMULTI\">/*obtain the (passed) argument  {X}.   */</span><br/>fin = <span class=\"st0\">'0'</span>x                                       <span class=\"coMULTI\">/*use unique character to end scanning.*/</span><br/>x=x <span class=\"sy0\">||</span> fin                                       <span class=\"coMULTI\">/*append the  FIN  character to string.*/</span><br/>             <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">0</span>                        <span class=\"coMULTI\">/*now,  process the given sequence.    */</span><br/>                y=  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*pick off one character to examine.   */</span><br/>             <span class=\"kw1\">if</span> y== fin  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> $           <span class=\"coMULTI\">/*if we're at the end, then we're done.*/</span><br/>             _= <span class=\"kw6\">verify</span><span class=\"br0\">(</span>x, y, , k<span class=\"br0\">)</span>  - k           <span class=\"coMULTI\">/*see how many characters we have of Y.*/</span><br/>             $= $ <span class=\"sy0\">||</span> _ <span class=\"sy0\">||</span> y                      <span class=\"coMULTI\">/*build the  \"look and say\"  sequence. */</span><br/>             k= k  + _                           <span class=\"coMULTI\">/*now, point to the next character.    */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>number = \"1\"<br/>for nr = 1 to 10<br/>    number = lookSay(number)<br/>    see number + nl<br/>next<br/>\u00a0<br/>func lookSay n<br/>     i = 0 j = 0 c=\"\" o=\"\"<br/>     i = 1<br/>     while i &lt;= len(n)<br/>           c = substr(n,i,1)<br/>           j = i + 1<br/>           while substr(n,j,1) = c<br/>                 j += 1<br/>           end<br/>           o += string(j-i) + c<br/>           i = j<br/>      end<br/>      return o <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> look_and_say<br/>    <span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">*/</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> s.<span class=\"me1\">size</span>.<span class=\"me1\">to_s</span> <span class=\"sy0\">+</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>ss = <span class=\"st0\">'1'</span><br/><span class=\"nu0\">12</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"kw3\">puts</span> ss; ss = ss.<span class=\"me1\">look_and_say</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 30, "block": "<pre class=\"text highlighted_source\">fn next_sequence(in_seq: &amp;[i8]) -&gt; Vec&lt;i8&gt; {<br/>    assert!(!in_seq.is_empty());<br/>\u00a0<br/>    let mut result = Vec::new();<br/>    let mut current_number = in_seq[0];<br/>    let mut current_runlength = 1;<br/>\u00a0<br/>    for i in &amp;in_seq[1..] {<br/>        if current_number == *i {<br/>            current_runlength += 1;<br/>        } else {<br/>            result.push(current_runlength);<br/>            result.push(current_number);<br/>            current_runlength = 1;<br/>            current_number = *i;<br/>        }<br/>    }<br/>    result.push(current_runlength);<br/>    result.push(current_number);<br/>    result<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut seq = vec![1];<br/>\u00a0<br/>    for i in 0..10 {<br/>        println!(\"Sequence {}: {:?}\", i, seq);<br/>        seq = next_sequence(&amp;seq);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LookAndSay <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  loop<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span>tailrec<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, num<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, lookandsay<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> lookandsay<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<br/>\u00a0<br/>    <span class=\"sy0\">@</span>tailrec<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>numberString<span class=\"sy0\">:</span> String, repeat<span class=\"sy0\">:</span> Char, times<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numberString.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> result.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numberString.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> repeat<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result.<span class=\"me1\">append</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>repeat<span class=\"br0\">)</span><br/>        loop<span class=\"br0\">(</span>numberString.<span class=\"me1\">tail</span>, numberString.<span class=\"me1\">head</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop<span class=\"br0\">(</span>numberString.<span class=\"me1\">tail</span>, numberString.<span class=\"me1\">head</span>, times + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    loop<span class=\"br0\">(</span>number.<span class=\"me1\">tail</span> + <span class=\"st0\">\" \"</span>, number.<span class=\"me1\">head</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 28, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: lookAndSay (in integer: level, in string: stri) is func<br/>  result<br/>    var string: lookAndSay is \"\";<br/>  local<br/>    var integer: index is 2;<br/>  begin<br/>    if level = 1 then<br/>      if stri &lt;&gt; \"\" then<br/>        while index &lt;= length(stri) and stri[index] = stri[1] do<br/>          incr(index);<br/>        end while;<br/>        lookAndSay\u00a0:= str(pred(index)) &amp; stri[1 len 1] &amp; lookAndSay(level, stri[index ..]);<br/>      end if;<br/>    else<br/>      lookAndSay\u00a0:= lookAndSay(1, lookAndSay(pred(level), stri));<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: level is 0;<br/>  begin<br/>    for level range 1 to 14 do<br/>      writeln(lookAndSay(level, \"1\"));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func lookandsay<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    str.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\<span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a.<span class=\"me1\">len</span>.<span class=\"me1\">to_s</span> <span class=\"sy0\">+</span> b <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var num = <span class=\"st0\">\"1\"</span>;<br/><span class=\"br0\">{</span><br/>  say num;<br/>  num = lookandsay<span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>;</pre>"}, {"lang": "Smalltalk", "loc": 30, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">String</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">lookAndSay</span> <span class=\"br0\">[</span> |<span class=\"re3\">anElement nextElement counter coll newColl</span>|<br/>     <span class=\"re6\">coll</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw1\">self</span> asOrderedCollection<span class=\"br0\">)</span>.<br/>     <span class=\"re5\">newColl</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>     <span class=\"re5\">counter</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>     <span class=\"re5\">anElement</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">coll</span> first<span class=\"br0\">)</span>.<br/>     <span class=\"br0\">[</span> <span class=\"re5\">coll</span> size &gt; <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>     whileTrue: <span class=\"br0\">[</span><br/>        <span class=\"re5\">nextElement</span> <span class=\"sy0\">:=</span> <span class=\"re5\">coll</span> removeFirst.<br/>\t<span class=\"br0\">(</span> <span class=\"re5\">anElement</span> <span class=\"sy0\">==</span> <span class=\"re5\">nextElement</span> <span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span><br/>           <span class=\"re5\">counter</span> <span class=\"sy0\">:=</span> <span class=\"re5\">counter</span> + <span class=\"re5\">1</span>.<br/>        <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span><br/>\t  <span class=\"re5\">newColl</span> add: <span class=\"br0\">(</span><span class=\"re5\">counter</span> displayString<span class=\"br0\">)</span>.<br/>\t  <span class=\"re5\">newColl</span> add: <span class=\"br0\">(</span><span class=\"re5\">anElement</span> asString<span class=\"br0\">)</span>.<br/>\t  <span class=\"re5\">anElement</span> <span class=\"sy0\">:=</span> <span class=\"re5\">nextElement</span>.<br/>\t  <span class=\"re5\">counter</span> <span class=\"sy0\">:=</span> <span class=\"re5\">1</span>.<br/>        <span class=\"br0\">]</span><br/>     <span class=\"br0\">]</span>.<br/>     <span class=\"re5\">newColl</span> add: <span class=\"br0\">(</span><span class=\"re5\">counter</span> displayString<span class=\"br0\">)</span>.<br/>     <span class=\"re5\">newColl</span> add: <span class=\"br0\">(</span><span class=\"re5\">anElement</span> asString<span class=\"br0\">)</span>.<br/>     ^<span class=\"br0\">(</span><span class=\"re5\">newColl</span> join<span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/>|<span class=\"re3\">r</span>|<br/><span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'1'</span>.<br/><span class=\"re5\">10</span> timesRepeat: <span class=\"br0\">[</span><br/>  <span class=\"re5\">r</span> displayNl.<br/>  <span class=\"re5\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">r</span> lookAndSay.<br/><span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 16, "block": "<pre class=\"text highlighted_source\">*       # Encode RLE<br/>        define('rle(str)c,n')\u00a0:(rle_end)<br/>rle     str len(1) . c\u00a0:f(return)<br/>        str span(c) @n =<br/>        rle = rle n c\u00a0:(rle)<br/>rle_end<br/>\u00a0<br/>*       # First m members of sequence with seed n <br/>        define('looksay(n,m)')\u00a0:(looksay_end)<br/>looksay output = n; m = gt(m,1) m - 1\u00a0:f(return)<br/>        n = rle(n)\u00a0:(looksay)<br/>looksay_end        <br/>\u00a0<br/>*       Test and display        <br/>        looksay(1,10)<br/>end</pre>"}, {"lang": "SQL", "loc": 47, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">DROP</span> <span class=\"kw1\">VIEW</span> delta;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span> delta <span class=\"kw1\">AS</span><br/>    <span class=\"kw1\">SELECT</span> sequence1<span class=\"sy0\">.</span>v <span class=\"kw1\">AS</span> x<span class=\"sy0\">,</span><br/>           <span class=\"br0\">(</span>sequence1<span class=\"sy0\">.</span>v<span class=\"sy0\">&lt;&gt;</span>sequence2<span class=\"sy0\">.</span>v<span class=\"br0\">)</span><span class=\"sy0\">*</span>sequence1<span class=\"sy0\">.</span>c <span class=\"kw1\">AS</span> v<span class=\"sy0\">,</span><br/>           sequence1<span class=\"sy0\">.</span>c <span class=\"kw1\">AS</span> c<br/>      <span class=\"kw1\">FROM</span> <span class=\"kw1\">SEQUENCE</span> <span class=\"kw1\">AS</span> sequence1<span class=\"sy0\">,</span><br/>           <span class=\"kw1\">SEQUENCE</span> <span class=\"kw1\">AS</span> sequence2<br/>     <span class=\"kw1\">WHERE</span> sequence1<span class=\"sy0\">.</span>c <span class=\"sy0\">=</span> sequence2<span class=\"sy0\">.</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span>;<br/>\u00a0<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">VIEW</span> rle0;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span> rle0 <span class=\"kw1\">AS</span><br/>    <span class=\"kw1\">SELECT</span> delta2<span class=\"sy0\">.</span>x <span class=\"kw1\">AS</span> x<span class=\"sy0\">,</span><br/>           <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>delta2<span class=\"sy0\">.</span>v<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> v<span class=\"sy0\">,</span><br/>           delta2<span class=\"sy0\">.</span>c <span class=\"kw1\">AS</span> c<br/>      <span class=\"kw1\">FROM</span> delta <span class=\"kw1\">AS</span> delta1<span class=\"sy0\">,</span><br/>           delta <span class=\"kw1\">AS</span> delta2<br/>     <span class=\"kw1\">WHERE</span> delta1<span class=\"sy0\">.</span>c <span class=\"sy0\">&gt;=</span> delta2<span class=\"sy0\">.</span>c<br/>  <span class=\"kw1\">GROUP</span> <span class=\"kw1\">BY</span> delta1<span class=\"sy0\">.</span>c;<br/>\u00a0<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">VIEW</span> rle1;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span> rle1 <span class=\"kw1\">AS</span><br/>    <span class=\"kw1\">SELECT</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span>x <span class=\"kw1\">AS</span> a<span class=\"sy0\">,</span><br/>           x <span class=\"kw1\">AS</span> b<span class=\"sy0\">,</span><br/>           c <span class=\"kw1\">AS</span> c<br/>      <span class=\"kw1\">FROM</span> rle0<br/>  <span class=\"kw1\">GROUP</span> <span class=\"kw1\">BY</span> v;<br/>\u00a0<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">VIEW</span> rle2;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span> rle2 <span class=\"kw1\">AS</span><br/>    <span class=\"kw1\">SELECT</span> a <span class=\"kw1\">AS</span> v<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"kw1\">AS</span> o<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">+</span><span class=\"nu0\">0</span> <span class=\"kw1\">AS</span> c <span class=\"kw1\">FROM</span> rle1 <span class=\"kw1\">UNION</span><br/>    <span class=\"kw1\">SELECT</span> b <span class=\"kw1\">AS</span> v<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"kw1\">AS</span> o<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">AS</span> c <span class=\"kw1\">FROM</span> rle1;<br/>\u00a0<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">VIEW</span> normed;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span> normed <span class=\"kw1\">AS</span><br/>    <span class=\"kw1\">SELECT</span> r1<span class=\"sy0\">.</span>v <span class=\"kw1\">AS</span> v<span class=\"sy0\">,</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>r2<span class=\"sy0\">.</span>o<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> c<br/>      <span class=\"kw1\">FROM</span> rle2 <span class=\"kw1\">AS</span> r1<span class=\"sy0\">,</span><br/>           rle2 <span class=\"kw1\">AS</span> r2<br/>     <span class=\"kw1\">WHERE</span> r1<span class=\"sy0\">.</span>c <span class=\"sy0\">&gt;=</span> r2<span class=\"sy0\">.</span>c<br/>  <span class=\"kw1\">GROUP</span> <span class=\"kw1\">BY</span> r1<span class=\"sy0\">.</span>c;<br/>\u00a0<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">TABLE</span> rle;<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> rle<span class=\"br0\">(</span>v <span class=\"kw1\">INT</span><span class=\"sy0\">,</span> c <span class=\"kw1\">INT</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> rle <span class=\"kw1\">SELECT</span> <span class=\"sy0\">*</span> <span class=\"kw1\">FROM</span> normed <span class=\"kw1\">ORDER</span> <span class=\"kw1\">BY</span> c;<br/>\u00a0<br/><span class=\"kw1\">DELETE</span> <span class=\"kw1\">FROM</span> <span class=\"kw1\">SEQUENCE</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> <span class=\"kw1\">SEQUENCE</span> <span class=\"kw1\">VALUES</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> <span class=\"kw1\">SEQUENCE</span> <span class=\"kw1\">SELECT</span> <span class=\"sy0\">*</span> <span class=\"kw1\">FROM</span> rle;</pre>"}, {"lang": "SQL PL", "loc": 42, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">SET</span> SERVEROUTPUT <span class=\"kw1\">ON</span> @<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">DECLARE</span> NMBR <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">DEFAULT</span> <span class=\"st0\">'1'</span>;<br/> <span class=\"kw1\">DECLARE</span> J <span class=\"kw1\">SMALLINT</span> <span class=\"kw1\">DEFAULT</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/> <span class=\"kw1\">CALL</span> DBMS_OUTPUT<span class=\"sy0\">.</span>PUT_LINE<span class=\"br0\">(</span>NMBR<span class=\"br0\">)</span>;<br/> WHILE <span class=\"br0\">(</span>J <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> DO<br/>  <span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">DECLARE</span> I <span class=\"kw1\">SMALLINT</span>;<br/>  <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">SIZE</span> <span class=\"kw1\">SMALLINT</span>;<br/>  <span class=\"kw1\">DECLARE</span> ACTUAL <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">DECLARE</span> REPEAT <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">RESULT</span> <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">DECLARE</span> TIMES <span class=\"kw1\">SMALLINT</span>;<br/>\u00a0<br/>  <span class=\"kw1\">SET</span> REPEAT <span class=\"sy0\">=</span> SUBSTR<span class=\"br0\">(</span>NMBR<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">SET</span> NMBR <span class=\"sy0\">=</span> SUBSTR<span class=\"br0\">(</span>NMBR<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">' '</span>;<br/>  <span class=\"kw1\">SET</span> TIMES <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">SET</span> <span class=\"kw1\">SIZE</span> <span class=\"sy0\">=</span> <span class=\"kw1\">LENGTH</span><span class=\"br0\">(</span>NMBR<span class=\"br0\">)</span>;<br/>\u00a0<br/>  WHILE <span class=\"br0\">(</span>I <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">SIZE</span><span class=\"br0\">)</span> DO<br/>   <span class=\"kw1\">SET</span> ACTUAL <span class=\"sy0\">=</span> SUBSTR<span class=\"br0\">(</span>NMBR<span class=\"sy0\">,</span> I<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ACTUAL <span class=\"sy0\">&lt;&gt;</span> REPEAT<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">SET</span> <span class=\"kw1\">RESULT</span> <span class=\"sy0\">=</span> <span class=\"kw1\">COALESCE</span><span class=\"br0\">(</span><span class=\"kw1\">RESULT</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> TIMES <span class=\"sy0\">||</span> <span class=\"st0\">''</span> <span class=\"sy0\">||</span> REPEAT;<br/>    <span class=\"kw1\">SET</span> TIMES <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">SET</span> REPEAT <span class=\"sy0\">=</span> ACTUAL;<br/>   <span class=\"kw1\">ELSE</span><br/>    <span class=\"kw1\">SET</span> TIMES <span class=\"sy0\">=</span> TIMES <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>;<br/>   <span class=\"kw1\">SET</span> I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">END</span> WHILE;<br/>\u00a0<br/>  <span class=\"kw1\">CALL</span> DBMS_OUTPUT<span class=\"sy0\">.</span>PUT_LINE<span class=\"br0\">(</span><span class=\"kw1\">RESULT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">SET</span> NMBR <span class=\"sy0\">=</span> <span class=\"kw1\">RESULT</span>;<br/>  <span class=\"kw1\">END</span>\u00a0;<br/>  <span class=\"kw1\">SET</span> J <span class=\"sy0\">=</span> J <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/> <span class=\"kw1\">END</span> WHILE;<br/><span class=\"kw1\">END</span> @<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> lookandsay n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> new <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> char <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$n</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> count <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$n</span> <span class=\"re0\">$count</span><span class=\"br0\">]</span> eq <span class=\"re0\">$char</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> count<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw2\">append</span> new <span class=\"re0\">$count</span> <span class=\"re0\">$char</span><br/>        <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$n</span> <span class=\"re0\">$count</span> end<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> next_lookandsay <span class=\"br0\">{</span><span class=\"br0\">}</span> lookandsay <span class=\"re0\">$new</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"nu0\">1</span>                 <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 1</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>lookandsay <span class=\"nu0\">1</span><span class=\"br0\">]</span>    <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 11</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>next_lookandsay<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 21</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>next_lookandsay<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 1211</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>next_lookandsay<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 111221</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>next_lookandsay<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 312211</span></pre>"}, {"lang": "TUSCRIPT", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT,{}<br/>num=1,say=\"\"<br/> LOOP look<br/>  digits=STRINGS (num,\"\u00a0? \")<br/>  digitgrouped=ACCUMULATE (digits,howmany)<br/>   LOOP/CLEAR  h=howmany,digit=digitgrouped<br/>    say=JOIN (say,\"\",h,digit)<br/>   ENDLOOP<br/>  PRINT say<br/>  num=VALUE(say),say=\"\"<br/>  IF (look==14) EXIT<br/> ENDLOOP<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 17, "block": "<pre class=\"bash highlighted_source\">lookandsay<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">num</span>=<span class=\"re4\">$1</span> char <span class=\"kw2\">seq</span> i<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span>=<span class=\"co1\">${#num}</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        <span class=\"re2\">char</span>=<span class=\"co1\">${num:i:1}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$char</span> == <span class=\"co1\">${seq:0:1}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>            <span class=\"kw2\">seq</span>+=<span class=\"re1\">$char</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"re1\">$seq</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"%d%s\"</span> <span class=\"co1\">${#seq}</span> <span class=\"co1\">${seq:0:1}</span><br/>            <span class=\"re2\">seq</span>=<span class=\"re1\">$char</span><br/>        <span class=\"kw1\">fi</span><br/>    <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">num</span>=<span class=\"nu0\">1</span>, <span class=\"re2\">i</span>=<span class=\"nu0\">1</span>; i<span class=\"sy0\">&lt;</span>=<span class=\"nu0\">10</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$num</span><br/>    <span class=\"re2\">num</span>=$<span class=\"br0\">(</span> lookandsay <span class=\"re1\">$num</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>look_and_say \"n\" = ~&amp;H\\'1' next\"n\" rlc~&amp;E; *= ^lhPrT\\~&amp;hNC\u00a0%nP+ length<br/>\u00a0<br/>#show+<br/>\u00a0<br/>main = look_and_say 10</pre>"}, {"lang": "VBA", "loc": 51, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Sub LookAndSay(Optional Niter As Integer = 10)<br/>'generate \"Niter\" members of the look-and-say sequence<br/>'(argument is optional; default is 10)<br/>\u00a0<br/>Dim s As String            'look-and-say number<br/>Dim news As String         'next number in sequence<br/>Dim curdigit As String     'current digit in s<br/>Dim newdigit As String     'next digit in s<br/>Dim curlength As Integer   'length of current run<br/>Dim p As Integer           'position in s<br/>Dim L As Integer           'length of s<br/>\u00a0<br/>On Error GoTo Oops          'to catch overflow, i.e. number too long<br/>\u00a0<br/>'start with \"1\"<br/>s = \"1\"<br/>For i = 1 To Niter<br/>  'initialise<br/>  L = Len(s)<br/>  p = 1<br/>  curdigit = Left$(s, 1)<br/>  curlength = 1<br/>  news = \"\"<br/>  For p = 2 To L<br/>    'check next digit in s<br/>    newdigit = Mid$(s, p, 1)<br/>    If curdigit = newdigit Then 'extend current run<br/>      curlength = curlength + 1<br/>    Else ' \"output\" run and start new run<br/>      news = news &amp; CStr(curlength) &amp; curdigit<br/>      curdigit = newdigit<br/>      curlength = 1<br/>    End If<br/>  Next p<br/>  ' \"output\" last run<br/>  news = news &amp; CStr(curlength) &amp; curdigit<br/>  Debug.Print news<br/>  s = news<br/>Next i<br/>Exit Sub<br/>\u00a0<br/>Oops:<br/>  Debug.Print<br/>  If Err.Number = 6 Then 'overflow<br/>    Debug.Print \"Oops - number too long!\"<br/>  Else<br/>    Debug.Print \"Error: \"; Err.Number, Err.Description<br/>  End If<br/>End Sub<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 10, "block": "<pre class=\"vedit highlighted_source\"><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  BOL<br/>  Reg_Empty<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>At_EOL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Match<span class=\"br0\">(</span><span class=\"st0\">\"(.)\\1*\"</span><span class=\"sy0\">,</span> REGEXP<span class=\"sy0\">+</span>ADVANCE<span class=\"br0\">)</span><br/>    Num_Str<span class=\"br0\">(</span>Chars_Matched<span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> LEFT<span class=\"sy0\">+</span>APPEND<span class=\"br0\">)</span><br/>    Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">,</span> APPEND<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  Ins_Newline Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 20, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">function</span> looksay( n )<br/>\t<span class=\"kw4\">dim</span> i<br/>\t<span class=\"kw4\">dim</span> accum<br/>\t<span class=\"kw4\">dim</span> res<br/>\t<span class=\"kw4\">dim</span> c<br/>\tres = vbnullstring<br/>\t<span class=\"kw3\">do</span><br/>\t\t<span class=\"kw3\">if</span> n = vbnullstring <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw3\">do</span><br/>\t\taccum = 0<br/>\t\tc = left( n,1 )<br/>\t\t<span class=\"kw3\">do</span> <span class=\"kw3\">while</span> left( n, 1 ) = c<br/>\t\t\taccum = accum + 1<br/>\t\t\tn = mid(n,2)<br/>\t\t<span class=\"kw3\">loop</span><br/>\t\t<span class=\"kw3\">if</span> accum &gt; 0 <span class=\"kw3\">then</span> <br/>\t\t\tres = res &amp; accum &amp; c<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">loop</span><br/>\tlooksay = res<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Yorick", "loc": 30, "block": "<pre class=\"text highlighted_source\">func looksay(input) {<br/>    // Special case: one digit<br/>    if(strlen(input) == 1)<br/>        return \"1\" + input;<br/>    // Convert string into an array of digits<br/>    digits = strchar(input)(:-1);<br/>    // Find indices where each run starts<br/>    w = where(digits(dif));<br/>    start = numberof(w)\u00a0? grow(1, w+1)\u00a0: [1];<br/>    // Find length of each run<br/>    len = grow(start, numberof(digits)+1)(dif);<br/>    // Find digits for each run<br/>    run = digits(start);<br/>    // Construct output array<br/>    result = array(string, numberof(start)*2);<br/>    // Fill in lengths<br/>    result(1::2) = swrite(format=\"%d\", len);<br/>    // Fill in digits; first must add trailing nulls to coerce single string<br/>    // into an array of strings.<br/>    run = transpose([run, array(char(0), numberof(run))])(*);<br/>    result(2::2) = strchar(run);<br/>    // Merge string array into single string<br/>    return result(sum);<br/>}<br/>\u00a0<br/>val = \"1\";<br/>do {<br/>   write, val;<br/>   val = looksay(val);<br/>} while(strlen(val) &lt; 80);</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn lookAndSay(seed){ // numeric String --&gt; numeric String<br/>   len,c:=[1..seed.len()-1].reduce(fcn([(len,c)]lc,index,s,sb){<br/>      if(c!=s[index]) { sb.write(len); sb.write(c); lc.clear(1,s[index]) }<br/>      else lc.clear(len+1,c);<br/>   },L(1,seed[0]), seed,sb:=Sink(String));<br/>   sb.write(len); sb.write(c);<br/>   sb.close();<br/>}</pre>"}]}