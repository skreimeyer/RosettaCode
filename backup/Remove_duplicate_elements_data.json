{"task": "Remove_duplicate_elements", "blocks": [{"lang": "360 Assembly", "loc": 48, "block": "<pre class=\"text highlighted_source\">*        Remove duplicate elements - 18/10/2015<br/>REMDUP   CSECT<br/>         USING  REMDUP,R15         set base register<br/>         SR     R6,R6              i=0<br/>         LA     R8,1               k=1<br/>LOOPK    C      R8,N               do k=1 to n<br/>         BH     ELOOPK<br/>         LR     R1,R8              k<br/>         SLA    R1,2<br/>         L      R9,T-4(R1)         e=t(k)<br/>         LR     R7,R8              k<br/>         BCTR   R7,0               j=k-1<br/>LOOPJ    C      R7,=F'1'           do j=k-1 to 1 by -1<br/>         BL     ELOOPJ<br/>         LR     R1,R7              j<br/>         SLA    R1,2<br/>         L      R2,T-4(R1)         t(j)<br/>         CR     R9,R2              if e=t(j) then goto iter<br/>         BE     ITER<br/>         BCTR   R7,0               j=j-1<br/>         B      LOOPJ<br/>ELOOPJ   LA     R6,1(R6)           i=i+1<br/>         LR     R1,R6              i<br/>         SLA    R1,2<br/>         ST     R9,T-4(R1)         t(i)=e<br/>ITER     LA     R8,1(R8)           k=k+1<br/>         B      LOOPK<br/>ELOOPK   LA     R10,PG             <a class=\"__cf_email__\" data-cfemail=\"3a4a5d53077a4a5d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R8,1               k=1<br/>LOOP     CR     R8,R6              do k=1 to i<br/>         BH     ELOOP<br/>         LR     R1,R8              k<br/>         SLA    R1,2<br/>         L      R2,T-4(R1)         t(k)<br/>         XDECO  R2,PG+80           edit t(k)<br/>         MVC    0(3,R10),PG+89     output t(k) on 3 char<br/>         LA     R10,3(R10)         pgi=pgi+3<br/>         LA     R8,1(R8)           k=k+1<br/>         B      LOOP<br/>ELOOP    XPRNT  PG,80              print buffer<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>T        DC     F'6',F'6',F'1',F'5',F'6',F'2',F'1',F'7',F'5',F'22'<br/>         DC     F'4',F'19',F'1',F'1',F'6',F'8',F'9',F'10',F'11',F'12'<br/>N        DC     A((N-T)/4)         number of T items<br/>PG       DC     CL92' '<br/>         YREGS<br/>         END    REMDUP</pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>remove-duplicates xs<span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Unique_Set <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Int_Sets <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Sets</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Int_Sets;<br/>   Nums\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Unique\u00a0: Set;<br/>   Set_Cur\u00a0: Cursor;<br/>   Success\u00a0: Boolean;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Nums'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>      Unique.<span class=\"me1\">Insert</span><span class=\"br0\">(</span>Nums<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Set_Cur, Success<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Set_Cur\u00a0:= Unique.<span class=\"me1\">First</span>;<br/>   <span class=\"kw1\">loop</span><br/>      Put_Line<span class=\"br0\">(</span>Item =&gt; Integer'Image<span class=\"br0\">(</span>Element<span class=\"br0\">(</span>Set_Cur<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Set_Cur = Unique.<span class=\"me1\">Last</span>;<br/>      Set_Cur\u00a0:= Next<span class=\"br0\">(</span>Set_Cur<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Unique_Set;</pre>"}, {"lang": "Aime", "loc": 5, "block": "<pre class=\"text highlighted_source\">index x;<br/>\u00a0<br/>list(1, 2, 3, 1, 2, 3, 4, 1).ucall(i_add, 1, x, 0);<br/>x.i_vcall(o_, 1, \" \");<br/>o_newline();</pre>"}, {"lang": "ALGOL 68", "loc": 32, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># use the associative array in the Associate array/iteration task    #</span><br/><span class=\"coMULTI\"># this example uses strings - for other types, the associative       #</span><br/><span class=\"coMULTI\"># array modes AAELEMENT and AAKEY should be modified as required     #</span><br/><span class=\"co2\">PR read \"aArray.a68\" PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the unique elements of list                                #</span><br/><span class=\"kw4\">PROC</span> remove duplicates <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw4\">REF</span> AARRAY elements <span class=\"sy1\">:=</span> INIT <span class=\"kw4\">LOC</span> AARRAY<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>        count    <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> list <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"br0\">(</span> elements CONTAINSKEY list<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># first occurance of this element                    #</span><br/>                elements <span class=\"sy1\">//</span> list<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>                count <span class=\"sy1\">+:=</span> 1<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># construct an array of the unique elements from the         #</span><br/>        <span class=\"coMULTI\"># associative array - the new list will not necessarily be   #</span><br/>        <span class=\"coMULTI\"># in the original order                                      #</span><br/>        <span class=\"br0\">[</span> count <span class=\"br0\">]</span><span class=\"kw3\">STRING</span> result<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">REF</span> AAELEMENT e <span class=\"sy1\">:=</span> FIRST elements<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">WHILE</span> e <span class=\"kw7\">ISNT</span> nil element <span class=\"kw2\">DO</span><br/>            result<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> key <span class=\"kw6\">OF</span> e<span class=\"sy1\">;</span><br/>            e <span class=\"sy1\">:=</span> NEXT elements<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># remove duplicates #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the duplicate removal                                         #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> remove duplicates<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"F\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"F\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"A\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u222a 1 2 3 1 2 3 4 1<br/>1 2 3 4</pre>"}, {"lang": "AppleScript", "loc": 9, "block": "<pre class=\"applescript highlighted_source\">unique<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"d\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">on</span> unique<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> R <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">in</span> x<br/>        <span class=\"kw3\">if</span> i <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw3\">in</span> R <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> R <span class=\"kw3\">to</span> i<span class=\"co2\">'</span>s <span class=\"kw1\">contents</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> R<br/><span class=\"kw3\">end</span> unique</pre>"}, {"lang": "Applesoft BASIC", "loc": 41, "block": "<pre class=\"text highlighted_source\">100 DIM L$(15)<br/>110 L$(0) = \"NOW\"<br/>120 L$(1) = \"IS\"<br/>130 L$(2) = \"THE\"<br/>140 L$(3) = \"TIME\"<br/>150 L$(4) = \"FOR\"<br/>160 L$(5) = \"ALL\"<br/>170 L$(6) = \"GOOD\"<br/>180 L$(7) = \"MEN\"<br/>190 L$(8) = \"TO\"<br/>200 L$(9) = \"COME\"<br/>210 L$(10) = \"TO\"<br/>220 L$(11) = \"THE\"<br/>230 L$(12) = \"AID\"<br/>240 L$(13) = \"OF\"<br/>250 L$(14) = \"THE\"<br/>260 L$(15) = \"PARTY.\"<br/>\u00a0<br/>300 N = 15<br/>310 GOSUB 400<br/>320 FOR I = 0 TO N<br/>330     PRINT L$(I) \" \"\u00a0;<br/>340 NEXT<br/>350 PRINT<br/>360 END<br/>\u00a0<br/>400 REMREMOVE DUPLICATES<br/>410 FOR I = N TO 1 STEP -1<br/>420    I$ = L$(I)<br/>430    FOR J = 0 TO I - 1<br/>440        EQ = I$ = L$(J)<br/>450        IF NOT EQ THEN NEXT J<br/>460    IF EQ THEN GOSUB 500<br/>470 NEXT I<br/>480 RETURN<br/>\u00a0<br/>500 REMREMOVE ELEMENT<br/>510 L$(I) = L$(N)<br/>520 L$(N) = \"\"<br/>530 N = N - 1<br/>540 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> NUD`<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% a  <span class=\"co1\">; 1,2,3,4,5,15</span></pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"a b c d c b a\"</span>,a<span class=\"br0\">)</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span>b<span class=\"br0\">[</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>=<span class=\"nu0\">1</span>;r=<span class=\"st0\">\"\"</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> b<span class=\"br0\">)</span>r=r<span class=\"st0\">\" \"</span>i;<span class=\"kw5\">print</span> r<span class=\"br0\">}</span>'<br/>a b c d</pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      DIM list$(15)<br/>      list$() = \"Now\", \"is\", \"the\", \"time\", \"for\", \"all\", \"good\", \"men\", \\<br/>      \\         \"to\", \"come\", \"to\", \"the\", \"aid\", \"of\", \"the\", \"party.\"<br/>      num% = FNremoveduplicates(list$())<br/>      FOR i% = 0 TO num%-1<br/>        PRINT list$(i%) \" \"\u00a0;<br/>      NEXT<br/>      PRINT<br/>      END<br/>\u00a0<br/>      DEF FNremoveduplicates(l$())<br/>      LOCAL i%, j%, n%, i$<br/>      n% = 1<br/>      FOR i% = 1 TO DIM(l$(), 1)<br/>        i$ = l$(i%)<br/>        FOR j% = 0 TO i%-1<br/>          IF i$ = l$(j%) EXIT FOR<br/>        NEXT<br/>        IF j%&gt;=i% l$(n%) = i$\u00a0: n% += 1<br/>      NEXT<br/>      = n%</pre>"}, {"lang": "Bracmat", "loc": 63, "block": "<pre class=\"text highlighted_source\">2 3 5 7 11 13 17 19 cats 222 (-100.2) \"+11\" (1.1) \"+7\" (7.) 7 5 5 3 2 0 (4.4) 2:?LIST<br/>\u00a0<br/>(A=<br/>  ( Hashing<br/>  =   h elm list<br/>    .   new$hash:?h<br/>      &amp;   whl<br/>        ' (\u00a0!arg:%?elm\u00a0?arg<br/>          &amp; ( (h..find)$str$!elm<br/>            | (h..insert)$(str$!elm.!elm)<br/>            )<br/>          )<br/>      &amp;\u00a0:?list<br/>      &amp;   (h..forall)<br/>        $ (<br/>          = .!arg:(?.?arg)&amp;!arg\u00a0!list:?list<br/>          )<br/>      &amp;\u00a0!list<br/>  )<br/>&amp; put$(\"Solution A:\" Hashing$!LIST \\n,LIN)<br/>);<br/>\u00a0<br/>(B=<br/>  ( backtracking<br/>  =   answr elm<br/>    .    \u00a0:?answr<br/>        &amp;  \u00a0!arg<br/>         \u00a0:  \u00a0?<br/>              (  \u00a0%?`elm<br/>                 \u00a0?<br/>                  (\u00a0!elm\u00a0?<br/>                  | &amp;!answr\u00a0!elm:?answr<br/>                  )<br/>              &amp; ~<br/>              )<br/>      |\u00a0!answr<br/>  )<br/>&amp; put$(\"Solution B:\" backtracking$!LIST \\n,LIN)<br/>);<br/>\u00a0<br/>(C=<br/>  ( summing<br/>  =   sum car LIST<br/>    .  \u00a0!arg:?LIST<br/>      &amp; 0:?sum<br/>      &amp;   whl<br/>        ' (\u00a0!LIST:%?car\u00a0?LIST<br/>          &amp; (.!car)+!sum:?sum<br/>          )<br/>      &amp;   whl<br/>        ' (\u00a0!sum:#*(.?el)+?sum<br/>          &amp;\u00a0!el\u00a0!LIST:?LIST<br/>          )<br/>      &amp;\u00a0!LIST<br/>  )<br/>&amp; put$(\"Solution C:\" summing$!LIST \\n,LIN)<br/>);<br/>\u00a0<br/>(\u00a0!A<br/>&amp;\u00a0!B<br/>&amp;\u00a0!C<br/>&amp;<br/>)</pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">some_array = [1 1 2 1 'redundant' [1 2 3] [1 2 3] 'redundant']<br/>\u00a0<br/>unique_array = some_array.unique</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> list_node <span class=\"br0\">{</span><span class=\"kw4\">int</span> x<span class=\"sy0\">;</span> <span class=\"kw4\">struct</span> list_node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> list_node node<span class=\"sy0\">;</span><br/>\u00a0<br/>node <span class=\"sy0\">*</span> uniq<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> alen<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>alen <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>  node <span class=\"sy0\">*</span>start <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  start<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  start<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> alen <span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span>node <span class=\"sy0\">*</span>n <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span> n <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><br/>         <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>             <span class=\"br0\">{</span>n<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              n <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              n<span class=\"sy0\">-&gt;</span>x <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>              n<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>              <span class=\"kw2\">break</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> start<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>node <span class=\"sy0\">*</span>n <span class=\"sy0\">=</span> uniq<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> n <span class=\"sy0\">!=</span> NULL <span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-&gt;</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 5, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> unique <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"kw1\">in</span> nums<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>unique<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        unique<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 15, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">typedef</span> set<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> TySet<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    TySet unique_set<span class=\"br0\">(</span>data, data <span class=\"sy2\">+</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set items:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>TySet<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iter <span class=\"sy1\">=</span> unique_set.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> unique_set.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> iter<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>          <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>iter <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CafeOBJ", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-- The parametrized module NO-DUP-LIST(ELEMENTS\u00a0:: TRIV) defines the signature of simple Haskell like list structure.<br/>-- The removal of duplicates is handled by the equational properties listed after the signature in brackets {}<br/>-- The binary operation _,_ is associative, commutative, and idempotent.<br/>-- This list structure does not permit duplicates, they are removed during evaluation (called reduction in CafeOBJ)<br/>-- Actual code is contained in module called  NO-DUP-LIST.<br/>-- The tests are performed after opening instantiated NO-DUP-LIST with various concrete types.<br/>-- For further details see: http://www.ldl.jaist.ac.jp/cafeobj/<br/>mod! NO-DUP-LIST(ELEMENTS\u00a0:: TRIV)  {<br/>    [ List &lt; Elem &lt; Elt]  -- Sorts in Ordered Sorted Algebra<br/>    op []\u00a0: -&gt; List { prec: 0 }  -- Empty List<br/>    op _,_\u00a0: Elt Elt -&gt; Elt { comm assoc idem prec: 80 l-assoc } <br/>    op [_]\u00a0: Elt -&gt; List  { prec: 0 }<br/>}<br/>\u00a0<br/>-- Test on lists of INT, CHARACTER, and STRING<br/>open NO-DUP-LIST(INT)<br/>reduce [ 1 , 2 , 1 , 1 ] .     -- Gives [ 1 , 2 ]<br/>open NO-DUP-LIST(CHARACTER)<br/>reduce [ 'a' , 'b' , 'a' , 'a' ] .  -- Gives [ 'a' , 'b' ]<br/>open NO-DUP-LIST(STRING)<br/>reduce [ \"abc\" , \"def\" , \"abc\" ] . -- Gives [ \"def\" , \"abc\" ]<br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 2, "block": "<pre class=\"text highlighted_source\">&lt;String|Integer&gt;[] data = [1, 2, 3, \"a\", \"b\", \"c\", 2, 3, 4, \"b\", \"c\", \"d\"];<br/>&lt;String|Integer&gt;[] unique = HashSet { *data }.sequence();</pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>distinct <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>user<span class=\"sy0\">=&gt;</span></pre>"}, {"lang": "CoffeeScript", "loc": 6, "block": "<pre class=\"coffeescript highlighted_source\">data = <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"d\"</span> <span class=\"br0\">]</span><br/>set = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>set.<span class=\"me1\">push</span> i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> data <span class=\"kw1\">when</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> set<span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> data<br/>console.<span class=\"me1\">log</span> set</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>remove-duplicates '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">9</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    .<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">uniq</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 4, "block": "<pre class=\"text highlighted_source\">}<br/>for item in [ 1 10 1\u00a0:hi\u00a0:hello\u00a0:hi\u00a0:hi ]:<br/>\t@item<br/>!. keys set{</pre>"}, {"lang": "Delphi", "loc": 24, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> RemoveDuplicateElements<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  lIntegerList<span class=\"sy1\">:</span> TList&lt;Integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  INT_ARRAY<span class=\"sy1\">:</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lIntegerList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList&lt;Integer&gt;<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> INT_ARRAY <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> lIntegerList<span class=\"sy1\">.</span><span class=\"kw1\">Contains</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      lIntegerList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> lIntegerList <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lIntegerList<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">getElements</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "ECL", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>inNumbers  \u00a0:= DATASET([{1},{2},{3},{4},{1},{1},{7},{8},{9},{9},{0},{0},{3},{3},{3},{3},{3}], {INTEGER Field1});<br/>DEDUP(SORT(inNumbers,Field1));<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 13, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'collections.<br/>import system'routines.<br/>\u00a0<br/>program =<br/>[<br/>    var nums\u00a0:= (1,1,2,3,4,4).<br/>    dictionary unique\u00a0:= Dictionary new.<br/>\u00a0<br/>    nums forEach(:n)[ unique[n]\u00a0:= n ].<br/>\u00a0<br/>    console printLine(unique).<br/>].</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  # Set approach<br/>  def uniq1(list), do: MapSet.new(list) |&gt; MapSet.to_list<br/>\u00a0<br/>  # Sort approach<br/>  def uniq2(list), do: Enum.sort(list) |&gt; Enum.dedup<br/>\u00a0<br/>  # Go through the list approach<br/>  def uniq3(list), do: uniq3(list, [])<br/>\u00a0<br/>  defp uniq3([], res), do: Enum.reverse(res)<br/>  defp uniq3([h|t], res) do<br/>    if h in res, do: uniq3(t, res), else: uniq3(t, [h | res])<br/>  end<br/>end<br/>\u00a0<br/>num = 10000<br/>max = div(num, 10)<br/>list = for _ &lt;- 1..num, do:\u00a0:rand.uniform(max)<br/>funs = [&amp;Enum.uniq/1, &amp;RC.uniq1/1, &amp;RC.uniq2/1, &amp;RC.uniq3/1]<br/>Enum.each(funs, fn fun -&gt;<br/>  result = fun.([1,1,2,1,'redundant',1.0,[1,2,3],[1,2,3],'redundant',1.0])<br/> \u00a0:timer.tc(fn -&gt;<br/>    Enum.each(1..100, fn _ -&gt; fun.(list) end)<br/>  end)<br/>  |&gt; fn{t,_} -&gt; IO.puts \"#{inspect fun}:\\t#{t/1000000}\\t#{inspect result}\" end.()<br/>end)</pre>"}, {"lang": "Erlang", "loc": 5, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re5\">List</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re5\">UniqueList</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/gb_sets.html\"><span class=\"kw5\">gb_sets</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/gb_sets.html\"><span class=\"kw5\">gb_sets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"co1\">% Alternatively the builtin:</span><br/><span class=\"re5\">Unique_list</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">usort</span><span class=\"br0\">(</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 17, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/>\u00a0<br/><span class=\"kw1\">function</span> uniq<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    s <span class=\"sy1\">=</span> sort<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    out <span class=\"sy1\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span>out<span class=\"br0\">[</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            out <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>out<span class=\"sy2\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> out<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> s <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"sy2\">,</span> <span class=\"nu0\">5</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">15</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"sy2\">?</span> s<br/><span class=\"sy2\">?</span> uniq<span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/>set <span class=\"br0\">[</span>|<span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span>|<span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USING: sets\u00a0;<br/>V{ 1 2 1 3 2 4 5 } members .<br/>\u00a0<br/>V{ 1 2 3 4 5 }</pre>"}, {"lang": "Forth", "loc": 19, "block": "<pre class=\"text highlighted_source\">\\ Increments a2 until it no longer points to the same value as a1<br/>\\ a3 is the address beyond the data a2 is traversing.<br/>: skip-dups ( a1 a2 a3 -- a1 a2+n )<br/>    dup rot\u00a0?do<br/>      over @ i @ &lt;&gt; if drop i leave then<br/>    cell +loop\u00a0;<br/>\u00a0<br/>\\ Compress an array of cells by removing adjacent duplicates<br/>\\ Returns the new count<br/>: uniq ( a n -- n2 )<br/>   over &gt;r             \\ Original addr to return stack<br/>   cells over + &gt;r     \\ \"to\" addr now on return stack, available as <a class=\"__cf_email__\" data-cfemail=\"9be9db\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>   dup begin           ( write read )<br/>      dup <a class=\"__cf_email__\" data-cfemail=\"97e5d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt;<br/>   while<br/>      2dup @ swap\u00a0!    \\ copy one cell<br/>      cell+ <a class=\"__cf_email__\" data-cfemail=\"7a083a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> skip-dups<br/>      cell 0 d+        \\ increment write ptr only<br/>   repeat  r&gt; 2drop  r&gt; - cell /\u00a0;</pre>"}, {"lang": "Fortran", "loc": 28, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">program</span> remove_dups<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">example</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span>         <span class=\"co1\">! The input</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>example<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">! The output</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span>                   <span class=\"co1\">! The number of unique elements</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  example <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>  k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  res<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> example<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  outer<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>example<span class=\"br0\">)</span><br/>     <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,k<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>res<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> example<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           <span class=\"co1\">! Found a match so start looking again</span><br/>           <span class=\"kw1\">cycle</span> outer<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>     <span class=\"co1\">! No match found so add it to the output</span><br/>     k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>     res<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> example<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> outer<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span>,<span class=\"kw1\">fmt</span><span class=\"sy0\">=</span><span class=\"st0\">'(a,i0,a)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Unique list has '</span>,k,<span class=\"st0\">' elements: '</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> res<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>k<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> remove_dups<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 39, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> removeDuplicates<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> lb <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> ub = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"co1\">'' empty array</span><br/>  <span class=\"kw1\">Redim</span> b<span class=\"br0\">(</span>lb <span class=\"kw1\">To</span> ub<span class=\"br0\">)</span><br/>  b<span class=\"br0\">(</span>lb<span class=\"br0\">)</span> = a<span class=\"br0\">(</span>lb<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> unique <span class=\"kw1\">As</span> Boolean<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = lb + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ub<br/>    unique = <span class=\"kw1\">True</span> <br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = lb <span class=\"kw1\">to</span> i - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        unique = <span class=\"kw1\">False</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">If</span> unique <span class=\"kw1\">Then</span><br/>      b<span class=\"br0\">(</span>lb + count<span class=\"br0\">)</span> = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      count += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">If</span> count &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> b<span class=\"br0\">(</span>lb <span class=\"kw1\">To</span> lb + count - <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>removeDuplicates a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>b = [1, 5, 2, 6, 6, 2, 2, 1, 9, 8, 6, 5]<br/>\u00a0<br/>// One way, using OrderedList.  An OrderedList is a type of array that keeps<br/>// its elements in order.  The items must be comparable.<br/>a = new OrderedList<br/>println[a.insertAllUnique[b]]<br/>\u00a0<br/>// Another way, using the \"set\" datatype and back to an array.<br/>println[toArray[toSet[b]]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 14, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Now is the time for all the good men to come to the aid of the good party 1 2 1 3 3 3 2 1 1 2 3 4 33 2 5 4 333 5\"</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sFix <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sString<br/>  sTemp <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\" \"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span>sFix.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span>, sTemp<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/continue\"><span class=\"kw1\">Continue</span></a><br/>  sFix.<span class=\"me1\">Add</span><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/trim\"><span class=\"kw2\">Trim</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sFix.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 9, "block": "<pre class=\"text highlighted_source\"># Built-in, using sets (which are also lists)<br/>a\u00a0:= [ 1, 2, 3, 1, [ 4 ], 5, 5, [4], 6 ];<br/># [ 1, 2, 3, 1, [ 4 ], 5, 5, [ 4 ], 6 ]<br/>b\u00a0:= Set(a);<br/># [ 1, 2, 3, 5, 6, [ 4 ] ]<br/>IsSet(b);<br/># true<br/>IsList(b);<br/># true</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> uniq<span class=\"sy1\">(</span>list <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tunique_set <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>\t\tunique_set<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\tresult <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>unique_set<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> unique_set <span class=\"sy1\">{</span><br/>\t\tresult <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>result<span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>uniq<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">}))</span> <span class=\"co1\">// prints: [3 4 1 2] (but in a semi-random order)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 22, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"             Original List: ${list}\"</span><br/>\u00a0<br/><span class=\"co1\">// Filtering the List (non-mutating)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> list2 <span class=\"sy0\">=</span> list.<span class=\"me1\">unique</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> list2.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"             Filtered List: ${list2}\"</span><br/>\u00a0<br/><span class=\"co1\">// Filtering the List (in place)</span><br/>list.<span class=\"me1\">unique</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"   Original List, filtered: ${list}\"</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> list3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> list3.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"co1\">// Converting to Set</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> set <span class=\"sy0\">=</span> list <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> set.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"                       Set: ${set}\"</span></pre>"}, {"lang": "GW-BASIC", "loc": 29, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\"><br/>10</span>   <span class=\"co1\">' Remove Duplicates</span><br/><span class=\"co3\">20</span>   <a href=\"http://www.qbasicnews.com/qboho/qckoption.shtml\"><span class=\"kw3\">OPTION</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckbase.shtml\"><span class=\"kw3\">BASE</span></a> <span class=\"nu0\">1</span><br/><span class=\"co3\">30</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> MAXI% <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><br/><span class=\"co3\">40</span>   <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> D<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> R<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>: <span class=\"co1\">' data, result</span><br/><span class=\"co3\">50</span>   <span class=\"co1\">' Set the data.</span><br/><span class=\"co3\">60</span>   <span class=\"kw1\">FOR</span> I% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><br/><span class=\"co3\">70</span>    <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> D<span class=\"br0\">(</span>I%<span class=\"br0\">)</span><br/><span class=\"co3\">80</span>   <span class=\"kw1\">NEXT</span> I%<br/><span class=\"co3\">90</span>   <span class=\"co1\">' Remove duplicates.   </span><br/><span class=\"co3\">100</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> R<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> D<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co3\">110</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LRI% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: <span class=\"co1\">' last index of result</span><br/><span class=\"co3\">120</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> P% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: <span class=\"co1\">' position</span><br/><span class=\"co3\">130</span>  <span class=\"kw1\">WHILE</span> P% <span class=\"sy0\">&lt;</span> MAXI%<br/><span class=\"co3\">140</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> P% <span class=\"sy0\">=</span> P% <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">150</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> ISNEW <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: <span class=\"co1\">' is a new number?</span><br/><span class=\"co3\">160</span>   <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> RI% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: <span class=\"co1\">' current index of result</span><br/><span class=\"co3\">170</span>   <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>RI% <span class=\"sy0\">&lt;=</span> LRI%<span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> ISNEW<br/><span class=\"co3\">180</span>    <span class=\"kw1\">IF</span> D<span class=\"br0\">(</span>P%<span class=\"br0\">)</span> <span class=\"sy0\">=</span> R<span class=\"br0\">(</span>RI%<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> ISNEW <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co3\">190</span>    <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> RI% <span class=\"sy0\">=</span> RI% <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">200</span>   <span class=\"kw1\">WEND</span><br/><span class=\"co3\">210</span>   <span class=\"kw1\">IF</span> ISNEW <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LRI% <span class=\"sy0\">=</span> LRI% <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>: <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> R<span class=\"br0\">(</span>LRI%<span class=\"br0\">)</span> <span class=\"sy0\">=</span> D<span class=\"br0\">(</span>P%<span class=\"br0\">)</span><br/><span class=\"co3\">220</span>  <span class=\"kw1\">WEND</span><br/><span class=\"co3\">230</span>  <span class=\"kw1\">FOR</span> RI% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> LRI%<br/><span class=\"co3\">240</span>   <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> R<span class=\"br0\">(</span>RI%<span class=\"br0\">)</span><br/><span class=\"co3\">250</span>  <span class=\"kw1\">NEXT</span> RI%<br/><span class=\"co3\">260</span>  <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/><span class=\"co3\">1000</span> <a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> unique <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 9, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span>      nums<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"kw1\">CHARACTER</span> <span class=\"sy1\">::</span> workspace<span class=\"sy1\">*</span><span class=\"nu0\">100</span><br/>\u00a0<br/>nums <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>workspace<span class=\"br0\">)</span> nums                   <span class=\"co1\">! convert to string</span><br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>workspace<span class=\"sy1\">,</span> SortDelDbls<span class=\"sy1\">=</span>workspace<span class=\"br0\">)</span>  <span class=\"co1\">! do the job for a string</span><br/><span class=\"kw1\">READ</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>workspace<span class=\"sy1\">,</span> ItemS<span class=\"sy1\">=</span>individuals<span class=\"br0\">)</span> nums <span class=\"co1\">! convert to numeric</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> individuals<span class=\"sy1\">,</span> <span class=\"st0\">\"individuals: \"</span><span class=\"sy1\">,</span> nums <span class=\"co1\">! 6 individuals: 0 1 2 3 8 9 0 0 0 0 0 0 </span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>noDups<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> noDups<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>newL <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> notDup<span class=\"br0\">(</span><span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,!</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> newL<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> notDup<span class=\"br0\">(</span>cache<span class=\"sy1\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">member</span><span class=\"br0\">(</span>cache<span class=\"sy1\">,</span> a<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>         <span class=\"kw4\">insert</span><span class=\"br0\">(</span>cache<span class=\"sy1\">,</span> a<span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> a<br/>         <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">non_repeated_values <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>uniq<span class=\"br0\">(</span>array, sort<span class=\"br0\">(</span> array<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Inform 7", "loc": 5, "block": "<pre class=\"text highlighted_source\">To decide which list of Ks is (L - list of values of kind K) without duplicates:<br/>\tlet result be a list of Ks;<br/>\trepeat with X running through L:<br/>\t\tadd X to result, if absent;<br/>\tdecide on result.</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   ~. <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">9</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span> <span class=\"nu0\">9</span> <span class=\"nu0\">9</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span>  <br/><span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">9</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span><br/>   ~. <span class=\"st_h\">'chthonic eleemosynary paronomasiac'</span><br/>chtoni elmsyarp</pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> data = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"d\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Set.html\"><span class=\"kw46\">Set</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span> uniqueSet = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashSet.html\"><span class=\"kw46\">HashSet</span></a><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object\"><span class=\"kw166\">Object</span></a> o\u00a0: uniqueSet<span class=\"br0\">)</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>, o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> unique<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// concat() with no args is a way to clone an array</span><br/>    <span class=\"kw1\">var</span> u <span class=\"sy0\">=</span> ary.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> u.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>u<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            u.<span class=\"me1\">splice</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            i<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> u<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> ary <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"d\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> uniq <span class=\"sy0\">=</span> unique<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> uniq.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>    print<span class=\"br0\">(</span>uniq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">typeof</span><span class=\"br0\">(</span>uniq<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">[4,3,2,1,1,2,3,4] | unique</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">a = [1, 2, 3, 4, 1, 2, 3, 4]<br/>@show unique(a) Set(a)</pre>"}, {"lang": "K", "loc": 31, "block": "<pre class=\"text highlighted_source\">   a:4 5#20?13   / create a random 4 x 5 matrix<br/>(12 7 12 4 3<br/> 6 3 7 4 7<br/> 3 8 3 1 2<br/> 2 12 6 4 1)<br/>\u00a0<br/>   ,/a           / flatten to array<br/>12 7 12 4 3 6 3 7 4 7 3 8 3 1 2 2 12 6 4 1<br/>\u00a0<br/>  \u00a0?,/a          / distinct elements<br/>12 7 4 3 6 8 1 2<br/>\u00a0<br/>  \u00a0?\"chthonic eleemosynary paronomasiac\"<br/>\"chtoni elmsyarp\"<br/>\u00a0<br/>  \u00a0?(\"this\";\"that\";\"was\";\"that\";\"was\";\"this\")<br/>(\"this\"<br/> \"that\"<br/> \"was\")<br/>\u00a0<br/>   0 1 1 2 0 *\\: 0 1 2<br/>(0 0 0<br/> 0 1 2<br/> 0 1 2<br/> 0 2 4<br/> 0 0 0)<br/>\u00a0<br/>  \u00a0?0 1 1 2 0 *\\: 0 1 2<br/>(0 0 0<br/> 0 1 2<br/> 0 2 4)</pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"d\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> set <span class=\"sy0\">=</span> data.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 8, "block": "<pre class=\"text highlighted_source\">: dip  swap '_ set execute _\u00a0;<br/>\u00a0<br/>: remove-duplicates<br/>    [] swap do unique? length 0 == if break then loop drop\u00a0;<br/>: unique?<br/>    0 extract swap \"2dup in if drop else append then\" dip\u00a0;<br/>\u00a0<br/>[1 2 6 3 6 4 5 6] remove-duplicates .</pre>"}, {"lang": "Lasso", "loc": 6, "block": "<pre class=\"text highlighted_source\">local(<br/>\tx = array(3,4,8,1,8,1,4,5,6,8,9,6),<br/>\ty = array<br/>)<br/>with n in #x where #y\u00a0!&gt;&gt; #n do =&gt; { #y-&gt;insert(#n) }<br/>// result: array(3, 4, 8, 1, 5, 6, 9)</pre>"}, {"lang": "Liberty BASIC", "loc": 20, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>a$ <span class=\"sy0\">=</span><span class=\"st0\">\" 1 $23.19 2 elbow 3 2 Bork 4 3 elbow 2 $23.19 \"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Original set of elements = [\"</span>; a$; <span class=\"st0\">\"]\"</span><br/>\u00a0<br/>b$ <span class=\"sy0\">=</span>removeDuplicates$<span class=\"br0\">(</span> a$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"With duplicates removed  = [\"</span>; b$; <span class=\"st0\">\"]\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> removeDuplicates$<span class=\"br0\">(</span> in$<span class=\"br0\">)</span><br/>    o$ <span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><br/>    i  <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">do</span><br/>        term$    <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> o$<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>; term$; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">and</span> term$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\" \"</span> <span class=\"kw1\">then</span> o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span>term$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><br/>        i        <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> term$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    removeDuplicates$ <span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">show remdup [1 2 3 a b c 2 3 4 b c d]  \u00a0; [1 a 2 3 4 b c d]</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\">items <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"st0\">\"bird\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"cat\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"dog\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"dog\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"bird\"</span><span class=\"br0\">}</span><br/>flags <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">'Unique items are:'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>items <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> flags<span class=\"br0\">[</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">..</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      flags<span class=\"br0\">[</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt; L\u00a0:= [ 1, 2, 1, 2, 3, 3, 2, 1, \"a\", \"b\", \"b\", \"a\", \"c\", \"b\" ];<br/>      L\u00a0:= [1, 2, 1, 2, 3, 3, 2, 1, \"a\", \"b\", \"b\", \"a\", \"c\", \"b\"]<br/>\u00a0<br/>&gt; [op]({op}(L));<br/>                        [1, 2, 3, \"a\", \"b\", \"c\"]</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">DeleteDuplicates[{0, 2, 1, 4, 2, 0, 3, 1, 1, 1, 0, 3}]</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.html\"><span class=\"kw2\">unique</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">2</span>     <span class=\"nu0\">3</span>     <span class=\"nu0\">4</span>     <span class=\"nu0\">5</span>     <span class=\"nu0\">6</span></pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">unique([8, 9, 5, 2, 0, 7, 0, 0, 4, 2, 7, 3, 9, 6, 6, 2, 4, 7, 9, 8, 3, 8, 0, 3, 7, 0, 2, 7, 6, 0]);<br/>[0, 2, 3, 4, 5, 6, 7, 8, 9]</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">uniques = #(1, 2, 3, \"a\", \"b\", \"c\", 2, 3, 4, \"b\", \"c\", \"d\")<br/>for i in uniques.count to 1 by -1 do<br/>(<br/>    id = findItem uniques uniques[i]<br/>    if (id\u00a0!= i) do deleteItem uniques i<br/>)</pre>"}, {"lang": "Microsoft Small Basic", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>' Set the data.<br/>dataArray[1] = 1<br/>dataArray[2] = 2<br/>dataArray[3] = 2<br/>dataArray[4] = 3<br/>dataArray[5] = 4<br/>dataArray[6] = 5<br/>dataArray[7] = 5<br/>\u00a0<br/>resultArray[1] = dataArray[1]<br/>lastResultIndex = 1<br/>position = 1<br/>While position &lt; Array.GetItemCount(dataArray)<br/>  position = position + 1<br/>  isNewNumber = 1 ' logical 1<br/>  resultIndex = 1<br/>  While (resultIndex &lt;= lastResultIndex) And isNewNumber = 1<br/>    If dataArray[position] = resultArray[resultIndex] Then<br/>      isNewNumber = 0<br/>    EndIf<br/>    resultIndex = resultIndex + 1<br/>  EndWhile<br/>  If isNewNumber = 1 Then<br/>    lastResultIndex = lastResultIndex + 1<br/>    resultArray[lastResultIndex] = dataArray[position]<br/>  EndIf<br/>EndWhile<br/>For resultIndex = 1 To lastResultIndex<br/>  TextWindow.WriteLine(resultArray[resultIndex])<br/>EndFor<br/>\u00a0</pre>"}, {"lang": "ML", "loc": 16, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> mem <span class=\"br0\">(</span>x, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x eql a, a <span class=\"sy0\">::</span> <span class=\"kw1\">as</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x, _ <span class=\"sy0\">::</span> <span class=\"kw1\">as</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> mem <span class=\"br0\">(</span>x, <span class=\"kw1\">as</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;</span>\t  <br/><span class=\"kw1\">fun</span> remdup<br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, uniq<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rev uniq<br/>\t<span class=\"sy0\">|</span>\t<span class=\"br0\">(</span>h <span class=\"sy0\">::</span> t, uniq<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> mem<span class=\"br0\">(</span>h, uniq<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\tremdup <span class=\"br0\">(</span>t, uniq<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tremdup <span class=\"br0\">(</span>t, h <span class=\"sy0\">::</span> uniq<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">|</span>\tL <span class=\"sy0\">=</span>\tremdup <span class=\"br0\">(</span>L, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">;</span>\t<br/>println ` implode ` remdup ` explode <span class=\"st0\">\"the quick brown fox jumped over the lazy dog\"</span><span class=\"sy0\">;</span><br/>println ` remdup <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>, <span class=\"st0\">\"dog\"</span>,<span class=\"st0\">\"cat\"</span>,<span class=\"st0\">\"dog\"</span>, <span class=\"nu0\">1.1</span>, <span class=\"nu0\">2.2</span>, <span class=\"nu0\">3.3</span>, <span class=\"nu0\">1.1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 51, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> RemoveDuplicates;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteLn;<br/><span class=\"kw1\">FROM</span> SWholeIO <span class=\"kw1\">IMPORT</span><br/>  WriteInt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  TArrayRange <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">7</span><span class=\"br0\">]</span>;<br/>  TArray <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> TArrayRange <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  DataArray<span class=\"sy0\">,</span> ResultArray<span class=\"sy0\">:</span> TArray;<br/>  ResultIndex<span class=\"sy0\">,</span> LastResultIndex<span class=\"sy0\">,</span> Position<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>  IsNewNumber<span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"coMULTI\">(* Set the data. *)</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span>;<br/>  DataArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span>;<br/>\u00a0<br/>  ResultArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> DataArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>  LastResultIndex <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  Position <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">WHILE</span> Position &lt; <span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>DataArray<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>    IsNewNumber <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>    ResultIndex <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>ResultIndex &lt;<span class=\"sy0\">=</span> LastResultIndex<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> IsNewNumber <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> DataArray<span class=\"br0\">[</span>Position<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ResultArray<span class=\"br0\">[</span>ResultIndex<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>        IsNewNumber <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>      <span class=\"kw1\">END</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>ResultIndex<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> IsNewNumber <span class=\"kw1\">THEN</span><br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>LastResultIndex<span class=\"br0\">)</span>;<br/>      ResultArray<span class=\"br0\">[</span>LastResultIndex<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> DataArray<span class=\"br0\">[</span>Position<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">FOR</span> ResultIndex <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> LastResultIndex <span class=\"kw1\">DO</span><br/>    WriteInt<span class=\"br0\">(</span>ResultArray<span class=\"br0\">[</span>ResultIndex<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> RemoveDuplicates.<br/>\u00a0</pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">REMDUPE(L,S)<br/>\u00a0;L is the input listing<br/>\u00a0;S is the separator between entries<br/>\u00a0;R is the list to be returned<br/> NEW Z,I,R<br/> FOR I=1:1:$LENGTH(L,S) SET Z($PIECE(L,S,I))=\"\"<br/>\u00a0;Repack for return<br/> SET I=\"\",R=\"\"<br/> FOR  SET I=$O(Z(I)) QUIT:I=\"\"  SET R=$SELECT($L(R)=0:I,1:R_S_I)<br/> KILL Z,I<br/> QUIT R</pre>"}, {"lang": "Nemerle", "loc": 11, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>\u00a0<br/>module RemDups<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def nums = array[1, 4, 6, 3, 6, 2, 7, 2, 5, 2, 6, 8];<br/>        def unique = $[n | n in nums].RemoveDuplicates();<br/>        WriteLine(unique);<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 48, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- Note: Task requirement is to process \"arrays\".  The following converts arrays into simple lists of words:</span><br/><span class=\"co1\">--       Putting the resulting list back into an array is left as an exercise for the reader.</span><br/>a1 = <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">19</span>, <span class=\"st0\">'cats'</span>, <span class=\"nu0\">222</span>, -<span class=\"nu0\">100.2</span>, +<span class=\"nu0\">11</span>, <span class=\"nu0\">1.1</span>, +<span class=\"nu0\">7</span>, <span class=\"st0\">'7.'</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">4.4</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>a2 = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span><span class=\"br0\">]</span><br/>a3 = <span class=\"br0\">[</span><span class=\"st0\">'Now'</span>, <span class=\"st0\">'is'</span>, <span class=\"st0\">'the'</span>, <span class=\"st0\">'time'</span>, <span class=\"st0\">'for'</span>, <span class=\"st0\">'all'</span>, <span class=\"st0\">'good'</span>, <span class=\"st0\">'men'</span>, <span class=\"st0\">'to'</span>, <span class=\"st0\">'come'</span>, <span class=\"st0\">'to'</span>, <span class=\"st0\">'the'</span>, <span class=\"st0\">'aid'</span>, <span class=\"st0\">'of'</span>, <span class=\"st0\">'the'</span>, <span class=\"st0\">'party.'</span><span class=\"br0\">]</span><br/>x = <span class=\"nu0\">0</span><br/>lists = <span class=\"st0\">''</span><br/>x = x + <span class=\"nu0\">1</span>; lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x; lists<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = array2wordlist<span class=\"br0\">(</span>a1<span class=\"br0\">)</span><br/>x = x + <span class=\"nu0\">1</span>; lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x; lists<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = array2wordlist<span class=\"br0\">(</span>a2<span class=\"br0\">)</span><br/>x = x + <span class=\"nu0\">1</span>; lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = x; lists<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = array2wordlist<span class=\"br0\">(</span>a3<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> to lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  nodups_list = remove_dups<span class=\"br0\">(</span>lists<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> ix.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> lists<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">''</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> nodups_list<br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw3\">end</span> ix<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/>method remove_dups<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  newlist = <span class=\"st0\">''</span><br/>  nodups = <span class=\"st0\">'0'</span><br/>  <span class=\"kw1\">loop</span> w_ = <span class=\"nu0\">1</span> to list.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ix = list.<span class=\"kw6\">word</span><span class=\"br0\">(</span>w_<span class=\"br0\">)</span><br/>    nodups<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> = nodups<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> + <span class=\"nu0\">1</span> <span class=\"co1\">-- we can even collect a count of dups if we want</span><br/>    <span class=\"kw3\">end</span> w_<br/>  <span class=\"kw1\">loop</span> k_ over nodups<br/>    newlist = newlist k_<br/>    <span class=\"kw3\">end</span> k_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> newlist.<span class=\"kw6\">space</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/>method array2wordlist<span class=\"br0\">(</span>ra = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  wordlist = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> r_ over ra<br/>    wordlist = wordlist r_<br/>    <span class=\"kw3\">end</span> r_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> wordlist.<span class=\"kw6\">space</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#unique\"><span class=\"kw1\">unique</span></a> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> a b c <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> b c d<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nial", "loc": 5, "block": "<pre class=\"text highlighted_source\">uniques\u00a0:= [1, 2, 3, 'a', 'b', 'c', 2, 3, 4, 'b', 'c', 'd']<br/>cull uniques<br/>=+-+-+-+-+-+-+-+-+<br/>=|1|2|3|a|b|c|4|d|<br/>=+-+-+-+-+-+-+-+-+</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">import sequtils, algorithm, intsets<br/>\u00a0<br/># Go through the list, and for each element, check the rest of the list to see<br/># if it appears again,<br/>var items = @[1, 2, 3, 2, 3, 4, 5, 6, 7]<br/>echo deduplicate(items) # O(n^2)<br/>\u00a0<br/>proc filterDup(xs): seq[int] =<br/>  result = @[xs[0]]<br/>  var last = xs[0]<br/>  for x in xs[1..xs.high]:<br/>    if x\u00a0!= last:<br/>      result.add(x)<br/>      last = x<br/>\u00a0<br/>#  Put the elements into a hash table which does not allow duplicates.<br/>var s = initIntSet()<br/>for x in items:<br/>  s.incl(x)<br/>echo s<br/>\u00a0<br/># Sort the elements and remove consecutive duplicate elements.<br/>sort(items, system.cmp[int]) # O(n log n)<br/>echo filterDup(items) # O(n)</pre>"}, {"lang": "Objeck", "loc": 23, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Structure<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Unique <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      nums <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      unique <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">:=</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>unique<span class=\"sy0\">-&gt;</span><span class=\"me1\">Has</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          unique<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> unique<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        unique<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 3, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>items <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> arrayWithObjects<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"A\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"B\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"C\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"B\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"A\"</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>;<br/>\u00a0<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> <span class=\"sy0\">*</span>unique <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSet_Class/\"><span class=\"kw5\">NSSet</span></a> setWithArray<span class=\"sy0\">:</span>items<span class=\"br0\">]</span>;</pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> uniq lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> unique_set <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length lst<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace unique_set x <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> lst<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>fold <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"br0\">(</span><span class=\"br0\">)</span> xs <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">::</span> xs<span class=\"br0\">)</span> unique_set <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span><br/>  uniq <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "Octave", "loc": 4, "block": "<pre class=\"octave highlighted_source\">\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/input.html\"><span class=\"kw5\">input</span></a><span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span> <span class=\"nu0\">32</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>output<span class=\"sy3\">=</span><a href=\"http://octave.sourceforge.net/octave/function/unique.html\"><span class=\"kw6\">unique</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/input.html\"><span class=\"kw5\">input</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre>import: set\n\n[ 1, 2, 3, 1, 2, 4, 1, 3, 4, 5 ] asSet println\n[1, 2, 3, 4, 5]\n</pre>"}, {"lang": "ooRexx", "loc": 8, "block": "<pre class=\"oorexx highlighted_source\">data = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"c\"</span>, <span class=\"st0\">\"d\"</span><span class=\"br0\">)</span><br/>uniqueData = <span class=\"sy0\">.</span>set~new~union<span class=\"br0\">(</span>data<span class=\"br0\">)</span>~makearray~sort<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Unique elements are\"</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">do</span> item <span class=\"kw2\">over</span> uniqueData<br/>   <span class=\"kw1\">say</span> item<br/><span class=\"kw3\">end</span></pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Nub</span> Xs<span class=\"br0\">}</span><br/>     D = <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>new<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> Xs <span class=\"kw1\">do</span> D<span class=\"sy0\">.</span>X <span class=\"sy0\">:=</span> <span class=\"kw1\">unit</span> <span class=\"kw1\">end</span><br/>     <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>keys D<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Nub <span class=\"br0\">[</span>1 2 1 3 5 4 3 4 4<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">rd<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 33, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> RemoveDuplicates<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  iArray<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  rArray<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> pos<span class=\"sy1\">,</span> last<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  newNumber<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  rArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> iArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  last <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  pos <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> pos &lt; high<span class=\"br0\">(</span>iArray<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    inc<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    newNumber <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>rArray<span class=\"br0\">)</span> <span class=\"kw1\">to</span> last <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> iArray<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy3\">=</span> rArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        newNumber <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> newNumber <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      inc<span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      rArray<span class=\"br0\">[</span>last<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> iArray<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>rArray<span class=\"br0\">)</span> <span class=\"kw1\">to</span> last <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>rArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">MoreUtils</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>uniq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@uniq</span> <span class=\"sy0\">=</span> uniq <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> a b c <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> b c d<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@unique</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">unique</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 44, "block": "<pre class=\"text highlighted_source\">sequence test<br/>\u00a0<br/>function alpha(integer i, integer j)<br/>integer res<br/>    res = compare(test[i],test[j])<br/>    if res=0 then<br/>        res = compare(i,j)<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>function unique(sequence s)<br/>sequence at, valid = repeat(1,length(s))<br/>object last, this<br/>integer ai, nxt<br/>\u00a0<br/>    test = s<br/>    at = custom_sort(routine_id(\"alpha\"),tagset(length(test)))<br/>    last = test[at[1]]<br/>    for i=2 to length(at) do<br/>        ai = at[i]<br/>        this = test[ai]<br/>        valid[ai] = last!=this<br/>        last = this<br/>    end for<br/>\u00a0<br/>    nxt = find(0,valid)<br/>    if nxt then<br/>        for i=nxt+1 to length(test) do<br/>            if valid[i] then<br/>                test[nxt] = test[i]<br/>                nxt += 1<br/>            end if<br/>        end for<br/>        test = test[1..nxt-1]<br/>    end if<br/>    return test<br/>end function<br/>\u00a0<br/>?join(unique(split(\"Now is the time for all good men to come to the aid of the party.\")))<br/>?unique({1, 2, 1, 4, 5, 2, 15, 1, 3, 4})<br/>?unique({1, 2, 3, \"a\", \"b\", \"c\", 2, 3, 4, \"b\", \"c\", \"d\"})<br/>?unique({1,3,2,9,1,2,3,8,8,1,0,2})<br/>?unique(\"chthonic eleemosynary paronomasiac\")</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$list</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'c'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$unique_list</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_unique\"><span class=\"kw3\">array_unique</span></a><span class=\"br0\">(</span><span class=\"re0\">$list</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(uniq (2 4 6 1 2 3 4 5 6 1 3 5))</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"text highlighted_source\">*process mar(1,72);<br/>remdup: Proc options(main);<br/>   declare t(20) fixed initial (6, 6, 1, 5, 6, 2, 1, 7,<br/>      5, 22, 4, 19, 1, 1, 6, 8, 9, 10, 11, 12);<br/>   declare (i, j, k, n, e) fixed;<br/>\u00a0<br/>   put skip list ('Input:');<br/>   put edit ((t(k) do k = 1 to hbound(t))) (skip,20(f(3)));<br/>   n = hbound(t,1);<br/>   i = 0;<br/>outer:<br/>   do k = 1 to n;<br/>      e = t(k);<br/>      do j = k-1 to 1 by -1;<br/>          if e = t(j) then iterate outer;<br/>      end;<br/>      i = i + 1;<br/>      t(i) = e;<br/>   end;<br/>\u00a0<br/>   put skip list ('Unique elements are:');<br/>   put edit ((t(k) do k = 1 to i)) (skip,20(f(3)));<br/>end;</pre>"}, {"lang": "Pop11", "loc": 13, "block": "<pre class=\"text highlighted_source\">;;; Initial array<br/>lvars ar = {1 2 3 2 3 4};<br/>;;; Create a hash table<br/>lvars ht= newmapping([], 50, 0, true);<br/>;;; Put all array as keys into the hash table<br/>lvars i;<br/>for i from 1 to length(ar) do<br/>   1 -&gt; ht(ar(i))<br/>endfor;<br/>\u00a0<br/>;;; Collect keys into a list<br/>lvars ls = [];<br/>appdata(ht, procedure(x); cons(front(x), ls) -&gt; ls; endprocedure);</pre>"}, {"lang": "PostScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> [10 8 8 98 32 2 4 5 10 ] dup length dict begin  aload let* currentdict {pop} map end<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\">uniq<span class=\"br0\">(</span>Data<span class=\"sy4\">,</span>Uniques<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> sort<span class=\"br0\">(</span>Data<span class=\"sy4\">,</span>Uniques<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\">NewMap MyElements.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span>              <span class=\"co1\">;Mark 10 items at random, causing high risk of duplication items.</span><br/>  x<span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  t$<span class=\"sy0\">=</span><span class=\"st0\">\"Number \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" is marked\"</span><br/>  MyElements<span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>t$   <span class=\"co1\">; Add element 'X' to the hash list or overwrite if already included.</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">ForEach</span> MyElements<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Debug</span> MyElements<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\">items <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"sy0\">,</span> <span class=\"st0\">'d'</span><span class=\"br0\">]</span><br/>unique <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>items<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define remove-duplicates<br/>  []    -&gt; []<br/>  [A|R] -&gt; (remove-duplicates R) where (element? A R)<br/>  [A|R] -&gt; [A|(remove-duplicates R)])<br/>\u00a0<br/>(remove-duplicates [a b a a b b c d e])<br/>\u00a0</pre>"}, {"lang": " R ", "loc": 2, "block": "<pre class=\"text highlighted_source\">items &lt;- c(1,2,3,2,4,3,2)<br/>unique (items)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-&gt; (remove-duplicates '(2 1 3 2.0 a 4 5 b 4 3 a 7 1 3 x 2))<br/>'(2 1 3 2.0 a 4 5 b 7 x)<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 12, "block": "<pre class=\"text highlighted_source\">[ 1 2 3 'a' 'b' 'c' 2 3 4 'b' 'c' 'd' ] as items<br/>items copy unique print<br/>\u00a0<br/>list (8 items)<br/> 0 =&gt; 1<br/> 1 =&gt; 2<br/> 2 =&gt; 3<br/> 3 =&gt; \"a\"<br/> 4 =&gt; \"b\"<br/> 5 =&gt; \"c\"<br/> 6 =&gt; 4<br/> 7 =&gt; \"d\"</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">print</span> <span class=\"kw3\">mold</span> <span class=\"kw3\">unique</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> $<span class=\"nu0\">23.19</span> <span class=\"nu0\">2</span> elbow <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> Bork <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> elbow <span class=\"nu0\">2</span> $<span class=\"nu0\">23.19</span><span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt;&gt; items: [1 \"a\" \"c\" 1 3 4 5 \"c\" 3 4 5]<br/>&gt;&gt; unique items<br/>== [1 \"a\" \"c\" 3 4 5]</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program removes any duplicate elements (items) that are in a list (using a hash).*/</span><br/>$= <span class=\"st0\">'2 3 5 7 11 13 17 19 cats 222 -100.2 +11 1.1 +7 7. 7 5 5 3 2 0 4.4 2'</span>    <span class=\"coMULTI\">/*item list.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'original list:'</span>     $<br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>, <span class=\"nu0\">17</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>    <span class=\"st0\">'words in the original list.'</span><br/>z=;                              @<span class=\"sy0\">.</span>=             <span class=\"coMULTI\">/*initialize the NEW list &amp; index list.*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;       y=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$,j<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*process the words (items) in the list*/</span><br/>     <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>y==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> z=z y;     @<span class=\"sy0\">.</span>y=<span class=\"sy0\">.</span>           <span class=\"coMULTI\">/*Not duplicated? Add to Z list,@ array*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'modified list:'</span>   <span class=\"kw6\">space</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>, <span class=\"nu0\">17</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>    <span class=\"st0\">'words in the modified list.'</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>list = [\"Now\", \"is\", \"the\", \"time\", \"for\", \"all\", \"good\", \"men\", \"to\", \"come\", \"to\", \"the\", \"aid\", \"of\", \"the\", \"party.\"]<br/>for i = 1 to len(list)<br/>    for j = i + 1 to len(list) <br/>        if list[i] = list[j] del(list, j) j-- ok<br/>    next<br/>next<br/>\u00a0<br/>for n = 1 to len(list)<br/>    see list[n] + \" \"<br/>next<br/>see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">ary = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,<span class=\"st0\">'redundant'</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"st0\">'redundant'</span><span class=\"br0\">]</span><br/><span class=\"kw3\">p</span> ary.<span class=\"me1\">uniq</span>              <span class=\"co1\"># =&gt; [1, 2, \"redundant\", [1, 2, 3]]</span></pre>"}, {"lang": "Run BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">a$ = \"2 3 5 7 11 13 17 19 cats 222 -100.2 +11 1.1 +7 7. 7 5 5 3 2 0 4.4 2\"<br/>\u00a0<br/>for i = 1 to len(a$)<br/>  a1$ = word$(a$,i)<br/>  if a1$ = \"\" then exit for<br/>  for i1 = 1 to len(b$)<br/>    if a1$ = word$(b$,i1) then [nextWord]<br/>  next i1<br/>  b$ = b$ + a1$ + \" \"<br/>[nextWord]<br/>next i<br/>\u00a0<br/> print \"Dups:\";a$<br/> print \"No Dups:\";b$</pre>"}, {"lang": "Rust", "loc": 19, "block": "<pre class=\"text highlighted_source\">use std::collections::HashSet;<br/>use std::hash::Hash;<br/>\u00a0<br/>fn remove_duplicate_elements_hashing&lt;T: Hash + Eq&gt;(elements: &amp;mut Vec&lt;T&gt;) {<br/>    let set: HashSet&lt;_&gt; = elements.drain(..).collect();<br/>    elements.extend(set.into_iter());<br/>}<br/>\u00a0<br/>fn remove_duplicate_elements_sorting&lt;T: Ord&gt;(elements: &amp;mut Vec&lt;T&gt;) {<br/>    elements.sort_unstable(); // order does not matter<br/>    elements.dedup();<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut sample_elements = vec![0, 0, 1, 1, 2, 3, 2];<br/>    println!(\"Before removal of duplicates\u00a0: {:?}\", sample_elements);<br/>    remove_duplicate_elements_sorting(&amp;mut sample_elements);<br/>    println!(\"After removal of duplicates\u00a0: {:?}\", sample_elements);<br/>}</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">99</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> l2 <span class=\"sy0\">=</span> list.<span class=\"me1\">distinct</span><br/><span class=\"co1\">// l2: scala.List[scala.Int] = List(1,2,3,4,99)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arr <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">99</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arr2 <span class=\"sy0\">=</span> arr.<span class=\"me1\">distinct</span><br/><span class=\"co1\">// arr2: Array[Int] = Array(1, 2, 3, 4, 99)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>duplicates <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>         '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>duplicates <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>duplicates <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>duplicates '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array integer: data is [] (1, 3, 2, 9, 1, 2, 3, 8, 8, 1, 0, 2);<br/>    var set of integer: dataSet is (set of integer).value;<br/>    var integer: number is 0;<br/>  begin<br/>    for number range data do<br/>      incl(dataSet, number);<br/>    end for;<br/>    writeln(dataSet);<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 2, "block": "<pre class=\"text highlighted_source\">items\u00a0:= [0,7,6,6,4,9,7,1,2,3,2];<br/>print(unique(items));</pre>"}, {"lang": "SETL4", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>set = new('set')<br/>* Add all the elements of the array to the set.<br/>add(set,array)<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var ary = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,<span class=\"st0\">'redundant'</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"st0\">'redundant'</span><span class=\"br0\">]</span>;<br/>say ary.<span class=\"me1\">uniq</span>.<span class=\"me1\">dump</span>;<br/>say ary.<span class=\"me1\">last_uniq</span>.<span class=\"me1\">dump</span>;</pre>"}, {"lang": "Slate", "loc": 3, "block": "<pre class=\"text highlighted_source\">[|:s| #(1 2 3 4 1 2 3 4) &gt;&gt; s] writingAs: Set. <br/>\u00a0<br/>\"==&gt; {\"Set traitsWindow\" 1. 2. 3. 4}\"</pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"coMULTI\">\"Example of creating a collection\"</span><br/>|<span class=\"re3\">a</span>|<br/><span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">#</span><span class=\"br0\">(</span> <span class=\"re5\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"st0\">'hello'</span> <span class=\"st0\">'world'</span> <span class=\"re1\">#symbol</span> <span class=\"re1\">#another</span> <span class=\"nu0\">2</span> <span class=\"st0\">'hello'</span> <span class=\"re1\">#symbol</span> <span class=\"br0\">)</span>.<br/><span class=\"re5\">a</span> asSet.</pre>"}, {"lang": "Sparkling", "loc": 13, "block": "<pre class=\"text highlighted_source\">function undupe(arr) {<br/>\tvar t = {};<br/>\tforeach(arr, function(key, val) {<br/>\t\tt[val] = true;<br/>\t});<br/>\u00a0<br/>\tvar r = {};<br/>\tforeach(t, function(key) {<br/>\t\tr[sizeof r] = key;<br/>\t});<br/>\u00a0<br/>\treturn r;<br/>}</pre>"}, {"lang": "Stata", "loc": 25, "block": "<pre class=\"text highlighted_source\">. clear all<br/>. input x y<br/>1 1<br/>1 1<br/>1 2<br/>2 1<br/>2 2<br/>1 1<br/>2 1<br/>2 1<br/>1 2<br/>2 2<br/>end<br/>\u00a0<br/>. duplicates drop x y, force<br/>. list<br/>\u00a0<br/>     +-------+<br/>     | x   y |<br/>     |-------|<br/>  1. | 1   1 |<br/>  2. | 1   2 |<br/>  3. | 2   1 |<br/>  4. | 2   2 |<br/>     +-------+</pre>"}, {"lang": "Swift", "loc": 1, "block": "<pre class=\"text highlighted_source\">println(Array(Set([3,2,1,2,3,4])))</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique <span class=\"re0\">$listname</span><span class=\"br0\">]</span></pre>"}, {"lang": "TUSCRIPT", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>list_old=\"b'A'A'5'1'2'3'2'3'4\"<br/>list_sort=MIXED_SORT (list_old)<br/>list_new=REDUCE (list_sort)<br/>PRINT list_old<br/>PRINT list_new<br/>\u00a0</pre>"}, {"lang": "UnixPipes", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"co4\">bash$ </span><span class=\"co0\"># original list</span><br/><span class=\"co4\">bash$ </span><span class=\"kw3\">printf</span> <span class=\"st_h\">'6\\n2\\n3\\n6\\n4\\n2\\n'</span><br/><span class=\"nu0\">6</span><br/><span class=\"nu0\">2</span><br/><span class=\"nu0\">3</span><br/><span class=\"nu0\">6</span><br/><span class=\"nu0\">4</span><br/><span class=\"nu0\">2</span><br/><span class=\"co4\">bash$ </span><span class=\"co0\"># made uniq</span><br/><span class=\"co4\">bash$ </span><span class=\"kw3\">printf</span> <span class=\"st_h\">'6\\n2\\n3\\n6\\n4\\n2\\n'</span><span class=\"sy0\">|</span><span class=\"kw2\">sort</span> <span class=\"re5\">-n</span><span class=\"sy0\">|</span><span class=\"kw2\">uniq</span><br/><span class=\"nu0\">2</span><br/><span class=\"nu0\">3</span><br/><span class=\"nu0\">4</span><br/><span class=\"nu0\">6</span><br/><span class=\"co4\">bash$</span></pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#cast\u00a0%s<br/>\u00a0<br/>example = |=hS&amp; 'mississippi'</pre>"}, {"lang": "VBA", "loc": 30, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> myArr() <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    myArr = Remove_Duplicate(Array(1.23456789101112E+16, <span class=\"kw5\">True</span>, <span class=\"kw5\">False</span>, <span class=\"kw5\">True</span>, <span class=\"st0\">\"Alpha\"</span>, 1, 235, 4, 1.25, 1.25, <span class=\"st0\">\"Beta\"</span>, 1.23456789101112E+16, <span class=\"st0\">\"Delta\"</span>, <span class=\"st0\">\"Alpha\"</span>, <span class=\"st0\">\"Charlie\"</span>, 1, 2, <span class=\"st0\">\"Foxtrot\"</span>, <span class=\"st0\">\"Foxtrot\"</span>, <span class=\"st0\">\"Alpha\"</span>, 235))<br/><span class=\"co1\">'return\u00a0: <br/></span>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(myArr) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myArr)<br/>        Debug.<span class=\"kw4\">Print</span> myArr(i)<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Remove_Duplicate(Arr <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>()<br/><span class=\"kw4\">Dim</span> myColl <span class=\"kw4\">As</span> <span class=\"kw2\">New</span> Collection, Temp() <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, cpt <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    <span class=\"kw4\">ReDim</span> Temp(<span class=\"kw4\">UBound</span>(Arr))<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Arr) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Arr)<br/>        <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>        myColl.Add CStr(Arr(i)), CStr(Arr(i))<br/>        <span class=\"kw3\">If</span> Err.Number &gt; 0 <span class=\"kw3\">Then</span><br/>            <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>        <span class=\"kw3\">Else</span><br/>            Temp(cpt) = Arr(i)<br/>            cpt = cpt + 1<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> Temp(cpt - 1)<br/>    Remove_Duplicate = Temp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 17, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> remove_duplicates(list)<br/>\tarr = Split(list,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw4\">Set</span> dict = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\t<span class=\"kw3\">If</span> dict.Exists(arr(i)) = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>\t\t\tdict.Add arr(i),<span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> key <span class=\"kw3\">In</span> dict.Keys<br/>\t\ttmp = tmp &amp; key &amp; <span class=\"st0\">\",\"</span><br/>\t<span class=\"kw3\">Next</span><br/>\tremove_duplicates = Left(tmp,Len(tmp)-1)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.Echo remove_duplicates(<span class=\"st0\">\"a,a,b,b,c,d,e,d,f,f,f,g,h\"</span>)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 2, "block": "<pre class=\"vedit highlighted_source\">Sort<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> File_Size<span class=\"br0\">)</span>                                          <span class=\"co1\">// sort the data</span><br/><span class=\"kw1\">While</span><span class=\"br0\">(</span>Replace<span class=\"br0\">(</span><span class=\"st0\">\"^(.*)\\N\\1$\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\\1\"</span><span class=\"sy0\">,</span> REGEXP<span class=\"sy0\">+</span>BEGIN<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span>    <span class=\"co1\">// remove duplicates</span></pre>"}, {"lang": "Vim Script", "loc": 1, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">call</span> <span class=\"kw3\">filter</span><span class=\"br0\">(</span><span class=\"kw2\">list</span>, <span class=\"st0\">'count(list, v:val) == 1'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Wart", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>dedup l<span class=\"br0\">)</span><br/>  let exists <span class=\"br0\">(</span>table<span class=\"br0\">)</span><br/>    collect+each x l<br/>      unless exists.<span class=\"me1\">x</span><br/>        <span class=\"kw1\">yield</span> x<br/>      exists.<span class=\"me1\">x</span> <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span></pre>"}, {"lang": "Visual FoxPro", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL i As Integer, n As Integer, lcOut As String<br/>CLOSE DATABASES ALL<br/>CLEAR<br/>CREATE CURSOR nums (num I)<br/>INDEX ON num TAG num COLLATE \"Machine\"<br/>SET ORDER TO 0<br/>n = 50<br/>RAND(-1)<br/>FOR i = 1 TO n<br/>    INSERT INTO nums VALUES (RanInt(1, 10))<br/>ENDFOR<br/>SELECT num, COUNT(num) As cnt FROM nums\u00a0;<br/>GROUP BY num INTO CURSOR grouped<br/>LIST OFF TO FILE grouped.txt NOCONSOLE<br/>lcOut = \"\"<br/>SCAN<br/>    lcOut = lcOut + TRANSFORM(num) + \",\"<br/>ENDSCAN<br/>lcOut = LEFT(lcOut, LEN(lcOut)-1)<br/>? lcOut\t<br/>\u00a0<br/>FUNCTION RanInt(tnLow As Integer, tnHigh As Integer) As Integer<br/>RETURN INT((tnHigh - tnLow + 1)*RAND() + tnLow)<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@uniq [1 2 3 2 1 2 3]\u00a0; returns [1 2 3]</pre>"}, {"lang": "XPL0", "loc": 24, "block": "<pre class=\"text highlighted_source\">code Text=12;           \\built-in routine to display a string of characters<br/>string 0;               \\use zero-terminated strings (not MSb terminated)<br/>\u00a0<br/>func StrLen(S);         \\Return number of characters in an ASCIIZ string<br/>char S;<br/>int  I;<br/>for I:= 0, -1&gt;&gt;1-1 do   \\(limit = 2,147,483,646 if 32 bit, or 32766 if 16 bit)<br/>        if S(I) = 0 then return I;<br/>\u00a0<br/>func Unique(S);         \\Remove duplicate bytes from string<br/>char S;<br/>int  I, J, K, L;<br/>[L:= StrLen(S);                         \\string length<br/>for I:= 0 to L-1 do                     \\for all characters in string...<br/>    for J:= I+1 to L-1 do               \\scan rest of string for duplicates<br/>        if S(I) = S(J) then             \\if duplicate then<br/>            [for K:= J+1 to L do        \\ shift rest of string down (including<br/>                S(K-1):= S(K);          \\ terminating zero)<br/>            L:= L-1                     \\ string is now one character shorter<br/>            ];<br/>return S;                               \\return pointer to string<br/>];<br/>\u00a0<br/>Text(0, Unique(\"Pack my box with five dozen liquor jugs.\"))</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">zkl: Utils.Helpers.listUnique(T(1,3,2,9,1,2,3,8,8,\"8\",1,0,2,\"8\"))<br/>L(1,3,2,9,8,\"8\",0)<br/>zkl: \"1,3,2,9,1,2,3,8,8,1,0,2\".unique()<br/>,012389</pre>"}]}