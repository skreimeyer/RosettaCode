{"task": "Sort_disjoint_sublist", "blocks": [{"lang": "Ada", "loc": 57, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, GNAT.<span class=\"me1\">Bubble_Sort</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> DisjointSort <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Int_Io <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Integer_IO <span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Index_Range <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">8</span>;<br/>   Input_Array\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Index_Range<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Subindex_Range <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>;<br/>   <span class=\"kw3\">type</span> Sub_Arrays <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Subindex_Range<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\u00a0<br/>   Sub_Index\u00a0: Sub_Arrays\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/>   Sub_Array\u00a0: Sub_Arrays;<br/>\u00a0<br/>   <span class=\"co1\">-- reuse of the somehow generic GNAT.Bubble_Sort (for Ada05)</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Sort <span class=\"br0\">(</span>Work_Array\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Sub_Arrays<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> Exchange <span class=\"br0\">(</span>Op1, Op2\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         Temp\u00a0: Integer;<br/>      <span class=\"kw1\">begin</span><br/>         Temp            \u00a0:= Work_Array <span class=\"br0\">(</span>Op1<span class=\"br0\">)</span>;<br/>         Work_Array <span class=\"br0\">(</span>Op1<span class=\"br0\">)</span>\u00a0:= Work_Array <span class=\"br0\">(</span>Op2<span class=\"br0\">)</span>;<br/>         Work_Array <span class=\"br0\">(</span>Op2<span class=\"br0\">)</span>\u00a0:= Temp;<br/>      <span class=\"kw1\">end</span> Exchange;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Lt <span class=\"br0\">(</span>Op1, Op2\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Work_Array <span class=\"br0\">(</span>Op1<span class=\"br0\">)</span> &lt; Work_Array <span class=\"br0\">(</span>Op2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Lt;<br/>   <span class=\"kw1\">begin</span><br/>      GNAT.<span class=\"me1\">Bubble_Sort</span>.<span class=\"me1\">Sort</span><br/>        <span class=\"br0\">(</span>N    =&gt; Subindex_Range'Last,<br/>         Xchg =&gt; Exchange'Unrestricted_Access,<br/>         Lt   =&gt; Lt'Unrestricted_Access<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Sort;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- as the positions are not ordered, first sort the positions</span><br/>   Sort <span class=\"br0\">(</span>Sub_Index<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- extract the values to be sorted</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Subindex_Range <span class=\"kw1\">loop</span><br/>      Sub_Array <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Input_Array <span class=\"br0\">(</span>Sub_Index <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Sort <span class=\"br0\">(</span>Sub_Array<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- put the sorted values at the right place</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Subindex_Range <span class=\"kw1\">loop</span><br/>      Input_Array <span class=\"br0\">(</span>Sub_Index <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> \u00a0:= Sub_Array <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Index_Range <span class=\"kw1\">loop</span><br/>      Int_Io.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Input_Array <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   New_Line;<br/>\u00a0<br/><span class=\"kw1\">end</span> DisjointSort;</pre>"}, {"lang": "APL", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      \u2207SDS[\u2395]\u2207<br/>    \u2207<br/>[0]   Z\u2190I SDS L<br/>[1]   L[I[\u234bI]]\u2190Z[\u234bZ\u2190L[I\u2190\u222aI]]<br/>[2]   Z\u2190L<br/>    \u2207<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 85, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span> <span class=\"co1\">-- for basic NSArray sort</span><br/>\u00a0<br/><span class=\"co1\">-- DISJOINT SORT -------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">--  disjointSort\u00a0:: [a] -&gt; [Int] -&gt; [a]</span><br/><span class=\"kw3\">on</span> disjointSort<span class=\"br0\">(</span>xs, indices<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- Sequence of indices discarded</span><br/>    <span class=\"kw3\">set</span> indicesSorted <span class=\"kw3\">to</span> <span class=\"kw3\">my</span> sort<span class=\"br0\">(</span>indices<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- valueByIndex\u00a0:: Int -&gt; a</span><br/>    <span class=\"kw3\">script</span> valueByIndex<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> subsetSorted <span class=\"kw3\">to</span> \u00ac<br/>        sort<span class=\"br0\">(</span>map<span class=\"br0\">(</span>valueByIndex, indicesSorted<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- staticOrSorted\u00a0:: a -&gt; Int -&gt; a</span><br/>    <span class=\"kw3\">script</span> staticOrSorted<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x, i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> iIndex <span class=\"kw3\">to</span> elemIndex<span class=\"br0\">(</span>i, indicesSorted<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> iIndex <span class=\"kw3\">is</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>                x<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw1\">item</span> iIndex <span class=\"kw3\">of</span> subsetSorted<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- Sorted subset re-stitched into unsorted remainder of list</span><br/>    map<span class=\"br0\">(</span>staticOrSorted, xs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> disjointSort<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- The indexing of AppleScript lists is 1-based</span><br/>    <span class=\"co1\">-- so we use {7,2,8} in place of {6,1,7}</span><br/>\u00a0<br/>    disjointSort<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- elemIndex\u00a0:: a -&gt; [a] -&gt; Maybe Int</span><br/><span class=\"kw3\">on</span> elemIndex<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>        <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> <span class=\"kw1\">missing value</span><br/><span class=\"kw3\">end</span> elemIndex<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- sort\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> sort<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>current <span class=\"kw1\">application</span><span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:lst<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingSelector:<span class=\"st0\">\"compare:\"</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sort</pre>"}, {"lang": "BBC BASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      Sort% = FN_sortinit(0,0)\u00a0: REM Ascending<br/>\u00a0<br/>      DIM list%(7)\u00a0: list%() = 7, 6, 5, 4, 3, 2, 1, 0<br/>      DIM indices%(2)\u00a0: indices%() = 6, 1, 7<br/>\u00a0<br/>      PROCsortdisjoint(list%(), indices%())<br/>      PRINT FNshowlist(list%())<br/>      END<br/>\u00a0<br/>      DEF PROCsortdisjoint(l%(), i%())<br/>      LOCAL C%, i%, n%, t%()<br/>      n% = DIM(i%(),1)<br/>      DIM t%(n%)<br/>      FOR i% = 0 TO n%<br/>        t%(i%) = l%(i%(i%))<br/>      NEXT<br/>      C% = n% + 1<br/>      CALL Sort%, i%(0)<br/>      CALL Sort%, t%(0)<br/>      FOR i% = 0 TO n%<br/>        l%(i%(i%)) = t%(i%)<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNshowlist(l%())<br/>      LOCAL i%, o$<br/>      o$ = \"[\"<br/>      FOR i% = 0 TO DIM(l%(),1)<br/>        o$ += STR$(l%(i%)) + \", \"<br/>      NEXT<br/>      = LEFT$(LEFT$(o$)) + \"]\"</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">7 6 5 4 3 2 1 0:?values<br/>&amp; 6 1 7:?indices<br/>&amp; 0:?sortedValues:?sortedIndices<br/>&amp;   whl<br/>  ' (\u00a0!indices:%?i\u00a0?indices<br/>    &amp;\u00a0!values:? [!i\u00a0%@?value\u00a0?<br/>    &amp; (!value.)+!sortedValues:?sortedValues<br/>    &amp; (!i.)+!sortedIndices:?sortedIndices<br/>    )<br/>&amp;   whl<br/>  ' (\u00a0!sortedIndices:(?i.)+?sortedIndices<br/>    &amp;\u00a0!values:?A [!i\u00a0%@?\u00a0?Z<br/>    &amp;\u00a0!sortedValues:(?value.)+?sortedValues<br/>    &amp;\u00a0!A\u00a0!value\u00a0!Z:?values<br/>    )<br/>&amp; out$!values;</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* yes, bubble sort */</span><br/><span class=\"kw4\">void</span> bubble_sort<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>idx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n_idx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>buf<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> tmp<span class=\"sy0\">;</span><br/><span class=\"co2\">#define for_ij for (i = 0; i &lt; n_idx; i++) for (j = i + 1; j &lt; n_idx; j++)</span><br/><span class=\"co2\">#define sort(a, b) if (a &lt; b) { tmp = a; a = b; b = tmp;}</span><br/>        for_ij <span class=\"br0\">{</span> sort<span class=\"br0\">(</span>idx<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>          <span class=\"br0\">}</span><br/>        for_ij <span class=\"br0\">{</span> sort<span class=\"br0\">(</span>buf<span class=\"br0\">[</span>idx<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> buf<span class=\"br0\">[</span>idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"co2\">#undef for_ij</span><br/><span class=\"co2\">#undef sort</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> values<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> idx<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"before sort:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>after sort:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        bubble_sort<span class=\"br0\">(</span>idx<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> values<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 29, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Test<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">{</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        list<span class=\"sy0\">.</span><span class=\"me1\">SortSublist</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> SortSublist<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> list, <span class=\"kw1\">params</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> indices<span class=\"br0\">)</span><br/>        <span class=\"kw1\">where</span> T <span class=\"sy0\">:</span> IComparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> sublist <span class=\"sy0\">=</span> indices<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> i<span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">Zip</span><span class=\"br0\">(</span>indices<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v<span class=\"br0\">)</span>,<br/>                <span class=\"br0\">(</span>Index, <span class=\"kw1\">Value</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span> Index, <span class=\"kw1\">Value</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> entry <span class=\"kw1\">in</span> sublist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            list<span class=\"br0\">[</span>entry<span class=\"sy0\">.</span><span class=\"me1\">Index</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> entry<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 34, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ValueIterator, <span class=\"kw2\">typename</span> IndicesIterator<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> sortDisjoint<span class=\"br0\">(</span>ValueIterator valsBegin, IndicesIterator indicesBegin,<br/>\t\t  IndicesIterator indicesEnd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> temp<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>IndicesIterator i <span class=\"sy1\">=</span> indicesBegin<span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> indicesEnd<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        temp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>valsBegin<span class=\"br0\">[</span><span class=\"sy2\">*</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// extract</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>indicesBegin, indicesEnd<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// sort</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>temp.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, temp.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// sort a C++ container</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> j <span class=\"sy1\">=</span> temp.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>IndicesIterator i <span class=\"sy1\">=</span> indicesBegin<span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> indicesEnd<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i, <span class=\"sy2\">++</span>j<span class=\"br0\">)</span><br/>        valsBegin<span class=\"br0\">[</span><span class=\"sy2\">*</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>j<span class=\"sy4\">;</span> <span class=\"co1\">// replace</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> values<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> indices<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    sortDisjoint<span class=\"br0\">(</span>values, indices, indices<span class=\"sy2\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>values, values <span class=\"sy2\">+</span> <span class=\"nu0\">8</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> disjoint<span class=\"sy0\">-</span><span class=\"kw1\">sort</span> <span class=\"br0\">[</span>coll idxs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>val<span class=\"sy0\">-</span>subset <span class=\"br0\">(</span>keep<span class=\"sy0\">-</span>indexed #<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">set</span> idxs<span class=\"br0\">)</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> coll<span class=\"br0\">)</span><br/>        replacements <span class=\"br0\">(</span><span class=\"kw1\">zipmap</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> idxs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> val<span class=\"sy0\">-</span>subset<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">assoc</span> coll <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>seq replacements<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> disjoint-sort <span class=\"br0\">(</span>values indices<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Destructively perform a disjoin sublist sort on VALUES with INDICES.\"</span><br/>  <span class=\"br0\">(</span>loop <span class=\"sy0\">:</span><span class=\"me1\">for</span> element <span class=\"sy0\">:</span><span class=\"me1\">in</span><br/>     <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>loop <span class=\"sy0\">:</span><span class=\"me1\">for</span> index <span class=\"sy0\">:</span><span class=\"me1\">across</span> indices<br/>              <span class=\"sy0\">:</span><span class=\"me1\">collect</span> <span class=\"br0\">(</span>svref values index<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           '<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><br/>     <span class=\"sy0\">:</span><span class=\"me1\">for</span> index <span class=\"sy0\">:</span><span class=\"me1\">across</span> <span class=\"br0\">(</span>sort indices '<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><br/>     <span class=\"sy0\">:</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>svref values index<span class=\"br0\">)</span> element<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  values<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> indices <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    data.<span class=\"me1\">indexed</span><span class=\"br0\">(</span>indices.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>data <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 18, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sort<span class=\"sy0\">-</span>disjoint values indices<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> sorted <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"sy0\">&lt;</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>v values<span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t#:when <span class=\"br0\">(</span><span class=\"kw1\">member</span> i indices<span class=\"br0\">)</span>  v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>v values<span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> i indices<span class=\"br0\">)</span><span class=\"br0\">)</span> v<br/>\t<span class=\"br0\">(</span>begin0<br/>\t\t<span class=\"br0\">(</span>first sorted<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> sorted <span class=\"br0\">(</span>rest sorted<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>sort<span class=\"sy0\">-</span>disjoint '<span class=\"br0\">[</span><span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">6</span> <span class=\"nu0\">1</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 29, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'culture.<br/>\u00a0<br/>extension $op<br/>{<br/>    sortSublist\u00a0: indices<br/>    [        <br/>        var subList\u00a0:= indices orderBy(:x)(x);<br/>                            zip(indices selectBy(:i)(self[i]); <br/>                            orderBy(:x)(x)) by(:index:val)( { Index = index. Value = val. } ); <br/>                            toArray.<br/>\u00a0<br/>        var list\u00a0:= self clone.<br/>        subList forEach(:r)<br/>        [<br/>            list[r Index]\u00a0:= r Value<br/>        ].<br/>\u00a0<br/>        ^ list<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var list\u00a0:= ( 7, 6, 5, 4, 3, 2, 1, 0 ).<br/>\u00a0<br/>    console printLine(list sortSublist:(6, 1, 7)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule Sort_disjoint do<br/>  def sublist(values, indices) when is_list(values) and is_list(indices) do<br/>    indices2 = Enum.sort(indices)<br/>    selected = select(values, indices2, 0, []) |&gt; Enum.sort<br/>    replace(values, Enum.zip(indices2, selected), 0, [])<br/>  end<br/>\u00a0<br/>  defp select(_, [], _, selected), do: selected<br/>  defp select([val|t], [i|rest], i, selected), do: select(t, rest, i+1, [val|selected])<br/>  defp select([_|t], indices, i, selected), do: select(t, indices, i+1, selected)<br/>\u00a0<br/>  defp replace(values, [], _, list), do: Enum.reverse(list, values)<br/>  defp replace([_|t], [{i,v}|rest], i, list), do: replace(t, rest, i+1, [v|list])<br/>  defp replace([val|t], indices, i, list), do: replace(t, indices, i+1, [val|list])<br/>end<br/>\u00a0<br/>values = [7, 6, 5, 4, 3, 2, 1, 0]<br/>indices = [6, 1, 7]<br/>IO.inspect Sort_disjoint.sublist(values, indices)</pre>"}, {"lang": "Erlang", "loc": 23, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> sort_disjoint <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>sublist<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sublist</span><span class=\"br0\">(</span> <span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Sorted_indices</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"re5\">Indices</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Values_indexes</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices_values</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> indices_values<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_indices</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Values_indexes</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Sorted_indices_values</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span> <span class=\"re5\">Sorted_indices</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">Indices_values</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Sorted_values</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">mapfoldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> merge<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_indices_values</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Values_indexes</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Sorted_values</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">sublist</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">indices_values</span><span class=\"br0\">(</span> <span class=\"re5\">Index</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">H</span> | <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Index</span> | <span class=\"re5\">Indices</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices_values</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">H</span> | <span class=\"re5\">Indices_values</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">indices_values</span><span class=\"br0\">(</span> <span class=\"re5\">_Index</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">_H</span> | <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices_values</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices</span><span class=\"sy1\">,</span> <span class=\"re5\">Indices_values</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">merge</span><span class=\"br0\">(</span> <span class=\"re5\">Index</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">_H</span> | <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Index</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> | <span class=\"re5\">Sorted_indices_values</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_indices_values</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">merge</span><span class=\"br0\">(</span> <span class=\"re5\">_Index</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">H</span> | <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_indices_values</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_indices_values</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 48, "block": "<pre class=\"text highlighted_source\">PROGRAM DISJOINT<br/>\u00a0<br/>DIM LST%[7],INDICES%[2]<br/>\u00a0<br/>DIM L%[7],I%[2],Z%[2]<br/>PROCEDURE SHOWLIST(L%[]-&gt;O$)<br/>      LOCAL I%<br/>      O$=\"[\"<br/>      FOR I%=0 TO UBOUND(L%,1) DO<br/>        O$=O$+STR$(L%[I%])+\", \"<br/>      END FOR<br/>      O$=LEFT$(O$,LEN(O$)-2)+\"]\"<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE SORT(Z%[]-&gt;Z%[])<br/>   LOCAL N%,P%,FLIPS%<br/>   P%=UBOUND(Z%,1)<br/>   FLIPS%=TRUE<br/>   WHILE FLIPS% DO<br/>      FLIPS%=FALSE<br/>      FOR N%=0 TO P%-1 DO<br/>        IF Z%[N%]&gt;Z%[N%+1] THEN SWAP(Z%[N%],Z%[N%+1]) FLIPS%=TRUE<br/>      END FOR<br/>   END WHILE<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE SortDisJoint(L%[],I%[]-&gt;L%[])<br/>      LOCAL J%,N%<br/>      LOCAL DIM T%[2]<br/>\u00a0<br/>      N%=UBOUND(I%,1)<br/>      FOR J%=0 TO N% DO<br/>        T%[J%]=L%[I%[J%]]<br/>      END FOR<br/>      SORT(I%[]-&gt;I%[])<br/>      SORT(T%[]-&gt;T%[])<br/>      FOR J%=0 TO N% DO<br/>        L%[I%[J%]]=T%[J%]<br/>      END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  LST%[]=(7,6,5,4,3,2,1,0)<br/>  INDICES%[]=(6,1,7)<br/>  SortDisJoint(LST%[],INDICES%[]-&gt;LST%[])<br/>  ShowList(LST%[]-&gt;O$)<br/>  PRINT(O$)<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 29, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/>\u00a0<br/><span class=\"kw1\">function</span> uniq<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    out <span class=\"sy1\">=</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">find</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span> out<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            out <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>out<span class=\"sy2\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> out<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> disjointSort<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> idx<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> values<br/>    idx <span class=\"sy1\">=</span> uniq<span class=\"br0\">(</span>sort<span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    values <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        values<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    values <span class=\"sy1\">=</span> sort<span class=\"br0\">(</span>values<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        s<span class=\"br0\">[</span>idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> data <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span> <span class=\"nu0\">6</span><span class=\"sy2\">,</span> <span class=\"nu0\">5</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"sy2\">,</span> <span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"kw1\">constant</span> indexes <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> sortDisjointSubarray data indices <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> indices <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">toArray</span> indices <span class=\"co1\">// creates a sorted array</span><br/>  <span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">copy</span> data<br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">get</span> data<span class=\"br0\">)</span> indices<br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">iter2</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">set</span> result<span class=\"br0\">)</span> indices<br/>  result<br/>\u00a0<br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>sortDisjointSubarray <span class=\"br0\">[</span>|<span class=\"nu0\">7</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">0</span>|<span class=\"br0\">]</span> <span class=\"br0\">(</span>set <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Fortran", "loc": 36, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Example<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">indices</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! In order to make the output insensitive to index order</span><br/><span class=\"co1\">! we need to sort the indices first</span><br/>  <span class=\"kw1\">call</span> Isort<span class=\"br0\">(</span>indices<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! Should work with any sort routine as long as the dummy</span><br/><span class=\"co1\">! argument array has been declared as an assumed shape array </span><br/><span class=\"co1\">! Standard insertion sort used in this example</span><br/>  <span class=\"kw1\">call</span> Isort<span class=\"br0\">(</span>array<span class=\"br0\">(</span>indices<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> array<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Isort<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span> <span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>     j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>     temp <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>j&gt;<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>&gt;temp<span class=\"br0\">)</span><br/>        a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>     a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> Isort<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Example</pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// givens</span><br/>    values <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    indices <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">:</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    orderedValues <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>indices<span class=\"sy1\">))</span><br/>    orderedIndices <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>indices<span class=\"sy1\">))</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> indices <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// validate that indices are within list boundaries</span><br/>        <span class=\"kw1\">if</span> j &lt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> j &gt;<span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>values<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Invalid index: \"</span><span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// extract elements to sort</span><br/>        orderedValues<span class=\"sy1\">[</span>i<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> values<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>        orderedIndices<span class=\"sy1\">[</span>i<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> j<br/>        i<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// sort</span><br/>    sort<span class=\"sy3\">.</span><span class=\"me1\">Ints</span><span class=\"sy1\">(</span>orderedValues<span class=\"sy1\">)</span><br/>    sort<span class=\"sy3\">.</span><span class=\"me1\">Ints</span><span class=\"sy1\">(</span>orderedIndices<span class=\"sy1\">)</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"initial:\"</span><span class=\"sy1\">,</span> values<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// replace sorted values</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> orderedValues <span class=\"sy1\">{</span><br/>        values<span class=\"sy1\">[</span>orderedIndices<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]]</span> <span class=\"sy2\">=</span> v<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"sorted: \"</span><span class=\"sy1\">,</span> values<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sparseSort <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, indices <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span>a.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    indices.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">unique</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    a<span class=\"br0\">[</span>indices<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>indices<span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 40, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Array <span class=\"kw1\">as</span> A<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>IArray<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<span class=\"sy0\">.</span>Utils<br/>\u00a0<br/><span class=\"co1\">-- Partition 'xs' according to whether their element indices are in 'is'.  Sort</span><br/><span class=\"co1\">-- the sublist corresponding to 'is', merging the result with the remainder of </span><br/><span class=\"co1\">-- the list.</span><br/>disSort1 <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>disSort1 xs is <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> is<span class=\"st0\">' = sort is<br/>                     (sub, rest) = partition ((`elem` is'</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> xs<br/>                 <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> merge rest <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> is<span class=\"st0\">' . sort $ map snd sub<br/>\u00a0<br/>-- Convert the list to an array.  Extract the sublist corresponding to the<br/>-- indices '</span>is<span class=\"st0\">'.  Sort the sublist, replacing those elments in the array.<br/>disSort2\u00a0:: (Ord a) =&gt; [a] -&gt; [Int] -&gt; [a]<br/>disSort2 xs is = let as = A.listArray (0, length xs - 1) xs<br/>                     sub = zip (sort is) . sort $ map (as\u00a0!) is<br/>                 in elems $ as // sub<br/>\u00a0<br/>-- Similar to disSort2, but using mutable arrays.  The sublist is updated<br/>-- \"in place\", rather than creating a new array.  However, this is not visible<br/>-- to a caller.<br/>disSort3\u00a0:: [Int] -&gt; [Int] -&gt; [Int]<br/>disSort3 xs is = elems . runSTUArray $ do<br/>                   as &lt;- newListArray (0, length xs - 1) xs<br/>                   sub &lt;- liftM (zip (sort is) . sort) $ mapM (readArray as) is<br/>                   mapM_ (uncurry (writeArray as)) sub<br/>                   return as<br/>\u00a0<br/>main = do<br/>  let xs = [7, 6, 5, 4, 3, 2, 1, 0]<br/>      is = [6, 1, 7]<br/>  print $ disSort1 xs is<br/>  print $ disSort2 xs is<br/>  print $ disSort3 xs is<br/></span></pre>"}, {"lang": "Icon and Unicon", "loc": 27, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">link</span> <span class=\"kw4\">sort</span> <span class=\"co1\"># get the 'isort' procedure for sorting a list</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> sortDisjoint <span class=\"br0\">(</span>items<span class=\"sy1\">,</span> indices<span class=\"br0\">)</span><br/>  indices <span class=\"sy1\">:=</span> isort <span class=\"br0\">(</span>indices<span class=\"br0\">)</span> <span class=\"co1\"># sort indices into a list</span><br/>  result <span class=\"sy1\">:=</span> <span class=\"kw4\">copy</span> <span class=\"br0\">(</span>items<span class=\"br0\">)</span><br/>  values <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">put</span> <span class=\"br0\">(</span>values<span class=\"sy1\">,</span> result<span class=\"br0\">[</span><span class=\"sy1\">!</span>indices<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  values <span class=\"sy1\">:=</span> isort <span class=\"br0\">(</span>values<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> result<span class=\"br0\">[</span><span class=\"sy1\">!</span>indices<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">pop</span> <span class=\"br0\">(</span>values<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># set up and do the sort</span><br/>  items <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  indices <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"co1\"># note, Icon lists 1-based</span><br/>  result <span class=\"sy1\">:=</span> sortDisjoint <span class=\"br0\">(</span>items<span class=\"sy1\">,</span> indices<span class=\"br0\">)</span><br/>  <span class=\"co1\"># display result</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>items <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>indices <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>result <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Io", "loc": 8, "block": "<pre class=\"io highlighted_source\"><span class=\"kw2\">List</span> disjointSort\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>indices,<br/>    sortedIndices\u00a0:= indices unique sortInPlace<br/>    sortedValues\u00a0:= sortedIndices <span class=\"kw3\">map</span><span class=\"br0\">(</span>idx,at<span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span> sortInPlace<br/>    sortedValues <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i,v,atPut<span class=\"br0\">(</span>sortedIndices at<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> disjointSort<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"sy0\">(</span>/:<a class=\"__cf_email__\" data-cfemail=\"7e003e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:{`[`]}~ /:<a class=\"__cf_email__\" data-cfemail=\"740a34\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>~.<span class=\"sy0\">)</span> <span class=\"nu0\">6</span> <span class=\"nu0\">1</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">6</span></pre>"}, {"lang": "Java", "loc": 28, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Disjoint <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"sy0\">&lt;</span>T <span class=\"kw2\">extends</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Comparable.html\"><span class=\"kw21\">Comparable</span></a><span class=\"sy0\">&lt;?</span> <span class=\"kw2\">super</span> T<span class=\"sy0\">&gt;&gt;</span> <span class=\"kw3\">void</span> sortDisjoint<span class=\"br0\">(</span><br/>            <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> array, <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> idxs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>idxs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> disjoint = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> idx\u00a0: idxs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            disjoint.<span class=\"me1\">add</span><span class=\"br0\">(</span>array.<span class=\"me1\">get</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>disjoint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> idx\u00a0: idxs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            array.<span class=\"me1\">set</span><span class=\"br0\">(</span>idx, disjoint.<span class=\"me1\">get</span><span class=\"br0\">(</span>i++<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> list = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> indices = <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sortDisjoint<span class=\"br0\">(</span>list, indices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> sort_disjoint<span class=\"br0\">(</span>values<span class=\"sy0\">,</span> indices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> sublist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  indices.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">&gt;</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> indices.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sublist.<span class=\"me1\">push</span><span class=\"br0\">(</span>values<span class=\"br0\">[</span>indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  sublist.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> indices.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    values<span class=\"br0\">[</span>indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> sublist.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> values<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">def setpaths(indices; values):<br/>  reduce range(0; indices|length) as $i<br/>    (.; .[indices[$i]] = values[$i]);<br/>\u00a0<br/>def disjointSort(indices):<br/>  (indices|unique) as $ix   # \"unique\" sorts<br/>  # Set $sorted to the sorted array of values at $ix:<br/>  | ([ .[ $ix[] ] ] | sort) as $sorted  <br/>  | setpaths( $ix; $sorted)\u00a0;</pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">function sortselected(a::AbstractVector{&lt;:Real}, s::AbstractVector{&lt;:Integer})<br/>    sel = unique(sort(s))<br/>    if sel[1] &lt; 1 || length(a) &lt; sel[end]<br/>        throw(BoundsError())<br/>    end<br/>    b = collect(copy(a))<br/>    b[sel] = sort(b[sel])<br/>    return b<br/>end<br/>\u00a0<br/>a = [7, 6, 5, 4, 3, 2, 1, 0]<br/>sel = [7, 2, 8]<br/>b = sortselected(a, sel)<br/>\u00a0<br/>println(\"Original: $a\\n\\tsorted on $sel\\n -&gt; sorted array: $b\")</pre>"}, {"lang": "K", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  {@[x;<a class=\"__cf_email__\" data-cfemail=\"bdc4fd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;y;:;<a class=\"__cf_email__\" data-cfemail=\"016041\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;a:<a class=\"__cf_email__\" data-cfemail=\"b6cef6cf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]}[7 6 5 4 3 2 1 0;6 1 7]<br/>7 0 5 4 3 2 1 6<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><span class=\"coMULTI\">/* in place sort */</span><br/>fun IntArray.<span class=\"me1\">sortDisjoint</span><span class=\"br0\">(</span>indices<span class=\"sy0\">:</span> Set<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sortedSubset <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">filterIndexed</span> <span class=\"br0\">{</span> index, <span class=\"sy0\">_</span> -<span class=\"sy0\">&gt;</span> index in indices <span class=\"br0\">}</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sortedSubset.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> indices.<span class=\"me1\">size</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Argument set contains out of range indices\"</span><span class=\"br0\">)</span><br/>    indices.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> index, value -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>value<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sortedSubset<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> values <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> indices <span class=\"sy0\">=</span> setOf<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Original array\u00a0: ${values.asList()} sorted on indices $indices\"</span><span class=\"br0\">)</span><br/>    values.<span class=\"me1\">sortDisjoint</span><span class=\"br0\">(</span>indices<span class=\"br0\">)</span>   <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Sorted array  \u00a0: ${values.asList()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span>    <br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 34, "block": "<pre class=\"lua highlighted_source\">values  <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>indices <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"br0\">}</span><br/>\u00a0<br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t\t\t\t<span class=\"co1\">-- discard duplicates</span><br/><span class=\"kw1\">while</span> i <span class=\"sy0\">&lt;</span> <span class=\"sy0\">#</span>indices <span class=\"kw1\">do</span><br/>    j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> j <span class=\"sy0\">&lt;</span> <span class=\"sy0\">#</span>indices <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> indices<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>  \t    <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span> indices<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\tj <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>indices <span class=\"kw1\">do</span><br/>    indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>      <span class=\"co1\">-- the tables of lua are one-based</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>vals <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>indices <span class=\"kw1\">do</span><br/>    vals<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> values<span class=\"br0\">[</span> indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span> vals <span class=\"br0\">)</span><br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span> indices <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>indices <span class=\"kw1\">do</span><br/>    values<span class=\"br0\">[</span> indices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> vals<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>values <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"  \"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">sortDisjoint\u00a0:= proc(values, indices::set)<br/>\tlocal vals,inds,i:<br/>\tvals\u00a0:= sort([seq(values[i], i in indices)]):<br/>\tinds\u00a0:= sort(convert(indices, Array)):<br/>\tfor i to numelems(vals) do<br/>\t\tvalues(inds[i])\u00a0:= vals[i]:<br/>\tod:<br/>end proc:<br/>tst\u00a0:= Array([7,6,5,4,3,2,1,0]):\t<br/>sortDisjoint(tst,{7,2,8});</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">Values = { 7, 6, 5, 4, 3, 2, 1, 0}\u00a0; Indices = { 7, 2, 8 };<br/>Values[[Sort[Indices]]] = Sort[Values[[Indices]]];<br/>\u00a0<br/>Values<br/>-&gt; { 7, 0, 5, 4, 3, 2, 1, 6 }</pre>"}, {"lang": "NetRexx", "loc": 44, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method sortDisjoint<span class=\"br0\">(</span>oldList, indices<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  newList = oldList.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> indices.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> <span class=\"co1\">-- only do work if we need to</span><br/>    subList = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    idxList = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">-- pick the input list apart</span><br/>    <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> to indices.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      iw = indices.<span class=\"kw6\">word</span><span class=\"br0\">(</span>ix<span class=\"br0\">)</span><br/>      nw = oldList.<span class=\"kw6\">word</span><span class=\"br0\">(</span>iw<span class=\"br0\">)</span><br/>      <span class=\"co1\">-- protect against bad outcomes...</span><br/>      <span class=\"kw1\">if</span> iw <span class=\"sy0\">&gt;</span> oldList.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> ArrayIndexOutOfBoundsException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> iw <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> ArrayIndexOutOfBoundsException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      subList.<span class=\"me0\">add</span><span class=\"br0\">(</span>nw<span class=\"br0\">)</span><br/>      idxList.<span class=\"me0\">add</span><span class=\"br0\">(</span>iw<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> ix<br/>    Collections.<span class=\"me0\">sort</span><span class=\"br0\">(</span>subList<span class=\"br0\">)</span> <span class=\"co1\">-- sort sublist</span><br/>    Collections.<span class=\"me0\">sort</span><span class=\"br0\">(</span>idxList<span class=\"br0\">)</span> <span class=\"co1\">-- sort indices</span><br/>    <span class=\"co1\">-- put it all back together</span><br/>    <span class=\"kw1\">loop</span> kx = <span class=\"nu0\">0</span> to subList.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      kk = Rexx subList.<span class=\"me0\">get</span><span class=\"br0\">(</span>kx<span class=\"br0\">)</span><br/>      ii = Rexx idxList.<span class=\"me0\">get</span><span class=\"br0\">(</span>kx<span class=\"br0\">)</span><br/>      newList = newList.<span class=\"kw6\">subword</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, ii - <span class=\"nu0\">1</span><span class=\"br0\">)</span> kk newList.<span class=\"kw6\">subword</span><span class=\"br0\">(</span>ii + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> kx<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> newList<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg vList <span class=\"st0\">','</span> iList<br/>  <span class=\"kw1\">if</span> vList = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> vList = <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span> iList = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> iList = <span class=\"nu0\">7</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span><br/>  rList = sortDisjoint<span class=\"br0\">(</span>vList, iList<span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'In: '</span> vList.<span class=\"kw6\">space</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Out:'</span> rList.<span class=\"kw6\">space</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Idx:'</span> iList.<span class=\"kw6\">space</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  values\u00a0:= [7, 6, 5, 4, 3, 2, 1, 0]<br/>  indices\u00a0:= sortup [6, 1, 7]<br/>  values#indices\u00a0:= sortup values#indices<br/>7 0 5 4 3 2 1 6<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 15, "block": "<pre class=\"text highlighted_source\">import algorithm<br/>\u00a0<br/>proc sortDisjoinSublist[T](data: var seq[T], indices: seq[int]) =<br/>  var indices = indices<br/>  sort indices, cmp[T]<br/>\u00a0<br/>  var values: seq[T] = @[]<br/>  for i in indices: values.add data[i]<br/>  sort values, cmp[T]<br/>\u00a0<br/>  for j, i in indices: data[i] = values[j]<br/>\u00a0<br/>var d = @[7, 6, 5, 4, 3, 2, 1, 0]<br/>sortDisjoinSublist(d, @[6, 1, 7])<br/>echo d</pre>"}, {"lang": "Objective-C", "loc": 51, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> DisjointSublistView <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>array;<br/>  <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>indexes;<br/>  <span class=\"kw4\">int</span> num_indexes;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithArray<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>a andIndexes<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSIndexSet_Class/\"><span class=\"kw5\">NSIndexSet</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>ind;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> DisjointSublistView<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithArray<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>a andIndexes<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSIndexSet_Class/\"><span class=\"kw5\">NSIndexSet</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>ind <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    array <span class=\"sy0\">=</span> a;<br/>    num_indexes <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ind count<span class=\"br0\">]</span>;<br/>    indexes <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>num_indexes <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger i <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ind firstIndex<span class=\"br0\">]</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">!=</span> NSNotFound; i <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ind indexGreaterThanIndex<span class=\"sy0\">:</span>i<span class=\"br0\">]</span>, j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      indexes<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>dealloc <span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>indexes<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>count <span class=\"br0\">{</span> <span class=\"kw1\">return</span> num_indexes; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>objectAtIndex<span class=\"sy0\">:</span><span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>i <span class=\"br0\">{</span> <span class=\"kw1\">return</span> array<span class=\"br0\">[</span>indexes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>replaceObjectAtIndex<span class=\"sy0\">:</span><span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span>i withObject<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>x <span class=\"br0\">{</span> array<span class=\"br0\">[</span>indexes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x; <span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"br0\">(</span>SortDisjoint<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>sortDisjointSublist<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSIndexSet_Class/\"><span class=\"kw5\">NSIndexSet</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>indexes usingSelector<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">SEL</span><span class=\"br0\">)</span>comparator;<br/><span class=\"kw1\">@end</span><br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"br0\">(</span>SortDisjoint<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>sortDisjointSublist<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSIndexSet_Class/\"><span class=\"kw5\">NSIndexSet</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>indexes usingSelector<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">SEL</span><span class=\"br0\">)</span>comparator <span class=\"br0\">{</span><br/>  DisjointSublistView <span class=\"sy0\">*</span>d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>DisjointSublistView alloc<span class=\"br0\">]</span> initWithArray<span class=\"sy0\">:</span>self andIndexes<span class=\"sy0\">:</span>indexes<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">[</span>d sortUsingSelector<span class=\"sy0\">:</span>comparator<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>@<span class=\"br0\">[</span>@7, @6, @5, @4, @3, @2, @1, @0<span class=\"br0\">]</span> mutableCopy<span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableIndexSet_Class/\"><span class=\"kw5\">NSMutableIndexSet</span></a> <span class=\"sy0\">*</span>ind <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableIndexSet_Class/\"><span class=\"kw5\">NSMutableIndexSet</span></a> indexSet<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>ind addIndex<span class=\"sy0\">:</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>; <span class=\"br0\">[</span>ind addIndex<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>; <span class=\"br0\">[</span>ind addIndex<span class=\"sy0\">:</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>a sortDisjointSublist<span class=\"sy0\">:</span>ind usingSelector<span class=\"sy0\">:</span><span class=\"kw1\">@selector</span><span class=\"br0\">(</span>compare<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, a<span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> disjoint_sort cmp values indices <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> temp <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>get values<span class=\"br0\">)</span> indices <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sort cmp temp<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> indices<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i j <span class=\"sy0\">-&gt;</span> values<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> temp<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> indices<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> values <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">and</span> indices <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  disjoint_sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> values indices<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> values<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 37, "block": "<pre class=\"oorexx highlighted_source\">data = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- this could be a list, array, or queue as well because of polymorphism</span><br/><span class=\"co1\">-- also, ooRexx arrays are 1-based, so using the alternate index set for the</span><br/><span class=\"co1\">-- problem.</span><br/>indexes = <span class=\"sy0\">.</span>set~of<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> disjointSorter data, indexes<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Sorted data is: [\"</span>data~toString<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>\u00a0<br/>::routine disjointSorter<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> data, indexes<br/>  temp = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>indexes~items<span class=\"br0\">)</span><br/>  <span class=\"co1\">-- we want to process these in a predictable order, so make an array</span><br/>  tempIndexes = indexes~makearray<br/>  <span class=\"co1\">-- we can't just assign things back in the same order.  The expected</span><br/>  <span class=\"co1\">-- result requires the items be inserted back in first-to-last index</span><br/>  <span class=\"co1\">-- order, so we need to sort the index values too</span><br/>  tempIndexes~sortWith<span class=\"br0\">(</span><span class=\"sy0\">.</span>numberComparator~new<span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> index <span class=\"kw2\">over</span> tempIndexes<br/>     temp~append<span class=\"br0\">(</span>data<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- sort as numbers</span><br/>  temp~sortwith<span class=\"br0\">(</span><span class=\"sy0\">.</span>numberComparator~new<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> tempIndexes~items<br/>     data<span class=\"br0\">[</span>tempIndexes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> = temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- a custom comparator that sorts strings as numeric values rather than</span><br/><span class=\"co1\">-- strings</span><br/>::class numberComparator subclass comparator<br/>::method <span class=\"kw6\">compare</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"co1\">-- perform the comparison on the names.  By subtracting</span><br/>  <span class=\"co1\">-- the two and returning the sign, we give the expected</span><br/>  <span class=\"co1\">-- results for the compares</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw6\">left</span> - <span class=\"kw6\">right</span><span class=\"br0\">)</span>~<span class=\"kw6\">sign</span></pre>"}, {"lang": "Order", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8sort_disjoint_sublist ORDER_PP_FN(              \\<br/>8fn(8L, 8I,                                                           \\<br/>    8lets((8I, 8seq_sort(8less, 8tuple_to_seq(8I)))                   \\<br/>          (8J,                                                        \\<br/>           8seq_sort(8less, 8seq_map(8fn(8X, 8seq_at(8X, 8L)), 8I))), \\<br/>          8replace(8L, 8I, 8J))) )</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8replace ORDER_PP_FN(                   \\<br/>8fn(8L, 8I, 8V,                                              \\<br/>    8if(8is_nil(8I),                                         \\<br/>        8L,                                                  \\<br/>        8replace(8seq_set(8seq_head(8I), 8L, 8seq_head(8V)), \\<br/>                 8seq_tail(8I), 8seq_tail(8V)))) )</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span><br/>  8sort_disjoint_sublist<span class=\"br0\">(</span>8seq<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 8tuple<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">sortsome<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>which<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#which<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>which<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  u<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  which<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>which<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#which<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>which<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># this function sorts the array in place</span><br/><span class=\"kw2\">sub</span> disjointSort <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$values</span> <span class=\"sy0\">,</span> <span class=\"re0\">@indices</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$values</span><span class=\"br0\">}</span><span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"re0\">@indices</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$values</span><span class=\"br0\">}</span><span class=\"br0\">[</span> <span class=\"re0\">@indices</span> <span class=\"br0\">]</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"sy0\">=</span>  <span class=\"br0\">(</span> <span class=\"nu0\">7</span> <span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@indices</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">6</span> <span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>disjointSort<span class=\"br0\">(</span> \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"sy0\">,</span> <span class=\"re0\">@indices</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"[@values]<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">values</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@indices</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">@</span><span class=\"kw3\">values</span><span class=\"br0\">[</span> <span class=\"re0\">@indices</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span> <span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">@</span><span class=\"kw3\">values</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 30, "block": "<pre class=\"text highlighted_source\">function uniq(sequence s)<br/>integer last=s[1], this, ndx = 1<br/>    for i=2 to length(s) do<br/>        this = s[i]<br/>        if this!=last then<br/>            ndx += 1<br/>            s[ndx] = this<br/>            last = this<br/>        end if<br/>    end for<br/>    return s[1..ndx]<br/>end function<br/>\u00a0<br/>function disjoint_sort(sequence s, sequence idx)<br/>sequence copies<br/>    if length(idx)&gt;1 then<br/>        idx = uniq(sort(idx))<br/>        copies = repeat(0, length(idx))<br/>        for i=1 to length(idx) do<br/>            copies[i] = s[idx[i]]<br/>        end for<br/>        copies = sort(copies)<br/>        for i=1 to length(idx) do<br/>            s[idx[i]] = copies[i]<br/>        end for<br/>    end if<br/>    return s<br/>end function<br/>\u00a0<br/>?disjoint_sort({7,6,5,4,3,2,1,0},{7,2,8})</pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(let (Values (7 6 5 4 3 2 1 0)  Indices (7 2 8))<br/>   (mapc<br/>      '((V I) (set (nth Values I) V))<br/>      (sort (mapcar '((N) (get Values N)) Indices))<br/>      (sort Indices) )<br/>   Values )</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> sublistsort<span class=\"br0\">(</span><span class=\"re0\">$values</span><span class=\"sy0\">,</span> <span class=\"re0\">$indices</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">$indices</span> <span class=\"sy0\">=</span> <span class=\"re0\">$indices</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> <br/>   <span class=\"re0\">$sub</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$values</span><span class=\"br0\">[</span><span class=\"re0\">$indices</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>   <span class=\"re0\">$indices</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span> <span class=\"re0\">$values</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sub</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>   <span class=\"re0\">$values</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$values</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"re0\">$indices</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><br/><span class=\"st0\">\"$(sublistsort $values $indices)\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 40, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Bubble_sort<span class=\"br0\">(</span>Array idx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, n, Array buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j<br/>  <span class=\"kw2\">SortArray</span><span class=\"br0\">(</span>idx<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_Ascending<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">If</span> buf<span class=\"br0\">(</span>idx<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> buf<span class=\"br0\">(</span>idx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Swap</span> buf<span class=\"br0\">(</span>idx<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>, buf<span class=\"br0\">(</span>idx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">DataSection</span><br/>    values: <span class=\"kw1\">Data</span>.i <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><br/>    indices:<span class=\"kw1\">Data</span>.i <span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><br/>  <span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> values.i<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>\u00a0:<span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>?values, @values<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> indices.i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>?indices,@indices<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> i<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Before sort:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>values<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"After sort:\"</span><span class=\"br0\">)</span><br/>    Bubble_sort<span class=\"br0\">(</span>indices<span class=\"br0\">(</span><span class=\"br0\">)</span>, ArraySize<span class=\"br0\">(</span>indices<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>values<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> sort_disjoint_sublist<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> indices<span class=\"br0\">)</span>:<br/>\tindices <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>indices<span class=\"br0\">)</span><br/>\tvalues  <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> indices<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> index<span class=\"sy0\">,</span> value <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>indices<span class=\"sy0\">,</span> values<span class=\"br0\">)</span>:<br/>\t\tdata<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> i <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> sort_disjoint_sublist<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> d<br/><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Which could be more cryptically written as:</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> sort_disjoint_sublist<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> indices<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">for</span> index<span class=\"sy0\">,</span> value <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>indices<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> indices<span class=\"br0\">)</span><span class=\"br0\">)</span>: data<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\"> values=c(7,6,5,4,3,2,1,0)<br/> indices=c(7,2,8)<br/> values[sort(indices)]=sort(values[indices])<br/> print(values)</pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (sort-disjoint l is)<br/>  (define xs<br/>    (sort (for/list ([x l] [i (in-naturals)] #:when (memq i is)) x) &lt;))<br/>  (let loop ([l l] [i 0] [xs xs])<br/>    (cond [(null? l) l]<br/>          [(memq i is) (cons (car xs) (loop (cdr l) (add1 i) (cdr xs)))]<br/>          [else        (cons (car l)  (loop (cdr l) (add1 i) xs))])))<br/>\u00a0<br/>(sort-disjoint '(7 6 5 4 3 2 1 0) '(6 1 7))<br/>;; --&gt; '(7 0 5 4 3 2 1 6)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program uses a disjointed sublist to sort a random list of values*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> old <span class=\"st0\">','</span> idx                  <span class=\"coMULTI\">/*get lists from the command line*/</span><br/><span class=\"kw1\">if</span> old=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> old=<span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>    <span class=\"coMULTI\">/*No  old?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> idx=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> idx=<span class=\"nu0\">7</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span>              <span class=\"coMULTI\">/* \"  idx?    \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  list of indices:'</span>  idx;   <span class=\"kw1\">say</span>   <span class=\"coMULTI\">/*    [\u2191]  is for one\u2500based lists*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    unsorted list:'</span>  old                        <span class=\"coMULTI\">/*display old list.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'      sorted list:'</span>  disjoint_sort<span class=\"br0\">(</span>old, idx<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*sort, display it.*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500DISJOINT_SORT subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>disjoint_sort:  <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,ix;    y=;    z=;    p=<span class=\"nu0\">0</span><br/>ix=sortL<span class=\"br0\">(</span>ix<span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*ensure the index list is sorted*/</span><br/>             <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  <span class=\"kw6\">words</span><span class=\"br0\">(</span>ix<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*extract indexed values from  X.*/</span><br/>             z=z <span class=\"kw6\">word</span><span class=\"br0\">(</span>x, <span class=\"kw6\">word</span><span class=\"br0\">(</span>ix, i<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*pick the correct value from  X.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>z=sortL<span class=\"br0\">(</span>z<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*sort extracted (indexed) values*/</span><br/>                <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*re-build (re-populate)  X list.*/</span><br/>                <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>m,ix<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> y=y <span class=\"kw6\">word</span><span class=\"br0\">(</span>x,m<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*same | new?*/</span><br/>                                     <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  p=p+<span class=\"nu0\">1</span>;  y=y <span class=\"kw6\">word</span><span class=\"br0\">(</span>z,p<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/><span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500SORTL subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sortL: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L; n=<span class=\"kw6\">words</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>; <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> n; @<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>L,j<span class=\"br0\">)</span>;<span class=\"kw3\">end</span><br/>  <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n-<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*sort a list using a slow method*/</span><br/>    <span class=\"kw1\">do</span> m=k+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> n; <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>m<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>k  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> @<span class=\"sy0\">.</span>k @<span class=\"sy0\">.</span>m <span class=\"kw2\">with</span> @<span class=\"sy0\">.</span>m @<span class=\"sy0\">.</span>k; <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                          <span class=\"coMULTI\">/* [\u2191]  use  PARSE  for swapping.*/</span><br/><a class=\"__cf_email__\" data-cfemail=\"defae39e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1;               <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> n;   $=$ @<span class=\"sy0\">.</span>j;  <span class=\"kw3\">end</span>;            <span class=\"kw1\">return</span> $</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> sort_disjoint_sublist!<span class=\"br0\">(</span>ar, indices<span class=\"br0\">)</span><br/>  values = ar.<span class=\"me1\">values_at</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>indices<span class=\"br0\">)</span>.<span class=\"me1\">sort</span><br/>  indices.<span class=\"me1\">sort</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i,v<span class=\"sy0\">|</span> ar<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = v <span class=\"br0\">}</span><br/>  ar<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>values = <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>indices = <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/><span class=\"kw3\">p</span> sort_disjoint_sublist!<span class=\"br0\">(</span>values, indices<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 30, "block": "<pre class=\"text highlighted_source\">sortData$ = \"7, 6, 5, 4, 3, 2, 1, 0\"<br/>sortIdx$  = \"7, 2, 8\"<br/>\u00a0<br/>numSort = 8<br/>dim sortData(numSort)<br/>for i = 1 to numSort<br/>   sortData(i) = val(word$(sortData$,i,\",\"))<br/>next i<br/>\u00a0<br/>while word$(sortIdx$,s + 1) &lt;&gt; \"\"<br/>  s   = s + 1<br/>  idx = val(word$(sortIdx$,s))<br/>  gosub [bubbleSort]<br/>wend<br/>end<br/>\u00a0<br/>[bubbleSort]<br/>sortSw = 1<br/>while sortSw = 1<br/> sortSw = 0<br/> for i = idx to numSort - 1              ' start sorting at idx<br/>  if sortData(i) &gt; sortData(i+1) then<br/>     sortSw        = 1<br/>     sortHold      = sortData(i)<br/>     sortData(i)   = sortData(i+1)<br/>     sortData(i+1) = sortHold<br/>  end if<br/> next i<br/>wend<br/>RETURN</pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SortedDisjointSubList <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>list, subListIndex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sortSubList<span class=\"br0\">[</span>T<span class=\"sy0\">:</span> Ordering<span class=\"br0\">]</span><span class=\"br0\">(</span>indexList<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, list<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> subListIndex <span class=\"sy0\">=</span> indexList.<span class=\"me1\">sorted</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sortedSubListMap <span class=\"sy0\">=</span> subListIndex.<span class=\"me1\">zip</span><span class=\"br0\">(</span>subListIndex.<span class=\"me1\">map</span><span class=\"br0\">(</span>list<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">)</span>.<span class=\"me1\">toMap</span><br/>\u00a0<br/>    list.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>value, index<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sortedSubListMap.<span class=\"me1\">isDefinedAt</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"br0\">)</span> sortedSubListMap<span class=\"br0\">(</span>index<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> value<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>sortSubList<span class=\"br0\">(</span>subListIndex, list<span class=\"br0\">)</span> <span class=\"sy0\">==</span> List<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>, <span class=\"st0\">\"Incorrect sort\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"List in sorted order.<span class=\"es1\">\\n</span>Successfully completed without errors. [total ${Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 16, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use gauche.<span class=\"kw1\">sequence</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> num<span class=\"sy0\">-</span><span class=\"kw1\">list</span> '<span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> indices '<span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"nu0\">1</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> table <br/>  <span class=\"br0\">(</span>alist<span class=\"sy0\">-&gt;</span>hash<span class=\"sy0\">-</span>table<br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">cons</span><br/>      <span class=\"br0\">(</span>sort indices<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>sort indices <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>~ num<span class=\"sy0\">-</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> last<br/>  <span class=\"br0\">(</span>sort<br/>    <span class=\"br0\">(</span>map<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>index<br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>get table i i<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      num<span class=\"sy0\">-</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">&lt;</span><br/>    <span class=\"kw1\">car</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func disjointSort<span class=\"br0\">(</span>values, indices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    values<span class=\"br0\">[</span>indices.<span class=\"me1\">sort</span><span class=\"br0\">]</span> = <span class=\"br0\">[</span>values<span class=\"br0\">[</span>indices<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">sort</span>...<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var values =  <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>var indices = <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>disjointSort<span class=\"br0\">(</span>values, indices<span class=\"br0\">)</span>;<br/>say values;</pre>"}, {"lang": "Standard ML", "loc": 42, "block": "<pre class=\"text highlighted_source\">functor SortDisjointFn (A\u00a0: MONO_ARRAY)\u00a0: sig<br/>    val sort\u00a0: (A.elem * A.elem -&gt; order) -&gt; (A.array * int array) -&gt; unit<br/>  end = struct<br/>\u00a0<br/>    structure DisjointView\u00a0: MONO_ARRAY = struct<br/>      type elem = A.elem<br/>      type array = A.array * int array<br/>      fun length (a, s) = Array.length s<br/>      fun sub ((a, s), i) = A.sub (a, Array.sub (s, i))<br/>      fun update ((a, s), i, x) = A.update (a, Array.sub (s, i), x)<br/>\u00a0<br/>      (* dummy implementations for not-needed functions *)<br/>      type vector = unit<br/>      val maxLen = Array.maxLen<br/>      fun array _ = raise Domain<br/>      fun fromList _ = raise Domain<br/>      fun tabulate _ = raise Domain<br/>      fun vector _ = raise Domain<br/>      fun copy _ = raise Domain<br/>      fun copyVec _ = raise Domain<br/>      fun appi _ = raise Domain<br/>      fun app _ = raise Domain<br/>      fun modifyi _ = raise Domain<br/>      fun modify _ = raise Domain<br/>      fun foldli _ = raise Domain<br/>      fun foldl _ = raise Domain<br/>      fun foldri _ = raise Domain<br/>      fun foldr _ = raise Domain<br/>      fun findi _ = raise Domain<br/>      fun find _ = raise Domain<br/>      fun exists _ = raise Domain<br/>      fun all _ = raise Domain<br/>      fun collate _ = raise Domain<br/>    end<br/>\u00a0<br/>    structure DisjointViewSort = ArrayQSortFn (DisjointView)<br/>\u00a0<br/>    fun sort cmp (arr, indices) = (<br/>      ArrayQSort.sort Int.compare indices;<br/>      DisjointViewSort.sort cmp (arr, indices)<br/>    )<br/>  end</pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">struct DisjointSublistView&lt;T&gt;\u00a0: MutableCollectionType {<br/>  let array\u00a0: UnsafeMutablePointer&lt;T&gt;<br/>  let indexes\u00a0: [Int]<br/>\u00a0<br/>  subscript (position: Int) -&gt; T {<br/>    get {<br/>      return array[indexes[position]]<br/>    }<br/>    set {<br/>      array[indexes[position]] = newValue<br/>    }<br/>  }<br/>  var startIndex\u00a0: Int { return 0 }<br/>  var endIndex\u00a0: Int { return indexes.count }<br/>  func generate() -&gt; IndexingGenerator&lt;DisjointSublistView&lt;T&gt;&gt; { return IndexingGenerator(self) }<br/>}<br/>\u00a0<br/>func sortDisjointSublist&lt;T\u00a0: Comparable&gt;(inout array: [T], indexes: [Int]) {<br/>  var d = DisjointSublistView(array: &amp;array, indexes: sorted(indexes))<br/>  sort(&amp;d)<br/>}<br/>\u00a0<br/>var a = [7, 6, 5, 4, 3, 2, 1, 0]<br/>let ind = [6, 1, 7]<br/>sortDisjointSublist(&amp;a, ind)<br/>println(a)</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> disjointSort <span class=\"br0\">{</span>values indices args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Ensure that we have a unique list of integers, in order</span><br/>    <span class=\"co1\"># We assume there are no end-relative indices</span><br/>    <span class=\"kw1\">set</span> indices <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -unique <span class=\"re0\">$indices</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Map from those indices to the values to sort</span><br/>    <span class=\"kw1\">set</span> selected <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> i <span class=\"re0\">$indices</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> selected <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$values</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"co1\"># Sort the values (using any extra options) and write back to the list</span><br/>    <span class=\"kw1\">foreach</span> i <span class=\"re0\">$indices</span> v <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span> <span class=\"re0\">$selected</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lset</span> values <span class=\"re0\">$i</span> <span class=\"re0\">$v</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># The updated list is the result</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$values</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>values=\"7'6'5'4'3'2'1'0\"<br/>indices=\"7'2'8\"<br/>v_unsorted=SELECT (values,#indices)<br/>v_sort=DIGIT_SORT (v_unsorted)<br/>i_sort=DIGIT_SORT (indices)<br/>LOOP i=i_sort,v=v_sort<br/>values=REPLACE (values,#i,v)<br/>ENDLOOP<br/>PRINT values<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>disjoint_sort = ^|(~&amp;,num); (\"i\",\"v\"). (-:(-:)\"v\"@p nleq-&lt;~~lSrSX ~&amp;rlPlw~|/\"i\" \"v\")*lS \"v\"<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>t = disjoint_sort({6,1,7},&lt;7,6,5,4,3,2,1,0&gt;)</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">values\u00a0:=T(7, 6, 5, 4, 3, 2, 1, 0);<br/>indices:=T(6, 1, 7);<br/>\u00a0<br/>indices.apply(values.get).sort() // a.get(0) == a[0]<br/>  .zip(indices.sort()) //--&gt;(v,i) == L(L(0,1),L(1,6),L(6,7))<br/>  .reduce(fcn(newList,[(v,i)]){ newList[i]=v; newList },values.copy())<br/>  .println();  // new list</pre>"}]}