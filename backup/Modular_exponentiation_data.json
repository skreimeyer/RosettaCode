{"task": "Modular_exponentiation", "blocks": [{"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>, Crypto.<span class=\"me1\">Types</span>.<span class=\"me1\">Big_Numbers</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Mod_Exp <span class=\"kw1\">is</span><br/>\u00a0<br/>   A: String\u00a0:=<br/>     <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span>;<br/>   B: String\u00a0:=<br/>     <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span>;<br/>\u00a0<br/>   D: <span class=\"kw3\">constant</span> Positive\u00a0:= Positive'Max<span class=\"br0\">(</span>Positive'Max<span class=\"br0\">(</span>A'Length, B'Length<span class=\"br0\">)</span>, <span class=\"nu0\">40</span><span class=\"br0\">)</span>;<br/>     <span class=\"co1\">-- the number of decimals to store A, B, and result</span><br/>   Bits: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">34</span>*D<span class=\"br0\">)</span>/<span class=\"nu0\">10</span>;<br/>     <span class=\"co1\">-- (slightly more than) the number of bits to store A, B, and result</span><br/>   <span class=\"kw3\">package</span> LN <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Crypto.<span class=\"me1\">Types</span>.<span class=\"me1\">Big_Numbers</span> <span class=\"br0\">(</span>Bits + <span class=\"br0\">(</span><span class=\"nu0\">32</span> - Bits <span class=\"kw2\">mod</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>     <span class=\"co1\">-- the actual number of bits has to be a multiple of 32</span><br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> LN.<span class=\"me1\">Big_Unsigned</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> LN.<span class=\"me1\">Big_Unsigned</span><br/>     <span class=\"kw3\">renames</span> LN.<span class=\"me1\">Utils</span>.<span class=\"me1\">To_Big_Unsigned</span>;<br/>\u00a0<br/>   M: LN.<span class=\"me1\">Big_Unsigned</span>\u00a0:= <span class=\"br0\">(</span>+<span class=\"st0\">\"10\"</span><span class=\"br0\">)</span> ** <span class=\"br0\">(</span>+<span class=\"st0\">\"40\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"A**B (mod 10**40) = \"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>LN.<span class=\"me1\">Utils</span>.<span class=\"me1\">To_String</span><span class=\"br0\">(</span>LN.<span class=\"me1\">Mod_Utils</span>.<span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span>+A<span class=\"br0\">)</span>, <span class=\"br0\">(</span>+B<span class=\"br0\">)</span>, M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Mod_Exp;</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"co2\">PR precision=1000 PR</span><br/>   <span class=\"kw4\">MODE</span> LLI <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span>\t<span class=\"co1\">CO For brevity CO</span><br/>   <span class=\"kw4\">PROC</span> mod power <span class=\"sy1\">=</span> <span class=\"br0\">(</span>LLI base<span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> modulus<span class=\"br0\">)</span> LLI <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      LLI result <span class=\"sy1\">:=</span> 1<span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> base<span class=\"sy1\">,</span> e <span class=\"sy1\">:=</span> exponent<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> exponent <span class=\"sy1\">&lt;</span> 0<br/>      <span class=\"kw2\">THEN</span><br/>\t put <span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Negative exponent\"</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">ELSE</span><br/>\t <span class=\"kw2\">WHILE</span> e <span class=\"sy1\">&gt;</span> 0 <br/>\t <span class=\"kw2\">DO</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw8\">ODD</span> e <span class=\"sy1\">|</span> result <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>result <span class=\"sy1\">*</span> b<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> modulus<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t    e <span class=\"kw17\">OVERAB</span> 2<span class=\"sy1\">;</span> b <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">*</span> b<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> modulus<br/>\t <span class=\"kw2\">OD</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      result<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   LLI a <span class=\"sy1\">=</span> 2988348162058574136915891421498819466320163312926952423791023078876139<span class=\"sy1\">;</span><br/>   LLI b <span class=\"sy1\">=</span> 2351399303373464486466122544523690094744975233415544072992656881240319<span class=\"sy1\">;</span><br/>   LLI m <span class=\"sy1\">=</span> 10000000000000000000000000000000000000000<span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Last 40 digits = \"</span><span class=\"sy1\">,</span> 40dl$<span class=\"sy1\">,</span> mod power <span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 26, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#Include</span></a> mpl<span class=\"sy0\">.</span>ahk<br/>\u00a0<br/>  MP_SET<span class=\"br0\">(</span>base<span class=\"sy0\">,</span> <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>exponent<span class=\"sy0\">,</span> <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>modulus<span class=\"sy0\">,</span> <span class=\"st0\">\"10000000000000000000000000000000000000000\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>exponent<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Int\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0? <span class=\"kw1\">return</span>\u00a0: <span class=\"st0\">\"\"</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>result<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>TWO<span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span>\u00a0!MP_IS0<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><br/>\tMP_DIV<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> exponent<span class=\"sy0\">,</span> TWO<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> <span class=\"br0\">(</span>MP_DEC<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t? <span class=\"br0\">(</span>MP_MUL<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> result<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_DIV<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> result<span class=\"sy0\">,</span> temp<span class=\"sy0\">,</span> modulus<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_DIV<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> exponent<span class=\"sy0\">,</span> TWO<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>exponent<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>base1<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>base2<span class=\"sy0\">,</span> base1<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_DIV<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> base2<span class=\"sy0\">,</span> modulus<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% MP_DEC<span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Bracmat", "loc": 28, "block": "<pre class=\"text highlighted_source\">  ( ( mod-power<br/>    =   base exponent modulus result<br/>      .  \u00a0!arg:(?base,?exponent,?modulus)<br/>        &amp;\u00a0!exponent:~&lt;0<br/>        &amp; 1:?result<br/>        &amp;   whl<br/>          ' (\u00a0!exponent:&gt;0<br/>            &amp;     ( (   mod$(!exponent.2):1<br/>                      &amp; mod$(!result*!base.!modulus):?result<br/>                      &amp; -1<br/>                    | 0<br/>                    )<br/>                  +\u00a0!exponent<br/>                  )<br/>                * 1/2<br/>             \u00a0:\u00a0?exponent<br/>            &amp; mod$(!base^2.!modulus):?base<br/>            )<br/>        &amp;\u00a0!result<br/>    )<br/>  &amp; ( a<br/>    = 2988348162058574136915891421498819466320163312926952423791023078876139<br/>    )<br/>  &amp; ( b<br/>    = 2351399303373464486466122544523690094744975233415544072992656881240319<br/>    )<br/>  &amp; out$(\"last 40 digits = \" mod-power$(!a,!b,10^40))<br/>  )</pre>"}, {"lang": "BBC BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"HIMELIB\"<br/>      PROC_himeinit(\"\")<br/>\u00a0<br/>      PROC_hiputdec(1, \"2988348162058574136915891421498819466320163312926952423791023078876139\")<br/>      PROC_hiputdec(2, \"2351399303373464486466122544523690094744975233415544072992656881240319\")<br/>      PROC_hiputdec(3, \"10000000000000000000000000000000000000000\")<br/>      h1% = 1\u00a0: h2% = 2\u00a0: h3% = 3\u00a0: h4% = 4<br/>      SYS `hi_PowMod`, ^h1%, ^h2%, ^h3%, ^h4%<br/>      PRINT FN_higetdec(4)</pre>"}, {"lang": "C", "loc": 25, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmpz_t a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span><br/>\u00a0<br/>\tmpz_init_set_str<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>\t<span class=\"st0\">\"2988348162058574136915891421498819466320\"</span><br/>\t\t\t\t<span class=\"st0\">\"163312926952423791023078876139\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init_set_str<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>\t<span class=\"st0\">\"2351399303373464486466122544523690094744\"</span><br/>\t\t\t\t<span class=\"st0\">\"975233415544072992656881240319\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_ui_pow_ui<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmpz_init<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_powm<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tgmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"%Zd<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* ...16808958343740453059 */</span><br/>\u00a0<br/>\tmpz_clear<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_clear<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_clear<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_clear<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> powerMod <span class=\"st0\">\"modular exponentiation\"</span> <span class=\"br0\">[</span>b e m<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defn</span> m<span class=\"sy0\">*</span> <span class=\"br0\">[</span>p q<span class=\"br0\">]</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">*</span> p q<span class=\"br0\">)</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>b b, e e, x <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> e<span class=\"br0\">)</span> x<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even? e<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>m<span class=\"sy0\">*</span> b b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> e <span class=\"nu0\">2</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>m<span class=\"sy0\">*</span> b b<span class=\"br0\">)</span> <span class=\"br0\">(</span>quot e <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>m<span class=\"sy0\">*</span> b x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rosetta-mod-<span class=\"kw1\">expt</span> <span class=\"br0\">(</span>base power divisor<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return BASE raised to the POWER, modulo DIVISOR.<br/>  This function is faster than (MOD (EXPT BASE POWER) DIVISOR), but<br/>  only works when POWER is a non-negative integer.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setq</span> base <span class=\"br0\">(</span>mod base divisor<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;; Multiply product with base until power is zero.</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>product <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> power<span class=\"br0\">)</span> product<span class=\"br0\">)</span><br/>    <span class=\"co1\">;; Square base, and divide power by 2, until power becomes odd.</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">oddp</span> power<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> base <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* base base<span class=\"br0\">)</span> divisor<span class=\"br0\">)</span><br/>\t    power <span class=\"br0\">(</span>ash power -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> product <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* product base<span class=\"br0\">)</span> divisor<span class=\"br0\">)</span><br/>\t  power <span class=\"br0\">(</span><span class=\"nu0\">1</span>- power<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>b <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A~%\"</span> <span class=\"br0\">(</span>rosetta-mod-<span class=\"kw1\">expt</span> a b <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 30, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">module</span> modular_exponentiation<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">private</span> <span class=\"kw2\">import</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/>BigInt powMod<span class=\"br0\">(</span>BigInt base<span class=\"sy0\">,</span> BigInt exponent<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> BigInt modulus<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>   <span class=\"kw2\">assert</span><span class=\"br0\">(</span>exponent <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    BigInt result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>exponent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>exponent <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> base<span class=\"br0\">)</span> <span class=\"sy0\">%</span> modulus<span class=\"sy0\">;</span><br/>        exponent <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        base <span class=\"sy0\">=</span> base <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">%</span> modulus<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span> <span class=\"br0\">(</span>modular_exponentiation<span class=\"br0\">)</span><br/>    <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        powMod<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"st0\">\"29883481620585741369158914214988194\"</span> <span class=\"sy0\">~</span><br/>                      <span class=\"st0\">\"66320163312926952423791023078876139\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               BigInt<span class=\"br0\">(</span><span class=\"st0\">\"235139930337346448646612254452369009\"</span> <span class=\"sy0\">~</span><br/>                      <span class=\"st0\">\"4744975233415544072992656881240319\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               BigInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">2988348162058574136915891421498819466320163312926952423791023078876139 2351399303373464486466122544523690094744975233415544072992656881240319 10 40^|p</pre>"}, {"lang": "EchoLisp", "loc": 24, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> a <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> b <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> m 1e40<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>powmod a b m<span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1527229998585248450016808958343740453059</span><br/>\u00a0<br/><span class=\"co1\">;; powmod is a native function</span><br/><span class=\"co1\">;; it could be defined as follows\u00a0:</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>xpowmod base <span class=\"kw1\">exp</span> mod<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> result <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"kw1\">zero?</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">odd?</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> result <span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> result base<span class=\"br0\">)</span> mod<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">/=</span> <span class=\"kw1\">exp</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> base <span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> base base<span class=\"br0\">)</span> mod<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>result<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>xpowmod a b m<span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1527229998585248450016808958343740453059</span><br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>b <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;; \"$ ^ $$ mod (10 ^ 40)\" performs modular exponentiation.</span><br/>  <span class=\"co1\">;; \"unpack(-5, x)_1\" unpacks the integer from the modulo form.</span><br/>  <span class=\"br0\">(</span>message <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span>calc-<span class=\"kw1\">eval</span> <span class=\"st0\">\"unpack(-5, $ ^ $$ mod (10 ^ 40))_1\"</span> <span class=\"kw1\">nil</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> expMod a b n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop a b c <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> 0I <span class=\"kw1\">then</span> c <span class=\"kw1\">else</span><br/>            loop <span class=\"br0\">(</span>a<span class=\"sy0\">*</span>a<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>b<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> b<span class=\"sy0\">&amp;&amp;&amp;</span>1I <span class=\"sy0\">=</span> 0I <span class=\"kw1\">then</span> c <span class=\"kw1\">else</span> c<span class=\"sy0\">*</span>a<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><br/>    loop a b 1I<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> 2988348162058574136915891421498819466320163312926952423791023078876139I<br/>    <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> 2351399303373464486466122544523690094744975233415544072992656881240319I<br/>    printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>expMod a b <span class=\"br0\">(</span>10I<span class=\"sy0\">**</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">// -&gt; 1527229998585248450016808958343740453059</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">! Built-in<br/>2988348162058574136915891421498819466320163312926952423791023078876139<br/>2351399303373464486466122544523690094744975233415544072992656881240319<br/>10 40 ^<br/>^mod .<br/>1527229998585248450016808958343740453059<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 21, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>a\u00a0:= 2988348162058574136915891421498819466320163312926952423791023078876139;<br/>b\u00a0:= 2351399303373464486466122544523690094744975233415544072992656881240319;<br/>PowerModInt(a, b, 10^40);<br/>1527229998585248450016808958343740453059<br/>\u00a0<br/># Implementation<br/>PowerModAlt\u00a0:= function(a, n, m)<br/>    local r;<br/>    r\u00a0:= 1;<br/>    while n &gt; 0 do<br/>        if IsOddInt(n) then<br/>            r\u00a0:= RemInt(r*a, m);<br/>        fi;<br/>        n\u00a0:= QuoInt(n, 2);<br/>        a\u00a0:= RemInt(a*a, m);<br/>    od;<br/>    return r;<br/>end;<br/>\u00a0<br/>PowerModAlt(a, b, 10^40);</pre>"}, {"lang": "gnuplot", "loc": 5, "block": "<pre class=\"gnuplot highlighted_source\">_powm<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">e =</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\u00a0? r <span class=\"sy0\">:</span> <span class=\"br0\">(</span>e <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>\u00a0? _powm<span class=\"br0\">(</span>b <span class=\"sy0\">*</span> b <span class=\"sy0\">%</span> m<span class=\"sy0\">,</span> e <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> r <span class=\"sy0\">*</span> b <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> <span class=\"sy0\">:</span> _powm<span class=\"br0\">(</span>b <span class=\"sy0\">*</span> b <span class=\"sy0\">%</span> m<span class=\"sy0\">,</span> e <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>powm<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"sy0\">=</span> _powm<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co1\"># Usage</span><br/><span class=\"kw1\">print</span> powm<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3453</span><span class=\"sy0\">,</span> <span class=\"nu0\">131</span><span class=\"br0\">)</span><br/><span class=\"co1\"># Where b is the base, e is the exponent, m is the modulus, i.e.: b^e mod m</span></pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    b<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    m <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">40</span><span class=\"sy1\">)</span><br/>    m<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    r<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span>.<span class=\"me1\">modPow</span><span class=\"br0\">(</span><br/>            <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span>,<br/>            <span class=\"nu0\">10000000000000000000000000000000000000000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 14, "block": "<pre class=\"haskell highlighted_source\">powm <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>powm b <span class=\"nu0\">0</span> m r <span class=\"sy0\">=</span> r<br/>powm b e m r<br/>  <span class=\"sy0\">|</span> e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> powm <span class=\"br0\">(</span>b <span class=\"sy0\">*</span> b `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` m<span class=\"br0\">)</span> <span class=\"br0\">(</span>e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> m <span class=\"br0\">(</span>r <span class=\"sy0\">*</span> b `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` m<span class=\"br0\">)</span><br/>powm b e m r <span class=\"sy0\">=</span> powm <span class=\"br0\">(</span>b <span class=\"sy0\">*</span> b `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` m<span class=\"br0\">)</span> <span class=\"br0\">(</span>e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> m r<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>  powm<br/>    <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><br/>    <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">^</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    a <span class=\"sy1\">:=</span> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><br/>    b <span class=\"sy1\">:=</span> <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span> <br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"last 40 digits = \"</span><span class=\"sy1\">,</span>mod_power<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">^</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mod_power<span class=\"br0\">(</span>base<span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> modulus<span class=\"br0\">)</span>   <span class=\"co1\"># fast modular exponentation </span><br/>   <span class=\"kw1\">if</span> exponent <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>m<span class=\"br0\">)</span>          <span class=\"co1\"># added for this task</span><br/>   result <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">while</span> exponent <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> exponent <span class=\"sy1\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>         result <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>result <span class=\"sy1\">*</span> base<span class=\"br0\">)</span> <span class=\"sy1\">%</span> modulus<br/>      exponent <span class=\"sy1\">/:=</span> <span class=\"nu0\">2</span>   <br/>      base <span class=\"sy1\">:=</span> base <span class=\"sy1\">^</span> <span class=\"nu0\">2</span> <span class=\"sy1\">%</span> modulus<br/>      <span class=\"br0\">}</span>  <br/>   <span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   <span class=\"kw2\">m</span>&amp;|@^</pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PowMod <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span><br/>      <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span><br/>      <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> m <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span><span class=\"st0\">\"10000000000000000000000000000000000000000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>b, m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">a = 2988348162058574136915891421498819466320163312926952423791023078876139<br/>b = 2351399303373464486466122544523690094744975233415544072992656881240319<br/>m = big(10) ^ 40<br/>@show powermod(a, b, m)</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">TEN</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>b, m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">a\u00a0:= 2988348162058574136915891421498819466320163312926952423791023078876139:<br/>b\u00a0:= 2351399303373464486466122544523690094744975233415544072992656881240319:<br/>a &amp;^ b mod 10^40;</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">a = 2988348162058574136915891421498819466320163312926952423791023078876139;<br/>b = 2351399303373464486466122544523690094744975233415544072992656881240319;<br/>m = 10^40;<br/>PowerMod[a, b, m]<br/>-&gt; 1527229998585248450016808958343740453059</pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">a: 2988348162058574136915891421498819466320163312926952423791023078876139$<br/>b: 2351399303373464486466122544523690094744975233415544072992656881240319$<br/>power_mod(a, b, 10^40);<br/>/* 1527229998585248450016808958343740453059 */</pre>"}, {"lang": "Nim", "loc": 18, "block": "<pre class=\"text highlighted_source\">import bigints<br/>\u00a0<br/>proc powmod(b, e, m: BigInt): BigInt =<br/>  assert e &gt;= 0<br/>  var e = e<br/>  var b = b<br/>  result = initBigInt(1)<br/>  while e &gt; 0:<br/>    if e mod 2 == 1:<br/>      result = (result * b) mod m<br/>    e = e div 2<br/>    b = (b.pow 2) mod m<br/>\u00a0<br/>var<br/>  a = initBigInt(\"2988348162058574136915891421498819466320163312926952423791023078876139\")<br/>  b = initBigInt(\"2351399303373464486466122544523690094744975233415544072992656881240319\")<br/>\u00a0<br/>echo powmod(a, b, 10.pow 40)</pre>"}, {"lang": "Oforth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: powmod(base, exponent, modulus)<br/>   1 exponent dup ifZero: [ return ]<br/>    while ( dup 0 &gt; ) [ <br/>      dup isEven ifFalse: [ swap base * modulus mod swap ] <br/>      2 / base sq modulus mod -&gt;base<br/>      ] drop\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* Modular exponentiation */</span><br/>\u00a0<br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100</span><br/><span class=\"kw1\">say</span> powerMod<span class=\"br0\">(</span>,<br/> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span>,,<br/> <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span>,,<br/> 1e40<span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>powerMod: <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> base, exponent, modulus<br/>\u00a0<br/>exponent=exponent~<span class=\"kw6\">d2x</span>~<span class=\"kw6\">x2b</span>~<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'L'</span>,<span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/><span class=\"kw4\">result</span>=<span class=\"nu0\">1</span><br/>base = base <span class=\"sy0\">//</span> modulus<br/><span class=\"kw1\">do</span> exponentPos=exponent~<span class=\"kw6\">length</span> <span class=\"kw2\">to</span> <span class=\"nu0\">1</span> <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>exponent~subChar<span class=\"br0\">(</span>exponentPos<span class=\"br0\">)</span> == <span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">then</span> <span class=\"kw4\">result</span> = <span class=\"br0\">(</span><span class=\"kw4\">result</span> <span class=\"sy0\">*</span> base<span class=\"br0\">)</span> <span class=\"sy0\">//</span> modulus<br/>  base = <span class=\"br0\">(</span>base <span class=\"sy0\">*</span> base<span class=\"br0\">)</span> <span class=\"sy0\">//</span> modulus<br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">result</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">a<span class=\"sy0\">=</span><span class=\"nu1\">2988348162058574136915891421498819466320163312926952423791023078876139</span><span class=\"sy0\">;</span><br/>b<span class=\"sy0\">=</span><span class=\"nu1\">2351399303373464486466122544523690094744975233415544072992656881240319</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">lift</span><span class=\"br0\">(</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span><span class=\"nu1\">40</span><span class=\"br0\">)</span><span class=\"sy0\">^</span>b<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 26, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> ModularExponentiation<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  gmp<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> r<span class=\"sy1\">:</span> mpz_t<span class=\"sy1\">;</span><br/>  fmt<span class=\"sy1\">:</span> pchar<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  mpz_init_set_str<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"st0\">'2988348162058574136915891421498819466320163312926952423791023078876139'</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_init_set_str<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> <span class=\"st0\">'2351399303373464486466122544523690094744975233415544072992656881240319'</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_init<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_ui_pow_ui<span class=\"br0\">(</span>m<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  mpz_init<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_powm<span class=\"br0\">(</span>r<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> m<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  fmt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'%Zd'</span> <span class=\"sy3\">+</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mp_printf<span class=\"br0\">(</span>fmt<span class=\"sy1\">,</span> <span class=\"sy2\">@</span>r<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">(* ...16808958343740453059 *)</span><br/>\u00a0<br/>  mpz_clear<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_clear<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_clear<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_clear<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bmodpow</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> expmod<span class=\"br0\">(</span>Int <span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> Int <span class=\"re0\">$b</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"kw1\">while</span> <span class=\"re0\">$b</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> expmod<br/>    <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">40</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'2988348162058574136915891421498819466320163312926952423791023078876139'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'2351399303373464486466122544523690094744975233415544072992656881240319'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'1'</span> <span class=\"sy0\">.</span> <a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/bcpowmod\"><span class=\"kw3\">bcpowmod</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de **Mod (X Y N)<br/>   (let M 1<br/>      (loop<br/>         (when (bit? 1 Y)<br/>            (setq M (% (* M X) N)) )<br/>         (T (=0 (setq Y (&gt;&gt; 1 Y)))<br/>            M )<br/>         (setq X (% (* X X) N)) ) ) )</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><br/>b <span class=\"sy0\">=</span> <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><br/>m <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> ** <span class=\"nu0\">40</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">pow</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> Z<span class=\"sy0\">.</span>of_string <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> Z<span class=\"sy0\">.</span>of_string <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> Z<span class=\"sy0\">.</span>pow <span class=\"br0\">(</span>Z<span class=\"sy0\">.</span>of_int <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">40</span> <span class=\"kw1\">in</span><br/>Z<span class=\"sy0\">.</span>powm a b m<br/><span class=\"sy0\">|&gt;</span> Z<span class=\"sy0\">.</span>to_string<br/><span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define a 2988348162058574136915891421498819466320163312926952423791023078876139)<br/>(define b 2351399303373464486466122544523690094744975233415544072992656881240319)<br/>(define m (expt 10 40))<br/>(modular-expt a b m)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  displays  modular exponentiation of:             a**b  mod  M           */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b mm                                      <span class=\"coMULTI\">/*obtain optional args from the CL*/</span><br/><span class=\"kw1\">if</span> a==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> a==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> a=<span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><br/><span class=\"kw1\">if</span> b==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> b==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> b=<span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><br/><span class=\"kw1\">if</span> mm=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> mm=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> mm=<span class=\"nu0\">40</span>                         <span class=\"coMULTI\">/*MM not specified?   Use default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'a='</span> a;   <span class=\"kw1\">say</span> <span class=\"st0\">\"        (\"</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"st0\">'digits)'</span>      <span class=\"coMULTI\">/*display the  value of  A.       */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'b='</span> b;   <span class=\"kw1\">say</span> <span class=\"st0\">\"        (\"</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"st0\">'digits)'</span>      <span class=\"coMULTI\">/*   \"     \"     \"    \"  B.       */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>mm<span class=\"br0\">)</span>;   m=<span class=\"kw6\">word</span><span class=\"br0\">(</span>mm,j<span class=\"br0\">)</span>            <span class=\"coMULTI\">/*use one of the MM powers (list).*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, linesize<span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*show a nice separator fence line*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'a**b (mod 10**'</span>m<span class=\"st0\">\")=\"</span>   powerMod<span class=\"br0\">(</span>a,b,<span class=\"nu0\">10</span><span class=\"sy0\">**</span>m<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*display the answer \u2500\u2500\u2500\u25ba console.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                                  <span class=\"coMULTI\">/*stick a fork in it, we're done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>powerMod: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,p,n                 <span class=\"coMULTI\">/*fast modular exponentiation code*/</span><br/>          <span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*special case of  P  being zero. */</span><br/>          <span class=\"kw1\">if</span> p==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x                      <span class=\"coMULTI\">/*   \"      \"   \"  \"    \"   unity.*/</span><br/>          <span class=\"kw1\">if</span> p<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'***error*** power is negative:'</span>  p;    <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>;     <span class=\"kw3\">end</span><br/>          <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>,p,n<span class=\"br0\">)</span><span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  <span class=\"st0\">\"E\"</span> e  <span class=\"coMULTI\">/*obtain the biggest of the three.*/</span><br/>          <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">20</span>, e<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*big enough to handle  A\u00b2.       */</span><br/>          $=<span class=\"nu0\">1</span>                                         <span class=\"coMULTI\">/*use this for the first value.   */</span><br/>                     <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                  <span class=\"coMULTI\">/*perform  while   P   isn't zero.*/</span><br/>                     <span class=\"kw1\">if</span> p<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> $=$ <span class=\"sy0\">*</span> x  <span class=\"sy0\">//</span> n      <span class=\"coMULTI\">/*is  P  odd?  (is \u00f7 remainder\u22611).*/</span><br/>                     p=p%2;        x=x <span class=\"sy0\">*</span> x  <span class=\"sy0\">//</span> n      <span class=\"coMULTI\">/*halve  P;   calculate  x\u00b2 mod n */</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                  <span class=\"coMULTI\">/* [\u2191]  keep mod'ing 'til equal 0.*/</span><br/>          <span class=\"kw1\">return</span> $</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'openssl'</span><br/>\u00a0<br/>a = <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span><br/>b = <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span><br/>m = <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">40</span><br/><span class=\"kw3\">puts</span> a.<span class=\"me1\">to_bn</span>.<span class=\"me1\">mod_exp</span><span class=\"br0\">(</span>b, m<span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">BigInt</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><br/>  <span class=\"st0\">\"2988348162058574136915891421498819466320163312926952423791023078876139\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><br/>  <span class=\"st0\">\"2351399303373464486466122544523690094744975233415544072992656881240319\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>b, BigInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>square n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mod<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> a n mod<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">even?</span> n<span class=\"br0\">)</span> <br/>         <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> <span class=\"br0\">(</span>square <span class=\"br0\">(</span>mod<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> a <span class=\"br0\">(</span><span class=\"sy0\">/</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> mod<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                    mod<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a <span class=\"br0\">(</span>mod<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> a <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> mod<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                         mod<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> result<br/>  <span class=\"br0\">(</span>mod<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span> <br/>           <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span> <br/>           <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 9, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(modPow(2988348162058574136915891421498819466320163312926952423791023078876139_,<br/>                   2351399303373464486466122544523690094744975233415544072992656881240319_,<br/>                   10_ ** 40));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">say expmod<span class=\"br0\">(</span><br/>    <span class=\"nu0\">2988348162058574136915891421498819466320163312926952423791023078876139</span>,<br/>    <span class=\"nu0\">2351399303373464486466122544523690094744975233415544072992656881240319</span>,<br/>    <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">40</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Algorithm from http://introcs.cs.princeton.edu/java/78crypto/ModExp.java.html</span><br/><span class=\"co1\"># but Tcl has arbitrary-width integers and an exponentiation operator, which</span><br/><span class=\"co1\"># helps simplify the code.</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">modexp</span> <span class=\"br0\">{</span>a b n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>modexp<span class=\"br0\">(</span><span class=\"re0\">$a</span>, <span class=\"re0\">$b</span> / <span class=\"nu0\">2</span>, <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">*</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$c</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 4, "block": "<pre class=\"text highlighted_source\">$ txr -p '(exptmod 2988348162058574136915891421498819466320163312926952423791023078876139<br/>                   2351399303373464486466122544523690094744975233415544072992656881240319<br/>                   (expt 10 40)))'<br/>1527229998585248450016808958343740453059</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>a:=BN(\"2988348162058574136915891421498819466320163312926952423791023078876139\");<br/>b:=BN(\"2351399303373464486466122544523690094744975233415544072992656881240319\");<br/>m:=BN(10).pow(40);<br/>a.powm(b,m).println();<br/>a.powm(b,m)\u00a0: \"%,d\".fmt(_).println();</pre>"}]}