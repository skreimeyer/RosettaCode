{"task": "Equilibrium_index", "blocks": [{"lang": "ABAP", "loc": 14, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">REPORT</span></a> equilibrium_index<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">TYPES</span></a><span class=\"sy0\">:</span> y_i <span class=\"kw4\">TYPE</span> <span class=\"kw9\">STANDARD <span class=\"kw4\">TABLE</span> OF</span> i <span class=\"kw4\">WITH</span> EMPTY <span class=\"kw4\">KEY</span><span class=\"sy0\">.</span><br/>\u00a0<br/>cl_demo_output<span class=\"sy0\">=&gt;</span><span class=\"me2\">display</span><span class=\"br0\">(</span> REDUCE y_i<span class=\"br0\">(</span> LET sequences <span class=\"sy1\">=</span> <span class=\"kw4\">VALUE</span> y_i<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                                         total_sum <span class=\"sy1\">=</span> REDUCE #<span class=\"br0\">(</span> INIT <a href=\"http://help.sap.com/abapdocu/en/ABAPSUM.htm\"><span class=\"kw3\">sum</span></a> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>                                                                <span class=\"kw4\">FOR</span> sequence <span class=\"kw4\">IN</span> sequences<br/>                                                               <span class=\"kw4\">NEXT</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPSUM.htm\"><span class=\"kw3\">sum</span></a> <span class=\"sy1\">=</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPSUM.htm\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> sequence <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw4\">IN</span><br/>                                      INIT x <span class=\"sy1\">=</span> <span class=\"kw4\">VALUE</span> y_i<span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>                                           y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>                                       <span class=\"kw4\">FOR</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> UNTIL i <span class=\"sy1\">&gt;</span> <span class=\"kw4\">lines</span><span class=\"br0\">(</span> sequences <span class=\"br0\">)</span><br/>                                       LET <span class=\"kw4\">z</span> <span class=\"sy1\">=</span> sequences<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw4\">IN</span><br/>                                      <span class=\"kw4\">NEXT</span> x <span class=\"sy1\">=</span> COND #<span class=\"br0\">(</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> y <span class=\"sy1\">=</span> <span class=\"br0\">(</span> total_sum <span class=\"sy0\">-</span> y <span class=\"sy0\">-</span> <span class=\"kw4\">z</span> <span class=\"br0\">)</span> <span class=\"kw4\">THEN</span> <span class=\"kw4\">VALUE</span> y_i<span class=\"br0\">(</span> BASE x <span class=\"br0\">(</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a> x <span class=\"br0\">)</span><br/>                                           y <span class=\"sy1\">=</span> y <span class=\"sy0\">+</span> <span class=\"kw4\">z</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Vectors</span>;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Index_Type <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> &lt;&gt;;<br/>   <span class=\"kw3\">type</span> Element_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   Zero\u00a0: Element_Type;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"=\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Element_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">type</span> Array_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Element <span class=\"br0\">(</span>From\u00a0: Array_Type; Key\u00a0: Index_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element_Type <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Equilibrium <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Index_Vectors <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Vectors</span><br/>      <span class=\"br0\">(</span>Index_Type =&gt; Positive, Element_Type =&gt; Index_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Get_Indices <span class=\"br0\">(</span>From\u00a0: Array_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Index_Vectors.<span class=\"me1\">Vector</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Equilibrium;</pre>"}, {"lang": "Aime", "loc": 25, "block": "<pre class=\"text highlighted_source\">list<br/>eqindex(list l)<br/>{<br/>    integer e, i, s, sum;<br/>    list x;<br/>\u00a0<br/>    s = sum = 0;<br/>    l.ucall(add_i, 1, sum);<br/>    for (i, e in l) {<br/>        if (s * 2 + e == sum) {<br/>            x.append(i);<br/>        }<br/>        s += e;<br/>    }<br/>\u00a0<br/>    x;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list(-7, 1, 5, 2, -4, 3, 0).eqindex.ucall(o_, 0, \"\\n\");<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> YIELDINT <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> gen equilibrium index <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> arr<span class=\"sy1\">,</span> YIELDINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> arr <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> arr <span class=\"kw2\">DO</span><br/>        sum <span class=\"sy1\">+:=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">INT</span> left<span class=\"sy1\">:=</span>0<span class=\"sy1\">,</span> right<span class=\"sy1\">:=</span>sum<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> arr <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> arr <span class=\"kw2\">DO</span><br/>        right <span class=\"sy1\">-:=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> left <span class=\"sy1\">=</span> right <span class=\"kw2\">THEN</span> yield<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        left <span class=\"sy1\">+:=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> arr <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>7<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>4<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">@</span>0<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># FOR INT index IN #</span> gen equilibrium index<span class=\"br0\">(</span>arr<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ) DO ( #</span><br/><span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span><span class=\"kw3\">INT</span> index<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <br/>     <span class=\"kw22\">print</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/><span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 178, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- equilibriumIndices\u00a0:: [Int] -&gt; [Int]</span><br/><span class=\"kw3\">on</span> equilibriumIndices<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> balancedPair<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, pair, i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span> <span class=\"kw3\">to</span> pair<br/>            <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> y <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> a<br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> plus<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- Fold over zipped pairs of sums from left</span><br/>    <span class=\"co1\">-- and sums from right</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>balancedPair, <span class=\"br0\">{</span><span class=\"br0\">}</span>, \u00ac<br/>        zip<span class=\"br0\">(</span>scanl1<span class=\"br0\">(</span>plus, xs<span class=\"br0\">)</span>, scanr1<span class=\"br0\">(</span>plus, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> equilibriumIndices<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>equilibriumIndices, <span class=\"br0\">{</span>\u00ac<br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{3, 6}, {}, {1}, {0, 1, 2, 3, 4, 5, 6}, {0}, {}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- init\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> init<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">if</span> lng &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> lng &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> init<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- scanl\u00a0:: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> scanl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span>startValue<span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> scanl<br/>\u00a0<br/><span class=\"co1\">-- scanl1\u00a0:: (a -&gt; a -&gt; a) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> scanl1<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        scanl<span class=\"br0\">(</span>f, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs, tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> scanl1<br/>\u00a0<br/><span class=\"co1\">-- scanr\u00a0:: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> scanr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span>startValue<span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> reverse <span class=\"kw3\">of</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> scanr<br/>\u00a0<br/><span class=\"co1\">-- scanr1\u00a0:: (a -&gt; a -&gt; a) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> scanr1<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        scanr<span class=\"br0\">(</span>f, <span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs, init<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> scanr1<br/>\u00a0<br/><span class=\"co1\">-- tail\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tail<br/>\u00a0<br/><span class=\"co1\">-- zip\u00a0:: [a] -&gt; [b] -&gt; [(a, b)]</span><br/><span class=\"kw3\">on</span> zip<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> zip</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">Equilibrium_index<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> BaseIndex<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% A0 <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a>\t<span class=\"sy0\">,</span> Pre <span class=\"sy0\">:=</span> Post <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% A0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span><br/>\t\t\t\tPre <span class=\"sy0\">+=</span> A<span class=\"re0\">%A_Index%</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span><br/>\t\t\t\tPost <span class=\"sy0\">+=</span> A<span class=\"re0\">%A_Index%</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pre <span class=\"sy0\">=</span> Post<span class=\"br0\">)</span><br/>\t\t\tRes <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>Res?<span class=\"st0\">\", \"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> i <span class=\"sy0\">-</span> <span class=\"br0\">(</span>BaseIndex?<span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> Res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f EQUILIBRIUM_INDEX.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"-7 1 5 2 -4 3 0\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"2 4 6\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"2 9 2\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"1 -1 1 -1 1 -1 1\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>numbers,  x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    x = equilibrium<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"numbers:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,numbers<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"indices:\u00a0%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy2\">==</span><span class=\"nu0\">0</span><span class=\"sy5\">?</span><span class=\"st0\">\"none\"</span><span class=\"sy5\">:</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> equilibrium<span class=\"br0\">(</span>numbers,  arr,i,leftsum,leng,str,sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    leng = <span class=\"kw4\">split</span><span class=\"br0\">(</span>numbers,arr,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>leng; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>leng; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum <span class=\"sy3\">-</span>= arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>leftsum <span class=\"sy2\">==</span> sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        str = str i <span class=\"st0\">\" \"</span><br/>      <span class=\"br0\">}</span><br/>      leftsum <span class=\"sy3\">+</span>= arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 42, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">equilibrium-index</span> \"-7 1 5 2 -4 3 0\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">equilibrium-index</span> \"2 4 6\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">equilibrium-index</span> \"2 9 2\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">equilibrium-index</span> \"1 -1 1 -1 1 -1 1\"<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The Function ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">equilibrium-index</span> <span class=\"sy0\">&lt;</span>sequence with quotes<span class=\"sy0\">&gt;</span><br/><span class=\"co2\">\t::Set the pseudo-array sequence...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"seq=<span class=\"sy0\">%</span><span class=\"re3\">~1</span>\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> seq.length=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">S</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">seq</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> seq[<span class=\"sy0\">!</span><span class=\"re2\">seq.length</span><span class=\"sy0\">!</span>]=<span class=\"sy0\">%%</span><span class=\"re3\">S</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a seq.length+=1<br/><span class=\"sy0\">)</span><br/><span class=\"co2\">\t::Initialization of other variables...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"equilms=\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a last=seq.length - 1<br/><span class=\"co2\">\t::The main checking...</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">e</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">!</span><span class=\"re2\">last</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> left=0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> right=0<br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">!</span><span class=\"re2\">last</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">e</span> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a left+=<span class=\"sy0\">!</span><span class=\"re2\">seq[%%<span class=\"re3\">i</span>]</span><span class=\"sy0\">!)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">e</span> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a right+=<span class=\"sy0\">!</span><span class=\"re2\">seq[%%<span class=\"re3\">i</span>]</span><span class=\"sy0\">!)</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">left</span><span class=\"sy0\">!</span><span class=\"re2\">==</span><span class=\"sy0\">!</span><span class=\"re2\">right</span><span class=\"sy0\">!</span> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> equilms <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"equilms=<span class=\"sy0\">!</span><span class=\"re2\">equilms</span><span class=\"sy0\">!</span> <span class=\"sy0\">%%</span><span class=\"re3\">e</span>\"<br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"equilms=<span class=\"sy0\">%%</span><span class=\"re3\">e</span>\"<br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> [<span class=\"sy0\">!</span><span class=\"re2\">equilms</span><span class=\"sy0\">!</span>]<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">==/The Function ==</span><span class=\"sy0\">%</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      DIM list(6)<br/>      list() = -7, 1, 5, 2, -4, 3, 0<br/>      PRINT \"Equilibrium indices are \" FNequilibrium(list())<br/>      END<br/>\u00a0<br/>      DEF FNequilibrium(l())<br/>      LOCAL i%, r, s, e$<br/>      s = SUM(l())<br/>      FOR i% = 0 TO DIM(l(),1)<br/>        IF r = s - r - l(i%) THEN e$ += STR$(i%) + \",\"<br/>        r += l(i%)<br/>      NEXT<br/>      = LEFT$(e$)</pre>"}, {"lang": "C", "loc": 44, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> list<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> eq_idx<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>ret<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> sum<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> cnt<span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* alloc long enough: if we can afford the original list,<br/>\t * we should be able to afford to this.  Beats a potential<br/>         * million realloc() calls.  Even if memory is a real concern,<br/>         * there's no garantee the result is shorter than the input anyway */</span><br/>        cnt <span class=\"sy0\">=</span> s <span class=\"sy0\">=</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>ret <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                sum <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"sy0\">*</span>ret<span class=\"br0\">)</span><span class=\"br0\">[</span>cnt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                        cnt<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>\t\ts <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* uncouraged way to use realloc since it can leak memory, for example */</span><br/>\t<span class=\"sy0\">*</span>ret <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>ret<span class=\"sy0\">,</span> cnt <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> cnt<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> cnt<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>idx<span class=\"sy0\">;</span><br/>\tcnt <span class=\"sy0\">=</span> eq_idx<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Found:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cnt<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 40, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> equilibrium<span class=\"br0\">(</span>T first, T last<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">typedef</span> <span class=\"kw2\">typename</span> std<span class=\"sy4\">::</span><span class=\"me2\">iterator_traits</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">value_type</span> value_t<span class=\"sy4\">;</span><br/>\u00a0<br/>    value_t left  <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    value_t right <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>first, last, value_t<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> result<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> index <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> first <span class=\"sy3\">!</span><span class=\"sy1\">=</span> last<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>first, <span class=\"sy2\">++</span>index<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        right <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"sy2\">*</span>first<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy1\">==</span> right<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            result.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        left <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"sy2\">*</span>first<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">const</span> T<span class=\"sy3\">&amp;</span> value<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> value <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> indices<span class=\"br0\">(</span>equilibrium<span class=\"br0\">(</span>data, data <span class=\"sy2\">+</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span>indices.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, indices.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, print<span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 31, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> EquilibriumIndices<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> sequence<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> left <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> right <span class=\"sy0\">=</span> sequence<span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> element <span class=\"kw1\">in</span> sequence<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            right <span class=\"sy0\">-=</span> element<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">==</span> right<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> index<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            left <span class=\"sy0\">+=</span> element<span class=\"sy0\">;</span><br/>            index<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> index <span class=\"kw1\">in</span> EquilibriumIndices<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> equilibrium <span class=\"br0\">[</span>lst<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>acc '<span class=\"br0\">(</span><span class=\"br0\">)</span>, i <span class=\"nu0\">0</span>, left <span class=\"nu0\">0</span>, right <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">+</span> lst<span class=\"br0\">)</span>, lst lst<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> lst<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> acc<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x <span class=\"sy0\">&amp;</span> xs<span class=\"br0\">]</span> lst<br/>\t       right    <span class=\"br0\">(</span><span class=\"sy0\">-</span> right x<span class=\"br0\">)</span><br/>\t       acc      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> left right<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i acc<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">recur</span> acc <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> left x<span class=\"br0\">)</span> right xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dflt-on-<span class=\"kw1\">nil</span> <span class=\"br0\">(</span>v dflt<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> v v dflt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> eq-index <span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span>*<br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span>stack <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>rest v <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>lsum <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>rsum <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"co1\">;; Reverse here is not strictly necessary</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> rest<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> stack<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> lsum rsum<span class=\"br0\">)</span> <span class=\"br0\">(</span>push i stack<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> lsum <span class=\"br0\">(</span>+ lsum <span class=\"br0\">(</span><span class=\"kw1\">car</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> rsum <span class=\"br0\">(</span>- rsum <span class=\"br0\">(</span>dflt-on-<span class=\"kw1\">nil</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> rest<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> equilibrium<span class=\"br0\">(</span>Range<span class=\"br0\">)</span><span class=\"br0\">(</span>Range r<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> r.<span class=\"me1\">length</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">i</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> r<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">equilibrium</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 66, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>import system'collections.<br/>import extensions'routines.<br/>\u00a0<br/>class EquilibriumEnumerator\u00a0:: Enumerator<br/>{<br/>    int        left.<br/>    int        right.<br/>    int        index.<br/>    enumerator en.<br/>\u00a0<br/>    multi constructor new\u00a0: object<br/>        &lt;= new enumerator:object.<br/>\u00a0<br/>    constructor new(Enumerator en)<br/>    [<br/>        @en\u00a0:= en.<br/>\u00a0<br/>        $self reset.<br/>    ]<br/>\u00a0<br/>    constructor new(BaseEnumerable list)<br/>        &lt;= new(list enumerator).<br/>\u00a0<br/>    bool next        <br/>    [<br/>        index += 1.<br/>\u00a0<br/>        while(en next)<br/>        [<br/>            var element\u00a0:= en get.            <br/>            right -= element.<br/>            bool found\u00a0:= (left == right).<br/>            left += element.<br/>\u00a0<br/>            if (found)<br/>            [<br/>                ^ true<br/>            ].<br/>\u00a0<br/>            index += 1.<br/>        ].<br/>\u00a0<br/>        ^ false<br/>    ]<br/>\u00a0<br/>    reset<br/>    [<br/>        en reset.<br/>\u00a0<br/>        left\u00a0:= 0.<br/>        right\u00a0:= en summarize.<br/>        index\u00a0:= -1.<br/>\u00a0<br/>        en reset.<br/>    ]<br/>\u00a0<br/>    get = index.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    EquilibriumEnumerator new:(-7, 1, 5, 2, -4, 3, 0);<br/>        forEach:printingLn.<br/>].</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule Equilibrium do<br/>  def index(list) do<br/>    last = length(list)<br/>    Enum.filter(0..last-1, fn i -&gt;<br/>      Enum.sum(Enum.slice(list, 0, i)) == Enum.sum(Enum.slice(list, i+1..last))<br/>    end)<br/>  end<br/>end</pre>"}, {"lang": "ERRE", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM EQUILIBRIUM<br/>\u00a0<br/>DIM LISTA[6]<br/>\u00a0<br/>PROCEDURE EQ(LISTA[]-&gt;RES$)<br/>   LOCAL I%,R,S,E$<br/>   FOR I%=0 TO UBOUND(LISTA,1) DO<br/>      S+=LISTA[I%]<br/>   END FOR<br/>   FOR I%=0 TO UBOUND(LISTA,1) DO<br/>      IF R=S-R-LISTA[I%] THEN E$+=STR$(I%)+\",\" END IF<br/>      R+=LISTA[I%]<br/>   END FOR<br/>   RES$=LEFT$(E$,LEN(E$)-1)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   LISTA[]=(-7,1,5,2,-4,3,0)<br/>   EQ(LISTA[]-&gt;RES$)<br/>   PRINT(\"Equilibrium indices are\";RES$)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> equilibrium<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> lower_sum<span class=\"sy2\">,</span> higher_sum<br/>    <span class=\"kw2\">sequence</span> indices<br/>    lower_sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    higher_sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        higher_sum <span class=\"sy1\">+=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    indices <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        higher_sum <span class=\"sy1\">-=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> lower_sum <span class=\"sy1\">=</span> higher_sum <span class=\"kw1\">then</span><br/>            indices <span class=\"sy1\">&amp;=</span> i<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        lower_sum <span class=\"sy1\">+=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> indices<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> equilibrium<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">4</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">USE: math.vectors<br/>: accum-left ( seq id quot -- seq ) accumulate nip\u00a0; inline<br/>: accum-right ( seq id quot -- seq ) [ &lt;reversed&gt; ] 2dip accum-left &lt;reversed&gt;\u00a0; inline<br/>: equilibrium-indices ( seq -- inds )<br/>  0 [ + ] [ accum-left ] [ accum-right ] 3bi [ = ] 2map<br/>  V{ } swap dup length iota [ [ suffix ] curry [ ] if ] 2each\u00a0;</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Equilibrium<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> equil_index<span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> equil_index<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>sum<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sum<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 36, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> equilibriumIndices <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span>  <span class=\"co1\">'' empty array</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>\u00a0: sum += a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Dim</span> sumLeft <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span>, sumRight <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <br/>     sumRight = sum - sumLeft - a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">If</span> sumLeft = sumRight <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> b<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> Count<span class=\"br0\">)</span><br/>       b<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = i<br/>       count += <span class=\"nu0\">1</span>      <br/>     <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>     sumLeft += a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span> -<span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>equilibriumIndices a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"There are no equilibrium indices\"</span><br/><span class=\"kw1\">ElseIf</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"The only equilibrium index is\u00a0: \"</span>; b<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"The equilibrium indices are\u00a0: \"</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Print</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;\u00a0: <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 36, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>ex<span class=\"sy1\">([]</span><span class=\"kw4\">int32</span><span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}))</span><br/>\u00a0<br/>    <span class=\"co1\">// sequence of 1,000,000 random numbers, with values</span><br/>    <span class=\"co1\">// chosen so that it will be likely to have a couple</span><br/>    <span class=\"co1\">// of equalibrium indexes.</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    verylong <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int32</span><span class=\"sy1\">,</span> <span class=\"nu1\">1e6</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> verylong <span class=\"sy1\">{</span><br/>        verylong<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Int31n<span class=\"sy1\">(</span><span class=\"nu0\">1001</span><span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">500</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>ex<span class=\"sy1\">(</span>verylong<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ex<span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">int32</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>eq <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> r<span class=\"sy1\">,</span> l <span class=\"kw4\">int64</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> el <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">+=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>el<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> el <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">-=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>el<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> l <span class=\"sy3\">==</span> r <span class=\"sy1\">{</span><br/>            eq <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>eq<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        l <span class=\"sy2\">+=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>el<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRIO<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>elemIndices<span class=\"sy0\">,</span> takeWhile<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>replicateM<span class=\"sy0\">,</span> liftM2<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>equilibr xs <span class=\"sy0\">=</span> elemIndices True <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>  takeWhile <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">)</span> xs<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>langeSliert <span class=\"sy0\">=</span><br/>  replicateM <span class=\"nu0\">2000</span> <span class=\"br0\">(</span>randomRIO <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>   <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> equilibr</pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>L <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>arglist <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> arglist <span class=\"kw1\">else</span> <span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"co1\"># command line args or default</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span> <span class=\"st0\">\"equilibrium indicies of [ \"</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>L <span class=\"sy1\">||</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"] = \"</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span>eqindex<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy1\">||</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> eqindex<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"co1\"># generate equilibrium points in a list L or fail</span><br/><span class=\"kw2\">local</span> s<span class=\"sy1\">,</span>l<span class=\"sy1\">,</span>i<br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> i <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>L<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>   s <span class=\"sy1\">+:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span>              <span class=\"co1\"># sum and validate</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>l <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>L<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> l <span class=\"sy1\">=</span> <span class=\"br0\">(</span>s<span class=\"sy1\">-</span>L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> i     <br/>   l <span class=\"sy1\">+:=</span> L<span class=\"br0\">[</span>i<span class=\"br0\">]</span>                           <span class=\"co1\"># sum of left side</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">equilidx=: +/\\ <a class=\"__cf_email__\" data-cfemail=\"a4ed8ae4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:= +/\\.</pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java5 highlighted_source\">\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Equlibrium <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sequence = <span class=\"br0\">{</span>-<span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\tequlibrium_indices<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> equlibrium_indices<span class=\"br0\">(</span><span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sequence<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//find total sum</span><br/>\t\t<span class=\"kw3\">int</span> totalSum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> n\u00a0: sequence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\ttotalSum += n<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">//compare running sum to remaining sum to find equlibrium indices</span><br/>\t\t<span class=\"kw3\">int</span> runningSum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sequence.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">int</span> n = sequence<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>totalSum - runningSum - n == runningSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\trunningSum += n<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 19, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> equilibrium<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> N <span class=\"sy0\">=</span> a.<span class=\"me1\">length</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> e <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>l<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    l<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> l<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span>N <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> r<span class=\"br0\">[</span>N <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>N <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">===</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> e.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> e<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// test &amp; output</span><br/><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// 3, 6</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// empty</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// 1</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// 0,1,2,3,4,5,6</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// 0</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"co1\">// empty</span><br/><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>equilibrium<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 13, "block": "<pre class=\"text highlighted_source\"># The index origin is 0 in jq.<br/>def equilibrium_indices:<br/>  def indices(a; mx):<br/>    def report: # [i, headsum, tailsum]<br/>      .[0] as $i<br/>      | if $i == mx then empty          # all done<br/>        else .[1] as $h<br/>        | (.[2] - a[$i]) as $t<br/>        | (if $h == $t then $i else empty end), <br/>          ( [ $i + 1, $h + a[$i], $t ] | report )<br/>        end;<br/>    [0, 0, (a|add)] | report; <br/>  . as $in | indices($in; $in|length);</pre>"}, {"lang": "Julia", "loc": 17, "block": "<pre class=\"text highlighted_source\">function equindex2pass(data::Array)<br/>    rst = Vector{Int}(0)<br/>    suml, sumr, ddelayed = 0, sum(data), 0<br/>    for (i, d) in enumerate(data)<br/>        suml += ddelayed<br/>        sumr -= d<br/>        ddelayed = d<br/>        if suml == sumr<br/>            push!(rst, i)<br/>        end<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>@show equindex2pass([1, -1, 1, -1, 1, -1, 1])<br/>@show equindex2pass([1, 2, 2, 1])<br/>@show equindex2pass([-7, 1, 5, 2, -4, 3, 0])</pre>"}, {"lang": "K", "loc": 13, "block": "<pre class=\"text highlighted_source\">   f:{&amp;{(+/y# x)=+/(y+1)_x}[x]'!#x}<br/>\u00a0<br/>   f -7 1 5 2 -4 3 0<br/>3 6<br/>\u00a0<br/>   f 2 4 6<br/>!0<br/>\u00a0<br/>   f 2 9 2<br/>,1<br/>\u00a0<br/>  f 1 -1 1 -1 1 -1 1<br/>0 1 2 3 4 5 6</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun equilibriumIndices<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ei <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ei <span class=\"co1\">// empty list</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sumAll  <span class=\"sy0\">=</span> a.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sumLeft <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sumRight<span class=\"sy0\">:</span> Int<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until a.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       sumRight <span class=\"sy0\">=</span> sumAll - sumLeft - a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sumLeft <span class=\"sy0\">==</span> sumRight<span class=\"br0\">)</span> ei.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       sumLeft +<span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ei<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">7</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">4</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ei <span class=\"sy0\">=</span> equilibriumIndices<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    when <span class=\"br0\">(</span>ei.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"nu0\">0</span>     -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"There are no equilibrium indices\"</span><span class=\"br0\">)</span><br/>         <span class=\"nu0\">1</span>     -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"The only equilibrium index is\u00a0: ${ei[0]}\"</span><span class=\"br0\">)</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"The equilibrium indices are\u00a0: ${ei.joinToString(\"</span>, <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 28, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=-</span><span class=\"nu0\">7</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">=-</span><span class=\"nu0\">4</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/>a<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"EQ Indices are \"</span>;EQindex$<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> EQindex$<span class=\"br0\">(</span>b$<span class=\"sy0\">,</span>mini<span class=\"sy0\">,</span>maxi<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> mini<span class=\"sy0\">&gt;=</span>maxi <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> mini <span class=\"kw1\">to</span> maxi<br/>        sum<span class=\"sy0\">=</span>sum<span class=\"sy0\">+</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span>b$;<span class=\"st0\">\"(\"</span>;i;<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    sumA<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>sumB<span class=\"sy0\">=</span>sum<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> mini <span class=\"kw1\">to</span> maxi<br/>        sumB <span class=\"sy0\">=</span> sumB <span class=\"sy0\">-</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span>b$;<span class=\"st0\">\"(\"</span>;i;<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> sumA<span class=\"sy0\">=</span>sumB <span class=\"kw1\">then</span> EQindex$<span class=\"sy0\">=</span>EQindex$<span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\", \"</span><br/>        sumA <span class=\"sy0\">=</span> sumA <span class=\"sy0\">+</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span>b$;<span class=\"st0\">\"(\"</span>;i;<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>EQindex$<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> EQindex$<span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>EQindex$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>EQindex$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">'remove last \", \"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 10, "block": "<pre class=\"text highlighted_source\">to equilibrium.iter\u00a0:i\u00a0:before\u00a0:after\u00a0:tail\u00a0:ret<br/>  if equal?\u00a0:before\u00a0:after [make \"ret lput\u00a0:i\u00a0:ret]<br/>  if empty? butfirst\u00a0:tail [output\u00a0:ret]<br/>  output equilibrium.iter\u00a0:i+1 (:before+first\u00a0:tail) (:after-first butfirst\u00a0:tail) (butfirst\u00a0:tail)\u00a0:ret<br/>end<br/>to equilibrium.index\u00a0:list<br/>  output equilibrium.iter 1 0 (apply \"sum butfirst\u00a0:list)\u00a0:list []<br/>end<br/>\u00a0<br/>show equilibrium_index [-7 1 5 2 -4 3 0]   \u00a0; [4 7]</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">equilibriumIndex[data_]:=Reap[<br/>    Do[If[Total[data[[;; n - 1]]] == Total[data[[n + 1\u00a0;;]]],Sow[n]], <br/>    {n, Length[data]}]][[2, 1]]</pre>"}, {"lang": "MATLAB", "loc": 11, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> indicies = equilibriumIndex<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>\u00a0<br/>    indicies = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>-list<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>-list<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            indicies = <span class=\"br0\">[</span>indicies <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "NetRexx", "loc": 38, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">20</span><br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- @see http://www.geeksforgeeks.org/equilibrium-index-of-an-array/</span><br/>method equilibriumIndex<span class=\"br0\">(</span><span class=\"kw6\">sequence</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  es = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> to <span class=\"kw6\">sequence</span>.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    sum = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">loop</span> jx = <span class=\"nu0\">1</span> to <span class=\"kw6\">sequence</span>.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> jx <span class=\"sy0\">&lt;</span> ix <span class=\"kw3\">then</span> sum = sum + <span class=\"kw6\">sequence</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span>jx<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> jx <span class=\"sy0\">&gt;</span> ix <span class=\"kw3\">then</span> sum = sum - <span class=\"kw6\">sequence</span>.<span class=\"kw6\">word</span><span class=\"br0\">(</span>jx<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> jx<br/>      <span class=\"kw1\">if</span> sum = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> es = es ix<br/>    <span class=\"kw3\">end</span> ix<br/>  <span class=\"kw1\">return</span> es<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"co1\">-- Note: A Rexx object based list of \"words\" starts at index 1</span><br/>  sequences = <span class=\"br0\">[</span> -<br/>    <span class=\"st0\">'-7  1  5  2 -4  3  0'</span>, -  <span class=\"co1\">-- 4 7</span><br/>    <span class=\"st0\">' 2  4  6'</span>            , -  <span class=\"co1\">-- (no equilibrium point)</span><br/>    <span class=\"st0\">' 0  2  4  0  6  0'</span>   , -  <span class=\"co1\">-- 4</span><br/>    <span class=\"st0\">' 2  9  2'</span>            , -  <span class=\"co1\">-- 2</span><br/>    <span class=\"st0\">' 1 -1  1 -1  1 -1  1'</span>  -  <span class=\"co1\">-- 1 2 3 4 5 6 7</span><br/>    <span class=\"br0\">]</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw6\">sequence</span> over sequences<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'For sequence \"'</span><span class=\"kw6\">sequence</span>.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"st0\">'\" the equilibrium indices are: \\-'</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'\"'</span>equilibriumIndex<span class=\"br0\">(</span><span class=\"kw6\">sequence</span><span class=\"br0\">)</span>.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"st0\">'\"'</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw6\">sequence</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">import math, sequtils<br/>\u00a0<br/>iterator eqindex(data) =<br/>  var suml, ddelayed = 0<br/>  var sumr = sum(data)<br/>  for i,d in data:<br/>    suml += ddelayed<br/>    sumr -= d<br/>    ddelayed = d<br/>    if suml == sumr:<br/>      yield i<br/>\u00a0<br/>const d = @[@[-7, 1, 5, 2, -4, 3, 0],<br/>            @[2, 4, 6],<br/>            @[2, 9, 2],<br/>            @[1, -1, 1, -1, 1, -1, 1]]<br/>\u00a0<br/>for data in d:<br/>  echo \"d = \", data<br/>  echo \"eqIndex(d) -&gt; \", toSeq(eqindex(data))</pre>"}, {"lang": "Objeck", "loc": 24, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Rosetta <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    sequence <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    EqulibriumIndices<span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> EqulibriumIndices<span class=\"br0\">(</span>sequence <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># find total sum</span><br/>    totalSum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> sequence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      totalSum <span class=\"sy0\">+=</span> sequence<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># compare running sum to remaining sum to find equlibrium indices</span><br/>    runningSum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> sequence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      n <span class=\"sy0\">:=</span> sequence<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>totalSum <span class=\"sy0\">-</span> runningSum <span class=\"sy0\">-</span> n <span class=\"sy0\">=</span> runningSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      runningSum <span class=\"sy0\">+=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> lst <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> sum <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span> <span class=\"sy0\">+</span> <span class=\"br0\">)</span> <span class=\"nu0\">0</span> lst<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc i left right <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> right <span class=\"sy0\">=</span> right <span class=\"sy0\">-</span> x <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> acc <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> left <span class=\"sy0\">=</span> right <span class=\"kw1\">then</span> i<span class=\"sy0\">::</span>acc <span class=\"kw1\">else</span> acc <span class=\"kw1\">in</span><br/>      aux acc <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>left <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> right xs<br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> aux <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> sum lst <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"Results:\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> res<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: equilibrium(l)<br/>| ls rs i e |<br/>   0 -&gt;ls<br/>   l sum -&gt;rs<br/>   ListBuffer new l size loop: i [<br/>      l at(i) -&gt;e<br/>      rs e - dup -&gt;rs ls == ifTrue: [ i over add ]<br/>      ls e + -&gt;ls<br/>      ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">equilib<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>b<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">==</span>b<span class=\"sy0\">,</span> u<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    b<span class=\"sy0\">+=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    a<span class=\"sy0\">-=</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span>#v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 34, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> EquilibriumIndexDemo<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ArraySum<span class=\"br0\">(</span>list<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> first<span class=\"sy1\">,</span> last<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    ArraySum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> first <span class=\"kw1\">to</span> last <span class=\"kw1\">do</span>  <span class=\"co1\">// not taken if first &gt; last</span><br/>      ArraySum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ArraySum <span class=\"sy3\">+</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> EquilibriumIndex<span class=\"br0\">(</span>list<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> offset<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> ArraySum<span class=\"br0\">(</span>list<span class=\"sy1\">,</span> low<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"sy1\">,</span> i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> ArraySum<span class=\"br0\">(</span>list<span class=\"sy1\">,</span> i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> high<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>offset <span class=\"sy3\">+</span> i<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/><span class=\"coMULTI\">{** The base index of the array is fully taken care off and can be any number. **}</span><br/>  numbers<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'List of numbers: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Equilibirum indices: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  EquilibriumIndex<span class=\"br0\">(</span>numbers<span class=\"sy1\">,</span> low<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> eq_index <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"re0\">%sums</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$sums</span><span class=\"br0\">{</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span>  <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">++;</span><br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$sums</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span> <span class=\"sy0\">||</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> eq_index <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>  <span class=\"sy0\">-</span><span class=\"nu0\">7</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 3 6</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> eq_index <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>   <span class=\"nu0\">2</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">6</span>             <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># (no eq point)</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> eq_index <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>   <span class=\"nu0\">2</span>  <span class=\"nu0\">9</span>  <span class=\"nu0\">2</span>             <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 1</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> eq_index <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>   <span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 0 1 2 3 4 5 6</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> equilibrium_index<span class=\"br0\">(</span><span class=\"re0\">@list</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$left</span><span class=\"sy0\">,</span><span class=\"re0\">$right</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    gather <span class=\"kw1\">for</span> <span class=\"re0\">@list</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$right</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        take <span class=\"re0\">$i</span> <span class=\"kw1\">if</span> <span class=\"re0\">$left</span> <span class=\"sy0\">==</span> <span class=\"re0\">$right</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$left</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@list</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> equilibrium_index<span class=\"br0\">(</span><span class=\"re0\">@list</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"co2\">/\\d/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">function equilibrium(sequence s)<br/>atom lower_sum = 0<br/>atom higher_sum = sum(s)<br/>sequence res = {}<br/>    for i=1 to length(s) do<br/>        higher_sum -= s[i]<br/>        if lower_sum=higher_sum then<br/>            res &amp;= i<br/>        end if<br/>        lower_sum += s[i]<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>? equilibrium({-7,1,5,2,-4,3,0})</pre>"}, {"lang": "PHP", "loc": 18, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> getEquilibriums<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$right</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$left</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$equilibriums</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$right</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$left</span> <span class=\"sy0\">==</span> <span class=\"re0\">$right</span><span class=\"br0\">)</span> <span class=\"re0\">$equilibriums</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$key</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$left</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$equilibriums</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"# results:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>getEquilibriums<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$r</span>, \"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de equilibria (Lst)<br/>   (make<br/>      (let Sum 0<br/>         (for ((I . L) Lst L (cdr L))<br/>            (and (= Sum (sum prog (cdr L))) (link I))<br/>            (inc 'Sum (car L)) ) ) ) )</pre>"}, {"lang": "PowerShell", "loc": 24, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>EquilibriumIndex <span class=\"br0\">(</span> <span class=\"re0\">$Sequence</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Indexes</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$Sequence</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$EqulibriumIndex</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$TestIndex</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Indexes</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Left</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"re0\">$Right</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Index</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Indexes</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"kw3\">If</span>     <span class=\"br0\">(</span> <span class=\"re0\">$Index</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$TestIndex</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Left</span>  <span class=\"sy0\">+=</span> <span class=\"re0\">$Sequence</span><span class=\"br0\">[</span><span class=\"re0\">$Index</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>            <span class=\"kw3\">ElseIf</span> <span class=\"br0\">(</span> <span class=\"re0\">$Index</span> <span class=\"kw4\">-gt</span> <span class=\"re0\">$TestIndex</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Right</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sequence</span><span class=\"br0\">[</span><span class=\"re0\">$Index</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$Left</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Right</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$EqulibriumIndex</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$TestIndex</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$EqulibriumIndex</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">equilibrium_index<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> Index<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    append<span class=\"br0\">(</span>Front<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>Back<span class=\"br0\">]</span><span class=\"sy4\">,</span> List<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    sumlist<span class=\"br0\">(</span>Front<span class=\"sy4\">,</span> Sum<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    sumlist<span class=\"br0\">(</span>Back<span class=\"sy4\">,</span>  Sum<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    length<span class=\"br0\">(</span>Front<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    Index <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Len<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 14, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, c<span class=\"sy0\">=</span><span class=\"kw2\">CountProgramParameters</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> c<br/>    <span class=\"kw1\">Define</span> j, LSum<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, RSum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> c<br/>      <span class=\"kw1\">If</span> j<span class=\"sy0\">&lt;</span>i<br/>        LSum<span class=\"sy0\">+</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">ElseIf</span> j<span class=\"sy0\">&gt;</span>i<br/>        RSum<span class=\"sy0\">+</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">If</span> LSum<span class=\"sy0\">=</span>RSum: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> eqindex2Pass<span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Two pass\"</span><br/>    suml<span class=\"sy0\">,</span> sumr<span class=\"sy0\">,</span> ddelayed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>        suml +<span class=\"sy0\">=</span> ddelayed<br/>        sumr -<span class=\"sy0\">=</span> d<br/>        ddelayed <span class=\"sy0\">=</span> d<br/>        <span class=\"kw1\">if</span> suml <span class=\"sy0\">==</span> sumr:<br/>            <span class=\"kw1\">yield</span> i</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (subsums xs)<br/>  (for/fold ([sums '()] [sum 0]) ([x xs])<br/>    (values (cons (+ x sum) sums)<br/>            (+ x sum))))<br/>\u00a0<br/>(define (equivilibrium xs)<br/>  (define-values (sums total) (subsums xs))<br/>  (for/list ([sum (reverse sums)]<br/>             [x xs]<br/>             [i (in-naturals)]<br/>             #:when (= (- sum x) (- total sum)))<br/>    i))<br/>\u00a0<br/>(equivilibrium '(-7 1 5 2 -4 3 0))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays the equilibrium index for a numeric array (list).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x                                      <span class=\"coMULTI\">/*obtain the optional arguments from CL*/</span><br/><span class=\"kw1\">if</span> x=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> x=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\" 7 -7\"</span>, <span class=\"nu0\">50</span><span class=\"br0\">)</span>   <span class=\"nu0\">7</span>          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'         array list: '</span>     <span class=\"kw6\">space</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*echo the array list to the terminal. */</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                       <span class=\"coMULTI\">/*the number of elements in the X list.*/</span><br/>              <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> #;    @<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x, j+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*zero\u2500start is for zero\u2500based array.  */</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                        <span class=\"coMULTI\">/* [\u2191]  assign   @.0   @.1   @.3  \u00b7\u00b7\u00b7  */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 and also display a blank line. */</span><br/>answer=equilibriumIDX<span class=\"br0\">(</span><span class=\"br0\">)</span>;        w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*calculate the  equilibrium index.    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'equilibrium'</span>  <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">\"(none) index: indices:\"</span>,   <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>w<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span>w<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        answer<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>equilibriumIDX: $=;       <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> #;           sum=<span class=\"nu0\">0</span><br/>                                  <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> #;   sum=sum + @<span class=\"sy0\">.</span>k<span class=\"sy0\">*</span><span class=\"kw6\">sign</span><span class=\"br0\">(</span>k-i<span class=\"br0\">)</span>;     <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>                          <span class=\"kw1\">if</span> sum==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$ i<br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>            <span class=\"coMULTI\">/* [\u2191] Zero? Found an equilibrium index*/</span><br/>                <span class=\"kw1\">return</span> $                         <span class=\"coMULTI\">/*return equilibrium list (may be null)*/</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>list  = [-7, 1, 5, 2, -4, 3, 0]<br/>see \"equilibrium indices are\u00a0: \" + equilibrium(list) + nl<br/>\u00a0<br/>func equilibrium l<br/>     r = 0 s = 0 e = \"\"<br/>     for n = 1 to len(l)<br/>         s += l[n]<br/>     next<br/>     for i = 1 to len(l)<br/>         if r = s - r - l[i]  e += string(i-1) + \",\" ok<br/>         r += l[i] <br/>     next<br/>     e = left(e,len(e)-1)<br/>     return e<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> eq_indices<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>  list.<span class=\"me1\">each_index</span>.<span class=\"kw3\">select</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    list<span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">i</span><span class=\"br0\">]</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,\u00a0:<span class=\"sy0\">+</span><span class=\"br0\">)</span> == list<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,\u00a0:<span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> getEquilibriumIndex<span class=\"br0\">(</span>A<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigA<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A.<span class=\"me1\">map</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> partialSums<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> bigA.<span class=\"me1\">scanLeft</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">tail</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> lSum<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> partialSums<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rSum<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> partialSums.<span class=\"me1\">last</span> - partialSums<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isRandLSumEqual<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> lSum<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> rSum<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span> until partialSums.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">find</span><span class=\"br0\">(</span>isRandLSumEqual<span class=\"br0\">)</span>.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> </pre>"}, {"lang": "Seed7", "loc": 40, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const array integer: numList is [] (-7, 1, 5, 2, -4, 3, 0);<br/>\u00a0<br/>const func array integer: equilibriumIndex (in array integer: elements) is func<br/>  result<br/>    var array integer: indexList is 0 times 0;<br/>  local<br/>    var integer: element is 0;<br/>    var integer: index is 0;<br/>    var integer: sum is 0;<br/>    var integer: subSum is 0;<br/>    var integer: count is 0;<br/>  begin<br/>    indexList\u00a0:= length(elements) times 0;<br/>    for element range elements do<br/>      sum +:= element;<br/>    end for;<br/>    for element key index range elements do<br/>      if 2 * subSum + element = sum then<br/>        incr(count);<br/>        indexList[count]\u00a0:= index;<br/>      end if;<br/>      subSum +:= element;<br/>    end for;<br/>    indexList\u00a0:= indexList[.. count];<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array integer: indexList is 0 times 0;<br/>    var integer: element is 0;<br/>  begin<br/>    indexList\u00a0:= equilibriumIndex(numList);<br/>    write(\"Found:\");<br/>    for element range indexList do<br/>      write(\" \" &lt;&amp; element);<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func eq_index<span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>i, sum, sums<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">)</span>;<br/>    nums.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>        sums<span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum <span class=\"sy0\">+</span> n<span class=\"br0\">}</span>\u00a0:= <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> append<span class=\"br0\">(</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>;<br/>        sum <span class=\"sy0\">+</span>= n;<br/>    <span class=\"br0\">}</span><br/>    sums<span class=\"br0\">{</span>sum<span class=\"br0\">}</span> \\\\ <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> listEquilibria <span class=\"br0\">{</span><span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> after <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> item <span class=\"re0\">$list</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> after <span class=\"re0\">$item</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> idx <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> before <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> item <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> after <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$item</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$after</span> == <span class=\"re0\">$before</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"re0\">$idx</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> before <span class=\"re0\">$item</span><br/>\t<span class=\"kw2\">incr</span> idx<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import int<br/>\u00a0<br/>edex = <a class=\"__cf_email__\" data-cfemail=\"600e150d20192b5353193330142b5353181433521018\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; ~&amp;nS+ *~ ==+ ~~r sum:-0<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>example = edex &lt;-7,1,5,2,-4,3,0&gt;</pre>"}, {"lang": "VBScript", "loc": 19, "block": "<pre class=\"vb highlighted_source\">arr = Array(-7,1,5,2,-4,3,0)<br/>WScript.StdOut.Write equilibrium(arr,<span class=\"kw4\">UBound</span>(arr))<br/>WScript.StdOut.WriteLine<br/>\u00a0<br/><span class=\"kw2\">Function</span> equilibrium(arr,n)<br/>\tsum = 0<br/>\tleftsum = 0<br/>\t<span class=\"co1\">'find the sum of the whole array<br/></span>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tsum = sum + arr(i)<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tsum = sum - arr(i)<br/>\t\t<span class=\"kw3\">If</span> leftsum = sum <span class=\"kw3\">Then</span><br/>\t\t\tequilibrium = equilibrium &amp; i &amp; <span class=\"st0\">\", \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\tleftsum = leftsum + arr(i)<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "XPL0", "loc": 11, "block": "<pre class=\"text highlighted_source\">code Ran=1, ChOut=8, IntOut=11;<br/>def Size = 1_000_000;<br/>int I, S, A(Size), Hi(Size), Lo(Size);<br/>[for I:= 0 to Size-1 do A(I):= Ran(100) - 50;<br/>S:= 0;<br/>for I:= 0 to Size-1 do [S:= S+A(I);  Lo(I):= S];<br/>S:= 0;<br/>for I:= Size-1 downto 0 do [S:= S+A(I);  Hi(I):= S];<br/>for I:= 0 to Size-1 do<br/>    if Lo(I) = Hi(I) then [IntOut(0, I);  ChOut(0, ^ )];<br/>]</pre>"}, {"lang": "Yorick", "loc": 3, "block": "<pre class=\"text highlighted_source\">func equilibrium_indices(A) {<br/>    return where(A(psum) == A(::-1)(psum)(::-1));<br/>}</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn equilibrium(lst){  // two pass<br/>   reg acc=List(), left=0,right=lst.sum(0),i=0;<br/>   foreach x in (lst){<br/>      right-=x;<br/>      if(left==right) acc.write(i);<br/>      i+=1; left+=x;<br/>   }<br/>   acc<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 12, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> DATA <span class=\"nu0\">7</span>,-<span class=\"nu0\">7</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">2</span>,-<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">0</span><br/><span class=\"nu0\">20</span> READ n<br/><span class=\"nu0\">30</span> <span class=\"kw1\">DIM</span> a<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> sum=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> leftsum=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> s$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n: READ a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> sum=sum+a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> sum=sum-a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> leftsum=sum <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s$=s$+<span class=\"kw3\">STR</span>$ i+<span class=\"st0\">\" \"</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> leftsum=leftsum+a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">100</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Numbers: \"</span>;<br/><span class=\"nu0\">110</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n: <span class=\"kw1\">PRINT</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">'\"Indices: \";s$</span></pre>"}]}