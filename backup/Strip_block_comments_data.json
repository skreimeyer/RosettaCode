{"task": "Strip_block_comments", "blocks": [{"lang": "Ada", "loc": 93, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Strip <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>   <span class=\"kw3\">procedure</span> Print_Usage <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Usage:\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"   strip &lt;file&gt; [&lt;opening&gt; [&lt;closing&gt;]]\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"      file: file to strip\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"      opening: string for opening comment\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"      closing: string for closing comment\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> Print_Usage;<br/>\u00a0<br/>   Opening_Pattern\u00a0: Unbounded_String\u00a0:= To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"/*\"</span><span class=\"br0\">)</span>;<br/>   Closing_Pattern\u00a0: Unbounded_String\u00a0:= To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span>;<br/>   Inside_Comment \u00a0: Boolean         \u00a0:= False;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Strip_Comments <span class=\"br0\">(</span>From\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/>      Opening_Index\u00a0: Natural;<br/>      Closing_Index\u00a0: Natural;<br/>      Start_Index  \u00a0: Natural\u00a0:= From'First;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Inside_Comment <span class=\"kw1\">then</span><br/>         Start_Index\u00a0:=<br/>            Index <span class=\"br0\">(</span>Source =&gt; From, Pattern =&gt; To_String <span class=\"br0\">(</span>Closing_Pattern<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Start_Index &lt; From'First <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Inside_Comment\u00a0:= False;<br/>         Start_Index   \u00a0:= Start_Index + Length <span class=\"br0\">(</span>Closing_Pattern<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Opening_Index\u00a0:=<br/>         Index<br/>           <span class=\"br0\">(</span>Source  =&gt; From,<br/>            Pattern =&gt; To_String <span class=\"br0\">(</span>Opening_Pattern<span class=\"br0\">)</span>,<br/>            From    =&gt; Start_Index<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Opening_Index &lt; From'First <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> From <span class=\"br0\">(</span>Start_Index .. <span class=\"me1\">From</span>'Last<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Closing_Index\u00a0:=<br/>            Index<br/>              <span class=\"br0\">(</span>Source  =&gt; From,<br/>               Pattern =&gt; To_String <span class=\"br0\">(</span>Closing_Pattern<span class=\"br0\">)</span>,<br/>               From    =&gt; Opening_Index + Length <span class=\"br0\">(</span>Opening_Pattern<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Closing_Index &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> From <span class=\"br0\">(</span>Start_Index .. <span class=\"me1\">Opening_Index</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp;<br/>                   Strip_Comments<br/>                      <span class=\"br0\">(</span>From <span class=\"br0\">(</span><br/>               Closing_Index + Length <span class=\"br0\">(</span>Closing_Pattern<span class=\"br0\">)</span> .. <span class=\"me1\">From</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Inside_Comment\u00a0:= True;<br/>            <span class=\"kw1\">return</span> From <span class=\"br0\">(</span>Start_Index .. <span class=\"me1\">Opening_Index</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Strip_Comments;<br/>\u00a0<br/>   File\u00a0: Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> &lt; <span class=\"nu0\">1</span><br/>     <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> &gt; <span class=\"nu0\">3</span><br/>   <span class=\"kw1\">then</span><br/>      Print_Usage;<br/>      <span class=\"kw1\">return</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      Opening_Pattern\u00a0:= To_Unbounded_String <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> &gt; <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>         Closing_Pattern\u00a0:=<br/>            To_Unbounded_String <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Closing_Pattern\u00a0:= Opening_Pattern;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><br/>     <span class=\"br0\">(</span>File =&gt; File,<br/>      Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span>,<br/>      Name =&gt; Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span> <span class=\"br0\">(</span>File =&gt; File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         Line\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span> <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span>Strip_Comments <span class=\"br0\">(</span>Line<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Close</span> <span class=\"br0\">(</span>File =&gt; File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Strip;</pre>"}, {"lang": "AutoHotkey", "loc": 27, "block": "<pre class=\"autohotkey highlighted_source\">code <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/> <span class=\"coMULTI\">/**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   */</span><br/>   function subroutine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">=</span> <span class=\"coMULTI\">/* inline comment */</span> b <span class=\"sy0\">+</span> c <span class=\"co1\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"coMULTI\">/*/ &lt;-- tricky comments */</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/**<br/>    * Another comment.<br/>    */</span><br/>    function something<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><br/><span class=\"co1\">;Open-Close Comment delimiters</span><br/>\topenC<span class=\"sy0\">:=</span><span class=\"st0\">\"/*\"</span><br/>\tcloseC<span class=\"sy0\">:=</span><span class=\"st0\">\"*/\"</span><br/><span class=\"co1\">;Make it \"Regex-Safe\"</span><br/>\topenC<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>openC<span class=\"sy0\">,</span><span class=\"st0\">\"(\\*|\\^|\\?|\\\\|\\+|\\.|\\!|\\{|\\}|\\[|\\]|\\$|\\|)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\\$0\"</span><span class=\"br0\">)</span><br/>\tcloseC<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>closeC<span class=\"sy0\">,</span><span class=\"st0\">\"(\\*|\\^|\\?|\\\\|\\+|\\.|\\!|\\{|\\}|\\[|\\]|\\$|\\|)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\\$0\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;Display final result</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% sCode <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>code<span class=\"sy0\">,</span><span class=\"st0\">\"s)(\"</span> <span class=\"sy0\">.</span> openC <span class=\"sy0\">.</span> <span class=\"st0\">\").*?(\"</span> <span class=\"sy0\">.</span> closeC <span class=\"sy0\">.</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      infile$ = \"C:\\sample.c\"<br/>      outfile$ = \"C:\\stripped.c\"<br/>\u00a0<br/>      PROCstripblockcomments(infile$, outfile$, \"/*\", \"*/\")<br/>      END<br/>\u00a0<br/>      DEF PROCstripblockcomments(infile$, outfile$, start$, finish$)<br/>      LOCAL infile%, outfile%, comment%, test%, A$<br/>\u00a0<br/>      infile% = OPENIN(infile$)<br/>      IF infile%=0 ERROR 100, \"Could not open input file\"<br/>      outfile% = OPENOUT(outfile$)<br/>      IF outfile%=0 ERROR 100, \"Could not open output file\"<br/>\u00a0<br/>      WHILE NOT EOF#infile%<br/>        A$ = GET$#infile% TO 10<br/>        REPEAT<br/>          IF comment% THEN<br/>            test% = INSTR(A$, finish$)<br/>            IF test% THEN<br/>              A$ = MID$(A$, test% + LEN(finish$))<br/>              comment% = FALSE<br/>            ENDIF<br/>          ELSE<br/>            test% = INSTR(A$, start$)<br/>            IF test% THEN<br/>              BPUT#outfile%, LEFT$(A$, test%-1);<br/>              A$ = MID$(A$, test% + LEN(start$))<br/>              comment% = TRUE<br/>            ENDIF<br/>          ENDIF<br/>        UNTIL test%=0<br/>        IF NOT comment% BPUT#outfile%, A$<br/>      ENDWHILE<br/>\u00a0<br/>      CLOSE #infile%<br/>      CLOSE #outfile%<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 53, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ca <span class=\"sy0\">=</span> <span class=\"st0\">\"/*\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>cb <span class=\"sy0\">=</span> <span class=\"st0\">\"*/\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> al <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> bl <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>loadfile<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>fn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    FILE <span class=\"sy0\">*</span>f <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>fn<span class=\"sy0\">,</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> l<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fseek.html\"><span class=\"kw3\">fseek</span></a><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> SEEK_END<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ftell.html\"><span class=\"kw3\">ftell</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rewind.html\"><span class=\"kw3\">rewind</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> stripcomments<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strstr.html\"><span class=\"kw3\">strstr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> ca<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tb <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strstr.html\"><span class=\"kw3\">strstr</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>al<span class=\"sy0\">,</span> cb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\tb <span class=\"sy0\">+=</span> bl<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> len<span class=\"sy0\">-</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>fn <span class=\"sy0\">=</span> <span class=\"st0\">\"input.txt\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\tfn <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">=</span> loadfile<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tal <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>ca <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tbl <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>cb <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    stripcomments<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt; </span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;boost/regex.hpp&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> codeFile<span class=\"br0\">(</span> <span class=\"st0\">\"samplecode.txt\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> codeFile <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       boost<span class=\"sy4\">::</span><span class=\"me2\">regex</span> commentre<span class=\"br0\">(</span> <span class=\"st0\">\"/<span class=\"es1\">\\\\</span>*.*?<span class=\"es1\">\\\\</span>*/\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><span class=\"co1\">//comment start and end, and as few characters in between as possible</span><br/>       std<span class=\"sy4\">::</span><span class=\"me2\">string</span> my_erase<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span>             <span class=\"co1\">//erase them</span><br/>       std<span class=\"sy4\">::</span><span class=\"me2\">string</span> stripped <span class=\"sy4\">;</span><br/>       std<span class=\"sy4\">::</span><span class=\"me2\">string</span> code<span class=\"br0\">(</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> codeFile <span class=\"br0\">)</span> <span class=\"br0\">)</span> ,<br/>\t     std<span class=\"sy4\">::</span><span class=\"me2\">istreambuf_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>       codeFile.<span class=\"me1\">close</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>       stripped <span class=\"sy1\">=</span> boost<span class=\"sy4\">::</span><span class=\"me2\">regex_replace</span><span class=\"br0\">(</span> code , commentre , my_erase <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Code unstripped:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> stripped <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Could not find code file!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>       <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> BlockCommentStrip<span class=\"br0\">(</span><span class=\"kw4\">string</span> commentStart, <span class=\"kw4\">string</span> commentEnd, <span class=\"kw4\">string</span> sampleText<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sampleText<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>commentStart<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> sampleText<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>commentEnd, sampleText<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>commentStart<span class=\"br0\">)</span> <span class=\"sy0\">+</span> commentStart<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> start <span class=\"sy0\">=</span> sampleText<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>commentStart<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> sampleText<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>commentEnd, start <span class=\"sy0\">+</span> commentStart<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sampleText <span class=\"sy0\">=</span> sampleText<span class=\"sy0\">.</span><span class=\"kw1\">Remove</span><span class=\"br0\">(</span><br/>                    start,<br/>                    <span class=\"br0\">(</span>end <span class=\"sy0\">+</span> commentEnd<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> start<br/>                    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sampleText<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> comment<span class=\"sy0\">-</span>strip <span class=\"br0\">[</span>txt <span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>args <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"br0\">{</span>:<span class=\"me1\">delim</span> <span class=\"br0\">[</span><span class=\"st0\">\"/*\"</span> <span class=\"st0\">\"*/\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">hash-map</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; This is the standard way of doing keyword/optional arguments in Clojure</span><br/>\t<span class=\"br0\">[</span>opener closer<span class=\"br0\">]</span> <span class=\"br0\">(</span>:<span class=\"me1\">delim</span> args<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>out <span class=\"st0\">\"\"</span>, txt txt, delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"co1\">; delim-count is needed to handle nested comments</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>hdtxt resttxt<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">split-at</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> opener<span class=\"br0\">)</span> txt<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">; This splits \"/* blah blah */\" into hdtxt=\"/*\" and restxt=\"blah blah */\"\t</span><br/>\t<span class=\"br0\">(</span>printf <span class=\"st0\">\"hdtxt=%8s resttxt=%8s out=%8s txt=%16s delim-count=%s<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> hdtxt<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> resttxt<span class=\"br0\">)</span> out <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> txt<span class=\"br0\">)</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> hdtxt<span class=\"br0\">)</span>    <span class=\"br0\">(</span><span class=\"kw1\">str</span> out <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> txt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> hdtxt<span class=\"br0\">)</span> opener<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> out resttxt <span class=\"br0\">(</span><span class=\"kw1\">inc</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> hdtxt<span class=\"br0\">)</span> closer<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> out resttxt <span class=\"br0\">(</span><span class=\"kw1\">dec</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"sy0\">=</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> out <span class=\"br0\">(</span><span class=\"kw1\">first</span> txt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> txt<span class=\"br0\">)</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span><br/>\t true             <span class=\"br0\">(</span><span class=\"kw1\">recur</span> out <span class=\"br0\">(</span><span class=\"kw1\">rest</span> txt<span class=\"br0\">)</span> delim<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 89, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> separateComments<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> txt<span class=\"sy0\">,</span><br/>                           <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> cpat0<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> cpat1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> plen<span class=\"sy0\">;</span> <span class=\"co1\">// to handle /*/</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span> <span class=\"co1\">// cursors</span><br/>    <span class=\"kw4\">bool</span> inside<span class=\"sy0\">;</span> <span class=\"co1\">// is inside comment?</span><br/>\u00a0<br/>    <span class=\"co1\">// pre-compute regex here if desired</span><br/>    <span class=\"co1\">//auto r0 = regex(cpat0);</span><br/>    <span class=\"co1\">//auto r1 = regex(cpat1);</span><br/>    <span class=\"co1\">//enum rct = ctRegex!(r\"\\n|\\r\");</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> advCursor<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> mo <span class=\"sy0\">=</span> match<span class=\"br0\">(</span>txt<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> inside <span class=\"sy0\">?</span> cpat1 <span class=\"sy0\">:</span> cpat0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mo.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        plen<span class=\"br0\">[</span>inside<span class=\"br0\">]</span> <span class=\"sy0\">=</span> max<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> plen<span class=\"br0\">[</span>inside<span class=\"br0\">]</span><span class=\"sy0\">,</span> mo.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> mo.<span class=\"me1\">pre</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// got comment head</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">)</span><br/>            j <span class=\"sy0\">+=</span> mo.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"co1\">// or comment tail</span><br/>\u00a0<br/>        <span class=\"co1\">// special adjust for \\n\\r</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>match<span class=\"br0\">(</span>mo.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co4\">r\"\\n|\\r\"</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            j<span class=\"sy0\">--;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>advCursor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        result<span class=\"br0\">[</span>inside<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> txt<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> <span class=\"me1\">j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// save slice of result</span><br/>\u00a0<br/>        <span class=\"co1\">// handle /*/ pattern</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> i <span class=\"sy0\">&lt;</span> plen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> plen<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>advCursor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>inside<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> txt<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> <span class=\"me1\">j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// save result again</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        i <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span> <span class=\"co1\">// advance cursor</span><br/>        inside <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>inside<span class=\"sy0\">;</span> <span class=\"co1\">// toggle search type</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inside<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Mismatched Comment\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result<span class=\"br0\">[</span>inside<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> txt<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// save rest(non-comment)</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> showResults<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> e<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> pair<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"===Original text:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>===Text without comments:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>===The stripped comments:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// First example ------------------------------</span><br/>    <span class=\"kw4\">immutable</span> ex1 <span class=\"sy0\">=</span> <span class=\"st_h\">`  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo<br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }`</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    showResults<span class=\"br0\">(</span>ex1<span class=\"sy0\">,</span> separateComments<span class=\"br0\">(</span>ex1<span class=\"sy0\">,</span> <span class=\"st_h\">`/\\*`</span><span class=\"sy0\">,</span> <span class=\"st_h\">`\\*/`</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Second example ------------------------------</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> ex2 <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears # and bananas<br/>apples, pears; and bananas \"</span><span class=\"sy0\">;</span>  <span class=\"co1\">// test for line comment</span><br/>\u00a0<br/>    showResults<span class=\"br0\">(</span>ex2<span class=\"sy0\">,</span> separateComments<span class=\"br0\">(</span>ex2<span class=\"sy0\">,</span> <span class=\"st_h\">`#|;`</span><span class=\"sy0\">,</span> <span class=\"st_h\">`[\\n\\r]|$`</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Fortran", "loc": 85, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> UNBLOCK<span class=\"br0\">(</span>THIS,THAT<span class=\"br0\">)</span>\t<span class=\"co1\">!Removes block comments bounded by THIS and THAT.</span><br/><span class=\"co1\">Copies from file INF to file OUT, record by record, except skipping null output records.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> THIS,THAT\t<span class=\"co1\">!Starting and ending markers.</span><br/>       <span class=\"kw3\">INTEGER</span> LOTS\t\t\t<span class=\"co1\">!How long is a piece of string?</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LOTS <span class=\"sy0\">=</span> <span class=\"nu0\">6666</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!This should do.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>LOTS<span class=\"br0\">)</span> ACARD,ALINE\t<span class=\"co1\">!Scratchpads.</span><br/>       <span class=\"kw3\">INTEGER</span> LC,LL,L\t\t<span class=\"co1\">!Lengths.</span><br/>       <span class=\"kw3\">INTEGER</span> L1,L2\t\t<span class=\"co1\">!Scan fingers.</span><br/>       <span class=\"kw3\">INTEGER</span> NC,NL\t\t<span class=\"co1\">!Might as well count records read and written.</span><br/>       <span class=\"kw3\">LOGICAL</span> BLAH\t\t<span class=\"co1\">!A state: in or out of a block comment.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD,INF,<span class=\"kw3\">OUT</span>\t\t<span class=\"co1\">!I/O unit numbers.</span><br/>       <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span>MSG,KBD,INF,<span class=\"kw3\">OUT</span>\t<span class=\"co1\">!Thus.</span><br/>        NC <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No cards read in.</span><br/>        NL <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No lines written out.</span><br/>        BLAH <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!And we're not within a comment.</span><br/><span class=\"co1\">Chug through the input.</span><br/>   <span class=\"nu0\">10</span>   READ<span class=\"br0\">(</span>INF,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> LC,ACARD<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">MIN</span><span class=\"br0\">(</span>LC,LOTS<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yum.</span><br/>   <span class=\"nu0\">11</span>   FORMAT <span class=\"br0\">(</span>Q,A<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Sez: how much remains (Q), then, characters (A).</span><br/>        NC <span class=\"sy0\">=</span> NC <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!A card has been read.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LC.<span class=\"me1\">GT</span>.<span class=\"me1\">LOTS</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Paranoia.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">12</span><span class=\"br0\">)</span> NC,LC,LOTS\t<span class=\"co1\">!Scream.</span><br/>   <span class=\"nu0\">12</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Record \"</span>,I0,<span class=\"st0\">\" has length \"</span>,I0,<span class=\"st0\">\"! My limit is \"</span>,I0<span class=\"br0\">)</span><br/>          LC <span class=\"sy0\">=</span> LOTS\t\t\t<span class=\"co1\">!Stay calm, and carry on.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!None of this should happen.</span><br/><span class=\"co1\">Chew through ACARD according to mood.</span><br/>        LL <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No output yet.</span><br/>        L2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Syncopation. Where the previous sniff ended.</span><br/>   <span class=\"nu0\">20</span>   L1 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!The start of what we're looking at.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L1.<span class=\"me1\">LE</span>.<span class=\"me1\">LC</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Anything left?</span><br/>          L2 <span class=\"sy0\">=</span> L1\t\t<span class=\"co1\">!Yes. This is the probe.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>BLAH<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!So, what's our mood?</span><br/>   <span class=\"nu0\">21</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THAT<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">LE</span>.</span> LC<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!We're skipping stuff.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ACARD<span class=\"br0\">(</span>L2<span class=\"sy0\">:</span>L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THAT<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">THAT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!An ender yet?</span><br/>                BLAH <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t\t<span class=\"co1\">!Yes!</span><br/>                L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THAT<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Finger its final character.</span><br/>                <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span>\t\t<span class=\"co1\">!And start a new advance.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!But if that wasn't an ender,</span><br/>              L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Advance one.</span><br/>              <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">21</span>\t\t<span class=\"co1\">!And try again.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t<span class=\"co1\">!By here, insufficient text remains to match THAT, so we're finished with ACARD.</span><br/>           <span class=\"kw1\">ELSE</span>\t\t<span class=\"co1\">!Otherwise, if we're not in a comment, we're looking at grist.</span><br/>   <span class=\"nu0\">22</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THIS<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">LE</span>.</span> LC<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Enough text to match a comment starter?</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ACARD<span class=\"br0\">(</span>L2<span class=\"sy0\">:</span>L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THIS<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">THIS</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Yes. Does it?</span><br/>                BLAH <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t<span class=\"co1\">!Yes!</span><br/>                L <span class=\"sy0\">=</span> L2 <span class=\"sy0\">-</span> L1\t\t<span class=\"co1\">!Recalling where this state started.</span><br/>                ALINE<span class=\"br0\">(</span>LL <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>LL <span class=\"sy0\">+</span> L<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ACARD<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>L2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Copy the non-BLAH text.</span><br/>                LL <span class=\"sy0\">=</span> LL <span class=\"sy0\">+</span> L\t\t<span class=\"co1\">!L2 fingers the first of THIS.</span><br/>                L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"kw4\">LEN</span><span class=\"br0\">(</span>THIS<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Finger the last matching THIS.</span><br/>                <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span>\t\t<span class=\"co1\">!And resume.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!But if that wasn't a comment starter,</span><br/>              L2 <span class=\"sy0\">=</span> L2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Advance one.</span><br/>              <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">22</span>\t\t<span class=\"co1\">!And try again.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t<span class=\"co1\">!But if there remains insufficient to match THIS</span><br/>            L <span class=\"sy0\">=</span> LC <span class=\"sy0\">-</span> L1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Then the remainder of the line is grist.</span><br/>            ALINE<span class=\"br0\">(</span>LL <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>LL <span class=\"sy0\">+</span> L<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ACARD<span class=\"br0\">(</span>L1<span class=\"sy0\">:</span>LC<span class=\"br0\">)</span>\t<span class=\"co1\">!So grab it.</span><br/>            LL <span class=\"sy0\">=</span> LL <span class=\"sy0\">+</span> L\t\t<span class=\"co1\">!And count it in.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t<span class=\"co1\">!By here, we're finished witrh ACARD.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t<span class=\"co1\">!So much for ACARD.</span><br/><span class=\"co1\">Cast forth some output.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LL.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!If there is any.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,<span class=\"nu0\">23</span><span class=\"br0\">)</span> ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>LL<span class=\"br0\">)</span>\t<span class=\"co1\">!There is.</span><br/>   <span class=\"nu0\">23</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span> \t\t<span class=\"co1\">!Just text, but with added bounds.</span><br/>          NL <span class=\"sy0\">=</span> NL <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Count a line.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>        \t\t<span class=\"co1\">!So much for output.</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Perhaps there is some more input.</span><br/><span class=\"co1\">Completed.</span><br/>  <span class=\"nu0\">100</span>   WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">101</span><span class=\"br0\">)</span> NC,NL\t<span class=\"co1\">!Be polite.</span><br/>  <span class=\"nu0\">101</span>   FORMAT <span class=\"br0\">(</span>I0,<span class=\"st0\">\" read, \"</span>,I0,<span class=\"st0\">\" written.\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span>       <span class=\"co1\">!No attention to context, such as quoted strings.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> TEST<br/>      <span class=\"kw3\">INTEGER</span> MSG,KBD,INF,<span class=\"kw3\">OUT</span><br/>      <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IODEV<span class=\"sy0\">/</span>MSG,KBD,INF,<span class=\"kw3\">OUT</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/>      INF <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>      <span class=\"kw3\">OUT</span> <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><br/>      OPEN <span class=\"br0\">(</span>INF,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"Source.txt\"</span>,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READ\"</span><span class=\"br0\">)</span><br/>      OPEN <span class=\"br0\">(</span><span class=\"kw3\">OUT</span>,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"Src.txt\"</span>,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"REPLACE\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"WRITE\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> UNBLOCK<span class=\"br0\">(</span><span class=\"st0\">\"/*\"</span>,<span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!All open files are closed on exit..</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 43, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/>\u00a0<br/><span class=\"kw1\">let</span> balancedComments opening closing <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">new</span> Regex<span class=\"br0\">(</span><br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>{0}                       # An outer opening delimiter<br/>    (?&gt;                   # efficiency: no backtracking here<br/>        {0} (?&lt;LEVEL&gt;)    # An opening delimiter, one level down<br/>        | <br/>        {1} (?&lt;-LEVEL&gt;)   # A closing delimiter, one level up<br/>        |<br/>        (?! {0} | {1} ) . # With negative lookahead: Anything but delimiters<br/>    )*                    # As many times as we see these<br/>    (?(LEVEL)(?!))        # Fail, unless on level 0 here<br/>{1}                       # Outer closing delimiter<br/>\"</span><span class=\"st0\">\"\"</span>, Regex.<span class=\"me1\">Escape</span><span class=\"br0\">(</span>opening<span class=\"br0\">)</span>, Regex.<span class=\"me1\">Escape</span><span class=\"br0\">(</span>closing<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        RegexOptions.<span class=\"me1\">IgnorePatternWhitespace</span> <span class=\"sy0\">|||</span> RegexOptions.<span class=\"me1\">Singleline</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> sample <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>    /**<br/>    * Some comments<br/>    * longer comments here that we can parse.<br/>    *<br/>    * Rahoo <br/>    */<br/>    function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>    }<br/>    /*/ &lt;-- tricky comments */<br/>\u00a0<br/>    /**<br/>    * Another comment.<br/>    * /* nested balanced<br/>    */ */<br/>    function something() {<br/>    }<br/>    \"</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">let</span> balancedC <span class=\"sy0\">=</span> balancedComments <span class=\"st0\">\"/*\"</span> <span class=\"st0\">\"*/\"</span><br/>    printfn <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span>balancedC.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>sample, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Go", "loc": 54, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// idiomatic to name a function newX that allocates an object, initializes it,</span><br/><span class=\"co1\">// and returns it ready to use.  the object in this case is a closure.</span><br/><span class=\"kw4\">func</span> newStripper<span class=\"sy1\">(</span>start<span class=\"sy1\">,</span> end <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// default to c-style block comments</span><br/>    <span class=\"kw1\">if</span> start <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy3\">||</span> end <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        start<span class=\"sy1\">,</span> end <span class=\"sy2\">=</span> <span class=\"st0\">\"/*\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"*/\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// closes on variables start, end.</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>source <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            cs <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>source<span class=\"sy1\">,</span> start<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> cs &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            ce <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>source<span class=\"sy1\">[</span>cs<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">:],</span> end<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> ce &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            source <span class=\"sy2\">=</span> source<span class=\"sy1\">[:</span>cs<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> source<span class=\"sy1\">[</span>cs<span class=\"sy3\">+</span>ce<span class=\"sy3\">+</span><span class=\"nu0\">4</span><span class=\"sy1\">:]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> source<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// idiomatic is that zero values indicate to use meaningful defaults</span><br/>    stripC <span class=\"sy2\">:=</span> newStripper<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// strip function now defined and can be called any number of times</span><br/>    <span class=\"co1\">// without respecifying delimiters</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>stripC<span class=\"sy1\">(</span><span class=\"co2\">`  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo<br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }`</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 20, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> code <span class=\"sy0\">=</span> <span class=\"st0\">\"\"\"<br/>  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo<br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }<br/>\"\"\"</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>code <span class=\"sy0\">=</span>~ <span class=\"st0\">\"(?:/<span class=\"es0\">\\\\</span>*(?:[^*]|(?:<span class=\"es0\">\\\\</span>*+[^*/]))*<span class=\"es0\">\\\\</span>*+/)|(?://.*)\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">test <span class=\"sy0\">=</span> <span class=\"st0\">\"This {- is not the beginning of a block comment\"</span> <span class=\"co1\">-- Do your homework properly -}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>unstripped <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>   <span class=\"co1\"># Load file as one string</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>stripBlockComment<span class=\"br0\">(</span>unstripped<span class=\"sy1\">,</span><span class=\"st0\">\"/*\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> stripBlockComment<span class=\"br0\">(</span>s1<span class=\"sy1\">,</span>s2<span class=\"sy1\">,</span>s3<span class=\"br0\">)</span>  <span class=\"co1\">#: strip comments between s2-s3 from s1</span><br/>   result <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   s1 <span class=\"sy1\">?</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span> result <span class=\"sy1\">||:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>         <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>s2<span class=\"br0\">)</span><br/>         <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>   <span class=\"co1\"># or end of string </span><br/>         <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>s3<span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> result <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">strip=:#~<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">_1</span>*./@:<span class=\"sy0\">(</span>|.\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span><span class=\"nu0\">2</span>&gt;<span class=\"nu0\">4</span>{\"<span class=\"nu0\">1</span><span class=\"sy0\">(</span><span class=\"nu0\">5</span>;<span class=\"sy0\">(</span><span class=\"nu0\">0</span>,\"<span class=\"nu0\">0</span>~\".;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><span class=\"sy0\">)</span>;<span class=\"st_h\">'/*'</span>i.a.<span class=\"sy0\">)</span>&amp;;:<br/>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span><br/>  <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><br/>  <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 50, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StripBlockComments<span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> readFile<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> reader <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t    StringBuilder fileContents <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> buffer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>reader.<span class=\"me1\">read</span><span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span>, <span class=\"nu0\">4096</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tfileContents.<span class=\"me1\">append</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">return</span> fileContents.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">finally</span> <span class=\"br0\">{</span><br/>\t    reader.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> stripComments<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> beginToken, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> endToken,<br/>\t\t\t\t       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tStringBuilder output <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> begin <span class=\"sy0\">=</span> input.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>beginToken<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> input.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>endToken, begin<span class=\"sy0\">+</span>beginToken.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>begin <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> end <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\toutput.<span class=\"me1\">append</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> output.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    output.<span class=\"me1\">append</span><span class=\"br0\">(</span>input.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, begin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    input <span class=\"sy0\">=</span> input.<span class=\"me1\">substring</span><span class=\"br0\">(</span>end <span class=\"sy0\">+</span> endToken.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: BeginToken EndToken FileToProcess\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> begin <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> end <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>stripComments<span class=\"br0\">(</span>begin, end, readFile<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">def strip_block_comments(open; close):<br/>  def deregex:<br/>    reduce (\"\\\\\\\\\", \"\\\\*\", \"\\\\^\", \"\\\\?\", \"\\\\+\", \"\\\\.\", <br/>            \"\\\\!\", \"\\\\{\", \"\\\\}\", \"\\\\[\", \"\\\\]\", \"\\\\$\", \"\\\\|\" ) as $c<br/>      (.; gsub($c; $c));<br/>  # \"?\" =&gt; reluctant, \"m\" =&gt; multiline<br/>  gsub( (open|deregex) + \".*?\" + (close|deregex); \"\"; \"m\")\u00a0;<br/>\u00a0<br/>strip_block_comments(\"/*\"; \"*/\")</pre>"}, {"lang": "Julia", "loc": 75, "block": "<pre class=\"text highlighted_source\">function _stripcomments(txt::AbstractString, dlm::Tuple{String,String})<br/>    \"Strips first nest of block comments\"<br/>\u00a0<br/>    dlml, dlmr = dlm<br/>    indx = searchindex(txt, dlml)<br/>    if indx &gt; 0<br/>        out = IOBuffer()<br/>        write(out, txt[1:indx-1])<br/>        txt = txt[indx+length(dlml):end]<br/>        txt = _stripcomments(txt, dlm)<br/>        indx = searchindex(txt, dlmr)<br/>        @assert(indx &gt; 0, \"cannot find a closer delimiter \\\"$dlmr\\\" in $txt\")<br/>        write(out, txt[indx+length(dlmr):end])<br/>    else<br/>        out = txt<br/>    end<br/>    return String(out)<br/>end<br/>\u00a0<br/>function stripcomments(txt::AbstractString, dlm::Tuple{String,String}=(\"/*\", \"*/\"))<br/>    \"Strips nests of block comments\"<br/>\u00a0<br/>    dlml, dlmr = dlm<br/>    while contains(txt, dlml)<br/>        txt = _stripcomments(txt, dlm)<br/>    end<br/>\u00a0<br/>    return txt<br/>end<br/>\u00a0<br/>function main()<br/>    println(\"\\nNON-NESTED BLOCK COMMENT EXAMPLE:\")<br/>    smpl = \"\"\"<br/>/**<br/>* Some comments<br/>* longer comments here that we can parse.<br/>*<br/>* Rahoo<br/>*/<br/>function subroutine() {<br/>a = /* inline comment */ b + c\u00a0;<br/>}<br/>/*/ &lt;-- tricky comments */<br/>\u00a0<br/>/**<br/>* Another comment.<br/>*/<br/>function something() {<br/>}<br/>\"\"\"<br/>    println(stripcomments(smpl))<br/>\u00a0<br/>    println(\"\\nNESTED BLOCK COMMENT EXAMPLE:\")<br/>    smpl = \"\"\"<br/>/**<br/>* Some comments<br/>* longer comments here that we can parse.<br/>*<br/>* Rahoo<br/>*//*<br/>function subroutine() {<br/>a = /* inline comment */ b + c\u00a0;<br/>}<br/>/*/ &lt;-- tricky comments */<br/>*/<br/>/**<br/>* Another comment.<br/>*/<br/>function something() {<br/>}<br/>\"\"\"<br/>    println(stripcomments(smpl))<br/>end<br/>\u00a0<br/>main()</pre>"}, {"lang": "Kotlin", "loc": 51, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sample <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>/**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }<br/>\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sample2 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>``{<br/>   ` Some comments<br/>   ` longer comments here that we can parse.<br/>   `<br/>   ` Rahoo <br/>   ``}<br/>   function subroutine2() {<br/>    d = ``{ inline comment ``} e + f\u00a0;<br/>   }<br/>   ``{ / &lt;-- tricky comments ``}<br/>\u00a0<br/>   ``{<br/>    ` Another comment.<br/>    ``}<br/>    function something2() {<br/>    }<br/>\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>fun stripBlockComments<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String, del1<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"/*\"</span>, del2<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d1 <span class=\"sy0\">=</span> Regex.<span class=\"me1\">escape</span><span class=\"br0\">(</span>del1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d2 <span class=\"sy0\">=</span> Regex.<span class=\"me1\">escape</span><span class=\"br0\">(</span>del2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"(?s)$d1.*?$d2\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> text.<span class=\"me1\">replace</span><span class=\"br0\">(</span>r, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>stripBlockComments<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>stripBlockComments<span class=\"br0\">(</span>sample2, <span class=\"st0\">\"``{\"</span>, <span class=\"st0\">\"``}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 45, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">global</span> CRLF$<br/>CRLF$ <span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>sample$ <span class=\"sy0\">=</span><span class=\"st0\">\"  /**\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   * Some comments\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   * longer comments here that we can parse.\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   *\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   * Rahoo \"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   */\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   function subroutine() {\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"    a = /* inline comment */ b + c\u00a0;\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   }\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   /*/ &lt;-- tricky comments */\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"   /**\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"    * Another comment.\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"    */\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"    function something() {\"</span><span class=\"sy0\">+</span>CRLF$<span class=\"sy0\">+</span>_<br/><span class=\"st0\">\"    }\"</span><span class=\"sy0\">+</span>CRLF$<br/>\u00a0<br/>startDelim$  <span class=\"sy0\">=</span><span class=\"st0\">\"/*\"</span><br/>finishDelim$ <span class=\"sy0\">=</span><span class=\"st0\">\"*/\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"________________________________\"</span><br/><span class=\"kw1\">print</span> sample$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"________________________________\"</span><br/><span class=\"kw1\">print</span> blockStripped$<span class=\"br0\">(</span> sample$<span class=\"sy0\">,</span> startDelim$<span class=\"sy0\">,</span> finishDelim$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"________________________________\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> blockStripped$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> s$<span class=\"sy0\">,</span> f$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> in$<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> s$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> s$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>s$ <span class=\"kw1\">then</span><br/>            i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> s$<span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>CRLF$ <span class=\"kw1\">then</span> blockStripped$ <span class=\"sy0\">=</span>blockStripped$ <span class=\"sy0\">+</span>CRLF$<br/>                i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> f$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>f$<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span> i <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> in$<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> f$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> f$<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            blockStripped$ <span class=\"sy0\">=</span>blockStripped$ <span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> i<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lua", "loc": 8, "block": "<pre class=\"lua highlighted_source\">filename <span class=\"sy0\">=</span> <span class=\"st0\">\"Text1.txt\"</span><br/>\u00a0<br/>fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> filename<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span> <span class=\"br0\">)</span><br/>str <span class=\"sy0\">=</span> fp<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span> <span class=\"st0\">\"*all\"</span> <span class=\"br0\">)</span><br/>fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>stripped <span class=\"sy0\">=</span> <span class=\"kw3\">string.gsub</span><span class=\"br0\">(</span> str<span class=\"sy0\">,</span> <span class=\"st0\">\"/%*.-%*/\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> stripped <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">StringReplace[a,\"/*\"~~Shortest[___]~~\"*/\" -&gt; \"\"]<br/>\u00a0<br/>-&gt; <br/>   function subroutine() {<br/>    a =  b + c\u00a0;<br/>   }<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    function something() {<br/>    }</pre>"}, {"lang": "MATLAB / Octave", "loc": 13, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> str = stripblockcomment<span class=\"br0\">(</span>str,startmarker,endmarker<span class=\"br0\">)</span> <br/>   <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>      ix1 = strfind<span class=\"br0\">(</span>str, startmarker<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span>ix1<span class=\"br0\">)</span> <span class=\"kw1\">return</span>; <span class=\"kw1\">end</span>;<br/>      ix2 = strfind<span class=\"br0\">(</span>str<span class=\"br0\">(</span>ix1+<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>startmarker<span class=\"br0\">)</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span>,endmarker<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span>ix2<span class=\"br0\">)</span> <br/>         str = str<span class=\"br0\">(</span><span class=\"nu0\">1</span>:ix1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">return</span>;<br/>      <span class=\"kw1\">else</span><br/>         str = <span class=\"br0\">[</span>str<span class=\"br0\">(</span><span class=\"nu0\">1</span>:ix1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>,str<span class=\"br0\">(</span>ix1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>+ix2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>+<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>endmarker<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>      <span class=\"kw1\">end</span>; <br/>   <span class=\"kw1\">end</span>;\t<br/><span class=\"kw1\">end</span>;</pre>"}, {"lang": "Nim", "loc": 48, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc commentStripper(txt; delim: tuple[l,r: string] = (\"/*\", \"*/\")): string =<br/>  let i = txt.find(delim.l)<br/>  if i &lt; 0:<br/>    return txt<br/>\u00a0<br/>  result = if i &gt; 0: txt[0 .. &lt;i] else: \"\"<br/>  let tmp = commentStripper(txt[i+delim.l.len .. txt.high])<br/>  let j = tmp.find(delim.r)<br/>  assert j &gt;= 0<br/>  result &amp;= tmp[j+delim.r.len .. tmp.high]<br/>\u00a0<br/>echo \"NON-NESTED BLOCK COMMENT EXAMPLE:\"<br/>echo commentStripper(\"\"\"/**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }\"\"\")<br/>\u00a0<br/>echo \"\\nNESTED BLOCK COMMENT EXAMPLE:\"<br/>echo commentStripper(\"\"\"  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   *//*<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>   */<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }\"\"\")</pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w </span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a><span class=\"br0\">(</span> FH <span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"sy0\">,</span> <span class=\"st0\">\"samplecode.txt\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't open file!$!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"co5\">$/</span> <span class=\"sy0\">;</span><br/>   <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;FH&gt;</span> <span class=\"sy0\">;</span> <span class=\"co1\">#slurp mode</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> FH <span class=\"sy0\">;</span><br/><span class=\"re0\">$code</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">,/</span>\\<span class=\"sy0\">*.*?</span>\\<span class=\"sy0\">*/,,</span>sg <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$code</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\">sample<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st_h\">'/*'</span> <span class=\"sy0\">.+?</span> <span class=\"st_h\">'*/'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sample <span class=\"br0\">{</span><br/><span class=\"st_h\">'   /**<br/>    * Some comments<br/>    * longer comments here that we can parse.<br/>    *<br/>    * Rahoo<br/>    */<br/>    function subroutine() {<br/>     a = /* inline comment */ b + c\u00a0;<br/>    }<br/>    /*/ &lt;-- tricky comments */<br/>\u00a0<br/>    /**<br/>     * Another comment.<br/>     */<br/>    function something() {<br/>    }<br/>'</span><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 34, "block": "<pre class=\"text highlighted_source\">constant test = \"\"\"<br/>  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }<br/>\"\"\"<br/>\u00a0<br/>function strip_comments(string text, startc=\"/*\", endc=\"*/\")<br/>    while 1 do<br/>        integer startp = match(startc,text)<br/>        if startp=0 then exit end if<br/>        integer endp = match(endc,text,startp+length(startc))<br/>        if endp=0 then<br/>            puts(1,\"error, aborting...\")<br/>            abort(0)<br/>        end if<br/>        text[startp..endp+length(endc)-1] = \"\"<br/>    end while<br/>    return text<br/>end function<br/>\u00a0<br/>puts(1,strip_comments(test))</pre>"}, {"lang": "PHP", "loc": 25, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> strip_block_comments<span class=\"br0\">(</span> <span class=\"re0\">$test_string</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$pattern</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"/^.*?(\\K\\/\\*.*?\\*\\/)|^.*?(\\K\\/\\*.*?^.*\\*\\/)$/mXus\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.php.net/preg_replace\"><span class=\"kw3\">preg_replace</span></a><span class=\"br0\">(</span> <span class=\"re0\">$pattern</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$test_string</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Result: '\"</span> <span class=\"sy0\">.</span> strip_block_comments<span class=\"br0\">(</span> <span class=\"st0\">\"<br/>/**<br/> * Some comments<br/> * longer comments here that we can parse.<br/> *<br/> * Rahoo <br/> */<br/> function subroutine() {<br/>  a = /* inline comment */ b + c\u00a0;<br/> }<br/> /*/ &lt;-- tricky comments */<br/>\u00a0<br/> /**<br/>  * Another comment.<br/>  */<br/>  function something() {<br/>  }<br/>\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"'\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(in \"sample.txt\"<br/>   (while (echo \"/*\")<br/>      (out \"/dev/null\" (echo \"*/\")) ) )</pre>"}, {"lang": "PL/I", "loc": 34, "block": "<pre class=\"text highlighted_source\">/* A program to remove comments from text. */<br/>strip: procedure options (main);                   /* 8/1/2011 */<br/>   declare text character (80) varying;<br/>   declare (j, k) fixed binary;<br/>\u00a0<br/>   on endfile (sysin) stop;<br/>\u00a0<br/>   do forever;<br/>      get edit (text) (L);<br/>      do until (k = 0);<br/>         k = index(text, '/*');<br/>         if k &gt; 0 then /* we have a start of comment. */<br/>            do;<br/>               /* Look for end of comment. */<br/>               j = index(text, '*/', k+2);<br/>               if j &gt; 0 then<br/>                  do;<br/>                     text = substr(text, 1, k-1) ||<br/>                            substr(text, j+2, length(text)-(j+2)+1);<br/>                  end;<br/>               else<br/>                  do; /* The comment continues onto the next line. */<br/>                     put skip list ( substr(text, 1, k-1) );<br/>more:                get edit (text) (L);<br/>                     j = index(text, '*/');<br/>                     if j = 0 then do; put skip; go to more; end;<br/>                     text = substr(text, j+2, length(text) - (j+2) + 1);<br/>                  end;<br/>            end;<br/>      end;<br/>      put skip list (text);<br/>   end;<br/>\u00a0<br/>end strip;</pre>"}, {"lang": "PureBasic", "loc": 51, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s escapeChars<span class=\"br0\">(</span>text.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> specialChars.s <span class=\"sy0\">=</span> <span class=\"st0\">\"[\\^$.|?*+()\"</span><br/>  <span class=\"kw1\">Protected</span> output.s, nextChar.s, i, countChar <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> countChar<br/>    nextChar <span class=\"sy0\">=</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>text, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>specialChars, nextChar, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      output <span class=\"sy0\">+</span> <span class=\"st0\">\"\\\"</span> <span class=\"sy0\">+</span> nextChar<br/>    <span class=\"kw1\">Else</span><br/>      output <span class=\"sy0\">+</span> nextChar<br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> output<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s stripBlocks<span class=\"br0\">(</span>text.s, first.s, last.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> delimter_1.s <span class=\"sy0\">=</span> escapeChars<span class=\"br0\">(</span>first<span class=\"br0\">)</span>, delimter_2.s <span class=\"sy0\">=</span> escapeChars<span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> expNum <span class=\"sy0\">=</span> CreateRegularExpression<span class=\"br0\">(</span>#PB_Any, delimter_1 <span class=\"sy0\">+</span> <span class=\"st0\">\".*?\"</span> <span class=\"sy0\">+</span> delimter_2, #PB_RegularExpression_DotAll<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> output.s <span class=\"sy0\">=</span> ReplaceRegularExpression<span class=\"br0\">(</span>expNum, text, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  FreeRegularExpression<span class=\"br0\">(</span>expNum<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> output<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> source.s<br/>source.s <span class=\"sy0\">=</span> <span class=\"st0\">\"  /**\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   * Some comments\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   * longer comments here that we can parse.\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   *\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   * Rahoo \"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   */\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   function subroutine() {\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"    a = /* inline comment */ b + c\u00a0;\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   }\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   /*/ &lt;-- tricky comments */\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"   /**\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"    * Another comment.\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"    */\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"    function something() {\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>source.s <span class=\"sy0\">+</span> <span class=\"st0\">\"    }\"</span> <span class=\"sy0\">+</span> #CRLF$<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"--- source ---\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"--- source with block comments between '/*' and '*/' removed ---\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>stripBlocks<span class=\"br0\">(</span>source, <span class=\"st0\">\"/*\"</span>, <span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"--- source with block comments between '*' and '*' removed ---\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>stripBlocks<span class=\"br0\">(</span>source, <span class=\"st0\">\"*\"</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 24, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> _commentstripper<span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Strips first nest of block comments'</span><br/>\u00a0<br/>    deliml<span class=\"sy0\">,</span> delimr <span class=\"sy0\">=</span> delim<br/>    out <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">if</span> deliml <span class=\"kw1\">in</span> txt:<br/>        indx <span class=\"sy0\">=</span> txt.<span class=\"me1\">index</span><span class=\"br0\">(</span>deliml<span class=\"br0\">)</span><br/>        out +<span class=\"sy0\">=</span> txt<span class=\"br0\">[</span>:indx<span class=\"br0\">]</span><br/>        txt <span class=\"sy0\">=</span> txt<span class=\"br0\">[</span>indx+<span class=\"kw2\">len</span><span class=\"br0\">(</span>deliml<span class=\"br0\">)</span>:<span class=\"br0\">]</span><br/>        txt <span class=\"sy0\">=</span> _commentstripper<span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span><br/>        <span class=\"kw1\">assert</span> delimr <span class=\"kw1\">in</span> txt<span class=\"sy0\">,</span> <span class=\"st0\">'Cannot find closing comment delimiter in '</span> + txt<br/>        indx <span class=\"sy0\">=</span> txt.<span class=\"me1\">index</span><span class=\"br0\">(</span>delimr<span class=\"br0\">)</span><br/>        out +<span class=\"sy0\">=</span> txt<span class=\"br0\">[</span><span class=\"br0\">(</span>indx+<span class=\"kw2\">len</span><span class=\"br0\">(</span>delimr<span class=\"br0\">)</span><span class=\"br0\">)</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span>:<br/>        out <span class=\"sy0\">=</span> txt<br/>    <span class=\"kw1\">return</span> out<br/>\u00a0<br/><span class=\"kw1\">def</span> commentstripper<span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> delim<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"st0\">'/*'</span><span class=\"sy0\">,</span> <span class=\"st0\">'*/'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Strips nests of block comments'</span><br/>\u00a0<br/>    deliml<span class=\"sy0\">,</span> delimr <span class=\"sy0\">=</span> delim<br/>    <span class=\"kw1\">while</span> deliml <span class=\"kw1\">in</span> txt:<br/>        txt <span class=\"sy0\">=</span> _commentstripper<span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> txt</pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang at-exp racket<br/>\u00a0<br/>;; default delimiters (strings -- not regexps)<br/>(define comment-start-str \"/*\")<br/>(define comment-end-str \"*/\")<br/>\u00a0<br/>(define (strip-comments text [rx1 comment-start-str] [rx2 comment-end-str])<br/>  (regexp-replace* (~a (regexp-quote rx1) \".*?\" (regexp-quote rx2))<br/>                   text \"\"))<br/>\u00a0<br/>((compose1 displayln strip-comments)<br/> @~a{/**<br/>      * Some comments<br/>      * longer comments here that we can parse.<br/>      *<br/>      * Rahoo<br/>      */<br/>      function subroutine() {<br/>       a = /* inline comment */ b + c\u00a0;<br/>      }<br/>      /*/ &lt;-- tricky comments */<br/>\u00a0<br/>      /**<br/>       * Another comment.<br/>       */<br/>       function something() {<br/>       }<br/>    })<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 99, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* Split comments<br/>* This program ignores comment delimiters within literal strings<br/>* such as, e.g., in b = \"--' O'Connor's widow --\";<br/>* it does not (yet) take care of -- comments (ignore rest of line)<br/>* also it does not take care of say 667/*yuppers*/</span><span class=\"nu0\">77</span> <span class=\"br0\">(</span>REXX specialty<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>   courtesy GS discussion!<br/><span class=\"sy0\">*</span> 12<span class=\"sy0\">.</span>07<span class=\"sy0\">.</span>2013 Walter Pachl<br/><span class=\"sy0\">**********************************************************************/</span><br/>fid=<span class=\"st0\">'in.txt'</span>                           <span class=\"coMULTI\">/* input text                 */</span><br/>oic=<span class=\"st0\">'oc.txt'</span>; <span class=\"st0\">'erase'</span> oic              <span class=\"coMULTI\">/* will contain comments      */</span><br/>oip=<span class=\"st0\">'op.txt'</span>; <span class=\"st0\">'erase'</span> oip              <span class=\"coMULTI\">/* will contain program parts */</span><br/>oim=<span class=\"st0\">'om.txt'</span>; <span class=\"st0\">'erase'</span> oim              <span class=\"coMULTI\">/* oc.txt merged with op.txt  */</span><br/>cmt=<span class=\"nu0\">0</span>                                  <span class=\"coMULTI\">/* comment nesting            */</span><br/>str=<span class=\"st0\">''</span>                                 <span class=\"coMULTI\">/* ' or \" when in a string    */</span><br/><span class=\"kw1\">Do</span> ri=<span class=\"nu0\">1</span> <span class=\"kw2\">By</span> <span class=\"nu0\">1</span> <span class=\"kw2\">While</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>        <span class=\"coMULTI\">/* loop over input            */</span><br/>  l=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/* an input line              */</span><br/>  oc=<span class=\"st0\">''</span>                                <span class=\"coMULTI\">/* initialize line for oc.txt */</span><br/>  op=<span class=\"st0\">''</span>                                <span class=\"coMULTI\">/* initialize line for op.txt */</span><br/>  i=<span class=\"nu0\">1</span>                                  <span class=\"coMULTI\">/* start at first character   */</span><br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> i<span class=\"sy0\">&lt;</span>=<span class=\"kw6\">length</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span>                <span class=\"coMULTI\">/* loop through input line    */</span><br/>    <span class=\"kw1\">If</span> cmt=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                   <span class=\"coMULTI\">/* we are not in a comment    */</span><br/>      <span class=\"kw1\">If</span> str<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>               <span class=\"coMULTI\">/* we are in a string         */</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>=str <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>   <span class=\"coMULTI\">/* string character           */</span><br/>          <span class=\"kw1\">If</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>=str <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span> <span class=\"coMULTI\">/* another one              */</span><br/>            <span class=\"kw1\">Call</span> app <span class=\"st0\">'P'</span>,<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* add '' or \"\" to op         */</span><br/>            i=i+<span class=\"nu0\">2</span>                      <span class=\"coMULTI\">/* increase input pointer     */</span><br/>            <span class=\"kw1\">Iterate</span>                    <span class=\"coMULTI\">/* proceed in input line      */</span><br/>            <span class=\"kw3\">End</span><br/>          <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span>                      <span class=\"coMULTI\">/* end of literal string      */</span><br/>            <span class=\"kw1\">Call</span> app <span class=\"st0\">'P'</span>,<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* add ' or \" to op           */</span><br/>            str=<span class=\"st0\">' '</span>                    <span class=\"coMULTI\">/* no longer in string        */</span><br/>            i=i+<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* increase input pointer     */</span><br/>            <span class=\"kw1\">Iterate</span>                    <span class=\"coMULTI\">/* proceed in input line      */</span><br/>            <span class=\"kw3\">End</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Select</span><br/>      <span class=\"kw3\">When</span> str=<span class=\"st0\">''</span> <span class=\"sy0\">&amp;</span>,                   <span class=\"coMULTI\">/* not in a string            */</span><br/>           <span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"st0\">'/*'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>  <span class=\"coMULTI\">/* start of comment           */</span><br/>        cmt=cmt+<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* increase commenr nesting   */</span><br/>        <span class=\"kw1\">Call</span> app <span class=\"st0\">'C'</span>,<span class=\"st0\">'/*'</span>              <span class=\"coMULTI\">/* copy to oc                 */</span><br/>        i=i+<span class=\"nu0\">2</span>                          <span class=\"coMULTI\">/* increase input pointer     */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">When</span> cmt=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>               <span class=\"coMULTI\">/* not in a comment           */</span><br/>        <span class=\"kw1\">If</span> str=<span class=\"st0\">' '</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>             <span class=\"coMULTI\">/* not in a string            */</span><br/>          <span class=\"kw1\">If</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"st0\">''</span><span class=\"st0\">'\"'</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"coMULTI\">/* string delimiter     */</span><br/>            str=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/* remember that              */</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw1\">Call</span> app <span class=\"st0\">'P'</span>,<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/* copy to op                 */</span><br/>        i=i+<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* increase input pointer     */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">When</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"st0\">'*/'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>  <span class=\"coMULTI\">/* end of comment             */</span><br/>        cmt=cmt-<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* decrement nesting depth    */</span><br/>        <span class=\"kw1\">Call</span> app <span class=\"st0\">'C'</span>,<span class=\"st0\">'*/'</span>              <span class=\"coMULTI\">/* copy to oc                 */</span><br/>        i=i+<span class=\"nu0\">2</span>                          <span class=\"coMULTI\">/* increase input pointer     */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span>                     <span class=\"coMULTI\">/* any other character        */</span><br/>        <span class=\"kw1\">Call</span> app <span class=\"st0\">'C'</span>,<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/* copy to oc                 */</span><br/>        i=i+<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* increase input pointer     */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Call</span> oc                              <span class=\"coMULTI\">/* Write line oc              */</span><br/>  <span class=\"kw1\">Call</span> op                              <span class=\"coMULTI\">/* Write line op              */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oic                       <span class=\"coMULTI\">/* Close File oic             */</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oip                       <span class=\"coMULTI\">/* Close File oip             */</span><br/>\u00a0<br/><span class=\"kw1\">Do</span> ri=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> ri-<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* merge program with comments*/</span><br/>  op=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>oip<span class=\"br0\">)</span><br/>  oc=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>oic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>oc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>oc,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>      op=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>oc,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,op,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oim,op<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oic<br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oip<br/><span class=\"kw1\">Call</span> <span class=\"kw6\">lineout</span> oim<br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>app: <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> which,string<br/><span class=\"coMULTI\">/* add str to oc or op                                               */</span><br/><span class=\"coMULTI\">/* and corresponding blanks to the other (op or oc)                  */</span><br/><span class=\"kw1\">If</span> which=<span class=\"st0\">'C'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  oc=oc<span class=\"sy0\">||</span>string<br/>  op=op<span class=\"sy0\">||</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>  op=op<span class=\"sy0\">||</span>string<br/>  oc=oc<span class=\"sy0\">||</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>oc: <span class=\"kw1\">Return</span> <span class=\"kw6\">lineout</span><span class=\"br0\">(</span>oic,oc<span class=\"br0\">)</span><br/>op: <span class=\"kw1\">Return</span> <span class=\"kw6\">lineout</span><span class=\"br0\">(</span>oip,op<span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>example = \"123/*456*/abc/*def*/789\"<br/>\u00a0<br/>example2 = example<br/>nr = 1<br/>while nr = 1<br/>      n1 = substr(example2,\"/*\")<br/>      n2 = substr(example2,\"*/\") <br/>      if n1 &gt; 0 and n2 &gt; 0<br/>         example3 = substr(example2,n1,n2-n1+2) <br/>         example2 = substr(example2,example3,\"\")<br/>      else nr = 0 ok<br/>end<br/>see example2 + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 32, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> remove_comments!<span class=\"br0\">(</span>str, comment_start=<span class=\"st0\">'/*'</span>, comment_end=<span class=\"st0\">'*/'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> start_idx = str.<span class=\"me1\">index</span><span class=\"br0\">(</span>comment_start<span class=\"br0\">)</span> <br/>    end_idx = str.<span class=\"me1\">index</span><span class=\"br0\">(</span>comment_end, start_idx <span class=\"sy0\">+</span> comment_start.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> comment_end.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    str<span class=\"br0\">[</span>start_idx .. <span class=\"me1\">end_idx</span><span class=\"br0\">]</span> = <span class=\"st0\">\"\"</span> <br/>  <span class=\"kw1\">end</span><br/>  str<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> remove_comments<span class=\"br0\">(</span>str, comment_start=<span class=\"st0\">'/*'</span>, comment_end=<span class=\"st0\">'*/'</span><span class=\"br0\">)</span><br/>  remove_comments!<span class=\"br0\">(</span>str.<span class=\"me1\">dup</span>, comment_start, comment_end<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>example = <span class=\"co4\">&lt;&lt;END_OF_STRING<br/>  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo <br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }<br/>END_OF_STRING</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> remove_comments example</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">regex</span>.<span class=\"me1\">Pattern</span>.<span class=\"me1\">quote</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> strip1<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> String, s<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"/*\"</span>, e<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"*/\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  x.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"(?s)\"</span>+quote<span class=\"br0\">(</span>s<span class=\"br0\">)</span>+<span class=\"st0\">\".*?\"</span>+quote<span class=\"br0\">(</span>e<span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 24, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const string: stri is \"\\<br/>        \\  /**\\n\\<br/>        \\   * Some comments\\n\\<br/>        \\   * longer comments here that we can parse.\\n\\<br/>        \\   *\\n\\<br/>        \\   * Rahoo\\n\\<br/>        \\   */\\n\\<br/>        \\   function subroutine() {\\n\\<br/>        \\    a = /* inline comment */ b + c\u00a0;\\n\\<br/>        \\   }\\n\\<br/>        \\   /*/ &lt;-- tricky comments */\\n\\<br/>        \\\\n\\<br/>        \\   /**\\n\\<br/>        \\    * Another comment.\\n\\<br/>        \\    */\\n\\<br/>        \\    function something() {\\n\\<br/>        \\    }\";<br/>  begin<br/>    writeln(replace2(stri, \"/*\", \"*/\", \" \"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">func strip_block_comments<span class=\"br0\">(</span>code, beg=<span class=\"st0\">'/*'</span>, <span class=\"kw1\">end</span>=<span class=\"st0\">'*/'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var re = Regex.<span class=\"me1\">new</span><span class=\"br0\">(</span>beg.<span class=\"me1\">escape</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.*?'</span> <span class=\"sy0\">+</span> <span class=\"kw1\">end</span>.<span class=\"me1\">escape</span>, <span class=\"st0\">'s'</span><span class=\"br0\">)</span>;<br/>    code.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span>re, <span class=\"st0\">''</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say strip_block_comments<span class=\"br0\">(</span>ARGF.<span class=\"me1\">slurp</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> stripBlockComment <span class=\"br0\">{</span><span class=\"kw2\">string</span> <span class=\"br0\">{</span>openDelimiter <span class=\"st0\">\"/*\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>closeDelimiter <span class=\"st0\">\"*/\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Convert the delimiters to REs by backslashing all non-alnum characters</span><br/>    <span class=\"kw1\">set</span> openAsRE <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span>\\W<span class=\"br0\">}</span> <span class=\"re0\">$openDelimiter</span> <span class=\"br0\">{</span>\\\\<span class=\"sy0\">&amp;</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> closeAsRE <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span>\\W<span class=\"br0\">}</span> <span class=\"re0\">$closeDelimiter</span> <span class=\"br0\">{</span>\\\\<span class=\"sy0\">&amp;</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># Now remove the blocks using a dynamic non-greedy regular expression</span><br/>    <span class=\"kw2\">regsub</span> -all <span class=\"st0\">\"$openAsRE.*?$closeAsRE\"</span> <span class=\"re0\">$string</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE DATA<br/>$$ script=*<br/>  /**<br/>   * Some comments<br/>   * longer comments here that we can parse.<br/>   *<br/>   * Rahoo<br/>   */<br/>   function subroutine() {<br/>    a = /* inline comment */ b + c\u00a0;<br/>   }<br/>   /*/ &lt;-- tricky comments  */<br/>\u00a0<br/>   /**<br/>    * Another comment.<br/>    */<br/>    function something() {<br/>    }<br/>$$ MODE TUSCRIPT<br/>ERROR/STOP CREATE (\"testfile\",SEQ-E,-std-)<br/>ERROR/STOP CREATE (\"destfile\",SEQ-E,-std-)<br/>FILE \"testfile\" = script<br/>BUILD S_TABLE commentbeg=\":/*:\"<br/>BUILD S_TABLE commentend=\":*/:\"<br/>\u00a0<br/>ACCESS t: READ/STREAM \"testfile\" s.z/u,a/commentbeg+t+e/commentend,typ<br/>ACCESS d: WRITE/STREAM \"destfile\" s.z/u,a+t+e<br/>LOOP<br/>READ/EXIT t<br/>IF (typ==3) CYCLE<br/>t=SQUEEZE(t)<br/>WRITE/ADJUST d<br/>ENDLOOP<br/>ENDACCESS/PRINT t<br/>ENDACCESS/PRINT d<br/>d=FILE(\"destfile\")<br/>TRACE *d<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn stripper(text, a=\"/*\", b=\"*/\"){<br/>   while(xy:=text.span(a,b,True)){ x,y:=xy; text=text[0,x] + text[x+y,*] }<br/>   text<br/>}</pre>"}]}