{"task": "Munchausen_numbers", "blocks": [{"lang": "ALGOL 68", "loc": 39, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Find Munchausen Numbers between 1 and 5000                                        #</span><br/><span class=\"coMULTI\"># note that 6^6 is 46 656 so we only need to consider numbers consisting of 0 to 5   #</span><br/>\u00a0<br/><span class=\"coMULTI\"># table of Nth powers - note 0^0 is 0 for Munchausen numbers, not 1                 #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> nth power <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 2 <span class=\"sy1\">*</span> 2<span class=\"sy1\">,</span> 3 <span class=\"sy1\">*</span> 3 <span class=\"sy1\">*</span> 3<span class=\"sy1\">,</span> 4 <span class=\"sy1\">*</span> 4 <span class=\"sy1\">*</span> 4 <span class=\"sy1\">*</span> 4<span class=\"sy1\">,</span> 5 <span class=\"sy1\">*</span> 5 <span class=\"sy1\">*</span> 5 <span class=\"sy1\">*</span> 5 <span class=\"sy1\">*</span> 5 <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 0 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> d1 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span> <span class=\"kw3\">INT</span> d1 part <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> d2 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span> <span class=\"kw3\">INT</span> d2 part <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> d3 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span> <span class=\"kw3\">INT</span> d3 part <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> d4 <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw2\">WHILE</span> d1 <span class=\"sy1\">&lt;</span> 6 <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">INT</span> number           <span class=\"sy1\">=</span> d1 part <span class=\"sy1\">+</span> d2 part <span class=\"sy1\">+</span> d3 part <span class=\"sy1\">+</span> d4<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> digit power sum <span class=\"sy1\">:=</span> nth power<span class=\"br0\">[</span> d1 <span class=\"br0\">]</span><br/>                         <span class=\"sy1\">+</span> nth power<span class=\"br0\">[</span> d2 <span class=\"br0\">]</span><br/>                         <span class=\"sy1\">+</span> nth power<span class=\"br0\">[</span> d3 <span class=\"br0\">]</span><br/>                         <span class=\"sy1\">+</span> nth power<span class=\"br0\">[</span> d4 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> digit power sum <span class=\"sy1\">=</span> number <span class=\"kw2\">THEN</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    d4 <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> d4 <span class=\"sy1\">&gt;</span> 5 <span class=\"kw2\">THEN</span><br/>        d4       <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        d3      <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        d3 part <span class=\"sy1\">+:=</span> 10<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> d3 <span class=\"sy1\">&gt;</span> 5 <span class=\"kw2\">THEN</span><br/>            d3       <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            d3 part  <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            d2      <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            d2 part <span class=\"sy1\">+:=</span> 100<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> d2 <span class=\"sy1\">&gt;</span> 5 <span class=\"kw2\">THEN</span><br/>                d2       <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                d2 part  <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                d1      <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                d1 part <span class=\"sy1\">+:=</span> 1000<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 43, "block": "<pre class=\"text highlighted_source\">% Find Munchausen Numbers between 1 and 5000                                        \u00a0%<br/>% note that 6^6 is 46 656 so we only need to consider numbers consisting of 0 to 5  \u00a0%<br/>begin<br/>\u00a0<br/>   \u00a0% table of nth Powers - note 0^0 is 0 for Munchausen numbers, not 1             \u00a0%<br/>    integer array nthPower( 0\u00a0:: 5 );<br/>    integer d1, d2, d3, d4, d1Part, d2Part, d3Part;<br/>    nthPower( 0 )\u00a0:= 0;             nthPower( 1 )\u00a0:= 1;<br/>    nthPower( 2 )\u00a0:= 2 * 2;         nthPower( 3 )\u00a0:= 3 * 3 * 3;<br/>    nthPower( 4 )\u00a0:= 4 * 4 * 4 * 4; nthPower( 5 )\u00a0:= 5 * 5 * 5 * 5 * 5;<br/>    d1\u00a0:= d2\u00a0:= d3\u00a0:= d1Part\u00a0:= d2Part\u00a0:= d3Part\u00a0:= 0;<br/>    d4\u00a0:= 1;<br/>    while d1 &lt; 6 do begin<br/>        integer number, digitPowerSum;<br/>        number       \u00a0:= d1Part + d2Part + d3Part + d4;<br/>        digitPowerSum\u00a0:= nthPower( d1 )<br/>                       + nthPower( d2 )<br/>                       + nthPower( d3 )<br/>                       + nthPower( d4 );<br/>        if digitPowerSum = number then begin<br/>            write( i_w\u00a0:= 1, number )<br/>        end;<br/>        d4\u00a0:= d4 + 1;<br/>        if d4 &gt; 5 then begin<br/>            d4    \u00a0:= 0;<br/>            d3    \u00a0:= d3 + 1;<br/>            d3Part\u00a0:= d3Part + 10;<br/>            if d3 &gt; 5 then begin<br/>                d3    \u00a0:= 0;<br/>                d3Part\u00a0:= 0;<br/>                d2    \u00a0:= d2 + 1;<br/>                d2Part\u00a0:= d2Part + 100;<br/>                if d2 &gt; 5 then begin<br/>                    d2    \u00a0:= 0;<br/>                    d2Part\u00a0:= 0;<br/>                    d1    \u00a0:= d1 + 1;<br/>                    d1Part\u00a0:= d1Part + 1000;<br/>                end<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 81, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- MUNCHAUSEN NUMBER\u00a0? -------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- isMunchausen\u00a0:: Int -&gt; Bool</span><br/><span class=\"kw3\">on</span> isMunchausen<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- digitPowerSum\u00a0:: Int -&gt; Character -&gt; Int</span><br/>    <span class=\"kw3\">script</span> digitPowerSum<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, c<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> c <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>            a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>d <span class=\"sy0\">^</span> d<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>class <span class=\"kw3\">of</span> n <span class=\"kw3\">is</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> \u00ac<br/>        foldl<span class=\"br0\">(</span>digitPowerSum, <span class=\"nu0\">0</span>, characters <span class=\"kw3\">of</span> <span class=\"br0\">(</span>n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>\u00a0<br/><span class=\"kw3\">end</span> isMunchausen<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    filter<span class=\"br0\">(</span>isMunchausen, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {1, 3435}</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MUNCHAUSEN_NUMBERS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5000</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        digit = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>i,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy3\">+</span>= digit <span class=\"sy3\">^</span> digit<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">10 DEF FN P(X)=INT(X^X*SGN(X))<br/>20 FOR I=0 TO 5<br/>30 FOR J=0 TO 5<br/>40 FOR K=0 TO 5<br/>50 FOR L=0 TO 5<br/>60 M=FN P(I)+FN P(J)+FN P(K)+FN P(L)<br/>70 N=1000*I+100*J+10*K+L<br/>80 IF M=N AND M&gt;0 THEN PRINT M<br/>90 NEXT L<br/>100 NEXT K<br/>110 NEXT J<br/>120 NEXT I</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">REM &gt;munchausen<br/>FOR i% = 0 TO 5<br/>  FOR j% = 0 TO 5<br/>    FOR k% = 0 TO 5<br/>      FOR l% = 0 TO 5<br/>        m% = FNexp(i%) + FNexp(j%) + FNexp(k%) + FNexp(l%)<br/>        n% = 1000 * i% + 100 * j% + 10 * k% + l%<br/>        IF m% = n% AND m% &gt; 0 THEN PRINT m%<br/>      NEXT<br/>    NEXT<br/>  NEXT<br/>NEXT<br/>END<br/>:<br/>DEF FNexp(x%)<br/>IF x% = 0 THEN<br/>  = 0<br/>ELSE<br/>  = x% ^ x%</pre>"}, {"lang": "C", "loc": 23, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// loop through each digit in i</span><br/>        <span class=\"co1\">// e.g. for 1000 we get 0, 0, 0, 1.</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> number <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> number <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// find the sum of the digits </span><br/>            <span class=\"co1\">// raised to themselves </span><br/>            sum <span class=\"sy0\">+=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>digit<span class=\"sy0\">,</span> digit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// the sum is equal to the number</span><br/>            <span class=\"co1\">// itself; thus it is a </span><br/>            <span class=\"co1\">// munchausen number</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%i<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\">Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> toInt <span class=\"sy0\">=</span> c <span class=\"sy0\">=&gt;</span> c<span class=\"sy0\">-</span><span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5000</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">==</span> n<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>toInt<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, toInt<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 24, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> pwr<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> munch<span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> pwr<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        i <span class=\"sy2\">/</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>        pwr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span>i, <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span>i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Munchausen Numbers<span class=\"es1\">\\n</span>==================<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5000</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy1\">==</span> munch<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 24, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns async-example<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"br0\">[</span>criterium<span class=\"sy0\">.</span>core<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn get-digits <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Convert number of a list of digits  (e.g. 545 -&gt; ((5), (4), (5)) \"</span><br/>  <span class=\"br0\">(</span>map #<span class=\"br0\">(</span><span class=\"kw1\">Integer</span>/valueOf <span class=\"br0\">(</span>str <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>String/valueOf n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn sum-power <span class=\"br0\">[</span>digits<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Convert digits such as abc... to a^a + b^b + c^c ...\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>digits-pwr <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> + </span><span class=\"br0\">(</span>map #<span class=\"br0\">(</span>math/<span class=\"kw1\">expt</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>digits-pwr digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn find-numbers <span class=\"br0\">[</span>max-range<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Filters for Munchausen numbers \"</span><br/>  <span class=\"br0\">(</span>-<span class=\"sy0\">&gt;&gt;</span><br/>    <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc max-range<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum-power <span class=\"br0\">(</span>get-digits <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>find-numbers <span class=\"nu0\">5000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 36, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;;; check4munch maximum &amp;optional b</span><br/><span class=\"co1\">;;; Return a list with all Munchausen numbers less then or equal to maximum.</span><br/><span class=\"co1\">;;; Checks are done in base b (&lt;=10, dpower is the limiting factor here).</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> check4munch <span class=\"br0\">(</span>maximum <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>result <span class=\"kw1\">NIL</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>munchp n base<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n result<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n maximum<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>nreverse result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;;</span><br/><span class=\"co1\">;;; munchp n &amp;optional b</span><br/><span class=\"co1\">;;; Return T if n is a Munchausen number in base b.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> munchp <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'dpower <span class=\"br0\">(</span>n2base n base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> T <span class=\"kw1\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; dpower d</span><br/><span class=\"co1\">;;; Returns d^d. I.e. the digit to the power of itself.</span><br/><span class=\"co1\">;;; 0^0 is set to 0. For discussion see e.g. the wikipedia entry.</span><br/><span class=\"co1\">;;; This function is mainly performance optimization.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dpower <span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">aref</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">27</span> <span class=\"nu0\">256</span> <span class=\"nu0\">3125</span> <span class=\"nu0\">45556</span> <span class=\"nu0\">823543</span> <span class=\"nu0\">16777216</span> <span class=\"nu0\">387420489</span><span class=\"br0\">)</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; divmod a b</span><br/><span class=\"co1\">;;; Return (q,k) such that a = b*q + k and k&gt;=0.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> divmod <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>foo <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- a foo<span class=\"br0\">)</span> b<span class=\"br0\">)</span> foo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; n2base n &amp;optional b</span><br/><span class=\"co1\">;;; Return a list with the digits of n in base b representation.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> n2base <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>digits <span class=\"kw1\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> digits<br/>                <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dm <span class=\"br0\">(</span>divmod n base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>n2base <span class=\"br0\">(</span><span class=\"kw1\">car</span> dm<span class=\"br0\">)</span> base <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> dm<span class=\"br0\">)</span> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">5000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// loop through each digit in i</span><br/>        <span class=\"co1\">// e.g. for 1000 we get 0, 0, 0, 1.</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span> number<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> number<span class=\"sy0\">/=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// find the sum of the digits</span><br/>            <span class=\"co1\">// raised to themselves</span><br/>            sum <span class=\"sy0\">+=</span> digit <span class=\"sy0\">^^</span> digit<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// the sum is equal to the number</span><br/>            <span class=\"co1\">// itself; thus it is a</span><br/>            <span class=\"co1\">// munchausen number</span><br/>            writeln<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule Munchausen do<br/>  @pow  for i &lt;- 0..9, into:\u00a0%{}, do: {i,\u00a0:math.pow(i,i) |&gt; round}<br/>\u00a0<br/>  def number?(n) do<br/>    n == Integer.digits(n) |&gt; Enum.reduce(0, fn d,acc -&gt; @pow[d] + acc end)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..5000, fn i -&gt;<br/>  if Munchausen.number?(i), do: IO.puts i<br/>end)</pre>"}, {"lang": "Factor", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: kernel math.functions math.ranges math.text.utils<br/>prettyprint sequences\u00a0;<br/>IN: rosetta-code.munchausen<br/>\u00a0<br/>: munchausen? ( n --\u00a0? )<br/>    dup 1 digit-groups dup [ ^ ] 2map sum =\u00a0;<br/>\u00a0<br/>: main ( -- ) 5000 [1,b] [ munchausen? ] filter .\u00a0;<br/>\u00a0<br/>MAIN: main<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 32, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/><span class=\"co1\">' Cache n ^ n for the digits 1 to 9</span><br/><span class=\"co1\">' Note than 0 ^ 0 specially treated as 0 (not 1) for this purpose</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> powers<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span> <br/>  <span class=\"kw1\">Dim</span> power <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = i<br/>  <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> i<br/>     power *= i<br/>  <span class=\"kw1\">Next</span> j<br/>  powers<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = power<br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">Function</span> isMunchausen<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Dim</span> p <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = n<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> digit, sum<br/>  <span class=\"kw1\">While</span> p &gt; <span class=\"nu0\">0</span><br/>    digit = p <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">If</span> digit &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> sum += powers<span class=\"br0\">(</span>digit<span class=\"br0\">)</span><br/>    p \\= <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> n = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span>  <br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The Munchausen numbers between 0 and 500000000 are\u00a0: \"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">500000000</span><br/>  <span class=\"kw1\">If</span> isMunchausen<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> i<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/>\u00a0<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> toFloat x <span class=\"sy0\">=</span> x <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">int</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">48</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">float</span><br/><span class=\"kw1\">let</span> power x <span class=\"sy0\">=</span> toFloat x <span class=\"sy0\">**</span> toFloat x <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">int</span><br/><span class=\"kw1\">let</span> isMunchausen n <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> n <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"kw4\">char</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> power <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5000</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> isMunchausen<span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 36, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span><span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> powers <span class=\"sy1\">[</span><span class=\"nu0\">10</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isMunchausen<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>    n64 <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    nn  <span class=\"sy2\">:=</span> n64<br/>    <span class=\"kw1\">var</span> sum <span class=\"kw4\">int64</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> nn &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>powers<span class=\"sy1\">[</span>nn <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> sum &gt; n64 <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>        nn <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> sum <span class=\"sy3\">==</span> n64<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// cache n ^ n for n in 0..9, defining 0 ^ 0 = 0 for this purpose</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        d <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span>  <br/>        powers<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> d<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// check numbers 0 to 500 million</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"The Munchausen numbers between 0 and 500 million are:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">500000000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> isMunchausen<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/>isMunchausen <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isMunchausen n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">^</span>x<span class=\"br0\">)</span> <span class=\"sy0\">$</span> unfoldr digit n <span class=\"kw1\">where</span><br/>  digit <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>  digit n <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>r<span class=\"sy0\">,</span>q<span class=\"br0\">)</span> <span class=\"kw1\">where</span> <span class=\"br0\">(</span>q<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` <span class=\"nu0\">10</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isMunchausen <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5000</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   munch=: +/@<span class=\"sy0\">(</span>^<a class=\"__cf_email__\" data-cfemail=\"3e407e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">10</span>&amp;#.inv<span class=\"sy0\">))</span><br/>   <span class=\"sy0\">(</span>#~ ] = munch\"<span class=\"nu0\">0</span><span class=\"sy0\">)</span> <span class=\"nu0\">1</span>+i.<span class=\"nu0\">5000</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3435</span></pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5000</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> val <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">chars</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span> x<span class=\"sy0\">-</span><span class=\"nu0\">48</span> ,x<span class=\"sy0\">-</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy0\">==</span> val<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\" (munchausen)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">for</span> <span class=\"br0\">(</span>let i of <span class=\"br0\">[</span>...<span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">5000</span><span class=\"br0\">)</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t.<span class=\"me1\">filter</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">==</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\t.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">+</span><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>parseInt<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span>parseInt<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">def sigma( stream ): reduce stream as $x (0; . + $x )\u00a0;<br/>\u00a0<br/>def ismunchausen:<br/>   def digits: tostring | split(\"\")[] | tonumber;<br/>   . == sigma(digits | pow(.;.));<br/>\u00a0<br/># Munchausen numbers from 1 to 5000 inclusive:<br/>range(1;5001) | select(ismunchausen)</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">ismunchausen(n) = sum(d ^ d for d in digits(n)) == n<br/>println(filter(ismunchausen, 1:5000))</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> powers <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun isMunchausen<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> 0L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum +<span class=\"sy0\">=</span> powers<span class=\"br0\">[</span>nn <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> n.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        nn /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum <span class=\"sy0\">==</span> n.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"co1\">// cache n ^ n for n in 0..9, defining 0 ^ 0 = 0 for this purpose</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>i.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, i.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">// check numbers 0 to 500 million</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"The Munchausen numbers between 0 and 500 million are:\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">500000000</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isMunchausen<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>print <span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> isMunchausen <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum<span class=\"sy0\">,</span> nStr<span class=\"sy0\">,</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>nStr <span class=\"kw1\">do</span><br/>        digit <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>nStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> digit <span class=\"sy0\">^</span> digit<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sum <span class=\"sy0\">==</span> n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> isMunchausen<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">Off[Power::indet];(*Supress 0^0 warnings*)<br/>Select[Range[5000], Total[IntegerDigits[#]^IntegerDigits[#]] == # &amp;]</pre>"}, {"lang": "Modula-2", "loc": 46, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> MunchausenNumbers;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"coMULTI\">(* Simple power function, does not handle negatives *)</span><br/><span class=\"kw1\">PROCEDURE</span> Pow<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>e <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> result <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> e<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    result <span class=\"sy0\">:=</span> b;<br/>    <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">WHILE</span> e&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        result <span class=\"sy0\">:=</span> result <span class=\"sy0\">*</span> b;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> result;<br/><span class=\"kw1\">END</span> Pow;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>sum<span class=\"sy0\">,</span>number<span class=\"sy0\">,</span>digit <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5000</span> <span class=\"kw1\">DO</span><br/>        <span class=\"coMULTI\">(* Loop through each digit in i<br/>           e.g. for 1000 we get 0, 0, 0, 1. *)</span><br/>        sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        number <span class=\"sy0\">:=</span> i;<br/>        <span class=\"kw1\">WHILE</span> number&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>            digit <span class=\"sy0\">:=</span> number <span class=\"kw1\">MOD</span> <span class=\"nu0\">10</span>;<br/>            sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> Pow<span class=\"br0\">(</span>digit<span class=\"sy0\">,</span> digit<span class=\"br0\">)</span>;<br/>            number <span class=\"sy0\">:=</span> number <span class=\"kw1\">DIV</span> <span class=\"nu0\">10</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> sum<span class=\"sy0\">=</span>i <span class=\"kw1\">THEN</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar;<br/><span class=\"kw1\">END</span> MunchausenNumbers.</pre>"}, {"lang": "Pascal", "loc": 73, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co2\">{$IFDEF FPC}{$MODE objFPC}{$ELSE}{$APPTYPE CONSOLE}{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tdigit  <span class=\"sy3\">=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  base <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>  maxDigits <span class=\"sy3\">=</span> base<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><span class=\"co1\">// set for 32-compilation otherwise overflow.</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <br/>  DgtPotDgt <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">base</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeUint<span class=\"sy1\">;</span><br/>  cnt<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CheckSameDigits<span class=\"br0\">(</span>n1<span class=\"sy1\">,</span>n2<span class=\"sy1\">:</span>NativeUInt<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  dgtCnt <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">Base</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span> <br/>  i <span class=\"sy1\">:</span> NativeUInt<span class=\"sy1\">;</span>  <br/><span class=\"kw1\">Begin</span><br/>  fillchar<span class=\"br0\">(</span>dgtCnt<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>dgtCnt<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span>   <br/>    <span class=\"co1\">//increment digit of n1 </span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n1<span class=\"sy1\">;</span>n1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n1 <span class=\"kw1\">div</span> base<span class=\"sy1\">;</span>i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span>n1<span class=\"sy3\">*</span>base<span class=\"sy1\">;</span>inc<span class=\"br0\">(</span>dgtCnt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>    <span class=\"co1\">//decrement digit of n2     </span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n2<span class=\"sy1\">;</span>n2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n2 <span class=\"kw1\">div</span> base<span class=\"sy1\">;</span>i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">-</span>n2<span class=\"sy3\">*</span>base<span class=\"sy1\">;</span>dec<span class=\"br0\">(</span>dgtCnt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>     <br/>  <span class=\"kw1\">until</span> <span class=\"br0\">(</span>n1<span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>n2<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Base<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>dgtCnt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>   <br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Munch<span class=\"br0\">(</span>number<span class=\"sy1\">,</span>DgtPowSum<span class=\"sy1\">,</span>minDigit<span class=\"sy1\">:</span>NativeUInt<span class=\"sy1\">;</span>digits<span class=\"sy1\">:</span>NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  inc<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> number<span class=\"sy3\">*</span>base<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> digits &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> minDigit <span class=\"kw1\">to</span> base<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      Munch<span class=\"br0\">(</span>number<span class=\"sy3\">+</span>i<span class=\"sy1\">,</span>DgtPowSum<span class=\"sy3\">+</span>DgtPotDgt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>digits<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> minDigit <span class=\"kw1\">to</span> base<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span>    <br/>      <span class=\"co1\">//number is always the arrangement of the digits leading to smallest number </span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>number<span class=\"sy3\">+</span>i<span class=\"br0\">)</span>&lt;<span class=\"sy3\">=</span> <span class=\"br0\">(</span>DgtPowSum<span class=\"sy3\">+</span>DgtPotDgt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">IF</span> CheckSameDigits<span class=\"br0\">(</span>number<span class=\"sy3\">+</span>i<span class=\"sy1\">,</span>DgtPowSum<span class=\"sy3\">+</span>DgtPotDgt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">iF</span> number<span class=\"sy3\">+</span>i&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Format<span class=\"br0\">(</span><span class=\"st0\">'%*d \u00a0%.*d'</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span>maxDigits<span class=\"sy1\">,</span>DgtPowSum<span class=\"sy3\">+</span>DgtPotDgt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>maxDigits<span class=\"sy1\">,</span>number<span class=\"sy3\">+</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span>      <br/>\u00a0<br/><span class=\"kw1\">procedure</span> InitDgtPotDgt<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>dgtpow<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"co1\">// digit ^ digit ,special case 0^0 here 0  </span><br/>  DgtPotDgt<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Base<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    dgtpow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span> <br/>      dgtpow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dgtpow<span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/>    DgtPotDgt<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dgtpow<span class=\"sy1\">;</span>  <br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span>  <br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span>  <br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  InitDgtPotDgt<span class=\"sy1\">;</span><br/>  Munch<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>maxDigits<span class=\"br0\">)</span><span class=\"sy1\">;</span>    <br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Check Count '</span><span class=\"sy1\">,</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st0\">\"sum\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$n<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> sum<span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">**</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> is_munchausen <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">constant</span> <span class=\"re0\">@powers</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">**</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"re0\">@powers</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">if</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;is_munchausen</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5000</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">sequence powers = 0&amp;sq_power(tagset(9),tagset(9))<br/>\u00a0<br/>function munchausen(integer n)<br/>    integer n0 = n<br/>    atom summ = 0<br/>    while n!=0 do<br/>        summ += powers[remainder(n,10)+1]<br/>        n = floor(n/10)<br/>    end while<br/>    return summ=n0<br/>end function<br/>\u00a0<br/>for i=1 to 5000 do<br/>    if munchausen(i) then\u00a0?i end if<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(for N 5000<br/>   (and<br/>      (=<br/>         N<br/>         (sum<br/>            '((N) (** N N))<br/>            (mapcar format (chop N)) ) )<br/>      (println N) ) )</pre>"}, {"lang": "Pure", "loc": 11, "block": "<pre class=\"text highlighted_source\">// split numer into digits<br/>digits n::number = loop n [] with<br/>                     loop n l = loop (n div 10) ((n mod 10):l) if n &gt; 0;<br/>                              = l otherwise; end;<br/>\u00a0<br/>munchausen n::int = (filter isMunchausen list) when<br/>                      list = 1..n; end with<br/>                      isMunchausen n = n == foldl (+) 0<br/>                                       (map (\\d -&gt; d^d)<br/>                                        (digits n)); end;<br/>munchausen 5000;</pre>"}, {"lang": "PureBasic", "loc": 25, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Declare</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Munchausen_numbers\"</span><span class=\"br0\">)</span><br/>  main<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">End</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i.i,<br/>         sum.i,<br/>         number.i,<br/>         digit.i  <br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5000</span><br/>    sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    number <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">While</span> number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      digit <span class=\"sy0\">=</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>      sum <span class=\"sy0\">+</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span>digit, digit<span class=\"br0\">)</span><br/>      number <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Wend</span>  <br/>    <span class=\"kw1\">If</span> sum <span class=\"sy0\">=</span> i<br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5000</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> ** <span class=\"kw2\">int</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (expt:0^0=1 r p)<br/>  (if (zero? r) 0 (expt r p)))<br/>\u00a0<br/>(define (munchausen-number? n (t n))<br/>  (if (zero? n)<br/>      (zero? t)<br/>      (let-values (([q r] (quotient/remainder n 10)))<br/>        (munchausen-number? q (- t (expt:0^0=1 r r))))))<br/>\u00a0<br/>(module+ main<br/>  (for-each displayln (filter munchausen-number? (range 1 (add1 5000)))))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/> \u00a0;; this is why we have the (if (zero? r)...) test<br/>  (check-equal? (expt 0 0) 1)<br/>  (check-equal? (expt:0^0=1 0 0) 0)<br/>  (check-equal? (expt:0^0=1 0 4) 0)<br/>  (check-equal? (expt:0^0=1 3 4) (expt 3 4))<br/> \u00a0;; given examples<br/>  (check-true (munchausen-number? 1))<br/>  (check-true (munchausen-number? 3435))<br/>  (check-false (munchausen-number? 3))<br/>  (check-false (munchausen-number? -45) \"no recursion on -ve numbers\"))</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">Do</span> n=<span class=\"nu0\">0</span> <span class=\"kw2\">To</span> <span class=\"nu0\">10000</span><br/>  <span class=\"kw1\">If</span> n=m<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> n<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>m: <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z<br/>res=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> z<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> z c +<span class=\"nu0\">1</span> z<br/>  res=res+c<span class=\"sy0\">**</span>c<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> res</pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Munchausen numbers<br/>\u00a0<br/>limit = 5000<br/>\u00a0<br/>for n=1 to limit<br/>    sum = 0<br/>    msum = string(n)<br/>    for m=1 to len(msum)<br/>        ms = number(msum[m])<br/>        sum = sum + pow(ms, ms)<br/>    next<br/>    if sum = n<br/>       see n + nl<br/>    ok<br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> munchausen?<br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">digits</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>d<span class=\"sy0\">|</span> d<span class=\"sy0\">**</span>d<span class=\"br0\">}</span>.<span class=\"me1\">sum</span> == <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5000</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:munchausen?<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 19, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let mut solutions = Vec::new();<br/>\u00a0<br/>    for num in 1..5_000 {<br/>        let power_sum = num.to_string()<br/>            .chars()<br/>            .map(|c| {<br/>                let digit = c.to_digit(10).unwrap();<br/>                (digit as f64).powi(digit as i32) as usize<br/>            })<br/>            .sum::&lt;usize&gt;();<br/>\u00a0<br/>        if power_sum == num {<br/>            solutions.push(num);<br/>        }<br/>    }<br/>\u00a0<br/>    println!(\"Munchausen numbers below 5_000\u00a0: {:?}\", solutions);<br/>}</pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Munch <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">pow</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">5000</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span><br/>      i <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"br0\">(</span>i.<span class=\"me1\">toString</span>.<span class=\"me1\">toCharArray</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span> pow<span class=\"br0\">(</span>d.<span class=\"me1\">asDigit</span>,d.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span> i + <span class=\"st0\">\" (munchausen)\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func is_munchausen<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n.<span class=\"me1\">digits</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>d<span class=\"sy0\">|</span> d<span class=\"sy0\">**</span>d <span class=\"br0\">}</span>.<span class=\"me1\">sum</span> == n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5000</span> <span class=\"sy0\">-&gt;</span> grep<span class=\"br0\">(</span>is_munchausen<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "SuperCollider", "loc": 1, "block": "<pre class=\"text highlighted_source\">(1..5000).select { |n| n == n.asDigits.sum { |x| pow(x, x) } }</pre>"}, {"lang": "VBA", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Munchausen_numbers()<br/><span class=\"kw4\">Dim</span> i&amp;<br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 5000<br/>        <span class=\"kw3\">If</span> IsMunchausen(i) <span class=\"kw3\">Then</span> Debug.<span class=\"kw4\">Print</span> i &amp; <span class=\"st0\">\" is a munchausen number.\"</span><br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsMunchausen(Number <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> Digits, i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, Tot <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    Digits = Split(StrConv(Number, vbUnicode), Chr(0))<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Digits) - 1<br/>        Tot = (Digits(i) ^ Digits(i)) + Tot<br/>    <span class=\"kw3\">Next</span> i<br/>    IsMunchausen = (Tot = Number)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "vbscript", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = 1 to 5000<br/>    if Munch(i) Then<br/>        Wscript.Echo i, \"is a Munchausen number\"<br/>    end if<br/>next<br/>\u00a0<br/>'Returns True if num is a Munchausen number. This is true if the sum of<br/>'each digit raised to that digit's power is equal to the given number.<br/>'Example: 3435 = 3^3 + 4^4 + 3^3 + 5^5<br/>\u00a0<br/>Function Munch (num)<br/>\u00a0<br/>    dim str: str = Cstr(num)    'input num as a string<br/>    dim sum: sum = 0            'running sum of n^n<br/>    dim i                       'loop index<br/>    dim n                       'extracted digit<br/>\u00a0<br/>    for i = 1 to len(str)<br/>        n = CInt(Mid(str,i,1))<br/>        sum = sum + n^n<br/>    next<br/>\u00a0<br/>    Munch = (sum = num)<br/>\u00a0<br/>End Function<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">[1..5000].filter(fcn(n){ n==n.split().reduce(fcn(s,n){ s + n.pow(n) },0) })<br/>.println();</pre>"}]}