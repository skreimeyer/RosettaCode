{"task": "Currying", "blocks": [{"lang": "ALGOL 68", "loc": 10, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Raising a function to a power #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> FUN <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">)</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> pow <span class=\"sy1\">=</span> <span class=\"br0\">(</span>FUN f<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">**</span> n<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>FUN f<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> FUN<span class=\"sy1\">:</span> pow <span class=\"br0\">(</span>f<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Example: sin (3 x) = 3 sin (x) - 4 sin^3 (x) (follows from DeMoivre's theorem) #</span><br/>\u00a0<br/><span class=\"kw3\">REAL</span> x <span class=\"sy1\">=</span> <span class=\"kw22\">read real</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"sy1\">,</span> <span class=\"kw24\">sin</span> <span class=\"br0\">(</span>3 <span class=\"sy1\">*</span> x<span class=\"br0\">)</span><span class=\"sy1\">,</span>  3 <span class=\"sy1\">*</span>  <span class=\"kw24\">sin</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">-</span> 4 <span class=\"sy1\">*</span> <span class=\"br0\">(</span><span class=\"kw24\">sin</span> <span class=\"sy1\">**</span> 3<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 98, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TESTS ----------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- add\u00a0:: Num -&gt; Num -&gt; Num</span><br/><span class=\"kw3\">on</span> add<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">+</span> b<br/><span class=\"kw3\">end</span> add<br/>\u00a0<br/><span class=\"co1\">-- product\u00a0:: Num -&gt; Num -&gt; Num</span><br/><span class=\"kw3\">on</span> product<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">*</span> b<br/><span class=\"kw3\">end</span> product<br/>\u00a0<br/><span class=\"co1\">-- Test 1.</span><br/>curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--&gt;  \u00abscript\u00bb</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Test 2. </span><br/>curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--&gt; \u00abscript\u00bb</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Test 3.</span><br/>curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(2)'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--&gt; 5</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Test 4. </span><br/>map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>product<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--&gt; {7, 14, 21, 28, 35, 42, 49, 56, 63, 70}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Combined:</span><br/><span class=\"br0\">{</span>curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span>, \u00ac<br/>    curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, \u00ac<br/>    curry<span class=\"br0\">(</span>add<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(2)'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, \u00ac<br/>    map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>product<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">--&gt; {\u00abscript\u00bb, \u00abscript\u00bb, 5, {7, 14, 21, 28, 35, 42, 49, 56, 63, 70}}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdarg.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">long</span> <span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> n<span class=\"sy0\">*</span>factorial<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> <span class=\"kw4\">int</span> sumOfFactorials<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"sy0\">,</span>...<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tva_list vaList<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_start.html\"><span class=\"kw3\">va_start</span></a><span class=\"br0\">(</span>vaList<span class=\"sy0\">,</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>num<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\tsum <span class=\"sy0\">+=</span> factorial<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>vaList<span class=\"sy0\">,</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_end.html\"><span class=\"kw3\">va_end</span></a><span class=\"br0\">(</span>vaList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Sum of factorials of [1,5]\u00a0:\u00a0%ld\"</span><span class=\"sy0\">,</span>sumOfFactorials<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Sum of factorials of [3,5]\u00a0:\u00a0%ld\"</span><span class=\"sy0\">,</span>sumOfFactorials<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Sum of factorials of [1,3]\u00a0:\u00a0%ld\"</span><span class=\"sy0\">,</span>sumOfFactorials<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">delegate</span> <span class=\"kw4\">int</span> Plus<span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">public</span> <span class=\"kw4\">delegate</span> Plus CurriedPlus<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> CurriedPlus plus <span class=\"sy0\">=</span> <br/>      <span class=\"kw4\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"kw4\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> y<span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> plus<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// sum = 7</span><br/>    <span class=\"kw4\">int</span> sum2<span class=\"sy0\">=</span> plus<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">(</span>plus<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// sum2 = 9</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 10, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>    function divide(Integer x, Integer y) =&gt; x / y;<br/>\u00a0<br/>    value partsOf120 = curry(divide)(120);<br/>\u00a0<br/>    print(\"half of 120 is ``partsOf120(2)``<br/>           a third is ``partsOf120(3)``<br/>           and a quarter is ``partsOf120(4)``\");<br/>}</pre>"}, {"lang": "Ceylon", "loc": 10, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>    function divide(Integer x, Integer y) =&gt; x / y;<br/>\u00a0<br/>    value partsOf120 = curry(divide)(120);<br/>\u00a0<br/>    print(\"half of 120 is ``partsOf120(2)``<br/>           a third is ``partsOf120(3)``<br/>           and a quarter is ``partsOf120(4)``\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> plus<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>hundred <span class=\"br0\">(</span>partial <span class=\"sy0\">+</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <br/>           <span class=\"br0\">(</span>plus<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>hundred <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"nu0\">101</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> curry <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"sy0\">&amp;</span>rest args-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest args-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> args-<span class=\"nu0\">1</span> args-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> add2 <span class=\"sy0\">=</span> partial<span class=\"sy0\">!</span><span class=\"br0\">(</span>add<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Add 2 to 3: \"</span><span class=\"sy0\">,</span> add<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Add 2 to 3 (curried): \"</span><span class=\"sy0\">,</span> add2<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>;;<br/>;; curry functional definition<br/>;; (define (curry proc . left-args) (lambda right-args (apply proc (append left-args right-args))))<br/>;;<br/>;; right-curry<br/>;; (define (rcurry proc . right-args) (lambda left-args (apply proc (append left-args right-args))))<br/>;;<br/>\u00a0<br/>(define add42 (curry + 42)) <br/>(add42 666) \u2192 708<br/>\u00a0<br/>(map (curry cons 'simon) '( gallubert garfunkel et-merveilles)) <br/>   \u2192   ((simon . gallubert) (simon . garfunkel) (simon . et-merveilles))<br/>(map (rcurry cons 'simon) '( gallubert garfunkel et-merveilles)) <br/>   \u2192   ((gallubert . simon) (garfunkel . simon) (et-merveilles . simon))<br/>\u00a0<br/>;Implementation\u00a0: result of currying\u00a0:<br/>(curry * 2 3 (+ 2 2))<br/>    \u2192 (\u03bb _#:g1004 (#apply-curry #* (2 3 4)  _#:g1004))<br/>\u00a0</pre>"}, {"lang": "Eero", "loc": 15, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  addN <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw4\">int</span> adder<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> n<br/>    <span class=\"kw1\">return</span> adder<br/>\u00a0<br/>  add2 <span class=\"sy0\">:=</span> addN<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"Result =\u00a0%d<span class=\"es0\">\\n</span>\"</span>, add2<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 1, "block": "<pre>   g (x: X): FUNCTION [ANY, TUPLE [Y], Z]\n       <b>do</b>\n           <b>Result</b>\u00a0:= <b>agent</b> (closed_x: X; y: Y): Z \n              <b>do</b> \n                 <b>Result</b>\u00a0:= f (closed_x, y) \n              <b>end</b> (x,\u00a0?)\n       <b>end</b>\n</pre>"}, {"lang": "Erlang", "loc": 64, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>currying<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Function that curry the first or the second argument of a given function of arity 2</span><br/>\u00a0<br/><span class=\"re3\">curry_first</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">curry_second</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Usual curry</span><br/>\u00a0<br/><span class=\"re3\">curry</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">Arg</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">fun_info</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span>arity<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>\t\t<span class=\"br0\">{</span>arity<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span>badarg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"br0\">{</span>arity<span class=\"sy1\">,</span><span class=\"re5\">ArityFun</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">create_ano_fun</span><span class=\"br0\">(</span><span class=\"re5\">ArityFun</span><span class=\"sy1\">,</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">Arg</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span>badarg<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create_ano_fun</span><span class=\"br0\">(</span><span class=\"re5\">Arity</span><span class=\"sy1\">,</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">Arg</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pars</span> <span class=\"sy3\">=</span> <br/>\t\t<span class=\"br0\">[</span><span class=\"br0\">{</span>var<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw3\">list_to_atom</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"X~p\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <br/>\t\t <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"re5\">Arity</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Ano</span> <span class=\"sy3\">=</span> <br/>\t\t<span class=\"br0\">{</span><span class=\"st_h\">'fun'</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"br0\">{</span>clauses<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span>clause<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Pars</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t\t\t\t<span class=\"br0\">[</span><span class=\"br0\">{</span>call<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">{</span>var<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st_h\">'Fun'</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span>var<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st_h\">'Arg'</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re5\">Pars</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Result</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erl_eval.html\"><span class=\"kw5\">erl_eval</span></a>:<span class=\"re3\">expr</span><span class=\"br0\">(</span><span class=\"re5\">Ano</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st_h\">'Arg'</span><span class=\"sy1\">,</span><span class=\"re5\">Arg</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"st_h\">'Fun'</span><span class=\"sy1\">,</span><span class=\"re5\">Fun</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Result</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Generalization of the currying</span><br/>\u00a0<br/><span class=\"re3\">curry_gen</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">GivenArgs</span><span class=\"sy1\">,</span><span class=\"re5\">PosGivenArgs</span><span class=\"sy1\">,</span><span class=\"re5\">PosParArgs</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Pos</span> <span class=\"sy3\">=</span> <span class=\"re5\">PosGivenArgs</span> <span class=\"sy3\">++</span> <span class=\"re5\">PosParArgs</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">fun_info</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span>arity<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        <span class=\"br0\">{</span>arity<span class=\"sy1\">,</span><span class=\"re5\">ArityFun</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <br/>            <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">GivenArgs</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">PosParArgs</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"re5\">ArityFun</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">GivenArgs</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">PosGivenArgs</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Pos</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"kw3\">size</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/sets.html\"><span class=\"kw5\">sets</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re5\">Pos</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <br/>                true <span class=\"sy1\">-&gt;</span> <br/>                    <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">ParArgs</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>                        <span class=\"kw1\">case</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">ParArgs</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">PosParArgs</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <br/>                            true <span class=\"sy1\">-&gt;</span> <br/>                                <span class=\"re5\">Given</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">PosGivenArgs</span><span class=\"sy1\">,</span><span class=\"re5\">GivenArgs</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                <span class=\"re5\">Pars</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">PosParArgs</span><span class=\"sy1\">,</span><span class=\"re5\">ParArgs</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                <span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Args</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">unzip</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">Given</span> <span class=\"sy3\">++</span> <span class=\"re5\">Pars</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                                <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">apply</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">Args</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                            false <span class=\"sy1\">-&gt;</span> <br/>                                <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span>badarg<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">end</span><br/>                    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>                false <span class=\"sy1\">-&gt;</span> <br/>                    <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span>badarg<span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <br/>            <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span>badarg<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> addN n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> n</pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">IN: scratchpad 2 [ 3 + ] curry<br/>\u00a0<br/>--- Data stack:<br/>[ 2 3 + ]<br/>IN: scratchpad call<br/>\u00a0<br/>--- Data stack:<br/>5</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: curry ( x xt1 -- xt2 )<br/>  swap 2&gt;r\u00a0:noname r&gt; postpone literal r&gt; compile, postpone\u00a0;\u00a0;<br/>\u00a0<br/>5 ' + curry constant +5<br/>5 +5 execute .<br/>7 +5 execute .</pre>"}, {"lang": "FreeBASIC", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> CurriedAdd<br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i <br/>  <span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> add<span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> CurriedAdd.<span class=\"me1\">add</span><span class=\"br0\">(</span>j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> i + j<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> add <span class=\"br0\">(</span>i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> CurriedAdd<br/>   <span class=\"kw1\">Return</span> Type&lt;CurriedAdd&gt;<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"3 + 4 =\"</span>; add<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"2 + 6 =\"</span>; add<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"fmt\"</span><br/>        <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> PowN<span class=\"sy1\">(</span>b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>e <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> PowE<span class=\"sy1\">(</span>e <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Foo <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>f Foo<span class=\"sy1\">)</span> Method<span class=\"sy1\">(</span>b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        pow2 <span class=\"sy2\">:=</span> PowN<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        cube <span class=\"sy2\">:=</span> PowE<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>\u00a0<br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"2^8 =\"</span><span class=\"sy1\">,</span> pow2<span class=\"sy1\">(</span><span class=\"nu0\">8</span><span class=\"sy1\">))</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"4\u00b3 =\"</span><span class=\"sy1\">,</span> cube<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">))</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> a Foo <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>        fn1 <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>Method   <span class=\"co1\">// A \"method value\", like currying 'a'</span><br/>        fn2 <span class=\"sy2\">:=</span> Foo<span class=\"sy3\">.</span>Method <span class=\"co1\">// A \"method expression\", like uncurrying</span><br/>\u00a0<br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"2 + 2 =\"</span><span class=\"sy1\">,</span> a<span class=\"sy3\">.</span>Method<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span> <span class=\"co1\">// regular method call</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"2 + 3 =\"</span><span class=\"sy1\">,</span> fn1<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"2 + 4 =\"</span><span class=\"sy1\">,</span> fn2<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">))</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"3 + 5 =\"</span><span class=\"sy1\">,</span> fn2<span class=\"sy1\">(</span>Foo<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span> <span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> divide <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> x, <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> y <span class=\"sy0\">-&gt;</span><br/>  x / y<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> partsOf120 <span class=\"sy0\">=</span> divide.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">120</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"120: half: ${partsOf120(2)}, third: ${partsOf120(3)}, quarter: ${partsOf120(4)}\"</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">\\ <span class=\"sy0\">-&gt;</span></pre>"}, {"lang": "Hy", "loc": 3, "block": "<pre class=\"text highlighted_source\">(defn addN [n]<br/>  (fn [x]<br/>    (+ x n)))</pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    add2 <span class=\"sy0\">:=</span> addN<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"add2(7) = \"</span><span class=\"sy0\">,</span>add2<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"add2(1) = \"</span><span class=\"sy0\">,</span>add2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> addN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> makeProc<span class=\"br0\">{</span> <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">@&amp;</span><span class=\"kw3\">source</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+:=</span> n<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> makeProc<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 12, "block": "<pre class=\"io highlighted_source\">curry\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>fn,<br/>\ta\u00a0:= call evalArgs slice<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">block</span><span class=\"br0\">(</span><br/>\t\tb\u00a0:= a <span class=\"kw2\">clone</span> appendSeq<span class=\"br0\">(</span>call evalArgs<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">performWithArgList</span><span class=\"br0\">(</span><span class=\"st0\">\"fn\"</span>, b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// example:</span><br/>increment\u00a0:= curry<span class=\"br0\">(</span> <span class=\"kw2\">method</span><span class=\"br0\">(</span>a,b,a+b<span class=\"br0\">)</span>, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>increment call<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"co1\">// result =&gt; 6</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   threePlus=: <span class=\"nu0\">3</span>&amp;+<br/>   threePlus <span class=\"nu0\">7</span><br/><span class=\"nu0\">10</span><br/>   halve =:\u00a0%&amp;<span class=\"nu0\">2</span>  <span class=\"co1\">NB. \u00a0% means divide </span><br/>   halve <span class=\"nu0\">20</span><br/><span class=\"nu0\">10</span><br/>   someParabola =: <span class=\"nu0\">_2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> &amp;p. <span class=\"co1\">NB. x^2 + 3x - 2</span></pre>"}, {"lang": "Java", "loc": 38, "block": "<pre class=\"java5 highlighted_source\">    <span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Currier<span class=\"sy0\">&lt;</span>ARG1, ARG2, RET<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span> <span class=\"kw2\">interface</span> CurriableFunctor<span class=\"sy0\">&lt;</span>ARG1, ARG2, RET<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            RET evaluate<span class=\"br0\">(</span>ARG1 arg1, ARG2 arg2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> <span class=\"kw2\">interface</span> CurriedFunctor<span class=\"sy0\">&lt;</span>ARG2, RET<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            RET evaluate<span class=\"br0\">(</span>ARG2 arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">final</span> CurriableFunctor<span class=\"sy0\">&lt;</span>ARG1, ARG2, RET<span class=\"sy0\">&gt;</span> functor<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> Currier<span class=\"br0\">(</span>CurriableFunctor<span class=\"sy0\">&lt;</span>ARG1, ARG2, RET<span class=\"sy0\">&gt;</span> fn<span class=\"br0\">)</span> <span class=\"br0\">{</span> functor = fn<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> CurriedFunctor<span class=\"sy0\">&lt;</span>ARG2, RET<span class=\"sy0\">&gt;</span> curry<span class=\"br0\">(</span><span class=\"kw2\">final</span> ARG1 arg1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">return</span> <span class=\"kw2\">new</span> CurriedFunctor<span class=\"sy0\">&lt;</span>ARG2, RET<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">public</span> RET evaluate<span class=\"br0\">(</span>ARG2 arg2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">return</span> functor.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span>arg1, arg2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Currier.<span class=\"me1\">CurriableFunctor</span><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> add<br/>                = <span class=\"kw2\">new</span> Currier.<span class=\"me1\">CurriableFunctor</span><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a> evaluate<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a> arg1, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a> arg2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw2\">return</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"br0\">(</span>arg1.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + arg2.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Currier<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> currier<br/>                = <span class=\"kw2\">new</span> Currier<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>add<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Currier.<span class=\"me1\">CurriedFunctor</span><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> add5<br/>                = currier.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>add5.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"> <span class=\"kw1\">function</span> addN<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> curry <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> curry<span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/> add2 <span class=\"sy0\">=</span> addN<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> alert<span class=\"br0\">(</span>add2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> alert<span class=\"br0\">(</span>add2<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def plus(x): . + x;<br/>\u00a0<br/>def plus5: plus(5);<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function addN(n::Number)::Function<br/>  adder(x::Number) = n + x<br/>  return adder<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun curriedAdd<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> y<span class=\"sy0\">:</span> Int -<span class=\"sy0\">&gt;</span> x + y <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> curriedAdd<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$a + $b = $sum\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> curry <span class=\"br0\">(</span>f arg<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> f<br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> arg x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Logtalk", "loc": 5, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/>| <span class=\"sy1\">?-</span> logtalk <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw4\">call</span>([<span class=\"re0\">Z</span>]<span class=\"sy1\">&gt;&gt;</span>(<span class=\"kw4\">call</span>([<span class=\"re0\">X</span>,<span class=\"re0\">Y</span>]<span class=\"sy1\">&gt;&gt;</span>(<span class=\"re0\">Y</span> <span class=\"kw5\">is</span> <span class=\"re0\">X</span><span class=\"sy1\">*</span><span class=\"re0\">X</span>), <span class=\"nu0\">5</span>, <span class=\"re0\">R</span>), <span class=\"re0\">Z</span> <span class=\"kw5\">is</span> <span class=\"re0\">R</span><span class=\"sy1\">*</span><span class=\"re0\">R</span>), <span class=\"re0\">T</span>).<br/><span class=\"re0\">T</span> <span class=\"sy1\">=</span> <span class=\"nu0\">625</span><br/>yes<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> curry2<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> x<span class=\"sy0\">+</span>y<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> adder <span class=\"sy0\">=</span> curry2<span class=\"br0\">(</span>add<span class=\"br0\">)</span><br/><span class=\"kw3\">assert</span><span class=\"br0\">(</span>adder<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> add2 <span class=\"sy0\">=</span> adder<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw3\">assert</span><span class=\"br0\">(</span>add2<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw3\">assert</span><span class=\"br0\">(</span>add2<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module LikeCpp {<br/>      divide=lambda (x, y)-&gt;x/y<br/>      partsof120=lambda divide -&gt;divide(![], 120)<br/>      Print \"half of 120 is \";partsof120(2)<br/>      Print \"a third is \";partsof120(3)<br/>      Print \"and a quarter is \";partsof120(4)<br/>}<br/>LikeCpp<br/>\u00a0<br/>Module Joke {<br/>      \\\\ we can call F1(),  with any number of arguments, and always read one and then<br/>      \\\\ call itself passing the remain arguments<br/>      \\\\\u00a0![] take stack of values and place it in the next call.<br/>      F1=lambda -&gt; {<br/>            if empty then exit<br/>            Read x<br/>            =x+lambda(![])<br/>      }<br/>\u00a0<br/>      Print F1(F1(2),2,F1(-4))=0<br/>      Print F1(-4,F1(2),2)=0<br/>      Print F1(2, F1(F1(2),2))=F1(F1(F1(2),2),2)<br/>      Print F1(F1(F1(2),2),2)=6<br/>      Print F1(2, F1(2, F1(2),2))=F1(F1(F1(2),2, F1(2)),2)<br/>      Print F1(F1(F1(2),2, F1(2)),2)=8<br/>      Print F1(2, F1(10, F1(2, F1(2),2)))=F1(F1(F1(2),2, F1(2)),2, 10)<br/>      Print F1(F1(F1(2),2, F1(2)),2, 10)=18<br/>      Print F1(2,2,2,2,10)=18<br/>      Print F1()=0<br/>\u00a0<br/>      Group F2 {<br/>            Sum=0<br/>            Function Add  (x){<br/>                  .Sum+=x<br/>                  =x<br/>            }<br/>      }<br/>      Link F2.Add() to F2()<br/>      Print F1(F1(F1(F2(2)),F2(2), F1(F2(2))),F2(2))=8<br/>      Print F2.Sum=8<br/>}<br/>Joke<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre>   In[1]:=   plusFC = Function[{x},Function[{y},Plus[x,y]]];\n</pre>"}, {"lang": "Nemerle", "loc": 20, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Curry<br/>{<br/>    Curry[T, U, R](f\u00a0: T * U -&gt; R)\u00a0: T -&gt; U -&gt; R<br/>    {<br/>        fun (x) { fun (y) { f(x, y) } }<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def f(x, y) { x + y }<br/>\tdef g = Curry(f);<br/>\tdef h = Curry(f)(12);              // partial application<br/>\tWriteLine($\"$(Curry(f)(20)(22))\");<br/>\tWriteLine($\"$(g(21)(21))\");<br/>\tWriteLine($\"$(h(30))\")<br/>    }<br/>}</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">proc addN[T](n: T): auto = (proc(x: T): T = x + n)<br/>\u00a0<br/>let add2 = addN(2)<br/>echo add2(7)</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> addnums x y <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>y        <span class=\"co1\">(* declare a curried function *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> add1 <span class=\"sy0\">=</span> addnums <span class=\"nu0\">1</span>         <span class=\"co1\">(* bind the first argument to get another function *)</span><br/>add1 <span class=\"nu0\">42</span>                      <span class=\"co1\">(* apply to actually compute a result, 43 *)</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">2 #+ curry =&gt; 2+<br/>5 2+ .<br/>7 ok</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">curriedPlus<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span>y<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">+</span>y<span class=\"sy0\">;</span><br/>curriedPlus<span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> curry<span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$func</span><span class=\"sy0\">,</span> <span class=\"re0\">@args</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">#This @_ is later</span><br/>    <span class=\"re0\">&amp;$func</span><span class=\"br0\">(</span><span class=\"re0\">@args</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> plusXY<span class=\"br0\">{</span><br/>  <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$plusXOne</span> <span class=\"sy0\">=</span> curry<span class=\"br0\">(</span><span class=\"re0\">\\&amp;plusXY</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">&amp;$plusXOne</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">&amp;negative</span> <span class=\"sy0\">=</span> <span class=\"re0\">&amp;infix</span><span class=\"sy0\">:&lt;-&gt;.</span><span class=\"me1\">assuming</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> negative <span class=\"nu0\">1</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">sequence curries = {}<br/>function create_curried(integer rid, sequence partial_args)<br/>    curries = append(curries,{rid,partial_args})<br/>    return length(curries) -- (return an integer id)<br/>end function<br/>\u00a0<br/>function call_curried(integer id, sequence args)<br/>    {integer rid, sequence partial_args} = curries[id]<br/>    return call_func(rid,partial_args&amp;args)<br/>end function<br/>\u00a0<br/>function add(atom a, b)<br/>    return a+b<br/>end function<br/>\u00a0<br/>integer curried = create_curried(routine_id(\"add\"),{2})<br/>printf(1,\"2+5=%d\\n\",call_curried(curried,{5}))</pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre>: (de multiplier (@X)\n   (curry (@X) (N) (* @X N)) )\n-&gt; multiplier\n: (multiplier 7)\n-&gt; ((N) (* 7 N))\n: ((multiplier 7) 3)\n-&gt; 21</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Add<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"br0\">{</span> <span class=\"kw3\">param</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"kw3\">return</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span> <span class=\"br0\">}</span>.GetNewClosure<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre>\u00a0?- [library('lambda.pl')].\n% library(lambda.pl) compiled into lambda 0,00 sec, 28 clauses\ntrue.\n\n ?- N = 5, F = \\X^Y^(Y is X+N), maplist(F, [1,2,3], L).\nN = 5,\nF = \\X^Y^ (Y is X+5),\nL = [6,7,8].\n\n</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"> <span class=\"kw1\">def</span> addN<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">def</span> adder<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>         <span class=\"kw1\">return</span> x + n<br/>     <span class=\"kw1\">return</span> adder</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(((curry +) 3) 2)\u00a0; =&gt;5<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"text highlighted_source\">/*REXX program demonstrates a REXX currying method to perform addition. */<br/>say 'add 2 to 3:          '  add(2 ,3)<br/>say 'add 2 to 3 (curried):'  add2(3)<br/>exit                                   /*stick a fork in it, we're done.*/<br/>/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500subroutines\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/<br/>add: procedure; $=arg(1);   do j=2  to arg();  $=$+arg(j);  end;  return $<br/>add2: procedure;  return add(arg(1), 2)</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/>b = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y, z<span class=\"sy0\">|</span> <span class=\"br0\">(</span>x<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>z<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>           <span class=\"co1\">#=&gt; 6</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>        <span class=\"co1\">#=&gt; 6</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>  <span class=\"co1\">#=&gt; 6</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>  <span class=\"co1\">#=&gt; 6</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>              <span class=\"co1\">#=&gt; 1</span><br/>\u00a0<br/>b = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y, z, <span class=\"sy0\">*</span>w<span class=\"sy0\">|</span> <span class=\"br0\">(</span>x<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>z<span class=\"sy0\">||</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> w.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">&amp;</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>           <span class=\"co1\">#=&gt; 6</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>        <span class=\"co1\">#=&gt; 10</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>  <span class=\"co1\">#=&gt; 15</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>  <span class=\"co1\">#=&gt; 15</span><br/><span class=\"kw3\">p</span> b.<span class=\"me1\">curry</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>              <span class=\"co1\">#=&gt; 1</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 8, "block": "<pre class=\"text highlighted_source\">fn add_n(n\u00a0: i32) -&gt; impl Fn(i32) -&gt; i32 {<br/>    move |x| n + x<br/>}<br/>\u00a0<br/>fn main() {<br/>    let adder = add_n(40);<br/>    println!(\"The answer to life is {}.\", adder(2));<br/>}</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> add<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"br0\">(</span>b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a + b<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> add5 <span class=\"sy0\">=</span> add<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">_</span><br/>add5<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var adder = <span class=\"nu0\">1</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:add</span><span class=\"br0\">)</span>;<br/>say adder<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;                <span class=\"co1\">#=&gt; 4</span></pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">func addN(n:Int)-&gt;Int-&gt;Int { return {$0 + n} }<br/>\u00a0<br/>var add2 = addN(2)<br/>println(add2) // (Function)<br/>println(add2(7)) // 9</pre>"}, {"lang": "Standard ML", "loc": 4, "block": "<pre class=\"text highlighted_source\">fun addnums (x:int) y = x+y  (* declare a curried function *)<br/>\u00a0<br/>val add1 = addnums 1         (* bind the first argument to get another function *)<br/>add1 42                      (* apply to actually compute a result, 43 *)</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> addone <span class=\"br0\">{</span><span class=\"br0\">}</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>::+ <span class=\"nu0\">1</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>addone <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; 7</span></pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre class=\"text highlighted_source\">(op - 10 @1 @2 5)</pre>"}, {"lang": "Wortel", "loc": 20, "block": "<pre class=\"text highlighted_source\">@let {<br/>  addOne \\+ 1<br/>  subtractFrom1 \\- 1<br/>  subtract1 \\~- 1<br/>\u00a0<br/>  subtract1_2 &amp;\\- [. 1]<br/>\u00a0<br/>  add ^+<br/> \u00a0; partial apply to named functions<br/>  addOne_2 \\add 1<br/>\u00a0<br/> \u00a0; testing<br/>  [[<br/>   \u00a0!addOne 5\u00a0; returns 6<br/>   \u00a0!subtractFrom1 5\u00a0; returns -4<br/>   \u00a0!subtract1 5\u00a0; returns 4<br/>   \u00a0!subtract1_2 5\u00a0; returns 4<br/>   \u00a0!addOne_2 5\u00a0; returns 6<br/>  ]]<br/>}</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">addOne:= Op(\"+\").fp(1); addOne(5) //--&gt;6<br/>minusOne:=Op(\"-\").fp1(1); minusOne(5) //--&gt;4, note that this fixed 1 as the second parameter<br/>   // fix first and third parameters:<br/>foo:=String.fpM(\"101\",\"&lt;foo&gt;\",\"&lt;/foo&gt;\"); foo(\"zkl\"); //--&gt;\"&lt;foo&gt;zkl&lt;/foo&gt;\"<br/>fcn g(x){x+1} f:=fcn(f,x){f(x)+x}.fp(g); f(5); //--&gt;11<br/>f:=fcn(f,x){f(x)+x}.fp(fcn(x){x+1}); // above with lambdas all the way down</pre>"}]}