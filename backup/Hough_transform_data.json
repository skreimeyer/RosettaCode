{"task": "Hough_transform", "blocks": [{"lang": "BBC BASIC", "loc": 47, "block": "<pre class=\"text highlighted_source\">      Width% = 320<br/>      Height% = 240<br/>\u00a0<br/>      VDU 23,22,Width%;Height%;8,16,16,128<br/>      *DISPLAY Pentagon.bmp<br/>      OFF<br/>\u00a0<br/>      DIM hist%(Width%-1, Height%-1)<br/>\u00a0<br/>      rs = 2 * SQR(Width%^2 + Height%^2) / Height%\u00a0: REM Radial step<br/>      ts = PI / Width%\u00a0: REM Angular step<br/>      h% = Height% / 2<br/>\u00a0<br/>      REM Hough transform:<br/>      FOR y% = 0 TO Height%-1<br/>        FOR x% = 0 TO Width%-1<br/>          IF TINT(x%*2, y%*2) = 0 THEN<br/>            FOR t% = 0 TO Width%-1<br/>              th = t% * ts<br/>              r% = (x%*COS(th) + y%*SIN(th)) / rs + h% + 0.5<br/>              hist%(t%,r%) += 1<br/>            NEXT<br/>          ENDIF<br/>        NEXT<br/>      NEXT y%<br/>\u00a0<br/>      REM Find max:<br/>      max% = 0<br/>      FOR y% = 0 TO Height%-1<br/>        FOR x% = 0 TO Width%-1<br/>          IF hist%(x%,y%) &gt; max% max% = hist%(x%,y%)<br/>        NEXT<br/>      NEXT y%<br/>\u00a0<br/>      REM Plot:<br/>      GCOL 1<br/>      FOR y% = 0 TO Height%-1<br/>        FOR x% = 0 TO Width%-1<br/>          c% = 255 * hist%(x%,y%) / max%<br/>          COLOUR 1, c%, c%, c%<br/>          LINE x%*2,y%*2,x%*2,y%*2<br/>        NEXT<br/>      NEXT y%<br/>\u00a0<br/>      REPEAT<br/>        WAIT 1<br/>      UNTIL FALSE</pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> grayscale_image<span class=\"sy0\">;</span><br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Gray houghTransform<span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Gray im<span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> hx<span class=\"sy0\">=</span><span class=\"nu0\">460</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> hy<span class=\"sy0\">=</span><span class=\"nu0\">360</span><span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>im <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>hx <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> hy <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"br0\">(</span>hy <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hy argument must be even.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>Gray<span class=\"br0\">(</span>hx<span class=\"sy0\">,</span> hy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result.<span class=\"me1\">clear</span><span class=\"br0\">(</span>Gray.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> rMax <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span>im.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dr <span class=\"sy0\">=</span> rMax <span class=\"sy0\">/</span> <span class=\"br0\">(</span>hy <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dTh <span class=\"sy0\">=</span> PI <span class=\"sy0\">/</span> hx<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">ny</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">nx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>im<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Gray.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> iTh<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">hx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> th <span class=\"sy0\">=</span> dTh <span class=\"sy0\">*</span> iTh<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th<span class=\"br0\">)</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>th<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> iry <span class=\"sy0\">=</span> hy <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>floor<span class=\"br0\">(</span>r <span class=\"sy0\">/</span> dr <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>iTh<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> Gray<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result<span class=\"br0\">[</span>iTh<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>RGB<span class=\"br0\">)</span><br/>    .<span class=\"me1\">loadPPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"Pentagon.ppm\"</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">rgb2grayImage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">houghTransform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">savePGM</span><span class=\"br0\">(</span><span class=\"st0\">\"Pentagon_hough.pgm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> grayscale_image<span class=\"sy0\">;</span><br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Gray houghTransform<span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Gray im<span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> hx<span class=\"sy0\">=</span><span class=\"nu0\">460</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> hy<span class=\"sy0\">=</span><span class=\"nu0\">360</span><span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>im <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>hx <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> hy <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"br0\">(</span>hy <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hy argument must be even.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>Gray<span class=\"br0\">(</span>hx<span class=\"sy0\">,</span> hy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result.<span class=\"me1\">clear</span><span class=\"br0\">(</span>Gray.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> rMax <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span>im.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dr <span class=\"sy0\">=</span> rMax <span class=\"sy0\">/</span> <span class=\"br0\">(</span>hy <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dTh <span class=\"sy0\">=</span> PI <span class=\"sy0\">/</span> hx<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">ny</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">nx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>im<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Gray.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> iTh<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">hx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> th <span class=\"sy0\">=</span> dTh <span class=\"sy0\">*</span> iTh<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th<span class=\"br0\">)</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>th<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> iry <span class=\"sy0\">=</span> hy <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>floor<span class=\"br0\">(</span>r <span class=\"sy0\">/</span> dr <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">[</span>iTh<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> Gray<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    result<span class=\"br0\">[</span>iTh<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>RGB<span class=\"br0\">)</span><br/>    .<span class=\"me1\">loadPPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"Pentagon.ppm\"</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">rgb2grayImage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">houghTransform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">savePGM</span><span class=\"br0\">(</span><span class=\"st0\">\"Pentagon_hough.pgm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 71, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/color\"</span><br/>    <span class=\"st0\">\"image/draw\"</span><br/>    <span class=\"st0\">\"image/png\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> hough<span class=\"sy1\">(</span>im <a href=\"http://golang.org/search?q=image.Image\"><span class=\"kw5\">image.<span class=\"me1\">Image</span></span></a><span class=\"sy1\">,</span> ntx<span class=\"sy1\">,</span> mry <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <a href=\"http://golang.org/search?q=draw.Image\"><span class=\"kw5\">draw.<span class=\"me1\">Image</span></span></a> <span class=\"sy1\">{</span><br/>    nimx <span class=\"sy2\">:=</span> im<span class=\"sy3\">.</span>Bounds<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>X<br/>    mimy <span class=\"sy2\">:=</span> im<span class=\"sy3\">.</span>Bounds<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>Y<br/>    mry <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>mry<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>    him <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewGray<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> ntx<span class=\"sy1\">,</span> mry<span class=\"sy1\">))</span><br/>    draw<span class=\"sy3\">.</span>Draw<span class=\"sy1\">(</span>him<span class=\"sy1\">,</span> him<span class=\"sy3\">.</span>Bounds<span class=\"sy1\">(),</span> image<span class=\"sy3\">.</span>NewUniform<span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>White<span class=\"sy1\">),</span><br/>        image<span class=\"sy3\">.</span>ZP<span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span>Src<span class=\"sy1\">)</span><br/>\u00a0<br/>    rmax <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Hypot<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>nimx<span class=\"sy1\">),</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>mimy<span class=\"sy1\">))</span><br/>    dr <span class=\"sy2\">:=</span> rmax <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>mry<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    dth <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>ntx<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> jx <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> jx &lt; nimx<span class=\"sy1\">;</span> jx<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> iy <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> iy &lt; mimy<span class=\"sy1\">;</span> iy<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            col <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>GrayModel<span class=\"sy3\">.</span>Convert<span class=\"sy1\">(</span>im<span class=\"sy3\">.</span>At<span class=\"sy1\">(</span>jx<span class=\"sy1\">,</span> iy<span class=\"sy1\">))</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> col<span class=\"sy3\">.</span>Y <span class=\"sy3\">==</span> <span class=\"nu0\">255</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">for</span> jtx <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> jtx &lt; ntx<span class=\"sy1\">;</span> jtx<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                th <span class=\"sy2\">:=</span> dth <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>jtx<span class=\"sy1\">)</span><br/>                r <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>jx<span class=\"sy1\">)</span><span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>th<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>iy<span class=\"sy1\">)</span><span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>th<span class=\"sy1\">)</span><br/>                iry <span class=\"sy2\">:=</span> mry<span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Floor<span class=\"sy1\">(</span>r<span class=\"sy3\">/</span>dr<span class=\"sy3\">+.</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>                col <span class=\"sy2\">=</span> him<span class=\"sy3\">.</span>At<span class=\"sy1\">(</span>jtx<span class=\"sy1\">,</span> iry<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> col<span class=\"sy3\">.</span>Y &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    col<span class=\"sy3\">.</span>Y<span class=\"sy2\">--</span><br/>                    him<span class=\"sy3\">.</span>SetGray<span class=\"sy1\">(</span>jtx<span class=\"sy1\">,</span> iry<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> him<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span><span class=\"st0\">\"Pentagon.png\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    pent<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> png<span class=\"sy3\">.</span>Decode<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    h <span class=\"sy2\">:=</span> hough<span class=\"sy1\">(</span>pent<span class=\"sy1\">,</span> <span class=\"nu0\">460</span><span class=\"sy1\">,</span> <span class=\"nu0\">360</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> f<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"hough.png\"</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">=</span> png<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> h<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> cErr <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> cErr <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> &amp;&amp; err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 117, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_,</span> when<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST <span class=\"br0\">(</span>newArray<span class=\"sy0\">,</span> writeArray<span class=\"sy0\">,</span> readArray<span class=\"sy0\">,</span> runSTArray<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Foldable <span class=\"kw1\">as</span> F <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"sy0\">,</span> getProgName<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Library JuicyPixels:</span><br/><span class=\"kw1\">import</span> Codec<span class=\"sy0\">.</span>Picture<br/>       <span class=\"br0\">(</span>DynamicImage<span class=\"br0\">(</span>ImageRGB8<span class=\"sy0\">,</span> ImageRGBA8<span class=\"br0\">)</span><span class=\"sy0\">,</span> Image<span class=\"sy0\">,</span> PixelRGB8<span class=\"br0\">(</span>PixelRGB8<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        PixelRGBA8<span class=\"br0\">(</span>PixelRGBA8<span class=\"br0\">)</span><span class=\"sy0\">,</span> imageWidth<span class=\"sy0\">,</span> imageHeight<span class=\"sy0\">,</span> pixelAt<span class=\"sy0\">,</span><br/>        generateImage<span class=\"sy0\">,</span> readImage<span class=\"sy0\">,</span> pixelMap<span class=\"sy0\">,</span> savePngImage<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Codec<span class=\"sy0\">.</span>Picture<span class=\"sy0\">.</span>Types <span class=\"br0\">(</span>extractLumaPlane<span class=\"sy0\">,</span> dropTransparency<span class=\"br0\">)</span><br/>\u00a0<br/>dot<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<br/>dot <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x1 <span class=\"sy0\">*</span> x2 <span class=\"sy0\">+</span> y1 <span class=\"sy0\">*</span> y2<br/>\u00a0<br/>mag<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<br/>mag a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> dot a a<br/>\u00a0<br/>sub<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>sub <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> x2<span class=\"sy0\">,</span> y1 <span class=\"sy0\">-</span> y2<span class=\"br0\">)</span><br/>\u00a0<br/>fromIntegralP<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> b<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>fromIntegralP <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> x<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">{-<br/>  Create a Hough space image with y+ measuring the distance from<br/>  the center of the input image on the range of 0 to half the hypotenuse<br/>  and x+ measuring from [0, 2 * pi].<br/>  The origin is in the upper left, so y is increasing down.<br/>  The image is scaled according to thetaSize and distSize.<br/>-}</span><br/>hough <span class=\"sy0\">::</span> Image PixelRGB8 <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Image PixelRGB8<br/>hough image thetaSize distSize <span class=\"sy0\">=</span> hImage<br/>  <span class=\"kw1\">where</span><br/>    width <span class=\"sy0\">=</span> imageWidth image<br/>    height <span class=\"sy0\">=</span> imageHeight image<br/>    wMax <span class=\"sy0\">=</span> width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    hMax <span class=\"sy0\">=</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    xCenter <span class=\"sy0\">=</span> wMax `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>    yCenter <span class=\"sy0\">=</span> hMax `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>    lumaMap <span class=\"sy0\">=</span> extractLumaPlane image<br/>    gradient x y <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> orig <span class=\"sy0\">=</span> pixelAt lumaMap x y<br/>          x<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> pixelAt lumaMap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> wMax<span class=\"br0\">)</span> y<br/>          y<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> pixelAt lumaMap x <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> hMax<span class=\"br0\">)</span><br/>      <span class=\"kw1\">in</span> fromIntegralP <span class=\"br0\">(</span>orig <span class=\"sy0\">-</span> x<span class=\"sy0\">_,</span> orig <span class=\"sy0\">-</span> y<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>    gradMap <span class=\"sy0\">=</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> gradient x y<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> wMax<span class=\"br0\">]</span> <br/>      <span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> hMax<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"co1\">-- The longest distance from the center, half the hypotenuse of the image.</span><br/>    distMax <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>    distMax <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">$</span> height <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> width <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"coMULTI\">{-<br/>      The accumulation bins of the polar values.<br/>      For each value in the gradient image, if the gradient length exceeds<br/>      some threshold, consider it evidence of a line and plot all of the<br/>      lines that go through that point in Hough space.<br/>    -}</span><br/>    accBin <span class=\"sy0\">=</span><br/>      runSTArray <span class=\"sy0\">$</span><br/>      <span class=\"kw1\">do</span> arr <span class=\"sy0\">&lt;-</span> newArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>thetaSize<span class=\"sy0\">,</span> distSize<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>         forM<span class=\"sy0\">_</span> gradMap <span class=\"sy0\">$</span><br/>           \\<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">,</span> grad<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>             <span class=\"kw1\">let</span> <span class=\"br0\">(</span>x<span class=\"sy0\">_,</span> y<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> fromIntegralP <span class=\"sy0\">$</span> <span class=\"br0\">(</span>xCenter<span class=\"sy0\">,</span> yCenter<span class=\"br0\">)</span> `sub` <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>             when <span class=\"br0\">(</span>mag grad <span class=\"sy0\">&gt;</span> <span class=\"nu0\">127</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>               forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> thetaSize<span class=\"br0\">]</span> <span class=\"sy0\">$</span><br/>               \\theta <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                 <span class=\"kw1\">let</span> theta<span class=\"sy0\">_</span> <span class=\"sy0\">=</span><br/>                       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> theta <span class=\"sy0\">*</span> <span class=\"nu0\">360</span> <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> thetaSize <span class=\"sy0\">/</span> <span class=\"nu0\">180</span> <span class=\"sy0\">*</span><br/>                       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>                     dist <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> theta<span class=\"sy0\">_</span> <span class=\"sy0\">*</span> x<span class=\"sy0\">_</span> <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> theta<span class=\"sy0\">_</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">_</span><br/>                     dist<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:truncate\"><span class=\"kw3\">truncate</span></a> <span class=\"sy0\">$</span> dist <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> distSize <span class=\"sy0\">/</span> distMax<br/>                     idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>theta<span class=\"sy0\">,</span> dist<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>                 when <span class=\"br0\">(</span>dist<span class=\"sy0\">_</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> dist<span class=\"sy0\">_</span> <span class=\"sy0\">&lt;</span> distSize<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>                   <span class=\"kw1\">do</span> old <span class=\"sy0\">&lt;-</span> readArray arr idx<br/>                      writeArray arr idx <span class=\"sy0\">$</span> old <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>         <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> arr<br/>    maxAcc <span class=\"sy0\">=</span> F<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> accBin<br/>    <span class=\"co1\">-- The image representation of the accumulation bins.</span><br/>    hTransform x y <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:truncate\"><span class=\"kw3\">truncate</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>accBin <span class=\"sy0\">!</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> maxAcc <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">in</span> PixelRGB8 l l l<br/>    hImage <span class=\"sy0\">=</span> generateImage hTransform thetaSize distSize<br/>\u00a0<br/>houghIO <span class=\"sy0\">::</span> FilePath <span class=\"sy0\">-&gt;</span> FilePath <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>houghIO path outpath thetaSize distSize <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  image <span class=\"sy0\">&lt;-</span> readImage path<br/>  <span class=\"kw1\">case</span> image <span class=\"kw1\">of</span><br/>    Left err <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> err<br/>    Right <span class=\"br0\">(</span>ImageRGB8 image<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> doImage image<span class=\"sy0\">_</span><br/>    Right <span class=\"br0\">(</span>ImageRGBA8 image<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> doImage <span class=\"sy0\">$</span> pixelMap dropTransparency image<span class=\"sy0\">_</span><br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Expecting RGB8 or RGBA8 image\"</span><br/>  <span class=\"kw1\">where</span><br/>    doImage image <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> houghImage <span class=\"sy0\">=</span> hough image thetaSize distSize<br/>      savePngImage outpath <span class=\"sy0\">$</span> ImageRGB8 houghImage<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  prog <span class=\"sy0\">&lt;-</span> getProgName<br/>  <span class=\"kw1\">case</span> args <span class=\"kw1\">of</span><br/>    <span class=\"br0\">[</span>path<span class=\"sy0\">,</span> outpath<span class=\"sy0\">,</span> thetaSize<span class=\"sy0\">,</span> distSize<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>      houghIO path outpath <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> thetaSize<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> distSize<span class=\"br0\">)</span><br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>      <span class=\"st0\">\"Usage: \"</span> <span class=\"sy0\">++</span> prog <span class=\"sy0\">++</span> <span class=\"st0\">\" &lt;image-file&gt; &lt;out-file.png&gt; &lt;width&gt; &lt;height&gt;\"</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB.*houghTransform v Produces a density plot of image y in hough space</span><br/><span class=\"co1\">NB. y is picture as an array with 1 at non-white points,</span><br/><span class=\"co1\">NB. x is resolution (width,height) of resulting image</span><br/>houghTransform=: dyad define<br/>  <span class=\"st_h\">'w h'</span>=. <span class=\"kw2\">x</span>                               <span class=\"co1\">NB. width and height of target image</span><br/>  theta=. o. <span class=\"sy0\">(</span>%~ <span class=\"nu0\">0.5</span>+i.<span class=\"sy0\">)</span> w                <span class=\"co1\">NB. theta in radians from 0 to \u03c0</span><br/>  rho=. <span class=\"sy0\">(</span><span class=\"nu0\">4</span>$.$. |.<span class=\"kw2\">y</span><span class=\"sy0\">)</span> +/ .* <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> o./theta    <span class=\"co1\">NB. rho for each pixel at each theta</span><br/>  <span class=\"st_h\">'min max'</span>=. <span class=\"sy0\">(</span>,~-<span class=\"sy0\">)</span> +/&amp;.:*: $<span class=\"kw2\">y</span>            <span class=\"co1\">NB. min/max possible rho</span><br/>  rho=. &lt;. <span class=\"nu0\">0.5</span>+ h * <span class=\"sy0\">(</span>rho-min<span class=\"sy0\">)</span>\u00a0% max-min   <span class=\"co1\">NB. Rescale rho from 0 to h and round to int</span><br/>  |.<span class=\"sy0\">(</span>[: &lt;:@<span class=\"sy0\">(</span>#/.~<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>i.h<span class=\"sy0\">)</span>&amp;,<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span>&amp;.|: rho      <span class=\"co1\">NB. consolidate into picture</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 142, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.image.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.imageio.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HoughTransform<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ArrayData houghTransform<span class=\"br0\">(</span>ArrayData inputData, <span class=\"kw4\">int</span> thetaAxisSize, <span class=\"kw4\">int</span> rAxisSize, <span class=\"kw4\">int</span> minContrast<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> inputData.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> height <span class=\"sy0\">=</span> inputData.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> maxRadius <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> halfRAxisSize <span class=\"sy0\">=</span> rAxisSize <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    ArrayData outputData <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>thetaAxisSize, rAxisSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// x output ranges from 0 to pi</span><br/>    <span class=\"co1\">// y output ranges from -maxRadius to maxRadius</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sinTable <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>thetaAxisSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> cosTable <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>thetaAxisSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> theta <span class=\"sy0\">=</span> thetaAxisSize <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> theta <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> theta<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">double</span> thetaRadians <span class=\"sy0\">=</span> theta <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> thetaAxisSize<span class=\"sy0\">;</span><br/>      sinTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      cosTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inputData.<span class=\"me1\">contrast</span><span class=\"br0\">(</span>x, y, minContrast<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> theta <span class=\"sy0\">=</span> thetaAxisSize <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> theta <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> theta<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> cosTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> sinTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> rScaled <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">round</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> halfRAxisSize <span class=\"sy0\">/</span> maxRadius<span class=\"br0\">)</span> <span class=\"sy0\">+</span> halfRAxisSize<span class=\"sy0\">;</span><br/>            outputData.<span class=\"me1\">accumulate</span><span class=\"br0\">(</span>theta, rScaled, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> outputData<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> ArrayData<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dataArray<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> width<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> height<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ArrayData<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>width <span class=\"sy0\">*</span> height<span class=\"br0\">]</span>, width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ArrayData<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dataArray, <span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">dataArray</span> <span class=\"sy0\">=</span> dataArray<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> width<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> height<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> get<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> set<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> value<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> accumulate<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> delta<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  set<span class=\"br0\">(</span>x, y, get<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> delta<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> contrast<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> minContrast<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> centerValue <span class=\"sy0\">=</span> get<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> newx <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> newy <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>newx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>newx <span class=\"sy0\">&gt;=</span> width<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>newy <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>newy <span class=\"sy0\">&gt;=</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>get<span class=\"br0\">(</span>newx, newy<span class=\"br0\">)</span> <span class=\"sy0\">-</span> centerValue<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> minContrast<span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getMax<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> dataArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> width <span class=\"sy0\">*</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dataArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span><br/>          max <span class=\"sy0\">=</span> dataArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> max<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ArrayData getArrayDataFromImage<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> inputImage <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getWidth</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> height <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getHeight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> rgbData <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, width, height, <span class=\"kw2\">null</span>, <span class=\"nu0\">0</span>, width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ArrayData arrayData <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Flip y axis when reading image</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> height<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> width<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> rgbValue <span class=\"sy0\">=</span> rgbData<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        rgbValue <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rgbValue <span class=\"sy0\">&amp;</span> 0xFF0000<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.30</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rgbValue <span class=\"sy0\">&amp;</span> 0xFF00<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.59</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>rgbValue <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        arrayData.<span class=\"me1\">set</span><span class=\"br0\">(</span>x, height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> y, rgbValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> arrayData<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> writeOutputImage<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename, ArrayData arrayData<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> arrayData.<span class=\"me1\">getMax</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> outputImage <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a><span class=\"br0\">(</span>arrayData.<span class=\"me1\">width</span>, arrayData.<span class=\"me1\">height</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a>.<span class=\"me1\">TYPE_INT_ARGB</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> arrayData.<span class=\"me1\">height</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> arrayData.<span class=\"me1\">width</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">min</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">round</span><span class=\"br0\">(</span>arrayData.<span class=\"me1\">get</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255.0</span> <span class=\"sy0\">/</span> max<span class=\"br0\">)</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outputImage.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, arrayData.<span class=\"me1\">height</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> y, <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> 0x90 <span class=\"sy0\">|</span> <span class=\"sy0\">-</span>0x01000000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>outputImage, <span class=\"st0\">\"PNG\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    ArrayData inputData <span class=\"sy0\">=</span> getArrayDataFromImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> minContrast <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">64</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ArrayData outputData <span class=\"sy0\">=</span> houghTransform<span class=\"br0\">(</span>inputData, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, minContrast<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeOutputImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, outputData<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 92, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"me1\">BufferedImage</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">imageio</span>.<span class=\"me1\">ImageIO</span><br/>\u00a0<br/>internal <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ArrayData<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dataArray<span class=\"sy0\">:</span> IntArray, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>width<span class=\"sy0\">:</span> Int, height<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>IntArray<span class=\"br0\">(</span>width <span class=\"sy0\">*</span> height<span class=\"br0\">)</span>, width, height<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun get<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">]</span><br/>\u00a0<br/>    operator fun set<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun invoke<span class=\"br0\">(</span>thetaAxisSize<span class=\"sy0\">:</span> Int, rAxisSize<span class=\"sy0\">:</span> Int, minContrast<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> ArrayData <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxRadius <span class=\"sy0\">=</span> Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>Math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>width.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, height.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> halfRAxisSize <span class=\"sy0\">=</span> rAxisSize.<span class=\"me1\">ushr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> outputData <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>thetaAxisSize, rAxisSize<span class=\"br0\">)</span><br/>        <span class=\"co1\">// x output ranges from 0 to pi</span><br/>        <span class=\"co1\">// y output ranges from -maxRadius to maxRadius</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sinTable <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>thetaAxisSize<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cosTable <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>thetaAxisSize<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>theta in thetaAxisSize - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> thetaRadians <span class=\"sy0\">=</span> theta <span class=\"sy0\">*</span> Math.<span class=\"me1\">PI</span> / thetaAxisSize<br/>            sinTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><br/>            cosTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in height - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in width - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>contrast<span class=\"br0\">(</span>x, y, minContrast<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>theta in thetaAxisSize - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> cosTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x + sinTable<span class=\"br0\">[</span>theta<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rScaled <span class=\"sy0\">=</span> Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> halfRAxisSize / maxRadius<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + halfRAxisSize<br/>                        outputData.<span class=\"me1\">accumulate</span><span class=\"br0\">(</span>theta, rScaled, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> outputData<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun writeOutputImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> dataArray.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> BufferedImage<span class=\"br0\">(</span>width, height, BufferedImage.<span class=\"me1\">TYPE_INT_ARGB</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span>..<span class=\"me1\">height</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span>..<span class=\"me1\">width</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>Math.<span class=\"me1\">round</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255.0</span> / max<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>                image.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, height - <span class=\"nu0\">1</span> - y, n shl <span class=\"nu0\">16</span> or <span class=\"br0\">(</span>n shl <span class=\"nu0\">8</span><span class=\"br0\">)</span> or 0x90 or -0x01000000<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>image, <span class=\"st0\">\"PNG\"</span>, File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun accumulate<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, delta<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        set<span class=\"br0\">(</span>x, y, get<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> + delta<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun contrast<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, minContrast<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> centerValue <span class=\"sy0\">=</span> get<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">8</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newx <span class=\"sy0\">=</span> x + i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> - <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newy <span class=\"sy0\">=</span> y + i / <span class=\"nu0\">3</span> - <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>newx <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> newx <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> newy <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> newy <span class=\"sy0\">&lt;</span> height<br/>                        <span class=\"sy0\">&amp;&amp;</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>get<span class=\"br0\">(</span>newx, newy<span class=\"br0\">)</span> - centerValue<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> minContrast<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>internal fun readInputFromImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> ArrayData <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span>File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> image.<span class=\"me1\">width</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> image.<span class=\"me1\">height</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgbData <span class=\"sy0\">=</span> image.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, w, h, <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>, <span class=\"nu0\">0</span>, w<span class=\"br0\">)</span><br/>    <span class=\"co1\">// flip y axis when reading image</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> array <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span>..<span class=\"me1\">h</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span>..<span class=\"me1\">w</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rgb <span class=\"sy0\">=</span> rgbData<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> w + x<span class=\"br0\">]</span><br/>            rgb <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rgb and 0xFF0000<span class=\"br0\">)</span>.<span class=\"me1\">ushr</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.30</span> + <span class=\"br0\">(</span>rgb and 0xFF00<span class=\"br0\">)</span>.<span class=\"me1\">ushr</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.59</span> + <span class=\"br0\">(</span>rgb and 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.11</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            array<span class=\"br0\">[</span>x, h - <span class=\"nu0\">1</span> - y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rgb<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> array<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>out String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputData <span class=\"sy0\">=</span> readInputFromImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> minContrast <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> args<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    inputData<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, args<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, minContrast<span class=\"br0\">)</span>.<span class=\"me1\">writeOutputImage</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 43, "block": "<pre class=\"text highlighted_source\">with(ImageTools):<br/>img\u00a0:= Read(\"pentagon.png\")[..,..,1]:<br/>img_x\u00a0:= Convolution (img, Matrix ([[1,2,1], [0,0,0],[-1,-2,-1]])):<br/>img_y\u00a0:= Convolution (img, Matrix ([[-1,0,1],[-2,0,2],[-1,0,1]])):<br/>img\u00a0:= Array (abs (img_x) + abs (img_y), datatype=float[8]):<br/>countPixels\u00a0:= proc(M)<br/>\tlocal r,c,i,j,row,col:<br/>\trow\u00a0:= Array([]);<br/>\tcol\u00a0:= Array([]);<br/>\tr,c\u00a0:= LinearAlgebra:-Dimensions(M);<br/>\tfor i from 1 to r do<br/>\t\tfor j from 1 to c do<br/>\t\t\tif M[i,j] &lt;&gt; 0 then <br/>\t\t\t\tArrayTools:-Append(row, i, inplace=true):<br/>\t\t\t\tArrayTools:-Append(col, j, inplace=true):<br/>\t\t\tend if:<br/>\t\tend do:<br/>\tend do:<br/>\treturn row,col:<br/>end proc:<br/>row,col\u00a0:= countPixels(img);<br/>pTheta\u00a0:= proc(acc,r,c,x,y)<br/>\tlocal j, pos:<br/>\tfor j from 1 to c do<br/>\t\tpos\u00a0:= ceil(x*cos((j-1)*Pi/180)+y*sin((j-1)*Pi/180)+r/2):<br/>\t\tacc[pos,j]\u00a0:= acc[pos,j]+1;<br/>\tend do:<br/>end proc:<br/>HoughTransform\u00a0:= proc(img,row,col)<br/>   local r,c,pMax,theta,numThetas,numPs,acc,i:<br/>   r,c\u00a0:= LinearAlgebra:-Dimensions(img);<br/>   pMax\u00a0:= ceil(sqrt(r^2+c^2)):<br/>   theta\u00a0:= [seq(evalf(i), i = 1..181, 1)]:<br/>   numThetas\u00a0:= numelems(theta):<br/>   numPs\u00a0:= 2*pMax+1:<br/>   acc\u00a0:= Matrix(numPs, numThetas, fill=0,datatype=integer[4]):<br/>   for i from 1 to numelems(row) do<br/>   \tpTheta(acc,numPs,numThetas,col[i],row[i]):<br/>   end do:<br/>   return acc;<br/>end proc:<br/>result\u00a0:=HoughTransform(img,row,col);<br/>Embed(Scale(FitIntensity(Create(result)), 1..500,1..500));</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Radon[image, Method -&gt; \"Hough\"]<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 39, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> hypot<span class=\"sy0\">,</span> pi<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> sin<br/><span class=\"kw1\">from</span> PIL <span class=\"kw1\">import</span> Image<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> hough<span class=\"br0\">(</span>im<span class=\"sy0\">,</span> ntx<span class=\"sy0\">=</span><span class=\"nu0\">460</span><span class=\"sy0\">,</span> mry<span class=\"sy0\">=</span><span class=\"nu0\">360</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Calculate Hough transform.\"</span><br/>    pim <span class=\"sy0\">=</span> im.<span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    nimx<span class=\"sy0\">,</span> mimy <span class=\"sy0\">=</span> im.<span class=\"me1\">size</span><br/>    mry <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>mry/<span class=\"nu0\">2</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>          <span class=\"co1\">#Make sure that this is even</span><br/>    him <span class=\"sy0\">=</span> Image.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"L\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ntx<span class=\"sy0\">,</span> mry<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    phim <span class=\"sy0\">=</span> him.<span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    rmax <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span>nimx<span class=\"sy0\">,</span> mimy<span class=\"br0\">)</span><br/>    dr <span class=\"sy0\">=</span> rmax / <span class=\"br0\">(</span>mry/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    dth <span class=\"sy0\">=</span> pi / ntx<br/>\u00a0<br/>    <span class=\"kw1\">for</span> jx <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>nimx<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> iy <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>mimy<span class=\"br0\">)</span>:<br/>            col <span class=\"sy0\">=</span> pim<span class=\"br0\">[</span>jx<span class=\"sy0\">,</span> iy<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> col <span class=\"sy0\">==</span> <span class=\"nu0\">255</span>: <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">for</span> jtx <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>ntx<span class=\"br0\">)</span>:<br/>                th <span class=\"sy0\">=</span> dth * jtx<br/>                r <span class=\"sy0\">=</span> jx*cos<span class=\"br0\">(</span>th<span class=\"br0\">)</span> + iy*sin<span class=\"br0\">(</span>th<span class=\"br0\">)</span><br/>                iry <span class=\"sy0\">=</span> mry/<span class=\"nu0\">2</span> + <span class=\"kw2\">int</span><span class=\"br0\">(</span>r/dr+<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>                phim<span class=\"br0\">[</span>jtx<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span> -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> him<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Test Hough transform with pentagon.\"</span><br/>    im <span class=\"sy0\">=</span> Image.<span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"pentagon.png\"</span><span class=\"br0\">)</span>.<span class=\"me1\">convert</span><span class=\"br0\">(</span><span class=\"st0\">\"L\"</span><span class=\"br0\">)</span><br/>    him <span class=\"sy0\">=</span> hough<span class=\"br0\">(</span>im<span class=\"br0\">)</span><br/>    him.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"st0\">\"ho5.bmp\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>: <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 39, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> hypot<span class=\"sy0\">,</span> pi<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> sin<br/><span class=\"kw1\">from</span> PIL <span class=\"kw1\">import</span> Image<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> hough<span class=\"br0\">(</span>im<span class=\"sy0\">,</span> ntx<span class=\"sy0\">=</span><span class=\"nu0\">460</span><span class=\"sy0\">,</span> mry<span class=\"sy0\">=</span><span class=\"nu0\">360</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Calculate Hough transform.\"</span><br/>    pim <span class=\"sy0\">=</span> im.<span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    nimx<span class=\"sy0\">,</span> mimy <span class=\"sy0\">=</span> im.<span class=\"me1\">size</span><br/>    mry <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>mry/<span class=\"nu0\">2</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>          <span class=\"co1\">#Make sure that this is even</span><br/>    him <span class=\"sy0\">=</span> Image.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"L\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ntx<span class=\"sy0\">,</span> mry<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    phim <span class=\"sy0\">=</span> him.<span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    rmax <span class=\"sy0\">=</span> hypot<span class=\"br0\">(</span>nimx<span class=\"sy0\">,</span> mimy<span class=\"br0\">)</span><br/>    dr <span class=\"sy0\">=</span> rmax / <span class=\"br0\">(</span>mry/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    dth <span class=\"sy0\">=</span> pi / ntx<br/>\u00a0<br/>    <span class=\"kw1\">for</span> jx <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>nimx<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> iy <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>mimy<span class=\"br0\">)</span>:<br/>            col <span class=\"sy0\">=</span> pim<span class=\"br0\">[</span>jx<span class=\"sy0\">,</span> iy<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> col <span class=\"sy0\">==</span> <span class=\"nu0\">255</span>: <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">for</span> jtx <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>ntx<span class=\"br0\">)</span>:<br/>                th <span class=\"sy0\">=</span> dth * jtx<br/>                r <span class=\"sy0\">=</span> jx*cos<span class=\"br0\">(</span>th<span class=\"br0\">)</span> + iy*sin<span class=\"br0\">(</span>th<span class=\"br0\">)</span><br/>                iry <span class=\"sy0\">=</span> mry/<span class=\"nu0\">2</span> + <span class=\"kw2\">int</span><span class=\"br0\">(</span>r/dr+<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>                phim<span class=\"br0\">[</span>jtx<span class=\"sy0\">,</span> iry<span class=\"br0\">]</span> -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> him<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Test Hough transform with pentagon.\"</span><br/>    im <span class=\"sy0\">=</span> Image.<span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"pentagon.png\"</span><span class=\"br0\">)</span>.<span class=\"me1\">convert</span><span class=\"br0\">(</span><span class=\"st0\">\"L\"</span><span class=\"br0\">)</span><br/>    him <span class=\"sy0\">=</span> hough<span class=\"br0\">(</span>im<span class=\"br0\">)</span><br/>    him.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"st0\">\"ho5.bmp\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>: <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 35, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'mathn'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'rubygems'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'gd2'</span><br/><span class=\"kw1\">include</span> GD2<br/>\u00a0<br/><span class=\"kw1\">def</span> hough_transform<span class=\"br0\">(</span>img<span class=\"br0\">)</span><br/>  mx, my = img.<span class=\"me1\">w</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span>, img.<span class=\"me1\">h</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span><br/>  max_d = <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>mx<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> my<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  min_d = max_d <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  hough = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">img</span>.<span class=\"me1\">w</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{x} of #{img.w}\"</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">img</span>.<span class=\"me1\">h</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> img.<span class=\"me1\">pixel2color</span><span class=\"br0\">(</span>img.<span class=\"me1\">get_pixel</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">g</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">32</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"nu0\">180</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>          rad = a <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>::PI <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"br0\">)</span><br/>          d = <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>mx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>my<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span><br/>          hough<span class=\"br0\">[</span><span class=\"st0\">\"#{a.to_i}_#{d.to_i}\"</span><span class=\"br0\">]</span> = hough<span class=\"br0\">[</span><span class=\"st0\">\"#{a.to_i}_#{d.to_i}\"</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  heat = <span class=\"re2\">GD2::Image</span>.<span class=\"me1\">import</span> <span class=\"st0\">'heatmap.png'</span><br/>  out = <span class=\"re2\">GD2::Image::TrueColor</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">180</span>,max_d<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  max = hough.<span class=\"me1\">values</span>.<span class=\"me1\">max</span><br/>  <span class=\"kw3\">p</span> max<br/>  hough.<span class=\"me1\">each_pair</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span><br/>    a,d = k.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span><br/>    c = <span class=\"br0\">(</span>v <span class=\"sy0\">/</span> max<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><br/>    c = heat.<span class=\"me1\">get_pixel</span><span class=\"br0\">(</span>c,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    out.<span class=\"me1\">set_pixel</span><span class=\"br0\">(</span>a, max_d <span class=\"sy0\">+</span> d, c<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  out<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Ruby", "loc": 35, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'mathn'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'rubygems'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'gd2'</span><br/><span class=\"kw1\">include</span> GD2<br/>\u00a0<br/><span class=\"kw1\">def</span> hough_transform<span class=\"br0\">(</span>img<span class=\"br0\">)</span><br/>  mx, my = img.<span class=\"me1\">w</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span>, img.<span class=\"me1\">h</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span><br/>  max_d = <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>mx<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> my<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  min_d = max_d <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  hough = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">img</span>.<span class=\"me1\">w</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{x} of #{img.w}\"</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">img</span>.<span class=\"me1\">h</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> img.<span class=\"me1\">pixel2color</span><span class=\"br0\">(</span>img.<span class=\"me1\">get_pixel</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">g</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">32</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"nu0\">180</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>          rad = a <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>::PI <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"br0\">)</span><br/>          d = <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>mx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>y<span class=\"sy0\">-</span>my<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span><br/>          hough<span class=\"br0\">[</span><span class=\"st0\">\"#{a.to_i}_#{d.to_i}\"</span><span class=\"br0\">]</span> = hough<span class=\"br0\">[</span><span class=\"st0\">\"#{a.to_i}_#{d.to_i}\"</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  heat = <span class=\"re2\">GD2::Image</span>.<span class=\"me1\">import</span> <span class=\"st0\">'heatmap.png'</span><br/>  out = <span class=\"re2\">GD2::Image::TrueColor</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">180</span>,max_d<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  max = hough.<span class=\"me1\">values</span>.<span class=\"me1\">max</span><br/>  <span class=\"kw3\">p</span> max<br/>  hough.<span class=\"me1\">each_pair</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span><br/>    a,d = k.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span><br/>    c = <span class=\"br0\">(</span>v <span class=\"sy0\">/</span> max<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255</span><br/>    c = heat.<span class=\"me1\">get_pixel</span><span class=\"br0\">(</span>c,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    out.<span class=\"me1\">set_pixel</span><span class=\"br0\">(</span>a, max_d <span class=\"sy0\">+</span> d, c<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  out<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 83, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">imageio</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HoughTransform <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputData <span class=\"sy0\">=</span> readDataFromImage<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> minContrast <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> args<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>        inputData<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, args<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, minContrast<span class=\"br0\">)</span>.<span class=\"me1\">writeOutputImage</span><span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> readDataFromImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width <span class=\"sy0\">=</span> image.<span class=\"me1\">getWidth</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height <span class=\"sy0\">=</span> image.<span class=\"me1\">getHeight</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgbData <span class=\"sy0\">=</span> image.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, width, height, <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>, <span class=\"nu0\">0</span>, width<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arrayData <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until height<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rgb <span class=\"sy0\">=</span> rgbData<span class=\"br0\">(</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">)</span><br/>            rgb <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rgb <span class=\"sy0\">&amp;</span> 0xFF0000<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.30</span> + <span class=\"br0\">(</span><span class=\"br0\">(</span>rgb <span class=\"sy0\">&amp;</span> 0xFF00<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.59</span> +<br/>                    <span class=\"br0\">(</span>rgb <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.11</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>            arrayData<span class=\"br0\">(</span>x, height - <span class=\"nu0\">1</span> - y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rgb<br/>        <span class=\"br0\">}</span><br/>        arrayData<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ArrayData<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> update<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dataArray<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> value<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>thetaAxisSize<span class=\"sy0\">:</span> Int, rAxisSize<span class=\"sy0\">:</span> Int, minContrast<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxRadius <span class=\"sy0\">=</span> Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>Math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> halfRAxisSize <span class=\"sy0\">=</span> rAxisSize <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> outputData <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ArrayData<span class=\"br0\">(</span>thetaAxisSize, rAxisSize<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sinTable <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">(</span>thetaAxisSize<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cosTable <span class=\"sy0\">=</span> sinTable.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>theta <span class=\"sy0\">&lt;</span>- thetaAxisSize - <span class=\"nu0\">1</span> until -<span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> thetaRadians <span class=\"sy0\">=</span> theta <span class=\"sy0\">*</span> Math.<span class=\"me1\">PI</span> / thetaAxisSize<br/>            sinTable<span class=\"br0\">(</span>theta<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><br/>            cosTable<span class=\"br0\">(</span>theta<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>thetaRadians<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- height - <span class=\"nu0\">1</span> until -<span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- width - <span class=\"nu0\">1</span> until -<span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>contrast<span class=\"br0\">(</span>x, y, minContrast<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>theta <span class=\"sy0\">&lt;</span>- thetaAxisSize - <span class=\"nu0\">1</span> until -<span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> cosTable<span class=\"br0\">(</span>theta<span class=\"br0\">)</span> <span class=\"sy0\">*</span> x + sinTable<span class=\"br0\">(</span>theta<span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rScaled <span class=\"sy0\">=</span> Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> halfRAxisSize / maxRadius<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> + halfRAxisSize<br/>                    outputData.<span class=\"me1\">dataArray</span><span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"br0\">(</span>rScaled<span class=\"br0\">)</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>        outputData<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> writeOutputImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> max <span class=\"sy0\">=</span> Int.<span class=\"me1\">MinValue</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until height<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> dataArray<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span> max <span class=\"sy0\">=</span> v<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> BufferedImage<span class=\"br0\">(</span>width, height, BufferedImage.<span class=\"me1\">TYPE_INT_ARGB</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until height<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>dataArray<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">255.0</span> / max<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>            image.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, height - <span class=\"nu0\">1</span> - y, <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> | <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> | 0x90 | -0x01000000<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>image, <span class=\"st0\">\"PNG\"</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> contrast<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, minContrast<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> centerValue <span class=\"sy0\">=</span> dataArray<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">8</span> until -<span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">!=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newx <span class=\"sy0\">=</span> x + <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newy <span class=\"sy0\">=</span> y + <span class=\"br0\">(</span>i / <span class=\"nu0\">3</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>newx <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> newx <span class=\"sy0\">&lt;</span> width <span class=\"sy0\">&amp;&amp;</span> newy <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> newy <span class=\"sy0\">&lt;</span> height <span class=\"sy0\">&amp;&amp;</span><br/>                    Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>dataArray<span class=\"br0\">(</span>newx<span class=\"br0\">)</span><span class=\"br0\">(</span>newy<span class=\"br0\">)</span> - centerValue<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> minContrast<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dataArray <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SequenceL", "loc": 45, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>\u00a0<br/>hough: int(2) * int * int * int -&gt; int(2);<br/>hough(image(2), thetaAxisSize, rAxisSize, minContrast)\u00a0:=<br/>    let<br/>        initialResult[r,theta]\u00a0:= 0 foreach r within 1 ... rAxisSize, theta within 1 ... thetaAxisSize;<br/>\u00a0<br/>        result\u00a0:= houghHelper(image, minContrast, 1, 1, initialResult);<br/>\u00a0<br/>        max\u00a0:= vectorMax(vectorMax(result));<br/>    in<br/>        255 - min(round((result * 255 / max)), 255);<br/>\u00a0<br/>houghHelper(image(2), minContrast, x, y, result(2))\u00a0:=<br/>    let<br/>        thetaAxisSize\u00a0:= size(head(result));<br/>        rAxisSize\u00a0:= size(result);<br/>\u00a0<br/>        width\u00a0:= size(head(image));<br/>        height\u00a0:= size(image);<br/>        maxRadius\u00a0:= ceiling(sqrt(width^2 + height^2));<br/>        halfRAxisSize\u00a0:= rAxisSize / 2;<br/>\u00a0<br/>        rs[theta]\u00a0:= round((cos(theta) * x + sin(theta) * y) * halfRAxisSize / maxRadius) + halfRAxisSize<br/>                     foreach theta within (0 ... (thetaAxisSize-1)) * pi / thetaAxisSize;<br/>\u00a0<br/>        newResult[r,theta]\u00a0:= result[r,theta] + 1 when rs[theta] = r-1 else result[r,theta];<br/>\u00a0<br/>        nextResult\u00a0:= result when not checkContrast(image, x, y, minContrast) else newResult;<br/>\u00a0<br/>        nextX\u00a0:= 1 when x = width else x + 1;<br/>        nextY\u00a0:= y + 1 when x = width else y;<br/>    in<br/>        nextResult when x = width and y = height<br/>    else<br/>        houghHelper(image, minContrast, nextX, nextY, nextResult);<br/>\u00a0<br/>checkContrast(image(2), x, y, minContrast)\u00a0:= <br/>    let<br/>        neighbors[i,j]\u00a0:= image[i,j] when i &gt; 0 and i &lt; size(image) and j &gt; 0 and j &lt; size(image[i])<br/>                          foreach i within y-1 ... y+1, <br/>                                  j within x-1 ... x+1;<br/>    in<br/>        some(some(abs(image[y,x] - neighbors) &gt;= minContrast));</pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func hough<span class=\"br0\">(</span>im, width=<span class=\"nu0\">460</span>, height=<span class=\"nu0\">360</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    height = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>floor<span class=\"br0\">(</span>height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var xsize = im.<span class=\"me1\">getwidth</span><br/>    var ysize = im.<span class=\"me1\">getheight</span><br/>\u00a0<br/>    var ht = <span class=\"sy0\">%</span>s<span class=\"sy0\">|</span>Imager<span class=\"sy0\">|</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize <span class=\"sy0\">=&gt;</span> width, ysize <span class=\"sy0\">=&gt;</span> height<span class=\"br0\">)</span><br/>    var canvas = height.<span class=\"me1\">of</span> <span class=\"br0\">{</span> width.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    ht.<span class=\"me1\">box</span><span class=\"br0\">(</span>filled <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span>, color <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'white'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var rmax = hypot<span class=\"br0\">(</span>xsize, ysize<span class=\"br0\">)</span><br/>    var dr = <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>rmax <span class=\"sy0\">/</span> height<span class=\"br0\">)</span><br/>    var dth = <span class=\"br0\">(</span>Num.<span class=\"me1\">pi</span> <span class=\"sy0\">/</span> width<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> y,x <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^ysize ~X ^xsize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var col = im.<span class=\"me1\">getpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, y <span class=\"sy0\">=&gt;</span> y<span class=\"br0\">)</span><br/>        var <span class=\"br0\">(</span>r,g,b<span class=\"br0\">)</span> = col.<span class=\"me1\">rgba</span><br/>        <span class=\"br0\">(</span>r==<span class=\"nu0\">255</span> <span class=\"sy0\">&amp;&amp;</span> g==<span class=\"nu0\">255</span> <span class=\"sy0\">&amp;&amp;</span> b==<span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> ^width <span class=\"br0\">{</span><br/>            var th = dth<span class=\"sy0\">*</span>k<br/>            var r = <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>cos<span class=\"br0\">(</span>th<span class=\"br0\">)</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>sin<span class=\"br0\">(</span>th<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            var iry = <span class=\"br0\">(</span>height<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> int<span class=\"br0\">(</span>r<span class=\"sy0\">/</span>dr <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            ht.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> k, y <span class=\"sy0\">=&gt;</span> iry, color <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>canvas<span class=\"br0\">[</span>iry<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> ht<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var img = <span class=\"sy0\">%</span>s<span class=\"sy0\">|</span>Imager<span class=\"sy0\">|</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'Pentagon.png'</span><span class=\"br0\">)</span><br/>var ht = hough<span class=\"br0\">(</span>img<span class=\"br0\">)</span><br/>ht.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'Hough transform.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"text highlighted_source\">const WHITE=0xffFFff, X=0x010101;<br/>fcn houghTransform(image,hx=460,hy=360){<br/>   if(hy.isOdd) hy-=1; // hy argument must be even<br/>   out:=PPM(hx,hy,WHITE);<br/>   rMax:=image.w.toFloat().hypot(image.h);<br/>   dr,dTh:=rMax/(hy/2), (0.0).pi/hx;<br/>\u00a0<br/>   foreach y,x in (image.h,image.w){<br/>      if(image[x,y]==WHITE) continue;<br/>      foreach iTh in (hx){<br/>         th,r:=dTh*iTh, th.cos()*x + th.sin()*y;<br/>\t iry:=hy/2 + (r/dr + 0.5).floor();  // y==0 is top <br/>\t if(out[iTh,iry]&gt;0) out[iTh,iry]=out[iTh,iry] - X;<br/>      }<br/>   }<br/>   out<br/>}</pre>"}, {"lang": "zkl", "loc": 17, "block": "<pre class=\"text highlighted_source\">const WHITE=0xffFFff, X=0x010101;<br/>fcn houghTransform(image,hx=460,hy=360){<br/>   if(hy.isOdd) hy-=1; // hy argument must be even<br/>   out:=PPM(hx,hy,WHITE);<br/>   rMax:=image.w.toFloat().hypot(image.h);<br/>   dr,dTh:=rMax/(hy/2), (0.0).pi/hx;<br/>\u00a0<br/>   foreach y,x in (image.h,image.w){<br/>      if(image[x,y]==WHITE) continue;<br/>      foreach iTh in (hx){<br/>         th,r:=dTh*iTh, th.cos()*x + th.sin()*y;<br/>\t iry:=hy/2 + (r/dr + 0.5).floor();  // y==0 is top <br/>\t if(out[iTh,iry]&gt;0) out[iTh,iry]=out[iTh,iry] - X;<br/>      }<br/>   }<br/>   out<br/>}</pre>"}]}