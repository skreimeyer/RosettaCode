{"task": "First-class_functions", "blocks": [{"lang": "ActionScript", "loc": 22, "block": "<pre class=\"actionscript highlighted_source\">\u00a0<br/><span class=\"kw2\">var</span> cube:<span class=\"kw2\">Function</span> = <span class=\"kw2\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">Math</span>.<span class=\"kw3\">pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span>;<br/><span class=\"kw2\">var</span> cuberoot:<span class=\"kw2\">Function</span> = <span class=\"kw2\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">Math</span>.<span class=\"kw3\">pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw2\">function</span> compose<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, g:<span class=\"kw2\">Function</span><span class=\"br0\">)</span>:<span class=\"kw2\">Function</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span>x:<span class=\"kw3\">Number</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">var</span> functions:<span class=\"kw3\">Array</span> = <span class=\"br0\">[</span><span class=\"kw3\">Math</span>.<span class=\"kw3\">cos</span>, <span class=\"kw3\">Math</span>.<span class=\"kw3\">tan</span>, cube<span class=\"br0\">]</span>;<br/><span class=\"kw2\">var</span> inverse:<span class=\"kw3\">Array</span> = <span class=\"br0\">[</span><span class=\"kw3\">Math</span>.<span class=\"kw3\">acos</span>, <span class=\"kw3\">Math</span>.<span class=\"kw3\">atan</span>, cuberoot<span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"kw2\">function</span> test<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> functions.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Applying the composition to 0.5  </span><br/>\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>functions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, inverse<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>test<span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 56, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_IO</span>,<br/>     Ada.<span class=\"me1\">Integer_Text_IO</span>,<br/>     Ada.<span class=\"me1\">Text_IO</span>,<br/>     Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> First_Class_Functions <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Float_Text_IO</span>,<br/>       Ada.<span class=\"me1\">Integer_Text_IO</span>,<br/>       Ada.<span class=\"me1\">Text_IO</span>,<br/>       Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Sqr <span class=\"br0\">(</span>X\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> X ** <span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">end</span> Sqr;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> A_Function <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">function</span> <span class=\"br0\">(</span>X\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float;<br/>\u00a0<br/>   <span class=\"kw3\">generic</span><br/>      F, G\u00a0: A_Function;<br/>   <span class=\"kw3\">function</span> Compose <span class=\"br0\">(</span>X\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Compose <span class=\"br0\">(</span>X\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> F <span class=\"br0\">(</span>G <span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Compose;<br/>\u00a0<br/>   Functions\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> A_Function\u00a0:= <span class=\"br0\">(</span>Sin'<span class=\"kw3\">Access</span>,<br/>                                                           Cos'<span class=\"kw3\">Access</span>,<br/>                                                           Sqr'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>   Inverses \u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> A_Function\u00a0:= <span class=\"br0\">(</span>Arcsin'<span class=\"kw3\">Access</span>,<br/>                                                           Arccos'<span class=\"kw3\">Access</span>,<br/>                                                           Sqrt'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Functions'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         <span class=\"kw3\">function</span> Identity <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Compose <span class=\"br0\">(</span>Functions <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Inverses <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Test_Value\u00a0: Float\u00a0:= <span class=\"nu0\">0.5</span>;<br/>         Result    \u00a0: Float;<br/>      <span class=\"kw1\">begin</span><br/>         Result\u00a0:= Identity <span class=\"br0\">(</span>Test_Value<span class=\"br0\">)</span>;<br/>\u00a0<br/>         <span class=\"kw1\">if</span> Result = Test_Value <span class=\"kw1\">then</span><br/>            Put      <span class=\"br0\">(</span><span class=\"st0\">\"Example \"</span><span class=\"br0\">)</span>;<br/>            Put      <span class=\"br0\">(</span>I, Width =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>            Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" is perfect for the given test value.\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Put      <span class=\"br0\">(</span><span class=\"st0\">\"Example \"</span><span class=\"br0\">)</span>;<br/>            Put      <span class=\"br0\">(</span>I, Width =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>            Put      <span class=\"br0\">(</span><span class=\"st0\">\" is off by\"</span><span class=\"br0\">)</span>;<br/>            Put      <span class=\"br0\">(</span><span class=\"kw2\">abs</span> <span class=\"br0\">(</span>Result - Test_Value<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" for the given test value.\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> First_Class_Functions;</pre>"}, {"lang": "Aikido", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import math<br/>\u00a0<br/>function compose (f, g) {<br/>    return function (x) { return f(g(x)) }<br/>}<br/>\u00a0<br/>var fn  = [Math.sin, Math.cos, function(x) { return x*x*x }]<br/>var inv = [Math.asin, Math.acos, function(x) { return Math.pow(x, 1.0/3) }]<br/>\u00a0<br/>for (var i=0; i&lt;3; i++) {<br/>    var f = compose(inv[i], fn[i])<br/>    println(f(0.5))    // 0.5<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> F <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> power<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> <span class=\"kw24\">exp</span><span class=\"br0\">(</span><span class=\"kw24\">ln</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">*</span>power<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Add a user defined function and its inverse #</span><br/><span class=\"kw4\">PROC</span> cube <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"sy1\">*</span> x <span class=\"sy1\">*</span> x<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> cube root <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"sy1\">**</span> <span class=\"br0\">(</span>1<span class=\"sy1\">/</span>3<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># First class functions allow run-time creation of functions from functions #</span><br/><span class=\"coMULTI\"># return function compose(f,g)(x) == f(g(x)) #</span><br/><span class=\"kw4\">PROC</span> non standard compose <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f1<span class=\"sy1\">,</span> f2<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> f1<span class=\"br0\">(</span>f2<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># eg ELLA ALGOL 68RS #</span><br/><span class=\"kw4\">PROC</span> compose <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> g<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>F f2<span class=\"sy1\">,</span> g2<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> f2<span class=\"br0\">(</span>g2<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> g<span class=\"sy1\">,</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Or the classic \"o\" functional operator #</span><br/><span class=\"kw4\">PRIO</span> O <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"br0\">(</span>F<span class=\"sy1\">,</span>F<span class=\"br0\">)</span>F O <span class=\"sy1\">=</span> compose<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># first class functions should be able to be members of collection types #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span>F func list <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw24\">sin</span><span class=\"sy1\">,</span> <span class=\"kw24\">cos</span><span class=\"sy1\">,</span> cube<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span>F arc func list <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw24\">arc sin</span><span class=\"sy1\">,</span> <span class=\"kw24\">arc cos</span><span class=\"sy1\">,</span> cube root<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Apply functions from lists as easily as integers #</span><br/><span class=\"kw2\">FOR</span> index <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> func list <span class=\"kw2\">DO</span><br/>  <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> inverse f<span class=\"br0\">)</span> this <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>func list<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"sy1\">,</span> arc func list<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>inverse f <span class=\"kw6\">OF</span> this O f <span class=\"kw6\">OF</span> this<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re1\">.5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AppleScript", "loc": 56, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- Compose two functions, where each function is</span><br/><span class=\"co1\">-- a script object with a call(x) handler.</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            f<span class=\"co2\">'</span>s call<span class=\"br0\">(</span>g<span class=\"co2\">'</span>s call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> call<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"kw3\">script</span> increment<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> decrement<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> twice<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> half<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> cube<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">^</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">script</span> cuberoot<br/>    <span class=\"kw3\">on</span> call<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"kw3\">set</span> functions <span class=\"kw3\">to</span> <span class=\"br0\">{</span>increment, twice, cube<span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> inverses <span class=\"kw3\">to</span> <span class=\"br0\">{</span>decrement, half, cuberoot<span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> answers <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> answers <span class=\"kw3\">to</span> \u00ac<br/>        compose<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> inverses, \u00ac<br/>            <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> functions<span class=\"br0\">)</span>'s \u00ac<br/>        call<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>answers <span class=\"co1\">-- Result: {0.5, 0.5, 0.5}</span></pre>"}, {"lang": "AutoHotkey", "loc": 31, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><span class=\"co1\">; Set the floating-point precision</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> Float<span class=\"sy0\">,</span> <span class=\"nu0\">0.15</span><br/><span class=\"co1\">; Super-global variables for function objects</span><br/>Global F<span class=\"sy0\">,</span> G<br/><span class=\"co1\">; User-defined functions</span><br/>Cube<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> X <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><br/>CubeRoot<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> X <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">; Function arrays, Sin/ASin and Cos/ACos are built-in</span><br/>FuncArray1 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>Func<span class=\"br0\">(</span><span class=\"st0\">\"Sin\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  Func<span class=\"br0\">(</span><span class=\"st0\">\"Cos\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  Func<span class=\"br0\">(</span><span class=\"st0\">\"Cube\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>FuncArray2 <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>Func<span class=\"br0\">(</span><span class=\"st0\">\"ASin\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Func<span class=\"br0\">(</span><span class=\"st0\">\"ACos\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Func<span class=\"br0\">(</span><span class=\"st0\">\"CubeRoot\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"co1\">; Compose</span><br/>Compose<span class=\"br0\">(</span>FN1<span class=\"sy0\">,</span> FN2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   Static FG <span class=\"sy0\">:=</span> Func<span class=\"br0\">(</span><span class=\"st0\">\"ComposedFunction\"</span><span class=\"br0\">)</span><br/>   F <span class=\"sy0\">:=</span> FN1<span class=\"sy0\">,</span> G<span class=\"sy0\">:=</span> FN2<br/>   <span class=\"kw1\">Return</span> FG<br/><span class=\"br0\">}</span><br/>ComposedFunction<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> F<span class=\"sy0\">.</span><span class=\"br0\">(</span>G<span class=\"sy0\">.</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">; Run</span><br/>X <span class=\"sy0\">:=</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><br/>Result <span class=\"sy0\">:=</span> <span class=\"st0\">\"Input:`n\"</span> <span class=\"sy0\">.</span> X <span class=\"sy0\">.</span> <span class=\"st0\">\"`n`nOutput:\"</span><br/>For Index In FuncArray1<br/>   Result <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <span class=\"sy0\">.</span> Compose<span class=\"br0\">(</span>FuncArray1<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"sy0\">,</span> FuncArray2<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> First<span class=\"sy0\">-</span>Class Functions<span class=\"sy0\">,</span>\u00a0% Result<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "Axiom", "loc": 3, "block": "<pre class=\"text highlighted_source\">fns\u00a0:= [sin$Float, cos$Float, (x:Float):Float +-&gt; x^3]<br/>inv\u00a0:= [asin$Float, acos$Float, (x:Float):Float +-&gt; x^(1/3)]<br/>[(f*g) 0.5 for f in fns for g in inv]</pre>"}, {"lang": "BBC BASIC", "loc": 34, "block": "<pre class=\"text highlighted_source\">      REM Create some functions and their inverses:<br/>      DEF FNsin(a) = SIN(a)<br/>      DEF FNasn(a) = ASN(a)<br/>      DEF FNcos(a) = COS(a)<br/>      DEF FNacs(a) = ACS(a)<br/>      DEF FNcube(a) = a^3<br/>      DEF FNroot(a) = a^(1/3)<br/>\u00a0<br/>      dummy = FNsin(1)<br/>\u00a0<br/>      REM Create the collections (here structures are used):<br/>      DIM cA{Sin%, Cos%, Cube%}<br/>      DIM cB{Asn%, Acs%, Root%}<br/>      cA.Sin% = ^FNsin()\u00a0: cA.Cos% = ^FNcos()\u00a0: cA.Cube% = ^FNcube()<br/>      cB.Asn% = ^FNasn()\u00a0: cB.Acs% = ^FNacs()\u00a0: cB.Root% = ^FNroot()<br/>\u00a0<br/>      REM Create some function compositions:<br/>      AsnSin% = FNcompose(cB.Asn%, cA.Sin%)<br/>      AcsCos% = FNcompose(cB.Acs%, cA.Cos%)<br/>      RootCube% = FNcompose(cB.Root%, cA.Cube%)<br/>\u00a0<br/>      REM Test applying the compositions:<br/>      x = 1.234567\u00a0: PRINT x, FN(AsnSin%)(x)<br/>      x = 2.345678\u00a0: PRINT x, FN(AcsCos%)(x)<br/>      x = 3.456789\u00a0: PRINT x, FN(RootCube%)(x)<br/>      END<br/>\u00a0<br/>      DEF FNcompose(f%,g%)<br/>      LOCAL f$, p%<br/>      f$ = \"(x)=\" + CHR$&amp;A4 + \"(&amp;\" + STR$~f% + \")(\" + \\<br/>      \\             CHR$&amp;A4 + \"(&amp;\" + STR$~g% + \")(x))\"<br/>      DIM p% LEN(f$) + 4<br/>      $(p%+4) = f$\u00a0:\u00a0!p% = p%+4<br/>      = p%</pre>"}, {"lang": "Bori", "loc": 26, "block": "<pre class=\"text highlighted_source\">double acos (double d)\t{ return Math.acos(d); }<br/>double asin (double d)\t{ return Math.asin(d); }<br/>double cos (double d)\t{ return Math.cos(d); }<br/>double sin (double d)\t{ return Math.sin(d); }<br/>double croot (double d)\t{ return Math.pow(d, 1/3); }<br/>double cube (double x)\t{ return x * x * x; }<br/>\u00a0<br/>Var compose (Var f, Var g, double x)<br/>{<br/>\tFunc ff = f;<br/>\tFunc fg = g;<br/>\treturn ff(fg(x));<br/>}<br/>\u00a0<br/>void button1_onClick (Widget widget)<br/>{<br/>\tArray arr1 = [ sin, cos, cube ];<br/>\tArray arr2 = [ asin, acos, croot ];<br/>\u00a0<br/>\tstr s;<br/>\tfor (int i = 1; i &lt;= 3; i++)<br/>\t{<br/>\t\ts &lt;&lt; compose(arr1.get(i), arr2.get(i), 0.5) &lt;&lt; str.newline;\t<br/>\t}<br/>\tlabel1.setText(s);<br/>}</pre>"}, {"lang": "Bracmat", "loc": 17, "block": "<pre class=\"text highlighted_source\">( (sqrt=.!arg^1/2)<br/>&amp; (log=.e\\L!arg)<br/>&amp; (A=x2d (=.!arg^2) log (=.!arg*pi))<br/>&amp; ( B<br/>  = d2x sqrt (=.e^!arg) (=.!arg*pi^-1)<br/>  )<br/>&amp; ( compose<br/>  =   f g<br/>    .  \u00a0!arg:(?f.?g)<br/>      &amp; '(.($f)$(($g)$!arg))<br/>  )<br/>&amp;   whl<br/>  ' (\u00a0!A:%?F\u00a0?A<br/>    &amp;\u00a0!B:%?G\u00a0?B<br/>    &amp; out$((compose$(!F.!G))$3210)<br/>    )<br/>)</pre>"}, {"lang": "C", "loc": 72, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* declare a typedef for a function pointer */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>Class2Func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*A couple of functions with the above prototype */</span><br/><span class=\"kw4\">double</span> functionA<span class=\"br0\">(</span> <span class=\"kw4\">double</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> v<span class=\"sy0\">*</span>v<span class=\"sy0\">*</span>v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">double</span> functionB<span class=\"br0\">(</span><span class=\"kw4\">double</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* A function taking a function as an argument */</span><br/><span class=\"kw4\">double</span> Function1<span class=\"br0\">(</span> Class2Func f2<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> val <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f2<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*A function returning a function */</span><br/>Class2Func WhichFunc<span class=\"br0\">(</span> <span class=\"kw4\">int</span> idx<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>idx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"sy0\">&amp;</span>functionA <span class=\"sy0\">:</span> <span class=\"sy0\">&amp;</span>functionB<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* A list of functions */</span><br/>Class2Func funcListA<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">&amp;</span>functionA<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tan.html\"><span class=\"kw3\">tan</span></a> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Class2Func funcListB<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">&amp;</span>functionB<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/asin.html\"><span class=\"kw3\">asin</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/acos.html\"><span class=\"kw3\">acos</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan.html\"><span class=\"kw3\">atan</span></a> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Composing Functions */</span><br/><span class=\"kw4\">double</span> InvokeComposed<span class=\"br0\">(</span> Class2Func f1<span class=\"sy0\">,</span> Class2Func f2<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> val <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> f1<span class=\"br0\">(</span>f2<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sComposition <span class=\"br0\">{</span><br/>   Class2Func f1<span class=\"sy0\">;</span><br/>   Class2Func f2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>Composition<span class=\"sy0\">;</span><br/>\u00a0<br/>Composition Compose<span class=\"br0\">(</span> Class2Func f1<span class=\"sy0\">,</span> Class2Func f2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   Composition comp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sComposition<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   comp<span class=\"sy0\">-&gt;</span>f1 <span class=\"sy0\">=</span> f1<span class=\"sy0\">;</span><br/>   comp<span class=\"sy0\">-&gt;</span>f2 <span class=\"sy0\">=</span> f2<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> comp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> CallComposed<span class=\"br0\">(</span> Composition comp<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> val <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> comp<span class=\"sy0\">-&gt;</span>f1<span class=\"br0\">(</span> comp<span class=\"sy0\">-&gt;</span>f2<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"coMULTI\">/** * * * * * * * * * * * * * * * * * * * * * * * * * * */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> ix<span class=\"sy0\">;</span><br/>   Composition c<span class=\"sy0\">;</span><br/>\u00a0<br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Function1(functionA, 3.0) =\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> Function1<span class=\"br0\">(</span>WhichFunc<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ix<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       c <span class=\"sy0\">=</span> Compose<span class=\"br0\">(</span>funcListA<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"sy0\">,</span> funcListB<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Compostion\u00a0%d(0.9) =\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ix<span class=\"sy0\">,</span> CallComposed<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> <span class=\"nu16\">0.9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">delegate</span> Func<span class=\"sy0\">&lt;</span>A,C<span class=\"sy0\">&gt;</span> Composer<span class=\"sy0\">&lt;</span>A,B,C<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span>B,C<span class=\"sy0\">&gt;</span> f, Func<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span> g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> cube <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> croot <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>x, <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> fun <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span>, cube <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> inv <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Asin</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">Acos</span>, croot <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        Composer<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> compose <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> fun<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>fun<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 40, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">function</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> function<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> FunType<span class=\"sy4\">;</span><br/>\u00a0<br/>vector<span class=\"sy1\">&lt;</span>FunType<span class=\"sy1\">&gt;</span> A <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"kw3\">sin</span>, <span class=\"kw3\">cos</span>, <span class=\"kw3\">tan</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy2\">*</span>x<span class=\"sy2\">*</span>x<span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>vector<span class=\"sy1\">&lt;</span>FunType<span class=\"sy1\">&gt;</span> B <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"kw3\">asin</span>, <span class=\"kw3\">acos</span>, <span class=\"kw3\">atan</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">exp</span><span class=\"br0\">(</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> A, <span class=\"kw2\">typename</span> B, <span class=\"kw2\">typename</span> C<span class=\"sy1\">&gt;</span><br/>function<span class=\"sy1\">&lt;</span>C<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> compose<span class=\"br0\">(</span>function<span class=\"sy1\">&lt;</span>C<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> f, function<span class=\"sy1\">&lt;</span>B<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>f,g<span class=\"br0\">]</span><span class=\"br0\">(</span>A x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    vector<span class=\"sy1\">&lt;</span>FunType<span class=\"sy1\">&gt;</span> composedFuns<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> exNums <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu16\">0.0</span>, <span class=\"nu16\">0.2</span>, <span class=\"nu16\">0.4</span>, <span class=\"nu16\">0.6</span>, <span class=\"nu16\">0.8</span>, <span class=\"nu16\">1.0</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    transform<span class=\"br0\">(</span>B.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, B.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                A.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                back_inserter<span class=\"br0\">(</span>composedFuns<span class=\"br0\">)</span>,<br/>                compose<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> num<span class=\"sy4\">:</span> exNums<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> fun<span class=\"sy4\">:</span> composedFuns<span class=\"br0\">)</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> u8<span class=\"st0\">\"f<span class=\"es3\">\\u207B</span><span class=\"es3\">\\u00B9</span>.f(\"</span> <span class=\"sy1\">&lt;&lt;</span> num <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\") = \"</span> <span class=\"sy1\">&lt;&lt;</span> fun<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 3, "block": "<pre class=\"text highlighted_source\">module rosetta \"1.0.0\" {<br/>\timport ceylon.numeric \"1.2.1\";<br/>}</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>math<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>fns <span class=\"br0\">[</span>#<span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"sy0\">%</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>cos <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      inv <span class=\"br0\">[</span>#<span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>asin <span class=\"sy0\">%</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>acos <span class=\"sy0\">%</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span>expt <span class=\"sy0\">%</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>comp <span class=\"sy0\">%</span>1 <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> fns inv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 13, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Functions as values of a variable</span><br/>cube = <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Math.<span class=\"me1\">pow</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>cuberoot = <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Math.<span class=\"me1\">pow</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\"># Higher order function</span><br/>compose = <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Storing functions in a array</span><br/>fun = <span class=\"br0\">[</span>Math.<span class=\"me1\">sin</span><span class=\"sy0\">,</span> Math.<span class=\"me1\">cos</span><span class=\"sy0\">,</span> cube<span class=\"br0\">]</span><br/>inv = <span class=\"br0\">[</span>Math.<span class=\"me1\">asin</span><span class=\"sy0\">,</span> Math.<span class=\"me1\">acos</span><span class=\"sy0\">,</span> cuberoot<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Applying the composition to 0.5</span><br/>console.<span class=\"me1\">log</span> compose<span class=\"br0\">(</span>inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> fun<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span>\u200b\u200b\u200b\u200b\u200b\u200b\u200b</pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> compose <span class=\"br0\">(</span>f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cube <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cube-root <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"br0\">(</span>/ <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop with <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>      for func in <span class=\"br0\">(</span><span class=\"kw1\">list</span> #'<span class=\"kw1\">sin</span>  #'<span class=\"kw1\">cos</span>  #'cube     <span class=\"br0\">)</span><br/>      for inverse  in <span class=\"br0\">(</span><span class=\"kw1\">list</span> #'asin #'acos #'cube-root<span class=\"br0\">)</span><br/>      for composed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>compose inverse func<span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;(~A \u2218 ~A)(~A) = ~A~%\"</span><br/>                 inverse<br/>                 func<br/>                 <span class=\"kw1\">value</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> composed <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> dir <span class=\"sy0\">=</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>sin<span class=\"sy0\">,</span>  cos<span class=\"sy0\">,</span>  x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> inv <span class=\"sy0\">=</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>asin<span class=\"sy0\">,</span> acos<span class=\"sy0\">,</span> cbrt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// foreach (f, g; staticZip!(dir, inv))</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> f<span class=\"sy0\">;</span> dir<span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%6.3f\"</span><span class=\"sy0\">,</span> compose<span class=\"sy0\">!</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 11, "block": "<pre class=\"text highlighted_source\">import 'dart:math' as Math;<br/>cube(x) =&gt; x*x*x;<br/>cuberoot(x)  =&gt; Math.pow(x, 1/3);<br/>compose(f,g) =&gt; ((x)=&gt;f(g(x)));<br/>main(){<br/>  var functions = [Math.sin, Math.exp, cube];<br/>  var inverses = [Math.asin, Math.log, cuberoot];<br/>  for (int i = 0; i &lt; 3; i++){<br/>    print(compose(functions[i], inverses[i])(0.5));<br/>  }<br/>}</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 19, "block": "<pre class=\"text highlighted_source\">negate:<br/>\t- 0<br/>\u00a0<br/>set\u00a0:A [ @++ $ @negate @-- ]<br/>\u00a0<br/>set\u00a0:B [ @-- $ @++ @negate ]<br/>\u00a0<br/>test n:<br/>\tfor i range 0 -- len A:<br/>\t\tif /= n call compose @B! i @A! i n:<br/>\t\t\treturn false<br/>\ttrue<br/>\u00a0<br/>test to-num\u00a0!prompt \"Enter a number: \"<br/>if:<br/>\t!print \"f^-1(f(x)) = x\"<br/>else:<br/>\t!print \"Something went wrong.\"<br/>\u00a0</pre>"}, {"lang": "E", "loc": 9, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> sin<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"br0\">{</span> return x.<span class=\"me1\">sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> cos<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"br0\">{</span> return x.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> asin<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return x.<span class=\"me1\">asin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> acos<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return x.<span class=\"me1\">acos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return x <span class=\"sy0\">**</span> <span class=\"nu0\">3</span>     <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> curt<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return x <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> forward <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>sin<span class=\"sy0\">,</span>  cos<span class=\"sy0\">,</span>  cube<span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> reverse <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>asin<span class=\"sy0\">,</span> acos<span class=\"sy0\">,</span> curt<span class=\"br0\">]</span></pre>"}, {"lang": "EchoLisp", "loc": 17, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; adapted from Racket</span><br/><span class=\"co1\">;; (compose f g h ... ) is a built-in defined as\u00a0:</span><br/><span class=\"co1\">;; (define (compose f g) (\u03bb (x) (f (g x))))</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cube x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cube<span class=\"sy0\">-</span>root x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> funlist <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">sin</span> <span class=\"kw1\">cos</span> cube<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> ifunlist <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">asin</span> <span class=\"kw1\">acos</span> cube<span class=\"sy0\">-</span>root<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">f</span> funlist<span class=\"br0\">]</span> <span class=\"br0\">[</span>i ifunlist<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"br0\">(</span>compose i <span class=\"kw1\">f</span><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u2192 <br/>    <span class=\"nu0\">0.5</span>    <br/>    <span class=\"nu0\">0.4999999999999999</span>    <br/>    <span class=\"nu0\">0.5</span>   <br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 10, "block": "<pre class=\"text highlighted_source\">open number //sin,cos,asin,acos<br/>open list //zipWith<br/>\u00a0<br/>cube x = x ** 3<br/>croot x = x ** (1/3)<br/>\u00a0<br/>funclist = [sin, cos, cube]<br/>funclisti = [asin, acos, croot]<br/>\u00a0<br/>zipWith (\\f inversef -&gt; (inversef &lt;&lt; f) 0.5) funclist funclisti</pre>"}, {"lang": "Elena", "loc": 18, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import system'math.<br/>import extensions'routines.<br/>\u00a0<br/>extension op<br/>{<br/>    compose\u00a0: f\u00a0: g<br/>        = (self~g eval)~f eval.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>   var fs\u00a0:= (%\"mathOp.sin[0]\",\u00a0%\"mathOp.cos[0]\", { eval [ ^ self power:3.0r ] }).<br/>   var gs\u00a0:= (%\"mathOp.arcsin[0]\",\u00a0%\"mathOp.arccos[0]\", { eval[ ^ self power:(1.0r / 3) ]}).<br/>\u00a0<br/>   fs zip:gs by(:f:g)( 0.5r compose(f,g) );<br/>        forEach:printingLn.<br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule First_class_functions do<br/>  def task(val) do<br/>    as = [&amp;:math.sin/1, &amp;:math.cos/1, fn x -&gt; x * x * x end]<br/>    bs = [&amp;:math.asin/1, &amp;:math.acos/1, fn x -&gt;\u00a0:math.pow(x, 1/3) end]<br/>    Enum.zip(as, bs)<br/>    |&gt; Enum.each(fn {a,b} -&gt; IO.puts compose([a,b], val) end)<br/>  end<br/>\u00a0<br/>  defp compose(funs, x) do<br/>    Enum.reduce(funs, x, fn f,acc -&gt; f.(acc) end)<br/>  end<br/>end<br/>\u00a0<br/>First_class_functions.task(0.5)</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> first_class_functions <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">As</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">fun</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"me2\">sin</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"me2\">cos</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> cube<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Bs</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">fun</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"me2\">asin</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"me2\">acos</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> square_inverse<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Value: 1.5 Result: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">functional_composition</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">As</span><span class=\"sy1\">,</span> <span class=\"re5\">Bs</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">functional_composition</span><span class=\"br0\">(</span> <span class=\"re5\">Funs</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Funs</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">square</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">square_inverse</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> cube x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3.0</span><br/><span class=\"kw1\">let</span> croot x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">3.0</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">let</span> funclist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math.<span class=\"me1\">Sin</span><span class=\"sy0\">;</span> Math.<span class=\"me1\">Cos</span><span class=\"sy0\">;</span> cube<span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> funclisti <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math.<span class=\"me1\">Asin</span><span class=\"sy0\">;</span> Math.<span class=\"me1\">Acos</span><span class=\"sy0\">;</span> croot<span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> composed <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map2</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">)</span> funclist funclisti<br/>\u00a0<br/><span class=\"kw1\">let</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> composed <span class=\"kw1\">do</span> printfn <span class=\"st0\">\"%f\"</span> <span class=\"br0\">(</span>f <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: assocs combinators kernel math.functions prettyprint sequences\u00a0;<br/>IN: rosettacode.first-class-functions<br/>\u00a0<br/>CONSTANT: A { [ sin ] [ cos ] [ 3 ^ ] }<br/>CONSTANT: B { [ asin ] [ acos ] [ 1/3 ^ ] } <br/>\u00a0<br/>: compose-all ( seq1 seq2 -- seq ) [ compose ] 2map\u00a0;<br/>\u00a0<br/>: test-fcf ( -- )<br/>    0.5 A B compose-all<br/>    [ call( x -- y ) ] with map .\u00a0;</pre>"}, {"lang": "Fantom", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class FirstClassFns<br/>{<br/>  static |Obj -&gt; Obj| compose (|Obj -&gt; Obj| fn1, |Obj -&gt; Obj| fn2)<br/>  {<br/>    return |Obj x -&gt; Obj| { fn2 (fn1 (x)) }<br/>  }<br/>\u00a0<br/>  public static Void main () <br/>  {<br/>    cube\u00a0:= |Float a -&gt; Float| { a * a * a }<br/>    cbrt\u00a0:= |Float a -&gt; Float| { a.pow(1/3f) }<br/>\u00a0<br/>    |Float-&gt;Float|[] fns\u00a0:= [Float#sin.func, Float#cos.func, cube]<br/>    |Float-&gt;Float|[] inv\u00a0:= [Float#asin.func, Float#acos.func, cbrt]<br/>    |Float-&gt;Float|[] composed\u00a0:= fns.map |fn, i| { compose(fn, inv[i]) }<br/>\u00a0<br/>    composed.each |fn| { echo (fn(0.5f)) }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 22, "block": "<pre class=\"text highlighted_source\">: compose ( xt1 xt2 -- xt3 )<br/>  &gt;r &gt;r\u00a0:noname<br/>     r&gt; compile,<br/>     r&gt; compile,<br/>     postpone\u00a0;<br/>;<br/>\u00a0<br/>: cube  fdup fdup f* f*\u00a0;<br/>: cuberoot  1e 3e f/ f**\u00a0;<br/>\u00a0<br/>: table  create does&gt; swap cells + @\u00a0;<br/>\u00a0<br/>table fn      ' fsin ,  ' fcos ,  ' cube ,<br/>table inverse ' fasin , ' facos , ' cuberoot ,<br/>\u00a0<br/>: main<br/>  3 0 do<br/>    i fn i inverse compose  ( xt )<br/>    0.5e execute f.<br/>  loop\u00a0;<br/>\u00a0<br/>main    \\ 0.5 0.5 0.5</pre>"}, {"lang": "FreeBASIC", "loc": 73, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Include \"crt/math.bi\"  '' include math functions in C runtime library</span><br/>\u00a0<br/><span class=\"co1\">' Declare function pointer type</span><br/><span class=\"co1\">' This implicitly assumes default StdCall calling convention on Windows</span><br/><span class=\"kw1\">Type</span> Class2Func <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span><span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>  <br/>\u00a0<br/><span class=\"co1\">' A couple of functions with the above prototype</span><br/><span class=\"kw1\">Function</span> functionA<span class=\"br0\">(</span>v <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Return</span> v*v*v  <span class=\"co1\">'' cube of v</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> functionB<span class=\"br0\">(</span>v <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Exp</span><span class=\"br0\">(</span><span class=\"kw1\">Log</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>/<span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"co1\">'' same as cube root of v which would normally be v ^ (1.0/3.0) in FB</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' A function taking a function as an argument </span><br/><span class=\"kw1\">Function</span> function1<span class=\"br0\">(</span>f2 <span class=\"kw1\">As</span> Class2Func, val_ <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Return</span> f2<span class=\"br0\">(</span>val_<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' A function returning a function </span><br/><span class=\"kw1\">Function</span> whichFunc<span class=\"br0\">(</span>idx <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Class2Func<br/>   <span class=\"kw1\">Return</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>idx &lt; <span class=\"nu0\">4</span>, @functionA, @functionB<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Additional function needed to treat CDecl function pointer as StdCall</span><br/><span class=\"co1\">' Get compiler warning otherwise</span><br/><span class=\"kw1\">Function</span> cl2<span class=\"br0\">(</span>f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"kw1\">CDecl</span><span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Class2Func<br/>  <span class=\"kw1\">Return</span> CPtr<span class=\"br0\">(</span>Class2Func, f<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <br/>\u00a0<br/><span class=\"co1\">' A list of functions </span><br/><span class=\"co1\">' Using C Runtime library versions of trig functions as it doesn't appear</span><br/><span class=\"co1\">' to be possible to apply address operator (@) to FB's built-in versions</span><br/><span class=\"kw1\">Dim</span> funcListA<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Class2Func = <span class=\"br0\">{</span>@functionA, cl2<span class=\"br0\">(</span>@sin_<span class=\"br0\">)</span>,  cl2<span class=\"br0\">(</span>@cos_<span class=\"br0\">)</span>, cl2<span class=\"br0\">(</span>@tan_<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> funcListB<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Class2Func = <span class=\"br0\">{</span>@functionB, cl2<span class=\"br0\">(</span>@asin_<span class=\"br0\">)</span>, cl2<span class=\"br0\">(</span>@acos_<span class=\"br0\">)</span>, cl2<span class=\"br0\">(</span>@atan_<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">' Composing Functions</span><br/><span class=\"kw1\">Function</span> invokeComposed<span class=\"br0\">(</span>f1 <span class=\"kw1\">As</span> Class2Func, f2 <span class=\"kw1\">As</span> Class2Func, val_ <span class=\"kw1\">As</span> <span class=\"kw1\">double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>   <span class=\"kw1\">Return</span> f1<span class=\"br0\">(</span>f2<span class=\"br0\">(</span>val_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> Composition <br/>  <span class=\"kw1\">As</span> Class2Func f1, f2<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> compose<span class=\"br0\">(</span>f1 <span class=\"kw1\">As</span> Class2Func, f2 <span class=\"kw1\">As</span> Class2Func<span class=\"br0\">)</span> <span class=\"kw1\">As</span> Composition <span class=\"kw1\">Ptr</span><br/>  <span class=\"kw1\">Dim</span> comp <span class=\"kw1\">As</span> Composition <span class=\"kw1\">Ptr</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">SizeOf</span><span class=\"br0\">(</span>Composition<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  comp-&gt;f1 = f1<br/>  comp-&gt;f2 = f2<br/>  <span class=\"kw1\">Return</span> comp<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> callComposed<span class=\"br0\">(</span>comp <span class=\"kw1\">As</span> Composition <span class=\"kw1\">Ptr</span>, val_ <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> <span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Return</span> comp-&gt;f1<span class=\"br0\">(</span>comp-&gt;f2<span class=\"br0\">(</span>val_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> ix <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">Dim</span> c <span class=\"kw1\">As</span> Composition <span class=\"kw1\">Ptr</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"function1(functionA, 3.0) = \"</span>; <span class=\"kw1\">CSng</span><span class=\"br0\">(</span>function1<span class=\"br0\">(</span>whichFunc<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> ix = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>  c = compose<span class=\"br0\">(</span>funcListA<span class=\"br0\">(</span>ix<span class=\"br0\">)</span>, funcListB<span class=\"br0\">(</span>ix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Composition\"</span>; ix; <span class=\"st0\">\"(0.9) = \"</span>; <span class=\"kw1\">CSng</span><span class=\"br0\">(</span>callComposed<span class=\"br0\">(</span>c, <span class=\"nu0\">0.9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Deallocate</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 36, "block": "<pre class=\"text highlighted_source\"># Function composition<br/>Composition\u00a0:= function(f, g)<br/>  local h;<br/>  h\u00a0:= function(x)<br/>    return f(g(x));<br/>  end;<br/>  return h;<br/>end;<br/>\u00a0<br/># Apply each function in list u, to argument x<br/>ApplyList\u00a0:= function(u, x)<br/>  local i, n, v;<br/>  n\u00a0:= Size(u);<br/>  v\u00a0:= [ ];<br/>  for i in [1 .. n] do<br/>    v[i]\u00a0:= u[i](x);<br/>  od;<br/>  return v;<br/>end;<br/>\u00a0<br/># Inverse and Sqrt are in the built-in library. Note that Sqrt yields values in cyclotomic fields.<br/># For example,<br/>#    gap&gt; Sqrt(7);<br/>#    E(28)^3-E(28)^11-E(28)^15+E(28)^19-E(28)^23+E(28)^27<br/># where E(n) is a primitive n-th root of unity<br/>a\u00a0:= [ i -&gt; i + 1, Inverse, Sqrt ];<br/># [ function( i ) ... end, &lt;Operation \"InverseImmutable\"&gt;, &lt;Operation \"Sqrt\"&gt; ]<br/>b\u00a0:= [ i -&gt; i - 1, Inverse, x -&gt; x*x ];<br/># [ function( i ) ... end, &lt;Operation \"InverseImmutable\"&gt;, function( x ) ... end ]<br/>\u00a0<br/># Compose each couple<br/>z\u00a0:= ListN(a, b, Composition);<br/>\u00a0<br/># Now a test<br/>ApplyList(z, 3);<br/>[ 3, 3, 3 ]</pre>"}, {"lang": "Go", "loc": 27, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"math\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// user-defined function, per task.  Other math functions used are built-in.</span><br/><span class=\"kw4\">func</span> cube<span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// ffType and compose function taken from Function composition task</span><br/><span class=\"kw1\">type</span> ffType <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> compose<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> g ffType<span class=\"sy1\">)</span> ffType <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span>g<span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// collection A</span><br/>    funclist <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>ffType<span class=\"sy1\">{</span>math<span class=\"sy3\">.</span><span class=\"me1\">Sin</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span><span class=\"me1\">Cos</span><span class=\"sy1\">,</span> cube<span class=\"sy1\">}</span><br/>    <span class=\"co1\">// collection B</span><br/>    funclisti <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>ffType<span class=\"sy1\">{</span>math<span class=\"sy3\">.</span>Asin<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Acos<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Cbrt<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">3</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// apply composition and show result</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>compose<span class=\"sy1\">(</span>funclisti<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> funclist<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])(</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> compose <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f, g <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span> x <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\">cube <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>cube x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3.0</span><br/>\u00a0<br/>croot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>croot x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- compose already exists in Haskell as the `.` operator</span><br/><span class=\"co1\">-- compose\u00a0:: (a -&gt; b) -&gt; (b -&gt; c) -&gt; a -&gt; c</span><br/><span class=\"co1\">-- compose f g = \\x -&gt; g (f x)</span><br/>\u00a0<br/>funclist <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">]</span><br/>funclist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a><span class=\"sy0\">,</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a><span class=\"sy0\">,</span>  cube <span class=\"br0\">]</span><br/>\u00a0<br/>invlist <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">]</span><br/>invlist  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:asin\"><span class=\"kw3\">asin</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:acos\"><span class=\"kw3\">acos</span></a><span class=\"sy0\">,</span> croot<span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\f i <span class=\"sy0\">-&gt;</span> f <span class=\"sy0\">.</span> i <span class=\"sy0\">$</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> funclist invlist </pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> compose <br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>\u00a0<br/>    fun <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>sin<span class=\"sy0\">,</span><span class=\"kw4\">cos</span><span class=\"sy0\">,</span>cube<span class=\"br0\">]</span><br/>    inv <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"kw4\">asin</span><span class=\"sy0\">,</span><span class=\"kw4\">acos</span><span class=\"sy0\">,</span>cuberoot<span class=\"br0\">]</span><br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">0.5</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>inv <span class=\"kw1\">do</span> <br/>       <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"f(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\")\u00a0:= \"</span><span class=\"sy0\">,</span> compose<span class=\"br0\">(</span>inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>fun<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> x<span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>x<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cuberoot<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> x <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">./</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\">   sin=:  <span class=\"nu0\">1</span>&amp;o.<br/>   cos=:  <span class=\"nu0\">2</span>&amp;o.<br/>  cube=: ^&amp;<span class=\"nu0\">3</span><br/>square=: *:<br/>  unqo=: `:<span class=\"nu0\">6</span><br/>  unqcol=: `:<span class=\"nu0\">0</span><br/>  quot=: <span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'{.u`'</span><span class=\"st_h\">''</span><span class=\"st_h\">''</span><br/>  A=: sin`cos`cube`square<br/>  B=: monad def<span class=\"st_h\">'y unqo inv quot'</span>\"<span class=\"nu0\">0</span> A<br/>  BA=. A dyad def<span class=\"st_h\">'x <a class=\"__cf_email__\" data-cfemail=\"deabb0afb19e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(y unqo) quot'</span>\"<span class=\"nu0\">0</span> B</pre>"}, {"lang": "Java", "loc": 70, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> FirstClass<span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">interface</span> Function<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><br/>\t\tB apply<span class=\"br0\">(</span>A x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"sy0\">&lt;</span>A,B,C<span class=\"sy0\">&gt;</span> Function<span class=\"sy0\">&lt;</span>A, C<span class=\"sy0\">&gt;</span> compose<span class=\"br0\">(</span><br/>\t\t\t<span class=\"kw2\">final</span> Function<span class=\"sy0\">&lt;</span>B, C<span class=\"sy0\">&gt;</span> f, <span class=\"kw2\">final</span> Function<span class=\"sy0\">&lt;</span>A, B<span class=\"sy0\">&gt;</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">return</span> <span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span>A, C<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> C apply<span class=\"br0\">(</span>A x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw2\">return</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>g.<span class=\"me1\">apply</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;&gt;</span> functions =<br/>\t\t\t<span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>,<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tfunctions.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfunctions.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">tan</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfunctions.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> x <span class=\"sy0\">*</span> x<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;&gt;</span> inverse = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>,<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tinverse.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">acos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tinverse.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">atan</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tinverse.<span class=\"me1\">add</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"kw2\">new</span> Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a> <span class=\"kw2\">public</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> apply<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Compositions:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> functions.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>functions.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, inverse.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Hard-coded compositions:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">acos</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">tan</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">atan</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 23, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// Functions as values of a variable</span><br/><span class=\"kw1\">var</span> cube <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> cuberoot <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Higher order function</span><br/><span class=\"kw1\">var</span> compose <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Storing functions in a array</span><br/><span class=\"kw1\">var</span> fun <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"sy0\">,</span> cube<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> inv <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">asin</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">acos</span><span class=\"sy0\">,</span> cuberoot<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// Applying the composition to 0.5</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> fun<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/julia<br/>\u00a0<br/>function compose(f::Function, g::Function)<br/>  return x -&gt; f(g(x))<br/>end<br/>\u00a0<br/>value = 0.5<br/>for pair in [(sin, asin), (cos, acos), (x -&gt; x^3, x -&gt; x^(1/3))]<br/>  func, inverse = pair<br/>  println(compose(func, inverse)(value))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun compose<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Double,  g<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Double <span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Double  <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun cube<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> d <span class=\"sy0\">*</span> d <span class=\"sy0\">*</span> d<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> listA <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Math<span class=\"sy0\">::</span>sin, Math<span class=\"sy0\">::</span>cos, <span class=\"sy0\">::</span>cube<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> listB <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Math<span class=\"sy0\">::</span>asin, Math<span class=\"sy0\">::</span>acos, Math<span class=\"sy0\">::</span>cbrt<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>compose<span class=\"br0\">(</span>listA<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, listB<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lambdatalk", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">{</span>def cube <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:x<span class=\"br0\">}</span> <span class=\"br0\">{</span>pow\u00a0:x <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>def cuberoot <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:x<span class=\"br0\">}</span> <span class=\"br0\">{</span>pow\u00a0:x <span class=\"br0\">{</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>def compose <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:g\u00a0:x<span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span> <span class=\"br0\">{</span>:g\u00a0:x<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>def fun <span class=\"kw1\">sin</span> <span class=\"kw1\">cos</span> cube<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>def inv <span class=\"kw1\">asin</span> <span class=\"kw1\">acos</span> cuberoot<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>def <span class=\"kw1\">display</span> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:i<span class=\"br0\">}</span> <br/>  <span class=\"br0\">{</span>br<span class=\"br0\">}</span><span class=\"br0\">{</span>compose <span class=\"br0\">{</span>nth\u00a0:i <span class=\"br0\">{</span>fun<span class=\"br0\">}</span><span class=\"br0\">}</span> <br/>               <span class=\"br0\">{</span>nth\u00a0:i <span class=\"br0\">{</span>inv<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"nu0\">0.5</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"kw1\">map</span> <span class=\"kw1\">display</span> <span class=\"br0\">{</span>serie <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>Output:<br/><span class=\"nu0\">0.5</span> <br/><span class=\"nu0\">0.49999999999999994</span> <br/><span class=\"nu0\">0.5000000000000001</span><br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 30, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>define cube(x::decimal) =&gt; {<br/>\treturn #x -&gt; pow(3.0)<br/>}<br/>\u00a0<br/>define cuberoot(x::decimal) =&gt; {<br/>\treturn #x -&gt; pow(1.0/3.0)<br/>}<br/>\u00a0<br/>define compose(f, g, v) =&gt; {<br/>\treturn {<br/>\t\treturn #f -&gt; detach -&gt; invoke(#g -&gt; detach -&gt; invoke(#1))<br/>\t} -&gt; detach -&gt; invoke(#v)<br/>}<br/>\u00a0<br/>\u00a0<br/>local(functions = array({return #1 -&gt; sin}, {return #1 -&gt; cos}, {return cube(#1)}))<br/>local(inverse = array({return #1 -&gt; asin}, {return #1 -&gt; acos}, {return cuberoot(#1)}))<br/>\u00a0<br/>loop(3)<br/>\tstdoutnl(<br/>\t\tcompose(<br/>\t\t\t#functions -&gt; get(loop_count),<br/>\t\t\t#inverse -&gt; get(loop_count),<br/>\t\t\t0.5<br/>\t\t)<br/>\t)<br/>\u00a0<br/>/loop</pre>"}, {"lang": "Lingo", "loc": 12, "block": "<pre class=\"text highlighted_source\">-- sin, cos and sqrt are built-in, square, asin and acos are user-defined<br/>A = [#sin, #cos, #square]<br/>B = [#asin, #acos, #sqrt]<br/>\u00a0<br/>testValue = 0.5<br/>\u00a0<br/>repeat with i = 1 to 3<br/>  -- for implementation details of compose() see https://www.rosettacode.org/wiki/Function_composition#Lingo<br/>  f = compose(A[i], B[i])<br/>  res = call(f, _movie, testValue)<br/>  put res = testValue<br/>end repeat</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>g<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>fn <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"kw3\">math.sin</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.cos</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">^</span><span class=\"nu0\">3</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>inv <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"kw3\">math.asin</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.acos</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> compose<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> inv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckFirst {<br/>      N=10<br/>      A=lambda N (x) -&gt; {<br/>            =N^X<br/>      }<br/>      Print A(3)=1000<br/>      Inventory K= \"lam\":=A<br/>      Print K(\"lam\")(5)=100000<br/>      Function Reverse(f) {<br/>            =lambda f (x)-&gt;{<br/>                  =1/f(x)<br/>            }<br/>      }<br/>      B=Reverse(A)<br/>      Print 1/B(3)=A(3)<br/>      \\\\ A get a new lambda<br/>      A=lambda (x)-&gt;x*5<br/>      B=Reverse(A)<br/>      Print 1/B(3)=A(3)<br/>      Print B(3), A(3), K(\"lam\")(3)<br/>}<br/>CheckFirst<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; A\u00a0:= [ sin, cos, x -&gt; x^3 ]:<br/>&gt; B\u00a0:= [ arcsin, arccos, rcurry( surd, 3 ) ]:<br/>&gt; zip( `@`, A, B )( 2/3 );<br/>                            [2/3, 2/3, 2/3]<br/>\u00a0<br/>&gt; zip( `@`, B, A )( 2/3 );<br/>                            [2/3, 2/3, 2/3]<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">funcs = {Sin, Cos, #^3 &amp;};<br/>funcsi = {ArcSin, ArcCos, #^(1/3) &amp;};<br/>compositefuncs = Composition @@@ Transpose[{funcs, funcsi}];<br/>Table[i[0.666], {i, compositefuncs}]</pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">a: [sin, cos, lambda([x], x^3)]$<br/>b: [asin, acos, lambda([x], x^(1/3))]$<br/>compose(f, g)\u00a0:= buildq([f, g], lambda([x], f(g(x))))$<br/>map(lambda([fun], fun(x)), map(compose, a, b));<br/>[x, x, x]</pre>"}, {"lang": "Mercury", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module firstclass.<br/>\u00a0<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module exception, list, math, std_util.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    Forward = [sin,  cos,  (func(X) = ln(X))],<br/>    Reverse = [asin, acos, (func(X) = exp(X))],<br/>    Results = map_corresponding(<br/>        (func(F, R) = compose(R, F, 0.5)), <br/>        Forward, Reverse),<br/>    write_list(Results, \", \", write_float,\u00a0!IO),<br/>    write_string(\"\\n\",\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 17, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Math;<br/>using Nemerle.Collections.NCollectionsExtensions;<br/>\u00a0<br/>module FirstClassFunc<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def cube = fun (x) {x * x * x};<br/>        def croot = fun (x) {Pow(x, 1.0/3.0)};<br/>        def compose = fun(f, g) {fun (x) {f(g(x))}};<br/>        def funcs = [Sin, Cos, cube];<br/>        def ifuncs = [Asin, Acos, croot];<br/>        WriteLine($[compose(f, g)(0.5) | (f, g) in ZipLazy(funcs, ifuncs)]);<br/>    }<br/>}</pre>"}, {"lang": "newLISP", "loc": 13, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>compose f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#expand\"><span class=\"kw1\">expand</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re5\">'f</span> <span class=\"re5\">'g</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#expand\"><span class=\"kw1\">expand</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re5\">'f</span> <span class=\"re5\">'g</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>cube x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>cube<span class=\"sy1\">-</span>root x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> x <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> x <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> functions <span class=\"sy0\">'</span><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sin\"><span class=\"kw1\">sin</span></a>  <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cos\"><span class=\"kw1\">cos</span></a>  cube<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#sin\"><span class=\"kw1\">sin</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cos\"><span class=\"kw1\">cos</span></a> cube<span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> inverses  <span class=\"sy0\">'</span><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#asin\"><span class=\"kw1\">asin</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#acos\"><span class=\"kw1\">acos</span></a> cube<span class=\"sy1\">-</span>root<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#asin\"><span class=\"kw1\">asin</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#acos\"><span class=\"kw1\">acos</span></a> cube<span class=\"sy1\">-</span>root<span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <span class=\"br0\">(</span>fn <span class=\"br0\">(</span>f g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>compose f g<span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> functions inverses<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 27, "block": "<pre class=\"text highlighted_source\">from math import nil<br/>\u00a0<br/>proc cube(x: float64)\u00a0: float64 {.procvar.} =<br/>  math.pow(x, 3)<br/>\u00a0<br/>proc cuberoot(x: float64)\u00a0: float64 {.procvar.} =<br/>  math.pow(x, 1/3)<br/>\u00a0<br/>proc compose[A](f: proc(x: A): A, g: proc(x: A): A)\u00a0: (proc(x: A): A) =<br/>  proc c(x: A): A {.closure.} =<br/>    f(g(x))<br/>  return c<br/>\u00a0<br/>proc sin(x: float64)\u00a0: float64 {.procvar.} =<br/>  math.sin(x)<br/>proc asin(x: float64)\u00a0: float64 {.procvar.}=<br/>  math.arcsin(x)<br/>proc cos(x: float64)\u00a0: float64 {.procvar.} =<br/>  math.cos(x)<br/>proc acos(x: float64)\u00a0: float64 {.procvar.} =<br/>  math.arccos(x)<br/>\u00a0<br/>var fun = @[sin, cos, cube]<br/>var inv = @[asin, acos, cuberoot]<br/>\u00a0<br/>for i in 0..2:<br/>  echo $compose(inv[i], fun[i])(0.5)</pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> cube x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> cube <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> croot x <span class=\"sy0\">=</span> x <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> croot <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> compose f g <span class=\"sy0\">=</span> <span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>g x<span class=\"br0\">)</span> <span class=\"sy0\">;;</span>  <span class=\"co1\">(* we could have written \"let compose f g x = f (g x)\" but we show this for clarity *)</span><br/><span class=\"kw1\">val</span> compose <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">'</span>c <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>c <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>b <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> funclist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsin\"><span class=\"kw3\">sin</span></a><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a><span class=\"sy0\">;</span> cube<span class=\"br0\">]</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> funclist <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;;</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;;</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> funclisti <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALasin\"><span class=\"kw3\">asin</span></a><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALacos\"><span class=\"kw3\">acos</span></a><span class=\"sy0\">;</span> croot<span class=\"br0\">]</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> funclisti <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;;</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;;</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map2 <span class=\"br0\">(</span><span class=\"kw1\">fun</span> f inversef <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>compose inversef f<span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> funclist funclisti <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"sy0\">;</span> <span class=\"nu0\">0.499999999999999889</span><span class=\"sy0\">;</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span></pre>"}, {"lang": "Octave", "loc": 16, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> x<span class=\"sy2\">.^</span><span class=\"nu0\">3</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> croot<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> x<span class=\"sy2\">.^</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>compose <span class=\"sy3\">=</span> <span class=\"co7\">@</span><span class=\"br0\">(</span>f<span class=\"sy5\">,</span>g<span class=\"br0\">)</span> <span class=\"co7\">@</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0<br/>f1 <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"co7\">@sin</span><span class=\"sy5\">,</span> <span class=\"co7\">@cos</span><span class=\"sy5\">,</span> <span class=\"co7\">@cube</span><span class=\"br0\">}</span><span class=\"sy5\">;</span><br/>f2 <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"co7\">@asin</span><span class=\"sy5\">,</span> <span class=\"co7\">@acos</span><span class=\"sy5\">,</span> <span class=\"co7\">@croot</span><span class=\"br0\">}</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">3</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>f1<span class=\"br0\">{</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">}</span><span class=\"sy5\">,</span> f2<span class=\"br0\">{</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu19\">.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">endfor</span></pre>"}, {"lang": "Oforth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: compose(f, g)   #[ g perform f perform ]\u00a0;<br/>\u00a0<br/>[ #cos, #sin, #[ 3 pow ] ] [ #acos, #asin, #[ 3 inv powf ] ] zipWith(#compose)<br/>map(#[ 0.5 swap perform ]) conform(#[ 0.5 == ]) println<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 21, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Compose</span> F G<span class=\"br0\">}</span><br/>    <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>F <span class=\"br0\">{</span>G X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Cube</span> X<span class=\"br0\">}</span> <span class=\"br0\">{</span>Number<span class=\"sy0\">.</span>pow X 3<span class=\"sy0\">.</span>0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">CubeRoot</span> X<span class=\"br0\">}</span> <span class=\"br0\">{</span>Number<span class=\"sy0\">.</span>pow X 1<span class=\"sy0\">.</span>0<span class=\"sy0\">/</span>3<span class=\"sy0\">.</span>0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><br/>     F <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Float<span class=\"sy0\">.</span>sin  Float<span class=\"sy0\">.</span>cos  Cube<span class=\"br0\">]</span><br/>     I <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Float<span class=\"sy0\">.</span>asin Float<span class=\"sy0\">.</span>acos CubeRoot<span class=\"br0\">]</span><br/>  <span class=\"kw1\">do</span><br/>     <span class=\"br0\">{</span>Show <span class=\"br0\">{</span><span class=\"br0\">{</span>Compose I F<span class=\"br0\">}</span> 0<span class=\"sy0\">.</span>5<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">compose<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>g<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  x <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>fcf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  A<span class=\"sy0\">=</span><span class=\"br0\">[</span>x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  B<span class=\"sy0\">=</span><span class=\"br0\">[</span>x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">asin</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">acos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#A<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>compose<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>B<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu2\">.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span> <span class=\"st_h\">':trig'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> compose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$f</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$g</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$cube</span>  <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$croot</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@flist1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">\\&amp;Math</span><span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">::</span><a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"sy0\">,</span> <span class=\"re0\">\\&amp;Math</span><span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">::</span><a href=\"http://perldoc.perl.org/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$cube</span>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@flist2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">\\&amp;asin</span><span class=\"sy0\">,</span>               <span class=\"re0\">\\&amp;acos</span><span class=\"sy0\">,</span>               <span class=\"re0\">$croot</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>    compose<span class=\"br0\">(</span><span class=\"re0\">$flist1</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$flist2</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span>   <br/><span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>\u2218<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>\ud835\udc54<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>\ud835\udc53<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span> \\<span class=\"kw1\">x</span> <span class=\"br0\">{</span> \ud835\udc54 \ud835\udc53 <span class=\"kw1\">x</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> \\\ud835\udc34 <span class=\"sy0\">=</span> <span class=\"re0\">&amp;sin</span><span class=\"sy0\">,</span>  <span class=\"re0\">&amp;cos</span><span class=\"sy0\">,</span>  <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">**</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> \\\ud835\udc35 <span class=\"sy0\">=</span> <span class=\"re0\">&amp;asin</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;acos</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">**</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>5<span class=\"br0\">)</span> <span class=\"kw1\">for</span> \ud835\udc34 <span class=\"kw1\">Z</span>\u2218 \ud835\udc35</pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">sequence ctable = {}<br/>\u00a0<br/>function compose(integer f, integer g)<br/>    ctable = append(ctable,{f,g})<br/>    return length(ctable)   <br/>end function<br/>\u00a0<br/>function call_composite(integer f, atom x)<br/>integer g<br/>    {f,g} = ctable[f]<br/>    return call_func(f,{call_func(g,{x})})<br/>end function<br/>\u00a0<br/>function plus1(atom x)<br/>    return x+1<br/>end function<br/>\u00a0<br/>function halve(atom x)<br/>    return x/2<br/>end function<br/>\u00a0<br/>constant m = compose(routine_id(\"halve\"),routine_id(\"plus1\"))<br/>\u00a0<br/>?call_composite(m,1)    -- displays 1<br/>?call_composite(m,4)    -- displays 2.5</pre>"}, {"lang": "PHP", "loc": 13, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$compose</span> <span class=\"sy0\">=</span> <span class=\"kw2\">function</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">function</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$fn</span>  <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'sin'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'cos'</span><span class=\"sy0\">,</span> <span class=\"kw2\">function</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$inv</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'asin'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'acos'</span><span class=\"sy0\">,</span> <span class=\"kw2\">function</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"re0\">$compose</span><span class=\"br0\">(</span><span class=\"re0\">$inv</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$fn</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">echo</span> <span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"nu19\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> PHP_EOL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>(de compose (F G)<br/>   (curry (F G) (X)<br/>      (F (G X)) ) )<br/>\u00a0<br/>(de cube (X)<br/>   (pow X 3.0) )<br/>\u00a0<br/>(de cubeRoot (X)<br/>   (pow X 0.3333333) )<br/>\u00a0<br/>(mapc<br/>   '((Fun Inv)<br/>      (prinl (format ((compose Inv Fun) 0.5) *Scl)) )<br/>   '(sin  cos  cube)<br/>   '(asin acos cubeRoot) )</pre>"}, {"lang": "PostScript", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% PostScript has 'sin' and 'cos', but not these<br/>/asin { dup dup 1. add exch 1. exch sub mul sqrt atan } def<br/>/acos { dup dup 1. add exch 1. exch sub mul sqrt exch atan } def<br/>\u00a0<br/>/cube { 3 exp } def<br/>/cuberoot { 1. 3. div exp } def<br/>\u00a0<br/>/compose {\u00a0% f g -&gt; { g f }<br/>  [ 3 1 roll exch<br/> \u00a0% procedures are not executed when encountered directly<br/> \u00a0% insert an 'exec' after procedures, but not after operators<br/>  1 index type /operatortype ne { /exec cvx exch } if<br/>  dup type /operatortype ne { /exec cvx } if<br/>  ] cvx<br/>} def<br/>\u00a0<br/>/funcs [ /sin load /cos load /cube load ] def<br/>/ifuncs [ /asin load /acos load /cuberoot load ] def<br/>\u00a0<br/>0 1 funcs length 1 sub { /i exch def<br/>  ifuncs i get funcs i get compose<br/>  .5 exch exec ==<br/>} for<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 25, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>compose<span class=\"br0\">(</span>F<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span> FG<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tFG <span class=\"sy6\">=</span>  \\X^Z^<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>G<span class=\"sy4\">,</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>F<span class=\"sy4\">,</span>Y<span class=\"sy4\">,</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>cube<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">**</span> <span class=\"nu0\">3</span><span class=\"sy4\">.</span><br/>\u00a0<br/>cube_root<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>first_class <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"sy4\">,</span> cube<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tIL <span class=\"sy6\">=</span> <span class=\"br0\">[</span>asin<span class=\"sy4\">,</span> acos<span class=\"sy4\">,</span> cube_root<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we create the composed functions</span><br/>\tmaplist<span class=\"br0\">(</span>compose<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> IL<span class=\"sy4\">,</span> Lst<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we call the functions</span><br/>\tmaplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"sy4\">,</span><span class=\"nu0\">0.5</span><span class=\"sy4\">,</span><span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we display the results</span><br/>\tmaplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 15, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Some built in functions and their inverses</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sin<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> acos<span class=\"sy0\">,</span> asin<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Add a user defined function and its inverse</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> cube <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> x: x * x * x<br/><span class=\"sy0\">&gt;&gt;&gt;</span> croot <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> x: x ** <span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"nu0\">3.0</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># First class functions allow run-time creation of functions from functions</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># return function compose(f,g)(x) == f(g(x))</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> compose <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f1<span class=\"sy0\">,</span> f2: <span class=\"br0\">(</span> <span class=\"kw1\">lambda</span> x: f1<span class=\"br0\">(</span>f2<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># first class functions should be able to be members of collection types</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> funclist <span class=\"sy0\">=</span> <span class=\"br0\">[</span>sin<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> cube<span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> funclisti <span class=\"sy0\">=</span> <span class=\"br0\">[</span>asin<span class=\"sy0\">,</span> acos<span class=\"sy0\">,</span> croot<span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Apply functions from lists as easily as integers</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>compose<span class=\"br0\">(</span>inversef<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">.5</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span> inversef <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>funclist<span class=\"sy0\">,</span> funclisti<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.4999999999999999</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">cube &lt;- function(x) x^3<br/>croot &lt;- function(x) x^(1/3)<br/>compose &lt;- function(f, g) function(x){f(g(x))}<br/>\u00a0<br/>f1 &lt;- c(sin, cos, cube)<br/>f2 &lt;- c(asin, acos, croot)<br/>\u00a0<br/>for(i in 1:3) {<br/>  print(compose(f1[[i]], f2[[i]])(.5))<br/>}</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (compose f g) (\u03bb (x) (f (g x))))<br/>(define (cube x) (expt x 3))<br/>(define (cube-root x) (expt x (/ 1 3)))<br/>(define funlist (list sin cos cube))<br/>(define ifunlist (list asin acos cube-root))<br/>\u00a0<br/>(for ([f funlist] [i ifunlist])<br/>  (displayln ((compose i f) 0.5)))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 29, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"First Class Functions\"<br/>\tURL: http://rosettacode.org/wiki/First-class_functions<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Functions \"foo\" and \"bar\" are used to prove that composition</span><br/><span class=\"co1\">; actually took place by attaching their signatures to the result.</span><br/>\u00a0<br/>foo: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">reform</span> <span class=\"br0\">[</span><span class=\"st0\">\"foo:\"</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>bar: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">reform</span> <span class=\"br0\">[</span><span class=\"st0\">\"bar:\"</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>cube:  <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">]</span><br/>croot: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">power</span>  x  <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; \"compose\" means something else in REBOL, so I \"fashion\" an alternative. </span><br/>\u00a0<br/>fashion: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>f1 f2<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">do</span> <span class=\"kw2\">compose</span><span class=\"sy0\">/</span>deep <span class=\"br0\">[</span><span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>:f1<span class=\"br0\">)</span> <span class=\"br0\">(</span>:f2<span class=\"br0\">)</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>A: <span class=\"br0\">[</span>foo <span class=\"kw3\">sine</span>    <span class=\"kw3\">cosine</span>    cube<span class=\"br0\">]</span><br/>B: <span class=\"br0\">[</span>bar <span class=\"kw3\">arcsine</span> <span class=\"kw3\">arccosine</span> croot<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">while</span> <span class=\"br0\">[</span><span class=\"kw3\">not</span> <span class=\"kw3\">tail?</span> A<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\tfn: fashion <span class=\"kw3\">get</span> A<span class=\"sy0\">/</span><span class=\"nu0\">1</span> <span class=\"kw3\">get</span> B<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw3\">source</span> fn <span class=\"co1\">; Prove that functions actually got composed.</span><br/>\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span>fn <span class=\"nu0\">0.5</span>  crlf<span class=\"br0\">]</span><br/>\u00a0<br/>\tA: <span class=\"kw2\">next</span> A  B: <span class=\"kw2\">next</span> B  <span class=\"co1\">; Advance to next pair.</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 59, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates first\u2500class functions (as a list of the names of functions).*/</span><br/>A = <span class=\"st0\">'d2x   square   sin    cos'</span>                  <span class=\"coMULTI\">/*a list of  functions  to demonstrate.*/</span><br/>B = <span class=\"st0\">'x2d   sqrt     Asin   Acos'</span>                 <span class=\"coMULTI\">/*the inverse functions of above list. */</span><br/>w=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                       <span class=\"coMULTI\">/*W:  width of numbers to be displayed.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  collection of  A &amp; B  functions*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span>;      <span class=\"kw1\">say</span>;       <span class=\"kw1\">say</span>   <span class=\"coMULTI\">/*step through the list;  2 blank lines*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"number\"</span>,w<span class=\"br0\">)</span>     <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'function'</span>, <span class=\"nu0\">3</span><span class=\"sy0\">*</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"inverse\"</span>, <span class=\"nu0\">4</span><span class=\"sy0\">*</span>w<span class=\"br0\">)</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>     ,w<span class=\"br0\">)</span>     <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>,        <span class=\"nu0\">3</span><span class=\"sy0\">*</span>w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>,       <span class=\"nu0\">4</span><span class=\"sy0\">*</span>w<span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> test j, <span class=\"nu0\">20</span>  <span class=\"nu0\">60</span>   <span class=\"nu0\">500</span>     <span class=\"coMULTI\">/*functions  X2D, D2X:  integers only. */</span><br/>              <span class=\"kw3\">else</span> <span class=\"kw1\">call</span> test j, <span class=\"nu0\">0</span>  <span class=\"nu0\">0.5</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span>     <span class=\"coMULTI\">/*all other functions:  floating point.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Acos:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span>-<span class=\"nu0\">1</span><span class=\"sy0\">|</span>x<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> AcosErr;    <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5<span class=\"sy0\">*</span>pi<span class=\"br0\">(</span><span class=\"br0\">)</span>-Asin<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>r2r:     <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"br0\">(</span>pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*normalize radians \u2500\u2500\u25ba 1 unit circle*/</span><br/>square:  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>pi:      pi=<span class=\"nu0\">3.14159265358979323846264338327950288419716939937510582097494459230</span>; <span class=\"kw1\">return</span> pi<br/>tellErr: <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'*** error! ***'</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/>tanErr:  <span class=\"kw1\">call</span> tellErr <span class=\"st0\">'tan('</span> <span class=\"sy0\">||</span> x<span class=\"st0\">\") causes division by zero, X=\"</span>             <span class=\"sy0\">||</span>  x<br/>AsinErr: <span class=\"kw1\">call</span> tellErr <span class=\"st0\">'Asin(x),  X  must be in the range of  -1 \u2500\u2500\u25ba +1,  X='</span> <span class=\"sy0\">||</span>  x<br/>AcosErr: <span class=\"kw1\">call</span> tellErr <span class=\"st0\">'Acos(x),  X  must be in the range of  -1 \u2500\u2500\u25ba +1,  X='</span> <span class=\"sy0\">||</span>  x<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Asin:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> AsinErr;   s=x<span class=\"sy0\">*</span>x<br/>             <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>=<span class=\"sy0\">.</span>7  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw6\">sign</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">*</span>Acos<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">1</span>-s<span class=\"br0\">)</span><span class=\"br0\">)</span>;      z=x;  o=x;  p=z<br/>                      <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span> <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>; o=o<span class=\"sy0\">*</span>s<span class=\"sy0\">*</span><span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>j; z=z+o<span class=\"sy0\">/</span><span class=\"br0\">(</span>j+<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">if</span> z=p <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>; p=z; <span class=\"kw3\">end</span><br/>             <span class=\"kw1\">return</span> z<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos:     <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;          a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;         Hpi=pi<span class=\"sy0\">*.</span>5<br/>             <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span>;          <span class=\"kw1\">if</span> a=pi<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>             <span class=\"kw1\">if</span> a=Hpi <span class=\"sy0\">|</span> a=Hpi<span class=\"sy0\">*</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"nu0\">0</span>\u00a0;     <span class=\"kw1\">if</span> a=pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5<br/>             <span class=\"kw1\">if</span> a=pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"sy0\">.</span>5;                  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sin:     <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;          <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>             <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>=pi<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;                        <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span>x,x,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>sinCos: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> p,_,i;  x=x<span class=\"sy0\">*</span>x<br/>             <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>; _=-_<span class=\"sy0\">*</span>x<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>; z=z+_; <span class=\"kw1\">if</span> z=p  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>; p=z; <span class=\"kw3\">end</span>; <span class=\"kw1\">return</span> z<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>invoke:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> fn,v;  q=<span class=\"st0\">'\"'</span>;  <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>v,<span class=\"st0\">\"N\"</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> q=<br/>             _=fn <span class=\"sy0\">||</span> <span class=\"st0\">'('</span>q <span class=\"sy0\">||</span> v <span class=\"sy0\">||</span> q<span class=\"st0\">\")\"</span>;          <span class=\"kw1\">interpret</span> <span class=\"st0\">'func='</span>_;           <span class=\"kw1\">return</span> func<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span><br/>         <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g<span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_%2<br/>         h=d+<span class=\"nu0\">6</span>;     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2+<span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>                    <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span><br/>         <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;                  <span class=\"kw1\">return</span> g<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>test:    <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> A B w;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> fu,xList;     d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*xList:  numbers. */</span><br/>                 <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>xList<span class=\"br0\">)</span>;          x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>xList, k<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d+<span class=\"nu0\">5</span>                                  <span class=\"coMULTI\">/*higher precision.*/</span><br/>                 fun=<span class=\"kw6\">word</span><span class=\"br0\">(</span>A, fu<span class=\"br0\">)</span>;  funV=invoke<span class=\"br0\">(</span>fun, x<span class=\"br0\">)</span>  \u00a0;  <a class=\"__cf_email__\" data-cfemail=\"1d7b68735d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>=_<br/>                 inv=<span class=\"kw6\">word</span><span class=\"br0\">(</span>B, fu<span class=\"br0\">)</span>;  invV=invoke<span class=\"br0\">(</span>inv, funV<span class=\"br0\">)</span>;  <a class=\"__cf_email__\" data-cfemail=\"d1b8bfa791\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>=_<br/>                 <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d                                    <span class=\"coMULTI\">/*restore precision*/</span><br/>                 <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>funV, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> funV=funV<span class=\"sy0\">/</span><span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*round to digits()*/</span><br/>                 <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>invV, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> invV=invV<span class=\"sy0\">/</span><span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*round to digits()*/</span><br/>                 <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>x, w<span class=\"br0\">)</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"284e5d4668\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>w<span class=\"br0\">)</span><span class=\"st0\">'='</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, funV<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">)</span>funV, w<span class=\"br0\">)</span>,<br/>                                    <span class=\"kw6\">right</span><span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"deb7b0a89e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <span class=\"nu0\">3</span><span class=\"sy0\">*</span>w<span class=\"br0\">)</span><span class=\"st0\">'='</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, invV<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">)</span>invV, w<span class=\"br0\">)</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>         <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">cube = <span class=\"kw3\">proc</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>croot = <span class=\"kw3\">proc</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">quo</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>compose = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>f,g<span class=\"sy0\">|</span> <span class=\"kw3\">proc</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> f<span class=\"br0\">[</span>g<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>funclist = <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:sin</span><span class=\"br0\">)</span>, <span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:cos</span><span class=\"br0\">)</span>, cube<span class=\"br0\">]</span><br/>invlist = <span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:asin</span><span class=\"br0\">)</span>, <span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:acos</span><span class=\"br0\">)</span>, croot<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> funclist.<span class=\"me1\">zip</span><span class=\"br0\">(</span>invlist<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>f, invf<span class=\"sy0\">|</span> compose<span class=\"br0\">[</span>invf, f<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 24, "block": "<pre class=\"text highlighted_source\">#![feature(conservative_impl_trait)]<br/>fn main() {<br/>    let cube      = |x: f64| x.powi(3);<br/>    let cube_root = |x: f64| x.powf(1.0 / 3.0);<br/>\u00a0<br/>    let flist \u00a0: [&amp;Fn(f64) -&gt; f64; 3] = [&amp;cube     , &amp;f64::sin , &amp;f64::cos ];<br/>    let invlist: [&amp;Fn(f64) -&gt; f64; 3] = [&amp;cube_root, &amp;f64::asin, &amp;f64::acos];<br/>\u00a0<br/>    let result = flist.iter()<br/>                      .zip(&amp;invlist)<br/>                      .map(|(f,i)| compose(f,i)(0.5))<br/>                      .collect::&lt;Vec&lt;_&gt;&gt;();<br/>\u00a0<br/>    println!(\"{:?}\", result);<br/>\u00a0<br/>}<br/>\u00a0<br/>fn compose&lt;'a, F, G, T, U, V&gt;(f: F, g: G) -&gt; impl 'a + Fn(T) -&gt; V<br/>    where F: 'a + Fn(T) -&gt; U,<br/>          G: 'a + Fn(U) -&gt; V,<br/>{<br/>    move |x| g(f(x))<br/>\u00a0<br/>}</pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> math.<span class=\"sy0\">_</span><br/>\u00a0<br/><span class=\"co1\">// functions as values</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cube <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cuberoot <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> pow<span class=\"br0\">(</span>x, <span class=\"nu0\">1</span> / 3d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// higher order function, as a method</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compose<span class=\"br0\">[</span>A,B,C<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">:</span> B <span class=\"sy0\">=&gt;</span> C, g<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> B<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// partially applied functions in Lists</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fun <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>sin <span class=\"sy0\">_</span>, cos <span class=\"sy0\">_</span>, cube<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inv <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>asin <span class=\"sy0\">_</span>, acos <span class=\"sy0\">_</span>, cuberoot<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// composing functions from the above Lists</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> comp <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fun, inv<span class=\"br0\">)</span>.<span class=\"me1\">zipped</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span> compose <span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// output results of applying the functions</span><br/>comp foreach <span class=\"br0\">{</span>f <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> + <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 16, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>compose <span class=\"kw1\">f</span> g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cube x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cube<span class=\"sy0\">-</span>root x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> function <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">sin</span> <span class=\"kw1\">cos</span> cube<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> inverse <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"kw1\">asin</span> <span class=\"kw1\">acos</span> cube<span class=\"sy0\">-</span>root<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> x <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>go <span class=\"kw1\">f</span> g<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">f</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">null?</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>compose <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">f</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>go <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">f</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>go function inverse<span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func compose<span class=\"br0\">(</span>f,g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    func <span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>args...<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var cube  = func<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span> a.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>var croot = func<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span> a.<span class=\"me1\">root</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var flist1 = <span class=\"br0\">[</span>Num.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:sin</span><span class=\"br0\">)</span>,  Num.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:cos</span><span class=\"br0\">)</span>,  cube<span class=\"br0\">]</span><br/>var flist2 = <span class=\"br0\">[</span>Num.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:asin</span><span class=\"br0\">)</span>, Num.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:acos</span><span class=\"br0\">)</span>, croot<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> a,b <span class=\"br0\">(</span>flist1 ~Z flist2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say compose<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 22, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"2a476a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Method traits) ** <a class=\"__cf_email__\" data-cfemail=\"1c725c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Method traits)<br/>\"Answers a new Method whose effect is that of calling the first method<br/>on the results of the second method applied to whatever arguments are passed.<br/>This composition is associative, i.e. (a ** b) ** c = a ** (b ** c).<br/>When the second method, n, does not take a *rest option or the first takes<br/>more than one input, then the output is chunked into groups for its<br/>consumption. E.g.:<br/>#; `er ** #; `er applyTo: {'a'. 'b'. 'c'. 'd'} =&gt; 'abcd'<br/>#; `er ** #name `er applyTo: {#a. #/}. =&gt; 'a/'\"<br/>[<br/>  n acceptsAdditionalArguments \\/ [m arity = 1]<br/>    ifTrue:<br/>      [[| *args | m applyTo: {n applyTo: args}]]<br/>    ifFalse:<br/>      [[| *args |<br/>        m applyTo:<br/>          ([|\u00a0:stream |<br/>             args do: [| *each | stream nextPut: (n applyTo: each)]<br/>                  inGroupsOf: n arity] writingAs: {})]]<br/>].<br/>\u00a0<br/>#**`er asMethod: #compose: on: {Method traits. Method traits}.</pre>"}, {"lang": "Smalltalk", "loc": 23, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">forward reverse composer compounds</span>|<br/><span class=\"coMULTI\">\"commodities\"</span><br/><span class=\"re0\">Number</span> extend <span class=\"br0\">[</span><br/>   <span class=\"re5\">cube</span> <span class=\"br0\">[</span> ^self raisedTo: <span class=\"re5\">3</span> <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/><span class=\"re0\">Number</span> extend <span class=\"br0\">[</span><br/>   <span class=\"re5\">cubeRoot</span> <span class=\"br0\">[</span> ^self raisedTo: <span class=\"br0\">(</span><span class=\"re5\">1</span> / <span class=\"re5\">3</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">forward</span> <span class=\"sy0\">:=</span> <span class=\"re2\">#<span class=\"br0\">(</span> <span class=\"re1\">#cos</span> <span class=\"re1\">#sin</span> <span class=\"re1\">#cube</span> <span class=\"br0\">)</span></span>.<br/><span class=\"re5\">reverse</span> <span class=\"sy0\">:=</span> <span class=\"re2\">#<span class=\"br0\">(</span> <span class=\"re1\">#arcCos</span> <span class=\"re1\">#arcSin</span> <span class=\"re1\">#cubeRoot</span> <span class=\"br0\">)</span></span>.<br/>\u00a0<br/><span class=\"re5\">composer</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">f</span>\u00a0:<span class=\"re5\">g</span> | <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | f value: <span class=\"br0\">(</span><span class=\"re5\">g</span> value: <span class=\"re5\">x</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"let us create composed funcs\"</span><br/><span class=\"re6\">compounds</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>\u00a0<br/><span class=\"re5\">1</span> to: <span class=\"re5\">3</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>  compounds add: <span class=\"br0\">(</span><span class=\"br0\">[</span>\u00a0:<span class=\"re5\">j</span> | composer value: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | x perform: <span class=\"br0\">(</span><span class=\"re5\">forward</span> at: <span class=\"re5\">j</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>                                  value: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | x perform: <span class=\"br0\">(</span><span class=\"re5\">reverse</span> at: <span class=\"re5\">j</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span> value: <span class=\"re5\">i</span><span class=\"br0\">)</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">compounds</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">r</span> | <span class=\"br0\">(</span><span class=\"re5\">r</span> value: <span class=\"re5\">0</span>.<span class=\"re5\">5</span><span class=\"br0\">)</span> displayNl <span class=\"br0\">]</span>.</pre>"}, {"lang": "Standard ML", "loc": 13, "block": "<pre class=\"text highlighted_source\">- fun cube x = Math.pow(x, 3.0);<br/>val cube = fn\u00a0: real -&gt; real<br/>- fun croot x = Math.pow(x, 1.0 / 3.0);<br/>val croot = fn\u00a0: real -&gt; real<br/>- fun compose (f, g) = fn x =&gt; f (g x); (* this is already implemented in Standard ML as the \"o\" operator<br/>=                                          we could have written \"fun compose (f, g) x = f (g x)\" but we show this for clarity *)<br/>val compose = fn\u00a0: ('a -&gt; 'b) * ('c -&gt; 'a) -&gt; 'c -&gt; 'b<br/>- val funclist = [Math.sin, Math.cos, cube];<br/>val funclist = [fn,fn,fn]\u00a0: (real -&gt; real) list<br/>- val funclisti = [Math.asin, Math.acos, croot];<br/>val funclisti = [fn,fn,fn]\u00a0: (real -&gt; real) list<br/>- ListPair.map (fn (f, inversef) =&gt; (compose (inversef, f)) 0.5) (funclist, funclisti);<br/>val it = [0.5,0.5,0.500000000001]\u00a0: real list</pre>"}, {"lang": "SuperCollider", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = [sin(_), cos(_), { |x| x ** 3 }];<br/>b = [asin(_), acos(_), { |x| x ** (1/3) }];<br/>c = a.collect { |x, i| x &lt;&gt; b[i] };<br/>c.every { |x| x.(0.5) - 0.5 &lt; 0.00001 }<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 7, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>func compose&lt;A,B,C&gt;(f: (B) -&gt; C, g: (A) -&gt; B) -&gt; (A) -&gt; C {<br/>  return { f(g($0)) }<br/>}<br/>let funclist = [ { (x: Double) in sin(x) }, { (x: Double) in cos(x) }, { (x: Double) in pow(x, 3) } ]<br/>let funclisti = [ { (x: Double) in asin(x) }, { (x: Double) in acos(x) }, { (x: Double) in cbrt(x) } ]<br/>println(map(zip(funclist, funclisti)) { f, inversef in compose(f, inversef)(0.5) })</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"sy0\">%</span> <span class=\"kw1\">namespace</span> path tcl::<span class=\"me1\">mathfunc</span> <span class=\"sy0\">;</span><span class=\"co1\"># to import functions like abs() etc.</span><br/><span class=\"sy0\">%</span> <span class=\"kw1\">proc</span> cube x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">%</span> <span class=\"kw1\">proc</span> croot x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"nu0\">3</span>.<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"sy0\">%</span> <span class=\"kw1\">proc</span> compose <span class=\"br0\">{</span>f g<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">list</span> apply <span class=\"br0\">{</span><span class=\"br0\">{</span>f g x<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$f</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$g</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$f</span> <span class=\"re0\">$g</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">%</span> compose abs cube          <span class=\"sy0\">;</span><span class=\"co1\"># returns a partial command, without argument</span><br/>apply <span class=\"br0\">{</span><span class=\"br0\">{</span>f g x<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$f</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$g</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span> abs cube<br/>\u00a0<br/><span class=\"sy0\">%</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>compose abs cube<span class=\"br0\">]</span> -<span class=\"nu0\">3</span>  <span class=\"sy0\">;</span><span class=\"co1\"># applies the partial command to argument -3</span><br/><span class=\"nu0\">27</span><br/>\u00a0<br/><span class=\"sy0\">%</span> <span class=\"kw1\">set</span> forward <span class=\"br0\">[</span>compose <span class=\"br0\">[</span>compose sin cos<span class=\"br0\">]</span> cube<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># omitting to print result</span><br/><span class=\"sy0\">%</span> <span class=\"kw1\">set</span> backward <span class=\"br0\">[</span>compose croot <span class=\"br0\">[</span>compose acos asin<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">%</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$forward</span> <span class=\"nu0\">0.5</span><br/><span class=\"nu0\">0.8372297964617733</span><br/><span class=\"sy0\">%</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$backward</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$forward</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><br/><span class=\"nu0\">0.5000000000000017</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">Prgm<br/>  Local funs,invs,composed,x,i<br/>\u00a0<br/>  Define rc_cube(x) = x^3     \u00a9 Cannot be local variables<br/>  Define rc_curt(x) = x^(1/3)<br/>\u00a0<br/>  Define funs = {\"sin\",\"cos\",\"rc_cube\"}<br/>  Define invs = {\"sin\uf005\",\"cos\uf005\",\"rc_curt\"}<br/>\u00a0<br/>  Define x = 0.5<br/>  Disp \"x = \" &amp; string(x)<br/>  For i,1,3<br/>    Disp \"f=\" &amp; invs[i] &amp; \" g=\" &amp; funs[i] &amp; \" f(g(x))=\" &amp; string(#(invs[i])(#(funs[i])(x)))<br/>  EndFor<br/>\u00a0<br/>  DelVar rc_cube,rc_curt  \u00a9 Clean up our globals<br/>EndPrgm</pre>"}, {"lang": "TXR", "loc": 10, "block": "<pre class=\"text highlighted_source\">(defvar funlist [list sin<br/>                      cos<br/>                      (op expt @1 3)])<br/>\u00a0<br/>(defvar invlist [list asin<br/>                      acos<br/>                      (op expt @1 (/ 1 3))])<br/>\u00a0<br/>(each ((f funlist) (i invlist))<br/>  (prinl [(chain f i) 0.5]))</pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import flo<br/>\u00a0<br/>functions = &lt;sin,cos,times^/~&amp; sqr&gt;<br/>inverses  = &lt;asin,acos,math..cbrt&gt;<br/>\u00a0<br/>#cast\u00a0%eL<br/>\u00a0<br/>main = (gang (+)*p\\functions inverses) 0.5</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">var a=T(fcn(x){ x.toRad().sin() },  fcn(x){ x.toRad().cos() },  fcn(x){ x*x*x} );<br/>var b=T(fcn(x){ x.asin().toDeg() }, fcn(x){ x.acos().toDeg() }, fcn(x){ x.pow(1.0/3) });<br/>\u00a0<br/>var H=Utils.Helpers;<br/>var ab=b.zipWith(H.fcomp,a);  //--&gt;list of deferred calculations<br/>ab.run(True,5.0); //--&gt;L(5.0,5.0,5.0)<br/>\u00a0<br/>a.run(True,5.0) //--&gt;L(0.0871557,0.996195,125)</pre>"}]}