{"task": "Van_der_Corput_sequence", "blocks": [{"lang": "360 Assembly", "loc": 58, "block": "<pre class=\"text highlighted_source\">*        Van der Corput sequence   31/01/2017<br/>VDCS     CSECT<br/>         USING  VDCS,R13           base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \" &lt;-<br/>         ST     R15,8(R13)         \" -&gt;<br/>         LR     R13,R15            \" addressability<br/>         ZAP    B,=P'2'            b=2  (base)<br/>         ZAP    M,=P'-1'           m=-1<br/>         SR     R6,R6              i=0<br/>LOOPI    CH     R6,=H'10'          do i=0 to 10<br/>         BH     ELOOPI<br/>         AP     M,=P'1'            w=m+1<br/>         ZAP    V,=P'0'            v=0<br/>         ZAP    S,=P'1'            s=1<br/>         ZAP    N,M                n=m<br/>WHILE    CP     N,=P'0'            do while n&lt;&gt;0<br/>         BE     EWHILE<br/>         MP     S,B                s=s*b<br/>         ZAP    PL16,N             n<br/>         DP     PL16,B             n/b<br/>         ZAP    W,PL16+8(8)        w=n mod b <br/>         MP     W,=P'100000'       *100000<br/>         ZAP    PL16,W             w<br/>         DP     PL16,S             w/s<br/>         ZAP    W,PL16(8)          w=w/s<br/>         AP     V,W                v=v+(n mod b)*100000/s<br/>         ZAP    PL16,N             n<br/>         DP     PL16,B             n/b<br/>         ZAP    N,PL16(8)          n=n/b<br/>         B      WHILE<br/>EWHILE   XDECO  R6,XDEC            edit i<br/>         MVC    PG+0(3),XDEC+9     output i<br/>         MVC    PG+3(3),=C' 0.'<br/>         UNPK   Z,V                unpack v<br/>         OI     Z+L'Z-1,X'F0'      edit v<br/>         MVC    PG+6(5),Z+11       output v  (v/100000)<br/>         XPRNT  PG,L'PG            print buffer<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \" restore<br/>         XR     R15,R15            \" rc=0<br/>         BR     R14                exit<br/>B        DS     PL8<br/>M        DS     PL8<br/>V        DS     PL8<br/>S        DS     PL8<br/>N        DS     PL8<br/>W        DS     PL8                packed <br/>Z        DS     ZL16               zoned<br/>PL16     DS     PL16               packed max<br/>PG       DC     CL80' '            buffer<br/>XDEC     DS     CL12               work area for xdeco<br/>         YREGS<br/>         END    VDCS</pre>"}, {"lang": "ActionScript", "loc": 68, "block": "<pre class=\"actionscript3 highlighted_source\">\u00a0<br/><span class=\"kw4\">package</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.display</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html\"><span class=\"kw5\">Sprite</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.events</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html\"><span class=\"kw5\">Event</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> VanDerCorput <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html\"><span class=\"kw5\">Sprite</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw3\">function</span> VanDerCorput<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw7\">stage</span><span class=\"br0\">)</span> <span class=\"kw7\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw7\">addEventListener</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html\"><span class=\"kw5\">Event</span></a><span class=\"sy0\">.</span><span class=\"kw8\">ADDED_TO_STAGE</span><span class=\"sy0\">,</span> <span class=\"kw7\">init</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw3\">function</span> <span class=\"kw7\">init</span><span class=\"br0\">(</span>e<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html\"><span class=\"kw5\">Event</span></a> = <span class=\"kw1\">null</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw7\">removeEventListener</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=event%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:event.html\"><span class=\"kw5\">Event</span></a><span class=\"sy0\">.</span><span class=\"kw8\">ADDED_TO_STAGE</span><span class=\"sy0\">,</span> <span class=\"kw7\">init</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">var</span> base2<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base3<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base4<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base5<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base6<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base7<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> base8<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">var</span> i<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                base2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base4<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base5<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base6<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base7<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>                base8<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">round</span><span class=\"br0\">(</span> _getTerm<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 2: \"</span> <span class=\"sy0\">+</span> base2<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 3: \"</span> <span class=\"sy0\">+</span> base3<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 4: \"</span> <span class=\"sy0\">+</span> base4<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 5: \"</span> <span class=\"sy0\">+</span> base5<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 6: \"</span> <span class=\"sy0\">+</span> base6<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 7: \"</span> <span class=\"sy0\">+</span> base7<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Base 8: \"</span> <span class=\"sy0\">+</span> base8<span class=\"sy0\">.</span><span class=\"kw7\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw3\">function</span> _getTerm<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> base<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a> = <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw2\">var</span> r<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = <span class=\"nu0\">0</span><span class=\"sy0\">,</span> p<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> digit<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> baseLog<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">log</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">pow</span><span class=\"br0\">(</span> base<span class=\"sy0\">,</span> <a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">log</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> baseLog<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                digit = n <span class=\"sy0\">/</span> p<span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">%</span>= p<span class=\"sy0\">;</span><br/>                r <span class=\"sy0\">+</span>= digit <span class=\"sy0\">/</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Main <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Float_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span> <span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Van_Der_Corput <span class=\"br0\">(</span>N\u00a0: Natural; Base\u00a0: Positive\u00a0:= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Value   \u00a0: Natural \u00a0:= N;<br/>      Result  \u00a0: Float   \u00a0:= <span class=\"nu0\">0.0</span>;<br/>      Exponent\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Value &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         Result  \u00a0:= Result +<br/>                     Float <span class=\"br0\">(</span>Value <span class=\"kw2\">mod</span> Base<span class=\"br0\">)</span> / Float <span class=\"br0\">(</span>Base ** Exponent<span class=\"br0\">)</span>;<br/>         Value   \u00a0:= Value / Base;<br/>         Exponent\u00a0:= Exponent + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Van_Der_Corput;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Base <span class=\"kw3\">in</span> <span class=\"nu0\">2</span> .. <span class=\"nu0\">5</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Base\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Base<span class=\"br0\">)</span> &amp; <span class=\"st0\">\":\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>' '<span class=\"br0\">)</span>;<br/>         Float_IO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Item =&gt; Van_Der_Corput <span class=\"br0\">(</span>N, Base<span class=\"br0\">)</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Main;</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><br/>for i<span class=\"sy0\">,</span> v in <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    seq <span class=\"sy0\">.=</span> <span class=\"st0\">\"Base \"</span> v <span class=\"st0\">\": \"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>        seq <span class=\"sy0\">.=</span> VanDerCorput<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\u00a0? <span class=\"st0\">\"`n\"</span>\u00a0: <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% seq<br/>\u00a0<br/>VanDerCorput<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> n<br/>        r <span class=\"sy0\">+=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b <span class=\"sy0\">**</span> <span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> n <span class=\"sy0\">:=</span> n <span class=\"sy0\">//</span> b<br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f VAN_DER_CORPUT_SEQUENCE.AWK</span><br/><span class=\"co1\"># converted from BBC BASIC</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"base\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">9</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%7d\"</span>,i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>base=<span class=\"nu0\">2</span>; base<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; base<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-4s\"</span>,base<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">9</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%7.5f\"</span>,vdc<span class=\"br0\">(</span>i,base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> vdc<span class=\"br0\">(</span>n,b,  s,v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy3\">*</span>= b<br/>      v <span class=\"sy3\">+</span>= <span class=\"br0\">(</span>n <span class=\"sy3\">%</span> b<span class=\"br0\">)</span> <span class=\"sy3\">/</span> s<br/>      n <span class=\"sy3\">/</span>= b<br/>      n = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      @% = &amp;20509<br/>      FOR base% = 2 TO 5<br/>        PRINT \"Base \"\u00a0; STR$(base%) \":\"<br/>        FOR number% = 0 TO 9<br/>          PRINT FNvdc(number%, base%);<br/>        NEXT<br/>        PRINT<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNvdc(n%, b%)<br/>      LOCAL v, s%<br/>      s% = 1<br/>      WHILE n%<br/>        s% *= b%<br/>        v += (n% MOD b%) / s%<br/>        n% DIV= b%<br/>      ENDWHILE<br/>      = v</pre>"}, {"lang": "bc", "loc": 39, "block": "<pre class=\"text highlighted_source\">/*<br/> * Return the _n_th term of the van der Corput sequence.<br/> * Uses the current _ibase_.<br/> */<br/>define v(n) {<br/>\tauto c, r, s<br/>\u00a0<br/>\ts = scale<br/>\tscale = 0  /* to use integer division */<br/>\u00a0<br/>\t/*<br/>\t * c = count digits of n<br/>\t * r = reverse the digits of n<br/>\t */<br/>\tfor (0; n\u00a0!= 0; n /= 10) {<br/>\t\tc += 1<br/>\t\tr = (10 * r) + (n\u00a0% 10)<br/>\t}<br/>\u00a0<br/>\t/* move radix point to left of digits */<br/>\tscale = length(r) + 6<br/>\tr /= 10 ^ c<br/>\u00a0<br/>\tscale = s<br/>\treturn r<br/>}<br/>\u00a0<br/>t = 10<br/>for (b = 2; b &lt;= 4; b++) {<br/>\t\"base \"; b<br/>\tobase = b<br/>\tfor (i = 0; i &lt; 10; i++) {<br/>\t\tibase = b<br/>\t\t\"  \"; v(i)<br/>\t\tibase = t<br/>\t}<br/>\tobase = t<br/>}<br/>quit</pre>"}, {"lang": "C", "loc": 35, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> vc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> base<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>num<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>denom<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> base <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                q <span class=\"sy0\">*=</span> base<span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">/=</span> base<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"sy0\">*</span>num <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span>  <br/>        <span class=\"sy0\">*</span>denom <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> p <span class=\"sy0\">=</span> q <span class=\"sy0\">%</span> p<span class=\"sy0\">;</span> q <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"sy0\">*</span>num <span class=\"sy0\">/=</span> q<span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>denom <span class=\"sy0\">/=</span> q<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base\u00a0%d:\"</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        vc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>n<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%d/%d\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">else</span>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> vdc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">double</span> base <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> vdc <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, denom <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        vdc <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"kw3\">fmod</span><span class=\"br0\">(</span>n, base<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"br0\">(</span>denom <span class=\"sy2\">*</span><span class=\"sy1\">=</span> base<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        n <span class=\"sy2\">/</span><span class=\"sy1\">=</span> base<span class=\"sy4\">;</span> <span class=\"co1\">// note: conversion from 'double' to 'int'</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> vdc<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> base <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> base <span class=\"sy1\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>base<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Base \"</span> <span class=\"sy1\">&lt;&lt;</span> base <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> vdc<span class=\"br0\">(</span>n, base<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 130, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> VanDerCorput<br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Computes the Van der Corput sequence for any number base.</span><br/>    <span class=\"co1\">/// The numbers in the sequence vary from zero to one, including zero but excluding one.</span><br/>    <span class=\"co1\">/// The sequence possesses low discrepancy.</span><br/>    <span class=\"co1\">/// Here are the first ten terms for bases 2 to 5:</span><br/>    <span class=\"co1\">/// </span><br/>    <span class=\"co1\">/// base 2:  0  1/2  1/4  3/4  1/8  5/8  3/8  7/8  1/16  9/16</span><br/>    <span class=\"co1\">/// base 3:  0  1/3  2/3  1/9  4/9  7/9  2/9  5/9  8/9  1/27</span><br/>    <span class=\"co1\">/// base 4:  0  1/4  1/2  3/4  1/16  5/16  9/16  13/16  1/8  3/8</span><br/>    <span class=\"co1\">/// base 5:  0  1/5  2/5  3/5  4/5  1/25  6/25  11/25  16/25  21/25</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"co1\">/// &lt;see cref=\"http://rosettacode.org/wiki/Van_der_Corput_sequence\"/&gt;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> VanDerCorputSequence<span class=\"sy0\">:</span> IEnumerable<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>,<span class=\"kw4\">long</span><span class=\"sy0\">&gt;&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Number base for the sequence, which must bwe two or more.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> <span class=\"kw1\">Base</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Maximum number of terms to be returned by iterator.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">long</span> Count <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Construct a sequence for the given base.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"iBase\"&gt;Number base for the sequence.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"count\"&gt;Maximum number of items to be returned by the iterator.&lt;/param&gt;</span><br/>        <span class=\"kw1\">public</span> VanDerCorputSequence<span class=\"br0\">(</span><span class=\"kw4\">int</span> iBase, <span class=\"kw4\">long</span> count <span class=\"sy0\">=</span> <span class=\"kw4\">long</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iBase <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"iBase\"</span>, <span class=\"st0\">\"must be two or greater, not the given value of \"</span> <span class=\"sy0\">+</span> iBase<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">Base</span> <span class=\"sy0\">=</span> iBase<span class=\"sy0\">;</span><br/>            Count <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Compute nth term in the Van der Corput sequence for the base specified in the constructor.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"n\"&gt;The position in the sequence, which may be zero or any positive number.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// This number is always an integral power of the base.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt;The Van der Corput sequence value expressed as a Tuple containing a numerator and a denominator.&lt;/returns&gt;</span><br/>        <span class=\"kw1\">public</span> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>,<span class=\"kw4\">long</span><span class=\"sy0\">&gt;</span> Compute<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">long</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">long</span> numerator, denominator<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                p <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> <span class=\"kw1\">Base</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"kw1\">Base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                q <span class=\"sy0\">*=</span> <span class=\"kw1\">Base</span><span class=\"sy0\">;</span><br/>                n <span class=\"sy0\">/=</span> <span class=\"kw1\">Base</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            numerator <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>            denominator <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>            <span class=\"br0\">{</span> <br/>                n <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span> <br/>                p <span class=\"sy0\">=</span> q <span class=\"sy0\">%</span> p<span class=\"sy0\">;</span> <br/>                q <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> <br/>            <span class=\"br0\">}</span><br/>            numerator <span class=\"sy0\">/=</span> q<span class=\"sy0\">;</span><br/>            denominator <span class=\"sy0\">/=</span> q<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>,<span class=\"kw4\">long</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>numerator, denominator<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Compute nth term in the Van der Corput sequence for the given base.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"iBase\"&gt;Base to use for the sequence.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"n\"&gt;The position in the sequence, which may be zero or any positive number.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt;The Van der Corput sequence value expressed as a Tuple containing a numerator and a denominator.&lt;/returns&gt;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, <span class=\"kw4\">long</span><span class=\"sy0\">&gt;</span> Compute<span class=\"br0\">(</span><span class=\"kw4\">int</span> iBase, <span class=\"kw4\">long</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> seq <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> VanDerCorputSequence<span class=\"br0\">(</span>iBase<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> seq<span class=\"sy0\">.</span><span class=\"me1\">Compute</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Iterate over the Van Der Corput sequence.</span><br/>        <span class=\"co1\">/// The first value in the sequence is always zero, regardless of the base.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt;A tuple whose items are the Van der Corput value given as a numerator and denominator.&lt;/returns&gt;</span><br/>        <span class=\"kw1\">public</span> IEnumerator<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, <span class=\"kw4\">long</span><span class=\"sy0\">&gt;&gt;</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">long</span> iSequenceIndex <span class=\"sy0\">=</span> 0L<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>iSequenceIndex <span class=\"sy0\">&lt;</span> Count<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> Compute<span class=\"br0\">(</span>iSequenceIndex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                iSequenceIndex<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">IEnumerator</span> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">IEnumerable</span><span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            TestBasesTwoThroughFive<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Type return to continue...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> TestBasesTwoThroughFive<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> seq <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> VanDerCorputSequence<span class=\"br0\">(</span>x, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Just the first 10 elements of the each sequence</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"base \"</span> <span class=\"sy0\">+</span> seq<span class=\"sy0\">.</span><span class=\"kw1\">Base</span> <span class=\"sy0\">+</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> vc <span class=\"kw1\">in</span> seq<span class=\"br0\">)</span> <br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> vc<span class=\"sy0\">.</span><span class=\"me1\">Item1</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"/\"</span> <span class=\"sy0\">+</span> vc<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 25, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> van<span class=\"sy0\">-</span>der<span class=\"sy0\">-</span>corput<br/>  <span class=\"st0\">\"Get the nth element of the van der Corput sequence.\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>   <span class=\"co1\">;; Default base = 2</span><br/>   <span class=\"br0\">(</span>van<span class=\"sy0\">-</span>der<span class=\"sy0\">-</span>corput n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n base<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> base<span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"co1\">;; A multiplicand to shift to the right of the decimal.</span><br/>     <span class=\"co1\">;; We essentially want to reverse the digits of n and put them after the</span><br/>     <span class=\"co1\">;; decimal point. So, we repeatedly pull off the lowest digit of n, scale</span><br/>     <span class=\"co1\">;; it to the right of the decimal point, and accumulate that.</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>sum <span class=\"nu0\">0</span><br/>            n n<br/>            scale s<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>         sum  <span class=\"co1\">;; Base case: no digits left, so we're done.</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> sum <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>rem n base<span class=\"br0\">)</span> scale<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; Accumulate the least digit</span><br/>                <span class=\"br0\">(</span>quot n base<span class=\"br0\">)</span>                   <span class=\"co1\">;; Drop a digit of n</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">*</span> scale s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"co1\">;; Move farther past the decimal</span><br/>\u00a0<br/><span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>pprint<span class=\"sy0\">/</span>print<span class=\"sy0\">-</span>table<br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span>\u00a0:<span class=\"me1\">base</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; column headings</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>base <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"co1\">;; rows</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">{</span>:<span class=\"me1\">base</span> base<span class=\"br0\">}</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"co1\">;; table entries</span><br/>            <span class=\"br0\">[</span>n <span class=\"br0\">(</span>van<span class=\"sy0\">-</span>der<span class=\"sy0\">-</span>corput n base<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> van-der-Corput <span class=\"br0\">(</span>n base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> then <span class=\"br0\">(</span>* d base<span class=\"br0\">)</span> while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> d n<span class=\"br0\">)</span><br/>\tfinally<br/>\t<span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span><br/>\t\t     <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>write-to-string n <span class=\"sy0\">:</span><span class=\"me1\">base</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"sy0\">:</span><span class=\"me1\">radix</span> base<span class=\"br0\">)</span><br/>\t\t   d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for base from <span class=\"nu0\">2</span> to <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"Base ~a: ~{~6a~^~}~%\"</span> base<br/>\t      <span class=\"br0\">(</span>loop for i to <span class=\"nu0\">10</span> collect <span class=\"br0\">(</span>van-der-Corput i base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">double</span> vdc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> base<span class=\"sy0\">=</span><span class=\"nu16\">2.0</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> vdc <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> denom <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        denom <span class=\"sy0\">*=</span> base<span class=\"sy0\">;</span><br/>        vdc <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> base<span class=\"br0\">)</span> <span class=\"sy0\">/</span> denom<span class=\"sy0\">;</span><br/>        n <span class=\"sy0\">/=</span> base<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> vdc<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> b<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Base \"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> vdc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ela", "loc": 11, "block": "<pre class=\"text highlighted_source\">open random number list<br/>\u00a0<br/>vdc bs n = vdc' 0.0 1.0 n<br/>  where vdc' v d n <br/>          | n &gt; 0 = vdc' v' d' n'<br/>          | else  = v<br/>          where <br/>            d' = d * bs<br/>            rem = n\u00a0% bs<br/>            n' = truncate (n / bs)<br/>            v' = v + rem / d'</pre>"}, {"lang": "Elixir", "loc": 34, "block": "<pre class=\"text highlighted_source\">defmodule Van_der_corput do<br/>  def sequence( n, base \\\\ 2 ) do<br/>    \"0.\" &lt;&gt; (Integer.to_string(n, base) |&gt; String.reverse )<br/>  end<br/>\u00a0<br/>  def float( n, base \\\\ 2 ) do<br/>    Integer.digits(n, base) |&gt; Enum.reduce(0, fn i,acc -&gt; (i + acc) / base end)<br/>  end<br/>\u00a0<br/>  def fraction( n, base \\\\ 2 ) do<br/>    str = Integer.to_string(n, base) |&gt; String.reverse<br/>    denominator = Enum.reduce(1..String.length(str), 1, fn _,acc -&gt; acc*base end)<br/>    reduction( String.to_integer(str, base), denominator )<br/>  end<br/>\u00a0<br/>  defp reduction( 0, _ ), do: \"0\"<br/>  defp reduction( numerator, denominator ) do<br/>    gcd = gcd( numerator, denominator )<br/>    \"#{ div(numerator, gcd) }/#{ div(denominator, gcd) }\"<br/>  end<br/>\u00a0<br/>  defp gcd( a, 0 ), do: a<br/>  defp gcd( a, b ), do: gcd( b, rem(a, b) )<br/>end<br/>\u00a0<br/>funs = [ {\"Float(Base):\",     &amp;Van_der_corput.sequence/2},<br/>         {\"Float(Decimal):\",  &amp;Van_der_corput.float/2   },<br/>         {\"Fraction:\",        &amp;Van_der_corput.fraction/2} ]<br/>Enum.each(funs, fn {title, fun} -&gt;<br/>  IO.puts title<br/>  Enum.each(2..5, fn base -&gt;<br/>    IO.puts \"  Base #{ base }: #{ Enum.map_join(0..9, \", \", &amp;fun.(&amp;1, base)) }\"<br/>  end)<br/>end)</pre>"}, {"lang": "Erlang", "loc": 25, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> van_der_corput <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>sequence<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> sequence<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sequence</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">sequence</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sequence</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_Base</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sequence</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Base</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">list_to_float</span><span class=\"br0\">(</span> <span class=\"st0\">\"0.\"</span> <span class=\"sy3\">++</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">sequence_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Base</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">sequence_loop</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_Base</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sequence_loop</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Base</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">New_n</span> <span class=\"sy3\">=</span> <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">Base</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Digit</span> <span class=\"sy3\">=</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">Base</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Digit</span> | <span class=\"re3\">sequence_loop</span><span class=\"br0\">(</span> <span class=\"re5\">New_n</span><span class=\"sy1\">,</span> <span class=\"re5\">Base</span> <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span> <span class=\"re5\">Base</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Base ~p:\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Base</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\" ~p\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">sequence</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Base</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 27, "block": "<pre class=\"text highlighted_source\">PROGRAM VAN_DER_CORPUT<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>PROCEDURE VDC(N%,B%-&gt;RES)<br/>      LOCAL V,S%<br/>      S%=1<br/>      WHILE N%&gt;0 DO<br/>        S%*=B%<br/>        V+=(N% MOD B%)/S%<br/>        N%=N% DIV B%<br/>      END WHILE<br/>      RES=V<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>      FOR BASE%=2 TO 5 DO<br/>        PRINT(\"Base\";STR$(BASE%);\":\")<br/>        FOR NUMBER%=0 TO 9 DO<br/>          VDC(NUMBER%,BASE%-&gt;RES)<br/>          WRITE(\"#.##### \";RES;)<br/>        END FOR<br/>        PRINT<br/>      END FOR<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> vdc<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> base<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> vdc<span class=\"sy2\">,</span> denom<span class=\"sy2\">,</span> rem<br/>    vdc <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    denom <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> n <span class=\"kw1\">do</span><br/>        denom <span class=\"sy1\">*=</span> base<br/>        rem <span class=\"sy1\">=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span>base<span class=\"br0\">)</span><br/>        n <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span>base<span class=\"br0\">)</span><br/>        vdc <span class=\"sy1\">+=</span> rem <span class=\"sy1\">/</span> denom<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> vdc<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Base\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%g \"</span><span class=\"sy2\">,</span>vdc<span class=\"br0\">(</span>j<span class=\"sy2\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> vdc n b <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop n denom acc <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> 0l <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">let</span> m, remainder <span class=\"sy0\">=</span> Math.<span class=\"me1\">DivRem</span><span class=\"br0\">(</span>n, b<span class=\"br0\">)</span><br/>            loop m <span class=\"br0\">(</span>denom <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>acc <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> remainder<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"br0\">(</span>denom <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> acc<br/>    loop n <span class=\"nu0\">1</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">9</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>vdc n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">9</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>vdc n <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: fvdc ( base n -- f )<br/>  0e 1e ( F: vdc denominator )<br/>  begin dup while<br/>    over s&gt;d d&gt;f f*<br/>    over /mod  ( base rem n )<br/>    swap s&gt;d d&gt;f fover f/<br/>    frot f+ fswap<br/>  repeat 2drop fdrop\u00a0;<br/>\u00a0<br/>: test  10 0 do 2 i fvdc cr f. loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 35, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">FUNCTION</span> VDC<span class=\"br0\">(</span>N,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Calculates a Van der Corput number...</span><br/><span class=\"co1\">Converts 1234 in decimal to 4321 in V, and P = 10000.</span><br/>       <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!For this integer,</span><br/>       <span class=\"kw3\">INTEGER</span> BASE\t<span class=\"co1\">!In this base.</span><br/>       <span class=\"kw3\">INTEGER</span> I\t<span class=\"co1\">!A copy of N that can be damaged.</span><br/>       <span class=\"kw3\">INTEGER</span> P\t<span class=\"co1\">!Successive powers of BASE.</span><br/>       <span class=\"kw3\">INTEGER</span> V\t<span class=\"co1\">!Accumulates digits.</span><br/>        P <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">! = BASE**0</span><br/>        V <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Start with no digits, as if N = 0.</span><br/>        I <span class=\"sy0\">=</span> N\t\t<span class=\"co1\">!Here we go.</span><br/>        <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>I <span class=\"kw2\">.<span class=\"me1\">NE</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!While something remains,</span><br/>          V <span class=\"sy0\">=</span> V<span class=\"sy0\">*</span>BASE <span class=\"sy0\">+</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>I,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Extract its low-order digit.</span><br/>          I <span class=\"sy0\">=</span> I<span class=\"sy0\">/</span>BASE\t\t\t<span class=\"co1\">!Reduce it by a power.</span><br/>          P <span class=\"sy0\">=</span> P<span class=\"sy0\">*</span>BASE\t\t\t<span class=\"co1\">!And track the power.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!Thus extract the digits in reverse order: right-to-left.</span><br/>        VDC <span class=\"sy0\">=</span> V<span class=\"sy0\">/</span>FLOAT<span class=\"br0\">(</span>P<span class=\"br0\">)</span>\t<span class=\"co1\">!The power is one above the highest digit.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> VDC\t<span class=\"co1\">!Numerology is weird.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw3\">INTEGER</span> FIRST,LAST\t<span class=\"co1\">!Might as well document some constants.</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>FIRST <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,LAST <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Thus, the first ten values.</span><br/>      <span class=\"kw3\">INTEGER</span> I,BASE\t\t<span class=\"co1\">!Steppers.</span><br/>      <span class=\"kw3\">REAL</span> VDC\t\t\t<span class=\"co1\">!Stop the compiler moaning about undeclared items.</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> FIRST,LAST,<span class=\"br0\">(</span>I, I <span class=\"sy0\">=</span> FIRST,LAST<span class=\"br0\">)</span>\t<span class=\"co1\">!Announce.</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Calculates values \"</span>,I0,<span class=\"st0\">\" to \"</span>,I0,<span class=\"st0\">\" of the \"</span>,<br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\"Van der Corput sequence, in various bases.\"</span><span class=\"sy0\">/</span><br/>     <span class=\"nu0\">2</span> <span class=\"st0\">\"Base\"</span>,666I9<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">DO</span> BASE <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,<span class=\"nu0\">13</span>\t<span class=\"co1\">!A selection of bases.</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> BASE,<span class=\"br0\">(</span>VDC<span class=\"br0\">(</span>I,BASE<span class=\"br0\">)</span>, I <span class=\"sy0\">=</span> FIRST,LAST<span class=\"br0\">)</span>\t<span class=\"co1\">!Show the specified span.</span><br/>    <span class=\"nu0\">2</span>   FORMAT <span class=\"br0\">(</span>I4,666F9.6<span class=\"br0\">)</span>\t<span class=\"co1\">!Aligns with FORMAT 1.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next base.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 42, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 03-12-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> num_base<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, _base_ <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> _base_ &gt; <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"base not handled by function\"</span><br/>        <span class=\"kw1\">Sleep</span> <span class=\"nu0\">5000</span><br/>        <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> n<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> ans<br/>\u00a0<br/>    <span class=\"kw1\">While</span> number &lt;&gt; <span class=\"nu0\">0</span><br/>        n = number <span class=\"kw1\">Mod</span> _base_<br/>        ans = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> + ans<br/>        number = number \\ _base_<br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> ans = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> ans = <span class=\"st0\">\"0\"</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">\".\"</span> + ans<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong k, l<br/><span class=\"kw1\">For</span> k = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Base = \"</span>; k<br/>    <span class=\"kw1\">For</span> l = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">12</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">left</span><span class=\"br0\">(</span>num_base<span class=\"br0\">(</span>l, k<span class=\"br0\">)</span> + <span class=\"st0\">\"      \"</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">print</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 40, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> v2<span class=\"sy1\">(</span>n <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><br/>    <span class=\"kw1\">for</span> n &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            r <span class=\"sy2\">+=</span> p<br/>        <span class=\"sy1\">}</span><br/>        p <span class=\"sy2\">*=</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><br/>        n &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newV<span class=\"sy1\">(</span>base <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    invb <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>base<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        p <span class=\"sy2\">:=</span> invb<br/>        <span class=\"kw1\">for</span> n &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            r <span class=\"sy2\">+=</span> p <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy3\">%</span>base<span class=\"sy1\">)</span><br/>            p <span class=\"sy2\">*=</span> invb<br/>            n <span class=\"sy2\">/=</span> base<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Base 2:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">uint</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> v2<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Base 3:\"</span><span class=\"sy1\">)</span><br/>    v3 <span class=\"sy2\">:=</span> newV<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">uint</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> v3<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 46, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Ratio<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/><span class=\"co1\">-- A wrapper type for Rationals to make them look nicer when we print them.</span><br/><span class=\"kw1\">newtype</span> Rat <span class=\"sy0\">=</span> Rat <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational\"><span class=\"kw4\">Rational</span></a><br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Rat <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>Rat n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>numerator n<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"/\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>denominator n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Convert a list of base b digits to its corresponding number.  We assume the</span><br/><span class=\"co1\">-- digits are valid base b numbers and that their order is from least to most</span><br/><span class=\"co1\">-- significant.  </span><br/>digitsToNum <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>digitsToNum b <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr1\"><span class=\"kw3\">foldr1</span></a> <span class=\"br0\">(</span>\\d acc <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">*</span> acc <span class=\"sy0\">+</span> d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Convert a number to the list of its base b digits.  The order will be from</span><br/><span class=\"co1\">-- least to most significant.</span><br/>numToDigits <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>numToDigits <span class=\"sy0\">_</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>numToDigits b n <span class=\"sy0\">=</span> unfoldr step n<br/>  <span class=\"kw1\">where</span> step <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>        step m <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>q<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> m `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a>` b <span class=\"kw1\">in</span> Just <span class=\"br0\">(</span>r<span class=\"sy0\">,</span>q<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Return the n'th element in the base b van der Corput sequence.  The base</span><br/><span class=\"co1\">-- must be \u2265 2.</span><br/>vdc <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> Rat<br/>vdc b n <span class=\"sy0\">|</span> b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"vdc: base must be \u2265 2\"</span><br/>        <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> ds <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> numToDigits b n<br/>                      <span class=\"kw1\">in</span> Rat <span class=\"br0\">(</span>digitsToNum b ds <span class=\"sy0\">%</span> b <span class=\"sy0\">^</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> ds<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Print the base followed by a sequence of van der Corput numbers.</span><br/>printVdc <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span><span class=\"br0\">[</span>Rat<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printVdc <span class=\"br0\">(</span>b<span class=\"sy0\">,</span>ns<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> printf <span class=\"st0\">\"Base\u00a0%d:\"</span> b <br/>                  <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u00a0%5s\"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> ns<br/>\u00a0<br/><span class=\"co1\">-- To print the n'th van der Corput numbers for n in [2,3,4,5] call the program </span><br/><span class=\"co1\">-- with no arguments.  Otherwise, passing the base b, first n, next n and</span><br/><span class=\"co1\">-- maximum n will print the base b numbers for n in [firstN, nextN, ..., maxN].</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>bases<span class=\"sy0\">,</span> nums<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> args <span class=\"kw1\">of</span><br/>        <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> m<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> b<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> f<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> s<span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> m<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> printVdc <span class=\"br0\">[</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>rs<span class=\"br0\">)</span> <span class=\"sy0\">|</span> b <span class=\"sy0\">&lt;-</span> bases<span class=\"sy0\">,</span> <span class=\"kw1\">let</span> rs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>vdc b<span class=\"br0\">)</span> nums<span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    base <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>round<span class=\"br0\">(</span>vdc<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> vdc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>    e <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span><br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">while</span> x <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> base<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>e <span class=\"sy0\">*:=</span> base<span class=\"br0\">)</span><span class=\"sy0\">,</span> n <span class=\"sy0\">/:=</span> base<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> round<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><br/>    places <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> d<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>places <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> places<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">vdc=: <span class=\"sy0\">(</span>[\u00a0%~\u00a0%@[ #. #.inv<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> <span class=\"nu0\">_</span></pre>"}, {"lang": "Java", "loc": 17, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> VanDerCorput<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> vdc<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> vdc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> denom <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tvdc <span class=\"sy0\">+=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>denom <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tn <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> vdc<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>vdc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># vdc(base) converts an input decimal integer to a decimal number based on the van der<br/># Corput sequence using base 'base', e.g. (4 | vdc(2)) is 0.125.<br/>#<br/>def vdc(base):<br/>\u00a0<br/>  # The helper function converts a stream of residuals to a decimal,<br/>  # e.g. if base is 2, then decimalize( (0,0,1) ) yields 0.125<br/>  def decimalize(stream):<br/>    reduce stream as $d   # state: [accumulator, power]<br/>      ( [0, 1/base];<br/>       .[1] as $power | [ .[0] + ($d * $power), $power / base] )<br/>    | .[0];<br/>\u00a0<br/>  if . == 0 then 0<br/>  else decimalize(recurse( if . == 0 then empty else ./base | floor end )\u00a0% base)<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">vandercorput(num::Integer, base::Integer) = sum(d * Float64(base) ^ -ex for (ex, d) in enumerate(digits(num, base)))<br/>\u00a0<br/>for base in 2:9<br/>    @printf(\"%10s\u00a0%i:\", \"Base\", base)<br/>    for num in 0:9 @printf(\"%7.3f\", vandercorput(num, base)) end<br/>    println(\" [...]\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Rational<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/>fun vdc<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, base<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Rational <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        p <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> base + nn <span class=\"sy0\">%</span> base<br/>        q <span class=\"sy0\">*=</span> base<br/>        nn /<span class=\"sy0\">=</span> base<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> p<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom <span class=\"sy0\">=</span> q<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nn <span class=\"sy0\">=</span> p<br/>        p <span class=\"sy0\">=</span> q <span class=\"sy0\">%</span> p<br/>        q <span class=\"sy0\">=</span> nn<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Rational<span class=\"br0\">(</span>num / q, denom / q<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b in <span class=\"nu0\">2</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"base $b:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a><span class=\"br0\">(</span>num, denom<span class=\"br0\">)</span> <span class=\"sy0\">=</span> vdc<span class=\"br0\">(</span>i, b<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"  $num/$denom\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> print<span class=\"br0\">(</span><span class=\"st0\">\"  0\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> vdc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> digits <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> m <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> base<span class=\"br0\">)</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>digits<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> m <span class=\"sy0\">*</span> base<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">=</span> m<br/>    <span class=\"kw1\">end</span><br/>    m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> p<span class=\"sy0\">,</span> d <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        m <span class=\"sy0\">=</span> m <span class=\"sy0\">+</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>pow<span class=\"br0\">(</span>base<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>p<span class=\"br0\">)</span> <span class=\"sy0\">*</span> d<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">VanDerCorput[n_,base_:2]:=Table[<br/>  FromDigits[{Reverse[IntegerDigits[k,base]],0},base],<br/>{k,n}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 6, "block": "<pre class=\"matlab highlighted_source\">    <span class=\"kw1\">function</span> x = corput <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    b = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2bin.html\"><span class=\"kw2\">dec2bin</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>:n<span class=\"br0\">)</span>-<span class=\"co2\">'0'</span>;   <span class=\"co1\">% generate sequence of binary numbers from 1 to n</span><br/>    l = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>b,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;          <span class=\"co1\">% get number of binary digits </span><br/>    w = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:l<span class=\"br0\">)</span>-l-<span class=\"nu0\">1</span>;          <span class=\"co1\">% 2.^w are the weights</span><br/>    x = b * <span class=\"br0\">(</span> <span class=\"nu0\">2</span>.^w'<span class=\"br0\">)</span>;       <span class=\"co1\">% matrix times vector multiplication for </span><br/>    <span class=\"kw1\">end</span>;  </pre>"}, {"lang": "Maxima", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* convert a decimal integer to a list of digits in base `base' */<br/>dec2digits(d, base):= block([digits: []],<br/>  while (d&gt;0) do block([newdi: mod(d, base)],<br/>    digits: cons(newdi, digits),<br/>    d: round( (d - newdi) / base)),<br/>  digits)$<br/>\u00a0<br/>dec2digits(123, 10);<br/>/* [1, 2, 3] */<br/>dec2digits(  8,  2);<br/>/* [1, 0, 0, 0] */</pre>"}, {"lang": "Modula-2", "loc": 50, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Sequence;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> vc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <span class=\"kw1\">VAR</span> num<span class=\"sy0\">,</span>denom <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> p<span class=\"sy0\">,</span>q <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    q <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> n<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        p <span class=\"sy0\">:=</span> p <span class=\"sy0\">*</span> base <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> base<span class=\"br0\">)</span>;<br/>        q <span class=\"sy0\">:=</span> q <span class=\"sy0\">*</span> base;<br/>        n <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> base<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    num <span class=\"sy0\">:=</span> p;<br/>    denom <span class=\"sy0\">:=</span> q;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> p<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        n <span class=\"sy0\">:=</span> p;<br/>        p <span class=\"sy0\">:=</span> q <span class=\"kw1\">MOD</span> p;<br/>        q <span class=\"sy0\">:=</span> n<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    num <span class=\"sy0\">:=</span> num <span class=\"kw1\">DIV</span> q;<br/>    denom <span class=\"sy0\">:=</span> denom <span class=\"kw1\">DIV</span> q<br/><span class=\"kw1\">END</span> vc;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    d<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>b <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> b<span class=\"sy0\">:=</span><span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span> <span class=\"kw1\">DO</span><br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"base\u00a0%i:\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw1\">DO</span><br/>            vc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">IF</span> n<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>                FormatString<span class=\"br0\">(</span><span class=\"st0\">\" \u00a0%i/%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span>;<br/>                WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>            <span class=\"kw1\">ELSE</span><br/>                WriteString<span class=\"br0\">(</span><span class=\"st0\">\"  0\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span>;<br/>        WriteLn<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Sequence.</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">VdC<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">=</span><span class=\"kw1\">binary</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#n<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>.<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>#n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>VdC<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#binary<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">bittest</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>.<span class=\"sy0\">&gt;&gt;</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ Alternate approach</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>VdC<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 89, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> VanDerCorput<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$MODE DELPHI}</span><br/><span class=\"co2\">{$ELSE}</span><br/>  <span class=\"co2\">{$APPTYPE CONSOLE}</span><br/><span class=\"co2\">{$ENDIF}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  tvdrCallback <span class=\"sy3\">=</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>nom<span class=\"sy1\">,</span>denom<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Base=2<br/>function rev2(n,Pot:NativeUint):NativeUint;<br/>var<br/>  r\u00a0: Nativeint;<br/>begin<br/>  r\u00a0:= 0;<br/>  while Pot &gt; 0 do<br/>  Begin<br/>    r\u00a0:= r shl 1 OR (n AND 1);<br/>    n\u00a0:= n shr 1;<br/>    dec(Pot);<br/>  end;<br/>  rev2\u00a0:= r;<br/>end;<br/>}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> reverse<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>base<span class=\"sy1\">,</span>Pot<span class=\"sy1\">:</span>NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  r<span class=\"sy1\">,</span>c <span class=\"sy1\">:</span> Nativeint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//No need to test n&gt; 0 in this special case, n starting in upper half</span><br/>  <span class=\"kw1\">while</span> Pot &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> base<span class=\"sy1\">;</span><br/>    r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">+</span><span class=\"br0\">(</span>r<span class=\"sy3\">-</span>c<span class=\"br0\">)</span><span class=\"sy3\">*</span>base<span class=\"sy1\">;</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c<span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>Pot<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  reverse <span class=\"sy1\">:</span><span class=\"sy3\">=</span> r<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> VanDerCorput<span class=\"br0\">(</span>base<span class=\"sy1\">,</span>count<span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span>f<span class=\"sy1\">:</span>tvdrCallback<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//calculates count nominater and denominater of Van der Corput sequence</span><br/><span class=\"co1\">// to base </span><br/><span class=\"kw1\">var</span><br/> Pot<span class=\"sy1\">,</span><br/> denom<span class=\"sy1\">,</span>nom<span class=\"sy1\">,</span><br/> i <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  denom <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  Pot <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> count &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">IF</span> Pot <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//start in upper half</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> denom<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>Pot<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    denom <span class=\"sy1\">:</span><span class=\"sy3\">=</span> denom <span class=\"sy3\">*</span>base<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">repeat</span><br/>      nom <span class=\"sy1\">:</span><span class=\"sy3\">=</span> reverse<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>base<span class=\"sy1\">,</span>Pot<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> count &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        f<span class=\"br0\">(</span>nom<span class=\"sy1\">,</span>denom<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> i &gt;<span class=\"sy3\">=</span> denom<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> vdrOutPut<span class=\"br0\">(</span>nom<span class=\"sy1\">,</span>denom<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span>nom<span class=\"sy1\">,</span><span class=\"st0\">'/'</span><span class=\"sy1\">,</span>denom<span class=\"sy1\">,</span><span class=\"st0\">'  '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> i <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">' Base '</span><span class=\"sy1\">,</span>i<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">'\u00a0:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    VanDerCorput<span class=\"br0\">(</span>i<span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"sy2\">@</span>vdrOutPut<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> vdc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@value</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$base</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">use</span> integer<span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@value</span><span class=\"sy0\">,</span> <span class=\"re0\">$value</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"re0\">$base</span> <span class=\"kw1\">while</span> <span class=\"re0\">$value</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> integer<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@value</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$base</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"base $base: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> vdc<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> VdC <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">(</span><span class=\"st0\">\"0.\"</span> <span class=\"sy0\">~</span> <span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span>Inf<span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> VdC<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 44, "block": "<pre class=\"text highlighted_source\">enum BASE, FRAC, DECIMAL<br/>constant DESC = {\"Base\",\"Fraction\",\"Decimal\"}<br/>\u00a0<br/>function vdc(integer n, atom base, integer flag)<br/>object res = \"\"<br/>atom num = 0, denom = 1, digit, g<br/>    while n do<br/>        denom *= base<br/>        digit = remainder(n,base)<br/>        n = floor(n/base)<br/>        if flag=BASE then<br/>            res &amp;= digit+'0'<br/>        else<br/>            num = num*base+digit<br/>        end if<br/>    end while<br/>    if flag=FRAC then<br/>        g = gcd(num,denom)<br/>        return {num/g,denom/g}<br/>    elsif flag=DECIMAL then<br/>        return num/denom<br/>    end if<br/>    return {iff(length(res)=0?\"0\":\"0.\"&amp;res)}<br/>end function<br/>\u00a0<br/>procedure show_vdc(integer flag, string fmt)<br/>object v<br/>    for i=2 to 5 do<br/>        printf(1,\"%s\u00a0%d: \",{DESC[flag],i})<br/>        for j=0 to 9 do<br/>            v = vdc(j,i,flag)<br/>            if flag=FRAC and v[1]=0 then<br/>                printf(1,\"0 \")<br/>            else<br/>                printf(1,fmt,v)<br/>            end if<br/>        end for<br/>        puts(1,\"\\n\")<br/>    end for<br/>end procedure<br/>\u00a0<br/>show_vdc(BASE,\"%s \")<br/>show_vdc(FRAC,\"%d/%d \")<br/>show_vdc(DECIMAL,\"%g \")</pre>"}, {"lang": "PicoLisp", "loc": 14, "block": "<pre class=\"text highlighted_source\">(scl 6)<br/>\u00a0<br/>(de vdc (N B)<br/>   (default B 2)<br/>   (let (R 0  A 1.0)<br/>      (until (=0 N)<br/>         (inc 'R (* (setq A (/ A B)) (% N B)))<br/>         (setq N (/ N B)) )<br/>      R ) )<br/>\u00a0<br/>(for B (2 3 4)<br/>   (prinl \"Base: \" B)<br/>   (for N (range 0 9)<br/>      (prinl N \": \" (round (vdc N B) 4)) ) )</pre>"}, {"lang": "PL/I", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>vdcb: procedure (an) returns (bit (31)); /* 6 July 2012 */<br/>   declare an fixed binary (31);<br/>   declare (n, i) fixed binary (31);<br/>   declare v bit (31) varying;<br/>\u00a0<br/>   n = an; v = ''b;<br/>   do i = 1 by 1 while (n &gt; 0);<br/>      if iand(n, 1) = 1 then v = v || '1'b; else v = v || '0'b;<br/>      n = isrl(n, 1);<br/>   end;<br/>   return (v);<br/>end vdcb;<br/>\u00a0<br/>   declare i fixed binary (31);<br/>\u00a0<br/>   do i = 0 to 10;<br/>      put skip list ('0.' || vdcb(i));<br/>   end;<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 42, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% vdc( N, Base, Out )</span><br/><span class=\"co1\">% Out = the Van der Corput representation of N in given Base</span><br/>vdc<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>vdc<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> Base<span class=\"sy4\">,</span> Out <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    Nr <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a><span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Base<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    Nq <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">//</span> Base<span class=\"sy4\">,</span><br/>    vdc<span class=\"br0\">(</span> Nq<span class=\"sy4\">,</span> Base<span class=\"sy4\">,</span> Tmp <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    Out <span class=\"sy6\">=</span> <span class=\"br0\">[</span>Nr<span class=\"sy5\">|</span>Tmp<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Writes every element of a list to stdout; no newlines</span><br/>write_list<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>write_list<span class=\"br0\">(</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span> H <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    write_list<span class=\"br0\">(</span> T <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Writes the Nth Van der Corput item.</span><br/>print_vdc<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> Base <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    vdc<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> Base<span class=\"sy4\">,</span> Lst <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'0.'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    write_list<span class=\"br0\">(</span> Lst <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>print_vdc<span class=\"br0\">(</span> N <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    print_vdc<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Prints the first N+1 elements of the Van der Corput</span><br/><span class=\"co1\">% sequence, each to its own line</span><br/>print_some<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> _ <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span> <span class=\"st_h\">'0.0'</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>print_some<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> Base <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    M <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    print_some<span class=\"br0\">(</span> M<span class=\"sy4\">,</span> Base <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>    print_vdc<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> Base <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>print_some<span class=\"br0\">(</span> N <span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    print_some<span class=\"br0\">(</span> N<span class=\"sy4\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>test <span class=\"sy1\">:-</span><br/>   writeln<span class=\"br0\">(</span><span class=\"st_h\">'First 10 members in base 2:'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>   print_some<span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'7th member in base 4 (stretch goal) =&gt; '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>   print_vdc<span class=\"br0\">(</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.d nBase<span class=\"br0\">(</span>n.i,b.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> r.d,s.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>  <br/>  <span class=\"kw1\">While</span> n<br/>    s<span class=\"sy0\">*</span>b<br/>    r<span class=\"sy0\">+</span><span class=\"br0\">(</span>Mod<span class=\"br0\">(</span>n,b<span class=\"br0\">)</span><span class=\"sy0\">/</span>s<span class=\"br0\">)</span><br/>    n<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> r    <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span>.i b,c<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"van der Corput - Sequence\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> b<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Base \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span>    <br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>nBase<span class=\"br0\">(</span>c,b<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> vdc<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>    vdc<span class=\"sy0\">,</span> denom <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> n:<br/>        denom *<span class=\"sy0\">=</span> base<br/>        n<span class=\"sy0\">,</span> remainder <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>        vdc +<span class=\"sy0\">=</span> remainder / denom<br/>    <span class=\"kw1\">return</span> vdc</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (van-der-Corput n base)<br/>  (if (zero? n)<br/>      0<br/>      (let-values ([(q r) (quotient/remainder n base)])<br/>        (/ (+ r (van-der-Corput q base))<br/>           base))))</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program converts an integer (or a range)  \u2500\u2500\u25ba  a Van der Corput number in base 2.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                              <span class=\"coMULTI\">/*handle almost anything the user wants*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain the optional arguments from CL*/</span><br/><span class=\"kw1\">if</span> a==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">10</span>   <span class=\"kw2\">with</span>   a  b  <span class=\"coMULTI\">/*Not specified?  Then use the defaults*/</span><br/><span class=\"kw1\">if</span> b==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> b=a                               <span class=\"coMULTI\">/*assume a  range  for a single number.*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> j=a  <span class=\"kw2\">to</span> b                               <span class=\"coMULTI\">/*traipse through the range of numbers.*/</span><br/>      _=VdC<span class=\"br0\">(</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*convert absolute value of an integer.*/</span><br/>      leading=<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>,   <span class=\"nu0\">2</span> + <span class=\"kw6\">sign</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span>        <span class=\"coMULTI\">/*if needed,  elide the leading sign.  */</span><br/>      <span class=\"kw1\">say</span> leading <span class=\"sy0\">||</span> _                           <span class=\"coMULTI\">/*show number, with leading minus sign?*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>VdC: <span class=\"kw1\">procedure</span>;    y=<span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>  + <span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*convert to  hexadecimal, then binary.*/</span><br/>     <span class=\"kw1\">if</span> y==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/*handle the special case of zero.     */</span><br/>              <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> <span class=\"st0\">'.'</span><span class=\"kw6\">reverse</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*heavy lifting is performed by REXX.  */</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(4)<br/>for base = 2 to 5<br/>    see \"base \" + string(base) + \"\u00a0: \"<br/>    for number = 0 to 9<br/>        see \"\" + corput(number, base) + \" \"<br/>    next<br/>    see nl <br/>next<br/>\u00a0<br/>func corput n, b<br/>     vdc = 0<br/>     denom = 1<br/>     while n <br/>           denom *= b<br/>           rem = n\u00a0% b<br/>           n = floor(n/b)<br/>           vdc += rem / denom<br/>     end<br/>     return vdc<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> vdc<span class=\"br0\">(</span>n, base=<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  str = n.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><br/>  str.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>.<span class=\"me1\">quo</span><span class=\"br0\">(</span>base <span class=\"sy0\">**</span> str.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>base<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Base #{base}: \"</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> vdc<span class=\"br0\">(</span>i,base<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> VanDerCorput <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compute<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, base<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Iterator.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<br/>            <span class=\"me1\">scanLeft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">*</span> base<span class=\"br0\">)</span>.<br/>            <span class=\"me1\">map</span><span class=\"br0\">(</span>b <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / b -<span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span>.<br/>            <span class=\"me1\">takeWhile</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1 <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<br/>            <span class=\"me1\">foldLeft</span><span class=\"br0\">(</span>0d<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a + <span class=\"br0\">(</span>b.<span class=\"sy0\">_</span>1 <span class=\"sy0\">%</span> base<span class=\"br0\">)</span>.<span class=\"me1\">toDouble</span> / b.<span class=\"sy0\">_</span>2 / base<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">StdIn</span>.<span class=\"me1\">readInt</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">StdIn</span>.<span class=\"me1\">readInt</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>compute<span class=\"br0\">(</span>x, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const func float: vdc (in var integer: number, in integer: base) is func<br/>  result<br/>    var float: vdc is 0.0;<br/>  local<br/>    var integer: denom is 1;<br/>    var integer: remainder is 0;<br/>  begin<br/>    while number &lt;&gt; 0 do<br/>      denom *:= base;<br/>      remainder\u00a0:= number rem base;<br/>      number\u00a0:= number div base;<br/>      vdc +:= flt(remainder) / flt(denom);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: base is 0;<br/>    var integer: number is 0;<br/>  begin<br/>    for base range 2 to 5 do<br/>      writeln;<br/>      writeln(\"Base \" &lt;&amp; base);<br/>      for number range 0 to 9 do<br/>        write(vdc(number, base) digits 6 &lt;&amp; \" \");<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func vdc<span class=\"br0\">(</span>value, base=<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>value<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        value.<span class=\"me1\">append</span><span class=\"br0\">(</span>value<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> base <span class=\"sy0\">-&gt;</span> int<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    var <span class=\"br0\">(</span>x, sum<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    value.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        sum <span class=\"sy0\">+</span>= <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> base<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span>= base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> base <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var seq = <span class=\"nu0\">10</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> vdc<span class=\"br0\">(</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>, base<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"st0\">\"base\u00a0%d:\u00a0%s<span class=\"es0\">\\n</span>\"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>base, seq.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"st0\">\"%.4f\"</span> <span class=\"sy0\">%</span> n<span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 38, "block": "<pre class=\"text highlighted_source\">mata<br/>// 5th term of Van der Corput sequence<br/>halton(1,1,5)<br/>  .625<br/>\u00a0<br/>// the first 10 terms of Van der Corput sequence<br/>halton(10,1)<br/>            1<br/>     +---------+<br/>   1 |     .5  |<br/>   2 |    .25  |<br/>   3 |    .75  |<br/>   4 |   .125  |<br/>   5 |   .625  |<br/>   6 |   .375  |<br/>   7 |   .875  |<br/>   8 |  .0625  |<br/>   9 |  .5625  |<br/>  10 |  .3125  |<br/>     +---------+<br/>\u00a0<br/>// the first 10 terms of Van der Corput sequence in base 3<br/>ghalton(10,3,0)<br/>                  1<br/>     +---------------+<br/>   1 |  .3333333333  |<br/>   2 |  .6666666667  |<br/>   3 |  .1111111111  |<br/>   4 |  .4444444444  |<br/>   5 |  .7777777778  |<br/>   6 |  .2222222222  |<br/>   7 |  .5555555556  |<br/>   8 |  .8888888889  |<br/>   9 |   .037037037  |<br/>  10 |  .3703703704  |<br/>     +---------------+<br/>\u00a0<br/>end</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> digitReverse <span class=\"br0\">{</span>n <span class=\"br0\">{</span>base <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> neg <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> -<span class=\"re0\">$n</span>\u00a0: <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> result <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">set</span> bit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> / <span class=\"re0\">$base</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$base</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> + <span class=\"re0\">$bit</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> bit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$bit</span> / <span class=\"re0\">$base</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$neg</span> <span class=\"sy0\">?</span> -<span class=\"re0\">$result</span>\u00a0: <span class=\"re0\">$result</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 48, "block": "<pre class=\"text highlighted_source\">'http://rosettacode.org/wiki/Van_der_Corput_sequence<br/>'Van der Corput Sequence fucntion call = VanVanDerCorput(number,base)<br/>\u00a0<br/>Base2 = \"0\"\u00a0: Base3 = \"0\"\u00a0: Base4 = \"0\"\u00a0: Base5 = \"0\"<br/>Base6 = \"0\"\u00a0: Base7 = \"0\"\u00a0: Base8 = \"0\"\u00a0: Base9 = \"0\"<br/>\u00a0<br/>l = 1<br/>h = 1<br/>Do Until l = 9<br/>\t'Set h to the value of l after each function call<br/>\t'as it sets it to 0 - see lines 37 to 40.<br/>\tBase2 = Base2 &amp; \", \" &amp; VanDerCorput(h,2)\u00a0: h = l<br/>\tBase3 = Base3 &amp; \", \" &amp; VanDerCorput(h,3)\u00a0: h = l<br/>\tBase4 = Base4 &amp; \", \" &amp; VanDerCorput(h,4)\u00a0: h = l<br/>\tBase5 = Base5 &amp; \", \" &amp; VanDerCorput(h,5)\u00a0: h = l<br/>\tBase6 = Base6 &amp; \", \" &amp; VanDerCorput(h,6)\u00a0: h = l<br/>\tl = l + 1<br/>Loop<br/>\u00a0<br/>WScript.Echo \"Base 2: \" &amp; Base2<br/>WScript.Echo \"Base 3: \" &amp; Base3<br/>WScript.Echo \"Base 4: \" &amp; Base4<br/>WScript.Echo \"Base 5: \" &amp; Base5<br/>WScript.Echo \"Base 6: \" &amp; Base6<br/>\u00a0<br/>'Van der Corput Sequence<br/>Function VanDerCorput(n,b)<br/>\tk = RevString(Dec2BaseN(n,b))<br/>\tFor i = 1 To Len(k)<br/>\t\tVanDerCorput = VanDerCorput + (CLng(Mid(k,i,1)) * b^-i)<br/>\tNext<br/>End Function<br/>\u00a0<br/>'Decimal to Base N Conversion<br/>Function Dec2BaseN(q,c)<br/>\tDec2BaseN = \"\"<br/>\tDo Until q = 0<br/>\t\tDec2BaseN = CStr(q Mod c) &amp; Dec2BaseN<br/>\t\tq = Int(q / c)<br/>\tLoop<br/>End Function<br/>\u00a0<br/>'Reverse String<br/>Function RevString(s)<br/>\tFor j = Len(s) To 1 Step -1<br/>\t\tRevString = RevString &amp; Mid(s,j,1)<br/>\tNext<br/>End Function</pre>"}, {"lang": "XPL0", "loc": 16, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func real VdC(N);       \\Return Nth term of van der Corput sequence in base 2<br/>int  N;<br/>real V, U;<br/>[V:= 0.0;  U:= 0.5;<br/>repeat  N:= N/2;<br/>        if rem(0) then V:= V+U;<br/>        U:= U/2.0;<br/>until   N=0;<br/>return V;<br/>];<br/>\u00a0<br/>int N;<br/>for N:= 0 to 10-1 do<br/>        [IntOut(0, N);  RlOut(0, VdC(N));  CrLf(0)]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn vdc(n,base=2){<br/>   vdc:=0.0; denom:=1;<br/>   while(n){ reg remainder;<br/>      denom *= base;<br/>      n, remainder = n.divr(base);<br/>      vdc += (remainder.toFloat() / denom);<br/>   }<br/>   vdc<br/>}</pre>"}]}