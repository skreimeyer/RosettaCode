{"task": "Sum_and_product_of_an_array", "blocks": [{"lang": "360 Assembly", "loc": 21, "block": "<pre class=\"text highlighted_source\">*        Sum and product of an array  20/04/2017<br/>SUMPROD  CSECT<br/>         USING  SUMPROD,R15        base register<br/>         SR     R3,R3              su=0<br/>         LA     R5,1               pr=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(CH,R6,LE,=AL2((PG-A)/4))  do i=1 to hbound(a)         <br/>         LR     R1,R6                i<br/>         SLA    R1,2                 *4<br/>         A      R3,A-4(R1)           su=su+a(i)<br/>         M      R4,A-4(R1)           pr=pr*a(i)<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         XDECO  R3,PG              su<br/>         XDECO  R5,PG+12           pr<br/>         XPRNT  PG,L'PG            print<br/>         BR     R14                exit<br/>A        DC     F'1',F'2',F'3',F'4',F'5',F'6',F'7',F'8',F'9',F'10'<br/>PG       DS     CL24               buffer<br/>         YREGS<br/>         END    SUMPROD</pre>"}, {"lang": "4D", "loc": 16, "block": "<pre class=\"text highlighted_source\">ARRAY INTEGER($list;0)<br/>For ($i;1;5)<br/>       APPEND TO ARRAY($list;$i)<br/>End for<br/>\u00a0<br/>$sum:=0<br/>$product:=1<br/>For ($i;1;Size of array($list))<br/>   $sum:=$var+$list{$i}<br/>   $product:=$product*$list{$i}<br/>End for<br/>\u00a0<br/>// since 4D v13<br/>\u00a0<br/>$sum:=sum($list)<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>sum <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prod <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"nu0\">1</span><br/>       <span class=\"br0\">(</span>* <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>prod <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 22, "block": "<pre class=\"actionscript highlighted_source\">package <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">import</span> flash.<span class=\"me1\">display</span>.<span class=\"me1\">Sprite</span>;<br/>\u00a0<br/>\t<span class=\"kw3\">public</span> <span class=\"kw2\">class</span> SumAndProduct <span class=\"kw3\">extends</span> Sprite<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">public</span> <span class=\"kw2\">function</span> SumAndProduct<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">var</span> arr:<span class=\"kw3\">Array</span> = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>;<br/>\t\t\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">int</span> = <span class=\"nu0\">0</span>;<br/>\t\t\t<span class=\"kw2\">var</span> prod:<span class=\"kw3\">int</span> = <span class=\"nu0\">1</span>;<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> arr.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tsum += arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t\t\t\tprod <span class=\"sy0\">*</span>= arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum: \"</span> + sum<span class=\"br0\">)</span>; <span class=\"co1\">// 15</span><br/>\t\t\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Product: \"</span> + prod<span class=\"br0\">)</span>; <span class=\"co1\">// 120</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">type</span> Int_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Integer <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\u00a0<br/><span class=\"kw3\">array</span>\u00a0: Int_Array\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>Sum\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">array</span>'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>   Sum\u00a0:= Sum + <span class=\"kw3\">array</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;</pre>"}, {"lang": "Aime", "loc": 24, "block": "<pre class=\"text highlighted_source\">void<br/>compute(integer &amp;s, integer &amp;p, list l)<br/>{<br/>    integer v;<br/>\u00a0<br/>    s = 0;<br/>    p = 1;<br/>    for (, v in l) {<br/>        s += v;<br/>        p *= v;<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer sum, product;<br/>\u00a0<br/>    compute(sum, product, list(2, 3, 5, 7, 11, 13, 17, 19));<br/>\u00a0<br/>    o_form(\"~\\n~\\n\", sum, product);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 21, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> default upb <span class=\"sy1\">:=</span> 3<span class=\"sy1\">;</span><br/>  <span class=\"kw4\">MODE</span> INTARRAY <span class=\"sy1\">=</span> <span class=\"br0\">[</span>default upb<span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  INTARRAY array <span class=\"sy1\">=</span> <span class=\"br0\">(</span>1<span class=\"sy1\">,</span>2<span class=\"sy1\">,</span>3<span class=\"sy1\">,</span>4<span class=\"sy1\">,</span>5<span class=\"sy1\">,</span>6<span class=\"sy1\">,</span>7<span class=\"sy1\">,</span>8<span class=\"sy1\">,</span>9<span class=\"sy1\">,</span>10<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> array <span class=\"kw2\">DO</span><br/>     sum <span class=\"sy1\">+:=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># Define the product function #</span><br/>  <span class=\"kw4\">PROC</span> int product <span class=\"sy1\">=</span> <span class=\"br0\">(</span>INTARRAY item<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>  <span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> prod <span class=\"sy1\">:=</span>1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> item <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> item <span class=\"kw2\">DO</span><br/>       prod <span class=\"sy1\">*:=</span> item<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    prod<br/>  <span class=\"br0\">)</span> <span class=\"coMULTI\"># int product #</span> <span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" Sum: \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span>sum<span class=\"sy1\">,</span>$<span class=\"st0\">\", Product:\"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"st0\">\";\"</span>l$<span class=\"sy1\">,</span>int product<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 34, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>   \u00a0% computes the sum and product of intArray                              \u00a0%<br/>   \u00a0% the results are returned in sum and product                           \u00a0%<br/>   \u00a0% the bounds of the array must be specified in lb and ub                \u00a0%<br/>    procedure sumAndProduct( integer array  intArray ( * )<br/>                          \u00a0; integer value  lb, ub<br/>                          \u00a0; integer result sum, product<br/>                           )\u00a0;<br/>    begin<br/>\u00a0<br/>        sum    \u00a0:= 0;<br/>        product\u00a0:= 1;<br/>\u00a0<br/>        for i\u00a0:= lb until ub<br/>        do begin<br/>            sum    \u00a0:=     sum + intArray( i );<br/>            product\u00a0:= product * intArray( i );<br/>        end for_i\u00a0;<br/>\u00a0<br/>    end sumAndProduct\u00a0;<br/>\u00a0<br/>   \u00a0% test the sumAndProduct procedure                                      \u00a0%<br/>    begin<br/>\u00a0<br/>        integer array v   ( 1\u00a0:: 10 );<br/>        integer sum, product;<br/>\u00a0<br/>        for i\u00a0:= 1 until 10 do v( i )\u00a0:= i;<br/>\u00a0<br/>        sumAndProduct( v, 1, 10, sum, product );<br/>        write( sum, product );<br/>    end<br/>end.</pre>"}, {"lang": "APL", "loc": 10, "block": "<pre class=\"text highlighted_source\">      sum  \u2190  +/<br/>      prod \u2190  \u00d7/<br/>\u00a0<br/>      list \u2190  1 2 3 4 5 <br/>\u00a0<br/>      sum  list<br/>15<br/>\u00a0<br/>      prod list<br/>120</pre>"}, {"lang": "AppleScript", "loc": 7, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> array <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> sum <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">set</span> product <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">in</span> array<br/>    <span class=\"kw3\">set</span> sum <span class=\"kw3\">to</span> sum <span class=\"sy0\">+</span> i<br/>    <span class=\"kw3\">set</span> product <span class=\"kw3\">to</span> product <span class=\"sy0\">*</span> i<br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span></pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\">numbers <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><br/>product <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> numbers<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/><span class=\"br0\">{</span><br/>sum <span class=\"sy0\">+=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>product <span class=\"sy0\">*=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> sum <span class=\"sy0\">=</span> <span class=\"re0\">%sum%</span>`nproduct <span class=\"sy0\">=</span> <span class=\"re0\">%product%</span></pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\">$ awk 'func sum<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw4\">split</span><span class=\"br0\">(</span>s,a<span class=\"br0\">)</span>;r=<span class=\"nu0\">0</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span>r<span class=\"sy3\">+</span>=a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<span class=\"kw6\">return</span> r<span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> sum<span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">55</span><br/>\u00a0<br/>$ awk 'func prod<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw4\">split</span><span class=\"br0\">(</span>s,a<span class=\"br0\">)</span>;r=<span class=\"nu0\">1</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> a<span class=\"br0\">)</span>r<span class=\"sy3\">*</span>=a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<span class=\"kw6\">return</span> r<span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> prod<span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">3628800</span></pre>"}, {"lang": "Babel", "loc": 13, "block": "<pre class=\"text highlighted_source\">main: { [2 3 5 7 11 13] sp }<br/>\u00a0<br/>sum!   \u00a0: { &lt;- 0 -&gt; { + } eachar }<br/>product!: { &lt;- 1 -&gt; { * } eachar }<br/>\u00a0<br/>sp!: <br/>    { dup <br/>    sum\u00a0%d cr &lt;&lt;<br/>    product\u00a0%d cr &lt;&lt; }<br/>\u00a0<br/>Result:<br/>41<br/>30030</pre>"}, {"lang": "BASIC", "loc": 8, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">dim</span> array<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> sum <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">dim</span> prod <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> index <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"kw1\">lbound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw1\">ubound</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  sum += array<span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>  prod *= array<span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span></pre>"}, {"lang": "BBC BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">      DIM array%(5)<br/>      array%() = 1, 2, 3, 4, 5, 6<br/>\u00a0<br/>      PRINT \"Sum of array elements = \"\u00a0; SUM(array%())<br/>\u00a0<br/>      product% = 1<br/>      FOR I% = 0 TO DIM(array%(),1)<br/>        product% *= array%(I%)<br/>      NEXT<br/>      PRINT \"Product of array elements = \"\u00a0; product%</pre>"}, {"lang": "bc", "loc": 14, "block": "<pre class=\"text highlighted_source\">a[0] = 3.0<br/>a[1] = 1<br/>a[2] = 4.0<br/>a[3] = 1.0<br/>a[4] = 5<br/>a[5] = 9.00<br/>n = 6<br/>p = 1<br/>for (i = 0; i &lt; n; i++) {<br/>    s += a[i]<br/>    p *= a[i]<br/>}<br/>\"Sum: \"; s<br/>\"Product: \"; p</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">0 &amp;&gt;: #v_ $. @<br/>       &gt;1- \\ &amp; + \\v<br/>   ^              &lt;</pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">( ( sumprod<br/>  =   sum prod num<br/>    .   0:?sum<br/>      &amp; 1:?prod<br/>      &amp; (  \u00a0!arg<br/>         \u00a0:  \u00a0?<br/>              ( #%?num\u00a0?<br/>              &amp;\u00a0!num+!sum:?sum<br/>              &amp;\u00a0!num*!prod:?prod<br/>              &amp; ~<br/>              )<br/>        | (!sum.!prod)<br/>        )<br/>  )<br/>&amp; out$sumprod$(2 3 5 7 11 13 17 19)<br/>);</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* using pointer arithmetic (because we can, I guess) */</span><br/><span class=\"kw4\">int</span> arg<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> arg_length <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>end <span class=\"sy0\">=</span> arg<span class=\"sy0\">+</span>arg_length<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> prod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> arg<span class=\"sy0\">;</span> p<span class=\"sy0\">!=</span>end<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   sum <span class=\"sy0\">+=</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>   prod <span class=\"sy0\">*=</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, prod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arg <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  sum <span class=\"sy0\">+=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>  prod <span class=\"sy0\">*=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> arg<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> sum  <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>arg, arg<span class=\"sy2\">+</span><span class=\"nu0\">5</span>, <span class=\"nu0\">0</span>, std<span class=\"sy4\">::</span><span class=\"me2\">plus</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"co1\">// or just</span><br/><span class=\"co1\">// std::accumulate(arg, arg + 5, 0);</span><br/><span class=\"co1\">// since plus() is the default functor for accumulate</span><br/><span class=\"kw4\">int</span> prod <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>arg, arg<span class=\"sy2\">+</span><span class=\"nu0\">5</span>, <span class=\"nu0\">1</span>, std<span class=\"sy4\">::</span><span class=\"me2\">multiplies</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "Chef", "loc": 23, "block": "<pre class=\"text highlighted_source\">Sum and Product of Numbers as a Piece of Cake.<br/>\u00a0<br/>This recipe sums N given numbers.<br/>\u00a0<br/>Ingredients.<br/>1 N<br/>0 sum<br/>1 product<br/>1 number<br/>\u00a0<br/>Method.<br/>Put sum into 1st mixing bowl.<br/>Put product into 2nd mixing bowl.<br/>Take N from refrigerator.<br/>Chop N.<br/>Take number from refrigerator.<br/>Add number into 1st mixing bowl.<br/>Combine number into 2nd mixing bowl.<br/>Chop N until choped.<br/>Pour contents of 2nd mixing bowl into the baking dish.<br/>Pour contents of 1st mixing bowl into the baking dish.<br/>\u00a0<br/>Serves 1.</pre>"}, {"lang": "Clean", "loc": 3, "block": "<pre class=\"text highlighted_source\">array = {1, 2, 3, 4, 5}<br/>Sum = sum [x \\\\ x &lt;-: array]<br/>Prod = foldl (*) 1 [x \\\\ x &lt;-: array]</pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn sum <span class=\"br0\">[</span>vals<span class=\"br0\">]</span> <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span>vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn product <span class=\"br0\">[</span>vals<span class=\"br0\">]</span> <span class=\"br0\">(</span>reduce<span class=\"sy0\"> * </span>vals<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 25, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> array-sum-and-product<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  Array-<span class=\"kw3\">Size</span>              <span class=\"kw3\">VALUE</span> <span class=\"nu0\">10</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  array-<span class=\"kw3\">area</span>              <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"01020304050607080910\"</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  array               <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span> <span class=\"kw3\">OCCURS</span> Array-<span class=\"kw3\">Size</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  array-<span class=\"kw4\">sum</span>               <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  array-product           <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  i                       <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> Array-<span class=\"kw3\">Size</span> &lt; i<br/>               <span class=\"kw2\">ADD</span> array <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> array-<span class=\"kw4\">sum</span><br/>               <span class=\"kw2\">MULTIPLY</span> array <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">BY</span> array-product<br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Sum:     \"</span> array-<span class=\"kw4\">sum</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Product: \"</span> array-product<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 7, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>sum = <span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  array.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> y<br/>\u00a0<br/>product = <span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  array.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> y<br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 2, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Variables.myArray <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#ArraySum<span class=\"br0\">(</span>Variables.myArray<span class=\"br0\">)</span>#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>data #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; the array</span><br/>  <span class=\"br0\">(</span>values <span class=\"br0\">(</span>reduce #'+ data<span class=\"br0\">)</span>       <span class=\"co1\">; sum</span><br/>          <span class=\"br0\">(</span>reduce #'* data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; product</span></pre>"}, {"lang": "Crystal", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> sum_product<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> a.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> prod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>        prod <span class=\"sy0\">*=</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Sum: \"</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Product: \"</span><span class=\"sy0\">,</span> prod<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 3, "block": "<pre class=\"text highlighted_source\">1 3 5 7 9 11 13 0ss1sp[dls+sslp*spz0!=a]dsax[Sum: ]Plsp[Product: ]Plpp<br/>Sum: 49<br/>Product: 135135</pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SumAndProductOfArray<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  lIntArray<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy1\">..</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  lSum<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  lProduct<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span>lIntArray<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>lSum<span class=\"sy1\">,</span> lIntArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lProduct <span class=\"sy1\">:</span><span class=\"sy3\">=</span> lProduct <span class=\"sy3\">*</span> lIntArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Sum: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lSum<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Product: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lProduct<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> x <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">1</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">*</span> x <span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 43, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ttest<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> test.<span class=\"me1\">make_empty</span><br/>\t\t\ttest <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">5</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Sum: \"</span> <span class=\"sy0\">+</span> sum <span class=\"br0\">(</span>test<span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Product: \"</span> <span class=\"sy0\">+</span> product <span class=\"br0\">(</span>test<span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsum <span class=\"br0\">(</span>ar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Sum of the items of the array 'ar'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\tar.<span class=\"me1\">lower</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> ar.<span class=\"me1\">upper</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> ar <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tproduct <span class=\"br0\">(</span>ar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Product of the items of the array 'ar'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\tacross<br/>\t\t\t\tar.<span class=\"me1\">lower</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> ar.<span class=\"me1\">upper</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">*</span> ar <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 10, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var list\u00a0:= (1, 2, 3, 4, 5 ).<br/>\u00a0<br/>    var sum\u00a0:= list summarize(Integer new).<br/>    var product\u00a0:= list accumulate(Integer new:1) with(:var:val)( var * val ).<br/>].</pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">iex(26)&gt; Enum.reduce([1,2,3,4,5], 0, fn x,acc -&gt; x+acc end)<br/>15<br/>iex(27)&gt; Enum.reduce([1,2,3,4,5], 1, fn x,acc -&gt; x*acc end)<br/>120<br/>iex(28)&gt; Enum.reduce([1,2,3,4,5], fn x,acc -&gt; x+acc end)<br/>15<br/>iex(29)&gt; Enum.reduce([1,2,3,4,5], fn x,acc -&gt; x*acc end)<br/>120<br/>iex(30)&gt; Enum.reduce([], 0, fn x,acc -&gt; x+acc end)<br/>0<br/>iex(31)&gt; Enum.reduce([], 1, fn x,acc -&gt; x*acc end)<br/>1<br/>iex(32)&gt; Enum.reduce([], fn x,acc -&gt; x+acc end)<br/>** (Enum.EmptyError) empty error<br/>    (elixir) lib/enum.ex:1287: Enum.reduce/2<br/>iex(32)&gt; Enum.reduce([], fn x,acc -&gt; x*acc end)<br/>** (Enum.EmptyError) empty error<br/>    (elixir) lib/enum.ex:1287: Enum.reduce/2</pre>"}, {"lang": "Emacs Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">eval</span> <span class=\"br0\">(</span>concatenate '<span class=\"kw1\">list</span> '<span class=\"br0\">(</span>+<span class=\"br0\">)</span> <span class=\"kw1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">eval</span> <span class=\"br0\">(</span>concatenate '<span class=\"kw1\">list</span> '<span class=\"br0\">(</span>*<span class=\"br0\">)</span> <span class=\"kw1\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% create the list:</span><br/><span class=\"re5\">L</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% and compute its sum:</span><br/><span class=\"re5\">S</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re5\">P</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">*</span> <span class=\"re5\">P</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 14, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> array<br/><span class=\"kw2\">integer</span> sum<span class=\"sy2\">,</span>prod<br/>\u00a0<br/>array <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> <span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"sy2\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">}</span><br/>\u00a0<br/>sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>prod <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  sum <span class=\"sy1\">+=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  prod <span class=\"sy1\">*=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"sum is\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>sum<span class=\"br0\">)</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"prod is\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>prod<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span>| <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> |<span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> sum <span class=\"sy0\">=</span> numbers <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sum</span><br/><span class=\"kw1\">let</span> product <span class=\"sy0\">=</span> numbers <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">1 5 1 &lt;range&gt; [ sum . ] [ product . ] bi<br/>    15 120<br/>{ 1 2 3 4 } [ sum ] [ product ] bi<br/>    10 24</pre>"}, {"lang": "FALSE", "loc": 9, "block": "<pre class=\"text highlighted_source\">1 2 3 4 5 {input \"array\"}<br/>5         {length of input}<br/>0s:       {sum}<br/>1p:       {product}<br/>\u00a0<br/>[$0=~][1-\\$s;+s:p;*p:]#%<br/>\u00a0<br/>\"Sum: \"s;.\"<br/>Product: \"p;.</pre>"}, {"lang": "Fantom", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    Int[] array\u00a0:= (1..20).toList<br/>\u00a0<br/>    // you can use a loop<br/>    Int sum\u00a0:= 0<br/>    array.each |Int n| { sum += n }<br/>    echo (\"Sum of array is\u00a0: $sum\")<br/>\u00a0<br/>    Int product\u00a0:= 1<br/>    array.each |Int n| { product *= n }<br/>    echo (\"Product of array is\u00a0: $product\")<br/>\u00a0<br/>    // or use 'reduce'<br/>    // 'reduce' takes a function, <br/>    //       the first argument is the accumulated value<br/>    //       and the second is the next item in the list<br/>    sum = array.reduce(0) |Obj r, Int v -&gt; Obj| <br/>    { <br/>      return (Int)r + v <br/>    }<br/>    echo (\"Sum of array\u00a0: $sum\")<br/>\u00a0<br/>    product = array.reduce(1) |Obj r, Int v -&gt; Obj| <br/>    { <br/>      return (Int)r * v <br/>    }<br/>    echo (\"Product of array\u00a0: $product\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: third ( a b c -- a b c a ) 2 pick\u00a0;<br/>: reduce ( xt n addr cnt -- n' ) \\ where xt ( a b -- n )<br/>  cells bounds do i @ third execute  cell +loop nip\u00a0;<br/>\u00a0<br/>create a 1 , 2 , 3 , 4 , 5 ,<br/>\u00a0<br/>' + 0 a 5 reduce .    \\ 15<br/>' * 1 a 5 reduce .    \\ 120</pre>"}, {"lang": "Fortran", "loc": 5, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">sresult</span>, presult<br/>\u00a0<br/>sresult <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>presult <span class=\"sy0\">=</span> <span class=\"kw4\">product</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 13, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, sum = <span class=\"nu0\">0</span>, prod = <span class=\"nu0\">1</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>  sum  += a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  prod *= a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Sum     =\"</span>; sum<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Product =\"</span>; prod<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = [1,2,3,5,7]<br/>sum[a]<br/>product[a]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 14, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iSum, iCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iPrd <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> iCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> iList.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a><br/>  iSum <span class=\"sy0\">+=</span> iList<span class=\"br0\">[</span>iCount<span class=\"br0\">]</span><br/>  iPrd <span class=\"sy0\">*=</span> iList<span class=\"br0\">[</span>iCount<span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"The Sum =<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> iSum<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"The Product =<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> iPrd<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 15, "block": "<pre class=\"text highlighted_source\">v\u00a0:= [1 .. 8];<br/>\u00a0<br/>Sum(v);<br/># 36<br/>\u00a0<br/>Product(v);<br/># 40320<br/>\u00a0<br/># You can sum or multiply the result of a function<br/>\u00a0<br/>Sum(v, n -&gt; n^2);<br/># 204<br/>\u00a0<br/>Product(v, n -&gt; 1/n);<br/># 1/40320</pre>"}, {"lang": "GFA Basic", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DIM a%(10)<br/>' put some values into the array<br/>FOR i%=1 TO 10<br/>  a%(i%)=i%<br/>NEXT i%<br/>'<br/>sum%=0<br/>product%=1<br/>FOR i%=1 TO 10<br/>  sum%=sum%+a%(i%)<br/>  product%=product%*a%(i%)<br/>NEXT i%<br/>'<br/>PRINT \"Sum is \";sum%<br/>PRINT \"Product is \";product%<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    sum<span class=\"sy1\">,</span> prod <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> x<br/>        prod <span class=\"sy2\">*=</span> x<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>sum<span class=\"sy1\">,</span> prod<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "GW-BASIC", "loc": 13, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> REM Create an array with some test <a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> in it<br/><span class=\"co3\">20</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> A<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"co3\">30</span> <span class=\"kw1\">FOR</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span>: <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span>: <span class=\"kw1\">NEXT</span> I<br/><span class=\"co3\">40</span> <a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/><span class=\"co3\">50</span> REM Find the sum of elements in the array<br/><span class=\"co3\">60</span> S <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co3\">65</span> P <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">70</span> <span class=\"kw1\">FOR</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"co3\">72</span> S <span class=\"sy0\">=</span> SUM <span class=\"sy0\">+</span> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/><span class=\"co3\">75</span> P <span class=\"sy0\">=</span> P <span class=\"sy0\">*</span> A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/><span class=\"co3\">77</span> <span class=\"kw1\">NEXT</span> I<br/><span class=\"co3\">80</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"The sum is \"</span>; S;<br/><span class=\"co3\">90</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" and the product is \"</span>; P</pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">values <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> values           <span class=\"co1\">-- the easy way</span><br/>p <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> values<br/>\u00a0<br/>s1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> values  <span class=\"co1\">-- the hard way</span><br/>p1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> values</pre>"}, {"lang": "HicEst", "loc": 10, "block": "<pre class=\"hicest highlighted_source\">array <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"co1\">! 1, 2, ..., LEN(array)</span><br/>\u00a0<br/><span class=\"kw1\">sum</span> <span class=\"sy1\">=</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>\u00a0<br/>product <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"co1\">! no built-in product function in HicEst</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  product <span class=\"sy1\">=</span> product <span class=\"sy1\">*</span> array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> n<span class=\"sy1\">,</span> <span class=\"kw1\">sum</span><span class=\"sy1\">,</span> product <span class=\"co1\">! n=100; sum=5050; product=9.33262154E157;</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span> sum <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+:=</span> <span class=\"sy1\">!</span>arglist<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span> prod <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy1\">*:=</span> <span class=\"sy1\">!</span>arglist<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"sum\u00a0:= \"</span><span class=\"sy1\">,</span> sum<span class=\"sy1\">,</span><span class=\"st0\">\", prod\u00a0:= \"</span><span class=\"sy1\">,</span>prod<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>print,total<span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>print,product<span class=\"br0\">(</span>array<span class=\"br0\">)</span></pre>"}, {"lang": "Inform 7", "loc": 12, "block": "<pre class=\"text highlighted_source\">Sum And Product is a room.<br/>\u00a0<br/>To decide which number is the sum of (N - number) and (M - number) (this is summing):<br/>\tdecide on N + M.<br/>\u00a0<br/>To decide which number is the product of (N - number) and (M - number) (this is production):<br/>\tdecide on N * M.<br/>\u00a0<br/>When play begins:<br/>\tlet L be {1, 2, 3, 4, 5};<br/>\tsay \"List: [L in brace notation], sum = [summing reduction of L], product = [production reduction of L].\";<br/>\tend the story.</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">sum     =: +/<br/>product =: */</pre>"}, {"lang": "Java", "loc": 14, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> SumProd<br/><span class=\"br0\">{</span><br/> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">int</span> sum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">int</span> prod = <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arg = <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i\u00a0: arg<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>   sum += i<span class=\"sy0\">;</span><br/>   prod <span class=\"sy0\">*</span>= i<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>    prod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    i<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">+=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    prod <span class=\"sy0\">*=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>alert<span class=\"br0\">(</span>sum <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> prod<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">[4,6,8] | add<br/># =&gt; 18</pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">julia&gt; sum([4,6,8])<br/>18<br/>\u00a0<br/>julia&gt; +((1:10)...)<br/>55<br/>\u00a0<br/>julia +([1,2,3]...)<br/>6<br/>\u00a0<br/>julia&gt; prod([4,6,8])<br/>192</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">  sum: {+/}x<br/>  product: {*/}x<br/>  a: 1 3 5 7 9 11 13<br/>  sum a<br/>49<br/>  product a<br/>135135</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Array contains\u00a0: ${a.contentToString()}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> a.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Sum is $sum\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> product <span class=\"sy0\">=</span> a.<span class=\"me1\">fold</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, i -<span class=\"sy0\">&gt;</span> acc <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Product is $product\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 4, "block": "<pre class=\"text highlighted_source\">4 iota 1 + dup<br/>\u00a0<br/>'+ reduce<br/>'* reduce</pre>"}, {"lang": "Lasso", "loc": 11, "block": "<pre class=\"text highlighted_source\">local(x = array(1,2,3,4,5,6,7,8,9,10))<br/>// sum of array elements<br/>'Sum: '<br/>with n in #x<br/>sum #n<br/>'\\r'<br/>// product of arrray elements<br/>'Product: '<br/>local(product = 1)<br/>with n in #x do =&gt; { #product *= #n }<br/>#product</pre>"}, {"lang": "Liberty BASIC", "loc": 15, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">Dim</span> array<span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>    array<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"co1\">'product must first equal one or you will get 0 as the product</span><br/>product <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>    sum <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">+</span> array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    product <span class=\"sy0\">=</span> <span class=\"br0\">(</span>product <span class=\"sy0\">*</span> array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Sum is \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Product is \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>product<span class=\"br0\">)</span></pre>"}, {"lang": "Lingo", "loc": 15, "block": "<pre class=\"text highlighted_source\">on sum (intList)<br/>  res = 0<br/>  repeat with v in intList<br/>    res = res + v<br/>  end repeat<br/>  return res<br/>end<br/>\u00a0<br/>on product (intList)<br/>  res = 1<br/>  repeat with v in intList<br/>    res = res * v<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 15, "block": "<pre class=\"text highlighted_source\">//sum<br/>put \"1,2,3,4\" into nums<br/>split nums using comma<br/>answer sum(nums)<br/>\u00a0<br/>// product<br/>local prodNums<br/>repeat for each element n in nums<br/>    if prodNums is empty then <br/>        put n into prodNums<br/>    else<br/>        multiply prodnums by n<br/>    end if<br/>end repeat <br/>answer prodnums</pre>"}, {"lang": "Logo", "loc": 2, "block": "<pre class=\"text highlighted_source\">print apply \"sum arraytolist {1 2 3 4 5}<br/>print apply \"product arraytolist {1 2 3 4 5}</pre>"}, {"lang": "Lua", "loc": 8, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> sumf<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> a <span class=\"kw2\">and</span> a <span class=\"sy0\">+</span> sumf<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> sumt<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> sumf<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> prodf<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> a <span class=\"kw2\">and</span> a <span class=\"sy0\">*</span> prodf<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> prodt<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> prodf<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sumt<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>prodt<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Lucid", "loc": 6, "block": "<pre class=\"text highlighted_source\">[%sum,product%]<br/> where<br/>    x = 1 fby x + 1;<br/>    sum = 0 fby sum + x;<br/>    product = 1 fby product * x<br/> end</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">a\u00a0:= Array([1, 2, 3, 4, 5, 6]);<br/>\tadd(a);<br/>\tmul(a);</pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">a = {1, 2, 3, 4, 5}<br/>Plus @@ a<br/>Apply[Plus, a]<br/>Total[a]<br/><a class=\"__cf_email__\" data-cfemail=\"34605b4055587455\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>a // Total<br/>Sum[a[[i]], {i, 1, Length[a]}]<br/>Sum[i, {i, a}]</pre>"}, {"lang": "MATLAB", "loc": 35, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; array = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>;<span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span>;<span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>array =<br/>\u00a0<br/>     <span class=\"nu0\">1</span>     <span class=\"nu0\">2</span>     <span class=\"nu0\">3</span><br/>     <span class=\"nu0\">4</span>     <span class=\"nu0\">5</span>     <span class=\"nu0\">6</span><br/>     <span class=\"nu0\">7</span>     <span class=\"nu0\">8</span>     <span class=\"nu0\">9</span><br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>array,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>    <span class=\"nu0\">12</span>    <span class=\"nu0\">15</span>    <span class=\"nu0\">18</span><br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>array,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">6</span><br/>    <span class=\"nu0\">15</span><br/>    <span class=\"nu0\">24</span><br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/prod.html\"><span class=\"kw2\">prod</span></a><span class=\"br0\">(</span>array,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>    <span class=\"nu0\">28</span>    <span class=\"nu0\">80</span>   <span class=\"nu0\">162</span><br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/prod.html\"><span class=\"kw2\">prod</span></a><span class=\"br0\">(</span>array,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">6</span><br/>   <span class=\"nu0\">120</span><br/>   <span class=\"nu0\">504</span></pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">lreduce(\"+\", [1, 2, 3, 4, 5, 6, 7, 8]);<br/>36<br/>\u00a0<br/>lreduce(\"*\", [1, 2, 3, 4, 5, 6, 7, 8]);<br/>40320</pre>"}, {"lang": "MAXScript", "loc": 5, "block": "<pre class=\"text highlighted_source\">arr = #(1, 2, 3, 4, 5)<br/>sum = 0<br/>for i in arr do sum += i<br/>product = 1<br/>for i in arr do product *= i</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 2, "block": "<pre class=\"text highlighted_source\">^\t1\t\u041fE\t+\t\u041f0\t\u041a\u0418\u041f0\tx#0\t18\t^\t\u0418\u041fD<br/>+\t\u041fD\t&lt;-&gt;\t\u0418\u041fE\t*\t\u041fE\t\u0411\u041f\t05\t\u0421/\u041f</pre>"}, {"lang": "Modula-3", "loc": 17, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Sumprod <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> IO <span class=\"kw1\">IMPORT</span> Put;<br/><span class=\"kw1\">FROM</span> Fmt <span class=\"kw1\">IMPORT</span> Int;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> a <span class=\"sy0\">:=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span>;<br/><span class=\"kw1\">VAR</span> sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">VAR</span> prod<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    prod <span class=\"sy0\">:=</span> prod <span class=\"sy0\">*</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  Put<span class=\"br0\">(</span><span class=\"st0\">\"Sum of array: \"</span> &amp; Int<span class=\"br0\">(</span>sum<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  Put<span class=\"br0\">(</span><span class=\"st0\">\"Product of array: \"</span> &amp; Int<span class=\"br0\">(</span>prod<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Sumprod.</pre>"}, {"lang": "MUMPS", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>SUMPROD(A)<br/>\u00a0;Compute the sum and product of the numbers in the array A<br/> NEW SUM,PROD,POS<br/>\u00a0;SUM is the running sum, <br/>\u00a0;PROD is the running product,<br/>\u00a0;POS is the position within the array A<br/> SET SUM=0,PROD=1,POS=\"\"<br/> FOR  SET POS=$ORDER(A(POS)) Q:POS=\"\"  SET SUM=SUM+A(POS),PROD=PROD*A(POS)<br/> WRITE\u00a0!,\"The sum of the array is \"_SUM<br/> WRITE\u00a0!,\"The product of the array is \"_PROD<br/> KILL SUM,PROD,POS<br/> QUIT</pre>"}, {"lang": "Nemerle", "loc": 30, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Collections.Generic;<br/>using Nemerle.Collections;<br/>\u00a0<br/>module SumProd<br/>{<br/>    Sum[T] (nums\u00a0: T)\u00a0: int<br/>      where T\u00a0: IEnumerable[int]<br/>    {<br/>        nums.FoldLeft(0, _+_)<br/>    }<br/>\u00a0<br/>    Product[T] (nums\u00a0: T)\u00a0: int<br/>      where T\u00a0: IEnumerable[int]<br/>    {<br/>        nums.FoldLeft(1, _*_)<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def arr = array[1, 2, 3, 4, 5];<br/>        def lis = [1, 2, 3, 4, 5];<br/>\u00a0<br/>        def suml = Sum(lis);<br/>        def proda = Product(arr);<br/>\u00a0<br/>        WriteLine(\"Sum is: {0}\\tProduct is: {1}\", suml, proda);<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 25, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>harry = <span class=\"br0\">[</span>long <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>\u00a0<br/>sum = long <span class=\"nu0\">0</span><br/>product = long <span class=\"nu0\">1</span><br/>entries = Rexx <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> n_ = int <span class=\"nu0\">0</span> to harry.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>  nxt = harry<span class=\"br0\">[</span>n_<span class=\"br0\">]</span><br/>  entries = entries nxt<br/>  sum = sum + nxt<br/>  product = product <span class=\"sy0\">*</span> nxt <br/>  <span class=\"kw3\">end</span> n_<br/>\u00a0<br/>entries = entries.<span class=\"kw6\">strip</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Sum and product of'</span> entries.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"st0\">':'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     Sum:'</span> sum<br/><span class=\"kw1\">say</span> <span class=\"st0\">' Product:'</span> product<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 3, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> a <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">+</span> a<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">*</span> a<span class=\"br0\">)</span></pre>"}, {"lang": "Nial", "loc": 4, "block": "<pre class=\"text highlighted_source\">+ 1 2 3<br/>= 6<br/>* 1 2 3<br/>= 6</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">var xs = @[1,2,3,4,5,6]<br/>\u00a0<br/>var sum, product: int<br/>\u00a0<br/>product = 1<br/>\u00a0<br/>for x in xs:<br/>  sum += x<br/>  product *= x</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>prod <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>arg <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  sum <span class=\"sy0\">+=</span> arg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  prod <span class=\"sy0\">*=</span> arg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 13, "block": "<pre class=\"objc highlighted_source\"><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> sum<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>array<br/><span class=\"br0\">{</span> <br/>\t<span class=\"kw4\">int</span> i, sum, value;<br/>\tsum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>\tvalue <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; <span class=\"br0\">[</span>array count<span class=\"br0\">]</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tvalue <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>array objectAtIndex<span class=\"sy0\">:</span> i<span class=\"br0\">]</span> intValue<span class=\"br0\">]</span>;<br/>\t\tsum <span class=\"sy0\">+=</span> value;<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> suml;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* ints *)</span><br/><span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> a<span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span> a<span class=\"sy0\">;;</span><br/><span class=\"co1\">(* floats *)</span><br/><span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">3.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">;</span> <span class=\"nu0\">5.0</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"sy0\">+.</span><span class=\"br0\">)</span> <span class=\"nu0\">0.0</span> a<span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> a<span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 4, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"nu0\">3</span><span class=\"sy5\">,</span> <span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"nu0\">5</span><span class=\"sy5\">,</span> <span class=\"nu0\">6</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>b <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">10</span><span class=\"sy5\">,</span> <span class=\"nu0\">20</span><span class=\"sy5\">,</span> <span class=\"nu0\">30</span><span class=\"sy5\">,</span> <span class=\"nu0\">40</span><span class=\"sy5\">,</span> <span class=\"nu0\">50</span><span class=\"sy5\">,</span> <span class=\"nu0\">60</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>vsum <span class=\"sy3\">=</span> a <span class=\"sy1\">+</span> b<span class=\"sy5\">;</span><br/>vprod <span class=\"sy3\">=</span> a <span class=\"sy2\">.*</span> b<span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">[1, 2, 3, 4, 5 ] sum println<br/>[1, 3, 5, 7, 9 ] prod println</pre>"}, {"lang": "ooRexx", "loc": 22, "block": "<pre class=\"oorexx highlighted_source\">a=<span class=\"sy0\">.</span>my_array~new<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20</span><br/>  a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>=i<br/>  <span class=\"kw3\">End</span><br/>s=a~makestring<span class=\"br0\">(</span><span class=\"br0\">(</span>LINE<span class=\"br0\">)</span>,<span class=\"st0\">','</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> s<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'    sum='</span>a~sum<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'product='</span>a~prod<br/>::class my_array subclass array<br/>::method sum<br/>sum=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> self~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  sum+=self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> sum<br/>::method prod<br/><span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">30</span><br/>prod=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> self~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  prod<span class=\"sy0\">*</span>=self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> prod</pre>"}, {"lang": "Oz", "loc": 7, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Xs = <span class=\"br0\">[</span>1 2 3 4 5<span class=\"br0\">]</span><br/>  Sum = <span class=\"br0\">{</span>FoldL Xs Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"br0\">}</span><br/>  Product = <span class=\"br0\">{</span>FoldL Xs Number<span class=\"sy0\">.</span><span class=\"st0\">'*'</span> 1<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show Sum<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show Product<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 6, "block": "<pre class=\"parigp highlighted_source\">vecsum1<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>vecprod<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">prod</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@list</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"re0\">$prod</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$sum</span>  <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$prod</span> <span class=\"sy0\">*=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@list</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"re0\">$prod</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$sum</span>  <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$prod</span> <span class=\"sy0\">*=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@ary</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Sum: '</span><span class=\"sy0\">,</span>     <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@ary</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Product: '</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"re0\">@ary</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">sequence s = {1,2,3,4,5}<br/>integer asum = 0, aprod = 1<br/>for i=1 to length(s) do<br/>  asum += s[i]<br/>  aprod *= s[i]<br/>end for<br/>printf(1,\"sum is\u00a0%d\\n\",asum)        -- or sum(s)<br/>printf(1,\"prod is\u00a0%d\\n\",aprod)</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$array</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/array_product\"><span class=\"kw3\">array_product</span></a><span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let Data (1 2 3 4 5)<br/>   (cons<br/>      (apply + Data)<br/>      (apply * Data) ) )</pre>"}, {"lang": "PL/I", "loc": 5, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">declare</span> A<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span><br/>   <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">prod</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 5, "block": "<pre class=\"text highlighted_source\">lvars i, sum = 0, prod = 1, ar = {1 2 3 4 5 6 7 8 9};<br/>for i from 1 to length(ar) do<br/>    ar(i) + sum -&gt; sum;<br/>    ar(i) * prod -&gt; prod;<br/>endfor;</pre>"}, {"lang": "PostScript", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/sumandproduct<br/>{<br/>/x exch def<br/>/sum 0 def<br/>/prod 0 def<br/>/i 0 def<br/>x length 0 eq<br/>{<br/>}<br/>{<br/>/prod prod 1 add def<br/>x length{<br/>/sum sum x i get add def<br/>/prod prod x i get mul def<br/>/i i 1 add def<br/>}repeat<br/>}ifelse<br/>sum ==<br/>prod ==<br/>}def<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Sum <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span><span class=\"br0\">)</span>.Sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 4, "block": "<pre class=\"prolog highlighted_source\">sum<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>sum<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> sum<span class=\"br0\">(</span>T<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> H <span class=\"sy3\">+</span> Y<span class=\"sy4\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> product<span class=\"br0\">(</span>T<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> H <span class=\"sy3\">*</span> X<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 14, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Dim</span> MyArray<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span> a, sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, prod<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>MyArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; Create a list of some random numbers</span><br/>  MyArray<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>          <span class=\"co1\">; Insert a number [1...10] in current element</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>MyArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; Calculate Sum and Product of this Array</span><br/>  sum  <span class=\"sy0\">+</span> MyArray<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  prod <span class=\"sy0\">*</span> MyArray<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"The sum is \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span>        <span class=\"co1\">; Present the results</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"Product is \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>prod<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\">numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>total <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>\u00a0<br/>product <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> numbers:<br/>    product *<span class=\"sy0\">=</span> i</pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">total &lt;- sum(1:5)<br/>product &lt;- prod(1:5)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(for/sum ([x #(3 1 4 1 5 9)]) x)<br/>(for/product ([x #(3 1 4 1 5 9)]) x)</pre>"}, {"lang": "Raven", "loc": 2, "block": "<pre class=\"text highlighted_source\">0 [ 1 2 3 ] each +<br/>1 [ 1 2 3 ] each *</pre>"}, {"lang": "REBOL", "loc": 35, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Sum and Product\"<br/>    URL: http://rosettacode.org/wiki/Sum_and_product_of_array<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Simple:</span><br/>\u00a0<br/>sum: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>a <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span>local x<span class=\"br0\">]</span> <span class=\"br0\">[</span>x: <span class=\"nu0\">0</span>  <span class=\"kw2\">forall</span> a <span class=\"br0\">[</span>x: x + a<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  x<span class=\"br0\">]</span><br/>\u00a0<br/>product: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>a <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span>local x<span class=\"br0\">]</span> <span class=\"br0\">[</span>x: <span class=\"nu0\">1</span>  <span class=\"kw2\">forall</span> a <span class=\"br0\">[</span>x: x <span class=\"sy0\">*</span> a<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  x<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Way too fancy:</span><br/>\u00a0<br/>redux: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Applies an operation across an array to produce a reduced value.\"</span><br/>\ta <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Array to operate on.\"</span><br/>\top <span class=\"br0\">[</span>word<span class=\"sy0\">!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Operation to perform.\"</span><br/>\t<span class=\"sy0\">/</span>init x    <span class=\"st0\">\"Initial value (default 0).\"</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">if</span> <span class=\"kw3\">not</span> init <span class=\"br0\">[</span>x: <span class=\"nu0\">0</span><span class=\"br0\">]</span>  <span class=\"kw2\">forall</span> a <span class=\"br0\">[</span>x: <span class=\"kw2\">do</span> <span class=\"kw2\">compose</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span>op<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span>  x<span class=\"br0\">]</span><br/>\u00a0<br/>rsum: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>a <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>redux a '+<span class=\"br0\">]</span><br/>\u00a0<br/>rproduct: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>a <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>redux<span class=\"sy0\">/</span>init a '<span class=\"sy0\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Tests:</span><br/>\u00a0<br/>assert: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>code<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"kw2\">either</span> <span class=\"kw2\">do</span> code <span class=\"br0\">[</span><span class=\"st0\">\"  ok\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"FAIL\"</span><span class=\"br0\">]</span>  <span class=\"kw3\">mold</span> code<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Simple dedicated functions:\"</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">55</span>      = sum <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">3628800</span> = product <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Fancy reducing function:\"</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">55</span>      = rsum <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">3628800</span> = rproduct <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program adds and multiplies   N   elements of a (populated)  array  @. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">200</span>                     <span class=\"coMULTI\">/*200 decimal digit #s  (default is 9).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">20</span>    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>\u00a0<br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                <span class=\"coMULTI\">/*build array of  N  elements (or 20?).*/</span><br/>          @<span class=\"sy0\">.</span>j=j                        <span class=\"coMULTI\">/*set 1st to 1, 3rd to 3, 8th to 8 \u00b7\u00b7\u00b7 */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>sum=<span class=\"nu0\">0</span>                                  <span class=\"coMULTI\">/*initialize  SUM  (variable) to zero. */</span><br/>prod=<span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*initialize  PROD (variable) to unity.*/</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N<br/>          sum  = sum  + @<span class=\"sy0\">.</span>k            <span class=\"coMULTI\">/*add the element to the running total.*/</span><br/>          prod = prod <span class=\"sy0\">*</span> @<span class=\"sy0\">.</span>k            <span class=\"coMULTI\">/*multiply element to running product. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                  <span class=\"coMULTI\">/* [\u2191]  this pgm:  same as N factorial.*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'     sum of '</span>     m     <span class=\"st0\">\" elements for the  @  array is: \"</span>     sum<br/><span class=\"kw1\">say</span> <span class=\"st0\">' product of '</span>     m     <span class=\"st0\">\" elements for the  @  array is: \"</span>     prod<br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aList = 1:10   nSum=0  nProduct=0<br/>for x in aList nSum += x nProduct *= x next<br/>See \"Sum = \" + nSum + nl<br/>See \"Product = \" + nProduct + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">arr = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">]</span>     <span class=\"co1\"># or ary = *1..5, or ary = (1..5).to_a</span><br/><span class=\"kw3\">p</span> sum = arr.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>sum, item<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> item <span class=\"br0\">}</span><br/><span class=\"co1\"># =&gt; 15</span><br/><span class=\"kw3\">p</span> product = arr.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>prod, element<span class=\"sy0\">|</span> prod <span class=\"sy0\">*</span> element <span class=\"br0\">}</span><br/><span class=\"co1\"># =&gt; 120</span></pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">dim array(100)<br/>for i = 1 To 100<br/>    array(i) = rnd(0) * 100<br/>next i<br/>\u00a0<br/>product = 1<br/>for i = 0 To 19<br/>    sum     = (sum + array(i))<br/>    product = (product * array(i))<br/>next i<br/>\u00a0<br/>Print \"    Sum is \";sum<br/>Print \"Product is \";product</pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>fn main() {<br/>    let arr = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];<br/>\u00a0<br/>    // using fold<br/>    let sum = arr.iter().fold(0i32, |a, &amp;b| a + b);<br/>    let product = arr.iter().fold(1i32, |a, &amp;b| a * b);<br/>    println!(\"the sum is {} and the product is {}\", sum, product);<br/>\u00a0<br/>    // or using sum and product<br/>    let sum = arr.iter().sum::&lt;i32&gt;();<br/>    let product = arr.iter().product::&lt;i32&gt;();<br/>    println!(\"the sum is {} and the product is {}\", sum, product);<br/>}<br/>\u00a0</pre>"}, {"lang": "S-lang", "loc": 1, "block": "<pre class=\"text highlighted_source\">variable a = [5, -2, 3, 4, 666, 7];</pre>"}, {"lang": "SAS", "loc": 8, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>   <span class=\"kw4\">array</span> a<span class=\"br0\">{</span><span class=\"coMULTI\">*} a1-a100;</span><br/>   <span class=\"kw5\">do</span> i=<span class=\"nu0\">1</span> to <span class=\"nu0\">100</span>;<br/>      a<span class=\"br0\">{</span>i<span class=\"br0\">}</span>=i<span class=\"coMULTI\">*i;</span><br/>   <span class=\"kw5\">end</span>;<br/>   b=<span class=\"kw3\">sum</span><span class=\"br0\">(</span>of a<span class=\"br0\">{</span><span class=\"coMULTI\">*});</span><br/>   <span class=\"kw3\">put</span> b c;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Sather", "loc": 10, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    a\u00a0:ARRAY{INT}\u00a0:= |10, 5, 5, 20, 60, 100|;<br/>    sum, prod\u00a0:INT;<br/>    loop sum\u00a0:= sum + a.elt!; end;<br/>    prod\u00a0:= 1;<br/>    loop prod\u00a0:= prod * a.elt!; end;<br/>    #OUT + sum + \" \" + prod + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> seq <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> seq.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> + <span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> product <span class=\"sy0\">=</span> seq.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">*</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>apply <span class=\"sy0\">*</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 21, "block": "<pre class=\"text highlighted_source\">const func integer: sumArray (in array integer: valueArray) is func<br/>  result<br/>    var integer: sum is 0;<br/>  local<br/>    var integer: value is 0;<br/>  begin<br/>    for value range valueArray do<br/>      sum +:= value;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func integer: prodArray (in array integer: valueArray) is func<br/>  result<br/>    var integer: prod is 1;<br/>  local<br/>    var integer: value is 0;<br/>  begin<br/>    for value range valueArray do<br/>      prod *:= value;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 2, "block": "<pre class=\"text highlighted_source\">numbers\u00a0:= [1 2 3 4 5 6 7 8 9];<br/>print(+/ numbers, */ numbers);</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var ary = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>;<br/>say ary.<span class=\"me1\">sum</span>;                 <span class=\"co1\"># =&gt; 15</span><br/>say ary.<span class=\"me1\">prod</span>;                <span class=\"co1\"># =&gt; 120</span></pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">#(1 2 3 4 5) reduce: [:sum\u00a0:number | sum + number]<br/>#(1 2 3 4 5) reduce: [:product\u00a0:number | product * number]</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3 4 5<span class=\"br0\">)</span></span> inject: <span class=\"re5\">0</span> into: <span class=\"br0\">[</span>:<span class=\"re5\">sum</span>\u00a0:<span class=\"re5\">number</span> | sum + <span class=\"re5\">number</span><span class=\"br0\">]</span><br/><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3 4 5<span class=\"br0\">)</span></span> inject: <span class=\"re5\">1</span> into: <span class=\"br0\">[</span>:<span class=\"re5\">product</span>\u00a0:<span class=\"re5\">number</span> | product * <span class=\"re5\">number</span><span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 13, "block": "<pre class=\"text highlighted_source\">          t = table()<br/>* read the integer from the std. input<br/>init_tab  t&lt;x = x + 1&gt; = trim(input)   \u00a0:s(init_tab)<br/>          product = 1<br/>          sum = 0<br/>\u00a0<br/>* counting backwards to 1<br/>loop      i = t&lt; x =\u00a0?gt(x,1) x - 1&gt;\t:f(out)<br/>          sum = sum + i<br/>          product = product * i        \u00a0:(loop)<br/>out       output = \"Sum:  \" sum<br/>          output = \"Prod: \" product<br/>end</pre>"}, {"lang": "Sparkling", "loc": 4, "block": "<pre class=\"text highlighted_source\">spn:1&gt; reduce({ 1, 2, 3, 4, 5 }, 0, function(x, y) { return x + y; })<br/>= 15<br/>spn:2&gt; reduce({ 1, 2, 3, 4, 5 }, 1, function(x, y) { return x * y; })<br/>= 120</pre>"}, {"lang": "Standard ML", "loc": 8, "block": "<pre class=\"text highlighted_source\">(* ints *)<br/>val a = Array.fromList [1, 2, 3, 4, 5];<br/>Array.foldl op+ 0 a;<br/>Array.foldl op* 1 a;<br/>(* reals *)<br/>val a = Array.fromList [1.0, 2.0, 3.0, 4.0, 5.0];<br/>Array.foldl op+ 0.0 a;<br/>Array.foldl op* 1.0 a;</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">a = 1,-2,-3,-4,5<br/>sum(a)<br/>  -3<br/>(-1)^mod(sum(a:&lt;0),2)*exp(sum(log(abs(a))))<br/>  -120</pre>"}, {"lang": "Swift", "loc": 6, "block": "<pre class=\"text highlighted_source\">let a = [1, 2, 3, 4, 5]<br/>println(a.reduce(0, +)) // prints 15<br/>println(a.reduce(1, *)) // prints 120<br/>\u00a0<br/>println(reduce(a, 0, +)) // prints 15<br/>println(reduce(a, 1, *)) // prints 120</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> arr <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$arr</span> +<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> prod <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$arr</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">seq(X,X,1,10,1)\u2192L\u2081<br/>{1 2 3 4 5 6 7 8 9 10}<br/>sum(L\u2081)<br/>55<br/>prod(L\u2081)<br/>3628800</pre>"}, {"lang": "Toka", "loc": 12, "block": "<pre class=\"text highlighted_source\">4 cells is-array foo<br/>\u00a0<br/>212 1 foo array.put<br/>51 2 foo array.put<br/>12 3 foo array.put<br/>91 4 foo array.put<br/>\u00a0<br/>[ ( array size -- sum )<br/>  &gt;r 0 r&gt; 0 [ over i swap array.get + ] countedLoop nip ] is sum-array<br/>\u00a0<br/> ( product )<br/>reset 1 4 0 [ i foo array.get * ] countedLoop .</pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 2 3 4 5] 0 [+] foldl</pre>"}, {"lang": "TUSCRIPT", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>list=\"1'2'3'4'5\"<br/>sum=SUM(list)<br/>PRINT \"    sum: \",sum<br/>\u00a0<br/>product=1<br/>LOOP l=list<br/>product=product*l<br/>ENDLOOP<br/>PRINT \"product: \",product<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">sum</span>=<span class=\"nu0\">0</span><br/><span class=\"re2\">prod</span>=<span class=\"nu0\">1</span><br/><span class=\"re2\">list</span>=<span class=\"st0\">\"1 2 3\"</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"re1\">$list</span><br/><span class=\"kw1\">do</span> <span class=\"re2\">sum</span>=<span class=\"st0\">\"<span class=\"es4\">$(($sum + $n)</span>)\"</span>; <span class=\"re2\">prod</span>=<span class=\"st0\">\"<span class=\"es4\">$(($prod * $n)</span>)\"</span><br/><span class=\"kw1\">done</span><br/><span class=\"kw3\">echo</span> <span class=\"re1\">$sum</span> <span class=\"re1\">$prod</span></pre>"}, {"lang": "UnixPipes", "loc": 15, "block": "<pre class=\"bash highlighted_source\">prod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"kw2\">read</span> B; <span class=\"re2\">res</span>=<span class=\"re4\">$1</span>; <span class=\"kw3\">test</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">expr</span> <span class=\"re1\">$res</span> \\<span class=\"sy0\">*</span> <span class=\"re1\">$B</span> <span class=\"sy0\">||</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$res</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"kw2\">read</span> B; <span class=\"re2\">res</span>=<span class=\"re4\">$1</span>; <span class=\"kw3\">test</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">expr</span> <span class=\"re1\">$res</span> + <span class=\"re1\">$B</span> <span class=\"sy0\">||</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$res</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fold<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"re2\">func</span>=<span class=\"re4\">$1</span>; <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> a\u00a0; <span class=\"kw1\">do</span> fold <span class=\"re1\">$func</span> <span class=\"sy0\">|</span> <span class=\"re1\">$func</span> <span class=\"re1\">$a</span>\u00a0; <span class=\"kw1\">done</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"nu0\">3</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">4</span>;<span class=\"kw3\">echo</span> <span class=\"nu0\">1</span>;<span class=\"kw3\">echo</span> <span class=\"nu0\">5</span>;<span class=\"kw3\">echo</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>  <span class=\"kw2\">tee</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>fold <span class=\"kw2\">sum</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>fold prod<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>null</pre>"}, {"lang": "Ursa", "loc": 8, "block": "<pre class=\"text highlighted_source\">declare int&lt;&gt; stream<br/>append 34 76 233 8 2 734 56 stream<br/>\u00a0<br/># outputs 1143<br/>out (+ stream) endl console<br/>\u00a0<br/># outputs 3.95961079808E11<br/>out (* stream) endl console</pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#cast\u00a0%nW<br/>\u00a0<br/>sp = ^(sum:-0,product:-1) &lt;62,43,46,40,29,55,51,82,59,92,48,73,93,35,42,25&gt;</pre>"}, {"lang": "V", "loc": 1, "block": "<pre class=\"text highlighted_source\">[sp dup 0 [+] fold 'product=' put puts 1 [*] fold 'sum=' put puts].</pre>"}, {"lang": "Vala", "loc": 12, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, product <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> number <span class=\"kw1\">in</span> array<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tsum <span class=\"sy0\">+=</span> number<span class=\"sy0\">;</span><br/>\t\tproduct <span class=\"sy0\">*=</span> number<span class=\"sy0\">;</span> <br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBA Excel", "loc": 8, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> Demo()<br/><span class=\"kw4\">Dim</span> arr<br/>    arr = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"sum\u00a0: \"</span> &amp; Application.WorksheetFunction.Sum(arr)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"product\u00a0: \"</span> &amp; Application.WorksheetFunction.Product(arr)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 17, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> sum_and_product(arr)<br/>\tsum = 0<br/>\tproduct = 1<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tsum = sum + arr(i)<br/>\t\tproduct = product * arr(i)<br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.Write <span class=\"st0\">\"Sum: \"</span> &amp; sum<br/>\tWScript.StdOut.WriteLine<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Product: \"</span> &amp; product<br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>myarray = Array(1,2,3,4,5,6)<br/>sum_and_product(myarray)<br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"text highlighted_source\">def (sum_prod nums)<br/>  (list (+ @nums) (* @nums))</pre>"}, {"lang": "Wortel", "loc": 2, "block": "<pre class=\"text highlighted_source\">@sum [1 2 3 4]\u00a0; returns 10<br/>@prod [1 2 3 4]\u00a0; returns 24</pre>"}, {"lang": "XPL0", "loc": 12, "block": "<pre class=\"text highlighted_source\">code CrLf=9, IntOut=11;<br/>\u00a0<br/>func SumProd(A, L);<br/>int  A, L;<br/>int  S, P, I;<br/>[S:= 0;  P:= 1;<br/>for I:= 0 to L-1 do [S:= S+A(I);  P:= P*A(I)];<br/>IntOut(0, S);  CrLf(0);<br/>IntOut(0, P);  CrLf(0);<br/>]; \\SumSq<br/>\u00a0<br/>SumProd([1,2,3,4,5,6,7,8,9,10], 10)</pre>"}, {"lang": "XSLT", "loc": 36, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:stylesheet</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">xmlns:xsl</span>=<span class=\"st0\">\"http://www.w3.org/1999/XSL/Transform\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:output</span> <span class=\"re0\">method</span>=<span class=\"st0\">\"text\"</span> <span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"sum-prod\"</span><span class=\"re2\">&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"values\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"sum\"</span>  <span class=\"re0\">select</span>=<span class=\"st0\">\"0\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"prod\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"1\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:when</span> <span class=\"re0\">test</span>=<span class=\"st0\">\"not($values)\"</span><span class=\"re2\">&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span><br/>Sum: <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$sum\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span><br/>Product: <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$prod\"</span> <span class=\"re2\">/&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:when<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"sum-prod\"</span><span class=\"re2\">&gt;</span></span><br/>          <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"values\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$values[position() &gt;</span></span> 1]\" /&gt;<br/>          <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"sum\"</span>  <span class=\"re0\">select</span>=<span class=\"st0\">\"$sum  + $values[1]\"</span> <span class=\"re2\">/&gt;</span></span><br/>          <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"prod\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"$prod * $values[1]\"</span> <span class=\"re2\">/&gt;</span></span><br/>        <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:otherwise<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:choose<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>  <span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">match</span>=<span class=\"st0\">\"/\"</span><span class=\"re2\">&gt;</span></span><br/>     <span class=\"sc3\"><span class=\"re1\">&lt;xsl:text<span class=\"re2\">&gt;</span></span></span><br/>Sum (built-in): <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:text<span class=\"re2\">&gt;</span></span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:value-of</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"sum(//price)\"</span> <span class=\"re2\">/&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:call-template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"sum-prod\"</span><span class=\"re2\">&gt;</span></span><br/>      <span class=\"sc3\"><span class=\"re1\">&lt;xsl:with-param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"values\"</span> <span class=\"re0\">select</span>=<span class=\"st0\">\"//price\"</span> <span class=\"re2\">/&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:call-template<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:stylesheet<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn sum(vals){vals.reduce('+,0)}<br/>fcn product(vals){vals.reduce('*,1)}</pre>"}]}