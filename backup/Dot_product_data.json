{"task": "Dot_product", "blocks": [{"lang": "360 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">*        Dot product               03/05/2016<br/>DOTPROD  CSECT<br/>         USING  DOTPROD,R15<br/>         SR     R7,R7              p=0<br/>         LA     R6,1               i=1<br/>LOOPI    CH     R6,=AL2((B-A)/4)   do i=1 to hbound(a)<br/>         BH     ELOOPI<br/>         LR     R1,R6              i<br/>         SLA    R1,2               *4<br/>         L      R3,A-4(R1)         a(i)<br/>         L      R4,B-4(R1)         b(i)<br/>         MR     R2,R4              a(i)*b(i)<br/>         AR     R7,R3              p=p+a(i)*b(i)<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   XDECO  R7,PG              edit p<br/>         XPRNT  PG,80              print buffer<br/>         XR     R15,R15            rc=0<br/>         BR     R14                return<br/>A        DC     F'1',F'3',F'-5'<br/>B        DC     F'4',F'-2',F'-1'<br/>PG       DC     CL80' '            buffer<br/>         YREGS<br/>         END    DOTPROD</pre>"}, {"lang": "8th", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1,3,-5] [4,-2,-1] ' n:* ' n:+ a:dot . cr</pre>"}, {"lang": "ABAP", "loc": 26, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">report</span></a> zdot_product<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_n <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>      lv_sum <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>      lt_a <span class=\"kw4\">type</span> <span class=\"kw9\">standard <span class=\"kw4\">table</span> of</span> i<span class=\"sy0\">,</span><br/>      lt_b <span class=\"kw4\">type</span> <span class=\"kw9\">standard <span class=\"kw4\">table</span> of</span> i<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a><span class=\"sy0\">:</span> <span class=\"st0\">'1'</span> <span class=\"kw4\">to</span> lt_a<span class=\"sy0\">,</span> <span class=\"st0\">'3'</span> <span class=\"kw4\">to</span> lt_a<span class=\"sy0\">,</span> <span class=\"st0\">'-5'</span> <span class=\"kw4\">to</span> lt_a<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a><span class=\"sy0\">:</span> <span class=\"st0\">'4'</span> <span class=\"kw4\">to</span> lt_b<span class=\"sy0\">,</span> <span class=\"st0\">'-2'</span> <span class=\"kw4\">to</span> lt_b<span class=\"sy0\">,</span> <span class=\"st0\">'-1'</span> <span class=\"kw4\">to</span> lt_b<span class=\"sy0\">.</span><br/><span class=\"kw8\">describe table</span> lt_a <span class=\"kw4\">lines</span> lv_n<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> dot_product <span class=\"kw4\">using</span> lt_a lt_b lv_n <span class=\"kw4\">changing</span> lv_sum<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> lv_sum <span class=\"kw4\">left-justified</span><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> dot_product <span class=\"kw4\">using</span> it_a <span class=\"kw4\">like</span> lt_a<br/>                       it_b <span class=\"kw4\">like</span> lt_b<br/>                       iv_n <span class=\"kw4\">type</span> i<br/>                 <span class=\"kw4\">changing</span><br/>                       ev_sum <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPFIELD-SYMBOLS.htm\"><span class=\"kw2\">field-symbols</span></a><span class=\"sy0\">:</span> <span class=\"sy1\">&lt;</span>wa_a<span class=\"sy1\">&gt;</span> <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span> <span class=\"sy1\">&lt;</span>wa_b<span class=\"sy1\">&gt;</span> <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a> iv_n <span class=\"kw4\">times</span><span class=\"sy0\">.</span><br/>    <span class=\"kw8\">read table</span><span class=\"sy0\">:</span> it_a <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>wa_a<span class=\"sy1\">&gt;</span> <span class=\"kw4\">index</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span><span class=\"sy0\">,</span> it_b <span class=\"kw4\">assigning</span> <span class=\"sy1\">&lt;</span>wa_b<span class=\"sy1\">&gt;</span> <span class=\"kw4\">index</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span><span class=\"sy0\">.</span><br/>    lv_sum <span class=\"sy1\">=</span> lv_sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span> <span class=\"sy1\">&lt;</span>wa_a<span class=\"sy1\">&gt;</span> <span class=\"sy0\">*</span> <span class=\"sy1\">&lt;</span>wa_b<span class=\"sy1\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dotp <span class=\"br0\">(</span>v u<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>endp v<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp u<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>first v<span class=\"br0\">)</span> <span class=\"br0\">(</span>first u<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>dotp <span class=\"br0\">(</span>rest v<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 9, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> dotProduct<span class=\"br0\">(</span>v1:Vector.<span class=\"sy0\">&lt;</span>Number<span class=\"sy0\">&gt;</span>, v2:Vector.<span class=\"sy0\">&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>v1.<span class=\"kw3\">length</span> <span class=\"sy0\">!</span>= v2.<span class=\"kw3\">length</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">NaN</span>;<br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> v1.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t\tsum += v1<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>v2<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">return</span> sum;<br/><span class=\"br0\">}</span><br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>dotProduct<span class=\"br0\">(</span>Vector.<span class=\"sy0\">&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>,-<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,Vector.<span class=\"sy0\">&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span>,-<span class=\"nu0\">2</span>,-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> dot_product <span class=\"kw1\">is</span><br/>\t<span class=\"kw3\">type</span> vect <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\tv1\u00a0: vect\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>,-<span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>\tv2\u00a0: vect\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">4</span>,-<span class=\"nu0\">2</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw3\">function</span> dotprod<span class=\"br0\">(</span>a: vect; b: vect<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>\t\tsum\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">begin</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>a'Length=b'Length<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">raise</span> Constraint_Error; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t\t<span class=\"kw1\">for</span> p <span class=\"kw3\">in</span> a'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t\t\tsum\u00a0:= sum + a<span class=\"br0\">(</span>p<span class=\"br0\">)</span>*b<span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t\t<span class=\"kw1\">return</span> sum;<br/>\t<span class=\"kw1\">end</span> dotprod;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>put_line<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>dotprod<span class=\"br0\">(</span>v1,v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> dot_product;</pre>"}, {"lang": "Aime", "loc": 21, "block": "<pre class=\"text highlighted_source\">real<br/>dp(list a, list b)<br/>{<br/>    real p, v;<br/>    integer i;<br/>\u00a0<br/>    p = 0;<br/>    for (i, v in a) {<br/>        p += v * b[i];<br/>    }<br/>\u00a0<br/>    p;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    o_(dp(list(1r, 3r, -5r), list(4r, -2r, -1r)), \"\\n\");<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> DOTFIELD <span class=\"sy1\">=</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> DOTVEC <span class=\"sy1\">=</span> <span class=\"br0\">[</span>1<span class=\"sy1\">:</span>0<span class=\"br0\">]</span>DOTFIELD<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># The \"Spread Sheet\" way of doing a dot product:<br/>  o Assume bounds are equal, and start at 1 <br/>  o Ignore round off error<br/>#</span><br/><span class=\"kw4\">PRIO</span> SSDOT <span class=\"sy1\">=</span> 7<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> SSDOT <span class=\"sy1\">=</span> <span class=\"br0\">(</span>DOTVEC a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>DOTFIELD<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  DOTFIELD sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> sum <span class=\"sy1\">+:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># An improved dot-product version:<br/>  o Handles sparse vectors<br/>  o Improves summation by gathering round off error<br/>    with no additional multiplication - or LONG - operations.<br/>#</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>DOTVEC a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>DOTFIELD<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  DOTFIELD sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> round off error<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i<br/><span class=\"coMULTI\"># Assume bounds may not be equal, empty members are zero (sparse) #</span><br/>    <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> <span class=\"br0\">(</span><span class=\"kw8\">LWB</span> a <span class=\"sy1\">&gt;</span> <span class=\"kw8\">LWB</span> b <span class=\"sy1\">|</span> a <span class=\"sy1\">|</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> <span class=\"br0\">(</span><span class=\"kw8\">UPB</span> a <span class=\"sy1\">&lt;</span> <span class=\"kw8\">UPB</span> b <span class=\"sy1\">|</span> a <span class=\"sy1\">|</span> b <span class=\"br0\">)</span> <br/>  <span class=\"kw2\">DO</span><br/>    DOTFIELD org <span class=\"sy1\">=</span> sum<span class=\"sy1\">,</span> prod <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    sum <span class=\"sy1\">+:=</span> prod<span class=\"sy1\">;</span><br/>    round off error <span class=\"sy1\">+:=</span> sum <span class=\"sy1\">-</span> org <span class=\"sy1\">-</span> prod<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum <span class=\"sy1\">-</span> round off error<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Test: #</span><br/>DOTVEC a<span class=\"sy1\">=</span><span class=\"br0\">(</span>1<span class=\"sy1\">,</span>3<span class=\"sy1\">,-</span>5<span class=\"br0\">)</span><span class=\"sy1\">,</span> b<span class=\"sy1\">=</span><span class=\"br0\">(</span>4<span class=\"sy1\">,-</span>2<span class=\"sy1\">,-</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"a SSDOT b = \"</span><span class=\"sy1\">,</span><span class=\"kw22\">fixed</span><span class=\"br0\">(</span>a SSDOT b<span class=\"sy1\">,</span>0<span class=\"sy1\">,</span><span class=\"kw20\"><span class=\"kw26\">real</span> width</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"a   *   b = \"</span><span class=\"sy1\">,</span><span class=\"kw22\">fixed</span><span class=\"br0\">(</span>a   <span class=\"sy1\">*</span>   b<span class=\"sy1\">,</span>0<span class=\"sy1\">,</span><span class=\"kw20\"><span class=\"kw26\">real</span> width</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 24, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% computes the dot product of two equal length integer vectors           \u00a0%<br/>   \u00a0% (single dimension arrays ) the length of the vectors must be specified \u00a0%<br/>   \u00a0% in length.                                                             \u00a0%<br/>    integer procedure integerDotProduct( integer array a ( * )<br/>                                      \u00a0; integer array b ( * )<br/>                                      \u00a0; integer value length<br/>                                       )\u00a0;<br/>    begin<br/>        integer product;<br/>        product\u00a0:= 0;<br/>        for i\u00a0:= 1 until length do product\u00a0:= product + ( a(i) * b(i) );<br/>        product<br/>    end integerDotProduct\u00a0;<br/>\u00a0<br/>   \u00a0% declare two vectors of length 3                                        \u00a0%<br/>    integer array v1, v2 ( 1\u00a0:: 3 );<br/>   \u00a0% initialise the vectors                                                 \u00a0%<br/>    v1(1)\u00a0:=  1; v1(2)\u00a0:=  3; v1(3)\u00a0:= -5;<br/>    v2(1)\u00a0:=  4; v2(2)\u00a0:= -2; v2(3)\u00a0:= -1;<br/>   \u00a0% output the dot product                                                 \u00a0%<br/>    write( integerDotProduct( v1, v2, 3 ) )<br/>end.<br/>\u00a0</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre class=\"text highlighted_source\">1 3 \u00af5 +.\u00d7 4 \u00af2 \u00af1</pre>"}, {"lang": "AppleScript", "loc": 84, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- DOT PRODUCT ---------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- dotProduct\u00a0:: [Number] -&gt; [Number] -&gt; Number</span><br/><span class=\"kw3\">on</span> dotProduct<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> product<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">*</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs <span class=\"sy0\">=</span> length <span class=\"kw3\">of</span> ys <span class=\"kw3\">then</span><br/>        sum<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span>product, xs, ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span> <span class=\"co1\">-- arrays of differing dimension</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> dotProduct<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    dotProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; 3</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- sum\u00a0:: [Number] -&gt; Number</span><br/><span class=\"kw3\">on</span> sum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> add<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>add, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sum<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">Vet1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"1,3,-5\"</span><br/>Vet2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"4 , -2 , -1\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% DotProduct<span class=\"br0\">(</span> Vet1 <span class=\"sy0\">,</span> Vet2 <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;---------------------------</span><br/>\u00a0<br/>DotProduct<span class=\"br0\">(</span> VectorA <span class=\"sy0\">,</span> VectorB <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> ArrayA<span class=\"sy0\">,</span> VectorA<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> ArrayB<span class=\"sy0\">,</span> VectorB<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span> ArrayA0 <span class=\"sy0\">&lt;&gt;</span> ArrayB0 <span class=\"br0\">)</span><br/>    <span class=\"kw1\">Return</span> ERROR<br/>  <span class=\"kw1\">While</span> <span class=\"br0\">(</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;=</span> ArrayA0 <span class=\"br0\">)</span><br/>    Sum <span class=\"sy0\">+=</span> ArrayA<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">*</span> ArrayB<span class=\"re0\">%A_Index%</span><br/>  <span class=\"kw1\">Return</span> Sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 19, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f DOT_PRODUCT.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    v1 = <span class=\"st0\">\"1,3,-5\"</span><br/>    v2 = <span class=\"st0\">\"4,-2,-1\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">split</span><span class=\"br0\">(</span>v1,v1arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw4\">split</span><span class=\"br0\">(</span>v2,v2arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"error: vectors are of unequal lengths\"</span><span class=\"br0\">)</span><br/>      exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%g<span class=\"es0\">\\n</span>\"</span>,dot_product<span class=\"br0\">(</span>v1arr,v2arr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> dot_product<span class=\"br0\">(</span>v1,v2,  i,sum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> v1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sum <span class=\"sy3\">+</span>= v1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">*</span> v2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> 100\u00a0:<br/> 110  REM  DOT PRODUCT<br/> 120\u00a0:<br/> 130  REM  INITIALIZE VECTORS OF LENGTH N<br/> 140  N = 3<br/> 150  DIM V1(N): DIM V2(N)<br/> 160  FOR I = 1 TO N<br/> 170  V1(I) =  INT ( RND (1) * 20 - 9.5)<br/> 180  V2(I) =  INT ( RND (1) * 20 - 9.5)<br/> 190  NEXT I<br/> 300\u00a0:<br/> 310  REM  CALCULATE THE DOT PRODUCT<br/> 320\u00a0:<br/> 330  FOR I = 1 TO N:DP = DP + V1(I) * V2(I): NEXT I<br/> 400\u00a0:<br/> 410  REM  DISPLAY RESULT<br/> 420\u00a0:<br/> 430  PRINT \"[\";: FOR I = 1 TO N: PRINT \" \";V1(I);: NEXT I<br/> 440  PRINT \"] . [\";: FOR I = 1 TO N: PRINT \" \";V2(I);: NEXT I<br/> 450  PRINT \"] = \";DP<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 19, "block": "<pre class=\"text highlighted_source\">/* Calculate the dot product of two vectors a and b (represented as<br/> * arrays) of size n.<br/> */<br/>define d(a[], b[], n) {<br/>    auto d, i<br/>\u00a0<br/>    for (i = 0; i &lt; n; i++) {<br/>        d += a[i] * b[i]<br/>    }<br/>    return(d)<br/>}    <br/>\u00a0<br/>a[0] = 1<br/>a[1] = 3<br/>a[2] = -5<br/>b[0] = 4<br/>b[1] = -2<br/>b[2] = -1<br/>d(a[], b[], 3)</pre>"}, {"lang": "Befunge 93", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>v Space for variables<br/>v Space for vector1<br/>v Space for vector2<br/>v http://rosettacode.org/wiki/Dot_product<br/>                                            &gt;00pv<br/>&gt;&gt;55+\":htgneL\",,,,,,,,&amp;:0`                  | <br/>v,,,,,,,\"Length can't be negative.\"+55&lt;<br/>&gt;,,,,,,,,,,,,,,,,,,,@                 |!`-10&lt;<br/>                                      &gt;<a class=\"__cf_email__\" data-cfemail=\"f2c2dcb2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                             <br/>v,\")\".g00,,,,,,,,,,,,,,\"Vector a(size \"         &lt;<br/>0v01g00,\")\".g00,,,,,,,,,,,,,,\"Vector b\"&lt;<br/>0pvp2g01&amp;p01-1g01&lt;                     \"<br/>g&gt;&gt;         10g0`|               @.g30&lt;(<br/>1                &gt;03g:-03p&gt;00g1-`     |s<br/>0      vp00-1g00p30+g30*g2-1g00g1-1g00&lt;i<br/>p      &gt;        v         #            z<br/>vp1g01&amp;p01-1g01&lt;&gt;         ^            e<br/>&gt;      10g0`   |        vp01-1g01.g1&lt;  <br/>               &gt;00g1-10p&gt;10g:01-`   |  \"<br/>                                    &gt;  ^                                              <br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 7, "block": "<pre class=\"text highlighted_source\">  ( dot<br/>  =   a A z Z<br/>    .    \u00a0!arg:(%?a\u00a0?z.%?A\u00a0?Z)<br/>        &amp;\u00a0!a*!A+dot$(!z.!Z)<br/>      | 0<br/>  )<br/>&amp; out$(dot$(1 3 -5.4 -2 -1));</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> dot_product<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*,</span> <span class=\"kw4\">size_t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> dot_product<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>dot_product<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sum <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>DotProduct<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">decimal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">decimal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">Read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">decimal</span> DotProduct<span class=\"br0\">(</span><span class=\"kw4\">decimal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> vec1, <span class=\"kw4\">decimal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> vec2<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>vec1 <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>vec2 <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>vec1<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">!=</span> vec2<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">decimal</span> tVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> vec1<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ttVal <span class=\"sy0\">+=</span> vec1<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">*</span> vec2<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> tVal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 12, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy2\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> b<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">inner_product</span><span class=\"br0\">(</span>a, a <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, b, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 21, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dot<span class=\"sy0\">-</span>product <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> matrix<span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span>:<span class=\"me1\">pre</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">count</span> matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">map</span> <span class=\"sy0\">*</span> matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dot<span class=\"sy0\">-</span>product2 <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">interleave</span> x y<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dot<span class=\"sy0\">-</span>product3<br/>  <span class=\"st0\">\"Dot product of vectors. Tested on version 1.8.0.\"</span><br/>  <span class=\"br0\">[</span>v1 v2<span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span>:<span class=\"me1\">pre</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> v1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">*</span> v1 v2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Example Usage</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>dot<span class=\"sy0\">-</span>product <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>dot<span class=\"sy0\">-</span>product2 <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>dot<span class=\"sy0\">-</span>product3 <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 13, "block": "<pre class=\"coffeescript highlighted_source\">dot_product = <span class=\"br0\">(</span>ary1<span class=\"sy0\">,</span> ary2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">if</span> ary1.<span class=\"me1\">length</span> <span class=\"sy0\">!</span>= ary2.<span class=\"me1\">length</span><br/>    <span class=\"kw1\">throw</span> <span class=\"st0\">\"can't find dot product: arrays have different lengths\"</span><br/>  dotprod = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> v<span class=\"sy0\">,</span> i <span class=\"kw1\">in</span> ary1<br/>    dotprod <span class=\"sy0\">+</span>= v <span class=\"sy0\">*</span> ary2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  dotprod<br/>\u00a0<br/>console.<span class=\"me1\">log</span> dot_product<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># 3</span><br/><span class=\"kw1\">try</span><br/>  console.<span class=\"me1\">log</span> dot_product<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># exception</span><br/><span class=\"kw1\">catch</span> e<br/>  console.<span class=\"me1\">log</span> e</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dot-product <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'* <span class=\"br0\">(</span>coerce a '<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>coerce b '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 28, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> DotProduct;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Calculate<span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> sum<br/><span class=\"kw1\">END</span> Calculate;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Test<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tv1<span class=\"sy0\">,</span>v2<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">3</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tv1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;v1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;v1<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span>;<br/>\tv2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span>;v2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span>;v2<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<br/>\u00a0<br/>\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Calculate<span class=\"br0\">(</span>v1<span class=\"sy0\">,</span>v2<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Test;<br/>\u00a0<br/><span class=\"kw1\">END</span> DotProduct.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">3.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">5.0</span><span class=\"br0\">]</span>.<span class=\"me1\">dotProduct</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 16, "block": "<pre class=\"text highlighted_source\">num dot(List&lt;num&gt; A, List&lt;num&gt; B){<br/>  if (A.length\u00a0!= B.length){<br/>    throw new Exception('Vectors must be of equal size');<br/>  }<br/>  num result = 0;<br/>  for (int i = 0; i &lt; A.length; i++){<br/>    result += A[i] * B[i];<br/>  }<br/>  return result;<br/>}<br/>\u00a0<br/>void main(){<br/>  var l = [1,3,-5];<br/>  var k = [4,-2,-1];<br/>  print(dot(l,k));<br/>}</pre>"}, {"lang": "Delphi", "loc": 27, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Project1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  doublearray <span class=\"sy3\">=</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DotProduct<span class=\"br0\">(</span><span class=\"kw1\">const</span> A<span class=\"sy1\">,</span> B <span class=\"sy1\">:</span> doublearray<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>I<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">assert</span> <span class=\"br0\">(</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">'Input arrays must be the same length'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">+</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy3\">*</span> B<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  x<span class=\"sy1\">,</span>y<span class=\"sy1\">:</span> doublearray<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>y<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>  y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span> y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=-</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>DotProduct<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  ReadLn<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 9, "block": "<pre class=\"text highlighted_source\">dot a b:<br/>\tif /= len a len b:<br/>\t\tRaise value-error \"dot product needs two vectors with the same length\"<br/>\u00a0<br/>\t0<br/>\twhile a:<br/>\t\t+ * pop-from a pop-from b<br/>\u00a0<br/>!. dot [ 1 3 -5 ] [ 4 -2 -1 ]</pre>"}, {"lang": "DWScript", "loc": 12, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> DotProduct<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> Float<span class=\"br0\">)</span> <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/>require<br/>   a<span class=\"sy1\">.</span><span class=\"me1\">Length</span> <span class=\"sy3\">=</span> b<span class=\"sy1\">.</span><span class=\"me1\">Length</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> a<span class=\"sy1\">.</span><span class=\"me1\">High</span> <span class=\"kw1\">do</span><br/>      Result <span class=\"sy3\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>DotProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define a #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> -<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define b #<span class=\"br0\">(</span><span class=\"nu0\">4</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; function definition</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span> \u2297 a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>for/sum <span class=\"br0\">(</span><span class=\"br0\">(</span>x a<span class=\"br0\">)</span><span class=\"br0\">(</span>y b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>\u2297 a b<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">;; library</span><br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>dot-product a b<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">3</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 34, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tprint<span class=\"br0\">(</span>dot_product<span class=\"br0\">(</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">&gt;&gt;</span>, <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tdot_product <span class=\"br0\">(</span>a, b<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Dot product of vectors `a' and `b'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\ta.<span class=\"me1\">lower</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">lower</span><br/>\t\t\ta.<span class=\"me1\">upper</span> <span class=\"sy0\">=</span> b.<span class=\"me1\">upper</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> a.<span class=\"me1\">lower</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> a.<span class=\"me1\">upper</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 6, "block": "<pre class=\"text highlighted_source\">open list<br/>\u00a0<br/>dotp a b | length a == length b = sum (zipWith (*) a b)<br/>         | else = fail \"Vector sizes must match.\"<br/>\u00a0<br/>dotp [1,3,-5] [4,-2,-1]</pre>"}, {"lang": "Elena", "loc": 13, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>\u00a0<br/>extension $op<br/>{<br/>    method dotProduct array:array<br/>        = self zip(array) by(:x:y)(x * y); summarize.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine((1, 3, -5) dotProduct:(4, -2, -1)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule Vector do<br/>  def dot_product(a,b) when length(a)==length(b), do: dot_product(a,b,0)<br/>  def dot_product(_,_) do<br/>    raise ArgumentError, message: \"Vectors must have the same length.\"<br/>  end<br/>\u00a0<br/>  defp dot_product([],[],product), do: product<br/>  defp dot_product([h1|t1], [h2|t2], product), do: dot_product(t1, t2, product+h1*h2)<br/>end<br/>\u00a0<br/>IO.puts Vector.dot_product([1,3,-5],[4,-2,-1])</pre>"}, {"lang": "Emacs Lisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun dot-product (v1 v2)<br/>  (setq res 0)<br/>  (dotimes (i (length v1))<br/>    (setq res (+ (* (elt v1 i) (elt v2 i) ) res) ))<br/>  res)<br/>\u00a0<br/>(progn<br/>  (insert (format \"%d\\n\" (dot-product [1 2 3] [1 2 3]) ))<br/>  (insert (format \"%d\\n\" (dot-product '(1 2 3) '(1 2 3) ))))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">error</span><span class=\"br0\">(</span><span class=\"st_h\">'Vectors must have the same length.'</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H1</span>|T1<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">H2</span>|T2<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"re5\">T1</span><span class=\"sy1\">,</span><span class=\"re5\">T2</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"sy3\">+</span><span class=\"re5\">H1</span><span class=\"sy3\">*</span><span class=\"re5\">H2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">P</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dotProduct</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 11, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> dotprod<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> sum<br/>    a <span class=\"sy1\">*=</span> b<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> a<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> dotprod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy2\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> dot_product <span class=\"br0\">(</span>a:array<span class=\"sy0\">&lt;</span><span class=\"st0\">'a&gt;) (b:array&lt;'</span>a<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> a <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> b <span class=\"kw1\">then</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"invalid argument: vectors must have the same lengths\"</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">fold2</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc i j <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> a b</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USING: kernel math.vectors sequences\u00a0;<br/>\u00a0<br/>: dot-product ( u v -- w )<br/>    2dup [ length ] <a class=\"__cf_email__\" data-cfemail=\"f19398b1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =<br/>    [ v. ] [ \"Vector lengths must be equal\" throw ] if\u00a0;</pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">[[\\1-$0=~][$d;2*1+\\-\u00f8\\$d;2+\\-\u00f8@*@+]#]p:<br/>3d: {Vectors' length}<br/>1 3 5_ 4 2_ 1_ d;$1+\u00f8@*p;!%. {Output: 3}</pre>"}, {"lang": "Fantom", "loc": 20, "block": "<pre class=\"text highlighted_source\">class DotProduct<br/>{<br/>  static Int dotProduct (Int[] a, Int[] b)<br/>  {<br/>    Int result\u00a0:= 0<br/>    [a.size,b.size].min.times |i|<br/>    {<br/>      result += a[i] * b[i]<br/>    }<br/>    return result<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    Int[] x\u00a0:= [1,2,3,4]<br/>    Int[] y\u00a0:= [2,3,4]<br/>\u00a0<br/>    echo (\"Dot product of $x and $y is ${dotProduct(x, y)}\")<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 17, "block": "<pre class=\"text highlighted_source\">: vector create cells allot\u00a0;<br/>: th cells +\u00a0;<br/>\u00a0<br/>3 constant /vector<br/>/vector vector a<br/>/vector vector b<br/>\u00a0<br/>: dotproduct                           ( a1 a2 -- n)<br/>  0 tuck\u00a0?do -rot over i th @ over i th @ * &gt;r rot r&gt; + loop nip nip<br/>;<br/>\u00a0<br/>: vector! cells over + swap\u00a0?do i\u00a0! 1 cells +loop\u00a0;<br/>\u00a0<br/>-5  3 1 a /vector vector!<br/>-1 -2 4 b /vector vector!<br/>\u00a0<br/>a b /vector dotproduct . 3 ok</pre>"}, {"lang": "Fortran", "loc": 5, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test_dot_product<br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(i0)'</span><span class=\"br0\">)</span> <span class=\"kw4\">dot_product</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_dot_product</pre>"}, {"lang": "FunL", "loc": 7, "block": "<pre class=\"text highlighted_source\">import lists.zipWith<br/>\u00a0<br/>def dot( a, b )<br/>  | a.length() == b.length() = sum( zipWith((*), a, b) )<br/>  | otherwise = error( \"Vector sizes must match\" )<br/>\u00a0<br/>println( dot([1, 3, -5], [4, -2, -1]) )</pre>"}, {"lang": "GAP", "loc": 4, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>\u00a0<br/>[1, 3, -5]*[4, -2, -1];<br/># 3</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"errors\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    v1 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">}</span><br/>    v2 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dot<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">int</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>y<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"incompatible lengths\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> xi <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> x <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">+=</span> xi <span class=\"sy3\">*</span> y<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    d<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> dot<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">})</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>d<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dotProduct <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x, y <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> x <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&amp;&amp;</span> x.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> y.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>x, y<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a><span class=\"br0\">{</span> xx, yy <span class=\"sy0\">-&gt;</span> xx <span class=\"sy0\">*</span> yy <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\">dotp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a <br/>dotp a b <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> b <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> a b<span class=\"br0\">)</span><br/>         <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Vector sizes must match\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> dotp <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">-- prints 3</span></pre>"}, {"lang": "Hy", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dotp <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>len a<span class=\"br0\">)</span> <span class=\"br0\">(</span>len b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>sum <span class=\"br0\">(</span>genexpr <span class=\"br0\">(</span><span class=\"sy0\">*</span> aterm bterm<span class=\"br0\">)</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">(</span>, aterm bterm<span class=\"br0\">)</span> <span class=\"br0\">(</span>zip a b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span>dotp <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"a dot b\u00a0:= \"</span><span class=\"sy1\">,</span>dotproduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> dotproduct<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>   <span class=\"co1\">#: return dot product of vectors a &amp; b or error</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>a <span class=\"sy1\">~=</span> <span class=\"sy1\">*</span>b <span class=\"sy1\">&amp;</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"list\"</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span> <span class=\"co1\"># invalid value</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>dp <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">+:=</span> a<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>a<span class=\"br0\">]</span> <span class=\"sy1\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"kw1\">return</span> dp<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 6, "block": "<pre class=\"idl highlighted_source\">\u00a0<br/>a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>c <span class=\"sy0\">=</span> a<span class=\"co2\">#TRANSPOSE(b)</span><br/>c <span class=\"sy0\">=</span> TOTAL<span class=\"br0\">(</span>a<span class=\"sy0\">*</span>b,<span class=\"sy0\">/</span>PRESERVE_TYPE<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Idris", "loc": 10, "block": "<pre class=\"text highlighted_source\">module Main<br/>\u00a0<br/>import Data.Vect<br/>\u00a0<br/>dotProduct\u00a0: (Num a) =&gt; Vect n a -&gt; Vect n a -&gt; a<br/>dotProduct = (sum .) . zipWith (*)<br/>\u00a0<br/>main\u00a0: IO ()<br/>main = printLn $ dotProduct [1,2,3] [1,2,3]<br/>\u00a0</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">_5</span>  +/ . * <span class=\"nu0\">4</span> <span class=\"nu0\">_2</span> <span class=\"nu0\">_1</span><br/><span class=\"nu0\">3</span><br/>   dotp=: +/ . *                  <span class=\"co1\">NB. Or defined as a verb (function)</span><br/>   <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">_5</span>  dotp <span class=\"nu0\">4</span> <span class=\"nu0\">_2</span> <span class=\"nu0\">_1</span><br/><span class=\"nu0\">3</span></pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> DotProduct <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>dotProd<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> dotProd<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> b.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The dimensions have to be equal!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tsum <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> dot_product<span class=\"br0\">(</span>ary1<span class=\"sy0\">,</span> ary2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary1.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> ary2.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"st0\">\"can't find dot product: arrays have different lengths\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> dotprod <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ary1.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        dotprod <span class=\"sy0\">+=</span> ary1<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> ary2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> dotprod<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>print<span class=\"br0\">(</span>dot_product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// ==&gt; 3</span><br/>print<span class=\"br0\">(</span>dot_product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// ==&gt; exception</span></pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def dot(x; y):<br/>  reduce range(0;x|length) as $i (0; . + x[$i] * y[$i]);<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">x = [1, 3, -5]<br/>y = [4, -2, -1]<br/>z = dot(x, y)<br/>z = x'*y</pre>"}, {"lang": "K", "loc": 5, "block": "<pre class=\"text highlighted_source\">   +/1 3 -5 * 4 -2 -1<br/>3<br/>\u00a0<br/>   1 3 -5 _dot 4 -2 -1<br/>3</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\">fun dot<span class=\"br0\">(</span>v1<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span>, v2<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    v1.<span class=\"me1\">zip</span><span class=\"br0\">(</span>v2<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">*</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span>.<span class=\"me1\">reduce</span> <span class=\"br0\">{</span> a, b -<span class=\"sy0\">&gt;</span> a + b <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    dot<span class=\"br0\">(</span>arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">3.0</span>, -<span class=\"nu0\">5.0</span><span class=\"br0\">)</span>, arrayOf<span class=\"br0\">(</span><span class=\"nu0\">4.0</span>, -<span class=\"nu0\">2.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dot-product <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> foldl #'+/<span class=\"nu0\">2</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> zipwith #'*/<span class=\"nu0\">2</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 24, "block": "<pre class=\"lb highlighted_source\">vectorA$ <span class=\"sy0\">=</span> <span class=\"st0\">\"1, 3, -5\"</span><br/>vectorB$ <span class=\"sy0\">=</span> <span class=\"st0\">\"4, -2, -1\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"DotProduct of \"</span>;vectorA$;<span class=\"st0\">\" and \"</span>; vectorB$;<span class=\"st0\">\" is \"</span>;<br/><span class=\"kw1\">print</span> DotProduct<span class=\"br0\">(</span>vectorA$<span class=\"sy0\">,</span> vectorB$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'arbitrary length</span><br/>vectorA$ <span class=\"sy0\">=</span> <span class=\"st0\">\"3, 14, 15, 9, 26\"</span><br/>vectorB$ <span class=\"sy0\">=</span> <span class=\"st0\">\"2, 71, 18, 28, 1\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"DotProduct of \"</span>;vectorA$;<span class=\"st0\">\" and \"</span>; vectorB$;<span class=\"st0\">\" is \"</span>;<br/><span class=\"kw1\">print</span> DotProduct<span class=\"br0\">(</span>vectorA$<span class=\"sy0\">,</span> vectorB$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DotProduct<span class=\"br0\">(</span>a$<span class=\"sy0\">,</span> b$<span class=\"br0\">)</span><br/>    DotProduct <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span><br/>        x$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        y$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> x$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">or</span> y$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>        DotProduct <span class=\"sy0\">=</span> DotProduct <span class=\"sy0\">+</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>x$<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw2\">val</span><span class=\"br0\">(</span>y$<span class=\"br0\">)</span><br/>        i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> </pre>"}, {"lang": "Logo", "loc": 5, "block": "<pre class=\"text highlighted_source\">to dotprod\u00a0:a\u00a0:b<br/>  output apply \"sum (map \"product\u00a0:a\u00a0:b)<br/>end<br/>\u00a0<br/>show dotprod [1 3 -5] [4 -2 -1]   \u00a0; 3</pre>"}, {"lang": "Logtalk", "loc": 7, "block": "<pre class=\"logtalk highlighted_source\">dot_product(<span class=\"re0\">A</span>, <span class=\"re0\">B</span>, <span class=\"re0\">Sum</span>) <span class=\"sy2\">:-</span><br/>    dot_product(<span class=\"re0\">A</span>, <span class=\"re0\">B</span>, <span class=\"nu0\">0</span>, <span class=\"re0\">Sum</span>).<br/>\u00a0<br/>dot_product([], [], <span class=\"re0\">Sum</span>, <span class=\"re0\">Sum</span>).<br/>dot_product([<span class=\"re0\">A</span>| <span class=\"re0\">As</span>], [<span class=\"re0\">B</span>| <span class=\"re0\">Bs</span>], <span class=\"re0\">Acc</span>, <span class=\"re0\">Sum</span>) <span class=\"sy2\">:-</span><br/>    <span class=\"re0\">Acc2</span> <span class=\"kw5\">is</span> <span class=\"re0\">Acc</span> <span class=\"sy1\">+</span> <span class=\"re0\">A</span><span class=\"sy1\">*</span><span class=\"re0\">B</span>,<br/>    dot_product(<span class=\"re0\">As</span>, <span class=\"re0\">Bs</span>, <span class=\"re0\">Acc2</span>, <span class=\"re0\">Sum</span>).</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> dotprod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>a <span class=\"kw1\">do</span><br/>    ret <span class=\"sy0\">=</span> ret <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>dotprod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">&lt;1,2,3&gt; . &lt;4,5,6&gt;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">{1,3,-5}.{4,-2,-1}</pre>"}, {"lang": "MATLAB", "loc": 3, "block": "<pre class=\"matlab highlighted_source\">A = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> -<span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>B = <span class=\"br0\">[</span><span class=\"nu0\">4</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>C = dot<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">[1, 3, -5] . [4, -2, -1];<br/>/* 3 */</pre>"}, {"lang": "Mercury", "loc": 17, "block": "<pre class=\"text highlighted_source\">:- module dot_product.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.write_int([1, 3, -5] `dot_product` [4, -2, -1],\u00a0!IO),<br/>    io.nl(!IO).<br/>\u00a0<br/>:- func dot_product(list(int), list(int)) = int.<br/>\u00a0<br/>dot_product(As, Bs) =<br/>    list.foldl_corresponding((func(A, B, Acc) = Acc + A * B), As, Bs, 0).</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u0421/\u041f\t*\t\u0418\u041f0\t+\t\u041f0\t\u0421/\u041f\t\u0411\u041f\t00</pre>"}, {"lang": "Modula-2", "loc": 25, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> DotProduct;<br/><span class=\"kw1\">FROM</span> RealStr <span class=\"kw1\">IMPORT</span> RealToStr;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> Vector <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">RECORD</span><br/>        x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DotProduct<span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v <span class=\"sy0\">:</span> Vector<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> u.x<span class=\"sy0\">*</span>v.x <span class=\"sy0\">+</span> u.y<span class=\"sy0\">*</span>v.y <span class=\"sy0\">+</span> u.z<span class=\"sy0\">*</span>v.z<br/><span class=\"kw1\">END</span> DotProduct;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    dp <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    dp <span class=\"sy0\">:=</span> DotProduct<span class=\"br0\">(</span>Vector<span class=\"br0\">{</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span><span class=\"nu0\">3.0</span><span class=\"sy0\">,-</span><span class=\"nu0\">5.0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>Vector<span class=\"br0\">{</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,-</span><span class=\"nu0\">2.0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1.0</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>dp<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> DotProduct.</pre>"}, {"lang": "MUMPS", "loc": 9, "block": "<pre class=\"text highlighted_source\">DOTPROD(A,B)<br/>\u00a0;Returns the dot product of two vectors. Vectors are assumed to be stored as caret-delimited strings of numbers.<br/>\u00a0;If the vectors are not of equal length, a null string is returned.<br/> QUIT:$LENGTH(A,\"^\")'=$LENGTH(B,\"^\") \"\"<br/> NEW I,SUM<br/> SET SUM=0<br/> FOR I=1:1:$LENGTH(A,\"^\") SET SUM=SUM+($PIECE(A,\"^\",I)*$PIECE(B,\"^\",I))<br/> KILL I<br/> QUIT SUM</pre>"}, {"lang": "Nemerle", "loc": 17, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.Collections.NCollectionsExtensions;<br/>\u00a0<br/>module DotProduct<br/>{<br/>    DotProduct(x\u00a0: array[int], y\u00a0: array[int])\u00a0: int<br/>    {<br/>        $[(a * b)|(a, b) in ZipLazy(x, y)].FoldLeft(0, _+_);    <br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def arr1 = array[1, 3, -5]; def arr2 = array[4, -2, -1];<br/>        WriteLine(DotProduct(arr1, arr2));<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 21, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>whatsTheVectorVictor = <span class=\"br0\">[</span><span class=\"br0\">[</span>double <span class=\"nu0\">1.0</span>, <span class=\"nu0\">3.0</span>, -<span class=\"nu0\">5.0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span>double <span class=\"nu0\">4.0</span>, -<span class=\"nu0\">2.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>dotProduct = Rexx dotProduct<span class=\"br0\">(</span>whatsTheVectorVictor<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> dotProduct.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method dotProduct<span class=\"br0\">(</span>vec1 = double<span class=\"br0\">[</span><span class=\"br0\">]</span>, vec2 = double<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span> <span class=\"kw2\">returns</span> double <span class=\"kw2\">signals</span> IllegalArgumentException<br/>  <span class=\"kw1\">if</span> vec1.<span class=\"me0\">length</span> <span class=\"sy0\">\\</span>= vec2.<span class=\"me0\">length</span> <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">'Vectors must be the same length'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  scalarProduct = double <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">loop</span> e_ = <span class=\"nu0\">0</span> to vec1.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    scalarProduct = vec1<span class=\"br0\">[</span>e_<span class=\"br0\">]</span> <span class=\"sy0\">*</span> vec2<span class=\"br0\">[</span>e_<span class=\"br0\">]</span> + scalarProduct<br/>    <span class=\"kw3\">end</span> e_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> scalarProduct<br/>\u00a0<br/>method dotProduct<span class=\"br0\">(</span>vecs = double<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span> <span class=\"kw2\">returns</span> double <span class=\"kw2\">signals</span> IllegalArgumentException<br/>  <span class=\"kw1\">return</span> dotProduct<span class=\"br0\">(</span>vecs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, vecs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "newLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>dot<span class=\"sy1\">-</span>product x y<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <span class=\"sy1\">*</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>dot<span class=\"sy1\">-</span>product <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy1\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\"># Compile time error when a and b are differently sized arrays<br/># Runtime error when a and b are differently sized seqs<br/>proc dotp[T](a,b: T): int =<br/>  assert a.len == b.len<br/>  for i in a.low..a.high:<br/>    result += a[i] * b[i]<br/>\u00a0<br/>echo dotp([1,3,-5], [4,-2,-1])<br/>echo dotp(@[1,2,3],@[4,5,6])</pre>"}, {"lang": "Oberon-2", "loc": 27, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> DotProduct;<br/><span class=\"kw1\">IMPORT</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">3</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DotProduct<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span> <br/>  resp<span class=\"sy0\">,</span> i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  resp <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>resp<span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> resp<br/><span class=\"kw1\">END</span> DotProduct;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span>;<br/>  x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span>;<br/>  x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span>;y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>; <br/>  Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>DotProduct<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> DotProduct.<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 107, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;stdio.h&gt;</span><br/><span class=\"co1\">#import &lt;stdint.h&gt;</span><br/><span class=\"co1\">#import &lt;stdlib.h&gt;</span><br/><span class=\"co1\">#import &lt;string.h&gt;</span><br/><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">// this class exists to return a result between two</span><br/><span class=\"co2\">// vectors: if vectors have different \"size\", valid</span><br/><span class=\"co2\">// must be NO</span><br/><span class=\"kw1\">@interface</span> VResult <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">@private</span><br/>  <span class=\"kw4\">double</span> value;<br/>  <span class=\"kw4\">BOOL</span> valid;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>new<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v isValid<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>y;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>init<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v isValid<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>y;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>isValid;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>value;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> VResult<br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>new<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v isValid<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>y<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self alloc<span class=\"br0\">]</span> init<span class=\"sy0\">:</span> v isValid<span class=\"sy0\">:</span> y<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>init<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v isValid<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>y<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">==</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    value <span class=\"sy0\">=</span> v;<br/>    valid <span class=\"sy0\">=</span> y;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">BOOL</span><span class=\"br0\">)</span>isValid <span class=\"br0\">{</span> <span class=\"kw1\">return</span> valid; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>value <span class=\"br0\">{</span> <span class=\"kw1\">return</span> value; <span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">@interface</span> RCVector <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">@private</span><br/>  <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>vec;<br/>  uint32_t size;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>newWithArray<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v ofLength<span class=\"sy0\">:</span> <span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>l; <br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithArray<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v ofLength<span class=\"sy0\">:</span> <span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>l;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>VResult <span class=\"sy0\">*</span><span class=\"br0\">)</span>dotProductWith<span class=\"sy0\">:</span> <span class=\"br0\">(</span>RCVector <span class=\"sy0\">*</span><span class=\"br0\">)</span>v;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>size;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>array;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a>;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> RCVector<br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>newWithArray<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v ofLength<span class=\"sy0\">:</span> <span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>l<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self alloc<span class=\"br0\">]</span> initWithArray<span class=\"sy0\">:</span> v ofLength<span class=\"sy0\">:</span> l<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithArray<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v ofLength<span class=\"sy0\">:</span> <span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>l<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    size <span class=\"sy0\">=</span> l;<br/>    vec <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> vec <span class=\"sy0\">==</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>vec, v, <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>l<span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>dealloc<br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>vec<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>uint32_t<span class=\"br0\">)</span>size <span class=\"br0\">{</span> <span class=\"kw1\">return</span> size; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>array <span class=\"br0\">{</span> <span class=\"kw1\">return</span> vec; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>VResult <span class=\"sy0\">*</span><span class=\"br0\">)</span>dotProductWith<span class=\"sy0\">:</span> <span class=\"br0\">(</span>RCVector <span class=\"sy0\">*</span><span class=\"br0\">)</span>v<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span>;<br/>  uint32_t i, s;<br/>  <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>v1;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>self size<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"br0\">[</span>v size<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>VResult new<span class=\"sy0\">:</span> r isValid<span class=\"sy0\">:</span> <span class=\"kw2\">NO</span><span class=\"br0\">]</span>;<br/>  s <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self size<span class=\"br0\">]</span>;<br/>  v1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>v array<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; s; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r <span class=\"sy0\">+=</span> vec<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> v1<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span>VResult new<span class=\"sy0\">:</span> r isValid<span class=\"sy0\">:</span> <span class=\"kw2\">YES</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">double</span> val1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"br0\">}</span>;<br/><span class=\"kw4\">double</span> val2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span>; <br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>    RCVector <span class=\"sy0\">*</span>v1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>RCVector newWithArray<span class=\"sy0\">:</span> val1 ofLength<span class=\"sy0\">:</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span>val1<span class=\"br0\">)</span><span class=\"sy0\">/</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    RCVector <span class=\"sy0\">*</span>v2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>RCVector newWithArray<span class=\"sy0\">:</span> val2 ofLength<span class=\"sy0\">:</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span>val1<span class=\"br0\">)</span><span class=\"sy0\">/</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    VResult <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> <span class=\"br0\">[</span>v1 dotProductWith<span class=\"sy0\">:</span> v2<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span>r isValid<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>r value<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span><span class=\"kw2\">stderr</span>, <span class=\"st0\">\"length of vectors differ<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objeck", "loc": 28, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> DotProduct <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      DotProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> DotProduct<span class=\"br0\">(</span>array_a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> array_b <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>array_a <span class=\"sy0\">=</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>array_b <span class=\"sy0\">=</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>array_a<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> array_b<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      val <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> array_a<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        val <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>array_a<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">*</span> array_b<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> dot <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left2 <span class=\"br0\">(</span><span class=\"kw1\">fun</span> z x y <span class=\"sy0\">-&gt;</span> z <span class=\"sy0\">+.</span> x <span class=\"sy0\">*.</span> y<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">(*<br/># dot [1.0; 3.0; -5.0] [4.0; -2.0; -1.0];;<br/>-\u00a0: float = 3.<br/>*)</span></pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> <span class=\"nu0\">3</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>b <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co2\">% or [4; -2; -1] and avoid transposition with '</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span> a <span class=\"sy1\">*</span> b<span class=\"sy1\">'</span> <span class=\"br0\">)</span>  <span class=\"co2\">% ' means transpose</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: dotProduct  zipWith(#*) sum\u00a0;</pre>"}, {"lang": "Oz", "loc": 7, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">DotProduct</span> Xs Ys<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Length Xs<span class=\"br0\">}</span> = <span class=\"br0\">{</span>Length Ys<span class=\"br0\">}</span> <span class=\"co1\">%% assert</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>foldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>zip Xs Ys Number<span class=\"sy0\">.</span><span class=\"st0\">'*'</span><span class=\"br0\">}</span> Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>DotProduct <span class=\"br0\">[</span>1 3 <span class=\"sy0\">~</span>5<span class=\"br0\">]</span> <span class=\"br0\">[</span>4 <span class=\"sy0\">~</span>2 <span class=\"sy0\">~</span>1<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">dot<span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#u<span class=\"sy0\">,</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> dotprod<br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$vec_a</span><span class=\"sy0\">,</span> <span class=\"re0\">$vec_b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"they must have the same size<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@$vec_a</span> <span class=\"sy0\">==</span> <span class=\"re0\">@$vec_b</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$vec_a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$vec_b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"co5\">$#</span><span class=\"re0\">$vec_a</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@vec_a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@vec_b</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> dotprod<span class=\"br0\">(</span><span class=\"re0\">\\@vec_a</span><span class=\"sy0\">,</span><span class=\"re0\">\\@vec_b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># 3</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> dotprod<br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$vec_a</span><span class=\"sy0\">,</span> <span class=\"re0\">$vec_b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"they must have the same size<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@$vec_a</span> <span class=\"sy0\">==</span> <span class=\"re0\">@$vec_b</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$vec_a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$vec_b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"co5\">$#</span><span class=\"re0\">$vec_a</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@vec_a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@vec_b</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,-</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> dotprod<span class=\"br0\">(</span><span class=\"re0\">\\@vec_a</span><span class=\"sy0\">,</span><span class=\"re0\">\\@vec_b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># 3</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?sum(sq_mul({1,3,-5},{4,-2,-1}))</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> dot_product<span class=\"br0\">(</span><span class=\"re0\">$v1</span><span class=\"sy0\">,</span> <span class=\"re0\">$v2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$v1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$v2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> Exception<span class=\"br0\">(</span><span class=\"st_h\">'Arrays have different lengths'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_map\"><span class=\"kw3\">array_map</span></a><span class=\"br0\">(</span><span class=\"st_h\">'bcmul'</span><span class=\"sy0\">,</span> <span class=\"re0\">$v1</span><span class=\"sy0\">,</span> <span class=\"re0\">$v2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> dot_product<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de dotProduct (A B)<br/>   (sum * A B) )<br/>\u00a0<br/>(dotProduct (1 3 -5) (4 -2 -1))</pre>"}, {"lang": "PL/I", "loc": 10, "block": "<pre class=\"text highlighted_source\">get (n);<br/>begin;<br/>   declare (A(n), B(n)) float;<br/>   declare dot_product float;<br/>\u00a0<br/>   get list (A);<br/>   get list (B);<br/>   dot_product = sum(a*b);<br/>   put (dot_product);<br/>end;</pre>"}, {"lang": "PostScript", "loc": 17, "block": "<pre class=\"text highlighted_source\">/dotproduct{<br/>/x exch def<br/>/y exch def<br/>/sum 0 def<br/>/i 0 def<br/>x length y length eq\u00a0%Check if both arrays have the same length<br/>{<br/>x length{<br/>/sum x i get y i get mul sum add def<br/>/i i 1 add def<br/>}repeat<br/>sum ==<br/>}<br/>{<br/>-1 ==<br/>}ifelse<br/>}def</pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> dotproduct<span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$res</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span> <span class=\"re0\">$res</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"kw5\">-End</span><span class=\"br0\">{</span><span class=\"re0\">$res</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <br/>dotproduct <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>dotproduct <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">11</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">dot_product<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> L2<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>mult<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> L2<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsumlist<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>mult<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A<span class=\"sy3\">*</span>B<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 24, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> dotProduct<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,Array b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, sum, length <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length<br/>      sum <span class=\"sy0\">+</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>\u00a0: a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><br/>  b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>\u00a0: b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span>\u00a0: b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>dotProduct<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>,b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> dotp<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Vector sizes must match'</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>aterm * bterm <span class=\"kw1\">for</span> aterm<span class=\"sy0\">,</span>bterm <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> -<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">assert</span> dotp<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "R", "loc": 16, "block": "<pre class=\"text highlighted_source\">x &lt;- c(1, 3, -5)<br/>y &lt;- c(4, -2, -1)<br/>\u00a0<br/>sum(x*y)  # compute products, then do the sum<br/>x\u00a0%*% y   # inner product<br/>\u00a0<br/># loop implementation<br/>dotp &lt;- function(x, y) {<br/>\tn &lt;- length(x)<br/>\tif(length(y)\u00a0!= n) stop(\"invalid argument\")<br/>\ts &lt;- 0<br/>\tfor(i in 1:n) s &lt;- s + x[i]*y[i]<br/>\ts<br/>}<br/>\u00a0<br/>dotp(x, y)</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (dot-product l r) (for/sum ([x l] [y r]) (* x y)))<br/>\u00a0<br/>(dot-product '(1 3 -5) '(4 -2 -1))<br/>\u00a0<br/>;; dot-product works on sequences such as vectors:<br/>(dot-product #(1 2 3) #(4 5 6))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 16, "block": "<pre class=\"text highlighted_source\">import List;<br/>\u00a0<br/>public int dotProduct(list[int] L, list[int] M){<br/>\tresult = 0;<br/>\tif(size(L) == size(M)) {<br/>\t\twhile(size(L) &gt;= 1) {<br/>\t\t    result += (head(L) * head(M));<br/>\t\t    L = tail(L);<br/>\t\t    M = tail(M);<br/>\t        }<br/>\t        return result; <br/>\t}<br/>\telse {<br/>\t\tthrow \"vector sizes must match\";<br/>\t}<br/>}</pre>"}, {"lang": "REBOL", "loc": 16, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol []</span><br/>\u00a0<br/>a: <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> -<span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>b: <span class=\"br0\">[</span><span class=\"nu0\">4</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>dot-product: <span class=\"kw2\">function</span> <span class=\"br0\">[</span>v1 v2<span class=\"br0\">]</span> <span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">length?</span> v1<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"br0\">(</span><span class=\"kw3\">length?</span> v2<span class=\"br0\">)</span> <span class=\"br0\">[</span><br/>        <span class=\"kw3\">make</span> error<span class=\"sy0\">!</span> <span class=\"st0\">\"error: vector sizes must match\"</span><br/>    <span class=\"br0\">]</span><br/>    sum: <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">repeat</span> i <span class=\"kw3\">length?</span> v1 <span class=\"br0\">[</span><br/>        sum: sum + <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">pick</span> v1 i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">pick</span> v2 i<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>dot-product a b</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  computes  the   dot product   of  two equal size vectors  (of any size).*/</span><br/>                     vectorA =  <span class=\"st0\">'  1   3  -5  '</span>  <span class=\"coMULTI\">/*populate vector  A  with some numbers*/</span><br/>                     vectorB =  <span class=\"st0\">'  4  -2  -1  '</span>  <span class=\"coMULTI\">/*    \"       \"    B    \"    \"     \"   */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'vector A = '</span>   vectorA                     <span class=\"coMULTI\">/*display the elements in the vector A.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'vector B = '</span>   vectorB                     <span class=\"coMULTI\">/*   \"     \"     \"      \"  \"    \"    B.*/</span><br/>p=<span class=\"sy0\">.</span>Prod<span class=\"br0\">(</span>vectorA, vectorB<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*invoke function &amp; compute dot product*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*display a blank line for readability.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'dot product = '</span>   p                        <span class=\"coMULTI\">/*display the dot product to terminal. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>Prod:  <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> A,B                <span class=\"coMULTI\">/*this function compute the dot product*/</span><br/>        $=<span class=\"nu0\">0</span>                                      <span class=\"coMULTI\">/*initialize the sum to  0 (zero).     */</span><br/>                    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*multiply each number in the vectors. */</span><br/>                    $=$+<span class=\"kw6\">word</span><span class=\"br0\">(</span>A,j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>B,j<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 and add the product to the sum.*/</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">return</span> $                                 <span class=\"coMULTI\">/*return the sum to function's invoker.*/</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aVector = [2, 3, 5]<br/>bVector = [4, 2, 1]<br/>sum = 0<br/>see dotProduct(aVector, bVector)<br/>\u00a0<br/>func dotProduct cVector, dVector<br/>     for n = 1 to len(aVector)<br/>         sum = sum + cVector[n] * dVector[n]<br/>     next<br/>     return sum<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 3, "block": "<pre class=\"text highlighted_source\">x = rand(1,10);<br/>y = rand(1,10);<br/>s = sum( x .* y );</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:002:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"kw4\">Vector</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">inner_product</span> <span class=\"kw4\">Vector</span><span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "Run BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">v1$ = \"1, 3, -5\"<br/>v2$ = \"4, -2, -1\"<br/>\u00a0<br/>print \"DotProduct of \";v1$;\" and \"; v2$;\" is \";dotProduct(v1$,v2$)<br/>end<br/>\u00a0<br/>function dotProduct(a$, b$)<br/>    while word$(a$,i + 1,\",\") &lt;&gt; \"\"<br/>       i = i + 1<br/>       v1$=word$(a$,i,\",\")<br/>       v2$=word$(b$,i,\",\")<br/>       dotProduct = dotProduct + val(v1$) * val(v2$)<br/>    wend<br/>end function</pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">// alternatively, fn dot_product(a: &amp;Vec&lt;u32&gt;, b: &amp;Vec&lt;u32&gt;)<br/>// but using slices is more general and rustic<br/>fn dot_product(a: &amp;[i32], b: &amp;[i32]) -&gt; Option&lt;i32&gt; {<br/>    if a.len()\u00a0!= b.len() { return None }<br/>    Some(<br/>        a.iter()<br/>            .zip( b.iter() )<br/>            .fold(0, |sum, (el_a, el_b)| sum + el_a*el_b)<br/>    )<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    let v1 = vec![1, 3, -5];<br/>    let v2 = vec![4, -2, -1];<br/>\u00a0<br/>    println!(\"{}\", dot_product(&amp;v1, &amp;v2).unwrap());<br/>}</pre>"}, {"lang": "S-lang", "loc": 1, "block": "<pre class=\"text highlighted_source\">print(sum([1, 3, -5] * [4, -2, -1]));</pre>"}, {"lang": "Sather", "loc": 7, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    x\u00a0::= #VEC(|1.0, 3.0, -5.0|);<br/>    y\u00a0::= #VEC(|4.0, -2.0, -1.0|);<br/>    #OUT + x.dot(y) + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Dot<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>v1<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> n<span class=\"sy0\">:</span> Numeric<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> n.<span class=\"sy0\">_</span> <span class=\"co1\">// import * operator</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> dot<span class=\"br0\">(</span>v2<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>v1.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> v2.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>v1 zip v2<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> Function.<span class=\"me1\">tupled</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">*</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">sum</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toDot<span class=\"br0\">[</span>T<span class=\"sy0\">:</span> Numeric<span class=\"br0\">]</span><span class=\"br0\">(</span>v1<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dot<span class=\"br0\">(</span>v1<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v1 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, -<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v2 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">4</span>, -<span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>v1 dot v2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>$ syntax expr: .().dot.() is  -&gt; 6;  # priority of dot operator<br/>\u00a0<br/>const func integer: (in array integer: a) dot (in array integer: b) is func<br/>  result<br/>    var integer: sum is 0;<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    if length(a) &lt;&gt; length(b) then<br/>      raise RANGE_ERROR;<br/>    else<br/>      for index range 1 to length(a) do<br/>        sum +:= a[index] * b[index];<br/>      end for;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln([](1, 3, -5) dot [](4, -2, -1));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">func dot_product<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>a\u00a0\u00bb<span class=\"sy0\">*</span>\u00ab\u00a0b<span class=\"br0\">)</span>\u00ab<span class=\"sy0\">+</span>\u00bb;<br/><span class=\"br0\">}</span>;<br/>say dot_product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>,<span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"sy0\">-</span><span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;   <span class=\"co1\"># =&gt; 3</span></pre>"}, {"lang": "Scheme", "loc": 5, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>dot<span class=\"sy0\">-</span>product a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>dot<span class=\"sy0\">-</span>product '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 3, "block": "<pre class=\"scilab highlighted_source\">A <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>B <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>C <span class=\"sy0\">=</span> <a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">sum</span></a><span class=\"br0\">(</span>A.<span class=\"sy0\">*</span>B<span class=\"br0\">)</span></pre>"}, {"lang": "Slate", "loc": 6, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"7b0d3b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Vector traits) &lt;dot&gt; <a class=\"__cf_email__\" data-cfemail=\"2f586f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Vector traits)<br/>\"Dot-product.\"<br/>[<br/>  (0 below: (v size min: w size)) inject: 0 into:<br/>    [|\u00a0:sum\u00a0:index | sum + ((v at: index) * (w at: index))]<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 12, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Array</span> extend<br/><span class=\"br0\">[</span><br/>  * <span class=\"re5\">anotherArray</span> <span class=\"br0\">[</span><br/>       |<span class=\"re3\">acc</span>| <span class=\"re6\">acc</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>       <span class=\"kw1\">self</span> with: <span class=\"re5\">anotherArray</span> collect: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> |<br/>          <span class=\"re6\">acc</span> <span class=\"sy0\">:=</span> <span class=\"re5\">acc</span> + <span class=\"br0\">(</span> <span class=\"re5\">a</span> * <span class=\"re5\">b</span> <span class=\"br0\">)</span><br/>       <span class=\"br0\">]</span>.<br/>       ^acc<br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">(</span> <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> <span class=\"nu0\">3</span> -<span class=\"re5\">5</span><span class=\"br0\">)</span></span> * <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">4</span> -<span class=\"re5\">2</span> -<span class=\"re5\">1</span> <span class=\"br0\">)</span></span> <span class=\"br0\">)</span> printNl.</pre>"}, {"lang": "SNOBOL4", "loc": 11, "block": "<pre class=\"text highlighted_source\">        define(\"dotp(a,b)sum,i\")       \u00a0:(dotp_end)<br/>dotp    i = 1; sum = 0      <br/>loop    sum = sum + (a&lt;i&gt; * b&lt;i&gt;)<br/>        i = i + 1\u00a0?a&lt;i&gt;\u00a0:s(loop)<br/>        dotp = sum     \u00a0:(return)<br/>dotp_end<br/>\u00a0<br/>        a = array(3); a&lt;1&gt; = 1; a&lt;2&gt; = 3; a&lt;3&gt; = -5; <br/>        b = array(3); b&lt;1&gt; = 4; b&lt;2&gt; = -2; b&lt;3&gt; = -1;<br/>        output = dotp(a,b)<br/>end</pre>"}, {"lang": "SPARK", "loc": 41, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Spark_IO;<br/><span class=\"co1\">--# inherit Spark_IO;</span><br/><span class=\"co1\">--# main_program;</span><br/><span class=\"kw3\">procedure</span> Dot_Product_Main<br/><span class=\"co1\">--# global in out Spark_IO.Outputs;</span><br/><span class=\"co1\">--# derives Spark_IO.Outputs from *;</span><br/><span class=\"kw1\">is</span><br/>   Limit\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">1000</span>;<br/>   <span class=\"kw3\">type</span> V_Elem <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> -Limit .. <span class=\"me1\">Limit</span>;<br/>   V_Size\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">100</span>;<br/>   <span class=\"kw3\">type</span> V_Index <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">V_Size</span>;<br/>   <span class=\"kw3\">type</span> Vector <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>V_Index <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> V_Elem;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> V_Prod <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> -<span class=\"br0\">(</span>Limit**<span class=\"nu0\">2</span><span class=\"br0\">)</span>*V_Size .. <span class=\"br0\">(</span>Limit**<span class=\"nu0\">2</span><span class=\"br0\">)</span>*V_Size;<br/>   <span class=\"co1\">--# assert V_Prod'Base is Integer;</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Index3 <span class=\"kw1\">is</span> V_Index <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>;<br/>   <span class=\"kw3\">subtype</span> Vector3 <span class=\"kw1\">is</span> Vector<span class=\"br0\">(</span>Index3<span class=\"br0\">)</span>;<br/>   Vect1\u00a0: <span class=\"kw3\">constant</span> Vector3\u00a0:= Vector3'<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, -<span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>   Vect2\u00a0: <span class=\"kw3\">constant</span> Vector3\u00a0:= Vector3'<span class=\"br0\">(</span><span class=\"nu0\">4</span>, -<span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Dot_Product<span class=\"br0\">(</span>V1, V2\u00a0: Vector<span class=\"br0\">)</span> <span class=\"kw1\">return</span> V_Prod<br/>   <span class=\"co1\">--# pre  V1'First = V2'First</span><br/>   <span class=\"co1\">--#  and V1'Last  = V2'Last;</span><br/>   <span class=\"kw1\">is</span><br/>      Sum\u00a0: V_Prod\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> V_Index <span class=\"kw3\">range</span> V1'<span class=\"kw3\">Range</span><br/>      <span class=\"co1\">--# assert Sum in -(Limit**2)*V_Prod(I-1) .. (Limit**2)*V_Prod(I-1);</span><br/>      <span class=\"kw1\">loop</span><br/>         Sum\u00a0:= Sum + V_Prod<span class=\"br0\">(</span>V1<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> * V_Prod<span class=\"br0\">(</span>V2<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Sum;<br/>   <span class=\"kw1\">end</span> Dot_Product;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Spark_IO.<span class=\"me1\">Put_Integer</span><span class=\"br0\">(</span>File  =&gt; Spark_IO.<span class=\"me1\">Standard_Output</span>,<br/>                        Item  =&gt; Integer<span class=\"br0\">(</span>Dot_Product<span class=\"br0\">(</span>Vect1, Vect2<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                        Width =&gt; <span class=\"nu0\">6</span>,<br/>                        Base  =&gt; <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Dot_Product_Main;</pre>"}, {"lang": "SQL", "loc": 3, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SELECT</span> i<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>A<span class=\"sy0\">.</span>N<span class=\"sy0\">*</span>B<span class=\"sy0\">.</span>N<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> N<br/>        <span class=\"kw1\">FROM</span> A <span class=\"kw1\">INNER</span> <span class=\"kw1\">JOIN</span> B <span class=\"kw1\">ON</span> A<span class=\"sy0\">.</span>j<span class=\"sy0\">=</span>B<span class=\"sy0\">.</span>j<br/>        <span class=\"kw1\">GROUP</span> <span class=\"kw1\">BY</span> i<span class=\"sy0\">,</span> k</pre>"}, {"lang": "Standard ML", "loc": 6, "block": "<pre class=\"text highlighted_source\">val dot = ListPair.foldlEq Real.*+ 0.0<br/>\u00a0<br/>(*<br/>- dot ([1.0, 3.0, ~5.0], [4.0, ~2.0, ~1.0]);<br/>val it = 3.0\u00a0: real<br/>*)</pre>"}, {"lang": "Stata", "loc": 4, "block": "<pre class=\"text highlighted_source\">matrix a=1,3,-5<br/>matrix b=4,-2,-1<br/>matrix c=a*b'<br/>di el(\"c\",1,1)</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">func dot(v1: [Double], v2: [Double]) -&gt; Double {<br/>  return reduce(lazy(zip(v1, v2)).map(*), 0, +)<br/>}<br/>\u00a0<br/>println(dot([1, 3, -5], [4, -2, -1]))</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">linearalgebra</span> <br/>\u00a0<br/><span class=\"kw1\">set</span> a <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> -<span class=\"nu0\">5</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> b <span class=\"br0\">{</span><span class=\"nu0\">4</span> -<span class=\"nu0\">2</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> dotp <span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">dotproduct</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/><span class=\"kw1\">proc</span> pp vec <span class=\"br0\">{</span><span class=\"kw1\">return</span> \\<span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$vec</span> ,<span class=\"br0\">]</span>\\<span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"[pp $a] <span class=\"es0\">\\u</span>2219 [pp $b] = $dotp\"</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">sum({1,3,\u20135}*{4,\u20132,\u20131})</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre style=\"font-family:'TI Uni'\">dotP([1, 3, \u20135], [4, \u20132, \u20131])</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import int<br/>\u00a0<br/>dot = sum:-0+ product*p<br/>\u00a0<br/>#cast\u00a0%z<br/>\u00a0<br/>test = dot(&lt;1,3,-5&gt;,&lt;4,-2,-1&gt;)</pre>"}, {"lang": "VBScript", "loc": 16, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>WScript.Echo DotProduct(<span class=\"st0\">\"1,3,-5\"</span>,<span class=\"st0\">\"4,-2,-1\"</span>)<br/>\u00a0<br/><span class=\"kw2\">Function</span> DotProduct(vector1,vector2)<br/>\tarrv1 = Split(vector1,<span class=\"st0\">\",\"</span>)<br/>\tarrv2 = Split(vector2,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw3\">If</span> <span class=\"kw4\">UBound</span>(arrv1) &lt;&gt; <span class=\"kw4\">UBound</span>(arrv2) <span class=\"kw3\">Then</span><br/>\t\tWScript.Echo <span class=\"st0\">\"The vectors are not of the same length.\"</span><br/>\t\t<span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\tDotProduct = 0<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrv1)<br/>\t\tDotProduct = DotProduct + (arrv1(i) * arrv2(i))<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>dot_product x y<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw2\">sum</span>+<span class=\"kw2\">map</span> <span class=\"br0\">(</span>*<span class=\"br0\">)</span> x y<span class=\"br0\">)</span></pre>"}, {"lang": "X86 Assembly", "loc": 70, "block": "<pre class=\"asm highlighted_source\">format PE64 console<br/>entry <span class=\"kw5\">start</span><br/>\u00a0<br/>    include <span class=\"st0\">'win64a.inc'</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"st0\">'.text'</span> <span class=\"kw5\">code</span> readable executable<br/>\u00a0<br/>    <span class=\"kw5\">start</span><span class=\"sy1\">:</span><br/>        stdcall dotProduct<span class=\"sy1\">,</span> vA<span class=\"sy1\">,</span> vB<br/>        invoke printf<span class=\"sy1\">,</span> msg_num<span class=\"sy1\">,</span> <span class=\"kw4\">rax</span><br/>\u00a0<br/>        stdcall dotProduct<span class=\"sy1\">,</span> vA<span class=\"sy1\">,</span> vC<br/>        invoke printf<span class=\"sy1\">,</span> msg_num<span class=\"sy1\">,</span> <span class=\"kw4\">rax</span><br/>\u00a0<br/>        invoke ExitProcess<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    proc dotProduct vectorA<span class=\"sy1\">,</span> vectorB<br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">rcx</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">cmp</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">rdx</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">je</span> <span class=\"sy1\">.</span>calculate<br/>\u00a0<br/>        invoke printf<span class=\"sy1\">,</span> msg_sizeMismatch<br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">ret</span><br/>\u00a0<br/>        <span class=\"sy1\">.</span>calculate<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">r8</span><span class=\"sy1\">,</span> <span class=\"kw4\">rcx</span><br/>        <span class=\"kw1\">add</span> <span class=\"kw4\">r8</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">r9</span><span class=\"sy1\">,</span> <span class=\"kw4\">rdx</span><br/>        <span class=\"kw1\">add</span> <span class=\"kw4\">r9</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">rcx</span><span class=\"sy1\">,</span> <span class=\"kw4\">rax</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">mov</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"sy1\">.</span>next<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">mov</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">r9</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">imul</span> <span class=\"kw4\">rbx</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">r8</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">add</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"kw4\">rbx</span><br/>            <span class=\"kw1\">add</span> <span class=\"kw4\">r8</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><br/>            <span class=\"kw1\">add</span> <span class=\"kw4\">r9</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><br/>            <span class=\"kw1\">loop</span> <span class=\"sy1\">.</span>next<br/>\u00a0<br/>        <span class=\"kw1\">ret</span><br/>    endp<br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"st0\">'.data'</span> <span class=\"kw5\">data</span> readable<br/>\u00a0<br/>    msg_num <span class=\"kw5\">db</span> <span class=\"st0\">\"%d\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x0D</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x0A</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    msg_sizeMismatch <span class=\"kw5\">db</span> <span class=\"st0\">\"Size mismatch; can't calculate.\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x0D</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x0A</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw5\">struc</span> Vector <span class=\"br0\">[</span>symbols<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">common</span><br/>        <span class=\"sy1\">.</span>length <span class=\"kw5\">dq</span> <span class=\"br0\">(</span><span class=\"sy1\">.</span>end <span class=\"sy1\">-</span> <span class=\"sy1\">.</span>symbols<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">8</span><br/>        <span class=\"sy1\">.</span>symbols <span class=\"kw5\">dq</span> symbols<br/>        <span class=\"sy1\">.</span>end<span class=\"sy1\">:</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    vA Vector <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">5</span><br/>    vB Vector <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    vC Vector <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw5\">section</span> <span class=\"st0\">'.idata'</span> <span class=\"kw5\">import</span> <span class=\"kw5\">data</span> readable writeable<br/>\u00a0<br/>    library kernel32<span class=\"sy1\">,</span> <span class=\"st0\">'KERNEL32.DLL'</span><span class=\"sy1\">,</span>\\<br/>            msvcrt<span class=\"sy1\">,</span> <span class=\"st0\">'MSVCRT.DLL'</span><br/>\u00a0<br/>    include <span class=\"st0\">'api/kernel32.inc'</span><br/>\u00a0<br/>    <span class=\"kw5\">import</span>  msvcrt<span class=\"sy1\">,</span>\\<br/>            printf<span class=\"sy1\">,</span> <span class=\"st0\">'printf'</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func DotProd(U, V, L);<br/>int U, V, L;<br/>int S, I;<br/>[S:= 0;<br/>for I:= 0 to L-1 do S:= S + U(I)*V(I);<br/>return S;<br/>];<br/>\u00a0<br/>[IntOut(0, DotProd([1, 3, -5], [4, -2, -1], 3));<br/>CrLf(0);<br/>]</pre>"}, {"lang": "Yabasic", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>sub sq_mul(a(), b(), c())<br/>\tlocal n, i<br/>\u00a0<br/>\tn = arraysize(a(), 1)<br/>\u00a0<br/>\tfor i = 1 to n<br/>\t\tc(i) = a(i) * b(i)<br/>\tnext i<br/>end sub<br/>\u00a0<br/>sub sq_sum(a())<br/>\tlocal n, i, r<br/>\u00a0<br/>\tn = arraysize(a(), 1)<br/>\u00a0<br/>\tfor i = 1 to n<br/>\t\tr = r + a(i)<br/>\tnext i<br/>\treturn r<br/>end sub<br/>\u00a0<br/>dim a(3), b(3), c(3)<br/>\u00a0<br/>a(1) = 1\u00a0: a(2) = 3\u00a0: a(3) = -5<br/>b(1) = 4\u00a0: b(2) = -2\u00a0: b(3) = -1<br/>sq_mul(a(), b(), c())<br/>\u00a0<br/>print sq_sum(c())<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn dotp(a,b){Utils.zipWith('*,a,b).sum()}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 5, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DIM</span> a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"nu0\">3</span>: <span class=\"kw1\">LET</span> a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>=-<span class=\"nu0\">5</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">DIM</span> b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">4</span>: <span class=\"kw1\">LET</span> b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>=-<span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>=-<span class=\"nu0\">1</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> sum=<span class=\"nu0\">0</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span>: <span class=\"kw1\">LET</span> sum=sum+a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>*b<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> sum</pre>"}]}