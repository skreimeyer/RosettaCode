{"task": "Letter_frequency", "blocks": [{"lang": "ACL2", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> increment-alist <span class=\"br0\">(</span>tbl key<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp tbl<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> key <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>first tbl<span class=\"br0\">)</span><span class=\"br0\">)</span> key<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> key <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>first tbl<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>rest tbl<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first tbl<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>increment-alist <span class=\"br0\">(</span>rest tbl<span class=\"br0\">)</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> freq-table <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span>increment-alist <span class=\"br0\">(</span>freq-table <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> letter-freq <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>freq-table <span class=\"br0\">(</span>coerce str '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 20, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Letter_Frequency <span class=\"kw1\">is</span><br/>   Counters: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>; <span class=\"co1\">-- initialize all Counters to 0</span><br/>   C:        Character;<br/>   File:     Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><span class=\"br0\">(</span>File, Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span>, Name =&gt; <span class=\"st0\">\"letter_frequency.adb\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span><span class=\"br0\">(</span>File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get</span><span class=\"br0\">(</span>File, C<span class=\"br0\">)</span>;<br/>      Counters<span class=\"br0\">(</span>C<span class=\"br0\">)</span>\u00a0:= Counters<span class=\"br0\">(</span>C<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Counters'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Counters<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> &amp; I &amp; <span class=\"st0\">\"':\"</span> &amp; Integer'Image<span class=\"br0\">(</span>Counters<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Letter_Frequency;</pre>"}, {"lang": "Aikido", "loc": 19, "block": "<pre class=\"text highlighted_source\">import ctype<br/>\u00a0<br/>var letters = new int [26]<br/>\u00a0<br/>var s = openin (args[0])<br/>while (!s.eof()) {<br/>    var ch = s.getchar()<br/>    if (s.eof()) {<br/>        break<br/>    }<br/>    if (ctype.isalpha (ch)) {<br/>        var n = cast&lt;int&gt;(ctype.tolower(ch) - 'a')<br/>        ++letters[n]<br/>    }<br/>}<br/>\u00a0<br/>foreach i letters.size() {<br/>    println (cast&lt;char&gt;('a' + i) + \" \" + letters[i])<br/>}</pre>"}, {"lang": "Aime", "loc": 15, "block": "<pre class=\"text highlighted_source\">file f;<br/>index x;<br/>integer c;<br/>\u00a0<br/>f.affix(\"unixdict.txt\");<br/>\u00a0<br/>while ((c = f.pick) ^ -1) {<br/>    x[c] += 1;<br/>}<br/>\u00a0<br/>c = 'A';<br/>while (c &lt;= 'Z') {<br/>    o_form(\"%c: /w5/\\n\", c, x[c] += x[c + 'a' - 'A'] += 0);<br/>    c += 1;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 28, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"br0\">[</span>0<span class=\"sy1\">:</span><span class=\"kw20\">max abs char</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> histogram<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> <span class=\"kw20\">max abs char</span> <span class=\"kw2\">DO</span> histogram<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw6\">FILE</span> input file<span class=\"sy1\">;</span><br/>   <span class=\"kw3\">STRING</span> input file name <span class=\"sy1\">=</span> <span class=\"st0\">\"Letter_frequency.a68\"</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">IF</span> <span class=\"kw22\">open</span> <span class=\"br0\">(</span>input file<span class=\"sy1\">,</span> input file name<span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span><span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">THEN</span><br/>      put <span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"Cannot open \"</span><span class=\"sy1\">,</span> input file name<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      stop<br/>   <span class=\"kw2\">ELSE</span><br/>      on file end <span class=\"br0\">(</span>input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw22\">close</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw2\">GOTO</span> finished<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">DO</span><br/>      <span class=\"kw3\">STRING</span> s<span class=\"sy1\">;</span><br/>      get <span class=\"br0\">(</span>input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>\t <span class=\"kw3\">CHAR</span> c <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t <span class=\"kw2\">IF</span> <span class=\"st0\">\"A\"</span> <span class=\"sy1\">&lt;=</span> c <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"Z\"</span> <span class=\"kw16\">OR</span> <span class=\"st0\">\"a\"</span> <span class=\"sy1\">&lt;=</span> c <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"z\"</span> <span class=\"kw2\">THEN</span><br/>\t    histogram<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> c<span class=\"br0\">]</span> <span class=\"kw17\">PLUSAB</span> 1<br/>\t <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">OD</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">close</span> <span class=\"br0\">(</span>input file<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>finished<span class=\"sy1\">:</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"A\"</span> <span class=\"kw2\">TO</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"Z\"</span> <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$a3xg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"kw8\">REPR</span> i<span class=\"sy1\">,</span> histogram<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span> <span class=\"kw2\">TO</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"z\"</span> <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$a3xg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"kw8\">REPR</span> i<span class=\"sy1\">,</span> histogram<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      freq\u2190{(\u236a\u222a\u2375),+/(\u222a\u2375)\u2218.\u2377\u2375}<br/>\u00a0<br/>      freq 0 1 2 3 2 3 4 3 4 4 4<br/>0 1<br/>1 1<br/>2 2<br/>3 3<br/>4 4              <br/>\u00a0<br/>      freq 'balloon'<br/>b 1<br/>a 1<br/>l 2<br/>o 2<br/>n 1<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\">OpenFile <span class=\"sy0\">=</span> <span class=\"re0\">%A_ScriptFullPath%</span> <span class=\"co1\">; use own source code</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> FileText<span class=\"sy0\">,</span> <span class=\"re0\">%OpenFile%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">26</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> junk<span class=\"sy0\">,</span> FileText<span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">96</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"sy0\">,,</span> UseErrorLevel<br/>\tout <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">96</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span> <span class=\"st0\">\": \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% out</pre>"}, {"lang": "AutoIt", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Func _Letter_frequency($Path, $fcase = True, $fspecial_chars = True)<br/>\tLocal $hFile, $sRead, $iupto, $iStart, $iCount<br/>\tIf Not $fcase Then $fcase = False<br/>\tIf Not $fspecial_chars Then<br/>\t\t$iStart = 64<br/>\t\tIf Not $fcase Then<br/>\t\t\t$iupto = 26<br/>\t\tElse<br/>\t\t\t$iupto = 58<br/>\t\tEndIf<br/>\tElse<br/>\t\t$iStart = 31<br/>\t\t$iupto = 224<br/>\tEndIf<br/>\t$hFile = FileOpen($Path, 0)<br/>\t$sRead = FileRead($hFile)<br/>\tFileClose($hFile)<br/>\tFor $i = 1 To $iupto<br/>\t\tIf Not $fspecial_chars Then<br/>\t\t\tIf $iStart + $i &gt; 90 And $iStart + $i &lt; 97 Then ContinueLoop<br/>\t\tEndIf<br/>\t\t$sRead = StringReplace($sRead, Chr($iStart + $i), \"\", 0, $fcase)<br/>\t\t$iCount = @extended<br/>\t\tIf $iCount &gt; 0 Then ConsoleWrite(Chr($iStart + $i) &amp; \"\u00a0: \" &amp; $iCount &amp; @CRLF)<br/>\tNext<br/>EndFunc  \u00a0;==&gt;_Letter_frequency</pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># usage: awk -f letters.awk HolyBible.txt</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <span class=\"kw3\">FS</span>=<span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">NF</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span> m<span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span>   <span class=\"br0\">{</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"kw1\">in</span> m<span class=\"br0\">)</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%9d\u00a0%-14s<span class=\"es0\">\\n</span>\"</span>, m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,i<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 6, "block": "<pre class=\"freebasic highlighted_source\">txt$ = LOAD$<span class=\"br0\">(</span><span class=\"st0\">\"bible.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> x = <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"kw1\">CHR</span>$<span class=\"br0\">(</span>x-<span class=\"nu0\">32</span><span class=\"br0\">)</span>, <span class=\"st0\">\" \"</span>, <span class=\"kw1\">CHR</span>$<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"st0\">\"\u00a0: \"</span>, COUNT<span class=\"br0\">(</span>txt$, x-<span class=\"nu0\">32</span><span class=\"br0\">)</span>, <span class=\"st0\">\" - \"</span>, COUNT<span class=\"br0\">(</span>txt$, x<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      DIM cnt%(255)<br/>\u00a0<br/>      file% = OPENIN(\"C:\\unixdict.txt\")<br/>      IF file%=0 ERROR 100, \"Could not open file\"<br/>\u00a0<br/>      REPEAT<br/>        A$ = GET$#file%<br/>        L% = LEN(A$)<br/>        IF L% THEN<br/>          FOR I% = 1 TO L%<br/>            cnt%(ASCMID$(A$,I%)) += 1<br/>          NEXT<br/>        ENDIF<br/>      UNTIL EOF#file%<br/>      CLOSE #file%<br/>\u00a0<br/>      FOR c% = &amp;41 TO &amp;5A<br/>        PRINT CHR$(c%)CHR$(c%+32) \": \" cnt%(c%)+cnt%(c%+32)<br/>      NEXT</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">(lc=<br/>  counts c<br/>.     fil$(!arg,r)                        {open file for reading}<br/>    &amp; 0:?counts<br/>    &amp;   whl<br/>      ' ( fil$:?c                         {read a byte}<br/>        &amp;     (\u00a0!c:(~&lt;A:~&gt;Z|~&lt;a:~&gt;z)<br/>              | 0<br/>              )<br/>            +\u00a0!counts<br/>         \u00a0:\u00a0?counts                       {simply add any found letter to the sum}<br/>        )<br/>    &amp; fil$(,SET,-1)                       {close the file by seeking to impossible file position.}<br/>  |\u00a0!counts                               {return the sum}<br/>);<br/>\u00a0<br/>lc$\"valid.bra\"                            {example: count letters in Bracmat's validation suite.}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* declare array */</span><br/><span class=\"kw4\">int</span> frequency<span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> ch<span class=\"sy0\">;</span><br/>FILE<span class=\"sy0\">*</span> txt_file <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"a_text_file.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* init the freq table: */</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ch <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> ch<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    frequency<span class=\"br0\">[</span>ch<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ch <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgetc.html\"><span class=\"kw3\">fgetc</span></a><span class=\"br0\">(</span>txt_file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> EOF<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* end of file or read error.  EOF is typically -1 */</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* assuming ASCII; \"letters\" means \"a to z\" */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">'a'</span> <span class=\"sy0\">&lt;=</span> ch <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/* lower case */</span><br/>        frequency<span class=\"br0\">[</span>ch<span class=\"sy0\">-</span><span class=\"st0\">'a'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">'A'</span> <span class=\"sy0\">&lt;=</span> ch <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* upper case */</span><br/>        frequency<span class=\"br0\">[</span>ch<span class=\"sy0\">-</span><span class=\"st0\">'A'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 37, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> SortedDictionary<span class=\"sy0\">&lt;</span>TItem, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> GetFrequencies<span class=\"sy0\">&lt;</span>TItem<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>TItem<span class=\"sy0\">&gt;</span> items<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> dictionary <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SortedDictionary<span class=\"sy0\">&lt;</span>TItem, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> item <span class=\"kw1\">in</span> items<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dictionary<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                dictionary<span class=\"br0\">[</span>item<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                dictionary<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> dictionary<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arguments<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> file <span class=\"sy0\">=</span> arguments<span class=\"sy0\">.</span><span class=\"me1\">FirstOrDefault</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>File<span class=\"sy0\">.</span><span class=\"me1\">Exists</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> text <span class=\"sy0\">=</span> File<span class=\"sy0\">.</span><span class=\"me1\">ReadAllText</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> entry <span class=\"kw1\">in</span> GetFrequencies<span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}: {1}\"</span>, entry<span class=\"sy0\">.</span><span class=\"me1\">Key</span>, entry<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> input<span class=\"br0\">(</span><span class=\"st0\">\"filename.txt\"</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ios_base</span><span class=\"sy4\">::</span><span class=\"me2\">binary</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>input<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"error: can't open file<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">size_t</span> count<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">fill_n</span><span class=\"br0\">(</span>count, <span class=\"nu0\">256</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"sy4\">;</span> input.<span class=\"me1\">get</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>count<span class=\"br0\">[</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// process input file</span><br/>\t\t<span class=\"sy4\">;</span> <span class=\"co1\">// empty loop body</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"kw3\">isgraph</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// non-zero counts of printable characters</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> letter-freq <span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>stream file<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>str <span class=\"br0\">(</span>make-string <span class=\"br0\">(</span>file-<span class=\"kw1\">length</span> stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>arr <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">256</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>read-sequence str stream<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for c across str <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf <span class=\"br0\">(</span><span class=\"kw1\">aref</span> arr <span class=\"br0\">(</span>char-code c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for c from <span class=\"nu0\">32</span> to <span class=\"nu0\">126</span> for i from <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~c: ~d~a\"</span><br/>\t\t    <span class=\"br0\">(</span>code-char c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> arr c<span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> i <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #\\newline #\\tab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>letter-freq <span class=\"st0\">\"test.lisp\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> second <span class=\"sy0\">&gt;</span> <br/>\t\t\t<span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>java<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>Character<span class=\"sy0\">/</span>toUpperCase <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>\t\t\t\t\t  <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span>java<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>Character<span class=\"sy0\">/</span>isLetter <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>slurp <span class=\"st0\">\"text.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 46, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> LetterFrecuency;<br/><span class=\"kw1\">IMPORT</span> Files<span class=\"sy0\">,</span>StdLog<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tloc<span class=\"sy0\">:</span> Files.<span class=\"me1\">Locator</span>;<br/>\tfd<span class=\"sy0\">:</span> Files.<span class=\"me1\">File</span>;<br/>\trd<span class=\"sy0\">:</span> Files.<span class=\"me1\">Reader</span>;<br/>\tx<span class=\"sy0\">:</span> BYTE;<br/>\tfrecuency<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">26</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\tc<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tloc <span class=\"sy0\">:=</span> Files.<span class=\"me1\">dir</span>.<span class=\"me1\">This</span><span class=\"br0\">(</span><span class=\"st0\">\"BBTest/Mod\"</span><span class=\"br0\">)</span>;<br/>\tfd <span class=\"sy0\">:=</span> Files.<span class=\"me1\">dir</span>.<span class=\"me1\">Old</span><span class=\"br0\">(</span>loc<span class=\"sy0\">,</span><span class=\"st0\">\"LetterFrecuency.odc\"</span><span class=\"sy0\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>\trd <span class=\"sy0\">:=</span> fd.<span class=\"me1\">NewReader</span><span class=\"br0\">(</span><span class=\"kw2\">NIL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* init the frecuency array *)</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>frecuency<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> frecuency<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* collect frecuencies *)</span><br/>\t<span class=\"kw1\">WHILE</span> <span class=\"sy0\">~</span>rd.<span class=\"me1\">eof</span> <span class=\"kw1\">DO</span><br/>\t\trd.<span class=\"me1\">ReadByte</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;c <span class=\"sy0\">:=</span> <span class=\"kw3\">CAP</span><span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"coMULTI\">(* convert vowels with diacritics *)</span><br/>\t\t<span class=\"kw1\">CASE</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"kw1\">OF</span><br/>\t\t\t <span class=\"nu0\">193</span><span class=\"sy0\">:</span> c <span class=\"sy0\">:=</span> <span class=\"st_h\">'A'</span>;<br/>\t\t\t|<span class=\"nu0\">201</span><span class=\"sy0\">:</span> c <span class=\"sy0\">:=</span> <span class=\"st_h\">'E'</span>;<br/>\t\t\t|<span class=\"nu0\">205</span><span class=\"sy0\">:</span> c <span class=\"sy0\">:=</span> <span class=\"st_h\">'I'</span>;<br/>\t\t\t|<span class=\"nu0\">211</span><span class=\"sy0\">:</span> c <span class=\"sy0\">:=</span> <span class=\"st_h\">'O'</span>;<br/>\t\t\t|<span class=\"nu0\">218</span><span class=\"sy0\">:</span> c <span class=\"sy0\">:=</span> <span class=\"st_h\">'U'</span>;<br/>\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>c &gt;<span class=\"sy0\">=</span> <span class=\"st_h\">'A'</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>c &lt;<span class=\"sy0\">=</span> <span class=\"st_h\">'Z'</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>frecuency<span class=\"br0\">[</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* show data *)</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>frecuency<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tStdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>frecuency<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> LetterFrecuency.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span> frequency<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> buffer<span class=\"sy0\">;</span> <span class=\"st0\">\"unixdict.txt\"</span>.<span class=\"me1\">File</span>.<span class=\"me1\">byChunk</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> buffer.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isAlpha<span class=\"br0\">)</span><br/>            frequency<span class=\"br0\">[</span>c.<span class=\"me1\">toLower</span> <span class=\"sy0\">-</span> <span class=\"st0\">'a'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%s,\u00a0%),<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> frequency<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">chunks</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; bump count when letter added</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>hash-counter <span class=\"kw1\">hash</span> key <span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">;; (set! key (string-downcase key)) - if ignore case wanted</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">putprop</span> <span class=\"kw1\">hash</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>getprop <span class=\"kw1\">hash</span> key<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;  apply to exploded string</span><br/><span class=\"co1\">;;  and sort result</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>hash-compare a b<span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>first a<span class=\"br0\">)</span> <span class=\"br0\">(</span>first b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>count-letters <span class=\"kw1\">hash</span> string<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>map <span class=\"br0\">(</span>curry hash-counter <span class=\"kw1\">hash</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>list-sort hash-compare <span class=\"br0\">(</span>symbol-<span class=\"kw1\">plist</span> <span class=\"kw1\">hash</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 41, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Read from the file and print frequencies.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tfile<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+plain_text_file&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">PLAIN_TEXT_FILE</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> file.<span class=\"me1\">make_open_read</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><br/>\t\t\tfile.<span class=\"me1\">read_stream</span><span class=\"br0\">(</span>file.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\tfile.<span class=\"me1\">close</span><br/>\t\t\tacross get_frequencies<span class=\"br0\">(</span>file.<span class=\"me1\">last_string</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> f <span class=\"kw2\">loop</span><br/>\t\t\t\tprint<span class=\"br0\">(</span>f.<span class=\"me1\">key</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> f.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tget_frequencies <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a>, <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Hash table of counts for alphabetic characters in `s'.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tchar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tacross s.<span class=\"me1\">area</span> <span class=\"kw2\">as</span> st <span class=\"kw2\">loop</span><br/>\t\t\t\tchar <span class=\"sy0\">:=</span> st.<span class=\"me1\">item</span><br/>\t\t\t\t<span class=\"kw2\">if</span> char.<span class=\"me1\">is_alpha</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">has</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">force</span><span class=\"br0\">(</span><span class=\"kw3\">Result</span>.<span class=\"me1\">at</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, char<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, char<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">file = hd(System.argv)<br/>\u00a0<br/>File.read!(file)<br/>|&gt; String.upcase<br/>|&gt; String.graphemes<br/>|&gt; Enum.filter(fn c -&gt; c =~ ~r/[A-Z]/ end)<br/>|&gt; Enum.reduce(Map.new, fn c,acc -&gt; Map.update(acc, c, 1, &amp;(&amp;1+1)) end)<br/>|&gt; Enum.sort_by(fn {_k,v} -&gt; -v end)<br/>|&gt; Enum.each(fn {k,v} -&gt; IO.puts \"#{k}  #{v}\" end)</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>letter_frequency<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> letter_freq<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">case</span>  <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">read_file</span><span class=\"br0\">(</span><span class=\"st0\">\"file.txt\"</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>\t\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">FileData</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">letter_freq</span><span class=\"br0\">(</span><span class=\"kw3\">binary_to_list</span><span class=\"br0\">(</span><span class=\"re5\">FileData</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"re5\">_FileNotExist</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"File do not exist~n\"</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">letter_freq</span><span class=\"br0\">(</span><span class=\"re5\">Data</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Char</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t\t\t<span class=\"re5\">LetterCount</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Element</span><span class=\"sy1\">,</span> <span class=\"re5\">Count</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t\t\t\t\t\t\t\t\t<span class=\"kw1\">case</span> <span class=\"re5\">Element</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Char</span> <span class=\"kw1\">of</span><br/>\t\t\t\t\t\t\t\t\t\t\t\ttrue <span class=\"sy1\">-&gt;</span><br/>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"re5\">Count</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t\t\t\t\t\t\t\t\t\t\t\tfalse <span class=\"sy1\">-&gt;</span><br/>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"re5\">Count</span><br/>\t\t\t\t\t\t\t\t\t\t\t<span class=\"kw1\">end</span>\t\t<br/>\t\t\t\t\t\t\t\t\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Data</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t\t\t\t\t<span class=\"kw1\">case</span> <span class=\"re5\">LetterCount</span> <span class=\"sy3\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">of</span><br/>\t\t\t\t\t\ttrue <span class=\"sy1\">-&gt;</span>\t\t\t\t\t<br/>\t\t\t\t\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p\t:\t~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">Char</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">LetterCount</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t\t\t\tfalse <span class=\"sy1\">-&gt;</span><br/>\t\t\t\t\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">end</span>\t\t<br/>\t\t\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span>  <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">222</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 26, "block": "<pre class=\"text highlighted_source\">PROGRAM LETTER<br/>\u00a0<br/>DIM CNT[255]<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>      OPEN(\"I\",1,\"f:\\errev30\\erre.hlp\")<br/>\u00a0<br/>      REPEAT<br/>        GET(#1,A$)<br/>        L%=LEN(A$)<br/>        IF L%&gt;0 THEN<br/>          FOR I%=1 TO L% DO<br/>            A%=ASC(MID$(A$,I%))<br/>            CNT[A%]+=1<br/>          END FOR<br/>        END IF<br/>      UNTIL EOF(1)<br/>      CLOSE(1)<br/>\u00a0<br/>      FOR C%=$41 TO $5A DO<br/>        PRINT(CHR$(C%);CHR$(C%+32);\": \";CNT[C%]+CNT[C%+32])<br/>      END FOR<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 26, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"co1\">-- LetterFrequency.ex</span><br/><span class=\"co1\">-- Count frequency of each letter in own source code.</span><br/>\u00a0<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>console.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>io.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>text.e<br/>\u00a0<br/><span class=\"kw2\">sequence</span> letters <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> content <span class=\"sy1\">=</span> read_file<span class=\"br0\">(</span><span class=\"st0\">\"LetterFrequency.ex\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>content <span class=\"sy1\">=</span> lower<span class=\"br0\">(</span>content<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>content<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> content<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; <span class=\"nu0\">96</span> <span class=\"kw1\">and</span> content<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt; <span class=\"nu0\">123</span> <span class=\"kw1\">then</span><br/>\t\tletters<span class=\"br0\">[</span>content<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">96</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">26</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%s: \u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>i<span class=\"sy1\">+</span><span class=\"nu0\">96</span><span class=\"sy2\">,</span>letters<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">getc</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> alphabet <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span><br/>\u00a0<br/><span class=\"kw1\">let</span> letterFreq <span class=\"br0\">(</span>text\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    text.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> alphabet.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">countBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sort</span><br/>\u00a0<br/><span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> <span class=\"st0\">\"Now is the time for all good men to come to the aid of the party\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> letterFreq v<br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>letter, freq<span class=\"br0\">)</span> <span class=\"kw1\">in</span> res <span class=\"kw1\">do</span><br/>    printfn <span class=\"st0\">\"%A,\u00a0%A\"</span> letter freq</pre>"}, {"lang": "FBSL", "loc": 23, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"co1\">'Open a text file and count the occurrences of each letter.</span><br/><span class=\"kw1\">FUNCTION</span> countBytes<span class=\"br0\">(</span>fileName <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> ascii<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> handle <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a> <span class=\"sy0\">=</span> FILEOPEN<span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckbinary.shtml\"><span class=\"kw3\">BINARY</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">WHILE</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> FILEEOF<span class=\"br0\">(</span>handle<span class=\"br0\">)</span><br/>\t\tc <span class=\"sy0\">=</span> FILEGETC<span class=\"br0\">(</span>handle<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">IF</span> c <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">WHILE</span><br/>\t\tascii<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ascii<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">WEND</span><br/>\tFILECLOSE<span class=\"br0\">(</span>handle<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">RETURN</span> ascii<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> counters <span class=\"sy0\">=</span> countBytes<span class=\"br0\">(</span>COMMAND<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>counters<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>counters<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> i<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcktab.shtml\"><span class=\"kw3\">TAB</span></a><span class=\"sy0\">,</span> IIF<span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> CHR<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcktab.shtml\"><span class=\"kw3\">TAB</span></a><span class=\"sy0\">,</span> counters<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>PAUSE<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 19, "block": "<pre class=\"text highlighted_source\">USING: hashtables locals io assocs kernel io.encodings.utf8 io.files formatting\u00a0;<br/>IN: count-letters<br/>\u00a0<br/>&lt;PRIVATE<br/>\u00a0<br/>: count-from-stream ( -- counts )<br/>  52 &lt;hashtable&gt;<br/>  [ read1 dup ] [ over inc-at ] while<br/>  drop\u00a0;<br/>\u00a0<br/>: print-counts ( counts -- )<br/>  [ \"%c:\u00a0%d\\n\" printf ] assoc-each\u00a0;<br/>\u00a0<br/>PRIVATE&gt;<br/>\u00a0<br/>: count-letters ( filename -- )<br/>  utf8 [ count-from-stream ] with-file-reader<br/>    print-counts\u00a0;<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 17, "block": "<pre class=\"text highlighted_source\">create counts 26 cells allot<br/>\u00a0<br/>: freq ( filename -- )<br/>  counts 26 cells erase<br/>  slurp-file bounds do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"422102\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 32 or 'a -<br/>    dup 0 26 within if<br/>      cells counts +<br/>      1 swap +!<br/>    else drop then<br/>  loop<br/>  26 0 do<br/>    cr [char] ' emit  'a i + emit  .\" ': \"<br/>    counts i cells + @ .<br/>  loop\u00a0;<br/>\u00a0<br/>s\" example.txt\" freq</pre>"}, {"lang": "Fortran", "loc": 10, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"sy0\">-*-</span> mode<span class=\"sy0\">:</span> compilation; default<span class=\"sy0\">-</span>directory<span class=\"sy0\">:</span> <span class=\"st0\">\"/tmp/\"</span> <span class=\"sy0\">-*-</span><br/><span class=\"co1\">Compilation started at Sat May 18 18:09:46</span><br/>\u00a0<br/>a<span class=\"sy0\">=</span>.<span class=\"sy0\">/</span>F <span class=\"sy0\">&amp;&amp;</span> make $a <span class=\"sy0\">&amp;&amp;</span> $a &lt; configuration.<span class=\"kw1\">file</span><br/>f95 <span class=\"sy0\">-</span>Wall <span class=\"sy0\">-</span>ffree<span class=\"sy0\">-</span><span class=\"kw1\">form</span> F.<span class=\"me1\">F</span> <span class=\"sy0\">-</span>o F<br/>          <span class=\"nu0\">92</span>          <span class=\"nu0\">21</span>          <span class=\"nu0\">17</span>          <span class=\"nu0\">24</span>          <span class=\"nu0\">82</span>          <span class=\"nu0\">19</span>          <span class=\"nu0\">19</span>          <span class=\"nu0\">22</span>          <span class=\"nu0\">67</span>           <span class=\"nu0\">0</span>           <span class=\"nu0\">2</span>          <span class=\"nu0\">27</span>          <span class=\"nu0\">27</span>          <span class=\"nu0\">57</span>          <span class=\"nu0\">55</span>          <span class=\"nu0\">31</span>           <span class=\"nu0\">1</span>          <span class=\"nu0\">61</span>          <span class=\"nu0\">43</span>          <span class=\"nu0\">60</span>          <span class=\"nu0\">20</span>           <span class=\"nu0\">6</span>           <span class=\"nu0\">2</span>           <span class=\"nu0\">0</span>          <span class=\"nu0\">10</span>           <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">Compilation finished at Sat May 18 18:09:46</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 28, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">65</span> <span class=\"kw1\">to</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <span class=\"co1\">' array to hold frequency of each letter, all elements zero initially</span><br/><span class=\"kw1\">Dim</span> fileName <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"input.txt\"</span><br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">Open</span> fileName <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/>\u00a0<br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, s</span><br/>  s = <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    a<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The frequency of each letter in the file \"</span>; fileName; <span class=\"st0\">\" is as follows:\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">65</span> <span class=\"kw1\">To</span> <span class=\"nu0\">90</span><br/>  <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\"\u00a0: \"</span>; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 21, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sData <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><span class=\"st0\">\"data.txt\"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iCount, iSpaces, iLetters, iOther <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> bPunctuation <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> iCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sData<span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>, <a href=\"http://gambasdoc.org/help/lang/ucase\"><span class=\"kw2\">UCase</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sData, iCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iLetters<br/>    bPunctuation <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>   <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sData, icount, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iSpaces<br/>    bPunctuation <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> bPunctuation <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iOther<br/>  bPunctuation <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.google.com/search?hl=en&amp;q=message+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">Message</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Text contains \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sData<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" characters<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">&amp;</span> iLetters <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" Letters<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">&amp;</span> iSpaces <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" Spaces<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">&amp;</span> iOther <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" Punctuation, newlines etc.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 57, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"unicode\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> file <span class=\"sy2\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    bs<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadFile<span class=\"sy1\">(</span>file<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// answer is now in m.  sort and format output:</span><br/>    lfs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>lfList<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> l<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>        lfs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>lfs<span class=\"sy1\">,</span> &amp;letterFreq<span class=\"sy1\">{</span>l<span class=\"sy1\">,</span> f<span class=\"sy1\">})</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>lfs<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"file:\"</span><span class=\"sy1\">,</span> file<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"letter  frequency\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> lf <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lfs <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> unicode<span class=\"sy3\">.</span>IsGraphic<span class=\"sy1\">(</span>lf<span class=\"sy3\">.</span>rune<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"  \u00a0%c   \u00a0%7d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> lf<span class=\"sy3\">.</span>rune<span class=\"sy1\">,</span> lf<span class=\"sy3\">.</span>freq<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%U \u00a0%7d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> lf<span class=\"sy3\">.</span>rune<span class=\"sy1\">,</span> lf<span class=\"sy3\">.</span>freq<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> letterFreq <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    rune<br/>    freq <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> lfList <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>letterFreq<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>lfs lfList<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>lfs<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>lfs lfList<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> fd <span class=\"sy2\">:=</span> lfs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>freq <span class=\"sy3\">-</span> lfs<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>freq<span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> fd &lt; <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">case</span> fd &gt; <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> lfs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>rune &lt; lfs<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>rune<br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>lfs lfList<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    lfs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> lfs<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> lfs<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> lfs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> frequency <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> map, value <span class=\"sy0\">-&gt;</span> map<span class=\"br0\">[</span>value<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>map<span class=\"br0\">[</span>value<span class=\"br0\">]</span> <span class=\"sy0\">?</span>: <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> map <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>frequency<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">'frequency.groovy'</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> key, value <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"'$key': $value\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Harbour", "loc": 24, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> s <span class=\"sy0\">:=</span> hb_MemoRead<span class=\"br0\">(</span> <span class=\"kw4\">Left</span><span class=\"br0\">(</span> __FILE__ <span class=\"sy0\">,</span> <span class=\"kw2\">At</span><span class=\"br0\">(</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">,</span> __FILE__ <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\"prg\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> c<span class=\"sy0\">,</span> <span class=\"kw2\">n</span><span class=\"sy0\">,</span> i<br/>   <span class=\"kw1\">LOCAL</span> a <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> <span class=\"kw1\">EACH</span> c <span class=\"kw2\">IN</span> s<br/>      <span class=\"kw1\">IF</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">31</span><br/>         AAdd<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> c <span class=\"br0\">)</span><br/>      <span class=\"kw1\">ENDIF</span><br/>   <span class=\"kw1\">NEXT</span><br/>   a <span class=\"sy0\">:=</span> <span class=\"kw1\">ASort</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><br/>   i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">WHILE</span> i <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><br/>      c <span class=\"sy0\">:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">;</span> <span class=\"kw2\">n</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>      i<span class=\"sy0\">++</span><br/>      <span class=\"kw1\">IF</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"kw2\">AND</span><span class=\"sy0\">.</span> <span class=\"me1\">c</span> <span class=\"sy0\">==</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>         <span class=\"kw1\">WHILE</span> c <span class=\"sy0\">==</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"kw2\">n</span><span class=\"sy0\">++</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><br/>         <span class=\"kw1\">END</span><br/>      <span class=\"kw1\">ENDIF</span><br/>      <span class=\"sy0\">??</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">+</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"=\"</span> <span class=\"sy0\">+</span> hb_NtoS<span class=\"br0\">(</span> <span class=\"kw2\">n</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><br/>   <span class=\"kw1\">END</span><br/>\u00a0<br/>   <span class=\"kw2\">RETURN</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>group<span class=\"sy0\">,</span>sort<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:interact\"><span class=\"kw3\">interact</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">&amp;&amp;</span>&amp; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> group <span class=\"sy0\">.</span> sort<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 21, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> PrintCount<span class=\"br0\">(</span>CountLetters<span class=\"br0\">(</span><span class=\"sy1\">!</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> CountLetters<span class=\"br0\">(</span>fn<span class=\"br0\">)</span>  <span class=\"co1\">#: Return case insensitive count of letters</span><br/>   K <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> f <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>fn<span class=\"sy1\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">every</span> c <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"sy1\">|</span><span class=\"kw4\">read</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>         <span class=\"kw1\">if</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">lcase</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> K<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> K<br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">errout</span><span class=\"sy1\">,</span><span class=\"st0\">\"Unable to open file \"</span><span class=\"sy1\">,</span>fn<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PrintCount<span class=\"br0\">(</span><span class=\"kw7\">T</span><span class=\"br0\">)</span>    <span class=\"co1\">#: Print the letters </span><br/><span class=\"kw1\">every</span> c <span class=\"sy1\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span><span class=\"kw7\">T</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"%s -\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>c<span class=\"sy1\">,</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">ltrfreq=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>  letters=. u: <span class=\"nu0\">65</span> + i.<span class=\"nu0\">26</span>  <span class=\"co1\">NB. upper case letters</span><br/>  &lt;: #/.~ letters <span class=\"sy0\">(</span>, -. -.~<span class=\"sy0\">)</span> toupper fread <span class=\"kw2\">y</span>  <br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.FileReader</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> LetterFreq <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> countLetters<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> filename<span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/IOException.html\"><span class=\"kw20\">IOException</span></a><span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> freqs = <span class=\"kw2\">new</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a> in = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/FileReader.html\"><span class=\"kw20\">FileReader</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> line<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>line = in.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tline = line.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">char</span> ch:line.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>.<span class=\"me1\">isLetter</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\tfreqs<span class=\"br0\">[</span>ch - <span class=\"st0\">'A'</span><span class=\"br0\">]</span>++<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tin.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> freqs<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/IOException.html\"><span class=\"kw20\">IOException</span></a><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>countLetters<span class=\"br0\">(</span><span class=\"st0\">\"filename.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 29, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> cs <span class=\"sy0\">=</span> txt.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        i <span class=\"sy0\">=</span> cs.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>        dct <span class=\"sy0\">=</span>  <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        c <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span><br/>        keys<span class=\"sy0\">;</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        c <span class=\"sy0\">=</span> cs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        dct<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dct<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    keys <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">keys</span><span class=\"br0\">(</span>dct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    keys.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> keys.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>c<span class=\"sy0\">,</span> dct<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"Not all that Mrs. Bennet, however, with the assistance of her five<span class=\"es0\">\\</span><br/>daughters, could ask on the subject, was sufficient to draw from her<span class=\"es0\">\\</span><br/>husband any satisfactory description of Mr. Bingley. They attacked him<span class=\"es0\">\\</span><br/>in various ways--with barefaced questions, ingenious suppositions, and<span class=\"es0\">\\</span><br/>distant surmises; but he eluded the skill of them all, and they were at<span class=\"es0\">\\</span><br/>last obliged to accept the second-hand intelligence of their neighbour,<span class=\"es0\">\\</span><br/>Lady Lucas. Her report was highly favourable. Sir William had been<span class=\"es0\">\\</span><br/>delighted with him. He was quite young, wonderfully handsome, extremely<span class=\"es0\">\\</span><br/>agreeable, and, to crown the whole, he meant to be at the next assembly<span class=\"es0\">\\</span><br/>with a large party. Nothing could be more delightful! To be fond of<span class=\"es0\">\\</span><br/>dancing was a certain step towards falling in love; and very lively<span class=\"es0\">\\</span><br/>hopes of Mr. Bingley's heart were entertained.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> </pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Input: an array of strings.<br/># Output: an object with the strings as keys,<br/># the values of which are the corresponding frequencies.<br/>def counter:<br/>  reduce .[] as $item ( {}; .[$item] += 1 )\u00a0;<br/>\u00a0<br/># For neatness we sort the keys:<br/>explode | map( [.] | implode ) | counter | . as $counter<br/> | keys | sort[] | [., $counter[.] ]<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function letterfreq(file::AbstractString; fltr::Function=(_) -&gt; true)<br/>    sort(Dict(counter(filter(fltr, readstring(file)))))<br/>end<br/>\u00a0<br/>display(letterfreq(\"src/Letter_frequency.jl\"; fltr=isalpha))</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">+(?a;#:'=a:,/0:`)</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readText</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letterMap <span class=\"sy0\">=</span> text.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it in <span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span> <span class=\"br0\">}</span>.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span>.<span class=\"me1\">toSortedMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>letter in letterMap<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${letter.key} = ${letter.value.size}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> letterMap.<span class=\"me1\">values</span>.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">size</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Total letters = $sum\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 22, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"text.txt\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>i<br/>        txt$ <span class=\"sy0\">=</span><span class=\"kw1\">input</span>$<span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">lof</span><span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        Le <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> txt$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>i<br/>\u00a0<br/>    <span class=\"kw1\">dim</span> LetterFreqy<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">'   txt$ =upper$( txt$)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Le<br/>        char <span class=\"sy0\">=</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> txt$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> char <span class=\"sy0\">&gt;=</span><span class=\"nu0\">32</span> <span class=\"kw1\">then</span> LetterFreqy<span class=\"br0\">(</span> char<span class=\"br0\">)</span> <span class=\"sy0\">=</span>LetterFreqy<span class=\"br0\">(</span> char<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">32</span> <span class=\"kw1\">to</span> <span class=\"nu0\">255</span><br/>        <span class=\"kw1\">if</span> LetterFreqy<span class=\"br0\">(</span> j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\" Character #\"</span>; j<span class=\"sy0\">,</span> <span class=\"st0\">\"(\"</span>; <span class=\"kw2\">chr$</span><span class=\"br0\">(</span> j<span class=\"br0\">)</span>;_<br/>         <span class=\"st0\">\") appeared \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##.##\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"sy0\">*</span>LetterFreqy<span class=\"br0\">(</span> j<span class=\"br0\">)</span> <span class=\"sy0\">/</span>Le<span class=\"br0\">)</span>; <span class=\"st0\">\"% of the time.\"</span><br/>    <span class=\"kw1\">next</span> j<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 24, "block": "<pre class=\"text highlighted_source\">local(<br/>\tstr \t= 'Hello world!',<br/>\tfreq\t= map<br/>)<br/>// as a loop. arguably quicker than query expression<br/>loop(#str-&gt;size) =&gt; {<br/>\t#freq-&gt;keys\u00a0!&gt;&gt; #str-&gt;get(loop_count)\u00a0? <br/>\t\t#freq-&gt;insert(#str-&gt;get(loop_count) = #str-&gt;values-&gt;find(#str-&gt;get(loop_count))-&gt;size)<br/>}<br/>\u00a0<br/>// or<br/>local(<br/>\tstr \t= 'Hello world!',<br/>\tfreq\t= map<br/>)<br/>// as query expression, less code<br/>with i in #str-&gt;values where #freq-&gt;keys\u00a0!&gt;&gt; #i do =&gt; {<br/>\t#freq-&gt;insert(#i = #str-&gt;values-&gt;find(#i)-&gt;size)<br/>}<br/>\u00a0<br/>// output #freq<br/>with elem in #freq-&gt;keys do =&gt; {^<br/>\t'\"'+#elem+'\": '+#freq-&gt;find(#elem)+'\\r'<br/>^}</pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return entire contents of named file</span><br/><span class=\"kw1\">function</span> readFile <span class=\"br0\">(</span>filename<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> file <span class=\"sy0\">=</span> <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">io.open</span><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> contents <span class=\"sy0\">=</span> file<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"st0\">\"*all\"</span><span class=\"br0\">)</span><br/>  file<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> contents<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return a closure to keep track of letter counts</span><br/><span class=\"kw1\">function</span> tally <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">-- Add x to tally if supplied, return tally list otherwise</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> count <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">if</span> t<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        t<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        t<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> t<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> letterCount <span class=\"sy0\">=</span> tally<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> letter <span class=\"kw2\">in</span> readFile<span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%a\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  letterCount<span class=\"br0\">(</span>letter<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>letterCount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringTools:-CharacterFrequencies(readbytes(\"File.txt\",infinity,TEXT))</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Tally[Characters[Import[\"file.txt\",\"Text\"]]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> u = letter_frequency<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> ischar<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\t\tt = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">end</span>; <br/>\tA = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sparse.html\"><span class=\"kw2\">sparse</span></a><span class=\"br0\">(</span>t+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">256</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\tprintf<span class=\"br0\">(</span><span class=\"co2\">'\"%c\":%i\\n'</span>,<span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span>-<span class=\"nu0\">1</span>,A<span class=\"br0\">(</span>A&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span>'<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "NetRexx", "loc": 80, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx ************************************************************<br/>* 22.05.2013 Walter Pachl  translated from REXX<br/>**********************************************************************/</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>  <span class=\"kw1\">parse</span> arg dsn .<br/>  <span class=\"kw1\">if</span> dsn = <span class=\"st0\">''</span> <span class=\"kw3\">then</span><br/>    dsn = <span class=\"st0\">'test.txt'</span><br/>  cnt=<span class=\"nu0\">0</span><br/>  totChars=<span class=\"nu0\">0</span>                         <span class=\"coMULTI\">/*count of the total num of chars*/</span><br/>  totLetters=<span class=\"nu0\">0</span>                       <span class=\"coMULTI\">/*count of the total num letters.*/</span><br/>  indent=<span class=\"st0\">' '</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*used for indentation of output.*/</span><br/>  lines = scanFile<span class=\"br0\">(</span>dsn<span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> l_ = <span class=\"nu0\">1</span> to lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    line = lines<span class=\"br0\">[</span>l_<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'&gt;'</span>line<span class=\"st0\">'&lt;'</span> line.<span class=\"me0\">length</span>       <span class=\"coMULTI\">/* that's in test.txt            */</span><br/>    <span class=\"coMULTI\">/*<br/>    lrx=left_right(line)<br/>    Parse lrx leftx rightx<br/>    Say ' 'leftx<br/>    Say ' 'rightx<br/>    */</span><br/>    <span class=\"kw1\">loop</span> k=<span class=\"nu0\">1</span> for line.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*loop over characters           */</span><br/>      totChars=totChars+<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*Increment total number of chars*/</span><br/>      c=line.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*get character number k         */</span><br/>      cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>=cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>+<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*increment the character's count*/</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">end</span> l_<br/>\u00a0<br/>  w=totChars.<span class=\"me0\">length</span>                  <span class=\"coMULTI\">/*used for right-aligning counts.*/</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'file -----'</span> dsn <span class=\"st0\">\"----- has\"</span> lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"st0\">'records.'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'file -----'</span> dsn <span class=\"st0\">\"----- has\"</span> totChars <span class=\"st0\">'characters.'</span><br/>  <span class=\"kw1\">Loop</span> L=<span class=\"nu0\">0</span> to <span class=\"nu0\">255</span>                    <span class=\"coMULTI\">/* display nonzero letter counts */</span><br/>    c=l.<span class=\"kw6\">d2c</span>                          <span class=\"coMULTI\">/* the character in question     */</span><br/>    <span class=\"kw1\">if</span> cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> c.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span> <span class=\"coMULTI\">/* was found in the file  */</span><br/>                                     <span class=\"coMULTI\">/* and is a latin letter         */</span><br/>      <span class=\"kw1\">say</span> indent <span class=\"st0\">\"(Latin) letter \"</span> c <span class=\"st0\">'count:'</span> cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"coMULTI\">/* tell */</span><br/>      totLetters=totLetters+cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>   <span class=\"coMULTI\">/* increment number of letters   */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'file -----'</span> dsn <span class=\"st0\">\"----- has\"</span> totLetters <span class=\"st0\">'(Latin) letters.'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'                           other charactes follow'</span><br/>  other=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> m=<span class=\"nu0\">0</span> to <span class=\"nu0\">255</span>                    <span class=\"coMULTI\">/* now for non-letters           */</span><br/>    c=m.<span class=\"kw6\">d2c</span>                          <span class=\"coMULTI\">/* the character in question     */</span><br/>    y=c.<span class=\"kw6\">c2x</span>                          <span class=\"coMULTI\">/* the hex representation        */</span><br/>    <span class=\"kw1\">if</span> cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> c.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span> <span class=\"coMULTI\">/* was found in the file  */</span><br/>                                     <span class=\"coMULTI\">/* and is not a latin letter     */</span><br/>      other=other+cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>             <span class=\"coMULTI\">/* increment count               */</span><br/>      _=cnt<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>              <span class=\"coMULTI\">/* prepare output of count       */</span><br/>      <span class=\"kw1\">select</span>                         <span class=\"coMULTI\">/*make the character viewable.   */</span><br/>       <span class=\"kw3\">when</span> c<span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">' '</span> <span class=\"sy0\">|</span> m==<span class=\"nu0\">255</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> indent <span class=\"st0\">\"'\"</span>y<span class=\"st0\">\"'x character count:\"</span> _<br/>       <span class=\"kw3\">when</span> c==<span class=\"st0\">' '</span>          <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> indent <span class=\"st0\">\"blank character count:\"</span> _<br/>       <span class=\"kw3\">otherwise</span>                 <span class=\"kw1\">say</span> indent <span class=\"st0\">\"   \"</span> c <span class=\"st0\">'character count:'</span> _<br/>       <span class=\"kw3\">end</span><br/>     <span class=\"kw3\">end</span><br/>   <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'file -----'</span> dsn <span class=\"st0\">\"----- has\"</span> other <span class=\"st0\">'other characters.'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'file -----'</span> dsn <span class=\"st0\">\"----- has\"</span> totLetters <span class=\"st0\">'letters.'</span><br/>\u00a0<br/><span class=\"co1\">-- Read a file and return contents as a Rexx indexed string</span><br/>method scanFile<span class=\"br0\">(</span>dsn<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  fileLines = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">do</span><br/>    inFile = File<span class=\"br0\">(</span>dsn<span class=\"br0\">)</span><br/>    inFileScanner = Scanner<span class=\"br0\">(</span>inFile<span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> l_ = <span class=\"nu0\">1</span> while inFileScanner.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      fileLines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = l_<br/>      fileLines<span class=\"br0\">[</span>l_<span class=\"br0\">]</span> = inFileScanner.<span class=\"me0\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> l_<br/>    inFileScanner.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">catch</span> ex = FileNotFoundException<br/>    ex.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> fileLines</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import tables, os<br/>\u00a0<br/>var t = initCountTable[char]()<br/>var f = open(paramStr(1))<br/>for l in f.lines:<br/>  for c in l:<br/>    t.inc(c)<br/>echo t</pre>"}, {"lang": "Objeck", "loc": 32, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> IO<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      freqs <span class=\"sy0\">:=</span> CountLetters<span class=\"br0\">(</span><span class=\"st0\">\"filename.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> 'A'<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> 'Z'<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>i<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"=&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>freqs<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> 'A'<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> CountLetters<span class=\"br0\">(</span>filename <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>      freqs <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      reader <span class=\"sy0\">:=</span> FileReader<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">IsEOF</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        line <span class=\"sy0\">:=</span> reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> line<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          ch <span class=\"sy0\">:=</span> line<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>ch<span class=\"sy0\">-&gt;</span><span class=\"me1\">IsChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            index <span class=\"sy0\">:=</span> ch <span class=\"sy0\">-</span> 'A'<span class=\"sy0\">;</span><br/>            freqs<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> freqs<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> freqs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span>  <br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 21, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/\"><span class=\"kw5\">NSData</span></a> <span class=\"sy0\">*</span>data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/\"><span class=\"kw5\">NSData</span></a> dataWithContentsOfFile<span class=\"sy0\">:</span>@<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"kw4\">string</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> alloc<span class=\"br0\">]</span> initWithData<span class=\"sy0\">:</span>data encoding<span class=\"sy0\">:</span>NSUTF8StringEncoding<span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/\"><span class=\"kw5\">NSCountedSet</span></a> <span class=\"sy0\">*</span>countedSet <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/\"><span class=\"kw5\">NSCountedSet</span></a> alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    NSUInteger len <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">string</span> length<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>NSUInteger i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; len; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      unichar c <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw4\">string</span> characterAtIndex<span class=\"sy0\">:</span>i<span class=\"br0\">]</span>;<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCharacterSet_Class/\"><span class=\"kw5\">NSCharacterSet</span></a> letterCharacterSet<span class=\"br0\">]</span> characterIsMember<span class=\"sy0\">:</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span>countedSet addObject<span class=\"sy0\">:</span>@<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span>chr <span class=\"kw1\">in</span> countedSet<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%C =&gt;\u00a0%lu\"</span>, <span class=\"br0\">(</span>unichar<span class=\"br0\">)</span><span class=\"br0\">[</span>chr integerValue<span class=\"br0\">]</span>, <span class=\"br0\">[</span>countedSet countForObject<span class=\"sy0\">:</span>chr<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> base <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"sy0\">'</span>a<span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> arr <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"nu0\">26</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span> <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>lowercase<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_char\"><span class=\"kw3\">input_char</span></a> ic<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> ndx <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> c <span class=\"sy0\">-</span> base <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> ndx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span> <span class=\"sy0\">&amp;&amp;</span> ndx <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      arr<span class=\"sy0\">.</span><span class=\"br0\">(</span>ndx<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> arr<span class=\"sy0\">.</span><span class=\"br0\">(</span>ndx<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">25</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%c -&gt;\u00a0%d\\n\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int\"><span class=\"kw3\">char_of_int</span></a><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span> arr<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span></pre>"}, {"lang": "OxygenBasic", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>indexbase 0<br/>\u00a0<br/>sys a,e,i,c[255]<br/>\u00a0<br/>string s=getfile \"t.txt\"<br/>\u00a0<br/>e=len s<br/>\u00a0<br/>for i=1 to e<br/>  a=asc(s,i)<br/>  ++c(a)<br/>next<br/>\u00a0<br/>cr=chr(13)+chr(10)<br/>pr=\"Char Frequencies\" cr cr<br/>for i=32 to 255<br/>  pr+=chr(i) chr(9) c(i) cr<br/>next<br/>\u00a0<br/>print pr<br/>'putfile \"CharCount.txt\",pr<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">26</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>U<span class=\"sy0\">=</span><span class=\"kw1\">readvec</span><span class=\"br0\">(</span><span class=\"st0\">\"foo.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#U<span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>U<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#u<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">64</span><span class=\"sy0\">&amp;&amp;</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">91</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu1\">64</span><span class=\"br0\">]</span><span class=\"sy0\">++,</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">96</span><span class=\"sy0\">&amp;&amp;</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">123</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>u<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu1\">96</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>v</pre>"}, {"lang": "Pascal", "loc": 25, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> LetterFrequency<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  textFile<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span><br/>  character<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>  counter<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    counter<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  assign<span class=\"br0\">(</span>textFile<span class=\"sy1\">,</span> <span class=\"st0\">'a_text_file.txt'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  reset<span class=\"br0\">(</span>textFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eof</span><span class=\"br0\">(</span>textFile<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eoln</span><span class=\"br0\">(</span>textFile<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">read</span><span class=\"br0\">(</span>textFile<span class=\"sy1\">,</span> character<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>counter<span class=\"br0\">[</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>character<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">readln</span><span class=\"br0\">(</span>textFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> counter<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> counter<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$cnt</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <a href=\"http://perldoc.perl.org/functions/chop.html\"><span class=\"kw3\">chop</span></a><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">while</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$cnt</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">//</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"st_h\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'z'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">.</span><span class=\"re0\">&amp;ws</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> slurp<span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"me1\">Bag</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"sy0\">-*.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ws <span class=\"br0\">(</span><span class=\"re0\">$pair</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">~~</span> <span class=\"co2\">/\\n/</span><br/>    <span class=\"sy0\">??</span> <span class=\"br0\">(</span><span class=\"st_h\">'NEW LINE'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">!!</span> <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">~~</span> <span class=\"co2\">/\\s/</span><br/>    <span class=\"sy0\">??</span> <span class=\"br0\">(</span><span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">.</span><span class=\"me1\">uniname</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">!!</span> <span class=\"re0\">$pair</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">sequence lc = repeat(0,#7E)<br/>integer fn = open(command_line()[$],\"rb\"), ch<br/>while 1 do<br/>    ch = getc(fn)<br/>    if ch=-1 then exit end if<br/>    if ch&gt;=' ' and ch&lt;#7F then<br/>        lc[ch] += 1<br/>    end if<br/>end while<br/>close(fn)<br/>\u00a0<br/>for i=' ' to #7E do<br/>    if lc[i]!=0 then<br/>        printf(1,\"'%c':\u00a0%d%s\",{i,lc[i],iff(mod(i,32)=31?'\\n':'\\t')})<br/>    end if<br/>end for<br/>{} = wait_key()</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_count_values\"><span class=\"kw3\">array_count_values</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/file_get_contents\"><span class=\"kw3\">file_get_contents</span></a><span class=\"br0\">(</span><span class=\"re0\">$argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let Freq NIL<br/>   (in \"file.txt\"<br/>      (while (char) (accu 'Freq @ 1)) )<br/>   (sort Freq) )</pre>"}, {"lang": "PL/I", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>frequencies: procedure options (main);<br/>   declare tallies(26) fixed binary static initial ((26) 0);<br/>   declare alphabet character (26) static initial<br/>      ('ABCDEFGHIJKLMNOPQRSTUVWXYZ');<br/>   declare c character (1), i fixed binary;<br/>   declare in file;<br/>\u00a0<br/>   open file (in) title ('/LETTER.DAT,type(text),recsize(200)') input;<br/>\u00a0<br/>   on endfile (in) go to prepare_list;<br/>\u00a0<br/>   do while('1'b);<br/>      get file (in) edit (c) (a(1)); put edit (c) (a);<br/>      i = index(alphabet, c);<br/>      if i &gt; 0 then tallies(i) = tallies(i) + 1;<br/>   end;<br/>\u00a0<br/>prepare_list:<br/>   put skip list('Letter', 'Frequency');<br/>   do i = 1 to 26;<br/>      if tallies(i) &gt; 0 then<br/>         put skip list (substr(alphabet, i, 1), tallies(i));<br/>   end;<br/>end frequencies;</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> frequency <span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$string</span>.ToUpper<span class=\"br0\">(</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span><span class=\"kw3\">where</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-match</span> <span class=\"st0\">'[A-KL-Z]'</span><span class=\"br0\">}</span> <br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arr</span>.count<br/>    <span class=\"re0\">$arr</span> <span class=\"sy0\">|</span> <span class=\"kw2\">group</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>pscustomobject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span>letter <span class=\"sy0\">=</span> <span class=\"st0\">\"$($_.name)\"</span>; frequency  <span class=\"sy0\">=</span> <span class=\"st0\">\"$([math]::round($($_.Count/$n),5))\"</span>; count <span class=\"sy0\">=</span> <span class=\"st0\">\"$($_.count)\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> letter<br/><span class=\"br0\">}</span><br/><span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$($MyInvocation.MyCommand.Name )\"</span> <span class=\"co1\">#Put the name of your file here</span><br/>frequency $<span class=\"br0\">(</span><span class=\"kw1\">get-content</span> <span class=\"re0\">$file</span> <span class=\"sy0\">-</span>Raw<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 54, "block": "<pre class=\"prolog highlighted_source\">frequency<span class=\"br0\">(</span>File<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tread_file_to_codes<span class=\"br0\">(</span>File<span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we only keep alphabetic codes</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">include</span></a><span class=\"br0\">(</span>my_code_type<span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> LstCharCode<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% we translate char_codes into uppercase atoms.</span><br/>\tmaplist<span class=\"br0\">(</span>my_upcase<span class=\"sy4\">,</span> LstCharCode<span class=\"sy4\">,</span> LstChar<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% sort and pack the list</span><br/>\tmsort<span class=\"br0\">(</span>LstChar<span class=\"sy4\">,</span> SortLstChar<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpackList<span class=\"br0\">(</span>SortLstChar<span class=\"sy4\">,</span> Freq<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> Freq<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>my_write<span class=\"br0\">(</span><span class=\"br0\">[</span>Num<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tswritef<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"st_h\">'%3r'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Num<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'Number of\u00a0%w\u00a0:%w\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"sy4\">,</span> A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>my_code_type<span class=\"br0\">(</span>Code<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcode_type<span class=\"br0\">(</span>Code<span class=\"sy4\">,</span> alpha<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_upcase<span class=\"br0\">(</span>CharCode<span class=\"sy4\">,</span> UpChar<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">char_code</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"sy4\">,</span> CharCode<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tupcase_atom<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"sy4\">,</span> UpChar<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%\u00a0?- packList([a,a,a,b,c,c,c,d,d,e], L).</span><br/><span class=\"co1\">%  L = [[3,a],[1,b],[3,c],[2,d],[1,e]] .</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\u00a0?- packList(R,  [[3,a],[1,b],[3,c],[2,d],[1,e]]).</span><br/><span class=\"co1\">% R = [a,a,a,b,c,c,c,d,d,e] .</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>X<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>XRun<span class=\"sy5\">|</span>Packed<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\trun<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Rest<span class=\"sy4\">,</span> XRun<span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpackList<span class=\"br0\">(</span>RRest<span class=\"sy4\">,</span>Packed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy5\">|</span>LRest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>N1<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tN #<span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tN1 #<span class=\"sy6\">=</span> N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\trun<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span>LRest<span class=\"sy4\">,</span><span class=\"br0\">[</span>N<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span>RRest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tdif<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span>Other<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 41, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> countLetters<span class=\"br0\">(</span>Array letterCounts<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, textLine.s<span class=\"br0\">)</span><br/>  <span class=\"co1\">;counts only letters A -&gt; Z, uses index 0 of letterCounts() to keep a total of all counts</span><br/>  <span class=\"kw1\">Protected</span> i, lineLength <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>textLine<span class=\"br0\">)</span>, letter<br/>\u00a0<br/>  textLine <span class=\"sy0\">=</span> <span class=\"kw2\">UCase</span><span class=\"br0\">(</span>textLine<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> lineLength<br/>    letter <span class=\"sy0\">=</span> <span class=\"kw2\">Asc</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>textLine, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> 'A' <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> letter <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">And</span> letter <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">26</span><br/>      letterCounts<span class=\"br0\">(</span>letter<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">;tally individual letter count</span><br/>      letterCounts<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>      <span class=\"co1\">;increment total letter count</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> filename.s, <span class=\"kw2\">fileID</span>, i<br/>  filename <span class=\"sy0\">=</span> <span class=\"kw2\">OpenFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Select text file to examine\"</span>, <span class=\"st0\">\"*.txt\"</span>, <span class=\"st0\">\"Text (*.txt)|*.txt;|All files (*.*)|*.*\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">fileID</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"kw2\">fileID</span>, filename<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> letterCounts<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"co1\">;A - Z only, index 0 contains the total of all letter counts</span><br/>\u00a0<br/>    <span class=\"kw1\">Define</span> textLine.s<br/>    <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"kw2\">fileID</span><span class=\"br0\">)</span><br/>      textLine <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"kw2\">fileID</span><span class=\"br0\">)</span><br/>      countLetters<span class=\"br0\">(</span>letterCounts<span class=\"br0\">(</span><span class=\"br0\">)</span>, textLine<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"kw2\">fileID</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"File: \"</span> <span class=\"sy0\">+</span> filename <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Letter \u00a0%Freq  Count\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">26</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">64</span> <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"     \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">StrF</span><span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"sy0\">*</span> letterCounts<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> letterCounts<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>letterCounts<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Total letter count in file: \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>letterCounts<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">collections</span><span class=\"sy0\">,</span> <span class=\"kw3\">sys</span><br/>\u00a0<br/><span class=\"kw1\">def</span> filecharcount<span class=\"br0\">(</span>openfile<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw3\">collections</span>.<span class=\"me1\">Counter</span><span class=\"br0\">(</span>c <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> openfile <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> l<span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>f <span class=\"sy0\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>filecharcount<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">letter.frequency &lt;- function(filename)<br/>{<br/>    file &lt;- paste(readLines(filename), collapse = '')<br/>    chars &lt;- strsplit(file, NULL)[[1]]<br/>    summary(factor(chars))<br/>}</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define (letter-frequencies ip)<br/>  (count-samples<br/>   (port-&gt;list read-char ip)))<br/>\u00a0<br/>(letter-frequencies (open-input-string \"abaabdc\"))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 13, "block": "<pre class=\"text highlighted_source\">define count_letters use $words<br/>   { } as $wordHash    [ ] as $keys   [ ]  as $vals<br/>   $words each chr<br/>      dup $wordHash swap get 0 prefer 1 +   # stack: chr cnt<br/>      swap $wordHash swap set<br/>   $wordHash keys copy sort each<br/>      dup $keys push<br/>      $wordHash swap get $vals push<br/>   $keys $vals combine  print \"\\n\" print<br/>\u00a0<br/>\"test.dat\" as $file<br/>$file read as $all_data<br/>$all_data count_letters</pre>"}, {"lang": "REXX", "loc": 42, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts the occurrences of all characters in a file, &amp; note that*/</span><br/><span class=\"coMULTI\">/*     all Latin alphabet letters are uppercased for counting {Latin} letters.*/</span><br/><span class=\"coMULTI\">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</span><br/>abc = <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>     <span class=\"coMULTI\">/*define an (Latin or English) alphabet*/</span><br/>abcU= <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>     <span class=\"coMULTI\">/*define an uppercase version of  [\u2191]. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> fileID <span class=\"sy0\">.</span>                     <span class=\"coMULTI\">/*this last char isn't a middle dot: \u00b7 */</span><br/><span class=\"kw1\">if</span> fileID==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> fileID=<span class=\"st0\">'JUNK.TXT'</span>  <span class=\"coMULTI\">/*\u00bfnone specified? Then use the default*/</span><br/>totChars=<span class=\"nu0\">0</span>;    totLetters=<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*count of all chars and of all letters*/</span><br/>pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">18</span><span class=\"br0\">)</span>;    pad9=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">18</span>%2<span class=\"br0\">)</span> <span class=\"coMULTI\">/*used for the indentations of output. */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/*wouldn't it be neat to use \u0398 instead?*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>fileID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*read the file 'til the cows come home*/</span><br/>     rec=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>fileID<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*get a line/record from the input file*/</span><br/>                                       <span class=\"coMULTI\">/* [\u2193]  process all characters in  REC.*/</span><br/>       <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>rec<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*examine/count each of the characters.*/</span><br/>       totChars=totChars+<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*bump count of number of characters.  */</span><br/>       c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>rec,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"ccaff18c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>c+<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*Peel off a character; bump its count.*/</span><br/>       <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>c,<span class=\"st0\">'M'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*Not a Latin letter?  Get next char.*/</span><br/>       totLetters=totLetters+<span class=\"nu0\">1</span>         <span class=\"coMULTI\">/*bump the count for [Latin] letters.  */</span><br/>       <span class=\"kw2\">upper</span> c   <span class=\"coMULTI\">/* \u25c4\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u00ab\u25c4 uppercase a Latin character.*/</span><br/>       @<span class=\"sy0\">..</span><a class=\"__cf_email__\" data-cfemail=\"33500e73\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">..</span>c+<span class=\"nu0\">1</span>                     <span class=\"coMULTI\">/*bump the (Latin) letter's count.     */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                     <span class=\"coMULTI\">/*no Greek glyphs: \u03c0 \u0393 \u03a3 \u00b5 \u03b1 \u00df \u03a6 \u03b5 \u03b4 \u03c3 */</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span>                     <span class=\"coMULTI\">/*maybe we're \u00bd done by now, or maybe \u00ac*/</span><br/>                                           LL= <span class=\"st0\">'(Latin) letter'</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>totChars<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*used for right\u2500aligning the counts.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'file \u2500\u2500\u2500\u2500\u2500'</span> fileId <span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500 has\"</span> j-<span class=\"nu0\">1</span> <span class=\"st0\">'records and has'</span> totLetters LL<span class=\"st0\">\"s.\"</span>; <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">do</span> L=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">256</span>;    c=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*display all none\u2500zero letter counts. */</span><br/>  <span class=\"kw1\">if</span> @<span class=\"sy0\">..</span>c==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/*A zero count?  Then ignore character.*/</span><br/>  <span class=\"kw1\">say</span> pad9  LL<span class=\"st0\">' '</span>   c   <span class=\"st0\">\" (also\"</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>c,abc,abcU<span class=\"br0\">)</span><span class=\"st0\">')  count:'</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">..</span>c,w<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*L*/</span>                          <span class=\"coMULTI\">/*we may be in a rut, but not a ca\u00f1yon.*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"st0\">'file \u2500\u2500\u2500\u2500\u2500'</span>  fileId   <span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500 has\"</span>   totChars   <span class=\"st0\">'unique characters.'</span><br/><span class=\"kw1\">say</span><br/>     <span class=\"kw1\">do</span> #=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">256</span>;    y=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*display all none\u2500zero char counts.   */</span><br/>     <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>y==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*A zero count?  Then ignore character.*/</span><br/>     c=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>;  ch=c                   <span class=\"coMULTI\">/*C  is the character glyph of a char. */</span><br/>     <span class=\"kw1\">if</span> c<span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">' '</span> <span class=\"sy0\">|</span> #==<span class=\"nu0\">255</span>  <span class=\"kw3\">then</span> ch=      <span class=\"coMULTI\">/*don't show control characters or null*/</span><br/>     <span class=\"kw1\">if</span> c==<span class=\"st0\">' '</span>           <span class=\"kw3\">then</span> ch=<span class=\"st0\">'blank'</span>                <span class=\"coMULTI\">/*show a blank's name.*/</span><br/>     <span class=\"kw1\">say</span> pad <span class=\"kw6\">right</span><span class=\"br0\">(</span>ch,<span class=\"nu0\">5</span><span class=\"br0\">)</span>     <span class=\"st0\">\" ('\"</span><span class=\"kw6\">d2x</span><span class=\"br0\">(</span>#,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">\"'x  character count:\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>c,w<span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span>                       <span class=\"coMULTI\">/*255 isn't quite \u221e, but sometimes \u2219\u2219\u2219 */</span><br/><span class=\"kw1\">say</span>                                    <span class=\"coMULTI\">/*not a good place for dithering: \u2591\u2592\u2593\u2588 */</span><br/><span class=\"kw1\">say</span>  pad   pad9   <span class=\"st0\">'\u263c end\u2500of\u2500list \u263c'</span>    <span class=\"coMULTI\">/*show we are at the end of the list.  */</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're all done. \u263b*/</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>textData = read(\"C:\\Ring\\ReadMe.txt\")<br/>ln =len(textData)<br/>charCount = list(255)<br/>totCount = 0<br/>\u00a0<br/>for i =1 to ln<br/>    char = ascii(substr(textData,i,1))<br/>    charCount[char] = charCount[char] + 1<br/>    if char &gt; 31 totCount = totCount + 1 ok<br/>next<br/>\u00a0<br/>for i = 32 to 255<br/>    if charCount[i] &gt; 0 see char(i) + \" = \" + charCount[i] + \" \" + (charCount[i]/totCount)*100 + \"\u00a0%\" + nl ok<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> letter_frequency<span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>  letters = <span class=\"st0\">'a'</span> .. <span class=\"st0\">'z'</span><br/>  <span class=\"kw4\">File</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span> .<br/>       <span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"sy0\">//</span><span class=\"br0\">)</span> .<br/>       <span class=\"me1\">group_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>letter<span class=\"sy0\">|</span> letter.<span class=\"me1\">downcase</span><span class=\"br0\">}</span> .<br/>       <span class=\"kw3\">select</span>   <span class=\"br0\">{</span><span class=\"sy0\">|</span>key, val<span class=\"sy0\">|</span> letters.<span class=\"kw1\">include</span>? key<span class=\"br0\">}</span> .<br/>       <span class=\"me1\">collect</span>  <span class=\"br0\">{</span><span class=\"sy0\">|</span>key, val<span class=\"sy0\">|</span> <span class=\"br0\">[</span>key, val.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/>letter_frequency<span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>key, val<span class=\"sy0\">|</span> <span class=\"sy0\">-</span>val<span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> <span class=\"kw3\">p</span> pair<span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">open \"c:\\rbp101\\public\\textFile.txt\" for input as #f<br/>textData$ = input$(#f, lof( #f))<br/>ln =len(textData$)<br/>close #f<br/>\u00a0<br/>dim charCount( 255)<br/>\u00a0<br/>for i =1 to ln<br/>   char            = asc(mid$(textData$,i,1))<br/>   charCount(char) = charCount(char) + 1<br/>   if char &gt; 31 then totCount = totCount + 1<br/>next i<br/>\u00a0<br/>for i = 32 to 255<br/>if charCount(i) &gt; 0 then print \"Ascii:\";using(\"###\",i);\" char:\";chr$(i);\" Count:\";using(\"#######\",charCount(i));\" \";using(\"##.#\",(charCount(i) / totCount) * 100);\"%\"<br/>next i</pre>"}, {"lang": "Rust", "loc": 35, "block": "<pre class=\"text highlighted_source\">use std::collections::btree_map::BTreeMap;<br/>use std::{env, process};<br/>use std::io::{self, Read, Write};<br/>use std::fmt::Display;<br/>use std::fs::File;<br/>\u00a0<br/>fn main() {<br/>    let filename = env::args().nth(1)<br/>        .ok_or(\"Please supply a file name\")<br/>        .unwrap_or_else(|e| exit_err(e, 1));<br/>\u00a0<br/>    let mut buf = String::new();<br/>    let mut count = BTreeMap::new();<br/>\u00a0<br/>    File::open(&amp;filename)<br/>        .unwrap_or_else(|e| exit_err(e, 2))<br/>        .read_to_string(&amp;mut buf)<br/>        .unwrap_or_else(|e| exit_err(e, 3));<br/>\u00a0<br/>\u00a0<br/>    for c in buf.chars() {<br/>        *count.entry(c).or_insert(0) += 1;<br/>    }<br/>\u00a0<br/>    println!(\"Number of occurences per character\");<br/>    for (ch, count) in &amp;count {<br/>        println!(\"{:?}: {}\", ch, count);<br/>    }<br/>}<br/>\u00a0<br/>#[inline]<br/>fn exit_err&lt;T&gt;(msg: T, code: i32) -&gt;\u00a0! where T: Display {<br/>    writeln!(&amp;mut io::stderr(), \"{}\", msg).expect(\"Could not write to stderr\");<br/>    process::exit(code)<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> io.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> letterFrequencies<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>  fromFile<span class=\"br0\">(</span>filename<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span> groupBy <span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c<span class=\"br0\">)</span> mapValues <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use<span class=\"sy0\">-</span>modules <span class=\"br0\">(</span>ice<span class=\"sy0\">-</span><span class=\"nu0\">9</span> format<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq port table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> <span class=\"br0\">(</span><span class=\"kw1\">peek-char</span> port<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   table<br/>   <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq port <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char <span class=\"br0\">(</span><span class=\"kw1\">read-char</span> port<span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char char table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> char <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> table<span class=\"br0\">)</span> char<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> char <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>cadar table<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>#t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char char <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>format<span class=\"sy0\">-</span>table table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format #t <span class=\"st0\">\"~10s~10d~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>print<span class=\"sy0\">-</span>freq filename<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format<span class=\"sy0\">-</span>table <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq <span class=\"br0\">(</span><span class=\"kw1\">open-input-file</span> filename<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>print<span class=\"sy0\">-</span>freq <span class=\"st0\">\"letter-frequency.scm\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 22, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: charHash is hash [char] integer;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var charHash: numberOfChars is charHash.EMPTY_HASH;<br/>    var char: ch is ' ';<br/>  begin<br/>    ch\u00a0:= getc(IN);<br/>    while ch &lt;&gt; EOF do<br/>      if ch in numberOfChars then<br/>        incr(numberOfChars[ch]);<br/>      else<br/>        numberOfChars @:= [ch] 1;<br/>      end if;<br/>      ch\u00a0:= getc(IN);<br/>    end while;<br/>    for ch range sort(keys(numberOfChars)) do<br/>      writeln(ch &lt;&amp; \" \" &lt;&amp; numberOfChars[ch]);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func letter_frequency<span class=\"br0\">(</span><span class=\"kw4\">File</span> file<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    file.<span class=\"me1\">read</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span>.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:alpha</span>:<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">}</span> \\<br/>        .<span class=\"me1\">group_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>letter<span class=\"sy0\">|</span> letter.<span class=\"me1\">downcase</span><span class=\"br0\">}</span>    \\<br/>        .<span class=\"me1\">map_val</span>  <span class=\"br0\">{</span><span class=\"sy0\">|</span>_, val<span class=\"sy0\">|</span> val.<span class=\"me1\">len</span><span class=\"br0\">}</span>            \\<br/>        .<span class=\"me1\">sort_by</span>  <span class=\"br0\">{</span><span class=\"sy0\">|</span>_, val<span class=\"sy0\">|</span> <span class=\"sy0\">-</span>val<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var top = letter_frequency<span class=\"br0\">(</span><span class=\"kw4\">File</span><span class=\"br0\">(</span><span class=\"kw2\">__FILE__</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>top.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> say <span class=\"st0\">\"#{pair[0]}: #{pair[1]}\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "SIMPOL", "loc": 43, "block": "<pre class=\"text highlighted_source\">constant iBUFSIZE 500<br/>\u00a0<br/>function main(string filename)<br/>  fsfileinputstream fpi<br/>  integer e, i, aval, zval, cval<br/>  string s, buf, c<br/>  array chars<br/>\u00a0<br/>  e = 0<br/>  fpi <a class=\"__cf_email__\" data-cfemail=\"0b364b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> fsfileinputstream.new(filename, error=e)<br/>  if fpi <a class=\"__cf_email__\" data-cfemail=\"ba87fa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>= .nul<br/>    s = \"Error, file \"\"\" + filename + \"\"\" not found{d}{a}\"<br/>  else<br/>    chars <a class=\"__cf_email__\" data-cfemail=\"83bec3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> array.new()<br/>    aval = .charval(\"a\")<br/>    zval = .charval(\"z\")<br/>    i = 1<br/>    while i &lt;= 26<br/>      chars[i] = 0<br/>      i = i + 1<br/>    end while<br/>    buf = .lcase(fpi.getstring(iBUFSIZE, 1))<br/>    while not fpi.endofdata and buf &gt; \"\"<br/>      i = 1<br/>      while i &lt;= .len(buf)<br/>        c = .substr(buf, i, 1)<br/>        cval = .charval(c)<br/>        if cval &gt;= aval and cval &lt;= zval<br/>          chars[cval - aval + 1] = chars[cval - aval + 1] + 1<br/>        end if<br/>        i = i + 1<br/>      end while<br/>      buf = .lcase(fpi.getstring(iBUFSIZE, 1))<br/>    end while<br/>\u00a0<br/>    s = \"Character counts for \"\"\" + filename + \"\"\"{d}{a}\"<br/>    i = 1<br/>    while i &lt;= chars.count()<br/>      s = s + .char(aval + i - 1) + \": \" + .tostr(chars[i], 10) + \"{d}{a}\"<br/>      i = i + 1<br/>    end while<br/>  end if<br/>end function s</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> letterHistogram <span class=\"br0\">{</span>fileName<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Initialize table (in case of short texts without every letter)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">97</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>=<span class=\"nu0\">122</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> frequency<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Iterate over characters in file</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$fileName</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">read</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Count them if they're alphabetic</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is alpha <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> frequency<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>    <span class=\"co1\"># Print the histogram</span><br/>    parray frequency<br/><span class=\"br0\">}</span><br/>\u00a0<br/>letterHistogram the/sample.txt</pre>"}, {"lang": "TUSCRIPT", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>words = REQUEST (\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>\u00a0<br/>DICT letters create<br/>MODE {}<br/>COMPILE<br/>LOOP word=words<br/> letters=SPLIT (word,|\":?:\")<br/> LOOP letter=letters<br/>  DICT letters ADD/QUIET/COUNT letter<br/> ENDLOOP<br/>ENDLOOP<br/>ENDCOMPILE<br/>DICT letters unload letter,size,cnt<br/>\u00a0<br/>index    =DIGIT_INDEX (cnt)<br/>index    =REVERSE (index)<br/>letter   =INDEX_SORT (letter,index)<br/>cnt      =INDEX_SORT (cnt,index)<br/>frequency=JOIN (letter,\" --- \",cnt)<br/>\u00a0<br/>*{frequency}<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 9, "block": "<pre class=\"text highlighted_source\">@(do (defvar h (hash\u00a0:equal-based)))<br/>@(repeat)<br/>@(coll\u00a0:vars ())@\\<br/>  @{letter /[A-Za-z]/}@(filter\u00a0:upcase letter)@\\<br/>  @(do (inc [h letter 0]))@\\<br/>@(end)<br/>@(end)<br/>@(do (dohash (key value h)<br/>       (format t \"~a: ~a\\n\" key value)))</pre>"}, {"lang": "Vala", "loc": 22, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">Gee</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> filename <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> file <span class=\"sy0\">=</span> FileStream.<span class=\"me1\">open</span><span class=\"br0\">(</span>filename, <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span>\tcounter\t<span class=\"sy0\">=</span> <span class=\"kw3\">new</span> HashMap<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> line <span class=\"sy0\">=</span> file.<span class=\"me1\">read_line</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>line <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\tx <span class=\"sy0\">&lt;</span> line.<span class=\"me1\">length</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            counter<span class=\"br0\">[</span>line<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> counter<span class=\"br0\">[</span>line<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>        line <span class=\"sy0\">=</span> file.<span class=\"me1\">read_line</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> elem <span class=\"kw1\">in</span> counter.<span class=\"me1\">entries</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c occured\u00a0%d times<span class=\"es0\">\\n</span>\"</span>, elem.<span class=\"me1\">key</span>, elem.<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Sub LetterFrequency(fname)<br/>'count number of letters in text file \"fname\" (ASCII-coded)<br/>'note: we count all characters but print only the letter frequencies<br/>\u00a0<br/>Dim Freqs(255) As Long<br/>Dim abyte As Byte<br/>Dim ascal as Byte 'ascii code for lowercase a<br/>Dim ascau as Byte 'ascii code for uppercase a<br/>\u00a0<br/>'try to open the file<br/>On Error GoTo CantOpen<br/>Open fname For Input As #1<br/>On Error GoTo 0<br/>\u00a0<br/>'initialize<br/>For i = 0 To 255<br/>  Freqs(i) = 0<br/>Next i<br/>\u00a0<br/>'process file byte-per-byte<br/>While Not EOF(1)<br/> abyte = Asc(Input(1, #1))<br/> Freqs(abyte) = Freqs(abyte) + 1<br/>Wend<br/>Close #1<br/>\u00a0<br/>'add lower and upper case together and print result<br/>Debug.Print \"Frequencies:\"<br/>ascal = Asc(\"a\")<br/>ascau = Asc(\"A\")<br/>For i = 0 To 25<br/>  Debug.Print Chr$(ascal + i), Freqs(ascal + i) + Freqs(ascau + i)<br/>Next i<br/>Exit Sub<br/>\u00a0<br/>CantOpen:<br/>  Debug.Print \"can't find or read the file \"; fname<br/>  Close<br/>End Sub<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 26, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>filepath = <span class=\"st0\">\"SPECIFY FILE PATH HERE\"</span><br/>\u00a0<br/><span class=\"kw4\">Set</span> objfso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/><span class=\"kw4\">Set</span> objdict = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/><span class=\"kw4\">Set</span> objfile = objfso.OpenTextFile(filepath,1)<br/>\u00a0<br/>txt = objfile.ReadAll<br/>\u00a0<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(txt)<br/>\tchar = Mid(txt,i,1)<br/>\t<span class=\"kw3\">If</span> objdict.Exists(char) <span class=\"kw3\">Then</span><br/>\t\tobjdict.Item(char) = objdict.Item(char) + 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\tobjdict.Add char,1<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> key <span class=\"kw3\">In</span> objdict.Keys<br/>\tWScript.StdOut.WriteLine key &amp; <span class=\"st0\">\" = \"</span> &amp; objdict.Item(key)<br/><span class=\"kw3\">Next</span>\t<br/>\u00a0<br/>objfile.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objfso = <span class=\"kw5\">Nothing</span><br/><span class=\"kw4\">Set</span> objdict = <span class=\"kw5\">Nothing</span><br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 8, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"c:\\txt\\a_text_file.txt\"</span><span class=\"br0\">)</span><br/>Update<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"st0\">'A'</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">&lt;=</span><span class=\"st0\">'Z'</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Out_Reg<span class=\"br0\">(</span><span class=\"nu0\">103</span><span class=\"br0\">)</span> Char_Dump<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span>NOCR<span class=\"br0\">)</span> Out_Reg<span class=\"br0\">(</span>CLEAR<span class=\"br0\">)</span><br/>    #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Search<span class=\"br0\">(</span>@103<span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>    Message<span class=\"br0\">(</span>@103<span class=\"br0\">)</span> Num_Type<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Whitespace", "loc": 54, "block": "<pre class=\"whitespace highlighted_source\"><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 19, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int A(256), C, I;<br/>[for C:= 0 to 256-1 do A(C):= 0;<br/>repeat  C:= ChIn(1);            \\device 1 doesn't buffer nor echo chars<br/>        A(C):= A(C)+1;          \\count character<br/>until   C=\\EOF\\$1A;<br/>C:= 0;<br/>for I:= 0 to 128-1 do           \\only show 7-bit ASCII<br/>        [ChOut(0, \\tab\\9);<br/>        case C of<br/>          $0A: ChOut(6, $19);   \\line feed = down arrow<br/>          $0D: ChOut(6, $1B)    \\carriage return = left arrow<br/>        other  ChOut(6, C);     \\all other characters display on device 6<br/>        ChOut(0, ^ );<br/>        IntOut(0, A(C));        \\show count<br/>        C:= C+16;               \\columnar order<br/>        if (I&amp;7) = 7 then [CrLf(0);  C:= C-8*16+1];<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 16, "block": "<pre class=\"text highlighted_source\">fcn ccnt(textInBitBucket){<br/>   letters:=[\"a\"..\"z\"].pump(List().write,0); // array of 26 zeros<br/>   textInBitBucket.howza(0).pump(Void,'wrap(c){  // pump text as ints<br/>      if(97&lt;=c&lt;=122)     c-=97;<br/>      else if(65&lt;=c&lt;=90) c-=65;<br/>      else return(Void.Skip);<br/>      letters[c]+=1<br/>   });<br/>   sum:=letters.sum(); println(sum,\" letters\");<br/>   letters.enumerate().pump(List,'wrap([(c,n)]){<br/>      \"%s(%d:%d%)\".fmt((c+65).toChar(),n,n*100/sum)})<br/>   .concat(\",\").println();<br/>}<br/>\u00a0<br/>ccnt(Data(0,Int,\"This is a test\"));<br/>ccnt(File(\"dict.txt\").read());</pre>"}]}