{"task": "Mad_Libs", "blocks": [{"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>, String_Helper;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Madlib <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">use</span> String_Helper;<br/>\u00a0<br/>   Text: Vector\u00a0:= Get_Vector<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   M, N: Natural;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- search for templates and modify the text accordingly</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Text.<span class=\"me1\">First_Index</span> .. <span class=\"me1\">Text</span>.<span class=\"me1\">Last_Index</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">loop</span><br/>         Search_Brackets<span class=\"br0\">(</span>Text.<span class=\"me1\">Element</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"st0\">\"&lt;\"</span>, <span class=\"st0\">\"&gt;\"</span>, M, N<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> M=<span class=\"nu0\">0</span>; <span class=\"co1\">-- \"M=0\" means \"not found\"</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Replacement for \"</span> &amp; Text.<span class=\"me1\">Element</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span>M .. <span class=\"me1\">N</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"?\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">declare</span><br/>            Old: String\u00a0:= Text.<span class=\"me1\">Element</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span>M .. <span class=\"me1\">N</span><span class=\"br0\">)</span>;<br/>            New_Word: String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span>;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> I .. <span class=\"me1\">Text</span>.<span class=\"me1\">Last_Index</span> <span class=\"kw1\">loop</span><br/>               Text.<span class=\"me1\">Replace_Element</span><span class=\"br0\">(</span>J, Replace<span class=\"br0\">(</span>Text.<span class=\"me1\">Element</span><span class=\"br0\">(</span>J<span class=\"br0\">)</span>, Old, New_Word<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- write the text</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Text.<span class=\"me1\">First_Index</span> .. <span class=\"me1\">Text</span>.<span class=\"me1\">Last_Index</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Text.<span class=\"me1\">Element</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Madlib;</pre>"}, {"lang": "Aime", "loc": 33, "block": "<pre class=\"text highlighted_source\">file f;<br/>data b;<br/>list l;<br/>record r;<br/>\u00a0<br/>f.stdin;<br/>\u00a0<br/>o_text(\"Enter the blank line terminated story:\\n\");<br/>\u00a0<br/>while (0 &lt; f.b_line(b)) {<br/>    l.append(b);<br/>}<br/>\u00a0<br/>for (, b in l) {<br/>    integer p, q;<br/>    text s, t;<br/>\u00a0<br/>    while ((p = b.place('&lt;')) ^ -1) {<br/>        q = b.probe(p, '&gt;');<br/>        if (q ^ -1) {<br/>            s = bq_string(b, p + 1, q - 1);<br/>            b.erase(p, q);<br/>            if (!r.key(s)) {<br/>                o_(\"Replacement for `\", s, \"':\\n\");<br/>                f.line(t);<br/>                r.put(s, t);<br/>            }<br/>            b.paste(p, r[s]);<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>l.ucall(o_, 0, \"\\n\");</pre>"}, {"lang": "ALGOL 68", "loc": 128, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Mad Libs style story generation                                        #</span><br/>\u00a0<br/><span class=\"coMULTI\"># gets the story template from the file f. The template terminates with  #</span><br/><span class=\"coMULTI\"># a blank line                                                           #</span><br/><span class=\"coMULTI\"># The user is then promoted for the replacements for the &lt;word&gt; markers  #</span><br/><span class=\"coMULTI\"># and the story is printed with the substitutions made                   #</span><br/><span class=\"kw4\">PROC</span> story <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># a linked list of strings, used to hold the story template          #</span><br/>    <span class=\"kw4\">MODE</span> STRINGLIST <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> STRINGLIST next <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># a linked list of pairs of strings, used to hold the replacements   #</span><br/>    <span class=\"kw4\">MODE</span> REPLACEMENTLIST <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> word<br/>                                 <span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> replacement<br/>                                 <span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> REPLACEMENTLIST next<br/>                                 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># NIL reference for marking the end of a STRINGLIST                  #</span><br/>    <span class=\"kw4\">REF</span> STRINGLIST      nil stringlist      <span class=\"sy1\">=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># NIL reference for marking the end of a REPLACEMENTLIST             #</span><br/>    <span class=\"kw4\">REF</span> REPLACEMENTLIST nil replacementlist <span class=\"sy1\">=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\"># returns \"text\" with trailing spaces removed                        #</span><br/>    <span class=\"kw4\">OP</span> RTRIM <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> trim pos <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> text<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> text pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> text <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> text <span class=\"kw2\">WHILE</span> text<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"kw2\">DO</span><br/>            trim pos <span class=\"sy1\">:=</span> text pos <span class=\"sy1\">-</span> 1<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        text<span class=\"br0\">[</span> <span class=\"kw8\">LWB</span> text <span class=\"sy1\">:</span> trim pos <span class=\"br0\">]</span><br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># RTRIM #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># looks for word in the dictionary. If it is found, replacement is   #</span><br/>    <span class=\"coMULTI\"># set to its replacement and TRUE is returned. If word not present,  #</span><br/>    <span class=\"coMULTI\"># FALSE is returned - uses recursion                                 #</span><br/>    <span class=\"kw4\">PROC</span> find replacement <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> word<br/>                            <span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> replacement<br/>                            <span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> REPLACEMENTLIST dictionary<br/>                            <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>        <span class=\"kw2\">IF</span>   dictionary <span class=\"kw7\">IS</span> nil replacementlist<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"kw7\">FALSE</span><br/>        <span class=\"kw2\">ELIF</span> word <span class=\"kw6\">OF</span> dictionary <span class=\"sy1\">=</span> word<br/>        <span class=\"kw2\">THEN</span><br/>            replacement <span class=\"sy1\">:=</span> replacement <span class=\"kw6\">OF</span> dictionary<span class=\"sy1\">;</span><br/>            <span class=\"kw7\">TRUE</span><br/>        <span class=\"kw2\">ELSE</span><br/>            find replacement<span class=\"br0\">(</span> word<span class=\"sy1\">,</span> replacement<span class=\"sy1\">,</span> next <span class=\"kw6\">OF</span> dictionary <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># find replacement #</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\"># read the story template                                            #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># the result has a dummy element so \"next OF next\" is always valid   #</span><br/>    <span class=\"kw4\">REF</span> STRINGLIST     story <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> STRINGLIST <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"dummy\"</span><span class=\"sy1\">,</span> nil stringlist <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> <span class=\"kw4\">REF</span> STRINGLIST next  <span class=\"sy1\">:=</span> story<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># read the story template, terminates with a blank line              #</span><br/>\u00a0<br/>    <span class=\"kw2\">WHILE</span><br/>        <span class=\"kw3\">STRING</span> text<span class=\"sy1\">;</span><br/>        get<span class=\"br0\">(</span> f<span class=\"sy1\">,</span> <span class=\"br0\">(</span> text<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        text <span class=\"sy1\">:=</span> RTRIM text<span class=\"sy1\">;</span><br/>        text <span class=\"sy1\">/=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"coMULTI\"># add the line to the end of the list #</span><br/>        next <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> next <span class=\"kw6\">OF</span> next <span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> STRINGLIST <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> text<span class=\"sy1\">,</span> nil stringlist <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># find the &lt;word&gt; markers in the story and replace them with the     #</span><br/>    <span class=\"coMULTI\"># user's chosen text - we ignore the dummy element at the start      #</span><br/>\u00a0<br/>    <span class=\"kw4\">REF</span> REPLACEMENTLIST dictionary <span class=\"sy1\">:=</span> nil replacementlist<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> STRINGLIST      line       <span class=\"sy1\">:=</span> story<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">WHILE</span> line <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> line<span class=\"sy1\">;</span><br/>          line <span class=\"kw7\">ISNT</span> nil stringlist<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"coMULTI\"># have a line of text - replace all the &lt;word&gt; markers in it     #</span><br/>        <span class=\"kw3\">STRING</span> word<span class=\"sy1\">,</span> replacement<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> start pos<span class=\"sy1\">,</span> end pos<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy1\">,</span> start pos<span class=\"sy1\">,</span> text <span class=\"kw6\">OF</span> line <span class=\"br0\">)</span><br/>          <span class=\"kw16\">AND</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy1\">,</span> end pos<span class=\"sy1\">,</span>   text <span class=\"kw6\">OF</span> line <span class=\"br0\">)</span><br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"coMULTI\"># have a marker, get it from the line                        #</span><br/>            word <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> line <span class=\"br0\">)</span><span class=\"br0\">[</span> start pos <span class=\"sy1\">:</span> end pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># get its replacement                                        #</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> find replacement<span class=\"br0\">(</span> word<span class=\"sy1\">,</span> replacement<span class=\"sy1\">,</span> dictionary <span class=\"br0\">)</span><br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># we don't already have a replacement for word           #</span><br/>                <span class=\"coMULTI\"># get one from the user and add it to the dictionary     #</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"What should replace \"</span><span class=\"sy1\">,</span> word<span class=\"sy1\">,</span> <span class=\"st0\">\"? \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                read<span class=\"br0\">(</span> <span class=\"br0\">(</span> replacement<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                dictionary <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> REPLACEMENTLIST <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> word<span class=\"sy1\">,</span> replacement<span class=\"sy1\">,</span> dictionary <span class=\"br0\">)</span><br/>            <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># replace &lt;word&gt; with the replacement                        #</span><br/>            text <span class=\"kw6\">OF</span> line <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> line <span class=\"br0\">)</span><span class=\"br0\">[</span> <span class=\"sy1\">:</span> start pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>                          <span class=\"sy1\">+</span> replacement<br/>                          <span class=\"sy1\">+</span> <span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> line <span class=\"br0\">)</span><span class=\"br0\">[</span> end pos <span class=\"sy1\">+</span> 1 <span class=\"sy1\">:</span> <span class=\"br0\">]</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># print the story, ignoring the dummy element at the start           #</span><br/>\u00a0<br/>    line <span class=\"sy1\">:=</span> story<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">WHILE</span> line <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> line<span class=\"sy1\">;</span><br/>          line <span class=\"kw7\">ISNT</span> nil stringlist<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> text <span class=\"kw6\">OF</span> line<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># story #</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># we read the template from stand in (the keyboard unless it's been  #</span><br/>    <span class=\"coMULTI\"># redirected) we could prompt the user for a template file name,     #</span><br/>    <span class=\"coMULTI\"># open it and read that instead...                                   #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Please Enter the story template terminated by a blank line\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    story<span class=\"br0\">(</span> stand in <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 11, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw3\">set</span> theNoun <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"What is your noun?\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">set</span> thePerson <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"What is the person's name?\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">set</span> theGender <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"He or she? Please capitalize.\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">display dialog</span> thePerson <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" went for a walk in the park. \"</span> <span class=\"sy0\">&amp;</span> theGender <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" found a \"</span> <span class=\"sy0\">&amp;</span> theNoun <span class=\"sy0\">&amp;</span> <span class=\"st0\">\".  \"</span> <span class=\"sy0\">&amp;</span> thePerson <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" decided to take it home.\"</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/FileSelectFile.htm\"><span class=\"kw3\">FileSelectFile</span></a><span class=\"sy0\">,</span> filename<span class=\"sy0\">,</span> <span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptDir%</span><span class=\"sy0\">,</span> Select a Mad Libs template<span class=\"sy0\">,</span> <span class=\"sy0\">*.</span>txt<br/><span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a> <span class=\"co1\">; the user canceled the file selection</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> <span class=\"re0\">%filename%</span><br/>pos <span class=\"sy0\">:=</span> match <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">While</span> pos <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>contents<span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;[^&gt;]+&gt;\"</span><span class=\"sy0\">,</span> match<span class=\"sy0\">,</span> pos<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">strLen</span></a><span class=\"br0\">(</span>match<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"sy0\">,</span> repl<span class=\"sy0\">,</span> Mad Libs<span class=\"sy0\">,</span> <span class=\"kw6\">Enter</span> a replacement for <span class=\"re0\">%match%</span>:<br/>\t<span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a> <span class=\"co1\">; cancelled inputbox</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> contents<span class=\"sy0\">,</span> <span class=\"re0\">%match%</span><span class=\"sy0\">,</span> <span class=\"re0\">%repl%</span><span class=\"sy0\">,</span> All<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% contents</pre>"}, {"lang": "AWK", "loc": 36, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MAD_LIBS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"enter story:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>   story_arr<span class=\"br0\">[</span><span class=\"sy3\">++</span><span class=\"kw3\">nr</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span> <span class=\"sy3\">*</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      exit<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$0</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"sy2\">&lt;&gt;</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      L = <span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,<span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><br/>      R = <span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,<span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/>      changes_arr<span class=\"br0\">[</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,L,R<span class=\"sy3\">-</span>L<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"st0\">\"\"</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"sy2\">&lt;</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,<span class=\"re0\">$0</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,<span class=\"re0\">$0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"enter values for:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> changes_arr<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># prompt for replacement values</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"kw5\">getline</span> rec<br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"sy3\">+</span>$<span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,rec<span class=\"br0\">)</span><br/>      changes_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = rec<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>revised story:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">nr</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># print the story</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> changes_arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">gsub</span><span class=\"br0\">(</span>j,changes_arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span>,story_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,story_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 147, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define err(...) fprintf(stderr, ## __VA_ARGS__), exit(1)</span><br/>\u00a0<br/><span class=\"coMULTI\">/* We create a dynamic string with a few functions which make modifying<br/> * the string and growing a bit easier */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> alloc<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> length<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> dstr<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> dstr_space<span class=\"br0\">(</span>dstr <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> grow_amount<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">-&gt;</span>length <span class=\"sy0\">+</span> grow_amount <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">-&gt;</span>alloc<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> dstr_grow<span class=\"br0\">(</span>dstr <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    s<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>attempt <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"sy0\">,</span> s<span class=\"sy0\">-&gt;</span>alloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>attempt<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> s<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">=</span> attempt<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>dstr<span class=\"sy0\">*</span> dstr_init<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> to_allocate<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    dstr <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>dstr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> failure<span class=\"sy0\">;</span><br/>\u00a0<br/>    s<span class=\"sy0\">-&gt;</span>length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span>alloc  <span class=\"sy0\">=</span> to_allocate<span class=\"sy0\">;</span><br/>    s<span class=\"sy0\">-&gt;</span>data   <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>alloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> failure<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>failure<span class=\"sy0\">:</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> dstr_delete<span class=\"br0\">(</span>dstr <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>dstr<span class=\"sy0\">*</span> readinput<span class=\"br0\">(</span>FILE <span class=\"sy0\">*</span>fd<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> buffer_size <span class=\"sy0\">=</span> <span class=\"nu0\">4096</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span>buffer_size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    dstr <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> dstr_init<span class=\"br0\">(</span>buffer_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> failure<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> buffer_size<span class=\"sy0\">,</span> fd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dstr_space<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> buffer_size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dstr_grow<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">goto</span> failure<span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">+</span> s<span class=\"sy0\">-&gt;</span>length<span class=\"sy0\">,</span> buffer<span class=\"sy0\">,</span> buffer_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">-&gt;</span>length <span class=\"sy0\">+=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>failure<span class=\"sy0\">:</span><br/>    dstr_delete<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> dstr_replace_all<span class=\"br0\">(</span>dstr <span class=\"sy0\">*</span>story<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>replace<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>insert<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> replace_l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>replace<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> insert_l  <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>insert<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>start <span class=\"sy0\">=</span> story<span class=\"sy0\">-&gt;</span>data<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>start <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strstr.html\"><span class=\"kw3\">strstr</span></a><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> replace<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dstr_space<span class=\"br0\">(</span>story<span class=\"sy0\">,</span> insert_l <span class=\"sy0\">-</span> replace_l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>dstr_grow<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"br0\">)</span> err<span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate memory\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>insert_l <span class=\"sy0\">!=</span> replace_l<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>start <span class=\"sy0\">+</span> insert_l<span class=\"sy0\">,</span> start <span class=\"sy0\">+</span> replace_l<span class=\"sy0\">,</span> story<span class=\"sy0\">-&gt;</span>length <span class=\"sy0\">-</span><br/>                    <span class=\"br0\">(</span>start <span class=\"sy0\">+</span> replace_l <span class=\"sy0\">-</span> story<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"coMULTI\">/* Remember to null terminate the data so we can utilize it<br/>             * as we normally would */</span><br/>            story<span class=\"sy0\">-&gt;</span>length <span class=\"sy0\">+=</span> insert_l <span class=\"sy0\">-</span> replace_l<span class=\"sy0\">;</span><br/>            story<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">[</span>story<span class=\"sy0\">-&gt;</span>length<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> insert<span class=\"sy0\">,</span> insert_l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> madlibs<span class=\"br0\">(</span>dstr <span class=\"sy0\">*</span>story<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> buffer_size <span class=\"sy0\">=</span> <span class=\"nu0\">128</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> insert<span class=\"br0\">[</span>buffer_size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> replace<span class=\"br0\">[</span>buffer_size<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>start<span class=\"sy0\">,</span><br/>         <span class=\"sy0\">*</span>end <span class=\"sy0\">=</span> story<span class=\"sy0\">-&gt;</span>data<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>start <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>end<span class=\"sy0\">,</span> <span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>end <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> <span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> err<span class=\"br0\">(</span><span class=\"st0\">\"Malformed brackets in input\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* One extra for current char and another for nul byte */</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>replace<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end <span class=\"sy0\">-</span> start <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        replace<span class=\"br0\">[</span>end <span class=\"sy0\">-</span> start <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter value for field\u00a0%s: \"</span><span class=\"sy0\">,</span> replace<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>insert<span class=\"sy0\">,</span> buffer_size<span class=\"sy0\">,</span> stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> il <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>insert<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>insert<span class=\"br0\">[</span>il<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>            insert<span class=\"br0\">[</span>il<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        dstr_replace_all<span class=\"br0\">(</span>story<span class=\"sy0\">,</span> replace<span class=\"sy0\">,</span> insert<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    FILE <span class=\"sy0\">*</span>fd <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>fd<span class=\"br0\">)</span> err<span class=\"br0\">(</span><span class=\"st0\">\"Could not open file: '%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    dstr <span class=\"sy0\">*</span>story <span class=\"sy0\">=</span> readinput<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>story<span class=\"br0\">)</span> err<span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate memory\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    madlibs<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> story<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    dstr_delete<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 48, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  string story, input<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">//Loop</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"co1\">//Get a line from the user</span><br/>    getline<span class=\"br0\">(</span><span class=\"kw3\">cin</span>, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//If it's blank, break this loop</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>input <span class=\"sy1\">==</span> <span class=\"st0\">\"<span class=\"es1\">\\r</span>\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Add the line to the story</span><br/>    story <span class=\"sy2\">+</span><span class=\"sy1\">=</span> input<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//While there is a '&lt;' in the story</span><br/>  <span class=\"kw4\">int</span> begin<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>begin <span class=\"sy1\">=</span> story.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> string<span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"co1\">//Get the category from between '&lt;' and '&gt;'</span><br/>    <span class=\"kw4\">int</span> end <span class=\"sy1\">=</span> story.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    string cat <span class=\"sy1\">=</span> story.<span class=\"me1\">substr</span><span class=\"br0\">(</span>begin <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, end <span class=\"sy2\">-</span> begin <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Ask the user for a replacement</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Give me a \"</span> <span class=\"sy1\">&lt;&lt;</span> cat <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> input<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//While there's a matching category </span><br/>    <span class=\"co1\">//in the story</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>begin <span class=\"sy1\">=</span> story.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span> <span class=\"sy2\">+</span> cat <span class=\"sy2\">+</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> string<span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"co1\">//Replace it with the user's replacement</span><br/>      story.<span class=\"me1\">replace</span><span class=\"br0\">(</span>begin, cat.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">2</span>, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//Output the final story</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> story<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 71, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text.RegularExpressions</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MadLibs_RosettaCode<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> Program<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">string</span> madLibs <span class=\"sy0\">=</span> <br/><span class=\"st_h\">@\"Write a program to create a Mad Libs like story.<br/>The program should read an arbitrary multiline story from input.<br/>The story will be terminated with a blank line.<br/>Then, find each replacement to be made within the story, <br/>ask the user for a word to replace it with, and make all the replacements.<br/>Stop when there are none left and print the final story.<br/>The input should be an arbitrary story in the form:<br/>&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.<br/>Given this example, it should then ask for a name, <br/>a he or she and a noun (&lt;name&gt; gets replaced both times with the same value).\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tStringBuilder sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tRegex pattern <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Regex<span class=\"br0\">(</span><span class=\"st_h\">@\"\\&lt;(.*?)\\&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">string</span> storyLine<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">string</span> replacement<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>madLibs <span class=\"sy0\">+</span> Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span> <span class=\"sy0\">+</span> Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter a story: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// Continue to get input while empty line hasn't been entered.</span><br/>\t\t\t<span class=\"kw1\">do</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tstoryLine <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tsb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>storyLine <span class=\"sy0\">+</span> Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrEmpty</span><span class=\"br0\">(</span>storyLine<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrWhiteSpace</span><span class=\"br0\">(</span>storyLine<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// Retrieve only the unique regex matches from the user entered story.</span><br/>\t\t\tMatch nameMatch <span class=\"sy0\">=</span> pattern<span class=\"sy0\">.</span><span class=\"me1\">Matches</span><span class=\"br0\">(</span>sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">OfType</span><span class=\"sy0\">&lt;</span>Match<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;name&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> Match<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>nameMatch <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">do</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter value for: \"</span> <span class=\"sy0\">+</span> nameMatch<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\treplacement <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrEmpty</span><span class=\"br0\">(</span>replacement<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrWhiteSpace</span><span class=\"br0\">(</span>replacement<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tsb<span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span>nameMatch<span class=\"sy0\">.</span><span class=\"kw1\">Value</span>, replacement<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Match match <span class=\"kw1\">in</span> pattern<span class=\"sy0\">.</span><span class=\"me1\">Matches</span><span class=\"br0\">(</span>sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\treplacement <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"co1\">// Guarantee we get a non-whitespace value for the replacement</span><br/>\t\t\t\t<span class=\"kw1\">do</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter value for: \"</span> <span class=\"sy0\">+</span> match<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\treplacement <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrEmpty</span><span class=\"br0\">(</span>replacement<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrWhiteSpace</span><span class=\"br0\">(</span>replacement<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw4\">int</span> location <span class=\"sy0\">=</span> sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>match<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tsb<span class=\"sy0\">.</span><span class=\"kw1\">Remove</span><span class=\"br0\">(</span>location, match<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span>location, replacement<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span> <span class=\"sy0\">+</span> Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"--[ Here's your story! ]--\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 60, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> magic<span class=\"sy0\">.</span>rosetta<br/>    <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> <span class=\"kw1\">str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> mad<span class=\"sy0\">-</span>libs <br/>    <span class=\"st0\">\"Write a program to create a Mad Libs like story.<br/>     The program should read an arbitrary multiline story from input.<br/>     The story will be terminated with a blank line.<br/>     Then, find each replacement to be made within the story, <br/>     ask the user for a word to replace it with, and make all the replacements.<br/>     Stop when there are none left and print the final story.<br/>     The input should be an arbitrary story in the form:<br/>     &lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>     found a &lt;noun&gt;. &lt;name&gt; decided to take it home.<br/>     Given this example, it should then ask for a name, <br/>     a he or she and a noun (&lt;name&gt; gets replaced both times with the same value). \"</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <br/>        <span class=\"br0\">[</span>story <span class=\"br0\">(</span><span class=\"kw1\">do</span> <br/>            <span class=\"br0\">(</span>println <span class=\"st0\">\"Please enter story:\"</span><span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>story <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <br/>                <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>line <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> line<span class=\"br0\">)</span> <br/>                        <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> story<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> story line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         tokens <span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">re-seq</span> #<span class=\"st0\">\"&lt;[^&lt;&gt;]+&gt;\"</span> story<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         story<span class=\"sy0\">-</span>completed <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <br/>            <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>s t<span class=\"br0\">]</span> <br/>                <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>replace s t <span class=\"br0\">(</span><span class=\"kw1\">do</span> <br/>                    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"Substitute \"</span> t <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                    <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            story <br/>            tokens<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">str</span> <br/>            <span class=\"st0\">\"Here is your story:<span class=\"es0\">\\n</span>\"</span> <br/>            <span class=\"st0\">\"------------------------------------<span class=\"es0\">\\n</span>\"</span> <br/>            story<span class=\"sy0\">-</span>completed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Sample run at REPL:</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">; user=&gt; (magic.rosetta/mad-libs)</span><br/><span class=\"co1\">; Please enter story:</span><br/><span class=\"co1\">; One day &lt;who&gt; wake up at &lt;where&gt;.</span><br/><span class=\"co1\">; &lt;who&gt; decided to &lt;do something&gt;.</span><br/><span class=\"co1\">; While &lt;who&gt; &lt;do something&gt;, strange man</span><br/><span class=\"co1\">; appears and gave &lt;who&gt; a &lt;thing&gt;.</span><br/>\u00a0<br/><span class=\"co1\">; Substitute &lt;where&gt;:</span><br/><span class=\"co1\">; Sweden</span><br/><span class=\"co1\">; Substitute &lt;thing&gt;:</span><br/><span class=\"co1\">; Nobel prize</span><br/><span class=\"co1\">; Substitute &lt;who&gt;:</span><br/><span class=\"co1\">; Bob Dylan</span><br/><span class=\"co1\">; Substitute &lt;do something&gt;:</span><br/><span class=\"co1\">; walk</span><br/><span class=\"co1\">; Here is your story:</span><br/><span class=\"co1\">; ------------------------------------</span><br/><span class=\"co1\">; One day Bob Dylan wake up at Sweden.</span><br/><span class=\"co1\">; Bob Dylan decided to walk.</span><br/><span class=\"co1\">; While Bob Dylan walk, strange man</span><br/><span class=\"co1\">; appears and gave Bob Dylan a Nobel prize.</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 20, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Enter a story template, terminated by an empty line:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> story<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> line <span class=\"sy0\">=</span> stdin.<span class=\"me1\">readln</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        story <span class=\"sy0\">~=</span> line <span class=\"sy0\">~</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> re <span class=\"sy0\">=</span> regex<span class=\"br0\">(</span><span class=\"st0\">\"&lt;.+?&gt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"g\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> fields <span class=\"sy0\">=</span> story.<span class=\"me1\">match</span><span class=\"br0\">(</span>re<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a.<span class=\"me1\">hit</span><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>field<span class=\"sy0\">;</span> fields<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writef<span class=\"br0\">(</span><span class=\"st0\">\"Enter a value for '%s': \"</span><span class=\"sy0\">,</span> field<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        story <span class=\"sy0\">=</span> story.<span class=\"me1\">replace</span><span class=\"br0\">(</span>field<span class=\"sy0\">,</span> stdin.<span class=\"me1\">readln</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The story becomes:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 53, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>madlib<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">madlib</span><span class=\"br0\">(</span>standard_io<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">File</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">open</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"sy1\">,</span>read<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">madlib</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">madlib</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">parse</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Substitutions</span> <span class=\"sy3\">=</span> <span class=\"re3\">prompt</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">Substitutions</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">prompt</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Keys</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                        <span class=\"re5\">S</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">line</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Please name a ~s: \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                        <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"kw3\">tl</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Keys</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span><span class=\"re5\">Lines</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">Line</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                          <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">substitute</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span><span class=\"re5\">Line</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">substitute</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span><span class=\"re5\">Line</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Keys</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                        <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">replace</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>global<span class=\"sy1\">,</span><span class=\"br0\">{</span>return<span class=\"sy1\">,</span><span class=\"kw4\">list</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Line</span><span class=\"sy1\">,</span> <span class=\"re5\">Keys</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">parse</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">parse</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">parse</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span><span class=\"re5\">Lines</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">line</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"sy1\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        eof <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Lines</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Lines</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">Line</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">parse</span><span class=\"br0\">(</span><span class=\"re5\">Device</span><span class=\"sy1\">,</span> <span class=\"re3\">parse_line</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Line</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Line</span>|Lines<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">parse_line</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Line</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>match<span class=\"sy1\">,</span><span class=\"re5\">Matches</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">Line</span><span class=\"sy1\">,</span><span class=\"st0\">\"&lt;.*?&gt;\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>global<span class=\"sy1\">,</span><span class=\"br0\">{</span>capture<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">list</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">M</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                        <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"re5\">M</span><span class=\"sy1\">,</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Matches</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>Reads a story in template form, containing special entries such as &lt;dog's name&gt; amongst the text.\nYou will be invited to supply a replacement text for each such entry, as encountered,\nafter which the story will be presented with your substitutions made.\n</pre>"}, {"lang": "Go", "loc": 57, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"regexp\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    pat <span class=\"sy2\">:=</span> regexp<span class=\"sy3\">.</span>MustCompile<span class=\"sy1\">(</span><span class=\"st0\">\"&lt;.+?&gt;\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"usage: madlib &lt;story template file&gt;\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    b<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadFile<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    tmpl <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{}</span>          <span class=\"co1\">// patterns in order of appearance</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{}</span> <span class=\"co1\">// mapping from patterns to replacements</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pat<span class=\"sy3\">.</span>FindAllString<span class=\"sy1\">(</span>tmpl<span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> m<span class=\"sy1\">[</span>p<span class=\"sy1\">];</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">\"\"</span><br/>            s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Enter replacements:\"</span><span class=\"sy1\">)</span><br/>    br <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdin<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s: \"</span><span class=\"sy1\">,</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>            r<span class=\"sy1\">,</span> isPre<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> br<span class=\"sy3\">.</span>ReadLine<span class=\"sy1\">()</span><br/>            <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> isPre <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"you're not playing right.\u00a0:P\"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>            s <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>TrimSpace<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">))</span><br/>            <span class=\"kw1\">if</span> s <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  hmm?\"</span><span class=\"sy1\">)</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            m<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Your story:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>pat<span class=\"sy3\">.</span>ReplaceAllStringFunc<span class=\"sy1\">(</span>tmpl<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> m<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 52, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>stdout<span class=\"sy0\">,</span> hFlush<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Map <span class=\"kw1\">as</span> M <span class=\"br0\">(</span>Map<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a><span class=\"sy0\">,</span> insert<span class=\"sy0\">,</span> empty<span class=\"br0\">)</span><br/>\u00a0<br/>getLines <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>getLines <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">&lt;$&gt;</span> getLines<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    getLines<span class=\"sy0\">_</span> xs <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>      line <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>      <span class=\"kw1\">case</span> line <span class=\"kw1\">of</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> xs<br/>        <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> getLines<span class=\"sy0\">_</span> <span class=\"sy0\">$</span> line\u00a0: xs<br/>\u00a0<br/>prompt <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>prompt p <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> p <span class=\"sy0\">&gt;&gt;</span> hFlush stdout <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>\u00a0<br/>getKeyword <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>getKeyword <span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> getKeyword<span class=\"sy0\">_</span> xs <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    getKeyword<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> Nothing<br/>    getKeyword<span class=\"sy0\">_</span> <span class=\"br0\">(</span>x:<span class=\"st0\">'&gt;'</span>:<span class=\"sy0\">_</span><span class=\"br0\">)</span> acc <span class=\"sy0\">=</span> Just <span class=\"sy0\">$</span> <span class=\"st0\">'&lt;'</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span>\u00a0: x\u00a0: acc<span class=\"br0\">)</span><br/>    getKeyword<span class=\"sy0\">_</span> <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> acc <span class=\"sy0\">=</span> getKeyword<span class=\"sy0\">_</span> xs <span class=\"sy0\">$</span> x\u00a0: acc<br/>getKeyword <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> Nothing<br/>\u00a0<br/>parseText <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> M<span class=\"sy0\">.</span>Map <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>parseText <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>parseText line<span class=\"sy0\">@</span><span class=\"br0\">(</span>l:lx<span class=\"br0\">)</span> keywords <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> getKeyword line <span class=\"kw1\">of</span><br/>    Nothing <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>l\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> parseText lx keywords<br/>    Just keyword <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> rest <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> keyword<span class=\"br0\">)</span> line<br/>      <span class=\"kw1\">case</span> M<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> keyword keywords <span class=\"kw1\">of</span><br/>        Nothing <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>          newword <span class=\"sy0\">&lt;-</span> prompt <span class=\"sy0\">$</span> <span class=\"st0\">\"Enter a word for \"</span> <span class=\"sy0\">++</span> keyword <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span><br/>          rest<span class=\"sy0\">_</span> <span class=\"sy0\">&lt;-</span> parseText rest <span class=\"sy0\">$</span> M<span class=\"sy0\">.</span>insert keyword newword keywords<br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> newword <span class=\"sy0\">++</span> rest<span class=\"sy0\">_</span><br/>        Just knownword <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>          rest<span class=\"sy0\">_</span> <span class=\"sy0\">&lt;-</span> parseText rest keywords<br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> knownword <span class=\"sy0\">++</span> rest<span class=\"sy0\">_</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  nlines <span class=\"sy0\">&lt;-</span><br/>    <span class=\"kw1\">case</span> args <span class=\"kw1\">of</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">&lt;$&gt;</span> getLines<br/>      arg:<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> arg<br/>  nlines<span class=\"sy0\">_</span> <span class=\"sy0\">&lt;-</span> parseText nlines M<span class=\"sy0\">.</span>empty<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> nlines<span class=\"sy0\">_</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'general/misc/prompt regex'</span><br/>\u00a0<br/>madlib=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  smoutput <span class=\"st_h\">'Please enter the story template'</span><br/>  smoutput <span class=\"st_h\">'See http://rosettacode.org/wiki/Mad_Libs for details'</span><br/>  t=.<span class=\"st_h\">''</span><br/>  <span class=\"kw1\">while.</span>#l=.prompt <span class=\"st_h\">''</span> <span class=\"kw1\">do.</span> t=.t,l,LF <span class=\"kw1\">end.</span><br/>  repl=. ~.<span class=\"st_h\">'&lt;[^&lt;&gt;]*&gt;'</span> rxall t<br/>  <span class=\"re0\">for_bef.</span> repl <span class=\"kw1\">do.</span><br/>    aft=. prompt <span class=\"sy0\">(</span>}.}:;bef<span class=\"sy0\">)</span>,<span class=\"st_h\">': '</span><br/>    t=.t rplc bef,&lt;aft<br/>  <span class=\"kw1\">end.</span><br/>  t<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 69, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.StringTokenizer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MadLibs <br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tScanner s<span class=\"sy0\">=</span><span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a> storybuffer<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Accept lines until empty line is entered</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>line<span class=\"sy0\">=</span>s.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tstorybuffer.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Remove first space</span><br/>\t\tstorybuffer.<span class=\"me1\">delete</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> story<span class=\"sy0\">=</span>storybuffer.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">//Split</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringtokenizer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringTokenizer</span></a> str<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringtokenizer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringTokenizer</span></a><span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> word<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a> finalstory<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Store added elements</span><br/>\t\tMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>,String<span class=\"sy0\">&gt;</span> hash<span class=\"sy0\">=</span><span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>,String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>str.<span class=\"me1\">hasMoreTokens</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tword<span class=\"sy0\">=</span>str.<span class=\"me1\">nextToken</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>word.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> add<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"co1\">//Element prompt could be more than one word</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>word.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">//Build multi-word prompt</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> phrase<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\tphrase<span class=\"sy0\">+=</span>word<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>word<span class=\"sy0\">=</span>str.<span class=\"me1\">nextToken</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tword<span class=\"sy0\">=</span>phrase<span class=\"sy0\">+</span>word<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"co1\">//Account for element placeholder being immediately followed by . or , or whatever.</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>word.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>word.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">!=</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><br/>\t\t\t\t\tadd<span class=\"sy0\">=</span>word.<span class=\"me1\">substring</span><span class=\"br0\">(</span>word.<span class=\"me1\">lastIndexOf</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">//Store id of element in hash table</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> id<span class=\"sy0\">=</span>word.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,word.<span class=\"me1\">lastIndexOf</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> value<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>hash.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">//New element</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter a \"</span><span class=\"sy0\">+</span> id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tvalue<span class=\"sy0\">=</span>s.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>add<span class=\"sy0\">;</span><br/>\t\t\t\t\thash.<span class=\"me1\">put</span><span class=\"br0\">(</span>id, value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"co1\">//Previously entered element</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\tvalue<span class=\"sy0\">=</span>hash.<span class=\"me1\">get</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tword<span class=\"sy0\">=</span>value<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tfinalstory.<span class=\"me1\">append</span><span class=\"br0\">(</span>word<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>finalstory.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   ml <span class=\"sy1\">:=</span> <span class=\"st0\">\"&lt;name&gt; went for a walk in the park. There &lt;he or she&gt; _<br/>          found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"</span>  <span class=\"co1\"># sample</span><br/>   MadLib<span class=\"br0\">(</span>ml<span class=\"br0\">)</span>                                               <span class=\"co1\"># run it</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> strings<br/>\u00a0<br/><span class=\"kw1\">procedure</span> MadLib<span class=\"br0\">(</span>story<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Please provide words for the following:\"</span><span class=\"br0\">)</span><br/>   V <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   story <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>V<span class=\"sy1\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>v <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">set</span><span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\"\u00a0: \"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>      story <span class=\"sy1\">:=</span> replace<span class=\"br0\">(</span>story<span class=\"sy1\">,</span>v<span class=\"sy1\">,</span><span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Your MadLib follows:<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>story<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Julia", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function madlibs(template)<br/>    println(\"The story template is:\\n\", template)<br/>    fields = Set(getfield.(collect(eachmatch(r\"&lt;[^&gt;]+&gt;\", template)),\u00a0:match))<br/>    print(\"\\nInput a comma-separated list of words to replace the following items:\",<br/>          join(fields, \", \"), \"\\n -&gt; \")<br/>    values = split(readline(STDIN), \",\")<br/>    for (m, v) in zip(fields, values)<br/>        template = replace(template, m, v)<br/>    end<br/>    println(\"\\nThe story becomes:\\n\", template)<br/>end<br/>\u00a0<br/>const template = \"\"\"<br/>&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.<br/>\"\"\"<br/>\u00a0<br/>madlibs(template)</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Please enter a multi-line story template terminated by a blank line<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb  <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> break<br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"$line<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"co1\">// preserve line breaks</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> story <span class=\"sy0\">=</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// identify blanks</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"&lt;.*?&gt;\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blanks <span class=\"sy0\">=</span> r.<span class=\"me1\">findAll</span><span class=\"br0\">(</span>story<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">value</span> <span class=\"br0\">}</span>.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Please enter your replacements for the following 'blanks' in the story:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>blank in blanks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${blank.drop(1).dropLast(1)}\u00a0: \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> repl <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span><br/>        story <span class=\"sy0\">=</span> story.<span class=\"me1\">replace</span><span class=\"br0\">(</span>blank, repl<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>           <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>$story\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 14, "block": "<pre class=\"lb highlighted_source\">temp$<span class=\"sy0\">=</span><span class=\"st0\">\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt; found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"</span><br/>k <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> k<br/>    replace$   <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Replace:\"</span>;replace$;<span class=\"st0\">\" with:\"</span>; <span class=\"sy0\">:</span><span class=\"kw1\">input</span> with$<br/>    <span class=\"kw1\">while</span> k<br/>        temp$  <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> with$ <span class=\"sy0\">+</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span>k <span class=\"sy0\">+</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>replace$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        k      <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span>replace$<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><br/>    <span class=\"kw1\">wend</span><br/>k <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>temp$<span class=\"sy0\">,</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">print</span> temp$<br/><span class=\"kw1\">wait</span> <br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 11, "block": "<pre class=\"text highlighted_source\">text = Import[<br/>   InputString[\"Enter the filename of the story template:\"]];<br/>answers = <br/>  AssociationMap[<br/>   InputString[<br/>     \"Enter a\" &lt;&gt; <br/>      If[StringMatchQ[#, <br/>        \"&lt;\" ~~ Alternatives @@ Characters[\"aeiou\"] ~~ ___], \"n\", \"\"] &lt;&gt;<br/>       \" \" &lt;&gt; StringTrim[#, \"&lt;\" | \"&gt;\"] &lt;&gt; \":\"] &amp;, <br/>   Union[StringCases[text, RegularExpression[\"&lt;[^&gt;]+&gt;\"]]]];<br/>Print[StringReplace[text, Normal[answers]]];</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\">import rdstdin, re, algorithm, sequtils, strutils<br/>\u00a0<br/>#let templ = readLineFromStdin \"Enter your story: \"<br/>const templ = \"\"\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"\"\"<br/>\u00a0<br/>echo \"The story template is:\\n\", templ<br/>var fields = templ.findAll re\"&lt;[^&gt;]+&gt;\"<br/>fields.sort(cmp)<br/>fields = deduplicate fields<br/>let values = readLineFromStdin(\"\\nInput a comma-separated list of words to replace the following items\\n  \" &amp; fields.join(\",\") &amp; \": \").split(\",\")<br/>\u00a0<br/>var story = templ<br/>for f,v in zip(fields, values).items:<br/>  story = story.replace(f, v)<br/>echo \"\\nThe story becomes:\\n\\n\", story</pre>"}, {"lang": "Oforth", "loc": 11, "block": "<pre class=\"text highlighted_source\">: madlibs<br/>| story i word |<br/>\u00a0<br/>   \"\" while(System.Console askln dup notEmpty) [ + ] drop -&gt;story<br/>\u00a0<br/>   while(story indexOf('&lt;') dup -&gt;i notNull) [<br/>      story extract(i, story indexOfFrom('&gt;', i)) -&gt;word<br/>      story replaceAll(word, \"Word for\" . word . System.Console askln) -&gt;story<br/>      ]\t<br/>\u00a0<br/>   \"Your story\u00a0:\" . story println\u00a0;</pre>"}, {"lang": "Pascal", "loc": 107, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">Program</span> Madlib<span class=\"sy1\">;</span> <span class=\"kw1\">Uses</span> DOS<span class=\"sy1\">,</span> crt<span class=\"sy1\">;</span> <span class=\"coMULTI\">{See, for example, https://en.wikipedia.org/wiki/Mad_Libs}</span><br/><span class=\"coMULTI\">{Reads the lines of a story but which also contain &lt;xxx&gt; sequences. For each value of xxx,<br/> found as the lines of the story are read, a request is made for a replacement text.<br/> The story is then written out with the corresponding replacements made.}</span><br/><span class=\"coMULTI\">{Concocted by R.N.McLean (whom God preserve), Victoria university, NZ.}</span><br/> <span class=\"kw1\">Procedure</span> Croak<span class=\"br0\">(</span>gasp<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{A dying message.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">' Eurghfff...'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>Gasp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   HALT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span> inf<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span> <span class=\"coMULTI\">{Drivelstuff.}</span><br/> <span class=\"kw1\">const</span> StoryLimit <span class=\"sy3\">=</span> <span class=\"nu0\">66</span><span class=\"sy1\">;</span>TableLimit <span class=\"sy3\">=</span> <span class=\"nu0\">65</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Big enough.}</span><br/> <span class=\"kw1\">var</span> Story<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">StoryLimit</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Otherwise, use a temporary disc file.}</span><br/> <span class=\"kw1\">var</span> Target<span class=\"sy1\">,</span>Replacement<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">TableLimit</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span> StoryLines<span class=\"sy1\">,</span>TableCount<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Usage.}</span><br/>\u00a0<br/> <span class=\"kw1\">Function</span> Reading<span class=\"br0\">(</span><span class=\"kw1\">var</span> inf<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span><span class=\"kw1\">var</span> Aline<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Begin</span><br/>   Aline<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>   Reading<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw3\">eoln</span><span class=\"br0\">(</span>inf<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Reading<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">false</span>\t<span class=\"coMULTI\">{Agh! Why can't the read statement return true/false?}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>inf<span class=\"sy1\">,</span>Aline<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> Aline <span class=\"sy3\">=</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span> Reading<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw2\">false</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Specified that a blank line ends the story.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Inspect<span class=\"br0\">(</span>text<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">Forward</span><span class=\"sy1\">;</span><span class=\"coMULTI\">{I'd rather have multi-pass compilation than deal with this.}</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Table<span class=\"br0\">(</span>it<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Check it as a target, and obtain its replacement.}</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A stepper.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> TableCount <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> it <span class=\"sy3\">=</span> Target<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span> exit<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Already in the table?}</span><br/>   <span class=\"kw1\">if</span> TableCount &gt;<span class=\"sy3\">=</span> TableLimit <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Too many table entries!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{No. Room for another?}</span><br/>   inc<span class=\"br0\">(</span>TableCount<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t\t<span class=\"coMULTI\">{Yes.}</span><br/>   Target<span class=\"br0\">[</span>TableCount<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>it<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Include the &lt; and &gt; to preclude partial matches.}</span><br/>   <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Enter your text for '</span><span class=\"sy1\">,</span>it<span class=\"sy1\">,</span><span class=\"st0\">': '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Pretty please?}</span><br/>   <span class=\"kw3\">readln</span><span class=\"br0\">(</span>Replacement<span class=\"br0\">[</span>TableCount<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Thus.}</span><br/>   Inspect<span class=\"br0\">(</span>Replacement<span class=\"br0\">[</span>TableCount<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Enable full utilisation.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{of Table.}</span><br/>\u00a0<br/> <span class=\"kw1\">var</span> InDeep<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Counts inspection recursion.}</span><br/> <span class=\"kw1\">Procedure</span> Inspect<span class=\"br0\">(</span>text<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Look for &lt;...&gt; in text.}</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A stepper.}</span><br/>  <span class=\"kw1\">var</span> mark<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Fingers the latest &lt; in Aline.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   inc<span class=\"br0\">(</span>InDeep<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Supply an opportunity, and fear the possibilities.}</span><br/>   <span class=\"kw1\">if</span> InDeep &gt; <span class=\"nu0\">28</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Excessive recursion! Inspecting '</span> <span class=\"sy3\">+</span> text<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Length<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Now scan the line for trouble.}</span><br/>    <span class=\"kw1\">if</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;'</span> <span class=\"kw1\">then</span> mark<span class=\"sy1\">:</span><span class=\"sy3\">=</span>i\t<span class=\"coMULTI\">{Trouble starts here? Just mark its place.}</span><br/>     <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">'&gt;'</span> <span class=\"kw1\">then</span>\t<span class=\"coMULTI\">{Trouble ends here?}</span><br/>      Table<span class=\"br0\">(</span>copy<span class=\"br0\">(</span>text<span class=\"sy1\">,</span>mark<span class=\"sy1\">,</span>i <span class=\"sy3\">-</span> mark <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Deal with it.}</span><br/>   dec<span class=\"br0\">(</span>InDeep<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{I'm done.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{of Inspect.}</span><br/>\u00a0<br/> <span class=\"kw1\">Procedure</span> Swallow<span class=\"br0\">(</span>Aline<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Add a line to the story, and inspect it for &lt;...&gt;.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   <span class=\"kw1\">if</span> StoryLines &gt;<span class=\"sy3\">=</span> StoryLimit <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Too many lines in the story!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Suspicion forever.}</span><br/>   inc<span class=\"br0\">(</span>StoryLines<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Otherwise, this is safe.}</span><br/>   Story<span class=\"br0\">[</span>StoryLines<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>Aline<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{So save another line.}</span><br/>   Inspect<span class=\"br0\">(</span>Aline<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Look for any &lt;...&gt; inclusions.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{of Swallow.}</span><br/>\u00a0<br/> <span class=\"kw1\">var</span> Rolling<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Counts rolling rolls.}</span><br/> <span class=\"kw1\">Procedure</span> Roll<span class=\"br0\">(</span>bumf<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Write a line, with amendments.}</span><br/>  <span class=\"kw1\">var</span> last<span class=\"sy1\">,</span>mark<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Fingers for the scan.}</span><br/>  <span class=\"kw1\">var</span> hit<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Copied once.}</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy1\">,</span>it<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Steppers.}</span><br/>  <span class=\"kw1\">label</span> hic<span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Oh dear.}</span><br/>  <span class=\"kw1\">Begin</span><br/>   inc<span class=\"br0\">(</span>Rolling<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Here I go.}</span><br/>   <span class=\"kw1\">if</span> Rolling &gt; <span class=\"nu0\">28</span> <span class=\"kw1\">then</span> Croak<span class=\"br0\">(</span><span class=\"st0\">'Excessive recursion! Rolling '</span> <span class=\"sy3\">+</span> bumf<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Self-expansion is out.}</span><br/>   last<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Where the previous text ended.}</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Length<span class=\"br0\">(</span>bumf<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Scan the text.}</span><br/>    <span class=\"kw1\">if</span> bumf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;'</span> <span class=\"kw1\">then</span> mark<span class=\"sy1\">:</span><span class=\"sy3\">=</span>i\t<span class=\"coMULTI\">{Remember where a &lt;...&gt; starts.}</span><br/>     <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> bumf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"st0\">'&gt;'</span> <span class=\"kw1\">then</span>\t\t<span class=\"coMULTI\">{So that when the stopper is found,}</span><br/>      <span class=\"kw1\">begin</span>\t\t\t\t<span class=\"coMULTI\">{It can be recognised.}</span><br/>       <span class=\"kw3\">Write</span><span class=\"br0\">(</span>copy<span class=\"br0\">(</span>bumf<span class=\"sy1\">,</span>last <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>mark <span class=\"sy3\">-</span> last <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Text up to the &lt;.}</span><br/>       hit<span class=\"sy1\">:</span><span class=\"sy3\">=</span>copy<span class=\"br0\">(</span>bumf<span class=\"sy1\">,</span>mark<span class=\"sy1\">,</span>i <span class=\"sy3\">-</span> mark <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Grab this once.}</span><br/>       <span class=\"kw1\">for</span> it<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> TableCount <span class=\"kw1\">do</span>\t<span class=\"coMULTI\">{Search my table.}</span><br/>        <span class=\"kw1\">if</span> Target<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy3\">=</span> hit <span class=\"kw1\">then</span>\t<span class=\"coMULTI\">{A match?}</span><br/>         <span class=\"kw1\">begin</span>\t\t\t\t<span class=\"coMULTI\">{Yes!}</span><br/>          Roll<span class=\"br0\">(</span>Replacement<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Write this instead.}</span><br/>          <span class=\"kw1\">goto</span> hic<span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{There is no \"exit loop\" style statement.}</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t\t\t\t<span class=\"coMULTI\">{\"Exit\" exits the procedure or function.}</span><br/>   hic<span class=\"sy1\">:</span>last<span class=\"sy1\">:</span><span class=\"sy3\">=</span>i<span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Advance the trailing finger.}</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{On to the next character.}</span><br/>   <span class=\"kw3\">Write</span><span class=\"br0\">(</span>copy<span class=\"br0\">(</span>bumf<span class=\"sy1\">,</span>last <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>Length<span class=\"br0\">(</span>bumf<span class=\"br0\">)</span> <span class=\"sy3\">-</span> last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Text after the last &gt;, possibly null.}</span><br/>   dec<span class=\"br0\">(</span>Rolling<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{I'm done.}</span><br/>   <span class=\"kw1\">if</span> Rolling &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">WriteLn</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{And if this is the first level, add a end-of-line.}</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{of Roll.}</span><br/>\u00a0<br/> <span class=\"kw1\">var</span> inname<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{For a file name.}</span><br/> <span class=\"kw1\">var</span> Aline<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A scratchpad.}</span><br/> <span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{A stepper.}</span><br/> <span class=\"kw1\">BEGIN</span><br/>  InDeep<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{No inspections yet.}</span><br/>  Rolling<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{No output.}</span><br/>  inname<span class=\"sy1\">:</span><span class=\"sy3\">=</span>ParamStr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Perhaps the file name is specified as a run-time parameter.}</span><br/>  <span class=\"kw1\">if</span> inname <span class=\"sy3\">=</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span> inname<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"st0\">'Madlib.txt'</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{If not, this will do.}</span><br/>  Assign<span class=\"br0\">(</span>inf<span class=\"sy1\">,</span>inname<span class=\"br0\">)</span><span class=\"sy1\">;</span> Reset<span class=\"br0\">(</span>inf<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"coMULTI\">{Open the input file.}</span><br/>  StoryLines<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span> TableCount<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>\t\t\t<span class=\"coMULTI\">{Prepare the counters.}</span><br/>  <span class=\"kw1\">while</span> reading<span class=\"br0\">(</span>inf<span class=\"sy1\">,</span>Aline<span class=\"br0\">)</span> <span class=\"kw1\">do</span> Swallow<span class=\"br0\">(</span>Aline<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Read and inspect the story.}</span><br/>  close<span class=\"br0\">(</span>inf<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t\t\t<span class=\"coMULTI\">{Finished with input.}</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> StoryLines <span class=\"kw1\">do</span> Roll<span class=\"br0\">(</span>Story<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"coMULTI\">{Write the amended story.}</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$template</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> <span class=\"kw1\">my</span> <span class=\"re0\">$IN</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;'</span><span class=\"sy0\">,</span> <span class=\"re0\">$template</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"co5\">$!</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$story</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"co5\">$/</span> <span class=\"sy0\">;</span> <span class=\"sy0\">&lt;</span><span class=\"re0\">$IN</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%blanks</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a> <span class=\"re0\">$blanks</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> <span class=\"re0\">$story</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/&lt;(.*?)&gt;/g</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$blank</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%blanks</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$blank: \"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$replacement</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$blanks</span><span class=\"br0\">{</span><span class=\"re0\">$blank</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$replacement</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$story</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/&lt;(.*?)&gt;/$blanks{$1}/g</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$story</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">print</span> S<span class=\"sy0\">:</span>g<span class=\"br0\">[</span> <span class=\"st_h\">'&lt;'</span> <span class=\"br0\">(</span><span class=\"sy0\">.*?</span><span class=\"br0\">)</span> <span class=\"st_h\">'&gt;'</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">%</span><span class=\"sy0\">.</span><span class=\"br0\">{</span><span class=\"co3\">$0</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> prompt <span class=\"st0\">\"$0? \"</span> <span class=\"kw1\">given</span> slurp<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">string mlfile = \"\", -- eg story.txt<br/>mltxt = iff(length(mlfile)?join(read_lines(mlfile),\"\\n\"):\"\"\"<br/>&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.<br/>\"\"\")<br/>\u00a0<br/>sequence strings = {}, replacements = {}<br/>integer startpos, endpos=1<br/>while 1 do<br/>    startpos = find('&lt;',mltxt,endpos)<br/>    if startpos=0 then exit end if<br/>    endpos = find('&gt;',mltxt,startpos)<br/>    if endpos=0 then\u00a0?\"missing &gt;\" abort(0) end if<br/>    string s = mltxt[startpos..endpos]<br/>    if not find(s,strings) then<br/>        strings = append(strings,s)<br/>        replacements = append(replacements,prompt_string(sprintf(\"Enter replacement for\u00a0%s:\",{s})))<br/>    end if<br/>end while<br/>puts(1,substitute_all(mltxt,strings,replacements))</pre>"}, {"lang": "Pike", "loc": 84, "block": "<pre class=\"pike highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>pike<br/>\u00a0<br/>Stdio.<span class=\"me1\">Readline</span> readln <span class=\"sy0\">=</span> Stdio.<span class=\"me1\">Readline</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>void print_help<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span>#<span class=\"st0\">\"Write a Story.<br/>\u00a0<br/>Names or objects in the story can be made variable by <br/>referencing them as &lt;person&gt; &lt;object&gt;, etc.<br/>End the story with an empty line.<br/>\u00a0<br/>Type show to read the story. You will be asked to fill the variables, <br/>and the the story will be shown.<br/>\u00a0<br/>Type help to see this message again.<br/>Type exit to quit.<br/>\u00a0<br/>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void add_line<span class=\"br0\">(</span>string input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array variables <span class=\"sy0\">=</span> parse_for_variables<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Found variables:\u00a0%{<span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span>\u00a0%}<span class=\"es0\">\\n</span>\"</span>, variables<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    story <span class=\"sy0\">+=</span> input<span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>array parse_for_variables<span class=\"br0\">(</span>string input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array vars <span class=\"sy0\">=</span> Array.<span class=\"me1\">flatten</span><span class=\"br0\">(</span>array_sscanf<span class=\"br0\">(</span>input, <span class=\"st0\">\"%*[^&lt;&gt;]%{&lt;%[^&lt;&gt;]&gt;%*[^&lt;&gt;]%}%*[^&lt;&gt;]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> Array.<span class=\"me1\">uniq</span><span class=\"br0\">(</span>vars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>mapping fill_variables<span class=\"br0\">(</span>string story<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array vars <span class=\"sy0\">=</span> parse_for_variables<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mapping variables <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>vars<span class=\"sy0\">;;</span> string name<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        string value <span class=\"sy0\">=</span> readln<span class=\"sy0\">-</span>&gt;read<span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"Please name a%s\u00a0%s: \"</span>, <span class=\"br0\">(</span>&lt;'a','e','i','o','u'&gt;<span class=\"br0\">)</span><span class=\"br0\">[</span>name<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"st0\">\"\"</span>:<span class=\"st0\">\"n\"</span>, name<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>            variables<span class=\"br0\">[</span><span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">+</span>name<span class=\"sy0\">+</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> variables<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void show_story<span class=\"br0\">(</span>string story<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    mapping variables <span class=\"sy0\">=</span> fill_variables<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span>replace<span class=\"br0\">(</span>story, variables<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void do_exit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>mapping functions <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"st0\">\"help\"</span>:print_help,<br/>                       <span class=\"st0\">\"show\"</span>:show_story,<br/>                       <span class=\"st0\">\"exit\"</span>:do_exit,<br/>                     <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>string story <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>void main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Stdio.<span class=\"me1\">Readline</span>.<span class=\"me1\">History</span> readline_history <span class=\"sy0\">=</span> Stdio.<span class=\"me1\">Readline</span>.<span class=\"me1\">History</span><span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    readln<span class=\"sy0\">-</span>&gt;enable_history<span class=\"br0\">(</span>readline_history<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    string prompt<span class=\"sy0\">=</span><span class=\"st0\">\"&gt; \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    print_help<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        string input<span class=\"sy0\">=</span>readln<span class=\"sy0\">-</span>&gt;read<span class=\"br0\">(</span>prompt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>input<span class=\"br0\">)</span><br/>            exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>input <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>            show_story<span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>functions<span class=\"br0\">[</span>input<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            functions<span class=\"br0\">[</span>input<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> add_line<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(de madlib (Template)<br/>   (setq Template (split (chop Template) \"&lt;\" \"&gt;\"))<br/>   (let (Reps () Text ())<br/>      (while Template<br/>         (push 'Text (pop 'Template))<br/>         (let? Rep (mapcar pack (split (pop 'Template) \":\"))<br/>            (if (assoc (car Rep) Reps)<br/>               (push 'Text (cdr @))<br/>               (until (and<br/>                         (prin \"Gimme a(n) \" (or (cadr Rep) (car Rep)) \": \")<br/>                         (clip (in NIL (line)))<br/>                         (push 'Text @)<br/>                         (push 'Reps (cons (car Rep) @)) )<br/>                  (prinl \"Huh? I got nothing.\") ) ) ) )<br/>      (prinl (need 30 '-))<br/>      (prinl (flip Text)) ) )<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 71, "block": "<pre class=\"text highlighted_source\">(stringrange, stringsize):                            /* 2 Nov. 2013 */<br/>Mad_Libs: procedure options (main);<br/>   declare (line, left, right) character (100) varying;<br/>   declare true bit(1) value ('1'b), false bit (1) value ('0'b);<br/>   declare name    character (20) varying, seen_name    bit (1) initial (false);<br/>   declare pronoun character (20) varying, seen_pronoun bit (1) initial (false);<br/>   declare noun    character (20) varying, seen_noun    bit (1) initial (false);<br/>   declare replaced_all bit (1);<br/>   declare in file input;<br/>\u00a0<br/>   open file (in) title ('/MADLIBS.DAT,type(text),recsize(100)');<br/>\u00a0<br/>   do forever;<br/>      get file (in) edit (line) (L);<br/>      if line = '' then leave;<br/>\u00a0<br/>      do until (replaced_all);<br/>         replaced_all = true;<br/>         if index(line, '&lt;name&gt;') &gt; 0 then<br/>            if seen_name then<br/>               do until (index(line, '&lt;name&gt;') = 0);<br/>                  call split(line, '&lt;name&gt;', left, right);<br/>                  line = left || name || right;<br/>                  replaced_all = false;<br/>               end;<br/>            else<br/>               do;<br/>                  put skip list ('Please type a name:');<br/>                  get edit (name) (L);<br/>                  seen_name = true; replaced_all = false;<br/>               end;<br/>         if index(line, '&lt;he or she&gt;') &gt; 0 then<br/>            if seen_pronoun then<br/>               do until (index(line, '&lt;he or she&gt;') = 0);<br/>                  call split(line, '&lt;he or she&gt;', left, right);<br/>                  line = left || pronoun || right;<br/>                  replaced_all = false;<br/>               end;<br/>            else<br/>               do;<br/>                   put skip list ('Please type a pronoun (he or she):');<br/>                   get edit (pronoun) (L);<br/>                   seen_pronoun = true; replaced_all = false;<br/>               end;<br/>         if index(line, '&lt;noun&gt;') &gt; 0 then<br/>            if seen_noun then<br/>               do until (index(line, '&lt;noun&gt;') = 0);<br/>                  call split(line, '&lt;noun&gt;', left, right);<br/>                  line = left || noun || right;<br/>                  replaced_all = false;<br/>               end;<br/>            else<br/>               do;<br/>                  put skip list ('Please type a noun:');<br/>                  get edit (noun) (L);<br/>                  seen_noun = true; replaced_all = false;<br/>               end;<br/>         end;<br/>      put skip list (line);<br/>   end;<br/>\u00a0<br/>split: procedure (line, text, Left, Right);<br/>   declare (line, text, left, right) character (*) varying;<br/>   declare i fixed binary;<br/>\u00a0<br/>   i = index(line, text);<br/>   left  = substr(line, 1, i-1);<br/>   right = substr(line, i+length(text), length(line) - (i + length(text)) + 1 );<br/>end split;<br/>\u00a0<br/>end Mad_Libs;</pre>"}, {"lang": "PowerShell", "loc": 67, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> New<span class=\"sy0\">-</span>MadLibs<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span>DefaultParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">'None'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>AllowEmptyString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span> ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">'Male'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Male</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span> ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">'Female'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Female</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>AllowEmptyString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Item</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"re0\">$Name</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Name</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Culture</span><span class=\"br0\">)</span>.TextInfo.ToTitleCase<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Read-Host</span> <span class=\"kw5\">-Prompt</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>Enter a name\"</span><span class=\"br0\">)</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Name</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Culture</span><span class=\"br0\">)</span>.TextInfo.ToTitleCase<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$Name</span><span class=\"br0\">)</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Male</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$pronoun</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"He\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$Female</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$pronoun</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"She\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$title</span>   <span class=\"sy0\">=</span> <span class=\"st0\">\"Gender\"</span><br/>        <span class=\"re0\">$message</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Select $Name's Gender\"</span><br/>        <span class=\"re0\">$_male</span>   <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Management.Automation.Host.ChoiceDescription <span class=\"st0\">\"&amp;Male\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Selects male gender.\"</span><br/>        <span class=\"re0\">$_female</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Management.Automation.Host.ChoiceDescription <span class=\"st0\">\"&amp;Female\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Selects female gender.\"</span><br/>        <span class=\"re0\">$options</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Management.Automation.Host.ChoiceDescription<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$_male</span><span class=\"sy0\">,</span> <span class=\"re0\">$_female</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$result</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$host</span>.UI.PromptForChoice<span class=\"br0\">(</span><span class=\"re0\">$title</span><span class=\"sy0\">,</span> <span class=\"re0\">$message</span><span class=\"sy0\">,</span> <span class=\"re0\">$options</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\u00a0<br/>        <span class=\"kw3\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"re0\">$pronoun</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"He\"</span><span class=\"br0\">}</span><br/>            <span class=\"nu0\">1</span> <span class=\"br0\">{</span><span class=\"re0\">$pronoun</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"She\"</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"re0\">$Item</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Item</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span> <span class=\"kw5\">-Prompt</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>Enter an item\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"st0\">\"<span class=\"es0\">`n</span>{0} went for a walk in the park. {1} found a {2}. {0} decided to take it home.<span class=\"es0\">`n</span>\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$Name</span><span class=\"sy0\">,</span> <span class=\"re0\">$pronoun</span><span class=\"sy0\">,</span> <span class=\"re0\">$Item</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">re</span><br/>\u00a0<br/><span class=\"co1\"># Optional Python 2.x compatibility</span><br/><span class=\"co1\">#try: input = raw_input</span><br/><span class=\"co1\">#except: pass</span><br/>\u00a0<br/>template <span class=\"sy0\">=</span> <span class=\"st0\">'''&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<br/>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.'''</span><br/>\u00a0<br/><span class=\"kw1\">def</span> madlibs<span class=\"br0\">(</span>template<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'The story template is:<span class=\"es0\">\\n</span>'</span> + template<span class=\"br0\">)</span><br/>    fields <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span> <span class=\"kw3\">re</span>.<span class=\"me1\">findall</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;[^&gt;]+&gt;'</span><span class=\"sy0\">,</span> template<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    values <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Input a comma-separated list of words to replace the following items'</span><br/>                   <span class=\"st0\">'<span class=\"es0\">\\n</span> \u00a0%s: '</span>\u00a0% <span class=\"st0\">','</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>fields<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    story <span class=\"sy0\">=</span> template<br/>    <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>v <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>fields<span class=\"sy0\">,</span> values<span class=\"br0\">)</span>:<br/>        story <span class=\"sy0\">=</span> story.<span class=\"me1\">replace</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>The story becomes:<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span> + story<span class=\"br0\">)</span><br/>\u00a0<br/>madlibs<span class=\"br0\">(</span>template<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">(define (get-mad-libs file)<br/>  (with-input-from-file file<br/>    (lambda ()<br/>      (for/fold ((text \"\"))<br/>        ((line (in-lines)))<br/>        (string-append text line \"\\n\")))))<br/>\u00a0<br/>\u00a0<br/>(define (replace-context mad-libs)<br/>  (define matches<br/>    (regexp-match* #rx\"&lt;[a-zA-Z0-9 ]*&gt;\" mad-libs))<br/>  (map <br/>   (lambda (context)<br/>     (display (format \"~a?\" context))<br/>     (cons context (read-line)))<br/>   (remove-duplicates matches)))<br/>\u00a0<br/>(define (play-mad-libs)<br/>  (display \"Tell me a file to play Mad Libs: \")<br/>  (define text (get-mad-libs (read-line)))<br/>  (define matches (replace-context text))<br/>\u00a0<br/>  (display<br/>   (for/fold ((mad-story text))<br/>     ((change (in-list matches)))<br/>     (string-replace mad-story (car change) (cdr change)))))<br/>\u00a0<br/>(play-mad-libs)</pre>"}, {"lang": "REBOL", "loc": 6, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/>t: <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span> went <span class=\"kw2\">for</span> a walk <span class=\"kw3\">in</span> the park. <span class=\"sy0\">&lt;</span>he <span class=\"kw3\">or</span> she<span class=\"sy0\">&gt;</span> found a <span class=\"sy0\">&lt;</span>noun<span class=\"sy0\">&gt;</span>. <span class=\"sy0\">&lt;</span>name<span class=\"sy0\">&gt;</span> decided <span class=\"kw3\">to</span> take it home.<span class=\"br0\">}</span><br/><span class=\"kw3\">view</span> <span class=\"kw3\">layout</span> <span class=\"br0\">[</span>a: area wrap t  btn <span class=\"st0\">\"Done\"</span> <span class=\"br0\">[</span>x: a<span class=\"sy0\">/</span>text <span class=\"kw3\">unview</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw3\">parse</span> x <span class=\"br0\">[</span><span class=\"kw2\">any</span> <span class=\"br0\">[</span><span class=\"kw3\">to</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"kw3\">copy</span> b thru <span class=\"st0\">\"&gt;\"</span> <span class=\"br0\">(</span><span class=\"kw3\">append</span> w: <span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw3\">to</span> end<span class=\"br0\">]</span><br/><span class=\"kw2\">foreach</span> i <span class=\"kw3\">unique</span> w <span class=\"br0\">[</span><span class=\"kw3\">replace</span><span class=\"sy0\">/</span><span class=\"kw2\">all</span> x i <span class=\"kw3\">ask</span> <span class=\"kw3\">join</span> i <span class=\"st0\">\": \"</span><span class=\"br0\">]</span>  <span class=\"kw3\">alert</span> x<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 35, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program prompts the user for a template substitutions within a story  (MAD LIBS).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> iFID <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*allow user to specify the input file.*/</span><br/><span class=\"kw1\">if</span> iFID==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> iFID==<span class=\"st0\">\",\"</span> <span class=\"kw3\">then</span> iFID=<span class=\"st0\">\"MAD_LIBS.TXT\"</span> <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/*assign defaults to some variables.   */</span><br/>$=;          <span class=\"kw1\">do</span> recs=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*read the input file until it's done. */</span><br/>             @<span class=\"sy0\">.</span>recs=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span>;  $=$  @<span class=\"sy0\">.</span>recs   <span class=\"coMULTI\">/*read a record;  and append it to  @  */</span><br/>             <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>recs=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>            <span class=\"coMULTI\">/*Read a blank line?   Then we're done.*/</span><br/>             <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*recs*/</span><br/>recs=recs-<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*adjust for a E\u2500O\u2500F  or  a blank line.*/</span><br/>pm= <span class=\"st0\">'please enter a word or phrase to replace: '</span> <span class=\"coMULTI\">/*this is part of the  Prompt Message. */</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*placeholder for phrases in  MAD LIBS.*/</span><br/>#=<span class=\"nu0\">0</span>;    <span class=\"kw1\">do</span>  <span class=\"kw2\">forever</span>                              <span class=\"coMULTI\">/*look for templates within the text.  */</span><br/>        <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  $   <span class=\"st0\">'&lt;'</span>  \u00a0?   <span class=\"st0\">\"&gt;\"</span>   $         <span class=\"coMULTI\">/*scan for   &lt;\u03b1\u03b1\u03b1&gt;   stuff in the text.*/</span><br/>        <span class=\"kw1\">if</span>\u00a0?=<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                     <span class=\"coMULTI\">/*No   \u03b1\u03b1\u03b1\u00a0?   Then we're all finished.*/</span><br/>        <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>?    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                   <span class=\"coMULTI\">/*Already asked?   Then keep scanning. */</span><br/>       \u00a0!<span class=\"sy0\">.</span>?=<span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*mark this   \u03b1\u03b1\u03b1   as being  \"found\". */</span><br/>               <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  ans<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>                <span class=\"coMULTI\">/*prompt user for a replacement.       */</span><br/>               <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500'</span>   pm   \u00a0?       <span class=\"coMULTI\">/*prompt the user with a prompt message*/</span><br/>               <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> ans                    <span class=\"coMULTI\">/*PULL  obtains the text from console. */</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>        #=#+<span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*bump the template counter.           */</span><br/>        old<span class=\"sy0\">.</span># = <span class=\"st0\">'&lt;'</span>?<span class=\"st0\">\"&gt;\"</span>;           new<span class=\"sy0\">.</span># = ans   <span class=\"coMULTI\">/*assign the \"old\" name and \"new\" name.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*display a blank line for a separator.*/</span><br/><span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, <span class=\"nu0\">79</span><span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*display a blank line  and  a fence.  */</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> recs                         <span class=\"coMULTI\">/*display the text,  line for line.    */</span><br/>                <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                    <span class=\"coMULTI\">/*perform substitutions in the text.   */</span><br/>                @<span class=\"sy0\">.</span>m=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>old<span class=\"sy0\">.</span>n, @<span class=\"sy0\">.</span>m, new<span class=\"sy0\">.</span>n<span class=\"br0\">)</span> <span class=\"coMULTI\">/*maybe replace text in  @.m  haystack.*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>        <span class=\"kw1\">say</span> @<span class=\"sy0\">.</span>m                                  <span class=\"coMULTI\">/*display the (new) substituted text.  */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, <span class=\"nu0\">79</span><span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*display a  final (output) fence.     */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>temp=\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt; found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"<br/>k = substr(temp,\"&lt;\")<br/>while k<br/>      replace   = substr(temp,k,substr(temp,\"&gt;\")-k + 1)<br/>      see \"replace:\" + replace + \" with: \" <br/>      give with<br/>      while k<br/>            temp  = left(temp,k-1) + with + substr(temp,k + len(replace))<br/>            k = substr(temp,replace)<br/>      end <br/>      k = substr(temp,\"&lt;\")<br/>end<br/>see temp + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> <span class=\"st0\">\"Enter a story, terminated by an empty line:\"</span><br/>story = <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">until</span> <span class=\"br0\">(</span>line = <span class=\"kw3\">gets</span><span class=\"br0\">)</span>.<span class=\"kw3\">chomp</span>.<span class=\"me1\">empty</span>?<br/>  story <span class=\"sy0\">&lt;&lt;</span> line<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>story.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>=<span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"sy0\">+</span>?<span class=\"br0\">(</span>?=<span class=\"br0\">[</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>var<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"Enter a value for '#{var}': \"</span><br/>  story.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">/&lt;</span><span class=\"co1\">#{var}&gt;/, gets.chomp)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span><br/><span class=\"kw3\">puts</span> story</pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">temp$=\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt; found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"<br/>k = instr(temp$,\"&lt;\")<br/>while k<br/>    replace$   = mid$(temp$,k,instr(temp$,\"&gt;\")-k + 1)<br/>    print \"Replace:\";replace$;\" with:\";\u00a0:input with$<br/>    while k<br/>        temp$  = left$(temp$,k-1) + with$ + mid$(temp$,k + len(replace$))<br/>        k      = instr(temp$,replace$,k)<br/>    wend <br/>k = instr(temp$,\"&lt;\")<br/>wend<br/>print temp$<br/>wait</pre>"}, {"lang": "Scala", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MadLibs <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App<span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt;<span class=\"es1\">\\n</span>found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"</span><br/>  println<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>  println<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> todo <span class=\"sy0\">=</span> <span class=\"st0\">\"(&lt;[^&gt;]+&gt;)\"</span>.<span class=\"me1\">r</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> replacements <span class=\"sy0\">=</span> todo.<span class=\"me1\">findAllIn</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span>.<span class=\"me1\">toSet</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>found<span class=\"sy0\">:</span> String <span class=\"sy0\">=&gt;</span><br/>    found -<span class=\"sy0\">&gt;</span> readLine<span class=\"br0\">(</span>s<span class=\"st0\">\"Enter a $found \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span>.<span class=\"me1\">toMap</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> output <span class=\"sy0\">=</span> todo.<span class=\"me1\">replaceAllIn</span><span class=\"br0\">(</span>input, found <span class=\"sy0\">=&gt;</span> replacements<span class=\"br0\">(</span>found.<span class=\"me1\">matched</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<br/>  println<span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: story is \"\";<br/>    var string: line is \"\";<br/>    var integer: pos1 is 0;<br/>    var integer: pos2 is 1;<br/>    var string: field is \"\";<br/>  begin<br/>    writeln(\"Enter a story template, terminated by an empty line:\");<br/>    repeat<br/>      readln(line);<br/>      if line &lt;&gt; \"\" then<br/>        story &amp;:= line &amp; \"\\n\";<br/>      end if;<br/>    until line = \"\";<br/>    pos1\u00a0:= pos(story, '&lt;');<br/>    while pos1 &lt;&gt; 0 and pos2 &lt;&gt; 0 do<br/>      pos2\u00a0:= pos(story, '&gt;', pos1);<br/>      if pos2 &lt;&gt; 0 then<br/>        field\u00a0:= story[pos1 .. pos2];<br/>        write(\"Enter a value for \" &lt;&amp; field &lt;&amp; \": \");<br/>        story\u00a0:= replace(story, field, getln(IN));<br/>        pos1\u00a0:= pos(story, '&lt;', pos1);<br/>      end if;<br/>    end while;<br/>    writeln;<br/>    writeln(\"The story becomes:\");<br/>    write(story);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">var story = ARGF.<span class=\"me1\">slurp</span>;<br/>\u00a0<br/>var blanks = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>var m = <span class=\"sy0\">/&lt;</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span>?<span class=\"br0\">)</span><span class=\"sy0\">&gt;/</span>.<span class=\"me1\">gmatch</span><span class=\"br0\">(</span>story<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    blanks.<span class=\"me1\">append</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>blanks.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>blank<span class=\"sy0\">|</span><br/>    var replacement = Sys.<span class=\"me1\">scanln</span><span class=\"br0\">(</span><span class=\"st0\">\"#{blank}: \"</span><span class=\"br0\">)</span>;<br/>    blanks<span class=\"br0\">{</span>blank<span class=\"br0\">}</span> = replacement;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span> story.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/&lt;</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span>?<span class=\"br0\">)</span><span class=\"sy0\">&gt;/</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1<span class=\"sy0\">|</span> blanks<span class=\"br0\">{</span>s1<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "tbas", "loc": 49, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">SUB</span> BETWEEN$<span class=\"br0\">(</span>TXT$<span class=\"sy0\">,</span> LHS$<span class=\"sy0\">,</span> RHS$<span class=\"sy0\">,</span> AFTER<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LHS <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpos.shtml\"><span class=\"kw3\">POS</span></a><span class=\"br0\">(</span>TXT$<span class=\"sy0\">,</span> LHS$<span class=\"sy0\">,</span> AFTER<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">IF</span> LHS <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"co1\">'LHS$ NOT FOUND IN TXT$. RETURN EMPTY STRING</span><br/>\t\t<span class=\"kw1\">RETURN</span> <span class=\"st0\">\"\"</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">SUB</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> RHS <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpos.shtml\"><span class=\"kw3\">POS</span></a><span class=\"br0\">(</span>TXT$<span class=\"sy0\">,</span> RHS$<span class=\"sy0\">,</span> LHS <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>LHS$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">IF</span> RHS <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"co1\">'NO RHS$ FOUND IMMEDIATELY AFTER LHS$ IN TXT$. RETURN EMPTY STRING.</span><br/>\t\t<span class=\"kw1\">RETURN</span> <span class=\"st0\">\"\"</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">SUB</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<span class=\"kw1\">RETURN</span> <a href=\"http://www.qbasicnews.com/qboho/qckseg.shtml\"><span class=\"kw3\">SEG</span></a>$<span class=\"br0\">(</span>TXT$<span class=\"sy0\">,</span> LHS <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>LHS$<span class=\"br0\">)</span><span class=\"sy0\">,</span> RHS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> REPLACE$<span class=\"br0\">(</span>INTHIS$<span class=\"sy0\">,</span> FINDTHIS$<span class=\"sy0\">,</span> WITHTHIS$<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> T <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpos.shtml\"><span class=\"kw3\">POS</span></a><span class=\"br0\">(</span>INTHIS$<span class=\"sy0\">,</span> FINDTHIS$<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">RETURN</span> INTHIS$<br/>\t<span class=\"kw1\">IF</span> T <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>INTHIS$<span class=\"sy0\">,</span> T<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>FINDTHIS$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> WITHTHIS$<br/>\t\t<span class=\"kw1\">RETURN</span> INTHIS$<br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> STORY$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> STORYLINE$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">WHILE</span> TRUE<br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckline.shtml\"><span class=\"kw3\">LINE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Enter line of story (empty line to stop)\"</span>; STORYLINE$<br/>\t<span class=\"kw1\">IF</span> STORYLINE$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">WHILE</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\tSTORY$ <span class=\"sy0\">=</span> STORY$ <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> STORYLINE$<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">WHILE</span><br/>\u00a0<br/><span class=\"kw1\">WHILE</span> TRUE<br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> TXT$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckkey.shtml\"><span class=\"kw3\">KEY</span></a>$ <span class=\"sy0\">=</span> BETWEEN$<span class=\"br0\">(</span>STORY$<span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckkey.shtml\"><span class=\"kw3\">KEY</span></a>$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"PLEASE ENTER A \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qckkey.shtml\"><span class=\"kw3\">KEY</span></a>$;<br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckline.shtml\"><span class=\"kw3\">LINE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> TXT$<br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SRCH$ <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qckkey.shtml\"><span class=\"kw3\">KEY</span></a>$ <span class=\"sy0\">+</span> <span class=\"st0\">\"&gt;\"</span><br/>\t\tSTORY$ <span class=\"sy0\">=</span> REPLACE$<span class=\"br0\">(</span>STORY$<span class=\"sy0\">,</span> SRCH$<span class=\"sy0\">,</span> TXT$<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">WHILE</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">WHILE</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> STORY$</pre>"}, {"lang": "Tcl", "loc": 23, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Read the template...</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"-\"</span> <span class=\"nu0\">70</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Enter the story template, ending with a blank line\"</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin line<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">append</span> content <span class=\"re0\">$line</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Read the mapping...</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"-\"</span> <span class=\"nu0\">70</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> mapping <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> piece <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span><span class=\"br0\">[</span>^<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span>+<span class=\"sy0\">&gt;</span><span class=\"br0\">}</span> <span class=\"re0\">$content</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict exists <span class=\"re0\">$mapping</span> <span class=\"re0\">$piece</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>    <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"Give me a $piece: \"</span><br/>    <span class=\"kw2\">flush</span> stdout<br/>    dict <span class=\"kw1\">set</span> mapping <span class=\"re0\">$piece</span> <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Apply the mapping and print...</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"-\"</span> <span class=\"nu0\">70</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$mapping</span> <span class=\"re0\">$content</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"-\"</span> <span class=\"nu0\">70</span><span class=\"br0\">]</span></pre>"}, {"lang": "VBScript", "loc": 20, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> mad_libs(s)<br/>\t<span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">If</span> InStr(1,s,<span class=\"st0\">\"&lt;\"</span>) &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\tstart_position = InStr(1,s,<span class=\"st0\">\"&lt;\"</span>) + 1<br/>\t\t\tend_position = InStr(1,s,<span class=\"st0\">\"&gt;\"</span>)<br/>\t\t\tparse_string = Mid(s,start_position,end_position-start_position)<br/>\t\t\tWScript.StdOut.Write parse_string &amp; <span class=\"st0\">\"? \"</span><br/>\t\t\tinput_string = WScript.StdIn.ReadLine<br/>\t\t\ts = Replace(s,<span class=\"st0\">\"&lt;\"</span> &amp; parse_string &amp; <span class=\"st0\">\"&gt;\"</span>,input_string)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/>\tmad_libs = s<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write mad_libs(<span class=\"st0\">\"&lt;name&gt; went for a walk in the park. &lt;he or she&gt; found a &lt;noun&gt;. &lt;name&gt; decided to take it home.\"</span>)<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">story,line,re:=Data(),\"\",RegExp(\"(&lt;[^&gt;]+&gt;)\");<br/>do{ line=ask(\"Story: \"); story.write(line,\"\\n\") }while(line);<br/>while(re.search(story,True)){ <br/>   z,ml,N:=re.matched,z[1],z[0][1]; // z=( (0,6),\"&lt;name&gt;\" )<br/>   s:=ask(\"Text to replace \",ml,\" with: \");<br/>   while(Void!=(n:=story.find(ml))){ story[n,N]=s } // replace all &lt;names&gt;s<br/>}<br/>println(\"-----------------\");<br/>story.text.print();</pre>"}]}