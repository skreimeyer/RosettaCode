{"task": "Strip_control_codes_and_extended_characters_from_a_string", "blocks": [{"lang": "Ada", "loc": 36, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Strip_ASCII <span class=\"kw1\">is</span><br/>\u00a0<br/>   Full: String\u00a0:= 'a' &amp; Character'Val<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> &amp; 'b' &amp; Character'Val<span class=\"br0\">(</span><span class=\"nu0\">166</span><span class=\"br0\">)</span> &amp;<br/>                   'c' &amp; Character'Val<span class=\"br0\">(</span><span class=\"nu0\">127</span><span class=\"br0\">)</span> &amp; Character'Val<span class=\"br0\">(</span><span class=\"nu0\">203</span><span class=\"br0\">)</span> &amp;<br/>                   Character'Val<span class=\"br0\">(</span><span class=\"nu0\">202</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"de\"</span>;<br/>   <span class=\"co1\">-- 5 ordinary characters ('a' .. 'e')</span><br/>   <span class=\"co1\">-- 2 control characters (11, 127); note that 11 is the \"vertical tab\"</span><br/>   <span class=\"co1\">-- 3 extended characters (166, 203, 202)</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Filter<span class=\"br0\">(</span>S:     String;<br/>                   From:  Character\u00a0:= ' ';<br/>                   To:    Character\u00a0:= Character'Val<span class=\"br0\">(</span><span class=\"nu0\">126</span><span class=\"br0\">)</span>;<br/>                   Above: Character\u00a0:= Character'Val<span class=\"br0\">(</span><span class=\"nu0\">127</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> S'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>;<br/>      <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &gt;= From <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &lt;= To<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &gt; Above <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &amp; Filter<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span>, From, To, Above<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> Filter<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span>, From, To, Above<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Filter;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put_Line<span class=\"br0\">(</span>Text, S: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Text &amp; <span class=\"st0\">\" \"</span><span class=\"st0\">\"\"</span> &amp; S &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\", Length:\"</span> &amp; Integer'Image<span class=\"br0\">(</span>S'Length<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Put_Line;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"The full string\u00a0:\"</span>, Full<span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"No Control Chars:\"</span>, Filter<span class=\"br0\">(</span>Full<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- default values for From, To, and Above</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Neither_Extended:\"</span>, Filter<span class=\"br0\">(</span>Full, Above =&gt; Character'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- defaults for From and To</span><br/><span class=\"kw1\">end</span> Strip_ASCII;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 30, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># remove control characters and optionally extended characters from the string text  #</span><br/><span class=\"coMULTI\"># assums ASCII is the character set                                                  #</span><br/><span class=\"kw4\">PROC</span> strip characters <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text<span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> strip extended <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"coMULTI\"># we build the result in a []CHAR and convert back to a string at the end #</span><br/>         <span class=\"kw3\">INT</span> text start <span class=\"sy1\">=</span> <span class=\"kw8\">LWB</span> text<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> text max   <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> text<span class=\"sy1\">;</span><br/>         <span class=\"br0\">[</span> text start <span class=\"sy1\">:</span> text max <span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> result<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> result pos <span class=\"sy1\">:=</span> text start<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> text pos <span class=\"kw2\">FROM</span> text start <span class=\"kw2\">TO</span> text max <span class=\"kw2\">DO</span><br/>             <span class=\"kw3\">INT</span> ch <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> text<span class=\"br0\">[</span> text pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>             <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> ch <span class=\"sy1\">&gt;=</span> 0 <span class=\"kw16\">AND</span> ch <span class=\"sy1\">&lt;=</span> 31 <span class=\"br0\">)</span> <span class=\"kw16\">OR</span> ch <span class=\"sy1\">=</span> 127 <span class=\"kw2\">THEN</span><br/>                 <span class=\"coMULTI\"># control character #</span><br/>                 <span class=\"kw7\">SKIP</span><br/>             <span class=\"kw2\">ELIF</span> strip extended <span class=\"kw16\">AND</span> <span class=\"br0\">(</span> ch <span class=\"sy1\">&gt;</span> 126 <span class=\"kw16\">OR</span> ch <span class=\"sy1\">&lt;</span> 0 <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>                 <span class=\"coMULTI\"># extened character and we don't want them #</span><br/>                 <span class=\"kw7\">SKIP</span><br/>             <span class=\"kw2\">ELSE</span><br/>                 <span class=\"coMULTI\"># include this character #</span><br/>                 result<span class=\"br0\">[</span> result pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw8\">REPR</span> ch<span class=\"sy1\">;</span><br/>                 result pos <span class=\"sy1\">+:=</span> 1<br/>             <span class=\"kw2\">FI</span><br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<span class=\"br0\">[</span> text start <span class=\"sy1\">:</span> result pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># strip characters #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the control/extended character stripping procedure #</span><br/><span class=\"kw3\">STRING</span> t <span class=\"sy1\">=</span> <span class=\"kw8\">REPR</span> 2 <span class=\"sy1\">+</span> <span class=\"st0\">\"abc\"</span> <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 10 <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 160 <span class=\"sy1\">+</span> <span class=\"st0\">\"def~\"</span> <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 127 <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 10 <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 150 <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 152 <span class=\"sy1\">+</span> <span class=\"st0\">\"!\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;&lt;\"</span> <span class=\"sy1\">+</span> t <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;&gt; - without control characters:             &lt;&lt;\"</span> <span class=\"sy1\">+</span> strip characters<span class=\"br0\">(</span> t<span class=\"sy1\">,</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"&lt;&lt;\"</span> <span class=\"sy1\">+</span> t <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;&gt; - without control or extended characters: &lt;&lt;\"</span> <span class=\"sy1\">+</span> strip characters<span class=\"br0\">(</span> t<span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span>  <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"st0\">\"&gt;&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 7, "block": "<pre class=\"ahk highlighted_source\">Stripped<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> x<br/>\t\t<span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">31</span> <span class=\"kw1\">and</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">128</span><br/>\t\t\tr <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% stripped<span class=\"br0\">(</span><span class=\"st0\">\"`ba\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>00<span class=\"br0\">)</span> <span class=\"st0\">\"b`n`rc`fd\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>0xc3<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 10, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f STRIP_CONTROL_CODES_AND_EXTENDED_CHARACTERS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    s = <span class=\"st0\">\"ab<span class=\"es0\">\\x</span>A2<span class=\"es0\">\\x</span>09z\"</span> <span class=\"co1\"># a b cent tab z</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"original string:\u00a0%s (length\u00a0%d)<span class=\"es0\">\\n</span>\"</span>,s,<span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"br0\">[</span>\\x00<span class=\"sy3\">-</span>\\x1F\\x7F<span class=\"br0\">]</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,s<span class=\"br0\">)</span>; <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"control characters stripped:\u00a0%s (length\u00a0%d)<span class=\"es0\">\\n</span>\"</span>,s,<span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"br0\">[</span>\\x80<span class=\"sy3\">-</span>\\xFF<span class=\"br0\">]</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,s<span class=\"br0\">)</span>; <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"control and extended stripped:\u00a0%s (length\u00a0%d)<span class=\"es0\">\\n</span>\"</span>,s,<span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 38, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> strip$ <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> strip2$ <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> y <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> z <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\u00a0<br/><span class=\"co1\">'   tab                c+cedilla           eof</span><br/>x <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckchr%24.shtml\"><span class=\"kw3\">CHR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"Fran\"</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qckchr%24.shtml\"><span class=\"kw3\">CHR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">135</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"ais\"</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qckchr%24.shtml\"><span class=\"kw3\">CHR$</span></a><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>y <span class=\"sy0\">=</span> strip<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>z <span class=\"sy0\">=</span> strip2<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"x:\"</span>; x<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"y:\"</span>; y<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"z:\"</span>; z<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> strip$ <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> outP <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> tmp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>what<span class=\"br0\">)</span><br/>        tmp <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>what<span class=\"sy0\">,</span> L0<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> <a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">CASE</span> <span class=\"nu0\">32</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">126</span><br/>                outP <span class=\"sy0\">=</span> outP <span class=\"sy0\">+</span> tmp<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>    <span class=\"kw1\">NEXT</span><br/>    strip$ <span class=\"sy0\">=</span> outP<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> strip2$ <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> outP <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> L1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> tmp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>    <span class=\"kw1\">FOR</span> L1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>what<span class=\"br0\">)</span><br/>        tmp <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>what<span class=\"sy0\">,</span> L1<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> <a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>                <span class=\"co1\">'normal     accented    various     greek, math, etc.</span><br/>            <span class=\"kw1\">CASE</span> <span class=\"nu0\">32</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">126</span><span class=\"sy0\">,</span> <span class=\"nu0\">128</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">168</span><span class=\"sy0\">,</span> <span class=\"nu0\">171</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">175</span><span class=\"sy0\">,</span> <span class=\"nu0\">224</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">253</span><br/>                outP <span class=\"sy0\">=</span> outP <span class=\"sy0\">+</span> tmp<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>    <span class=\"kw1\">NEXT</span><br/>    strip2$ <span class=\"sy0\">=</span> outP<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      test$ = CHR$(9) + \"Fran\" + CHR$(231) + \"ais.\" + CHR$(127)<br/>      PRINT \"Original ISO-8859-1 string: \" test$ \" (length \"\u00a0; LEN(test$) \")\"<br/>      test$ = FNstripcontrol(test$)<br/>      PRINT \"Control characters stripped: \" test$ \" (length \"\u00a0; LEN(test$) \")\"<br/>      test$ = FNstripextended(test$)<br/>      PRINT \"Control &amp; extended stripped: \" test$ \" (length \"\u00a0; LEN(test$) \")\"<br/>      END<br/>\u00a0<br/>      DEF FNstripcontrol(A$)\u00a0: REM CHR$(127) is a 'control' code<br/>      LOCAL I%<br/>      WHILE I%&lt;LEN(A$)<br/>        I% += 1<br/>        IF ASCMID$(A$,I%)&lt;32 OR ASCMID$(A$,I%)=127 THEN<br/>          A$ = LEFT$(A$,I%-1) + MID$(A$,I%+1)<br/>        ENDIF<br/>      ENDWHILE<br/>      = A$<br/>\u00a0<br/>      DEF FNstripextended(A$)<br/>      LOCAL I%<br/>      WHILE I%&lt;LEN(A$)<br/>        I% += 1<br/>        IF ASCMID$(A$,I%)&gt;127 THEN<br/>          A$ = LEFT$(A$,I%-1) + MID$(A$,I%+1)<br/>        ENDIF<br/>      ENDWHILE<br/>      = A$</pre>"}, {"lang": "Bracmat", "loc": 28, "block": "<pre class=\"text highlighted_source\">(  \"string of \u263a\u263b\u2665\u2666\u2302, may include control<br/>characters and other ilk.\\L\\D\u00a7\u25ba\u2194\u25c4<br/>R\u00f8dgr\u00f8d med fl\u00f8de\"<br/> \u00a0:\u00a0?string1<br/> \u00a0:\u00a0?string2<br/>&amp;\u00a0:?newString<br/>&amp;   whl<br/>  ' ( @(!string1:?clean (%@:&lt;\" \")\u00a0?string1)<br/>    &amp;\u00a0!newString\u00a0!clean:?newString<br/>    )<br/>&amp;\u00a0!newString\u00a0!string1:?newString<br/>&amp; out$(str$(\"Control characters stripped:<br/>\" str$!newString))<br/>&amp;\u00a0:?newString<br/>&amp;   whl<br/>  ' ( @(!string2:?clean (%@:(&lt;\" \"|&gt;\"~\"))\u00a0?string2)<br/>    &amp;\u00a0!newString\u00a0!clean:?newString<br/>    )<br/>&amp;\u00a0!newString\u00a0!string2:?newString<br/>&amp;   out<br/>  $ ( str<br/>    $ ( \"<br/>Control characters and extended characters stripped:<br/>\"<br/>        str$!newString<br/>      )<br/>    )<br/>&amp; );</pre>"}, {"lang": "C", "loc": 64, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define IS_CTRL  (1 &lt;&lt; 0)</span><br/><span class=\"co2\">#define IS_EXT\t (1 &lt;&lt; 1)</span><br/><span class=\"co2\">#define IS_ALPHA (1 &lt;&lt; 2)</span><br/><span class=\"co2\">#define IS_DIGIT (1 &lt;&lt; 3) /* not used, just give you an idea */</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> char_tbl<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* could use ctypes, but then they pretty much do the same thing */</span><br/><span class=\"kw4\">void</span> init_table<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> char_tbl<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> IS_CTRL<span class=\"sy0\">;</span><br/>\tchar_tbl<span class=\"br0\">[</span><span class=\"nu0\">127</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> IS_CTRL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tchar_tbl<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> IS_ALPHA<span class=\"sy0\">;</span><br/>\t\tchar_tbl<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu12\">0x20</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> IS_ALPHA<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* lower case */</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">128</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> char_tbl<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> IS_EXT<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* depends on what \"stripped\" means; we do it in place.<br/> * \"what\" is a combination of the IS_* macros, meaning strip if<br/> * a char IS_ any of them<br/> */</span><br/><span class=\"kw4\">void</span> strip<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> str<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> what<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ptr<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>str<span class=\"sy0\">;</span><br/>\tptr <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>char_tbl<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>s<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> what<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>ptr<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\t\ts<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"sy0\">*</span>ptr <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> a<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinit_table<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* populate string with one of each char */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> a<span class=\"br0\">[</span><span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\tstrip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> IS_CTRL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> a<span class=\"br0\">[</span><span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\tstrip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> IS_CTRL <span class=\"sy0\">|</span> IS_EXT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> a<span class=\"br0\">[</span><span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\tstrip<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> IS_CTRL <span class=\"sy0\">|</span> IS_EXT <span class=\"sy0\">|</span> IS_ALPHA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 43, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;boost/lambda/lambda.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/lambda/casts.hpp&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> boost<span class=\"sy4\">::</span><span class=\"me2\">lambda</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> MyRandomizer <span class=\"br0\">{</span><br/>   <span class=\"kw4\">char</span> operator<span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">256</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> deleteControls <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> startstring <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> noControls<span class=\"br0\">(</span> <span class=\"st0\">\"                                        \"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><span class=\"co1\">//creating space for </span><br/>   <span class=\"co1\">//the standard algorithm remove_copy_if</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">remove_copy_if</span><span class=\"br0\">(</span> startstring.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , startstring.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , noControls.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t ll_static_cast<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> _1 <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">32</span> <span class=\"sy3\">&amp;&amp;</span> ll_static_cast<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> _1 <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">127</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> noControls <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> deleteExtended<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> startstring <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> noExtended <span class=\"br0\">(</span> <span class=\"st0\">\"                                        \"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><span class=\"co1\">//same as above</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">remove_copy_if</span><span class=\"br0\">(</span> startstring.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , startstring.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , noExtended.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t ll_static_cast<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> _1 <span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">127</span> <span class=\"sy3\">||</span> ll_static_cast<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> _1 <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">32</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> noExtended <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> my_extended_string <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">40</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"co1\">//we want the extended string to be 40 characters long</span><br/>      my_extended_string.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">generate_n</span><span class=\"br0\">(</span> my_extended_string.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , <span class=\"nu0\">40</span> , MyRandomizer<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> no_controls<span class=\"br0\">(</span> deleteControls<span class=\"br0\">(</span> my_extended_string <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> no_extended <span class=\"br0\">(</span> deleteExtended<span class=\"br0\">(</span> my_extended_string <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"string with all characters: \"</span> <span class=\"sy1\">&lt;&lt;</span> my_extended_string <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"string without control characters: \"</span> <span class=\"sy1\">&lt;&lt;</span> no_controls <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"string without extended characters: \"</span> <span class=\"sy1\">&lt;&lt;</span> no_extended <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading.Tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> test <span class=\"sy0\">=</span> <span class=\"st0\">\"string of \u263a\u263b\u2665\u2666\u2302, may include control characters and other ilk.\u266b\u263c\u00a7\u25ba\u2194\u25c4\"</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Original: {0}\"</span>, test<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Stripped of control codes: {0}\"</span>, StripControlChars<span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Stripped of extended: {0}\"</span>, StripExtended<span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> StripControlChars<span class=\"br0\">(</span><span class=\"kw4\">string</span> arg<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arrForm <span class=\"sy0\">=</span> arg<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            StringBuilder buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span>arg<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//This many chars at most</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> ch <span class=\"kw1\">in</span> arrForm<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">Char</span><span class=\"sy0\">.</span><span class=\"me1\">IsControl</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"br0\">)</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//Only add to buffer if not a control char</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> StripExtended<span class=\"br0\">(</span><span class=\"kw4\">string</span> arg<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            StringBuilder buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span>arg<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Max length</span><br/>            <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> ch <span class=\"kw1\">in</span> arg<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                UInt16 num <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToUInt16</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//In .NET, chars are UTF-16</span><br/>                <span class=\"co1\">//The basic characters have the same code points as ASCII, and the extended characters are bigger</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>num <span class=\"sy0\">&gt;=</span> 32u<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;=</span> 126u<span class=\"br0\">)</span><span class=\"br0\">)</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"co1\">; generate our test string of characters with control and extended characters</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> range<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>chars <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; filter out the control characters:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>isISOControl <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> range<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>chars<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; filter to return String of characters that are between 32 - 126:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">32</span> <span class=\"br0\">(</span>int <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">126</span><span class=\"br0\">)</span> range<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>chars<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre>&gt; (defparameter *extended-ascii* (coerce (loop for i from 0 to 255 collect (code-char i)) 'string))\n\n*EXTENDED-ASCII*\n&gt; (defparameter *control-codes-stripped* \n    (remove-if #'(lambda (c) \n                   (let ((x (char-code c)))\n                     (or (&lt; x 32) (= x 127))))\n               *extended-ascii*))\n\n*CONTROL-CODES-STRIPPED*\n&gt; *control-codes-stripped*\n\n\"\u00a0!\\\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;<a class=\"__cf_email__\" data-cfemail=\"90afd0d1d2d3d4d5d6d7d8d9dadbdcdddedfc0c1c2c3c4c5c6c7c8c9ca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\\\\]^_`abcdefghijklm\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\"\n&gt; (defparameter *control-codes-and-extended-stripped* \n    (remove-if-not #'(lambda (c) (and (standard-char-p c) (graphic-char-p c)))\n                   *extended-ascii*))\n\n*CONTROL-CODES-AND-EXTENDED-STRIPPED*\n&gt; *control-codes-and-extended-stripped*\n\n\"\u00a0!\\\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;<a class=\"__cf_email__\" data-cfemail=\"241b64656667606162636c6d6e6f68696a6b74757677707172737c7d7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>S stripChars<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">(</span>S s<span class=\"sy0\">,</span> <span class=\"kw4\">bool</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"kw4\">dchar</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> mustStrip<span class=\"br0\">)</span><br/>        <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSomeString<span class=\"sy0\">!</span>S<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    S result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>mustStrip<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            result <span class=\"sy0\">~=</span> c<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">uni</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es3\">\\u0000</span><span class=\"es3\">\\u000A</span> abc<span class=\"es3\">\\u00E9</span>def<span class=\"es3\">\\u007F</span>\"</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>s.<span class=\"me1\">stripChars</span><span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>isControl <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>s.<span class=\"me1\">stripChars</span><span class=\"br0\">(</span> c <span class=\"sy0\">=&gt;</span> isControl<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es3\">\\u007F</span>'</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>s.<span class=\"me1\">stripChars</span><span class=\"br0\">(</span> c <span class=\"sy0\">=&gt;</span> isControl<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'<span class=\"es3\">\\u007F</span>'</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 20, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> strip_control_codes <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>is_not_control_code<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> is_not_control_code_nor_extended_character<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_control_code</span><span class=\"br0\">(</span> <span class=\"re5\">C</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">C</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">127</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_not_control_code</span><span class=\"br0\">(</span> <span class=\"re5\">C</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">C</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy1\">;</span> <span class=\"re5\">C</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">127</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_not_control_code</span><span class=\"br0\">(</span> <span class=\"re5\">_C</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_control_code_nor_extended_character</span><span class=\"br0\">(</span> <span class=\"re5\">C</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">C</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">127</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_not_control_code_nor_extended_character</span><span class=\"br0\">(</span> <span class=\"re5\">C</span> <span class=\"br0\">)</span>\t<span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_not_control_code</span><span class=\"br0\">(</span> <span class=\"re5\">C</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">String</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"String (~p characters): ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">String</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">String_without_cc</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> is_not_control_code<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"String without control codes (~p characters): ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String_without_cc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">String_without_cc</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">String_without_cc_nor_ec</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">filter</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> is_not_control_code_nor_extended_character<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"String without control codes nor extended characters (~p characters): ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String_without_cc_nor_ec</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">String_without_cc_nor_ec</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> stripControl <span class=\"br0\">(</span>arg:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>Char.<span class=\"me1\">IsControl</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>arg.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">//end stripControl</span><br/>\u00a0<br/><span class=\"kw1\">let</span> stripExtended <span class=\"br0\">(</span>arg:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> numArr <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x:<span class=\"kw4\">char</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Convert.<span class=\"me1\">ToUInt16</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>arg.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>|for num <span class=\"kw1\">in</span> numArr <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> num <span class=\"sy0\">&gt;=</span> 32us &amp;&amp; num <span class=\"sy0\">&lt;=</span> 126us <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> Convert.<span class=\"me1\">ToChar</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> |<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\">//end stripExtended</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> test <span class=\"sy0\">=</span> <span class=\"st0\">\"string of \u263a\u263b\u2665\u2666\u2302, may include control characters and other ilk.\u266b\u263c\u00a7\u25ba\u2194\u25c4\"</span><br/>    printfn <span class=\"st0\">\"Original:\u00a0%s\"</span> test<br/>    printfn <span class=\"st0\">\"Stripped of controls:\u00a0%s\"</span> <span class=\"br0\">(</span>stripControl test<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"Stripped of extended:\u00a0%s\"</span> <span class=\"br0\">(</span>stripExtended test<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><span class=\"co1\">//main must return integer, much like in C/C++</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">USING: ascii kernel sequences\u00a0;<br/>\u00a0<br/>: strip-control-codes ( str -- str' ) [ control? not ] filter\u00a0;<br/>\u00a0<br/>: strip-control-codes-and-extended ( str -- str' )<br/>    strip-control-codes [ ascii? ] filter\u00a0;</pre>"}, {"lang": "Forth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: strip ( buf len -- buf len' )  \\ repacks buffer, so len' &lt;= len<br/>  over + over swap over ( buf dst limit src )<br/>  do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"b4d7f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 32 127 within if<br/>      i <a class=\"__cf_email__\" data-cfemail=\"5e3d1e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over c! char+<br/>    then<br/>  loop<br/>  over -\u00a0;</pre>"}, {"lang": "Fortran", "loc": 55, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> stripcharacters<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  pure <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> not_control<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ch</span><br/>    not_control <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">32</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">127</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> not_control<br/>\u00a0<br/>  pure <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> not_extended<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ch</span><br/>    not_extended <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">32</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> &lt; <span class=\"nu0\">127</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> not_extended<br/>\u00a0<br/>  pure <span class=\"kw1\">function</span> strip<span class=\"br0\">(</span>string,accept<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">string</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"sy0\">::</span> <span class=\"me2\">str</span><br/>    <span class=\"kw1\">interface</span><br/>      pure <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> accept<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><br/>        <span class=\"kw3\">character</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ch</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> except<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,n<br/>    str <span class=\"sy0\">=</span> <span class=\"kw4\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> accept<span class=\"br0\">(</span>string<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        n <span class=\"sy0\">=</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        str<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> string<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> strip<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> stripcharacters<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">program</span> test<br/>  <span class=\"kw3\">use</span> stripcharacters<br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">string</span>, str<br/>  <span class=\"kw3\">integer</span>            <span class=\"sy0\">::</span> <span class=\"me2\">ascii</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>, i<br/>  forall <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> ascii<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>  forall <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span> string<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span>ascii<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> string<br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Control characters deleted:'</span><br/>  str <span class=\"sy0\">=</span> strip<span class=\"br0\">(</span>string,not_control<span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> str<br/>\u00a0<br/>  forall <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span> string<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span>ascii<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Extended characters deleted:'</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> strip<span class=\"br0\">(</span>string,not_extended<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 78, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> stripControlChars<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> strip<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">31</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = j OrElse s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">127</span> <span class=\"kw1\">Then</span> <br/>        count += <span class=\"nu0\">1</span><br/>        strip<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"kw1\">True</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span> <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> buffer <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - count<span class=\"br0\">)</span><br/>  count  = <span class=\"nu0\">0</span>  <br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> Strip<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      buffer<span class=\"br0\">[</span>count<span class=\"br0\">]</span> = s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      count += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> buffer<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> stripExtendedChars<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> strip<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">128</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = j <span class=\"kw1\">Then</span> <br/>        count += <span class=\"nu0\">1</span><br/>        strip<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"kw1\">True</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span> <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> buffer <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - count<span class=\"br0\">)</span><br/>  count  = <span class=\"nu0\">0</span>  <br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> Strip<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      buffer<span class=\"br0\">[</span>count<span class=\"br0\">]</span> = s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      count += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> buffer<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s  <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> =\u00a0!<span class=\"st0\">\"<span class=\"es0\">\\v</span><span class=\"es0\">\\0</span>01The<span class=\"es0\">\\t</span> quick<span class=\"es0\">\\2</span>55 <span class=\"es0\">\\v</span>brown<span class=\"es0\">\\1</span>27<span class=\"es0\">\\f</span> fox<span class=\"es0\">\\1</span>56\"</span> <br/><span class=\"kw1\">Dim</span> s1 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = stripControlChars<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> s2 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = stripExtendedChars<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> s3 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = stripExtendedChars<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' Under Windows console, code page 850\u00a0:</span><br/><span class=\"co1\">' \"vertical tab\" displays as \u2642</span><br/><span class=\"co1\">' \"form feed\" displays as \u2640 </span><br/><span class=\"co1\">' Chr(1) displays as \u263a</span><br/><span class=\"co1\">' Chr(127) displays as \u2302</span><br/><span class=\"co1\">' the other control characters do what it says on the tin </span><br/><span class=\"co1\">' Chr(156) displays as \u00a3</span><br/><span class=\"co1\">' Chr(255) displays as space</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Before stripping  \u00a0:\"</span> , s<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Ctl chars stripped\u00a0:\"</span> , s1<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Ext chars stripped\u00a0:\"</span> , s2<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Both sets stripped\u00a0:\"</span> , s3<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Before stripping\"</span>   ,  <span class=\"st0\">\"Length =&gt; \"</span>\u00a0; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Ctl chars stripped\"</span> ,  <span class=\"st0\">\"Length =&gt; \"</span>\u00a0; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Ext chars stripped\"</span> ,  <span class=\"st0\">\"Length =&gt; \"</span>\u00a0; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Both sets stripped\"</span> ,  <span class=\"st0\">\"Length =&gt; \"</span>\u00a0; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 31, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"The<span class=\"es0\">\\t</span> <span class=\"es0\">\\e</span>quick<span class=\"es0\">\\n</span> <span class=\"es0\">\\f</span>brownfox <span class=\"es0\">\\v</span>cost \u00a3125.00 or \u20ac145.00 or $160.00 <span class=\"es0\">\\b</span>to <span class=\"es0\">\\n</span>capture \u00a9\u00ae\"</span> <br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sStd, sExtend <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">32</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">126</span><br/>  sStd <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/chr\"><span class=\"kw2\">Chr</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">128</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">255</span><br/>  sExtend <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/chr\"><span class=\"kw2\">Chr</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Original string: -<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sString <span class=\"sy0\">&amp;</span> gb.<span class=\"me1\">NewLine</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"No extended characters: -<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> Check<span class=\"br0\">(</span>sString, sStd<span class=\"br0\">)</span><br/>sStd <span class=\"sy0\">&amp;=</span> sExtend<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"With extended characters: -<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> Check<span class=\"br0\">(</span>sString, sStd<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/><span class=\"co1\">'________________________________________________________________</span><br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Check<span class=\"br0\">(</span>sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>, sCheck <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sResult <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/instr\"><span class=\"kw2\">InStr</span></a><span class=\"br0\">(</span>sCheck, <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sString, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sResult <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sString, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/return\"><span class=\"kw1\">Return</span></a> sResult<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 90, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"golang.org/x/text/transform\"</span><br/>\t<span class=\"st0\">\"golang.org/x/text/unicode/norm\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// two byte-oriented functions identical except for operator comparing c to 127.</span><br/><span class=\"kw4\">func</span> stripCtlFromBytes<span class=\"sy1\">(</span>str <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tb <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">var</span> bl <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tc <span class=\"sy2\">:=</span> str<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"kw1\">if</span> c &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">32</span> &amp;&amp; c <span class=\"sy2\">!=</span> <span class=\"nu0\">127</span> <span class=\"sy1\">{</span><br/>\t\t\tb<span class=\"sy1\">[</span>bl<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>\t\t\tbl<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[:</span>bl<span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> stripCtlAndExtFromBytes<span class=\"sy1\">(</span>str <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tb <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">var</span> bl <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>str<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tc <span class=\"sy2\">:=</span> str<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"kw1\">if</span> c &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">32</span> &amp;&amp; c &lt; <span class=\"nu0\">127</span> <span class=\"sy1\">{</span><br/>\t\t\tb<span class=\"sy1\">[</span>bl<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>\t\t\tbl<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[:</span>bl<span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// two UTF-8 functions identical except for operator comparing c to 127</span><br/><span class=\"kw4\">func</span> stripCtlFromUTF8<span class=\"sy1\">(</span>str <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>Map<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>r rune<span class=\"sy1\">)</span> rune <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">32</span> &amp;&amp; r <span class=\"sy2\">!=</span> <span class=\"nu0\">127</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> r<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">},</span> str<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> stripCtlAndExtFromUTF8<span class=\"sy1\">(</span>str <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>Map<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>r rune<span class=\"sy1\">)</span> rune <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">32</span> &amp;&amp; r &lt; <span class=\"nu0\">127</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> r<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">},</span> str<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Advanced Unicode normalization and filtering,</span><br/><span class=\"co1\">// see http://blog.golang.org/normalization and</span><br/><span class=\"co1\">// http://godoc.org/golang.org/x/text/unicode/norm for more</span><br/><span class=\"co1\">// details.</span><br/><span class=\"kw4\">func</span> stripCtlAndExtFromUnicode<span class=\"sy1\">(</span>str <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tisOk <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>r rune<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> r &lt; <span class=\"nu0\">32</span> <span class=\"sy3\">||</span> r &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">127</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"co1\">// The isOk filter is such that there is no need to chain to norm.NFC</span><br/>\tt <span class=\"sy2\">:=</span> transform<span class=\"sy3\">.</span><span class=\"me1\">Chain</span><span class=\"sy1\">(</span>norm<span class=\"sy3\">.</span><span class=\"me1\">NFKD</span><span class=\"sy1\">,</span> transform<span class=\"sy3\">.</span><span class=\"me1\">RemoveFunc</span><span class=\"sy1\">(</span>isOk<span class=\"sy1\">))</span><br/>\t<span class=\"co1\">// This Transformer could also trivially be applied as an io.Reader</span><br/>\t<span class=\"co1\">// or io.Writer filter to automatically do such filtering when reading</span><br/>\t<span class=\"co1\">// or writing data anywhere.</span><br/>\tstr<span class=\"sy1\">,</span> _<span class=\"sy1\">,</span> _ <span class=\"sy2\">=</span> transform<span class=\"sy3\">.</span>String<span class=\"sy1\">(</span>t<span class=\"sy1\">,</span> str<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> str<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> src <span class=\"sy2\">=</span> <span class=\"st0\">\"d\u00e9j\u00e0 vu\"</span> <span class=\"sy3\">+</span> <span class=\"co1\">// precomposed unicode</span><br/>\t<span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es2\">\\000</span><span class=\"es2\">\\037</span> <span class=\"es2\">\\041</span><span class=\"es2\">\\176</span><span class=\"es2\">\\177</span><span class=\"es2\">\\200</span><span class=\"es2\">\\377</span><span class=\"es1\">\\n</span>\"</span> <span class=\"sy3\">+</span> <span class=\"co1\">// various boundary cases</span><br/>\t<span class=\"st0\">\"as\u20dddf\u0305\"</span> <span class=\"co1\">// unicode combining characters</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"source text:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>src<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>as bytes, stripped of control codes:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>stripCtlFromBytes<span class=\"sy1\">(</span>src<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>as bytes, stripped of control codes and extended characters:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>stripCtlAndExtFromBytes<span class=\"sy1\">(</span>src<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>as UTF-8, stripped of control codes:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>stripCtlFromUTF8<span class=\"sy1\">(</span>src<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>as UTF-8, stripped of control codes and extended characters:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>stripCtlAndExtFromUTF8<span class=\"sy1\">(</span>src<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>as decomposed and stripped Unicode:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>stripCtlAndExtFromUnicode<span class=\"sy1\">(</span>src<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stripControl <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>/\\p<span class=\"br0\">{</span>Cntrl<span class=\"br0\">}</span>/, <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stripControlAndExtended <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>/<span class=\"br0\">[</span>^\\p<span class=\"br0\">{</span>Print<span class=\"br0\">}</span><span class=\"br0\">]</span>/, <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\">strip <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>strip <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a><br/>    <span class=\"br0\">(</span>\\x <span class=\"co1\">-- Though use of Data.Char functions like isAlpha, isDigit etc</span><br/>        <span class=\"co1\">-- seems more probable.</span><br/>       <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> o <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> x<br/>        <span class=\"kw1\">in</span> o <span class=\"sy0\">&gt;</span> <span class=\"nu0\">31</span> <span class=\"sy0\">&amp;&amp;</span> o <span class=\"sy0\">&lt;</span> <span class=\"nu0\">126</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> strip <span class=\"st0\">\"alphabetic \u5b57\u6bcd with some less parochial parts\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>deletec<span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">ascii</span><span class=\"sy1\">,&amp;</span>ascii<span class=\"sy1\">--</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">ascii</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">33</span><span class=\"sy1\">:</span><span class=\"nu0\">127</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">link</span> strings<br/>\u00a0</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">stripControlCodes=: -.&amp;<span class=\"sy0\">(</span>DEL,<span class=\"nu0\">32</span>{.a.<span class=\"sy0\">)</span><br/>stripControlExtCodes=: <span class=\"sy0\">(</span>[ -. -.<span class=\"sy0\">)</span>&amp;<span class=\"sy0\">(</span><span class=\"nu0\">32</span>}.<span class=\"nu0\">127</span>{.a.<span class=\"sy0\">)</span></pre>"}, {"lang": "JavaScript", "loc": 14, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>strTest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// s -&gt; s</span><br/>    <span class=\"kw1\">function</span> strip<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> x.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">31</span> <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">127</span> <span class=\"sy0\">&gt;</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> strip<span class=\"br0\">(</span>strTest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\b</span>a<span class=\"es0\">\\x</span>00b<span class=\"es0\">\\n</span><span class=\"es0\">\\r</span>c<span class=\"es0\">\\f</span>d<span class=\"es0\">\\x</span>c3\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Java", "loc": 15, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.IntPredicate</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StripControlCodes <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>0000<span class=\"es0\">\\n</span> abc<span class=\"es0\">\\u</span>00E9def<span class=\"es0\">\\u</span>007F\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>stripChars<span class=\"br0\">(</span>s, c <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'<span class=\"es0\">\\u</span>001F'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es0\">\\u</span>007F'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>stripChars<span class=\"br0\">(</span>s, c <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'<span class=\"es0\">\\u</span>001F'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'<span class=\"es0\">\\u</span>007F'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> stripChars<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, IntPredicate include<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">codePoints</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>include<span class=\"sy0\">::</span>test<span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>StringBuilder<span class=\"sy0\">::</span><span class=\"kw1\">new</span>,<br/>                StringBuilder<span class=\"sy0\">::</span>appendCodePoint, StringBuilder<span class=\"sy0\">::</span>append<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">def strip_control_codes:<br/> explode | map(select(. &gt; 31 and .\u00a0!= 127)) | implode;<br/>\u00a0<br/>def strip_extended_characters:<br/>  explode | map(select(31 &lt; . and . &lt; 127)) | implode;</pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>stripc0{T&lt;:String}(a::T) = replace(a, r\"[\\x00-\\x1f\\x7f]\", \"\")<br/>stripc0x{T&lt;:String}(a::T) = replace(a, r\"[^\\x20-\\x7e]\", \"\")<br/>\u00a0<br/>a = \"a\\n\\tb\\u2102d\\u2147f\"<br/>\u00a0<br/>println(\"Original String:\\n    \", a)<br/>println(\"\\nWith C0 control characters removed:\\n    \", stripc0(a))<br/>println(\"\\nWith C0 and extended characters removed:\\n    \", stripc0x(a))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun String.<span class=\"me1\">strip</span><span class=\"br0\">(</span>extendedChars<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">32</span>..<span class=\"nu0\">126</span> || <span class=\"br0\">(</span><span class=\"sy0\">!</span>extendedChars <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Originally:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"123<span class=\"es1\">\\t</span>abc<span class=\"es3\">\\u0007</span>DEF<span class=\"es3\">\\u007F</span>+-*/\u20ac\u00e6\u0167\u00f0\u0142\u00fe\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"String = $s  Length = ${s.length}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>After stripping control characters:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"String = $t  Length = ${t.length}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>After stripping control and extended characters:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> u <span class=\"sy0\">=</span> s.<span class=\"me1\">strip</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"String = $u  Length = ${u.length}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 39, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    all$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">255</span><br/>        all$ <span class=\"sy0\">=</span>all$ <span class=\"sy0\">+</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Original string of bytes.  ( chr$( 10) causes a CRLF.)\"</span><br/>    <span class=\"kw1\">print</span> all$<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    lessControl$ <span class=\"sy0\">=</span>controlStripped$<span class=\"br0\">(</span> all$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"With control codes stripped out.\"</span><br/>    <span class=\"kw1\">print</span> lessControl$<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    lessExtendedAndControl$ <span class=\"sy0\">=</span>extendedStripped$<span class=\"br0\">(</span> lessControl$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"With extended codes stripped out too.\"</span><br/>    <span class=\"kw1\">print</span> lessExtendedAndControl$<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> controlStripped$<span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>        r$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>            ch$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> i$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span> ch$<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span><span class=\"nu0\">32</span> <span class=\"kw1\">then</span> r$ <span class=\"sy0\">=</span>r$ <span class=\"sy0\">+</span>ch$<br/>        <span class=\"kw1\">next</span> j<br/>        controlStripped$ <span class=\"sy0\">=</span>r$<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> extendedStripped$<span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>        r$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>            ch$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> i$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span> ch$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span><span class=\"nu0\">128</span> <span class=\"kw1\">then</span> r$ <span class=\"sy0\">=</span>r$ <span class=\"sy0\">+</span>ch$<br/>        <span class=\"kw1\">next</span> j<br/>        extendedStripped$ <span class=\"sy0\">=</span>r$<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 25, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Strip_Control_Codes<span class=\"br0\">(</span> str <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw2\">in</span> str<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span> <span class=\"st0\">\"%C+\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/> \ts <span class=\"sy0\">=</span> s <span class=\"sy0\">..</span> i<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Strip_Control_and_Extended_Codes<span class=\"br0\">(</span> str <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> str<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> str<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">32</span> <span class=\"kw2\">and</span> str<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">126</span> <span class=\"kw1\">then</span><br/>  \t    s <span class=\"sy0\">=</span> s <span class=\"sy0\">..</span> str<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>q <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"kw1\">do</span><br/>\tq <span class=\"sy0\">=</span> q <span class=\"sy0\">..</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> Strip_Control_Codes<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> Strip_Control_and_Extended_Codes<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">stripCtrl[x_]:=StringJoin[Select[Characters[x],<br/>MemberQ[CharacterRange[\"!\",\"~\"]~Join~Characters[FromCharacterCode[Range[128,255]]],#]&amp;]]<br/>\u00a0<br/>stripCtrlExt[x_]:=StringJoin[Select[Characters[x],<br/>MemberQ[CharacterRange[\"!\",\"~\"],#]&amp;]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"> <span class=\"kw1\">function</span> str = stripped<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    str = str<span class=\"br0\">(</span><span class=\"nu0\">31</span>&lt;str &amp; str&lt;<span class=\"nu0\">127</span><span class=\"br0\">)</span>; <br/>  <span class=\"kw1\">end</span>; </pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">proc stripped(str): string =<br/>  result = \"\"<br/>  for c in str:<br/>    if ord(c) in 32..126:<br/>      result.add c<br/>\u00a0<br/>echo stripped \"\\ba\\x00b\\n\\rc\\fd\\xc3\"</pre>"}, {"lang": "OCaml", "loc": 32, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_control_code c <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> c <span class=\"kw1\">in</span><br/>  d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span> <span class=\"sy0\">||</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">127</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_extended_char c <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> c <span class=\"kw1\">in</span><br/>  d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">127</span><br/>\u00a0<br/><span class=\"kw1\">let</span> strip f str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create len <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i j <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> len <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub res <span class=\"nu0\">0</span> j <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">if</span> f str<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> j<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>      res<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">32</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create len <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> len <span class=\"kw1\">do</span><br/>    s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int\"><span class=\"kw3\">char_of_int</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>strip is_control_code s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>strip <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>is_control_code c<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>is_extended_char c<span class=\"br0\">)</span><span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Pascal", "loc": 26, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> StripCharacters<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Strip <span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> control<span class=\"sy1\">,</span> extended<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    <span class=\"kw1\">index</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Strip <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">index</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>control <span class=\"kw3\">and</span> <span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"br0\">)</span> &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>extended <span class=\"kw3\">and</span> <span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">127</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Strip <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Strip <span class=\"sy3\">+</span> s<span class=\"br0\">[</span><span class=\"kw1\">index</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  test<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  setlength<span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> length<span class=\"br0\">(</span>test<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    test<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">+</span> random<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'Original: '</span><span class=\"sy1\">,</span> test<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'No CNTL:  '</span><span class=\"sy1\">,</span> Strip<span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span>  <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'No extnd: '</span><span class=\"sy1\">,</span> Strip<span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'ASCII:    '</span><span class=\"sy1\">,</span> Strip<span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span>  <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Peloton", "loc": 8, "block": "<pre class=\"text highlighted_source\">Create variable with control characters: &lt;@ SAYLETVARLIT&gt;i|This string has control characters <br/>\t-\t-\t-\t-\t-\t-<br/>\u00a0<br/>in it&lt;/@&gt;<br/>Strip control characters &lt;@ SAYSALVAR&gt;i&lt;/@&gt;<br/>Assign infix &lt;@ LETVARSALVAR&gt;j|i&lt;/@&gt; &lt;@ SAYVAR&gt;j&lt;/@&gt;<br/>Assign prepend &lt;@ LETSALVARVAR&gt;k|i&lt;/@&gt; &lt;@ SAYVAR&gt;k&lt;/@&gt;<br/>Reflexive assign &lt;@ ACTSALVAR&gt;i&lt;/@&gt; &lt;@ SAYVAR&gt;i&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w </span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@letters</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@nocontrols</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@noextended</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">40</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@letters</span> <span class=\"sy0\">,</span>  <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span> <span class=\"nu0\">256</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"before sanitation\u00a0: \"</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">''</span> <span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@letters</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/><span class=\"re0\">@nocontrols</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">32</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$_</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">127</span> <span class=\"br0\">}</span> <span class=\"re0\">@letters</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Without controls: \"</span> <span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">''</span> <span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@nocontrols</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"re0\">@noextended</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">127</span> <span class=\"br0\">}</span> <span class=\"re0\">@nocontrols</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Without extended: \"</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span> <span class=\"st_h\">''</span> <span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@noextended</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">chr</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;:Cc&gt;/</span><span class=\"sy0\">,</span>      <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># unicode property: control character</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;-[\\ ..~]&gt;/</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">function filter(string s, integer fromch=' ', toch=#7E, abovech=#7F)<br/>string res = \"\"<br/>    for i=1 to length(s) do<br/>        integer ch = s[i]<br/>        if ch&gt;=fromch and (ch&lt;=toch or ch&gt;abovech) then<br/>            res &amp;= ch<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>procedure put_line(string text, s)<br/>    printf(1,\"%s \\\"%s\\\", Length:%d\\n\",{text,s,length(s)})<br/>end procedure<br/>\u00a0<br/>string full = \"\\u0000 abc\\u00E9def\\u007F\"<br/>\u00a0<br/>put_line(\"The full string:\", full)<br/>put_line(\"No Control Chars:\", filter(full)) -- default values for fromch, toch, and abovech<br/>put_line(\"\\\" and no Extended:\", filter(full, abovech:=#FF)) -- defaults for fromch and toch</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(de stripCtrl (Str)<br/>   (pack<br/>      (filter<br/>         '((C)<br/>            (nor (= \"^?\" C) (&gt; \" \" C \"^A\")) )<br/>         (chop Str) ) ) )<br/>\u00a0<br/>(de stripCtrlExt (Str)<br/>   (pack<br/>      (filter<br/>         '((C) (&gt; \"^?\" C \"^_\"))<br/>         (chop Str) ) ) )</pre>"}, {"lang": "Pike", "loc": 3, "block": "<pre class=\"pike highlighted_source\">&gt; string input <span class=\"sy0\">=</span> random_string<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>&gt; <span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>input<span class=\"sy0\">-</span>enumerate<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>enumerate<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">-</span><span class=\"nu0\">126</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">127</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"st0\">\"p_xx08M]cK&lt;FHgR3<span class=\"es0\">\\\\</span>I.x&gt;)Tm&lt;VgakYddy&amp;P7\"</span></pre>"}, {"lang": "PL/I", "loc": 67, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>stripper: proc options (main);<br/>   declare s character (100) varying;<br/>   declare i fixed binary;<br/>\u00a0<br/>   s = 'the quick brown fox jumped';<br/>   /* A loop to replace blanks with control characters */<br/>   do i = 1 to length(s);<br/>      if substr(s, i, 1) = ' ' then<br/>         substr(s, i, 1) = '01'x;<br/>   end;<br/>   put skip list (s);<br/>\u00a0<br/>   call stripcc (s);<br/>   put skip list (s);<br/>\u00a0<br/>   s = 'now is the time for all good men';<br/>   /* A loop to replace blanks with control characters */<br/>   do i = 1 to length(s);<br/>      if substr(s, i, 1) = ' ' then<br/>         substr(s, i, 1) = 'A1'x;<br/>   end;<br/>   put skip list (s);<br/>\u00a0<br/>   call stripex (s);<br/>   put skip list (s);<br/>\u00a0<br/>/* Strip control codes. */<br/>stripcc: procedure (s);<br/>   declare s character (*) varying;<br/>   declare w character (length(s));<br/>   declare c character (1);<br/>   declare (i, j) fixed binary;<br/>\u00a0<br/>   j = 0;<br/>   do i = 1 to length (s);<br/>      c = substr(s, i, 1);<br/>      if unspec(c) &gt;= '00100000'b | unspec(c) = '01111111'b then<br/>         do;<br/>            j = j + 1;<br/>            substr(w, j, 1) = c;<br/>         end;<br/>   end;<br/>   s = substr(w, 1, j);<br/>end stripcc;<br/>\u00a0<br/>/* Strips control codes and extended characters. */<br/>stripex: procedure (s);<br/>   declare s character (*) varying;<br/>   declare w character (length(s));<br/>   declare c character (1);<br/>   declare (i, j) fixed binary;<br/>\u00a0<br/>   j = 0;<br/>   do i = 1 to length (s);<br/>      c = substr(s, i, 1);<br/>      if unspec(c) &gt;= '00100000'b &amp; unspec(c) &lt; '01111111'b then<br/>         do;<br/>            j = j + 1;<br/>            substr(w, j, 1) = c;<br/>         end;<br/>   end;<br/>   s = substr(w, 1, j);<br/>end stripex;<br/>\u00a0<br/>end stripper;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 49, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Remove<span class=\"sy0\">-</span>Character<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span>DefaultParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Control and Extended\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipelineByPropertyName<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$String</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Control\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Control</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"Extended\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Extended</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">filter</span> Remove<span class=\"sy0\">-</span>ControlCharacter<br/>        <span class=\"br0\">{</span><br/>            <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::IsControl<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">filter</span> Remove<span class=\"sy0\">-</span>ExtendedCharacter<br/>        <span class=\"br0\">{</span><br/>            <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-lt</span> <span class=\"nu0\">127</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"kw3\">in</span> <span class=\"re0\">$String</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$PSCmdlet</span>.ParameterSetName<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"Control\"</span>  <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">|</span> Remove<span class=\"sy0\">-</span>ControlCharacter<span class=\"br0\">}</span><br/>                <span class=\"st0\">\"Extended\"</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">|</span> Remove<span class=\"sy0\">-</span>ExtendedCharacter<span class=\"br0\">}</span><br/>                Default    <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">|</span> Remove<span class=\"sy0\">-</span>ExtendedCharacter <span class=\"sy0\">|</span> Remove<span class=\"sy0\">-</span>ControlCharacter<span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 38, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s stripControlCodes<span class=\"br0\">(</span>source.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, <span class=\"sy0\">*</span>ptrChar.Character, length <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span>, result.s<br/>  <span class=\"sy0\">*</span>ptrChar <span class=\"sy0\">=</span> @source<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> length<br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>ptrChar<span class=\"sy0\">\\</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">31</span> <br/>      result <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ptrChar<span class=\"sy0\">\\</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"sy0\">*</span>ptrChar <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s stripControlExtCodes<span class=\"br0\">(</span>source.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, <span class=\"sy0\">*</span>ptrChar.Character, length <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span>, result.s<br/>  <span class=\"sy0\">*</span>ptrChar <span class=\"sy0\">=</span> @source<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> length<br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>ptrChar<span class=\"sy0\">\\</span>c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">31</span> <span class=\"kw1\">And</span> <span class=\"sy0\">*</span>ptrChar<span class=\"sy0\">\\</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">128</span><br/>      result <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ptrChar<span class=\"sy0\">\\</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"sy0\">*</span>ptrChar <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;create sample string</span><br/>  <span class=\"kw1\">Define</span> i, s.s<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">80</span><br/>    s <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">254</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;include character values from 1 to 255</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>stripControlCodes<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">;string without control codes </span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"---------\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>stripControlExtCodes<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;string without control codes or extended chars</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\">stripped <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> s: <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> s <span class=\"kw1\">if</span> <span class=\"nu0\">31</span> <span class=\"sy0\">&lt;</span> <span class=\"kw2\">ord</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">127</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>stripped<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\b</span>a<span class=\"es0\">\\x</span>00b<span class=\"es0\">\\n</span><span class=\"es0\">\\r</span>c<span class=\"es0\">\\f</span>d<span class=\"es0\">\\x</span>c3\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;; Works on both strings (Unicode) and byte strings (raw/ASCII)<br/>(define (strip-controls str)<br/>  (regexp-replace* #rx\"[\\0-\\037\\177]+\" str \"\"))<br/>(define (strip-controls-and-extended str)<br/>  (regexp-replace* #rx\"[^\\040-\\176]+\" str \"\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 10, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program strips all  \"control codes\"  from a character string  (ASCII or EBCDIC). */</span><br/>z= <span class=\"st0\">'string of \u263a\u263b\u2665\u2666\u2302, may include control characters and other    \u266b\u263c\u00a7\u25ba\u2194\u25c4\u2591\u2592\u2593\u2588\u250c\u2534\u2510\u00b1\u00f7\u00b2\u00ac\u2514\u252c\u2518ilk.'</span><br/>@=<span class=\"st0\">'\u00a0!\"#$%&amp;'</span><span class=\"st0\">'()*+,-./0123456789:;&lt;=&gt;<a class=\"__cf_email__\" data-cfemail=\"a19ee1e0e3e2e5e4e7e6e9e8ebeaedecefeef1f0f3f2f5f4f7f6f9f8fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'</span><br/>$=<br/>   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>;   _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>z, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*get a char from   X   one at a time. */</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw6\">verify</span><span class=\"br0\">(</span>_, @<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> $=$ <span class=\"sy0\">||</span> _             <span class=\"coMULTI\">/*Is char in the @ list?   Then use it.*/</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'old =\u00a0\u00bb\u00bb\u00bb'</span>z<span class=\"st0\">\"\u00ab\u00ab\u00ab\"</span>                            <span class=\"coMULTI\">/*add \u00ab\u00abfence\u00bb\u00bb before &amp; after old text*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'new =\u00a0\u00bb\u00bb\u00bb'</span>$<span class=\"st0\">\"\u00ab\u00ab\u00ab\"</span>                            <span class=\"coMULTI\">/* \"      \"        \"   \"   \"   new   \" */</span></pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s = char(31) + \"abc\" + char(13) + \"def\" + char(11) + \"ghi\" + char(10)<br/>see strip(s) + nl<br/>\u00a0<br/>func strip str<br/>strip = \"\"<br/>for i = 1 to len(str)<br/>    nr = substr(str,i,1)<br/>    a = ascii(nr)<br/>    if a &gt; 31 and a &lt; 123 and nr\u00a0!= \"'\" and nr\u00a0!= \"\"\"\"<br/>       strip = strip + nr ok<br/>next <br/>return strip<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 17, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> strip_control_characters<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    chars.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>char, str<span class=\"sy0\">|</span><br/>      str <span class=\"sy0\">&lt;&lt;</span> char <span class=\"kw1\">unless</span> char.<span class=\"me1\">ascii_only</span>? <span class=\"kw1\">and</span> <span class=\"br0\">(</span>char.<span class=\"me1\">ord</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span> <span class=\"kw1\">or</span> char.<span class=\"me1\">ord</span> == <span class=\"nu0\">127</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> strip_control_and_extended_characters<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    chars.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>char, str<span class=\"sy0\">|</span><br/>      str <span class=\"sy0\">&lt;&lt;</span> char <span class=\"kw1\">if</span> char.<span class=\"me1\">ascii_only</span>? <span class=\"kw1\">and</span> char.<span class=\"me1\">ord</span>.<span class=\"me1\">between</span>?<span class=\"br0\">(</span><span class=\"nu0\">32</span>,<span class=\"nu0\">126</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> s = <span class=\"st0\">\"<span class=\"es0\">\\b</span>a<span class=\"es0\">\\x</span>00b<span class=\"es0\">\\n</span><span class=\"es0\">\\r</span>c<span class=\"es0\">\\f</span>d<span class=\"es0\">\\x</span>c3<span class=\"es0\">\\x</span>7ffoo\"</span><br/><span class=\"kw3\">p</span> s.<span class=\"me1\">strip_control_characters</span><br/><span class=\"kw3\">p</span> s.<span class=\"me1\">strip_control_and_extended_characters</span></pre>"}, {"lang": "Run BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">s$ = chr$(31) + \"abc\" + chr$(13) + \"def\" + chr$(11) + \"ghi\" + chr$(10)<br/>print strip$(s$)<br/>\u00a0<br/>' -----------------------------------------<br/>' strip junk <br/>' -----------------------------------------<br/>FUNCTION strip$(str$)<br/>for i = 1 to len(str$)<br/>  a$ = MID$(str$,i,1)<br/>  a = ASC(a$)<br/>  if a &gt; 31 then<br/>    if a &lt;  123 then<br/>      if a$ &lt;&gt; \"'\" then<br/>        if a$ &lt;&gt; \"\"\"\" then<br/>          strip$ = strip$ + a$<br/>        end if<br/>      end if<br/>    end if<br/>  end if<br/>next i<br/>END FUNCTION</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> controlCode <span class=\"sy0\">:</span> <span class=\"br0\">(</span>Char<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">:</span>Char<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">32</span> || c <span class=\"sy0\">==</span> <span class=\"nu0\">127</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> extendedCode <span class=\"sy0\">:</span> <span class=\"br0\">(</span>Char<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">:</span>Char<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">32</span> || c <span class=\"sy0\">&gt;</span> <span class=\"nu0\">127</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// ASCII test...</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> teststring <span class=\"sy0\">=</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">toChar</span> to <span class=\"nu0\">254</span>.<span class=\"me1\">toChar</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span> <span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"ctrl filtered out: <span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span> + <br/>  teststring.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span>controlCode<span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"ctrl and extended filtered out: <span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span> + <br/>  teststring.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span>controlCode<span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span>extendedCode<span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 51, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"utf8.s7i\";<br/>\u00a0<br/>const func string: stripControl (in string: stri) is func<br/>  result<br/>    var string: stripped is \"\";<br/>  local<br/>    var integer: old_pos is 1;<br/>    var integer: index is 0;<br/>    var char: ch is ' ';<br/>  begin<br/>    for ch key index range stri do<br/>      if ch &lt; ' ' or ch = '\\127;' then<br/>        stripped &amp;:= stri[old_pos .. pred(index)];<br/>        old_pos\u00a0:= succ(index);<br/>      end if;<br/>    end for;<br/>    stripped &amp;:= stri[old_pos ..];<br/>  end func;<br/>\u00a0<br/>const func string: stripControlAndExtended (in string: stri) is func<br/>  result<br/>    var string: stripped is \"\";<br/>  local<br/>    var integer: old_pos is 1;<br/>    var integer: index is 0;<br/>    var char: ch is ' ';<br/>  begin<br/>    for ch key index range stri do<br/>      if ch &lt; ' ' or ch &gt;= '\\127;' then<br/>        stripped &amp;:= stri[old_pos .. pred(index)];<br/>        old_pos\u00a0:= succ(index);<br/>      end if;<br/>    end for;<br/>    stripped &amp;:= stri[old_pos ..];<br/>  end func;<br/>\u00a0<br/>const string: src is \"d\u00e9j\u00e0 vu\\              # Unicode<br/>    \\\\n\\0;\\31; \\33;\\126;\\127;\\128;\\255;\\n\\  # Various boundary cases<br/>    \\as\u20dddf\u0305\";                                 # Unicode combining characters<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    OUT\u00a0:= STD_UTF8_OUT;<br/>    writeln(\"source text:\");<br/>    writeln(src);<br/>    writeln(\"Stripped of control codes:\");<br/>    writeln(stripControl(src));<br/>    writeln(\"Stripped of control codes and extended characters:\");<br/>    writeln(stripControlAndExtended(src));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">var str = <span class=\"st0\">\"<span class=\"es0\">\\b</span>a<span class=\"es0\">\\x</span>00b<span class=\"es0\">\\n</span><span class=\"es0\">\\r</span>c<span class=\"es0\">\\f</span>d<span class=\"es0\">\\x</span>c3<span class=\"es0\">\\x</span>7ffoo\"</span><br/>\u00a0<br/>var letters = str.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">ord</span><span class=\"br0\">}</span><br/>say letters.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span>.<span class=\"me1\">dump</span><br/>\u00a0<br/>var nocontrols = letters.<span class=\"me1\">grep</span><span class=\"br0\">{</span> <span class=\"br0\">(</span>_ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>_\u00a0!= <span class=\"nu0\">127</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>say nocontrols.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span>.<span class=\"me1\">dump</span><br/>\u00a0<br/>var noextended = nocontrols.<span class=\"me1\">grep</span><span class=\"br0\">{</span> _ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">127</span> <span class=\"br0\">}</span><br/>say noextended.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span>.<span class=\"me1\">dump</span></pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> stripAsciiCC str <span class=\"br0\">{</span><br/>    <span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span><span class=\"br0\">[</span>\\u0000-\\u001f\\u007f<span class=\"br0\">]</span>+<span class=\"br0\">}</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> stripCC str <span class=\"br0\">{</span><br/>    <span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span><span class=\"br0\">[</span>^\\u0020-\\u007e<span class=\"br0\">]</span>+<span class=\"br0\">}</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">#$&amp;@;_`abcdefghijklmnopqrstuvwxyz|~</pre>"}, {"lang": "TXR", "loc": 5, "block": "<pre class=\"text highlighted_source\">(defun strip-controls (str)<br/> (regsub #/[\\x0-\\x1F\\x7F]+/ \"\" str))<br/>\u00a0<br/>(defun strip-controls-and-extended (str)<br/>  (regsub #/[^\\x20-\\x7F]+/ \"\" str))</pre>"}, {"lang": "VBScript", "loc": 28, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> StripCtrlCodes(s)<br/>\ttmp = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(s)<br/>\t\tn = Asc(Mid(s,i,1))<br/>\t\t<span class=\"kw3\">If</span> (n &gt;= 32 <span class=\"kw3\">And</span> n &lt;= 126) <span class=\"kw3\">Or</span> n &gt;=128 <span class=\"kw3\">Then</span><br/>\t\t\ttmp = tmp &amp; Mid(s,i,1)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tStripCtrlCodes = tmp\t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> StripCtrlCodesExtChrs(s)<br/>\ttmp = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(s)<br/>\t\tn = Asc(Mid(s,i,1))<br/>\t\t<span class=\"kw3\">If</span> n &gt;= 32 <span class=\"kw3\">And</span> n &lt;= 126 <span class=\"kw3\">Then</span><br/>\t\t\ttmp = tmp &amp; Mid(s,i,1)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tStripCtrlCodesExtChrs = tmp\t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"ab\ufffdcd\ufffdef\ufffdgh?\u20ac\"</span> &amp; <span class=\"st0\">\" = \"</span> &amp; StripCtrlCodes(<span class=\"st0\">\"ab\ufffdcd\ufffdef\ufffdgh?\u20ac\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"ab\ufffdcd\ufffdef\ufffdgh?ij\u2020kl\u00f0\u20ac\"</span> &amp; <span class=\"st0\">\" = \"</span> &amp; StripCtrlCodesExtChrs(<span class=\"st0\">\"ab\ufffdcd\ufffdef\ufffdgh?ij\u2020kl\u00f0\u20ac\"</span>)<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 29, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>string 0;                       \\use zero-terminated string convention<br/>\u00a0<br/>proc Strip(Str, Both);          \\Strip out control and optionally extended chars<br/>char Str; int Both;<br/>int  I, J, C;<br/>[I:= 0;<br/>while Str(I) do<br/>    [C:= Str(I);<br/>    if Both then C:= extend(C); \\if stripping extended chars too, extend sign<br/>    if C&lt;$20 or C=$7F then<br/>        [J:= I;                 \\eliminate char by shifting string down over it<br/>        repeat  C:= Str(J+1);<br/>                Str(J):= C;<br/>                J:= J+1;<br/>        until   C=0;<br/>        ]<br/>    else I:= I+1;<br/>    ];<br/>];<br/>\u00a0<br/>char String;<br/>[String:= \"Hello^M^J World \u00e0\u00e1\u00e2\u00e3\";<br/>Text(0, String);  CrLf(0);<br/>Strip(String, false);<br/>Text(0, String);  CrLf(0);<br/>Strip(String, true);<br/>Text(0, String);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">var ctlCodes=([1..31].pump(String,\"toChar\") +(127).toChar());<br/>var extdChars=[127..255].pump(String,\"toChar\");<br/>\u00a0<br/>var test = \"string of \u263a\u263b\u2665\u2666\u2302, control characters(\\t\\b\\e) and other ilk.\u266b\u263c\u00a7\u25ba\u2194\u25c4\";<br/>test.println(\"&lt;&lt; test string\");<br/>(test-ctlCodes).println(\"&lt;&lt; no control chars\");<br/>(test-extdChars).println(\"&lt;&lt; no extended chars\");<br/>(test-extdChars-ctlCodes).println(\"&lt;&lt; text\");<br/>\u00a0</pre>"}]}