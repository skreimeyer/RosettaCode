{"task": "Gray_code", "blocks": [{"lang": "Ada", "loc": 47, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Interfaces;<br/><span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>, Interfaces;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Gray <span class=\"kw1\">is</span><br/>\u00a0<br/>   Bits\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">5</span>; <span class=\"co1\">-- Change only this line for 6 or 7-bit encodings</span><br/>   <span class=\"kw3\">subtype</span> Values <span class=\"kw1\">is</span> Unsigned_8 <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span> ** Bits - <span class=\"nu0\">1</span>;<br/>   <span class=\"kw3\">package</span> Values_Io <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Modular_IO</span> <span class=\"br0\">(</span>Values<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Encode <span class=\"br0\">(</span>Binary\u00a0: Values<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Values <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Binary <span class=\"kw2\">xor</span> Shift_Right <span class=\"br0\">(</span>Binary, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Encode;<br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span>Encode<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Decode <span class=\"br0\">(</span>Gray\u00a0: Values<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Values <span class=\"kw1\">is</span><br/>      Binary, Bit\u00a0: Values;<br/>      Mask       \u00a0: Values\u00a0:= <span class=\"nu0\">2</span> ** <span class=\"br0\">(</span>Bits - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Bit   \u00a0:= Gray <span class=\"kw2\">and</span> Mask;<br/>      Binary\u00a0:= Bit;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">2</span> .. <span class=\"me1\">Bits</span> <span class=\"kw1\">loop</span><br/>         Bit   \u00a0:= Shift_Right <span class=\"br0\">(</span>Bit, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         Mask  \u00a0:= Shift_Right <span class=\"br0\">(</span>Mask, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         Bit   \u00a0:= <span class=\"br0\">(</span>Gray <span class=\"kw2\">and</span> Mask<span class=\"br0\">)</span> <span class=\"kw2\">xor</span> Bit;<br/>         Binary\u00a0:= Binary + Bit;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Binary;<br/>   <span class=\"kw1\">end</span> Decode;<br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span>Decode<span class=\"br0\">)</span>;<br/>\u00a0<br/>   HT\u00a0: <span class=\"kw3\">constant</span> Character\u00a0:= Character'Val <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>   J \u00a0: Values;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Num\"</span> &amp; HT &amp; <span class=\"st0\">\"Binary\"</span> &amp; HT &amp; HT &amp; <span class=\"st0\">\"Gray\"</span> &amp; HT &amp; HT &amp; <span class=\"st0\">\"decoded\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Values'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      J\u00a0:= Encode <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      Values_Io.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>I, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\": \"</span> &amp; HT<span class=\"br0\">)</span>;<br/>      Values_Io.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>I, Bits + <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\" =&gt;\"</span> &amp; HT<span class=\"br0\">)</span>;<br/>      Values_Io.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>J, Bits + <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\" =&gt; \"</span> &amp; HT<span class=\"br0\">)</span>;<br/>      Values_Io.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Decode <span class=\"br0\">(</span>J<span class=\"br0\">)</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      New_Line;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Gray;</pre>"}, {"lang": "Aime", "loc": 18, "block": "<pre class=\"text highlighted_source\">integer<br/>gray_encode(integer n)<br/>{<br/>    n ^ (n &gt;&gt; 1);<br/>}<br/>\u00a0<br/>integer<br/>gray_decode(integer n)<br/>{<br/>    integer p;<br/>\u00a0<br/>    p = n;<br/>    while (n &gt;&gt;= 1) {<br/>        p ^= n;<br/>    }<br/>\u00a0<br/>    p;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">OP</span> GRAY <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> b<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span> <span class=\"sy1\">:</span> b XOR <span class=\"br0\">(</span>b <span class=\"kw11\">SHR</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"co1\">CO Convert to Gray code CO</span><br/>   <span class=\"kw4\">OP</span> YARG <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> g<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span> <span class=\"sy1\">:</span>\t\t\t<span class=\"co1\">CO Convert from Gray code CO</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">BITS</span> b <span class=\"sy1\">:=</span> g<span class=\"sy1\">,</span> mask <span class=\"sy1\">:=</span> g <span class=\"kw11\">SHR</span> 1<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">WHILE</span> mask <span class=\"sy1\">/=</span> <span class=\"re0\">2r0</span> <span class=\"kw2\">DO</span> b <span class=\"sy1\">:=</span> b XOR mask<span class=\"sy1\">;</span> mask <span class=\"sy1\">:=</span> mask <span class=\"kw11\">SHR</span> 1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      b<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 31 <span class=\"kw2\">DO</span><br/>      <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$zd<span class=\"sy1\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy1\">,</span> 2<span class=\"br0\">(</span>2r5d<span class=\"sy1\">,</span> <span class=\"st0\">\" &gt;= \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> 2r5dl$<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> <span class=\"kw8\">BIN</span> i<span class=\"sy1\">,</span> GRAY <span class=\"kw8\">BIN</span> i<span class=\"sy1\">,</span> YARG GRAY <span class=\"kw8\">BIN</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">N\u21905<br/>({(0,\u2375)\u236a1,\u2296\u2375}\u2363N)(1 0\u2374\u236c)</pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"ahk highlighted_source\">gray_encode<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>gray_decode<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tp <span class=\"sy0\">:=</span> n<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tp <span class=\"sy0\">^=</span> n<br/>\t<span class=\"kw1\">return</span> p<br/><span class=\"br0\">}</span><br/>\u00a0<br/>BinString<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">5</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\to <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">.</span> o<br/>\t\t<span class=\"kw1\">else</span>\to <span class=\"sy0\">:=</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">.</span> o<br/>\t<span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">32</span><br/>\tn<span class=\"sy0\">:=</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> out <span class=\"sy0\">.=</span> n <span class=\"st0\">\"\u00a0: \"</span> BinString<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"st0\">\" =&gt; \"</span> BinString<span class=\"br0\">(</span>e<span class=\"sy0\">:=</span>gray_encode<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\" =&gt; \"</span> BinString<span class=\"br0\">(</span>gray_decode<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" =&gt; \"</span> BinString<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> out</pre>"}, {"lang": "BBC BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"STRINGLIB\"<br/>\u00a0<br/>      PRINT \"   Decimal    Binary      Gray   Decoded\"<br/>      FOR number% = 0 TO 31<br/>        gray% = FNgrayencode(number%)<br/>        PRINT number% \"     \" FN_tobase(number%, 2, 5)\u00a0;<br/>        PRINT \"     \" FN_tobase(gray%, 2, 5) FNgraydecode(gray%)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNgrayencode(B%) = B% EOR (B% &gt;&gt;&gt; 1)<br/>\u00a0<br/>      DEF FNgraydecode(G%)\u00a0: LOCAL B%<br/>      REPEAT B% EOR= G%\u00a0: G% = G% &gt;&gt;&gt; 1\u00a0: UNTIL G% = 0<br/>      = B%</pre>"}, {"lang": "bc", "loc": 46, "block": "<pre class=\"text highlighted_source\">scale = 0  /* to use integer division */<br/>\u00a0<br/>/* encode Gray code */<br/>define e(i) {<br/>\tauto h, r<br/>\u00a0<br/>\tif (i &lt;= 0) return 0<br/>\th = i / 2<br/>\tr = e(h) * 2                /* recurse */<br/>\tif (h\u00a0% 2\u00a0!= i\u00a0% 2) r += 1  /* xor low bits of h, i */<br/>\treturn r<br/>}<br/>\u00a0<br/>/* decode Gray code */<br/>define d(i) {<br/>\tauto h, r<br/>\u00a0<br/>\tif (i &lt;= 0) return 0<br/>\th = d(i / 2)                /* recurse */<br/>\tr = h * 2<br/>\tif (h\u00a0% 2\u00a0!= i\u00a0% 2) r += 1  /* xor low bits of h, i */<br/>\treturn r<br/>}<br/>\u00a0<br/>\u00a0<br/>/* print i as 5 binary digits */<br/>define p(i) {<br/>\tauto d, d[]<br/>\u00a0<br/>\tfor (d = 0; d &lt;= 4; d++) {<br/>\t\td[d] = i\u00a0% 2<br/>\t\ti /= 2<br/>\t}<br/>\tfor (d = 4; d &gt;= 0; d--) {<br/>\t\tif(d[d] == 0) \"0\"<br/>\t\tif(d[d] == 1) \"1\"<br/>\t}<br/>}<br/>\u00a0<br/>for (i = 0; i &lt; 32; i++) {<br/>\t/* original */ t = p(i); \" =&gt; \"<br/>\t/* encoded */ e = e(i); t = p(e); \" =&gt; \"<br/>\t/* decoded */ d = d(e); t = p(d); \"<br/>\"<br/>}<br/>quit</pre>"}, {"lang": "C", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> gray_encode<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> gray_decode<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> p <span class=\"sy0\">^=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;bitset&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> gray_encode<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> b <span class=\"sy3\">^</span> <span class=\"br0\">(</span>b <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> gray_decode<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> g<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> bit <span class=\"sy1\">=</span> 1U <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">31</span><span class=\"sy4\">;</span> bit <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> bit <span class=\"sy1\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>g <span class=\"sy3\">&amp;</span> bit<span class=\"br0\">)</span> g <span class=\"sy3\">^</span><span class=\"sy1\">=</span> bit <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> g<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> to_binary<span class=\"br0\">(</span><span class=\"kw4\">int</span> value<span class=\"br0\">)</span> <span class=\"co1\">// utility function</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span><span class=\"nu0\">32</span><span class=\"sy1\">&gt;</span> bs<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> str<span class=\"br0\">(</span>bs.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> pos<span class=\"br0\">(</span>str.<span class=\"me1\">find</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> pos <span class=\"sy1\">==</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"0\"</span> <span class=\"sy4\">:</span> str.<span class=\"me1\">substr</span><span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Number<span class=\"es1\">\\t</span>Binary<span class=\"es1\">\\t</span>Gray<span class=\"es1\">\\t</span>Decoded<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint32_t</span> g <span class=\"sy1\">=</span> gray_encode<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">assert</span><span class=\"br0\">(</span>gray_decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy1\">==</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> to_binary<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> to_binary<span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> g <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>\u00a0<br/>public class Gray <span class=\"br0\">{</span><br/>    public <span class=\"kw4\">static</span> ulong grayEncode<span class=\"br0\">(</span>ulong n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">^</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    public <span class=\"kw4\">static</span> ulong grayDecode<span class=\"br0\">(</span>ulong n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ulong i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"nu0\">64</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">//long is 64-bit</span><br/>        ulong p<span class=\"sy0\">,</span> b<span class=\"sy0\">=</span>p<span class=\"sy0\">=</span>n<span class=\"sy0\">&amp;</span>i<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">&gt;&gt;=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            b<span class=\"sy0\">|=</span>p<span class=\"sy0\">=</span>n<span class=\"sy0\">&amp;</span>i<span class=\"sy0\">^</span>p<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    public <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Number<span class=\"es1\">\\t</span>Binary<span class=\"es1\">\\t</span>Gray<span class=\"es1\">\\t</span>Decoded\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>ulong i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">32</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>string.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}<span class=\"es1\">\\t</span>{1}<span class=\"es1\">\\t</span>{2}<span class=\"es1\">\\t</span>{3}\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> Convert.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Convert.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span>grayEncode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> grayDecode<span class=\"br0\">(</span>grayEncode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 12, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>gray_encode = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  n <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>gray_decode = <span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  n = g<br/>  n <span class=\"sy0\">^</span>= g <span class=\"kw1\">while</span> g <span class=\"sy0\">&gt;&gt;</span>= <span class=\"nu0\">1</span><br/>  n<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">32</span><span class=\"br0\">]</span><br/>  console.<span class=\"me1\">log</span> gray_decode gray_encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> gray-encode <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">logxor</span> n <span class=\"br0\">(</span>ash n -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> gray-decode <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p n <span class=\"br0\">(</span><span class=\"kw1\">logxor</span> p n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> n <span class=\"br0\">(</span>ash n -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for i to <span class=\"nu0\">31</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"br0\">(</span>gray-encode i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span>gray-decode g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>format t <span class=\"st0\">\"~2d:~6b =&gt;~6b =&gt;~6b\u00a0:~2d~%\"</span> i i g b b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 53, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> GrayCodes;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>SYSTEM;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Encode<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; OUT x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>\tj<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ts<span class=\"sy0\">,</span>r<span class=\"sy0\">:</span> <span class=\"kw4\">SET</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ts <span class=\"sy0\">:=</span> BITS<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;j <span class=\"sy0\">:=</span> <span class=\"kw3\">MAX</span><span class=\"br0\">(</span><span class=\"kw4\">SET</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>; <br/>\tr <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>;<span class=\"kw1\">IF</span> j &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INCL</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">WHILE</span> j &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INCL</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tx <span class=\"sy0\">:=</span> SYSTEM.<span class=\"me1\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span>r<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Encode;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Decode<span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; OUT i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> <br/>\tj<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ts<span class=\"sy0\">,</span>r<span class=\"sy0\">:</span> <span class=\"kw4\">SET</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ts <span class=\"sy0\">:=</span> BITS<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;r<span class=\"sy0\">:=</span><span class=\"br0\">{</span><span class=\"br0\">}</span>;j <span class=\"sy0\">:=</span> <span class=\"kw3\">MAX</span><span class=\"br0\">(</span><span class=\"kw4\">SET</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">IF</span> j &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INCL</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">WHILE</span> j &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> r<span class=\"br0\">)</span> &amp; <span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"br0\">(</span>j <span class=\"kw1\">IN</span> r<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">IN</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INCL</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\ti <span class=\"sy0\">:=</span> SYSTEM.<span class=\"me1\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span>r<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Decode;<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tgrayCode<span class=\"sy0\">,</span>binCode<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" i \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"     bin code    \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"   gray code    \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"---\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" ----------------\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" ---------------\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">32</span> <span class=\"kw1\">DO</span>;<br/>\t\tEncode<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>grayCode<span class=\"br0\">)</span>;Decode<span class=\"br0\">(</span>grayCode<span class=\"sy0\">,</span>binCode<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">IntForm</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">IntForm</span><span class=\"br0\">(</span>binCode<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">IntForm</span><span class=\"br0\">(</span>grayCode<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> GrayCodes.<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> gray_encode<span class=\"br0\">(</span>bin<span class=\"br0\">)</span><br/>  bin ^ <span class=\"br0\">(</span>bin <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> gray_decode<span class=\"br0\">(</span>gray<span class=\"br0\">)</span><br/>  bin = gray<br/>  <span class=\"kw1\">while</span> gray <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    gray <span class=\"sy0\">&gt;&gt;</span>= <span class=\"nu0\">1</span><br/>    bin ^= gray<br/>  <span class=\"kw1\">end</span><br/>  bin<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">uint</span> grayEncode<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint</span> grayDecode<span class=\"br0\">(</span><span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> p <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        p <span class=\"sy0\">^=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\" N     N2      enc     dec2 dec\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> g <span class=\"sy0\">=</span> n.<span class=\"me1\">grayEncode</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> d <span class=\"sy0\">=</span> g.<span class=\"me1\">grayDecode</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%5b =&gt;\u00a0%5b =&gt;\u00a0%5b:\u00a0%2d\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>d <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 45, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> GrayCode<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Encode<span class=\"br0\">(</span>v<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v <span class=\"kw1\">xor</span> <span class=\"br0\">(</span>v <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Decode<span class=\"br0\">(</span>v<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> v &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"kw1\">xor</span> v<span class=\"sy1\">;</span><br/>    v <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntToBin<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span> aDigits<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">StringOfChar</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy1\">,</span> aDigits<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> aValue &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>aValue <span class=\"kw1\">and</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      Result<span class=\"br0\">[</span>aDigits<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Dec</span><span class=\"br0\">(</span>aDigits<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    aValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> g<span class=\"sy1\">,</span> d<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'decimal  binary   gray    decoded'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">31</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    g <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">' \u00a0%2d    \u00a0%s  \u00a0%s  \u00a0%s \u00a0%2d'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>i<span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>g<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>d<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> d<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 23, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Encode<span class=\"br0\">(</span>v <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v <span class=\"kw1\">xor</span> <span class=\"br0\">(</span>v <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Decode<span class=\"br0\">(</span>v <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">while</span> v&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"kw1\">xor</span> v<span class=\"sy1\">;</span><br/>\t  v <span class=\"sy1\">:</span><span class=\"sy3\">=</span> v <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span><span class=\"st0\">'decimal  binary   gray    decoded'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">31</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">var</span> g <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">var</span> d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   PrintLn<span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">' \u00a0%2d    \u00a0%s  \u00a0%s  \u00a0%s \u00a0%2d'</span><span class=\"sy1\">,</span><br/>                  <span class=\"br0\">[</span>i<span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>g<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> IntToBin<span class=\"br0\">(</span>d<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> d<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Gray_code do<br/>  use Bitwise<br/>  def encode(n), do: bxor(n, bsr(n,1))<br/>\u00a0<br/>  def decode(g), do: decode(g,0)<br/>\u00a0<br/>  def decode(0,n), do: n<br/>  def decode(g,n), do: decode(bsr(g,1), bxor(g,n))<br/>end<br/>\u00a0<br/>Enum.each(0..31, fn(n) -&gt;<br/>  g = Gray_code.encode(n)<br/>  d = Gray_code.decode(g)<br/> \u00a0:io.fwrite(\"~2B\u00a0: ~5.2.0B\u00a0: ~5.2.0B\u00a0: ~5.2.0B\u00a0: ~2B~n\", [n, n, g, d, d])<br/>end)</pre>"}, {"lang": "Erlang", "loc": 10, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>gray<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>encode<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> decode<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">encode</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span> <span class=\"kw2\">bxor</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">bsr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span><span class=\"sy1\">;</span><br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">G</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">G</span> <span class=\"kw2\">bsr</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span> <span class=\"kw2\">bxor</span> <span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 34, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> gray_encode<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">xor_bits</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span><span class=\"kw2\">floor</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> gray_decode<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> g<br/>    g <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        g <span class=\"sy1\">=</span> <span class=\"kw2\">xor_bits</span><span class=\"br0\">(</span>g<span class=\"sy2\">,</span>n<span class=\"br0\">)</span><br/>        n <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> g<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dcb<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> d<span class=\"sy2\">,</span>m<br/>    d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    m <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> n <span class=\"kw1\">do</span><br/>        d <span class=\"sy1\">+=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>m<br/>        n <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        m <span class=\"sy1\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> d<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> j<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> #<span class=\"nu0\">0</span> <span class=\"kw1\">to</span> #1F <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%05d =&gt; \"</span><span class=\"sy2\">,</span>dcb<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    j <span class=\"sy1\">=</span> gray_encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%05d =&gt; \"</span><span class=\"sy2\">,</span>dcb<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    j <span class=\"sy1\">=</span> gray_decode<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%05d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>dcb<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">USING: math.ranges locals\u00a0;<br/>IN: rosetta-gray<br/>\u00a0<br/>: gray-encode ( n -- n' ) dup -1 shift bitxor\u00a0;<br/>\u00a0<br/>:: gray-decode ( n! -- n' )<br/>   n\u00a0:&gt; p!<br/>   [ n -1 shift dup n! 0 = not ] [ <br/>     p n bitxor p! <br/>   ] while<br/>   p\u00a0;<br/>\u00a0<br/>: main ( -- ) <br/>  -1 32 [a,b] [ dup [ &gt;bin ] [ gray-encode ] bi [ &gt;bin ] [ gray-decode ] bi 4array . ] each\u00a0;<br/>\u00a0<br/>MAIN: main<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 22, "block": "<pre class=\"text highlighted_source\">: &gt;gray ( n -- n' ) dup 2/ xor\u00a0;   \\ n' = n xor (n logically right shifted 1 time)   <br/>                                               \\ 2/ is Forth divide by 2, ie: shift right 1                                                <br/>: gray&gt; ( n -- n )<br/>  0  1 31 lshift  ( -- g b mask )             <br/>  begin<br/>    &gt;r                                        \\ save a copy of mask on return stack<br/>     2dup 2/ xor<br/>     <a class=\"__cf_email__\" data-cfemail=\"611321\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> and or                               <br/>     r&gt; 1 rshift<br/>     dup 0=<br/>  until<br/>  drop nip\u00a0;                                  \\ clean the parameter stack leaving result only<br/>\u00a0<br/>: test<br/>  2 base\u00a0!                                    \\ set system number base to 2. ie: Binary<br/>  32 0 do<br/>    cr I  dup 5 .r .\"  ==&gt; \"                  \\ print numbers (binary) right justified 5 places<br/>    &gt;gray dup 5 .r .\"  ==&gt; \"  <br/>    gray&gt;     5 .r<br/>  loop<br/>  decimal\u00a0;                                   \\ revert to BASE 10<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 46, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">PROGRAM</span> GRAY<br/>      <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>      <span class=\"kw3\">INTEGER</span> IGRAY,I,J,K<br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span> A,B,C<br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">10</span> I<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,<span class=\"nu0\">31</span><br/>      J<span class=\"sy0\">=</span>IGRAY<span class=\"br0\">(</span>I,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      K<span class=\"sy0\">=</span>IGRAY<span class=\"br0\">(</span>J,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> BINARY<span class=\"br0\">(</span>A,I,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> BINARY<span class=\"br0\">(</span>B,J,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> BINARY<span class=\"br0\">(</span>C,K,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      PRINT <span class=\"nu0\">99</span>,I,A,B,C,K<br/>   <span class=\"nu0\">10</span> <span class=\"kw1\">CONTINUE</span><br/>   <span class=\"nu0\">99</span> FORMAT<span class=\"br0\">(</span>I2,3H <span class=\"sy0\">:</span> ,A5,4H <span class=\"sy0\">=</span>&gt; ,A5,4H <span class=\"sy0\">=</span>&gt; ,A5,3H <span class=\"sy0\">:</span> ,I2<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0<br/>      <span class=\"kw1\">FUNCTION</span> IGRAY<span class=\"br0\">(</span>N,D<span class=\"br0\">)</span><br/>      <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>      <span class=\"kw3\">INTEGER</span> D,K,N,IGRAY<br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>D.<span class=\"me1\">LT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/>      IGRAY<span class=\"sy0\">=</span><span class=\"kw4\">IEOR</span><span class=\"br0\">(</span>N,<span class=\"kw4\">ISHFT</span><span class=\"br0\">(</span>N,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">RETURN</span><br/>   <span class=\"nu0\">10</span> K<span class=\"sy0\">=</span>N<br/>      IGRAY<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>   <span class=\"nu0\">20</span> IGRAY<span class=\"sy0\">=</span><span class=\"kw4\">IEOR</span><span class=\"br0\">(</span>IGRAY,K<span class=\"br0\">)</span><br/>      K<span class=\"sy0\">=</span>K<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>K.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> BINARY<span class=\"br0\">(</span>S,N,K<span class=\"br0\">)</span><br/>      <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>      <span class=\"kw3\">INTEGER</span> I,K,L,N<br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> S<br/>      L<span class=\"sy0\">=</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">10</span> I<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,K<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"co1\">C The following line may replace the next block-if,</span><br/><span class=\"co1\">C on machines using ASCII code\u00a0:</span><br/><span class=\"co1\">C     S(L-I:L-I)=CHAR(48+IAND(1,ISHFT(N,-I)))</span><br/><span class=\"co1\">C On EBCDIC machines, use 240 instead of 48.</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw4\">BTEST</span><span class=\"br0\">(</span>N,I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      S<span class=\"br0\">(</span>L<span class=\"sy0\">-</span>I<span class=\"sy0\">:</span>L<span class=\"sy0\">-</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'1'</span><br/>      <span class=\"kw1\">ELSE</span><br/>      S<span class=\"br0\">(</span>L<span class=\"sy0\">-</span>I<span class=\"sy0\">:</span>L<span class=\"sy0\">-</span>I<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'0'</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>   <span class=\"nu0\">10</span> <span class=\"kw1\">CONTINUE</span><br/>      S<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"sy0\">-</span>K<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">''</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 41, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-01-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> gray2bin<span class=\"br0\">(</span>g <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> b = g<br/>\u00a0<br/>    <span class=\"kw1\">While</span> g <br/>        g <span class=\"kw1\">Shr</span>= <span class=\"nu0\">1</span><br/>        b <span class=\"kw1\">Xor</span>= g<br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> b<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> bin2gray<span class=\"br0\">(</span>b <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> b <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span>b <span class=\"kw1\">Shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" i     binary     gray   gra2bin\"</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"nu0\">32</span>,<span class=\"st0\">\"=\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">31</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"## --&gt; \"</span>; i;<br/>    <span class=\"kw1\">print</span> <span class=\"kw1\">Bin</span><span class=\"br0\">(</span>i,<span class=\"nu0\">5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" --&gt; \"</span>; <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Bin</span><span class=\"br0\">(</span>bin2gray<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>; <span class=\"st0\">\" --&gt; \"</span>;<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Bin</span><span class=\"br0\">(</span>gray2bin<span class=\"br0\">(</span>bin2gray<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i=0 to 31<br/>{<br/>   gray = binaryToGray[i]<br/>   back = grayToBinary[gray]<br/>   println[(i-&gt;binary) + \"\\t\" + (gray-&gt;binary) + \"\\t\" + (back-&gt;binary)]<br/>}<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> enc<span class=\"sy1\">(</span>b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> b <span class=\"sy3\">^</span> b&gt;&gt;<span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> dec<span class=\"sy1\">(</span>g <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> g <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> g &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        b <span class=\"sy2\">^=</span> g<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"decimal  binary   gray    decoded\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> b &lt; <span class=\"nu0\">32</span><span class=\"sy1\">;</span> b<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        g <span class=\"sy2\">:=</span> enc<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>        d <span class=\"sy2\">:=</span> dec<span class=\"sy1\">(</span>g<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\" \u00a0%2d    \u00a0%05b  \u00a0%05b  \u00a0%05b \u00a0%2d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> g<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 10, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> grayEncode <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>    i ^ <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> grayDecode<span class=\"sy0\">;</span><br/>grayDecode <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> code <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>code <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> h <span class=\"sy0\">=</span> grayDecode<span class=\"br0\">(</span>code <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">(</span>h <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>code ^ h<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 23, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>grayToBin <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> t<span class=\"sy0\">,</span> Bits t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>grayToBin <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>grayToBin g <span class=\"sy0\">=</span> g `xor` <span class=\"br0\">(</span>grayToBin <span class=\"sy0\">$</span> g `shiftR` <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>binToGray <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> t<span class=\"sy0\">,</span> Bits t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> t<br/>binToGray b <span class=\"sy0\">=</span> b `xor` <span class=\"br0\">(</span>b `shiftR` <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>showBinary <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> t<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showBinary n <span class=\"sy0\">=</span> showIntAtBase <span class=\"nu0\">2</span> intToDigit n <span class=\"st0\">\"\"</span><br/>\u00a0<br/>showGrayCode <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> t<span class=\"sy0\">,</span> Bits t<span class=\"sy0\">,</span> PrintfArg t<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showGrayCode num <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> bin  <span class=\"sy0\">=</span> showBinary num<br/>    <span class=\"kw1\">let</span> gray <span class=\"sy0\">=</span> showBinary <span class=\"br0\">(</span>binToGray num<span class=\"br0\">)</span><br/>    printf <span class=\"st0\">\"int:\u00a0%2d -&gt; bin:\u00a0%5s -&gt; gray:\u00a0%5s<span class=\"es0\">\\n</span>\"</span> num bin gray<br/>\u00a0<br/>main <span class=\"sy0\">=</span> forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">31</span><span class=\"sy0\">::</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> showGrayCode</pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> bitint<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\":\"</span><span class=\"sy0\">,</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>int2bit<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span><br/>                                          <span class=\"kw4\">right</span><span class=\"br0\">(</span>g <span class=\"sy0\">:=</span> gEncode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span><br/>                                          <span class=\"kw4\">right</span><span class=\"br0\">(</span>b <span class=\"sy0\">:=</span> gDecode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span><br/>                                          <span class=\"kw4\">right</span><span class=\"br0\">(</span>bit2int<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gEncode<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> int2bit<span class=\"br0\">(</span><span class=\"kw4\">ixor</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">ishift</span><span class=\"br0\">(</span>b<span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gDecode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    b <span class=\"sy0\">:=</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>g <span class=\"kw1\">do</span> b <span class=\"sy0\">||:=</span> <span class=\"kw1\">if</span> g<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"1\"</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">G2B=: ~:/\\&amp;.|:</pre>"}, {"lang": "Java", "loc": 23, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Gray <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> grayEncode<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> grayDecode<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">long</span> p <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tp <span class=\"sy0\">^=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"i<span class=\"es0\">\\t</span>Binary<span class=\"es0\">\\t</span>Gray<span class=\"es0\">\\t</span>Decoded\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">toBinaryString</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toBinaryString</span><span class=\"br0\">(</span>grayEncode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>grayDecode<span class=\"br0\">(</span>grayEncode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Javascript (ES2015)", "loc": 15, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw5\">export</span> <span class=\"kw1\">function</span> encode <span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> number <span class=\"sy0\">^</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw5\">export</span> <span class=\"kw1\">function</span> decode <span class=\"br0\">(</span>encodedNumber<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    let number <span class=\"sy0\">=</span> encodedNumber<br/>\u00a0<br/>    while <span class=\"br0\">(</span>encodedNumber <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        number <span class=\"sy0\">^=</span> encodedNumber<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> number<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">grayencode(n::Integer) = n \u22bb (n &gt;&gt; 1)<br/>function graydecode(n::Integer)<br/>    r = n<br/>    while (n &gt;&gt;= 1)\u00a0!= 0<br/>        r \u22bb= n<br/>    end<br/>    return r<br/>end</pre>"}, {"lang": "K", "loc": 8, "block": "<pre class=\"text highlighted_source\">   xor: {~x=y}<br/>   gray:{x[0],xor':x}<br/>\u00a0<br/>   / variant: using shift<br/>   gray1:{(x[0],xor[1_ x;-1_ x])}<br/>\u00a0<br/>   / variant: iterative<br/>   gray2:{x[0],{:[x[y-1]=1;~x[y];x[y]]}[x]'1+!(#x)-1}</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Gray <span class=\"br0\">{</span><br/>    fun encode<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n xor <span class=\"br0\">(</span>n shr <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun decode<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p  <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn <span class=\"sy0\">=</span> nn shr <span class=\"nu0\">1</span><br/>            p <span class=\"sy0\">=</span> p xor nn<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Number<span class=\"es1\">\\t</span>Binary<span class=\"es1\">\\t</span>Gray<span class=\"es1\">\\t</span>Decoded\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"$i<span class=\"es1\">\\t</span>${Integer.toBinaryString(i)}<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> Gray.<span class=\"me1\">encode</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${Integer.toBinaryString(g)}<span class=\"es1\">\\t</span>${Gray.decode(g)}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 57, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">for</span> r <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">31</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" Decimal \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"###\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">)</span>; <span class=\"st0\">\" is \"</span>;<br/>        B$ <span class=\"sy0\">=</span>dec2Bin$<span class=\"br0\">(</span> r<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" binary \"</span>; B$; <span class=\"st0\">\". Binary \"</span>; B$;<br/>        G$ <span class=\"sy0\">=</span>Bin2Gray$<span class=\"br0\">(</span> dec2Bin$<span class=\"br0\">(</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" is \"</span>; G$; <span class=\"st0\">\" in Gray code, or \"</span>;<br/>        B$ <span class=\"sy0\">=</span>Gray2Bin$<span class=\"br0\">(</span> G$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> B$; <span class=\"st0\">\" in pure binary.\"</span><br/>    <span class=\"kw1\">next</span> r<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> Bin2Gray$<span class=\"br0\">(</span> bin$<span class=\"br0\">)</span>   <span class=\"co1\">'   Given a binary number as a string, returns Gray code as a string.</span><br/>        g$ <span class=\"sy0\">=</span><span class=\"kw2\">left$</span><span class=\"br0\">(</span> bin$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> bin$<span class=\"br0\">)</span><br/>            bitA    <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> bin$<span class=\"sy0\">,</span> i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            bitB    <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> bin$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span>    <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            AXorB   <span class=\"sy0\">=</span>bitA <span class=\"kw1\">xor</span> bitB<br/>            g$      <span class=\"sy0\">=</span>g$ <span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> AXorB<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> i<br/>        Bin2Gray$ <span class=\"sy0\">=</span>g$<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> Gray2Bin$<span class=\"br0\">(</span> g$<span class=\"br0\">)</span>     <span class=\"co1\">'   Given a Gray code as a string, returns equivalent binary num. </span><br/>                                <span class=\"co1\">'      as a string</span><br/>        gl <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>   g$<span class=\"br0\">)</span><br/>        b$ <span class=\"sy0\">=</span><span class=\"kw2\">left$</span><span class=\"br0\">(</span> g$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> g$<span class=\"br0\">)</span><br/>            bitA    <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            bitB    <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> g$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span>    <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            AXorB   <span class=\"sy0\">=</span>bitA <span class=\"kw1\">xor</span> bitB<br/>            b$      <span class=\"sy0\">=</span>b$ <span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> AXorB<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> i<br/>        Gray2Bin$ <span class=\"sy0\">=</span><span class=\"kw2\">right$</span><span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> gl<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> dec2Bin$<span class=\"br0\">(</span> num<span class=\"br0\">)</span> <span class=\"co1\">'   Given an integer decimal, returns binary equivalent as a string</span><br/>        n <span class=\"sy0\">=</span>num<br/>        dec2Bin$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span> num <span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            dec2Bin$    <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> num <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>dec2Bin$<br/>            num         <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> num <span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">wend</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&gt;</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> nBits <span class=\"sy0\">=</span><span class=\"nu0\">16</span> <span class=\"kw1\">else</span> nBits <span class=\"sy0\">=</span><span class=\"nu0\">8</span><br/>        dec2Bin$ <span class=\"sy0\">=</span><span class=\"kw2\">right$</span><span class=\"br0\">(</span> <span class=\"st0\">\"0000000000000000\"</span> <span class=\"sy0\">+</span>dec2Bin$<span class=\"sy0\">,</span> nBits<span class=\"br0\">)</span>  <span class=\"co1\">'   Pad to 8 bit or 16 bit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> bin2Dec<span class=\"br0\">(</span> b$<span class=\"br0\">)</span>   <span class=\"co1\">'   Given a binary number as a string, returns decimal equivalent num.</span><br/>        t <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        d <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> b$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span>d <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            t   <span class=\"sy0\">=</span>t <span class=\"sy0\">+</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> b$<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"nu0\">2</span>^<span class=\"br0\">(</span> d <span class=\"sy0\">-</span>k<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> k<br/>        bin2Dec <span class=\"sy0\">=</span>t<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Limbo", "loc": 50, "block": "<pre class=\"text highlighted_source\">implement Gray;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>\tprint: import sys;<br/>include \"draw.m\";<br/>\u00a0<br/>Gray: module {<br/>\tinit: fn(nil: ref Draw-&gt;Context, args: list of string);<br/>\t# Export gray and grayinv so that this module can be used as either a<br/>\t# standalone program or as a library:<br/>\tgray: fn(n: int): int;<br/>\tgrayinv: fn(n: int): int;<br/>};<br/>\u00a0<br/>init(nil: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\tfor(i\u00a0:= 0; i &lt; 32; i++) {<br/>\t\tg\u00a0:= gray(i);<br/>\t\tf\u00a0:= grayinv(g);<br/>\t\tprint(\"%2d \u00a0%5s \u00a0%2d \u00a0%5s \u00a0%5s \u00a0%2d\\n\", i, binstr(i), g, binstr(g), binstr(f), f);<br/>\t}<br/>}<br/>\u00a0<br/>gray(n: int): int<br/>{<br/>\treturn n ^ (n &gt;&gt; 1);<br/>}<br/>\u00a0<br/>grayinv(n: int): int<br/>{<br/>\tr\u00a0:= 0;<br/>\twhile(n) {<br/>\t\tr ^= n;<br/>\t\tn &gt;&gt;= 1;<br/>\t}<br/>\treturn r;<br/>}<br/>\u00a0<br/>binstr(n: int): string<br/>{<br/>\tif(!n)<br/>\t\treturn \"0\";<br/>\ts\u00a0:= \"\";<br/>\twhile(n) {<br/>\t\ts = (string (n&amp;1)) + s;<br/>\t\tn &gt;&gt;= 1;<br/>\t}<br/>\treturn s;<br/>}</pre>"}, {"lang": "Logo", "loc": 13, "block": "<pre class=\"text highlighted_source\">to gray_encode\u00a0:number<br/>  output bitxor\u00a0:number lshift\u00a0:number -1<br/>end<br/>\u00a0<br/>to gray_decode\u00a0:code<br/>  local \"value<br/>  make \"value 0<br/>  while [:code &gt; 0] [<br/>    make \"value bitxor\u00a0:code\u00a0:value<br/>    make \"code lshift\u00a0:code -1<br/>  ]<br/>  output\u00a0:value<br/>end</pre>"}, {"lang": "Lua", "loc": 18, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> _M <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">local</span> bit  <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'bit'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> <span class=\"kw3\">math</span> <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'math'</span><span class=\"br0\">)</span><br/>\u00a0<br/>_M<span class=\"sy0\">.</span>encode <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> bit<span class=\"sy0\">.</span>bxor<span class=\"br0\">(</span>number<span class=\"sy0\">,</span> bit<span class=\"sy0\">.</span>rshift<span class=\"br0\">(</span>number<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>_M<span class=\"sy0\">.</span>decode <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>gray_code<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> gray_code <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    gray_code<span class=\"sy0\">,</span> value <span class=\"sy0\">=</span> bit<span class=\"sy0\">.</span>rshift<span class=\"br0\">(</span>gray_code<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> bit<span class=\"sy0\">.</span>bxor<span class=\"br0\">(</span>gray_code<span class=\"sy0\">,</span> value<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> value<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span> _M</pre>"}, {"lang": "M2000 Interpreter", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module GrayCode {<br/>      Function bin$(a) {<br/>            a$=\"\"<br/>            do {<br/>                  n= a mod 2<br/>                  a$=if$(n=1-&gt;\"1\", \"0\")+a$<br/>                  a=a div 2<br/>            } until a==0<br/>            =a$<br/>      }<br/>      Function GrayEncode(a) {<br/>            =binary.xor(a, binary.shift(a,-1))<br/>      }<br/>      Function GrayDecode(a) {<br/>            b=0<br/>            do {b=binary.xor(a, b)\u00a0: a=binary.shift(a,-1) } until a=0<br/>            =b<br/>      }<br/>      For i=0 to 32 {<br/>            g=GrayEncode(i)<br/>            b=GrayDecode(g)<br/>            Print format$(\"{0::-2} {1:-6} {2:-6} {3:-6} {4::-2}\", i, bin$(i), bin$(g), bin$(b), b)<br/>      }<br/>}<br/>GrayCode<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">graycode[n_]:=BitXor[n,BitShiftRight[n]]<br/>graydecode[n_]:=Fold[BitXor,0,FixedPointList[BitShiftRight,n]]</pre>"}, {"lang": "MATLAB", "loc": 45, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"co1\">%% Gray Code Generator</span><br/><span class=\"co1\">% this script generates gray codes of n bits</span><br/><span class=\"co1\">% total 2^n -1 continuous gray codes will be generated.</span><br/><span class=\"co1\">% this code follows a recursive approach. therefore, </span><br/><span class=\"co1\">% it can be slow for large n</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/clear.html\"><span class=\"kw2\">clear</span></a> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/clc.html\"><span class=\"kw2\">clc</span></a>;<br/>\u00a0<br/>bits = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Enter the number of bits: '</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>bits&lt;<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"co2\">'Sorry, number of bits should be positive'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>bits,<span class=\"nu0\">1</span><span class=\"br0\">)</span>~=<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"co2\">'Sorry, number of bits can only be positive integers'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">else</span><br/>    initial_container = <span class=\"br0\">[</span><span class=\"nu0\">0</span>;<span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">if</span> bits == <span class=\"nu0\">1</span><br/>        result = initial_container;<br/>    <span class=\"kw1\">else</span><br/>        previous_container = initial_container;<br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>=<span class=\"nu0\">2</span>:bits<br/>            new_gray_container = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>            new_gray_container<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>;<br/>            new_gray_container<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>;<br/>\u00a0<br/>            <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"nu0\">1</span>:<span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/>                new_gray_container<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>,<span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> = previous_container<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>,:<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"nu0\">2</span>^<span class=\"re0\">i</span><br/>                new_gray_container<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>,<span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> = previous_container<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>^<span class=\"re0\">i</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>,:<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            previous_container = new_gray_container;<br/>        <span class=\"kw1\">end</span><br/>        result = previous_container;<br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Gray code of\u00a0%d bits'</span>,bits<span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"co2\">' '</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>result<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mercury", "loc": 30, "block": "<pre class=\"text highlighted_source\">:- module gray.<br/>\u00a0<br/>:- interface.<br/>:- import_module int.<br/>\u00a0<br/>:- type gray.<br/>\u00a0<br/>% VALUE conversion functions<br/>:- func gray.from_int(int) = gray.<br/>:- func gray.to_int(gray) = int.<br/>\u00a0<br/>% REPRESENTATION conversion predicate<br/>:- pred gray.coerce(gray, int).<br/>:- mode gray.coerce(in,   out) is det.<br/>:- mode gray.coerce(out,  in)  is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list.<br/>\u00a0<br/>:- type gray<br/>  ---&gt; gray(int).<br/>\u00a0<br/>gray.from_int(X) = gray(X `xor` (X &gt;&gt; 1)).<br/>\u00a0<br/>gray.to_int(gray(G)) = (G &gt; 0 -&gt; G `xor` gray.to_int(gray(G &gt;&gt; 1))<br/>                       \u00a0;        G).<br/>gray.coerce(gray(I), I).<br/>\u00a0<br/>:- end_module gray.</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">proc grayEncode(n): auto =<br/>  n xor (n shr 1)<br/>\u00a0<br/>proc grayDecode(n): auto =<br/>  result = n<br/>  var t = n<br/>  while t &gt; 0:<br/>    t = t shr 1<br/>    result = result xor t</pre>"}, {"lang": "OCaml", "loc": 26, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> gray_encode b <span class=\"sy0\">=</span><br/>  b <span class=\"kw1\">lxor</span> <span class=\"br0\">(</span>b <span class=\"kw1\">lsr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> gray_decode n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux p n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> p<br/>    <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>p <span class=\"kw1\">lxor</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"kw1\">lsr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux n <span class=\"br0\">(</span>n <span class=\"kw1\">lsr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bool_string len n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>make len <span class=\"sy0\">'</span><span class=\"nu0\">0</span><span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"kw1\">land</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"sy0\">'</span><span class=\"nu0\">1</span><span class=\"sy0\">';</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> s<br/>    <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"kw1\">lsr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> len<span class=\"br0\">)</span> n<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> bool_string <span class=\"nu0\">5</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"nu0\">32</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> gray_encode i <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> gray_decode g <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%2d\u00a0:\u00a0%s =&gt;\u00a0%s =&gt;\u00a0%s\u00a0:\u00a0%2d\\n\"</span> i <span class=\"br0\">(</span>s i<span class=\"br0\">)</span> <span class=\"br0\">(</span>s g<span class=\"br0\">)</span> <span class=\"br0\">(</span>s b<span class=\"br0\">)</span> b<br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">toGray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">bitxor</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">&gt;&gt;</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>fromGray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>m<span class=\"sy0\">=</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>m<span class=\"sy0\">&gt;&gt;</span>k<span class=\"sy0\">,</span>n<span class=\"sy0\">=</span><span class=\"kw1\">bitxor</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">&gt;&gt;</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span>k<span class=\"sy0\">+=</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span>n<span class=\"sy0\">;</span><br/>bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>k<span class=\"sy0\">-&gt;</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">binary</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">31</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>bin<span class=\"br0\">(</span>g<span class=\"sy0\">=</span>toGray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>fromGray<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 20, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> bin2gray<br/><span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gray2bin<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$bin</span><span class=\"sy0\">=</span> <span class=\"re0\">$num</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">$num</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># a bit ends up flipped iff an odd number of bits to its left is set.</span><br/>        <span class=\"re0\">$bin</span> <span class=\"sy0\">^=</span> <span class=\"re0\">$num</span><span class=\"sy0\">;</span>   <span class=\"co1\"># different from the suggested algorithm;</span><br/>    <span class=\"br0\">}</span>                   <span class=\"co1\"># avoids using bit mask and explicit bittery</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$bin</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$gr</span><span class=\"sy0\">=</span> bin2gray<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%d<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$gr</span><span class=\"sy0\">,</span> gray2bin<span class=\"br0\">(</span><span class=\"re0\">$gr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 20, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> bin2gray<br/><span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gray2bin<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$bin</span><span class=\"sy0\">=</span> <span class=\"re0\">$num</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">$num</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># a bit ends up flipped iff an odd number of bits to its left is set.</span><br/>        <span class=\"re0\">$bin</span> <span class=\"sy0\">^=</span> <span class=\"re0\">$num</span><span class=\"sy0\">;</span>   <span class=\"co1\"># different from the suggested algorithm;</span><br/>    <span class=\"br0\">}</span>                   <span class=\"co1\"># avoids using bit mask and explicit bittery</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$bin</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$gr</span><span class=\"sy0\">=</span> bin2gray<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%d<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$gr</span><span class=\"sy0\">,</span> gray2bin<span class=\"br0\">(</span><span class=\"re0\">$gr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> gray_encode <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"sy0\">--&gt;</span> Int <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+^</span> <span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> gray_decode <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"kw1\">is</span> copy <span class=\"sy0\">--&gt;</span> Int <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$mask</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">+^=</span> <span class=\"re0\">$mask</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$mask</span> <span class=\"kw1\">while</span> <span class=\"re0\">$mask</span> <span class=\"sy0\">+&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">32</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> gray_encode<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> gray_decode<span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%2d:\u00a0%5b =&gt;\u00a0%5b =&gt;\u00a0%5b:\u00a0%2d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">die</span> <span class=\"kw1\">if</span> <span class=\"re0\">$d</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 21, "block": "<pre class=\"text highlighted_source\">function gray_encode(integer n)<br/>    return xor_bits(n,floor(n/2))<br/>end function<br/>\u00a0<br/>function gray_decode(integer n)<br/>integer r = 0<br/>    while n&gt;0 do<br/>        r = xor_bits(r,n)<br/>        n = floor(n/2)<br/>    end while<br/>    return r<br/>end function<br/>\u00a0<br/>integer e,d<br/>puts(1,\" N  Binary Gray   Decoded\\n\"&amp;<br/>       \"==  =====  =====  =======\\n\")<br/>for i=0 to 31 do<br/>    e = gray_encode(i)<br/>    d = gray_decode(e)<br/>    printf(1,\"%2d \u00a0%05b \u00a0%05b \u00a0%2d\\n\",{i,i,e,d})<br/>end for</pre>"}, {"lang": "PHP", "loc": 30, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @author Elad Yosifon<br/> */</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @param int $binary<br/> * @return int<br/> */</span><br/><span class=\"kw2\">function</span> gray_encode<span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$binary</span> ^ <span class=\"br0\">(</span><span class=\"re0\">$binary</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co4\">/**<br/> * @param int $gray<br/> * @return int<br/> */</span><br/><span class=\"kw2\">function</span> gray_decode<span class=\"br0\">(</span><span class=\"re0\">$gray</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$binary</span> <span class=\"sy0\">=</span> <span class=\"re0\">$gray</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$gray</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$binary</span> ^<span class=\"sy0\">=</span> <span class=\"re0\">$gray</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$binary</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">32</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$gray_encoded</span> <span class=\"sy0\">=</span> gray_encode<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es6\">%2d</span>\u00a0: <span class=\"es6\">%05b</span> =&gt; <span class=\"es6\">%05b</span> =&gt; <span class=\"es6\">%05b</span>\u00a0: <span class=\"es6\">%2d</span> <span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$gray_encoded</span><span class=\"sy0\">,</span> <span class=\"re0\">$gray_encoded</span><span class=\"sy0\">,</span> gray_decode<span class=\"br0\">(</span><span class=\"re0\">$gray_encoded</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de grayEncode (N)<br/>   (bin (x| N (&gt;&gt; 1 N))) )<br/>\u00a0<br/>(de grayDecode (G)<br/>   (bin<br/>      (pack<br/>         (let X 0<br/>            (mapcar<br/>               '((C) (setq X (x| X (format C))))<br/>               (chop G) ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 31, "block": "<pre class=\"text highlighted_source\">(stringrange, stringsize):<br/>Gray_code: procedure options (main);  /* 15 November 2013 */<br/>   declare (bin(0:31), g(0:31), b2(0:31)) bit (5);<br/>   declare (c, carry) bit (1);<br/>   declare (i, j) fixed binary (7);<br/>\u00a0<br/>   bin(0) = '00000'b;<br/>   do i = 0 to 31;<br/>      if i &gt; 0 then<br/>         do;<br/>            carry = '1'b;<br/>            bin(i) = bin(i-1);<br/>            do j = 5 to 1 by -1;<br/>               c = substr(bin(i), j, 1) &amp; carry;<br/>               substr(bin(i), j, 1) = substr(bin(i), j, 1) ^ carry;<br/>               carry = c;              <br/>            end;<br/>         end;<br/>      g(i) = bin(i) ^ '0'b || substr(bin(i), 1, 4);<br/>   end;<br/>   do i = 0 to 31;<br/>      substr(b2(i), 1, 1) = substr(g(i), 1, 1);<br/>      do j = 2 to 5;<br/>         substr(b2(i), j, 1) = substr(g(i), j, 1) ^ substr(bin(i), j-1, 1);<br/>      end;<br/>   end;<br/>\u00a0<br/>   do i = 0 to 31;<br/>      put skip edit (i, bin(i), g(i), b2(i)) (f(2), 3(x(1), b));<br/>   end;<br/>end Gray_code;</pre>"}, {"lang": "PowerBASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">function gray%(byval n%)<br/>  gray%=n% xor (n%\\2)<br/>end function<br/>\u00a0<br/>function igray%(byval n%)<br/>  r%=0<br/>  while n%&gt;0<br/>    r%=r% xor n%<br/>    shift right n%,1<br/>  wend<br/>  igray%=r%<br/>end function<br/>\u00a0<br/>print \"   N  GRAY   INV\"<br/>for n%=0 to 31<br/>  g%=gray%(n%)<br/>  print bin$(n%);\" \";bin$(g%);\" \";bin$(igray%(g%))<br/>next</pre>"}, {"lang": "Prolog", "loc": 10, "block": "<pre class=\"prolog highlighted_source\">to_gray<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> G<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  N0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy6\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>  G <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N xor N0<span class=\"sy4\">.</span><br/>\u00a0<br/>from_gray<span class=\"br0\">(</span>G<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  <span class=\"br0\">(</span> G <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  S <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> G <span class=\"sy6\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>      from_gray<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> N0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>      N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> G xor N0<br/>  <span class=\"sy4\">;</span>   N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> G <span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.i gray_encode<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n <span class=\"sy0\">!</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i gray_decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> bit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> b <span class=\"sy0\">=</span> g <span class=\"sy0\">&amp;</span> bit, p <span class=\"sy0\">=</span> b <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">While</span> bit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    bit <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><br/>    b <span class=\"sy0\">|</span> <span class=\"br0\">(</span>p <span class=\"sy0\">!</span> <span class=\"br0\">(</span>g <span class=\"sy0\">&amp;</span> bit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    p <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> bit<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> b<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Number Binary Gray    Decoded\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, n<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">31</span><br/>    g <span class=\"sy0\">=</span> gray_encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">2</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Bin</span><span class=\"br0\">(</span>g, #PB_Byte<span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> gray_decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Bin</span><span class=\"br0\">(</span>n, #PB_Byte<span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">2</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> int2bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>\t<span class=\"st0\">'From positive integer to list of binary bits, msb at index 0'</span><br/>\t<span class=\"kw1\">if</span> n:<br/>\t\tbits <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">while</span> n:<br/>\t\t\tn<span class=\"sy0\">,</span>remainder <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\tbits.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> bits<br/>\t<span class=\"kw1\">else</span>: <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> bin2int<span class=\"br0\">(</span>bits<span class=\"br0\">)</span>:<br/>\t<span class=\"st0\">'From binary bits, msb at index 0 to integer'</span><br/>\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> bit <span class=\"kw1\">in</span> bits:<br/>\t\ti <span class=\"sy0\">=</span> i * <span class=\"nu0\">2</span> + bit<br/>\t<span class=\"kw1\">return</span> i</pre>"}, {"lang": "R", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>GrayEncode &lt;- function(binary) {<br/>\tgray &lt;- substr(binary,1,1)<br/>\trepeat {<br/>\tif  (substr(binary,1,1)\u00a0!= substr(binary,2,2)) gray &lt;- paste(gray,\"1\",sep=\"\")<br/>\telse gray &lt;- paste(gray,\"0\",sep=\"\")<br/>\tbinary &lt;- substr(binary,2,nchar(binary))<br/>\tif (nchar(binary) &lt;=1) {<br/>\t\tbreak<br/>\t\t}<br/>\t}<br/>return (gray)<br/>}<br/>GrayDecode &lt;- function(gray) {<br/>\tbinary &lt;- substr(gray,1,1)<br/>\trepeat {<br/>\tif  (substr(binary,nchar(binary),nchar(binary))\u00a0!= substr(gray,2,2)) binary &lt;- paste(binary ,\"1\",sep=\"\")<br/>\telse binary &lt;- paste(binary ,\"0\",sep=\"\")<br/>\tgray &lt;- substr(gray,2,nchar(gray))<br/>\u00a0<br/>\tif (nchar(gray) &lt;=1) {<br/>\t\tbreak<br/>\t\t}<br/>\t}<br/>return (binary)<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (gray-encode n) (bitwise-xor n (arithmetic-shift n -1)))<br/>\u00a0<br/>(define (gray-decode n)<br/>  (letrec ([loop (lambda(g bits)<br/>                   (if (&gt; bits 0)<br/>                       (loop (bitwise-xor g bits) (arithmetic-shift bits -1))<br/>                       g))])<br/>\t (loop 0 n)))<br/>\u00a0<br/>(define (to-bin n) (format \"~b\" n))<br/>(define (show-table)<br/>  (for ([i (in-range 1 32)]) <br/>    (printf \"~a | ~a | ~a ~n\"<br/>            (~r i #:min-width 2 #:pad-string \"0\")<br/>            (~a (to-bin(gray-encode i)) #:width 5 #:align 'right #:pad-string \"0\")<br/>            (~a (to-bin (gray-decode(gray-encode i))) #:width 5 #:align 'right #:pad-string \"0\"))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program converts decimal number \u2500\u2500\u2500\u25ba binary \u2500\u2500\u2500\u25ba gray code \u2500\u2500\u2500\u25ba binary.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*get the optional argument from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> N=<span class=\"nu0\">31</span>         <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>L=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"kw6\">d2x</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"st0\">'L'</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*find the max binary length of N.*/</span><br/>w=<span class=\"nu0\">14</span>                                   <span class=\"coMULTI\">/*used for the formatting of cell width*/</span><br/>_=<span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'binary'</span>,w,<span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*the  2nd and 4th  part of the header.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'decimal'</span>, w, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><span class=\"st0\">'\u25ba'</span>     _<span class=\"st0\">\"\u25ba\"</span>    <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'gray code'</span>, w, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span><span class=\"st0\">\"\u25ba\"</span>    _<br/>                                                     <span class=\"coMULTI\">/* [+]  the output header*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> N;     b=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"kw6\">d2x</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>,L,<span class=\"nu0\">0</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*process   0  \u2500\u2500\u25ba  N.   */</span><br/>     g=b2gray<span class=\"br0\">(</span>b<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*convert binary number to gray code.  */</span><br/>     a=gray2b<span class=\"br0\">(</span>g<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*convert the gray code to binary.     */</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>j,w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>b,w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>g,w+<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>a,w+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>b2gray: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> $ <span class=\"nu0\">2</span>;    <span class=\"kw1\">do</span> b=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                                         $=$<span class=\"sy0\">||</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,b-<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,b,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*b*/</span><br/>        <span class=\"kw1\">return</span> $<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>gray2b: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> $ <span class=\"nu0\">2</span>;    <span class=\"kw1\">do</span> g=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                                         $=$ <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>$,<span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,g,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*g*/</span>        <span class=\"coMULTI\">/*  \u2191  */</span><br/>                                                            <span class=\"coMULTI\">/*  \u2502  */</span><br/>        <span class=\"kw1\">return</span> $           <span class=\"coMULTI\">/*this is an eXclusive OR  \u25ba\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  */</span></pre>"}, {"lang": "Ring", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Gray code<br/>\u00a0<br/>pos = 5<br/>see \"0\u00a0: 00000 =&gt; 00000 =&gt; 00000\" + nl<br/>for n = 1 to 31<br/>     res1 = tobase(n, 2, pos)<br/>     res2 = tobase(grayencode(n), 2, pos)<br/>     res3 = tobase(graydecode(n), 2, pos)<br/>     see \"\" + n + \"\u00a0: \" + res1 + \" =&gt; \" + res2 +  \" =&gt; \" + res3 + nl<br/>next<br/>\u00a0<br/>func grayencode(n)<br/>        return n ^ (n &gt;&gt; 1)<br/>\u00a0<br/>func graydecode(n)<br/>        p = n<br/>        while (n = n &gt;&gt; 1) <br/>                  p = p ^ n<br/>        end<br/>        return p<br/>\u00a0<br/>func tobase(nr, base, pos) <br/>        binary = 0<br/>        i = 1  <br/>       while(nr\u00a0!= 0) <br/>              remainder = nr\u00a0% base<br/>              nr = floor(nr/base)<br/>              binary= binary + (remainder*i)<br/>              i = i*10<br/>       end<br/>       result = \"\"<br/>       for nr = 1 to  pos - len(string(binary))<br/>             result = result + \"0\" <br/>       next<br/>       result = result + string(binary)<br/>       return result<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"co1\"># Converts a normal integer to a Gray code.</span><br/>  <span class=\"kw1\">def</span> to_gray<br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">Math</span>::DomainError, <span class=\"st0\">\"integer is negative\"</span> <span class=\"kw1\">if</span> <span class=\"kw2\">self</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">self</span> ^ <span class=\"br0\">(</span><span class=\"kw2\">self</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Converts a Gray code to a normal integer.</span><br/>  <span class=\"kw1\">def</span> from_gray<br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">Math</span>::DomainError, <span class=\"st0\">\"integer is negative\"</span> <span class=\"kw1\">if</span> <span class=\"kw2\">self</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    recurse = <span class=\"kw3\">proc</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">next</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> i == <span class=\"nu0\">0</span><br/>      o = recurse<span class=\"br0\">[</span>i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><br/>      o <span class=\"sy0\">|</span> <span class=\"br0\">(</span>i<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ^ o<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    recurse<span class=\"br0\">[</span><span class=\"kw2\">self</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>number<span class=\"sy0\">|</span><br/>  encoded = number.<span class=\"me1\">to_gray</span><br/>  decoded = encoded.<span class=\"me1\">from_gray</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%2d\u00a0:\u00a0%5b =&gt;\u00a0%5b =&gt;\u00a0%5b\u00a0:\u00a0%2d<span class=\"es0\">\\n</span>\"</span>,<br/>         number, number, encoded, decoded, decoded<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">fn gray_encode(integer: u64) -&gt; u64 {<br/>    (integer &gt;&gt; 1) ^ integer<br/>}<br/>\u00a0<br/>fn gray_decode(integer: u64) -&gt; u64 {<br/>    match integer {<br/>        0 =&gt; 0,<br/>        _ =&gt; integer ^ gray_decode(integer &gt;&gt; 1)<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in 0..32 {<br/>        println!(\"{:2} {:0&gt;5b} {:0&gt;5b} {:2}\", i, i, gray_encode(i),<br/>            gray_decode(i));<br/>    }<br/>\u00a0<br/>}</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encode<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span>    <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n ^ <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toBinaryString</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decode<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Integer.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span> s.<span class=\"me1\">scanLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> ^ <span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">mkString</span> , <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span><span class=\"st0\">\"decimal  binary   gray  decoded\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">31</span><span class=\"sy0\">;</span> g <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%7d \u00a0%6s \u00a0%5s \u00a0%7s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i, i.<span class=\"me1\">toBinaryString</span>, g, decode<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scratch", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bin32.s7i\";<br/>\u00a0<br/>const func integer: grayEncode (in integer: n) is<br/>  return ord(bin32(n) &gt;&lt; bin32(n &gt;&gt; 1));<br/>\u00a0<br/>const func integer: grayDecode (in var integer: n) is func<br/>  result<br/>    var integer: decoded is 0;<br/>  begin<br/>    decoded\u00a0:= n;<br/>    while n &gt; 1 do<br/>      n &gt;&gt;:= 1;<br/>      decoded\u00a0:= ord(bin32(decoded) &gt;&lt; bin32(n));<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 0 to 32 do<br/>      writeln(i &lt;&amp; \" =&gt; \" &lt;&amp; grayEncode(i) radix 2 lpad0 6 &lt;&amp; \" =&gt; \" &lt;&amp; grayDecode(grayEncode(i)));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bin32.s7i\";<br/>\u00a0<br/>const func integer: grayEncode (in integer: n) is<br/>  return ord(bin32(n) &gt;&lt; bin32(n &gt;&gt; 1));<br/>\u00a0<br/>const func integer: grayDecode (in var integer: n) is func<br/>  result<br/>    var integer: decoded is 0;<br/>  begin<br/>    decoded\u00a0:= n;<br/>    while n &gt; 1 do<br/>      n &gt;&gt;:= 1;<br/>      decoded\u00a0:= ord(bin32(decoded) &gt;&lt; bin32(n));<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 0 to 32 do<br/>      writeln(i &lt;&amp; \" =&gt; \" &lt;&amp; grayEncode(i) radix 2 lpad0 6 &lt;&amp; \" =&gt; \" &lt;&amp; grayDecode(grayEncode(i)));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func bin2gray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n ^ <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func gray2bin<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var bin = num<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&gt;&gt;</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> bin ^= num <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> bin<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    var gr = bin2gray<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\t</span>%b<span class=\"es0\">\\n</span>\"</span>, i, i, gr, gray2bin<span class=\"br0\">(</span>gr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> ^<span class=\"nu0\">32</span></pre>"}, {"lang": "Standard ML", "loc": 25, "block": "<pre class=\"text highlighted_source\">fun gray_encode b =<br/>  Word.xorb (b, Word.&gt;&gt; (b, 0w1))<br/>\u00a0<br/>fun gray_decode n =<br/>  let<br/>    fun aux (p, n) =<br/>      if n = 0w0 then p<br/>      else aux (Word.xorb (p, n), Word.&gt;&gt; (n, 0w1))<br/>  in<br/>    aux (n, Word.&gt;&gt; (n, 0w1))<br/>  end;<br/>\u00a0<br/>val s = Word.fmt StringCvt.BIN;<br/>fun aux i =<br/>  if i = 0w32 then<br/>    ()<br/>  else<br/>    let<br/>      val g = gray_encode i<br/>      val b = gray_decode g<br/>    in<br/>      print (Word.toString i ^ \"\u00a0:\\t\" ^ s i ^ \" =&gt; \" ^ s g ^ \" =&gt; \" ^ s b ^ \"\\t: \" ^ Word.toString b ^ \"\\n\");<br/>      aux (i + 0w1)<br/>    end;<br/>aux 0w0</pre>"}, {"lang": "SQL", "loc": 34, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">DECLARE</span> @<span class=\"kw1\">BINARY</span> <span class=\"kw1\">AS</span> NVARCHAR<span class=\"br0\">(</span><span class=\"kw1\">MAX</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'001010111'</span> <br/><span class=\"kw1\">DECLARE</span> @gray <span class=\"kw1\">AS</span> NVARCHAR<span class=\"br0\">(</span><span class=\"kw1\">MAX</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">''</span> <br/>\u00a0<br/><span class=\"co1\">--Encoder </span><br/><span class=\"kw1\">SET</span> @gray <span class=\"sy0\">=</span> <span class=\"kw1\">LEFT</span><span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>\u00a0<br/>WHILE LEN<span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">BEGIN</span> <br/>      <span class=\"kw1\">IF</span> <span class=\"kw1\">LEFT</span><span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">SET</span> @gray <span class=\"sy0\">=</span> @gray <span class=\"sy0\">+</span> <span class=\"st0\">'1'</span> <br/>      <span class=\"kw1\">ELSE</span> <br/>        <span class=\"kw1\">SET</span> @gray <span class=\"sy0\">=</span> @gray <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span> <br/>\u00a0<br/>      <span class=\"kw1\">SET</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">=</span> <span class=\"kw1\">RIGHT</span><span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">END</span> <br/>\u00a0<br/><span class=\"kw1\">SELECT</span> @gray <br/>\u00a0<br/><span class=\"co1\">--Decoder </span><br/><span class=\"kw1\">SET</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">=</span> <span class=\"kw1\">LEFT</span><span class=\"br0\">(</span>@gray<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>\u00a0<br/>WHILE LEN<span class=\"br0\">(</span>@gray<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">BEGIN</span> <br/>      <span class=\"kw1\">IF</span> <span class=\"kw1\">RIGHT</span><span class=\"br0\">(</span>@<span class=\"kw1\">BINARY</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span>@gray<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">SET</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">=</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">+</span> <span class=\"st0\">'1'</span> <br/>      <span class=\"kw1\">ELSE</span> <br/>        <span class=\"kw1\">SET</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">=</span> @<span class=\"kw1\">BINARY</span> <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span> <br/>\u00a0<br/>      <span class=\"kw1\">SET</span> @gray <span class=\"sy0\">=</span> <span class=\"kw1\">RIGHT</span><span class=\"br0\">(</span>@gray<span class=\"sy0\">,</span> LEN<span class=\"br0\">(</span>@gray<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">END</span> <br/>\u00a0<br/><span class=\"kw1\">SELECT</span> @<span class=\"kw1\">BINARY</span> <br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> gray <span class=\"br0\">{</span><br/>    <span class=\"kw1\">proc</span> encode n <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> ^ <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> decode n <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Compute some bit at least as large as MSB</span><br/>\t<span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>int<span class=\"br0\">(</span>ceil<span class=\"br0\">(</span>log<span class=\"br0\">(</span><span class=\"re0\">$n</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>/log<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">set</span> bprev <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> | <span class=\"br0\">[</span><span class=\"kw1\">set</span> bprev <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$i</span> ^ <span class=\"re0\">$bprev</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$b</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 12, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>xor = ~&amp;Y&amp;&amp; not ~&amp;B                  # either and not both<br/>\u00a0<br/>btog = xor*+ <a class=\"__cf_email__\" data-cfemail=\"6812011818582801011c2a30\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>             # map xor over the argument zipped with its shift<br/>\u00a0<br/>gtob = ~&amp;y+ =&gt;&lt;0&gt; ^C/<a class=\"__cf_email__\" data-cfemail=\"0a7265784a6678625a52\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ~&amp;r   # fold xor over the next input with previous output<br/>\u00a0<br/>#show+<br/>\u00a0<br/>test = mat` * 2-$'01'***K7xSS pad0*K7 &lt;.~&amp;,btog,gtob+ btog&gt;* iota32</pre>"}, {"lang": "VHDL", "loc": 14, "block": "<pre class=\"vhdl highlighted_source\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> b2g <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">port</span><span class=\"br0\">(</span>  bin  <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>  <span class=\"kw2\">std_logic_vector</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          gray <span class=\"sy0\">:</span> <span class=\"kw1\">out</span> <span class=\"kw2\">std_logic_vector</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> b2g <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">architecture</span> rtl <span class=\"kw1\">of</span> b2g <span class=\"kw1\">is</span><br/>  <span class=\"kw1\">constant</span> N <span class=\"sy0\">:</span> <span class=\"kw2\">integer</span> <span class=\"sy0\">:=</span> bin<span class=\"re2\">'high</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">begin</span><br/>  gray <span class=\"sy0\">&lt;=</span> bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span> bin<span class=\"br0\">(</span>N<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">xor</span> bin<span class=\"br0\">(</span>N <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">architecture</span> rtl<span class=\"sy0\">;</span></pre>"}, {"lang": "XPL0", "loc": 36, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>func Gray2Bin(N);               \\Convert N from Gray code to binary<br/>int N;<br/>int S;<br/>[S:= 1;<br/>repeat  N:= N&gt;&gt;S | N;<br/>        S:= S&lt;&lt;1;<br/>until   S=32;<br/>return N;<br/>]; \\Gray2Bin<br/>\u00a0<br/>\u00a0<br/>func Bin2Gray(N);               \\Convert N from binary to Gray code<br/>int N;<br/>return N&gt;&gt;1 | N;<br/>\u00a0<br/>\u00a0<br/>proc BinOut(N);                 \\Output N in binary<br/>int N;<br/>int R;<br/>[R:= N&amp;1;<br/>N:= N&gt;&gt;1;<br/>if N then BinOut(N);<br/>ChOut(0, R+^0);<br/>]; \\BinOut<br/>\u00a0<br/>\u00a0<br/>int N, G;<br/>[for N:= 0 to 31 do<br/>        [BinOut(N); ChOut(0, 9\\tab\\);<br/>        G:= Bin2Gray(N);<br/>        BinOut(G);  ChOut(0, 9\\tab\\);<br/>        BinOut(Gray2Bin(G));  CrLf(0);<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn grayEncode(n){ n.bitXor(n.shiftRight(1)) }<br/>fcn grayDecode(g){ b:=g; while(g/=2){ b=b.bitXor(g) } b }</pre>"}]}