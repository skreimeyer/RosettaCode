{"task": "Catmull%E2%80%93Clark_subdivision_surface", "blocks": [{"lang": "C", "loc": 93, "block": "<pre class=\"c highlighted_source\">vertex face_point<span class=\"br0\">(</span>face f<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tvertex v<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>f<span class=\"sy0\">-&gt;</span>avg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tf<span class=\"sy0\">-&gt;</span>avg <span class=\"sy0\">=</span> vertex_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tforeach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> f<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i<span class=\"br0\">)</span> f<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">-&gt;</span>pos <span class=\"sy0\">=</span> v<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span>    vadd<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tvdiv<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> len<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> f<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define hole_edge(e) (len(e-&gt;f)==1)</span><br/>vertex edge_point<span class=\"br0\">(</span>edge e<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tface f<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>e<span class=\"sy0\">-&gt;</span>e_pt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\te<span class=\"sy0\">-&gt;</span>e_pt <span class=\"sy0\">=</span> vertex_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\te<span class=\"sy0\">-&gt;</span>avg <span class=\"sy0\">=</span> e<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">;</span><br/>\t\tvadd<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">,</span> e<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\te<span class=\"sy0\">-&gt;</span>e_pt<span class=\"sy0\">-&gt;</span>pos <span class=\"sy0\">=</span> e<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hole_edge<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tforeach <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> e<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">)</span><br/>\t\t\t\tvadd<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>e_pt<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> face_point<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tvdiv<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>e_pt<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>\t\t\tvdiv<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>e_pt<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tvdiv<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>avg<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> e<span class=\"sy0\">-&gt;</span>e_pt<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define hole_vertex(v) (len((v)-&gt;f)\u00a0!= len((v)-&gt;e))</span><br/>vertex updated_point<span class=\"br0\">(</span>vertex v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tedge e<span class=\"sy0\">;</span><br/>\tface f<span class=\"sy0\">;</span><br/>\tcoord_t sum <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>v_new<span class=\"br0\">)</span> <span class=\"kw1\">return</span> v<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">;</span><br/>\u00a0<br/>\tv<span class=\"sy0\">-&gt;</span>v_new <span class=\"sy0\">=</span> vertex_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>hole_vertex<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tv<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">-&gt;</span>pos <span class=\"sy0\">=</span> v<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">;</span><br/>\t\tforeach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hole_edge<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\tvadd<span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> edge_point<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tn<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tvdiv<span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">=</span> len<span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tforeach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">)</span><br/>\t\t\tvadd<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> face_point<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tforeach<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>e<span class=\"br0\">)</span><br/>\t\t\tvmadd<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> edge_point<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvdiv<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvmadd<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>pos<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvdiv<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tv<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">-&gt;</span>pos <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> v<span class=\"sy0\">-&gt;</span>v_new<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>model catmull<span class=\"br0\">(</span>model m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"sy0\">;</span><br/>\tface f<span class=\"sy0\">;</span><br/>\tvertex v<span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>\tmodel nm <span class=\"sy0\">=</span> model_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tforeach <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tforeach<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> f<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t_get_idx<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> updated_point<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t_get_idx<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> edge_point<span class=\"br0\">(</span>elem<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>e<span class=\"sy0\">,</span> <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> len<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t_get_idx<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> face_point<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t_get_idx<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> edge_point<span class=\"br0\">(</span>elem<span class=\"br0\">(</span>f<span class=\"sy0\">-&gt;</span>e<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tmodel_add_face<span class=\"br0\">(</span>nm<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> nm<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 311, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span><br/><span class=\"coMULTI\">{-# LANGUAGE ScopedTypeVariables #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Foldable <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>genericLength<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>mapMaybe<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Map<span class=\"sy0\">.</span>Strict <span class=\"kw1\">as</span> Map<br/>\u00a0<br/><span class=\"coMULTI\">{-<br/>A SimpleMesh consists of only vertices and faces that refer to them.<br/>A Mesh extends the SimpleMesh to contain edges as well as references to<br/>adjoining mesh components for each other component, such as a vertex<br/>also contains what faces it belongs to.<br/>An isolated edge can be represented as a degenerate face with 2 vertices.<br/>Faces with 0 or 1 vertices can be thrown out, as they do not contribute to<br/>the result (they can also propagate NaNs).<br/>-}</span><br/>\u00a0<br/><span class=\"kw1\">newtype</span> VertexId <span class=\"sy0\">=</span> VertexId <span class=\"br0\">{</span> getVertexId <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span>Ix<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">newtype</span> EdgeId <span class=\"sy0\">=</span> EdgeId <span class=\"br0\">{</span> getEdgeId <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span>Ix<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">newtype</span> FaceId <span class=\"sy0\">=</span> FaceId <span class=\"br0\">{</span> getFaceId <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span>Ix<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Vertex a <span class=\"sy0\">=</span> Vertex<br/>  <span class=\"br0\">{</span> vertexPoint <span class=\"sy0\">::</span> a<br/>  <span class=\"sy0\">,</span> vertexEdges <span class=\"sy0\">::</span> <span class=\"br0\">[</span>EdgeId<span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> vertexFaces <span class=\"sy0\">::</span> <span class=\"br0\">[</span>FaceId<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">data</span> Edge <span class=\"sy0\">=</span> Edge<br/>  <span class=\"br0\">{</span> edgeVertexA <span class=\"sy0\">::</span> VertexId<br/>  <span class=\"sy0\">,</span> edgeVertexB <span class=\"sy0\">::</span> VertexId<br/>  <span class=\"sy0\">,</span> edgeFaces <span class=\"sy0\">::</span> <span class=\"br0\">[</span>FaceId<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">data</span> Face <span class=\"sy0\">=</span> Face<br/>  <span class=\"br0\">{</span> faceVertices <span class=\"sy0\">::</span> <span class=\"br0\">[</span>VertexId<span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span> faceEdges <span class=\"sy0\">::</span> <span class=\"br0\">[</span>EdgeId<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> VertexArray a <span class=\"sy0\">=</span> Array VertexId <span class=\"br0\">(</span>Vertex a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> EdgeArray <span class=\"sy0\">=</span> Array EdgeId Edge<br/><span class=\"kw1\">type</span> FaceArray <span class=\"sy0\">=</span> Array FaceId Face<br/>\u00a0<br/><span class=\"kw1\">data</span> Mesh a <span class=\"sy0\">=</span> Mesh<br/>  <span class=\"br0\">{</span> meshVertices <span class=\"sy0\">::</span> VertexArray a<br/>  <span class=\"sy0\">,</span> meshEdges <span class=\"sy0\">::</span> EdgeArray<br/>  <span class=\"sy0\">,</span> meshFaces <span class=\"sy0\">::</span> FaceArray<br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">data</span> SimpleVertex a <span class=\"sy0\">=</span> SimpleVertex <span class=\"br0\">{</span> sVertexPoint <span class=\"sy0\">::</span> a <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/><span class=\"kw1\">data</span> SimpleFace <span class=\"sy0\">=</span> SimpleFace <span class=\"br0\">{</span> sFaceVertices <span class=\"sy0\">::</span> <span class=\"br0\">[</span>VertexId<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> SimpleVertexArray a <span class=\"sy0\">=</span> Array VertexId <span class=\"br0\">(</span>SimpleVertex a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> SimpleFaceArray <span class=\"sy0\">=</span> Array FaceId SimpleFace<br/>\u00a0<br/><span class=\"kw1\">data</span> SimpleMesh a <span class=\"sy0\">=</span> SimpleMesh<br/>  <span class=\"br0\">{</span> sMeshVertices <span class=\"sy0\">::</span> SimpleVertexArray a<br/>  <span class=\"sy0\">,</span> sMeshFaces <span class=\"sy0\">::</span> SimpleFaceArray<br/>  <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"co1\">-- Generic helpers.</span><br/>fmap1 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span class=\"kw4\">Functor</span></a> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>t <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>t <span class=\"sy0\">-&gt;</span> f a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> f b<br/>fmap1 g h x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span> <span class=\"br0\">(</span>h x<span class=\"br0\">)</span><br/>\u00a0<br/>aZipWith <span class=\"sy0\">::</span> Ix i1 <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Array i1 a <span class=\"sy0\">-&gt;</span> Array i b <span class=\"sy0\">-&gt;</span> Array i1 e<br/>aZipWith f a b <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span>bounds a<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> f <span class=\"br0\">(</span>elems a<span class=\"br0\">)</span> <span class=\"br0\">(</span>elems b<span class=\"br0\">)</span><br/>\u00a0<br/>average <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Foldable f<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f a <span class=\"sy0\">-&gt;</span> a<br/>average xs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> xs<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Intermediary point types for ultimately converting into a point `a`.</span><br/><span class=\"kw1\">newtype</span> FacePoint a <span class=\"sy0\">=</span> FacePoint <span class=\"br0\">{</span> getFacePoint <span class=\"sy0\">::</span> a <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/><span class=\"kw1\">newtype</span> EdgeCenterPoint a <span class=\"sy0\">=</span> EdgeCenterPoint <span class=\"br0\">{</span> getEdgeCenterPoint <span class=\"sy0\">::</span> a <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/><span class=\"kw1\">newtype</span> EdgePoint a <span class=\"sy0\">=</span> EdgePoint <span class=\"br0\">{</span> getEdgePoint <span class=\"sy0\">::</span> a <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/><span class=\"kw1\">newtype</span> VertexPoint a <span class=\"sy0\">=</span> VertexPoint <span class=\"br0\">{</span> getVertexPoint <span class=\"sy0\">::</span> a <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> FacePointArray a <span class=\"sy0\">=</span> Array FaceId <span class=\"br0\">(</span>FacePoint a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> EdgePointArray a <span class=\"sy0\">=</span> Array EdgeId <span class=\"br0\">(</span>EdgePoint a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> EdgeCenterPointArray a <span class=\"sy0\">=</span> Array EdgeId <span class=\"br0\">(</span>EdgeCenterPoint a<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> IsEdgeHoleArray <span class=\"sy0\">=</span> Array EdgeId <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/><span class=\"kw1\">type</span> VertexPointArray a <span class=\"sy0\">=</span> Array VertexId <span class=\"br0\">(</span>VertexPoint a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Subdivision helpers.</span><br/>facePoint <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> Face <span class=\"sy0\">-&gt;</span> FacePoint a<br/>facePoint mesh <span class=\"sy0\">=</span> FacePoint <span class=\"sy0\">.</span> average <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"sy0\">$</span> vertexPointById mesh<span class=\"br0\">)</span> <span class=\"sy0\">.</span> faceVertices<br/>\u00a0<br/>allFacePoints <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> FacePointArray a<br/>allFacePoints <span class=\"sy0\">=</span> fmap1 facePoint meshFaces<br/>\u00a0<br/>vertexPointById <span class=\"sy0\">::</span> Mesh a <span class=\"sy0\">-&gt;</span> VertexId <span class=\"sy0\">-&gt;</span> a<br/>vertexPointById mesh <span class=\"sy0\">=</span> vertexPoint <span class=\"sy0\">.</span> <span class=\"br0\">(</span>meshVertices mesh <span class=\"sy0\">!</span><span class=\"br0\">)</span><br/>\u00a0<br/>edgeCenterPoint <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> Edge <span class=\"sy0\">-&gt;</span> EdgeCenterPoint a<br/>edgeCenterPoint mesh <span class=\"br0\">(</span>Edge ea eb <span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">=</span> EdgeCenterPoint <span class=\"sy0\">.</span> average <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>vertexPointById mesh<span class=\"br0\">)</span> <span class=\"br0\">[</span>ea<span class=\"sy0\">,</span> eb<span class=\"br0\">]</span><br/>\u00a0<br/>allEdgeCenterPoints <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> EdgeCenterPointArray a<br/>allEdgeCenterPoints <span class=\"sy0\">=</span> fmap1 edgeCenterPoint meshEdges<br/>\u00a0<br/>allIsEdgeHoles <span class=\"sy0\">::</span> Mesh a <span class=\"sy0\">-&gt;</span> IsEdgeHoleArray<br/>allIsEdgeHoles <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> edgeFaces<span class=\"br0\">)</span> <span class=\"sy0\">.</span> meshEdges<br/>\u00a0<br/>edgePoint <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Edge <span class=\"sy0\">-&gt;</span> FacePointArray a <span class=\"sy0\">-&gt;</span> EdgeCenterPoint a <span class=\"sy0\">-&gt;</span> EdgePoint a<br/>edgePoint <span class=\"br0\">(</span>Edge <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"sy0\">_</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">_</span> <span class=\"br0\">(</span>EdgeCenterPoint ecp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> EdgePoint ecp<br/>edgePoint <span class=\"br0\">(</span>Edge <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> faceIds<span class=\"br0\">)</span> facePoints <span class=\"br0\">(</span>EdgeCenterPoint ecp<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=</span> EdgePoint <span class=\"sy0\">$</span> average <span class=\"br0\">[</span>ecp<span class=\"sy0\">,</span> average <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>getFacePoint <span class=\"sy0\">.</span> <span class=\"br0\">(</span>facePoints <span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> faceIds<span class=\"br0\">]</span><br/>\u00a0<br/>allEdgePoints <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> FacePointArray a <span class=\"sy0\">-&gt;</span> EdgeCenterPointArray a <span class=\"sy0\">-&gt;</span> EdgePointArray a<br/>allEdgePoints mesh fps ecps <span class=\"sy0\">=</span> aZipWith <span class=\"br0\">(</span>\\e ecp <span class=\"sy0\">-&gt;</span> edgePoint e fps ecp<span class=\"br0\">)</span> <span class=\"br0\">(</span>meshEdges mesh<span class=\"br0\">)</span> ecps<br/>\u00a0<br/>vertexPoint<span class=\"st0\">'\u00a0:: Fractional a =&gt; Vertex a -&gt; FacePointArray a -&gt; EdgeCenterPointArray a -&gt; IsEdgeHoleArray -&gt; VertexPoint a<br/>vertexPoint'</span> vertex facePoints ecps iehs<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> faceIds <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> edgeIds <span class=\"sy0\">=</span> VertexPoint newCoords<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> VertexPoint avgHoleEcps<br/>  <span class=\"kw1\">where</span><br/>    newCoords <span class=\"sy0\">=</span> <span class=\"br0\">(</span>oldCoords <span class=\"sy0\">*</span> m1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>avgFacePoints <span class=\"sy0\">*</span> m2<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>avgMidEdges <span class=\"sy0\">*</span> m3<span class=\"br0\">)</span><br/>    oldCoords <span class=\"sy0\">=</span> vertexPoint vertex<br/>    avgFacePoints <span class=\"sy0\">=</span> average <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>getFacePoint <span class=\"sy0\">.</span> <span class=\"br0\">(</span>facePoints <span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> faceIds<br/>    avgMidEdges <span class=\"sy0\">=</span> average <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>getEdgeCenterPoint <span class=\"sy0\">.</span> <span class=\"br0\">(</span>ecps <span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> edgeIds<br/>    m1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    m2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> n<br/>    m3 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> n<br/>    n <span class=\"sy0\">=</span> genericLength faceIds<br/>    faceIds <span class=\"sy0\">=</span> vertexFaces vertex<br/>    edgeIds <span class=\"sy0\">=</span> vertexEdges vertex<br/>    avgHoleEcps <span class=\"sy0\">=</span> average <span class=\"sy0\">.</span> <span class=\"br0\">(</span>oldCoords:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>getEdgeCenterPoint <span class=\"sy0\">.</span> <span class=\"br0\">(</span>ecps <span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>iehs <span class=\"sy0\">!</span><span class=\"br0\">)</span> edgeIds<br/>\u00a0<br/>allVertexPoints <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> Mesh a <span class=\"sy0\">-&gt;</span> FacePointArray a <span class=\"sy0\">-&gt;</span> EdgeCenterPointArray a <span class=\"sy0\">-&gt;</span> IsEdgeHoleArray <span class=\"sy0\">-&gt;</span> VertexPointArray a<br/>allVertexPoints mesh fps ecps iehs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>\\v <span class=\"sy0\">-&gt;</span> vertexPoint<span class=\"st0\">' v fps ecps iehs) (meshVertices mesh)<br/>\u00a0<br/>-- For each vertex in a face, generate a set of new faces from it with its vertex point,<br/>-- neighbor edge points, and face point. The new faces will refer to vertices in the<br/>-- combined vertex array.<br/>newFaces\u00a0:: Face -&gt; FaceId -&gt; Int -&gt; Int -&gt; [SimpleFace]<br/>newFaces (Face vertexIds edgeIds) faceId epOffset vpOffset<br/>  = take (genericLength vertexIds)<br/>  $ zipWith3 newFace (cycle vertexIds) (cycle edgeIds) (drop 1 (cycle edgeIds))<br/>  where<br/>    f = VertexId . (+ epOffset) . getEdgeId<br/>    newFace vid epA epB = SimpleFace<br/>      [ VertexId . (+ vpOffset) $ getVertexId vid<br/>      , f epA<br/>      , VertexId $ getFaceId faceId<br/>      , f epB]<br/>\u00a0<br/>subdivide\u00a0:: Fractional a =&gt; SimpleMesh a -&gt; SimpleMesh a<br/>subdivide simpleMesh<br/>  = SimpleMesh combinedVertices (listArray (FaceId 0, FaceId (genericLength faces - 1)) faces)<br/>  where<br/>    mesh = makeComplexMesh simpleMesh<br/>    fps = allFacePoints mesh<br/>    ecps = allEdgeCenterPoints mesh<br/>    eps = allEdgePoints mesh fps ecps<br/>    iehs = allIsEdgeHoles mesh<br/>    vps = allVertexPoints mesh fps ecps iehs<br/>    edgePointOffset = length fps<br/>    vertexPointOffset = edgePointOffset + length eps<br/>    combinedVertices<br/>      = listArray (VertexId 0, VertexId (vertexPointOffset + length vps - 1))<br/>      . fmap SimpleVertex<br/>      $ concat [ fmap getFacePoint $ elems fps<br/>               , fmap getEdgePoint $ elems eps<br/>               , fmap getVertexPoint $ elems vps]<br/>    faces<br/>      = concat $ zipWith (<span class=\"es0\">\\f</span>ace fid -&gt; newFaces face fid edgePointOffset vertexPointOffset)<br/>      (elems $ meshFaces mesh) (fmap FaceId [0..])<br/>\u00a0<br/>-- Transform to a Mesh by filling in the missing references and generating edges.<br/>-- Faces can be updated with their edges, but must be ordered.<br/>-- Edge and face order does not matter for vertices.<br/>-- TODO: Discard degenerate faces (ones with 0 to 2 vertices/edges),<br/>-- or we could transform these into single edges or vertices.<br/>makeComplexMesh\u00a0:: forall a. SimpleMesh a -&gt; Mesh a<br/>makeComplexMesh (SimpleMesh sVertices sFaces) = Mesh vertices edges faces<br/>  where<br/>    makeEdgesFromFace\u00a0:: SimpleFace -&gt; FaceId -&gt; [Edge]<br/>    makeEdgesFromFace (SimpleFace vertexIds) fid<br/>      = take (genericLength vertexIds)<br/>      $ zipWith (<span class=\"es0\">\\a</span> b -&gt; Edge a b [fid]) verts (drop 1 verts)<br/>      where<br/>        verts = cycle vertexIds<br/>\u00a0<br/>    edgeKey\u00a0:: VertexId -&gt; VertexId -&gt; (VertexId, VertexId)<br/>    edgeKey a b = (min a b, max a b)<br/>\u00a0<br/>    sFacesList\u00a0:: [SimpleFace]<br/>    sFacesList = elems sFaces<br/>\u00a0<br/>    fids\u00a0:: [FaceId]<br/>    fids = fmap FaceId [0..]<br/>\u00a0<br/>    eids\u00a0:: [EdgeId]<br/>    eids = fmap EdgeId [0..]<br/>\u00a0<br/>    faceEdges\u00a0:: [[Edge]]<br/>    faceEdges = zipWith makeEdgesFromFace sFacesList fids<br/>\u00a0<br/>    edgeMap\u00a0:: Map.Map (VertexId, VertexId) Edge<br/>    edgeMap<br/>      = Map.fromListWith (<span class=\"es0\">\\(</span>Edge a b fidsA) (Edge _ _ fidsB) -&gt; Edge a b (fidsA ++ fidsB))<br/>      . fmap (<span class=\"es0\">\\e</span><a class=\"__cf_email__\" data-cfemail=\"cbafacae8b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Edge a b _) -&gt; (edgeKey a b, edge))<br/>      $ concat faceEdges<br/>\u00a0<br/>    edges\u00a0:: EdgeArray<br/>    edges = listArray (EdgeId 0, EdgeId $ (Map.size edgeMap) - 1) $ Map.elems edgeMap<br/>\u00a0<br/>    edgeIdMap\u00a0:: Map.Map (VertexId, VertexId) EdgeId<br/>    edgeIdMap = Map.fromList $ zipWith (<span class=\"es0\">\\(</span>Edge a b _) eid -&gt; ((edgeKey a b), eid)) (elems edges) eids<br/>\u00a0<br/>    faceEdgeIds\u00a0:: [[EdgeId]]<br/>    faceEdgeIds = fmap (mapMaybe (<span class=\"es0\">\\(</span>Edge a b _) -&gt; Map.lookup (edgeKey a b) edgeIdMap)) faceEdges<br/>\u00a0<br/>    faces\u00a0:: FaceArray<br/>    faces<br/>      = listArray (FaceId 0, FaceId $ (length sFaces) - 1)<br/>      $ zipWith (<span class=\"es0\">\\(</span>SimpleFace verts) edgeIds -&gt; Face verts edgeIds) sFacesList faceEdgeIds<br/>\u00a0<br/>    vidsToFids\u00a0:: Map.Map VertexId [FaceId]<br/>    vidsToFids<br/>      = Map.fromListWith (++)<br/>      . concat<br/>      $ zipWith (<span class=\"es0\">\\(</span>SimpleFace vertexIds) fid -&gt; fmap (<span class=\"es0\">\\v</span>id -&gt; (vid, [fid])) vertexIds) sFacesList fids<br/>\u00a0<br/>    vidsToEids\u00a0:: Map.Map VertexId [EdgeId]<br/>    vidsToEids<br/>      = Map.fromListWith (++)<br/>      . concat<br/>      $ zipWith (<span class=\"es0\">\\(</span>Edge a b _) eid -&gt; [(a, [eid]), (b, [eid])]) (elems edges) eids<br/>\u00a0<br/>    simpleToComplexVert\u00a0:: SimpleVertex a -&gt; VertexId -&gt; Vertex a<br/>    simpleToComplexVert (SimpleVertex point) vid<br/>      = Vertex point<br/>      (Map.findWithDefault [] vid vidsToEids)<br/>      (Map.findWithDefault [] vid vidsToFids)<br/>\u00a0<br/>    vertices\u00a0:: VertexArray a<br/>    vertices<br/>      = listArray (bounds sVertices)<br/>      $ zipWith simpleToComplexVert (elems sVertices) (fmap VertexId [0..])<br/>\u00a0<br/>pShowSimpleMesh\u00a0:: Show a =&gt; SimpleMesh a -&gt; String<br/>pShowSimpleMesh (SimpleMesh vertices faces)<br/>  = \"Vertices:<span class=\"es0\">\\n</span>\" ++ (arrShow vertices sVertexPoint)<br/>  ++ \"Faces:<span class=\"es0\">\\n</span>\" ++ (arrShow faces (fmap getVertexId . sFaceVertices))<br/>  where<br/>    arrShow a f = concatMap ((++ \"<span class=\"es0\">\\n</span>\") . show . (<span class=\"es0\">\\(</span>i, e) -&gt; (i, f e))) . zip [0\u00a0:: Int ..] $ elems a<br/>\u00a0<br/>-- Testing types.<br/>data Point a = Point a a a deriving (Show)<br/>\u00a0<br/>instance Functor Point where<br/>  fmap f (Point x y z) = Point (f x) (f y) (f z)<br/>\u00a0<br/>zipPoint\u00a0:: (a -&gt; b -&gt; c) -&gt; Point a -&gt; Point b -&gt; Point c<br/>zipPoint f (Point x y z) (Point x'</span> y<span class=\"st0\">' z'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Point <span class=\"br0\">(</span>f x x<span class=\"st0\">') (f y y'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f z z<span class=\"st0\">')<br/>\u00a0<br/>instance Num a =&gt; Num (Point a) where<br/>  (+) = zipPoint (+)<br/>  (-) = zipPoint (-)<br/>  (*) = zipPoint (*)<br/>  negate = fmap negate<br/>  abs = fmap abs<br/>  signum = fmap signum<br/>  fromInteger i = let i'</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> i <span class=\"kw1\">in</span> Point i<span class=\"st0\">' i'</span> i<span class=\"st0\">'<br/>\u00a0<br/>instance Fractional a =&gt; Fractional (Point a) where<br/>  recip = fmap recip<br/>  fromRational r = let r'</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromRational\"><span class=\"kw3\">fromRational</span></a> r <span class=\"kw1\">in</span> Point r<span class=\"st0\">' r'</span> r<span class=\"st0\">'<br/>\u00a0<br/>testCube\u00a0:: SimpleMesh (Point Double)<br/>testCube = SimpleMesh vertices faces<br/>  where<br/>    vertices = listArray (VertexId 0, VertexId 7)<br/>      $ fmap SimpleVertex<br/>      [ Point (-1) (-1) (-1)<br/>      , Point (-1) (-1) 1<br/>      , Point (-1) 1 (-1)<br/>      , Point (-1) 1 1<br/>      , Point 1 (-1) (-1)<br/>      , Point 1 (-1) 1<br/>      , Point 1 1 (-1)<br/>      , Point 1 1 1]<br/>    faces = listArray (FaceId 0, FaceId 5)<br/>      $ fmap (SimpleFace . (fmap VertexId))<br/>      [ [0, 4, 5, 1]<br/>      , [4, 6, 7, 5]<br/>      , [6, 2, 3, 7]<br/>      , [2, 0, 1, 3]<br/>      , [1, 5, 7, 3]<br/>      , [0, 2, 6, 4]]<br/>\u00a0<br/>testCubeWithHole\u00a0:: SimpleMesh (Point Double)<br/>testCubeWithHole<br/>  = SimpleMesh (sMeshVertices testCube) (ixmap (FaceId 0, FaceId 4) id (sMeshFaces testCube))<br/>\u00a0<br/>testTriangle\u00a0:: SimpleMesh (Point Double)<br/>testTriangle = SimpleMesh vertices faces<br/>  where<br/>    vertices = listArray (VertexId 0, VertexId 2)<br/>      $ fmap SimpleVertex<br/>      [ Point 0 0 0<br/>      , Point 0 0 1<br/>      , Point 0 1 0]<br/>    faces = listArray (FaceId 0, FaceId 0)<br/>      $ fmap (SimpleFace . (fmap VertexId))<br/>      [ [0, 1, 2]]<br/>\u00a0<br/>main\u00a0:: IO ()<br/>main = putStr . pShowSimpleMesh $ subdivide testCube</span></pre>"}, {"lang": "J", "loc": 23, "block": "<pre class=\"j highlighted_source\">avg=: +/\u00a0% #<br/>\u00a0<br/>havePoints=: e.\"<span class=\"nu0\">1</span>/~ <a class=\"__cf_email__\" data-cfemail=\"543d7a14\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<br/>\u00a0<br/>catmullclark=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'mesh points'</span>=. <span class=\"kw2\">y</span><br/>  face_point=. avg\"<span class=\"nu0\">2</span> mesh{points<br/>  point_face=. |: mesh havePoints points<br/>  avg_face_points=. point_face <a class=\"__cf_email__\" data-cfemail=\"0d6c7b6a4d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#\"<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> face_point<br/>  edges=. ~.,/ meshEdges=. mesh /:<a class=\"__cf_email__\" data-cfemail=\"e698a6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,\"+<span class=\"nu0\">1</span>|.\"<span class=\"nu0\">1</span> mesh<br/>  edge_face=. *./\"<span class=\"nu0\">2</span> edges e.\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span>/ mesh<br/>  edge_center=. avg\"<span class=\"nu0\">2</span> edges{points<br/>  edge_point=. <span class=\"sy0\">(</span><span class=\"nu0\">0.5</span>*edge_center<span class=\"sy0\">)</span> + <span class=\"nu0\">0.25</span> * edge_face +/ .* face_point  <br/>  point_edge=. |: edges havePoints points<br/>  avg_mid_edges=.  point_edge <a class=\"__cf_email__\" data-cfemail=\"a2c3d4c5e2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#\"<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> edge_center<br/>  <span class=\"kw2\">n</span>=. +/\"<span class=\"nu0\">1</span> point_edge<br/>  <span class=\"st_h\">'m3 m2 m1'</span>=. <span class=\"sy0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,:<span class=\"kw2\">n</span>-<span class=\"nu0\">3</span><span class=\"sy0\">)</span>%\"<span class=\"nu0\">1</span> <span class=\"kw2\">n</span><br/>  new_coords=. <span class=\"sy0\">(</span>m1 * points<span class=\"sy0\">)</span> + <span class=\"sy0\">(</span>m2 * avg_face_points<span class=\"sy0\">)</span> + <span class=\"sy0\">(</span>m3 * avg_mid_edges<span class=\"sy0\">)</span><br/>  pts=. face_point,edge_point,new_coords<br/>  c0=. <span class=\"sy0\">(</span>#edge_point<span class=\"sy0\">)</span>+ e0=. #face_point<br/>  msh=. <span class=\"sy0\">(</span>,c0+mesh<span class=\"sy0\">)</span>,.<span class=\"sy0\">(</span>,e0+edges i. meshEdges<span class=\"sy0\">)</span>,.<span class=\"sy0\">((</span>#i.<span class=\"sy0\">)</span>~/$mesh<span class=\"sy0\">)</span>,.,e0+<span class=\"nu0\">_1</span>|.\"<span class=\"nu0\">1</span> edges i. meshEdges<br/>  msh;pts<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">subSetQ[large_,small_]\u00a0:= MemberQ[large,small]<br/>subSetQ[large_,small_List]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"aaebc4ceea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@(MemberQ[large,#]&amp;/@small)<br/>\u00a0<br/>containing[groupList_,item_]:= Flatten[Position[groupList,group_/;subSetQ[group,item]]]<br/>\u00a0<br/>ReplaceFace[face_]:=Transpose[Prepend[Transpose[{#[[1]],face,#[[2]]}&amp;/@Transpose[Partition[face,2,1,1]//{#,RotateRight[#]}&amp;]],face]]</pre>"}, {"lang": "OCaml", "loc": 136, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Dynar<br/>\u00a0<br/><span class=\"kw1\">let</span> add3 <span class=\"br0\">(</span>x1, y1, z1<span class=\"br0\">)</span> <span class=\"br0\">(</span>x2, y2, z2<span class=\"br0\">)</span> <span class=\"br0\">(</span>x3, y3, z3<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">+.</span> x2 <span class=\"sy0\">+.</span> x3<span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>y1 <span class=\"sy0\">+.</span> y2 <span class=\"sy0\">+.</span> y3<span class=\"br0\">)</span>,<br/>    <span class=\"br0\">(</span>z1 <span class=\"sy0\">+.</span> z2 <span class=\"sy0\">+.</span> z3<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> mul m <span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">*.</span> x, m <span class=\"sy0\">*.</span> y, m <span class=\"sy0\">*.</span> z<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> avg pts <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n, <span class=\"br0\">(</span>x,y,z<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left<br/>      <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n, <span class=\"br0\">(</span>xt,yt,zt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>xi,yi,zi<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>         <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> n, <span class=\"br0\">(</span>xt <span class=\"sy0\">+.</span> xi, yt <span class=\"sy0\">+.</span> yi, zt <span class=\"sy0\">+.</span> zi<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd pts<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>tl pts<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> n <span class=\"kw1\">in</span><br/>  <span class=\"br0\">(</span>x <span class=\"sy0\">/.</span> n, y <span class=\"sy0\">/.</span> n, z <span class=\"sy0\">/.</span> n<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> catmull <span class=\"re1\">~points</span> <span class=\"re1\">~faces</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> da_points <span class=\"sy0\">=</span> Dynar<span class=\"sy0\">.</span>of_array points <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> new_faces <span class=\"sy0\">=</span> Dynar<span class=\"sy0\">.</span>of_array <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> push_face face <span class=\"sy0\">=</span> Dynar<span class=\"sy0\">.</span>push new_faces face <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> h1 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">43</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> h2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">43</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> h3 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">43</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> h4 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">43</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> blg <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length points<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span> <span class=\"co1\">(* how many faces a point belongs to *)</span><br/>  <span class=\"kw1\">let</span> f_incr p <span class=\"sy0\">=</span> blg<span class=\"sy0\">.</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> blg<span class=\"sy0\">.</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> eblg <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length points<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span> <span class=\"co1\">(* how many edges a point belongs to *)</span><br/>  <span class=\"kw1\">let</span> e_incr p <span class=\"sy0\">=</span> eblg<span class=\"sy0\">.</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> eblg<span class=\"sy0\">.</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> edge a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> a b, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> a b<span class=\"br0\">)</span> <span class=\"kw1\">in</span>  <span class=\"co1\">(* suitable for hash-table keys *)</span><br/>  <span class=\"kw1\">let</span> mid_edge p1 p2 <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> x1, y1, z1 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">and</span> x2, y2, z2 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"br0\">(</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">+.</span> x2<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">2.0</span>,<br/>      <span class=\"br0\">(</span>y1 <span class=\"sy0\">+.</span> y2<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">2.0</span>,<br/>      <span class=\"br0\">(</span>z1 <span class=\"sy0\">+.</span> z2<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">2.0</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> mid_face p1 p2 p3 p4 <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> x1, y1, z1 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">and</span> x2, y2, z2 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">and</span> x3, y3, z3 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">and</span> x4, y4, z4 <span class=\"sy0\">=</span> points<span class=\"sy0\">.</span><span class=\"br0\">(</span>p4<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"br0\">(</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">+.</span> x2 <span class=\"sy0\">+.</span> x3 <span class=\"sy0\">+.</span> x4<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">4.0</span>,<br/>      <span class=\"br0\">(</span>y1 <span class=\"sy0\">+.</span> y2 <span class=\"sy0\">+.</span> y3 <span class=\"sy0\">+.</span> y4<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">4.0</span>,<br/>      <span class=\"br0\">(</span>z1 <span class=\"sy0\">+.</span> z2 <span class=\"sy0\">+.</span> z3 <span class=\"sy0\">+.</span> z4<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <span class=\"nu0\">4.0</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    f_incr a<span class=\"sy0\">;</span> f_incr b<span class=\"sy0\">;</span> f_incr c<span class=\"sy0\">;</span> f_incr d<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> face_point <span class=\"sy0\">=</span> mid_face a b c d <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> face_pi <span class=\"sy0\">=</span> pushi da_points face_point <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h3 a face_point<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h3 b face_point<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h3 c face_point<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h3 d face_point<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> process_edge a b <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> ab <span class=\"sy0\">=</span> edge a b <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>mem h1 ab<span class=\"br0\">)</span><br/>      <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">let</span> mid_ab <span class=\"sy0\">=</span> mid_edge a b <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">let</span> index <span class=\"sy0\">=</span> pushi da_points mid_ab <span class=\"kw1\">in</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h1 ab <span class=\"br0\">(</span>index, mid_ab, <span class=\"br0\">[</span>face_point<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h2 a mid_ab<span class=\"sy0\">;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h2 b mid_ab<span class=\"sy0\">;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h4 mid_ab <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">let</span> index, mid_ab, fpl <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h1 ab <span class=\"kw1\">in</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace h1 ab <span class=\"br0\">(</span>index, mid_ab, face_point<span class=\"sy0\">::</span>fpl<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h4 mid_ab <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h4 mid_ab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> mid_ab <span class=\"sy0\">=</span> process_edge a b<br/>    <span class=\"kw1\">and</span> mid_bc <span class=\"sy0\">=</span> process_edge b c<br/>    <span class=\"kw1\">and</span> mid_cd <span class=\"sy0\">=</span> process_edge c d<br/>    <span class=\"kw1\">and</span> mid_da <span class=\"sy0\">=</span> process_edge d a <span class=\"kw1\">in</span><br/>\u00a0<br/>    push_face <span class=\"br0\">(</span>a, mid_ab, face_pi, mid_da<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push_face <span class=\"br0\">(</span>b, mid_bc, face_pi, mid_ab<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push_face <span class=\"br0\">(</span>c, mid_cd, face_pi, mid_bc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    push_face <span class=\"br0\">(</span>d, mid_da, face_pi, mid_cd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span> faces<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"br0\">(</span>index, mid_ab, fpl<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    e_incr a<span class=\"sy0\">;</span> e_incr b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length fpl <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>      da_points<span class=\"sy0\">.</span>ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> avg <span class=\"br0\">(</span>mid_ab<span class=\"sy0\">::</span>fpl<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> h1<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i old_vertex <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> blg<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">and</span> e_n <span class=\"sy0\">=</span> eblg<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"co1\">(* if the vertex doesn't belongs to as many faces than edges<br/>       this means that this is a hole *)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> e_n <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">let</span> avg_face_points <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> face_point_list <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_all h3 i <span class=\"kw1\">in</span><br/>        <span class=\"br0\">(</span>avg face_point_list<span class=\"br0\">)</span><br/>      <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> avg_mid_edges <span class=\"sy0\">=</span> <br/>        <span class=\"kw1\">let</span> mid_edge_list <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_all h2 i <span class=\"kw1\">in</span><br/>        <span class=\"br0\">(</span>avg mid_edge_list<span class=\"br0\">)</span><br/>      <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> n <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> m1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-.</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span> <span class=\"sy0\">/.</span> n<br/>      <span class=\"kw1\">and</span> m2 <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/.</span> n<br/>      <span class=\"kw1\">and</span> m3 <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">/.</span> n <span class=\"kw1\">in</span><br/>      da_points<span class=\"sy0\">.</span>ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span><br/>          add3 <span class=\"br0\">(</span>mul m1 old_vertex<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>mul m2 avg_face_points<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>mul m3 avg_mid_edges<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">let</span> mid_edge_list <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_all h2 i <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> mid_edge_list <span class=\"sy0\">=</span><br/>        <span class=\"co1\">(* only average mid-edges near the hole *)</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> acc mid_edge <span class=\"sy0\">-&gt;</span><br/>          <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find h4 mid_edge <span class=\"kw1\">with</span><br/>          <span class=\"sy0\">|</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> mid_edge<span class=\"sy0\">::</span>acc<br/>          <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> acc<br/>        <span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> mid_edge_list<br/>      <span class=\"kw1\">in</span><br/>      da_points<span class=\"sy0\">.</span>ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> avg <span class=\"br0\">(</span>old_vertex <span class=\"sy0\">::</span> mid_edge_list<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"br0\">)</span> points<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>Dynar<span class=\"sy0\">.</span>to_array da_points,<br/>   Dynar<span class=\"sy0\">.</span>to_array new_faces<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Tcl", "loc": 122, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Use math functions and operators as commands (Lisp-like).</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>tcl::<span class=\"me1\">mathfunc</span> tcl::<span class=\"me1\">mathop</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Add 3 points.</span><br/><span class=\"kw1\">proc</span> add3 <span class=\"br0\">{</span>A B C<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"re0\">$A</span> Ax Ay Az<br/>    lassign <span class=\"re0\">$B</span> Bx By Bz<br/>    lassign <span class=\"re0\">$C</span> Cx Cy Cz<br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$Ax</span> <span class=\"re0\">$Bx</span> <span class=\"re0\">$Cx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$Ay</span> <span class=\"re0\">$By</span> <span class=\"re0\">$Cy</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$Az</span> <span class=\"re0\">$Bz</span> <span class=\"re0\">$Cz</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Multiply a point by a constant.</span><br/><span class=\"kw1\">proc</span> mulC <span class=\"br0\">{</span>m A<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"re0\">$A</span> x y z<br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"re0\">$z</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Take the centroid of a set of points.</span><br/><span class=\"co1\"># Note that each of the arguments is a *list* of coordinate triples</span><br/><span class=\"co1\"># This makes things easier later.</span><br/><span class=\"kw1\">proc</span> centroid args <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">set</span> z <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> plist <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$plist</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">foreach</span> p <span class=\"re0\">$plist</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$p</span> px py pz<br/>\t    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span>+ <span class=\"re0\">$x</span> <span class=\"re0\">$px</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span>+ <span class=\"re0\">$y</span> <span class=\"re0\">$py</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> z <span class=\"br0\">[</span>+ <span class=\"re0\">$z</span> <span class=\"re0\">$pz</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span>double <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span>/ <span class=\"re0\">$x</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>/ <span class=\"re0\">$y</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>/ <span class=\"re0\">$z</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Select from the list the value from each of the indices in the *lists*</span><br/><span class=\"co1\"># in the trailing arguments.</span><br/><span class=\"kw1\">proc</span> selectFrom <span class=\"br0\">{</span><span class=\"kw2\">list</span> args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> is <span class=\"re0\">$args</span> <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> i <span class=\"re0\">$is</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> r <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Rotate a list.</span><br/><span class=\"kw1\">proc</span> lrot <span class=\"br0\">{</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span>n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"sy0\">%</span> <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$list</span> <span class=\"re0\">$n</span> end<span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$list</span> <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Generate an edge by putting the smaller coordinate index first.</span><br/><span class=\"kw1\">proc</span> edge <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span>min <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>max <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Perform one step of Catmull-Clark subdivision of a surface.</span><br/><span class=\"kw1\">proc</span> CatmullClark <span class=\"br0\">{</span>points faces<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Generate the new face-points and list of edges, plus some lookup tables.</span><br/>    <span class=\"kw1\">set</span> edges <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> f <span class=\"re0\">$faces</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> ps <span class=\"br0\">[</span>selectFrom <span class=\"re0\">$points</span> <span class=\"re0\">$f</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> fp <span class=\"br0\">[</span>centroid <span class=\"re0\">$ps</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> facepoints <span class=\"re0\">$fp</span><br/>\t<span class=\"kw1\">foreach</span> p <span class=\"re0\">$ps</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> fp4p<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"re0\">$fp</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> p1 <span class=\"re0\">$f</span> p2 <span class=\"br0\">[</span>lrot <span class=\"re0\">$f</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> e <span class=\"br0\">[</span>edge <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$e</span> ni <span class=\"re0\">$edges</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> edges <span class=\"re0\">$e</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> fp4e<span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">)</span> <span class=\"re0\">$fp</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Generate the new edge-points and mid-points of edges, and a few more</span><br/>    <span class=\"co1\"># lookup tables.</span><br/>    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span>+ <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$faces</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> e <span class=\"re0\">$edges</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> ep <span class=\"br0\">[</span>selectFrom <span class=\"re0\">$points</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fp4e</span><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span>centroid <span class=\"re0\">$ep</span> <span class=\"re0\">$fp4e</span><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span>centroid <span class=\"re0\">$ep</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$ep</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> ep_heavy<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"re0\">$mid</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> edgepoints <span class=\"re0\">$mid</span><br/>\t<span class=\"kw1\">set</span> en4e<span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">)</span> <span class=\"re0\">$i</span><br/>\t<span class=\"kw1\">foreach</span> p <span class=\"re0\">$ep</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> ep4p<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"re0\">$mid</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> i<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Generate the new vertex points with our lookup tables.</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$points</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fp4p</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fp4p</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">lappend</span> newPoints <span class=\"br0\">[</span>add3 <span class=\"br0\">[</span>mulC <span class=\"br0\">[</span>/ <span class=\"br0\">[</span>- <span class=\"re0\">$n</span> <span class=\"nu0\">3.0</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"re0\">$p</span><span class=\"br0\">]</span> \\<br/>\t\t    <span class=\"br0\">[</span>mulC <span class=\"br0\">[</span>/ <span class=\"nu0\">1.0</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>centroid <span class=\"re0\">$fp4p</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t\t    <span class=\"br0\">[</span>mulC <span class=\"br0\">[</span>/ <span class=\"nu0\">2.0</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>centroid <span class=\"re0\">$ep4p</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># Update a point on the edge of a hole. This formula is not</span><br/>\t    <span class=\"co1\"># described on the WP page, but produces a nice result.</span><br/>\t    <span class=\"kw2\">lappend</span> newPoints <span class=\"br0\">[</span>centroid <span class=\"re0\">$ep_heavy</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$p</span> <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Now compute the new set of quadrilateral faces.</span><br/>    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> f <span class=\"re0\">$faces</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> a <span class=\"re0\">$f</span> b <span class=\"br0\">[</span>lrot <span class=\"re0\">$f</span><span class=\"br0\">]</span> c <span class=\"br0\">[</span>lrot <span class=\"re0\">$f</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> newFaces <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t\t    <span class=\"re0\">$a</span> <span class=\"re0\">$en4e</span><span class=\"br0\">(</span><span class=\"br0\">[</span>edge <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"re0\">$i</span> <span class=\"re0\">$en4e</span><span class=\"br0\">(</span><span class=\"br0\">[</span>edge <span class=\"re0\">$c</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> i<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$newPoints</span> <span class=\"re0\">$facepoints</span> <span class=\"re0\">$edgepoints</span><span class=\"br0\">]</span> <span class=\"re0\">$newFaces</span><br/><span class=\"br0\">}</span></pre>"}]}