{"task": "Dining_philosophers", "blocks": [{"lang": "Ada", "loc": 50, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">with</span> Synchronization.<span class=\"me1\">Generic_Mutexes_Array</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Dining_Philosophers <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Philosopher <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Aristotle, Kant, Spinoza, Marx, Russel<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> Fork_Arrays <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Synchronization.<span class=\"me1\">Generic_Mutexes_Array</span> <span class=\"br0\">(</span>Philosopher<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Fork_Arrays;<br/>\u00a0<br/>   Life_Span\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">20</span>;    <span class=\"co1\">-- In his life a philosopher eats 20 times</span><br/>   Forks\u00a0: <span class=\"kw3\">aliased</span> Mutexes_Array; <span class=\"co1\">-- Forks for hungry philosophers</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Left_Of <span class=\"br0\">(</span>Fork\u00a0: Philosopher<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Philosopher <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Fork = Philosopher'First <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> Philosopher'Last;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> Philosopher'Pred <span class=\"br0\">(</span>Fork<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Left_Of;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">type</span> Person <span class=\"br0\">(</span>ID\u00a0: Philosopher<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">body</span> Person <span class=\"kw1\">is</span><br/>      Cutlery\u00a0: <span class=\"kw3\">aliased</span> Mutexes_Set\u00a0:= ID <span class=\"kw2\">or</span> Left_Of <span class=\"br0\">(</span>ID<span class=\"br0\">)</span>;<br/>      Dice   \u00a0: Generator;<br/>   <span class=\"kw1\">begin</span><br/>      Reset <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> Life_Cycle <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Life_Span</span> <span class=\"kw1\">loop</span><br/>         Put_Line <span class=\"br0\">(</span>Philosopher'Image <span class=\"br0\">(</span>ID<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is thinking\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">delay</span> Duration <span class=\"br0\">(</span>Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> * <span class=\"nu0\">0.100</span><span class=\"br0\">)</span>;<br/>         Put_Line <span class=\"br0\">(</span>Philosopher'Image <span class=\"br0\">(</span>ID<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is hungry\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">declare</span><br/>            Lock\u00a0: Set_Holder <span class=\"br0\">(</span>Forks'<span class=\"kw3\">Access</span>, Cutlery'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">begin</span><br/>            Put_Line <span class=\"br0\">(</span>Philosopher'Image <span class=\"br0\">(</span>ID<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is eating\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">delay</span> Duration <span class=\"br0\">(</span>Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> * <span class=\"nu0\">0.100</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Put_Line <span class=\"br0\">(</span>Philosopher'Image <span class=\"br0\">(</span>ID<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is leaving\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Person;<br/>\u00a0<br/>   Ph_1\u00a0: Person <span class=\"br0\">(</span>Aristotle<span class=\"br0\">)</span>; <span class=\"co1\">-- Start philosophers</span><br/>   Ph_2\u00a0: Person <span class=\"br0\">(</span>Kant<span class=\"br0\">)</span>;<br/>   Ph_3\u00a0: Person <span class=\"br0\">(</span>Spinoza<span class=\"br0\">)</span>;<br/>   Ph_4\u00a0: Person <span class=\"br0\">(</span>Marx<span class=\"br0\">)</span>;<br/>   Ph_5\u00a0: Person <span class=\"br0\">(</span>Russel<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw3\">null</span>; <span class=\"co1\">-- Nothing to do in the main task, just sit and behold</span><br/><span class=\"kw1\">end</span> Test_Dining_Philosophers;</pre>"}, {"lang": "AutoHotkey", "loc": 142, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_Persistent.htm\"><span class=\"kw5\">#Persistent</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetWorkingDir.htm\"><span class=\"kw3\">SetWorkingDir</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptDir%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> output<span class=\"sy0\">.</span>txt<br/>EnoughForks <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"co1\">; required forks to begin eating</span><br/>Fork1 <span class=\"sy0\">:=</span> Fork2 <span class=\"sy0\">:=</span> Fork3 <span class=\"sy0\">:=</span> Fork4 <span class=\"sy0\">:=</span> Fork5 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"co1\">; fork supply per philosopher</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> AristotleWaitForLeftFork<br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> KantWaitForLeftFork<br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> SpinozaWaitForLeftFork<br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> MarxWaitForLeftFork<br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> RussellWaitForLeftFork<br/><span class=\"kw1\">Return</span> <span class=\"co1\">;---------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"re2\">AristotleWaitForLeftFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> AristotleLeftForkCount<span class=\"sy0\">,</span> AristotleRightForkCount<span class=\"sy0\">,</span> AristotleWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">AristotleWaitForRightFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> AristotleRightForkCount<span class=\"sy0\">,</span> AristotleLeftForkCount<span class=\"sy0\">,</span> AristotleWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">AristotleFinishEating:<br/></span>\tReturnForks<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> AristotleLeftForkCount<span class=\"sy0\">,</span> AristotleRightForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">KantWaitForLeftFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> KantLeftForkCount<span class=\"sy0\">,</span> KantRightForkCount<span class=\"sy0\">,</span> KantWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">KantWaitForRightFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> KantRightForkCount<span class=\"sy0\">,</span> KantLeftForkCount<span class=\"sy0\">,</span> KantWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">KantFinishEating:<br/></span>\tReturnForks<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span> Fork2<span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> KantLeftForkCount<span class=\"sy0\">,</span> KantRightForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">SpinozaWaitForLeftFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> SpinozaLeftForkCount<span class=\"sy0\">,</span> SpinozaRightForkCount<span class=\"sy0\">,</span> SpinozaWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">SpinozaWaitForRightFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> SpinozaRightForkCount<span class=\"sy0\">,</span> SpinozaLeftForkCount<span class=\"sy0\">,</span> SpinozaWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">SpinozaFinishEating:<br/></span>\tReturnForks<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span> Fork3<span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> SpinozaLeftForkCount<span class=\"sy0\">,</span> SpinozaRightForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">MarxWaitForLeftFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> MarxLeftForkCount<span class=\"sy0\">,</span> MarxRightForkCount<span class=\"sy0\">,</span> MarxWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">MarxWaitForRightFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> MarxRightForkCount<span class=\"sy0\">,</span> MarxLeftForkCount<span class=\"sy0\">,</span> MarxWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">MarxFinishEating:<br/></span>\tReturnForks<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span><span class=\"sy0\">,</span> Fork4<span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> MarxLeftForkCount<span class=\"sy0\">,</span> MarxRightForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">RussellWaitForLeftFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Russell\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> RussellLeftForkCount<span class=\"sy0\">,</span> RussellRightForkCount<span class=\"sy0\">,</span> RussellWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">RussellWaitForRightFork:<br/></span>\tWaitForFork<span class=\"br0\">(</span><span class=\"st0\">\"Russell\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> RussellRightForkCount<span class=\"sy0\">,</span> RussellLeftForkCount<span class=\"sy0\">,</span> RussellWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/><span class=\"re2\">RussellFinishEating:<br/></span>\tReturnForks<span class=\"br0\">(</span><span class=\"st0\">\"Russell\"</span><span class=\"sy0\">,</span> Fork5<span class=\"sy0\">,</span> Fork1<span class=\"sy0\">,</span> RussellLeftForkCount<span class=\"sy0\">,</span> RussellRightForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>ReturnForks<span class=\"br0\">(</span>Philosopher<span class=\"sy0\">,</span> ByRef ThisFork<span class=\"sy0\">,</span> ByRef OtherFork<span class=\"sy0\">,</span> ByRef CurrentThisForkCount<span class=\"sy0\">,</span> ByRef CurrentOtherForkCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> finishes eating<span class=\"sy0\">.</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> finishes eating<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\tThisFork <span class=\"sy0\">+=</span> CurrentThisForkCount <span class=\"co1\">; return this fork</span><br/>\tOtherFork <span class=\"sy0\">+=</span> CurrentOtherForkCount <span class=\"co1\">; return other fork</span><br/>\tCurrentThisForkCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">; release this fork</span><br/>\tCurrentOtherForkCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">; release other fork</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> returns all forks<span class=\"sy0\">.</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> returns all forks<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\u00a0<br/>\t<span class=\"co1\">; do something while resting</span><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> Rand<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\tRand <span class=\"sy0\">:=</span> Rand\u00a0? <span class=\"st0\">\"Left\"</span>\u00a0: <span class=\"st0\">\"Right\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%Rand%</span>Fork<br/><span class=\"br0\">}</span><br/>\u00a0<br/>WaitForFork<span class=\"br0\">(</span>Philosopher<span class=\"sy0\">,</span> This<span class=\"sy0\">,</span> ByRef ThisFork<span class=\"sy0\">,</span> ByRef OtherFork<span class=\"sy0\">,</span> ByRef CurrentThisForkCount<span class=\"sy0\">,</span> ByRef CurrentOtherForkCount<span class=\"sy0\">,</span> ByRef CurrentWaitCount<span class=\"sy0\">,</span> EnoughForks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span> This not in <span class=\"kw6\">Left</span><span class=\"sy0\">,</span><span class=\"kw6\">Right</span><br/>\t\t<span class=\"kw1\">Return</span> Error<br/>\tOther <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>This<span class=\"sy0\">=</span><span class=\"st0\">\"right\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"left\"</span>\u00a0: <span class=\"st0\">\"right\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> is hungry<span class=\"sy0\">.</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> is hungry<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>ThisFork<span class=\"br0\">)</span> <span class=\"co1\">; if this fork available</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%This%</span>Fork<span class=\"sy0\">,</span> Off<br/>\t\tCurrentWaitCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\tThisFork<span class=\"sy0\">--</span> <span class=\"co1\">; take this fork</span><br/>\t\tCurrentThisForkCount<span class=\"sy0\">++</span> <span class=\"co1\">; receive this fork</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> grabs <span class=\"re0\">%This%</span> fork<span class=\"sy0\">.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> grabs <span class=\"re0\">%This%</span> fork<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>CurrentThisForkCount <span class=\"sy0\">+</span> CurrentOtherForkCount <span class=\"sy0\">=</span> EnoughForks<span class=\"br0\">)</span> <span class=\"co1\">; if philosopher has enough forks</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> starts eating<span class=\"sy0\">.</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> starts eating<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\u00a0<br/>\t\t\t<span class=\"co1\">; do something while eating</span><br/>\u00a0<br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>FinishEating<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">250</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>EnoughForks<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%Other%</span>Fork<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> Rand<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\t\tRand <span class=\"sy0\">:=</span> Rand\u00a0? <span class=\"st0\">\"Left\"</span>\u00a0: <span class=\"st0\">\"Right\"</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%Rand%</span>Fork<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>CurrentOtherForkCount <span class=\"kw1\">and</span> CurrentWaitCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">; if we've been holding other fork too long</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%This%</span>Fork<span class=\"sy0\">,</span> Off<br/>\t\tCurrentWaitCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\tOtherFork<span class=\"sy0\">++</span> <span class=\"co1\">; return other fork</span><br/>\t\tCurrentOtherForkCount<span class=\"sy0\">--</span> <span class=\"co1\">; release other fork</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> drops <span class=\"re0\">%Other%</span> fork<span class=\"sy0\">.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> drops <span class=\"re0\">%Other%</span> fork<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> Rand<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\tRand <span class=\"sy0\">:=</span> Rand\u00a0? <span class=\"st0\">\"Left\"</span>\u00a0: <span class=\"st0\">\"Right\"</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%Rand%</span>Fork<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>CurrentThisForkCount <span class=\"kw1\">and</span> CurrentWaitCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">; if we've been holding one of this fork too long</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%This%</span>Fork<span class=\"sy0\">,</span> Off<br/>\t\tCurrentWaitCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\tThisFork<span class=\"sy0\">++</span> <span class=\"co1\">; return other fork</span><br/>\t\tCurrentThisForkCount<span class=\"sy0\">--</span> <span class=\"co1\">; release other fork</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> drops <span class=\"re0\">%This%</span> fork<span class=\"sy0\">.</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span> drops <span class=\"re0\">%This%</span> fork<span class=\"sy0\">.</span>`n<span class=\"sy0\">,</span>output<span class=\"sy0\">.</span>txt<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> Rand<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\tRand <span class=\"sy0\">:=</span> Rand\u00a0? <span class=\"st0\">\"Left\"</span>\u00a0: <span class=\"st0\">\"Right\"</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Philosopher%</span>WaitFor<span class=\"re0\">%Rand%</span>Fork<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tCurrentWaitCount<span class=\"sy0\">++</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 66, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"TIMERLIB\"<br/>\u00a0<br/>      nSeats% = 5<br/>      DIM Name$(nSeats%-1), Fork%(nSeats%-1), tID%(nSeats%-1), Leftie%(nSeats%-1)<br/>\u00a0<br/>      Name$() = \"Aristotle\", \"Kant\", \"Spinoza\", \"Marx\", \"Russell\"<br/>      Fork%() = TRUE\u00a0: REM All forks are initially on the table<br/>      Leftie%(RND(nSeats%)-1) = TRUE\u00a0: REM One philosopher is lefthanded<br/>\u00a0<br/>      tID%(0) = FN_ontimer(10, PROCphilosopher0, 1)<br/>      tID%(1) = FN_ontimer(10, PROCphilosopher1, 1)<br/>      tID%(2) = FN_ontimer(10, PROCphilosopher2, 1)<br/>      tID%(3) = FN_ontimer(10, PROCphilosopher3, 1)<br/>      tID%(4) = FN_ontimer(10, PROCphilosopher4, 1)<br/>\u00a0<br/>      ON CLOSE PROCcleanup\u00a0: QUIT<br/>      ON ERROR PRINT REPORT$\u00a0: PROCcleanup\u00a0: END<br/>\u00a0<br/>      DEF PROCphilosopher0\u00a0: PROCtask(0)\u00a0: ENDPROC<br/>      DEF PROCphilosopher1\u00a0: PROCtask(1)\u00a0: ENDPROC<br/>      DEF PROCphilosopher2\u00a0: PROCtask(2)\u00a0: ENDPROC<br/>      DEF PROCphilosopher3\u00a0: PROCtask(3)\u00a0: ENDPROC<br/>      DEF PROCphilosopher4\u00a0: PROCtask(4)\u00a0: ENDPROC<br/>\u00a0<br/>      REPEAT<br/>        WAIT 0<br/>      UNTIL FALSE<br/>      END<br/>\u00a0<br/>      DEF PROCtask(n%)<br/>      PRIVATE state%(), lh%(), rh%()<br/>      DIM state%(nSeats%-1), lh%(nSeats%-1), rh%(nSeats%-1)<br/>      REM States: 0 = waiting for forks, &gt; 0 = eating, &lt; 0 = left the room<br/>      CASE TRUE OF<br/>        WHEN state%(n%) &lt; 0:<br/>          state%(n%) += 1\u00a0: REM Waiting to get hungry again<br/>          IF state%(n%) = 0 PRINT Name$(n%) \" is hungry again\"<br/>        WHEN state%(n%) &gt; 0:<br/>          state%(n%) -= 1\u00a0: REM Eating<br/>          IF state%(n%) = 0 THEN<br/>            SWAP Fork%((n%-1+nSeats%) MOD nSeats%), lh%(n%)<br/>            SWAP Fork%((n% + 1) MOD nSeats%), rh%(n%)<br/>            state%(n%) = -RND(100)<br/>            PRINT Name$(n%) \" is leaving the room\"<br/>          ENDIF<br/>        WHEN state%(n%) = 0:<br/>          IF Leftie%(n%) THEN<br/>            IF NOT lh%(n%) SWAP Fork%((n%-1+nSeats%) MOD nSeats%), lh%(n%)<br/>            IF lh%(n%) IF NOT rh%(n%) SWAP Fork%((n% + 1) MOD nSeats%), rh%(n%)<br/>          ELSE<br/>            IF NOT rh%(n%) SWAP Fork%((n% + 1) MOD nSeats%), rh%(n%)<br/>            IF rh%(n%) IF NOT lh%(n%) SWAP Fork%((n%-1+nSeats%) MOD nSeats%), lh%(n%)<br/>          ENDIF<br/>          IF lh%(n%) AND rh%(n%) THEN<br/>            state%(n%) = RND(100)<br/>            PRINT Name$(n%) \" is eating (\"\u00a0; state%(n%) \" ticks)\"<br/>          ENDIF<br/>      ENDCASE<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcleanup<br/>      LOCAL I%<br/>      FOR I% = 0 TO nSeats%-1<br/>        PROC_killtimer(tID%(I%))<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 95, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pthread.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;stdarg.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N 5</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>names<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Marx\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Russell\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>pthread_mutex_t forks<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define M 5 /* think bubbles */</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>topic<span class=\"br0\">[</span>M<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Spaghetti!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Life\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Universe\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Everything\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bathroom\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define lock pthread_mutex_lock</span><br/><span class=\"co2\">#define unlock pthread_mutex_unlock</span><br/><span class=\"co2\">#define xy(x, y) printf(\"\\033[%d;%dH\", x, y)</span><br/><span class=\"co2\">#define clear_eol(x) print(x, 12, \"\\033[K\")</span><br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>fmt<span class=\"sy0\">,</span> ...<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">static</span> pthread_mutex_t screen <span class=\"sy0\">=</span> PTHREAD_MUTEX_INITIALIZER<span class=\"sy0\">;</span><br/>\tva_list ap<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_start.html\"><span class=\"kw3\">va_start</span></a><span class=\"br0\">(</span>ap<span class=\"sy0\">,</span> fmt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>screen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\txy<span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/vprintf.html\"><span class=\"kw3\">vprintf</span></a><span class=\"br0\">(</span>fmt<span class=\"sy0\">,</span> ap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\txy<span class=\"br0\">(</span>N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tunlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>screen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> eat<span class=\"br0\">(</span><span class=\"kw4\">int</span> id<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> f<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ration<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* forks */</span><br/>\tf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> id<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* make some (but not all) philosophers leftie.<br/>\t   could have been f[!id] = (id + 1)\u00a0%N; for example */</span><br/>\tf<span class=\"br0\">[</span>id <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>id <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> N<span class=\"sy0\">;</span><br/>\u00a0<br/>\tclear_eol<span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tprint<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"st0\">\"..oO (forks, need forks)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tlock<span class=\"br0\">(</span>forks <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i<span class=\"br0\">)</span> clear_eol<span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tprint<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> <span class=\"nu0\">12</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> id<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fork%d\"</span><span class=\"sy0\">,</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"coMULTI\">/* delay 1 sec to clearly show the order of fork acquisition */</span><br/>\t\tsleep<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> ration <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ration<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tprint<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> <span class=\"nu0\">24</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nom\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sleep<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* done nomming, give up forks (order doesn't matter) */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> unlock<span class=\"br0\">(</span>forks <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> think<span class=\"br0\">(</span><span class=\"kw4\">int</span> id<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">64</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\tclear_eol<span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"st0\">\"..oO (%s)\"</span><span class=\"sy0\">,</span> topic<span class=\"br0\">[</span>t <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> M<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tprint<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"st0\">\"%c\"</span><span class=\"sy0\">,</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> usleep<span class=\"br0\">(</span><span class=\"nu0\">200000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tusleep<span class=\"br0\">(</span><span class=\"nu0\">500000</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span><span class=\"sy0\">*</span> philosophize<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> id <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">;</span><br/>\tprint<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"%10s\"</span><span class=\"sy0\">,</span> names<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> think<span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">,</span> eat<span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> id<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tpthread_t tid<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tpthread_mutex_init<span class=\"br0\">(</span>forks <span class=\"sy0\">+</span> <span class=\"br0\">(</span>id<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tpthread_create<span class=\"br0\">(</span>tid <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> philosophize<span class=\"sy0\">,</span> id <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* wait forever: the threads don't actually stop */</span><br/>\t<span class=\"kw1\">return</span> pthread_join<span class=\"br0\">(</span>tid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 161, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;boost/cstdint.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/thread.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/thread/locks.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/format.hpp&gt;</span><br/><span class=\"co2\">#include &lt;boost/shared_ptr.hpp&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">mutex</span> Fork<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">shared_ptr</span><span class=\"sy1\">&lt;</span> Fork <span class=\"sy1\">&gt;</span> ForkPtr<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span> Fork <span class=\"sy1\">&gt;</span> ForkLock<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co2\">#define MIN_WAIT_TIME 100</span><br/><span class=\"co2\">#define NUM_MEALS     10</span><br/><span class=\"co2\">#define MAX_JITTER    50</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span> <span class=\"kw2\">typename</span> Stream <span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">class</span> AtomicLogger <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\u00a0<br/>  AtomicLogger<span class=\"br0\">(</span> Stream<span class=\"sy3\">&amp;</span> stream <span class=\"br0\">)</span> <span class=\"sy4\">:</span><br/>    m_mutex<span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>    m_stream<span class=\"br0\">(</span> stream <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> str <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    boost<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy4\">::</span><span class=\"me2\">scoped_lock</span> lock<span class=\"br0\">(</span> m_mutex <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    m_stream <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  mutable boost<span class=\"sy4\">::</span><span class=\"me2\">mutex</span> m_mutex<span class=\"sy4\">;</span><br/>  Stream<span class=\"sy3\">&amp;</span> m_stream<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> AtomicLogger<span class=\"sy1\">&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span> <span class=\"sy1\">&gt;</span> AtomicLoggerOstream<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">shared_ptr</span><span class=\"sy1\">&lt;</span> AtomicLoggerOstream <span class=\"sy1\">&gt;</span> AtomicLoggerOstreamPtr<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Philosopher <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\u00a0<br/>  Philosopher<span class=\"br0\">(</span> <br/>\t      <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> name, <br/>\t      ForkPtr fork_left, <br/>\t      ForkPtr fork_right, <br/>\t      AtomicLoggerOstreamPtr p_logger <span class=\"br0\">)</span> <span class=\"sy4\">:</span><br/>    m_name<span class=\"br0\">(</span> name <span class=\"br0\">)</span>,<br/>    m_continue<span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span>,<br/>    mp_fork_left<span class=\"br0\">(</span> fork_left <span class=\"br0\">)</span>,<br/>    mp_fork_right<span class=\"br0\">(</span> fork_right <span class=\"br0\">)</span>,<br/>    m_thread<span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">bind</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>Philosopher<span class=\"sy4\">::</span><span class=\"me2\">thread_func</span>, <br/>\t\t\t\t\t  <span class=\"kw3\">this</span>, <br/>\t\t\t\t\t  <span class=\"sy3\">&amp;</span>m_continue, <br/>\t\t\t\t\t  mp_fork_left, <br/>\t\t\t\t\t  mp_fork_right <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>,<br/>    m_meals_left<span class=\"br0\">(</span> NUM_MEALS <span class=\"br0\">)</span>,<br/>    mp_logger<span class=\"br0\">(</span> p_logger <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  ~Philosopher<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    done_dining<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    wait_for_cmplt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> done_dining<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> m_continue <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> wait_for_cmplt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> m_thread.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">inline</span> <span class=\"kw4\">bool</span> can_grab_fork<span class=\"br0\">(</span> ForkPtr<span class=\"sy3\">&amp;</span> p_fork <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> p_fork<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>try_lock<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> thread_func<span class=\"br0\">(</span> <span class=\"kw4\">volatile</span> <span class=\"kw4\">bool</span><span class=\"sy2\">*</span> p_continue, ForkPtr fork_left, ForkPtr fork_right <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> failed_to_grab_fork <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> p_continue <span class=\"sy3\">&amp;&amp;</span> m_meals_left <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      mp_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">str</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%1% is thinking\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>m_name <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      wait<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      mp_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">str</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%1% is hungry\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>m_name <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// attempt to grab forks</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span> can_grab_fork<span class=\"br0\">(</span> fork_left <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tForkLock lock_left<span class=\"br0\">(</span> <span class=\"sy2\">*</span>fork_left, boost<span class=\"sy4\">::</span><span class=\"me2\">adopt_lock</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> can_grab_fork<span class=\"br0\">(</span> fork_right <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t  ForkLock lock_right<span class=\"br0\">(</span> <span class=\"sy2\">*</span>fork_right, boost<span class=\"sy4\">::</span><span class=\"me2\">adopt_lock</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t  <span class=\"co1\">// eating</span><br/>\t  mp_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">str</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%1% is eating (%2%)...\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> m_name <span class=\"sy2\">%</span> m_meals_left <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t  wait<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t  <span class=\"co1\">// record the meal</span><br/>\t  <span class=\"sy2\">--</span>m_meals_left<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t  failed_to_grab_fork <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\tfailed_to_grab_fork <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span> failed_to_grab_fork <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tmp_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">str</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%1% couldn't get forks; waiting...\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> m_name <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfailed_to_grab_fork <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\twait<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    mp_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">str</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%1% is done dining\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> m_name <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> wait<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    wait<span class=\"br0\">(</span> MIN_WAIT_TIME <span class=\"sy2\">+</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> MAX_JITTER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> wait<span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"kw4\">uint32_t</span> time_in_ms <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    boost<span class=\"sy4\">::</span><span class=\"me2\">this_thread</span><span class=\"sy4\">::</span><span class=\"me2\">sleep</span><span class=\"br0\">(</span> boost<span class=\"sy4\">::</span><span class=\"me2\">posix_time</span><span class=\"sy4\">::</span><span class=\"me2\">milliseconds</span><span class=\"br0\">(</span> time_in_ms <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> m_name<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">volatile</span> <span class=\"kw4\">bool</span> m_continue<span class=\"sy4\">;</span><br/>  ForkPtr mp_fork_left<span class=\"sy4\">;</span>  <span class=\"co1\">// must be declared before the thread</span><br/>  ForkPtr mp_fork_right<span class=\"sy4\">;</span> <span class=\"co1\">// must be declared before the thread</span><br/>  boost<span class=\"sy4\">::</span><span class=\"me2\">thread</span> m_thread<span class=\"sy4\">;</span><br/>  boost<span class=\"sy4\">::</span><span class=\"kw4\">uint32_t</span> m_meals_left<span class=\"sy4\">;</span><br/>  AtomicLoggerOstreamPtr mp_logger<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">shared_ptr</span><span class=\"sy1\">&lt;</span> Philosopher <span class=\"sy1\">&gt;</span> PhilosopherPtr<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> N <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> names<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Aristotle\"</span>, <span class=\"st0\">\"Spinoza\"</span>, <span class=\"st0\">\"Russell\"</span>, <span class=\"st0\">\"Kant\"</span>, <span class=\"st0\">\"Plato\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span> PhilosopherPtr <span class=\"sy1\">&gt;</span> philosophers<span class=\"sy4\">;</span><br/>  philosophers.<span class=\"me1\">reserve</span><span class=\"br0\">(</span> N <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// create logger</span><br/>  AtomicLoggerOstreamPtr p_logger<span class=\"br0\">(</span> <span class=\"kw3\">new</span> AtomicLoggerOstream<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// create forks</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span> ForkPtr <span class=\"sy1\">&gt;</span> forks<span class=\"sy4\">;</span><br/>  forks.<span class=\"me1\">reserve</span><span class=\"br0\">(</span> N <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> N<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    forks.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> ForkPtr<span class=\"br0\">(</span> <span class=\"kw3\">new</span> Fork<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// create philosophers</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> N<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    philosophers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> PhilosopherPtr<span class=\"br0\">(</span><br/>\t\t\t\t\t   <span class=\"kw3\">new</span> Philosopher<span class=\"br0\">(</span> names<span class=\"br0\">[</span> i <span class=\"br0\">]</span>, forks<span class=\"br0\">[</span> i <span class=\"br0\">]</span>, forks<span class=\"br0\">[</span> <span class=\"br0\">(</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> N <span class=\"br0\">]</span>, p_logger <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// wait for them to finish</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> N<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    philosophers<span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>wait_for_cmplt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  p_logger<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span><span class=\"kw3\">log</span><span class=\"br0\">(</span> <span class=\"st0\">\"Everyone is done dining.\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 250, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Linq</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Text</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Threading</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Threading</span>.<span class=\"me1\">Tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Dining_Philosophers<br/><span class=\"br0\">{</span><br/>    class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> DinerCount <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        private <span class=\"kw4\">static</span> List<span class=\"sy0\">&lt;</span>Diner<span class=\"sy0\">&gt;</span> Diners <span class=\"sy0\">=</span> new List<span class=\"sy0\">&lt;</span>Diner<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        private <span class=\"kw4\">static</span> List<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span> Forks <span class=\"sy0\">=</span> new List<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        private <span class=\"kw4\">static</span> DateTime TimeToStop<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Initialize<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            WriteHeaderLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span><br/>            <span class=\"br0\">{</span><br/>                WriteStatusLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Thread.<span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>DateTime.<span class=\"me1\">Now</span> <span class=\"sy0\">&lt;</span> TimeToStop<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            TearDown<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Initialize<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> DinerCount<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Forks.<span class=\"me1\">Add</span><span class=\"br0\">(</span>new Fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> DinerCount<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Diners.<span class=\"me1\">Add</span><span class=\"br0\">(</span>new Diner<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> Forks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> Forks<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> DinerCount<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            TimeToStop <span class=\"sy0\">=</span> DateTime.<span class=\"me1\">Now</span>.<span class=\"me1\">AddSeconds</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> TearDown<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            foreach <span class=\"br0\">(</span>var diner in Diners<span class=\"br0\">)</span><br/>                diner.<span class=\"me1\">Dispose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> WriteHeaderLine<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            foreach <span class=\"br0\">(</span>Diner d in Diners<span class=\"br0\">)</span><br/>                Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"D \"</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">ID</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"    |\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> DinerCount<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"F\"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> WriteStatusLine<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            foreach <span class=\"br0\">(</span>Diner d in Diners<span class=\"br0\">)</span><br/>                Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span>FormatDinerState<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"    |\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            foreach <span class=\"br0\">(</span>Fork f in Forks<span class=\"br0\">)</span><br/>                Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span>FormatForkState<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> string FormatDinerState<span class=\"br0\">(</span>Diner diner<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>diner.<span class=\"me1\">State</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> Diner.<span class=\"me1\">DinerState</span>.<span class=\"me1\">Eating</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"Eat\"</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> Diner.<span class=\"me1\">DinerState</span>.<span class=\"me1\">Pondering</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"Pon\"</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> Diner.<span class=\"me1\">DinerState</span>.<span class=\"me1\">TryingToGetForks</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"Get\"</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                    throw new Exception<span class=\"br0\">(</span><span class=\"st0\">\"Unknown diner state.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> string FormatForkState<span class=\"br0\">(</span>Fork fork<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ForkIsBeingUsed<span class=\"br0\">(</span>fork<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"D\"</span> <span class=\"sy0\">+</span> GetForkHolder<span class=\"br0\">(</span>fork<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool ForkIsBeingUsed<span class=\"br0\">(</span>Fork fork<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Diners.<span class=\"me1\">Count</span><span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span> d.<span class=\"me1\">CurrentlyHeldForks</span>.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>fork<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> GetForkHolder<span class=\"br0\">(</span>Fork fork<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Diners.<span class=\"me1\">Single</span><span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span> d.<span class=\"me1\">CurrentlyHeldForks</span>.<span class=\"me1\">Contains</span><span class=\"br0\">(</span>fork<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">ID</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    class Diner <span class=\"sy0\">:</span> IDisposable<br/>    <span class=\"br0\">{</span><br/>        private bool IsCurrentlyHoldingLeftFork <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        private bool IsCurrentlyHoldingRightFork <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        private <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> MaximumWaitTime <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        private <span class=\"kw4\">static</span> Random Randomizer <span class=\"sy0\">=</span> new Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        private bool ShouldStopEating <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        public <span class=\"kw4\">int</span> ID <span class=\"br0\">{</span> get<span class=\"sy0\">;</span> private set<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        public Fork LeftFork <span class=\"br0\">{</span> get<span class=\"sy0\">;</span> private set<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        public Fork RightFork <span class=\"br0\">{</span> get<span class=\"sy0\">;</span> private set<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        public DinerState State <span class=\"br0\">{</span> get<span class=\"sy0\">;</span> private set<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        public IEnumerable<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span> CurrentlyHeldForks<br/>        <span class=\"br0\">{</span><br/>            get<br/>            <span class=\"br0\">{</span><br/>                var forks <span class=\"sy0\">=</span> new List<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingLeftFork<span class=\"br0\">)</span><br/>                    forks.<span class=\"me1\">Add</span><span class=\"br0\">(</span>LeftFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingRightFork<span class=\"br0\">)</span><br/>                    forks.<span class=\"me1\">Add</span><span class=\"br0\">(</span>RightFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> forks<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        public Diner<span class=\"br0\">(</span><span class=\"kw4\">int</span> id<span class=\"sy0\">,</span> Fork leftFork<span class=\"sy0\">,</span> Fork rightFork<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            InitializeDinerState<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> leftFork<span class=\"sy0\">,</span> rightFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BeginDinerActivity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> KeepTryingToEat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>State <span class=\"sy0\">==</span> DinerState.<span class=\"me1\">TryingToGetForks</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    TryToGetLeftFork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingLeftFork<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        TryToGetRightFork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingRightFork<span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            Eat<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            DropForks<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            Ponder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                        <span class=\"kw1\">else</span><br/>                        <span class=\"br0\">{</span><br/>                            DropForks<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            WaitForAMoment<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span><br/>                        WaitForAMoment<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                    State <span class=\"sy0\">=</span> DinerState.<span class=\"me1\">TryingToGetForks</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ShouldStopEating<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> InitializeDinerState<span class=\"br0\">(</span><span class=\"kw4\">int</span> id<span class=\"sy0\">,</span> Fork leftFork<span class=\"sy0\">,</span> Fork rightFork<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            ID <span class=\"sy0\">=</span> id<span class=\"sy0\">;</span><br/>            LeftFork <span class=\"sy0\">=</span> leftFork<span class=\"sy0\">;</span><br/>            RightFork <span class=\"sy0\">=</span> rightFork<span class=\"sy0\">;</span><br/>            State <span class=\"sy0\">=</span> DinerState.<span class=\"me1\">TryingToGetForks</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private async <span class=\"kw4\">void</span> BeginDinerActivity<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            await Task.<span class=\"me1\">Run</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> KeepTryingToEat<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> TryToGetLeftFork<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Monitor.<span class=\"me1\">TryEnter</span><span class=\"br0\">(</span>LeftFork<span class=\"sy0\">,</span> ref IsCurrentlyHoldingLeftFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> TryToGetRightFork<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Monitor.<span class=\"me1\">TryEnter</span><span class=\"br0\">(</span>RightFork<span class=\"sy0\">,</span> ref IsCurrentlyHoldingRightFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> DropForks<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            DropLeftFork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DropRightFork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> DropLeftFork<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingLeftFork<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                IsCurrentlyHoldingLeftFork <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                Monitor.<span class=\"me1\">Exit</span><span class=\"br0\">(</span>LeftFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> DropRightFork<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsCurrentlyHoldingRightFork<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                IsCurrentlyHoldingRightFork <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                Monitor.<span class=\"me1\">Exit</span><span class=\"br0\">(</span>RightFork<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> Eat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            State <span class=\"sy0\">=</span> DinerState.<span class=\"me1\">Eating</span><span class=\"sy0\">;</span><br/>            WaitForAMoment<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">void</span> Ponder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            State <span class=\"sy0\">=</span> DinerState.<span class=\"me1\">Pondering</span><span class=\"sy0\">;</span><br/>            WaitForAMoment<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> WaitForAMoment<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Thread.<span class=\"me1\">Sleep</span><span class=\"br0\">(</span>Randomizer.<span class=\"me1\">Next</span><span class=\"br0\">(</span>MaximumWaitTime<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        public <span class=\"kw4\">void</span> Dispose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            ShouldStopEating <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        public <span class=\"kw2\">enum</span> DinerState<br/>        <span class=\"br0\">{</span><br/>            Eating<span class=\"sy0\">,</span><br/>            TryingToGetForks<span class=\"sy0\">,</span><br/>            Pondering<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    class Fork <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 30, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> make<span class=\"sy0\">-</span>fork <span class=\"br0\">[</span><span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span>ref true<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> make<span class=\"sy0\">-</span>philosopher <span class=\"br0\">[</span>name forks food<span class=\"sy0\">-</span>amt<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>ref <span class=\"br0\">{</span>:<span class=\"me1\">name</span> name\u00a0:<span class=\"me1\">forks</span> forks\u00a0:<span class=\"me1\">eating</span>? false\u00a0:<span class=\"me1\">food</span> food<span class=\"sy0\">-</span>amt<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> start<span class=\"sy0\">-</span>eating <span class=\"br0\">[</span>phil<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dosync</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">every?</span> true? <span class=\"br0\">(</span><span class=\"kw1\">map</span> ensure <span class=\"br0\">(</span>:<span class=\"me1\">forks</span> @phil<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; &lt;-- the essential solution</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span>:<span class=\"me1\">forks</span> @phil<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">alter</span> f <span class=\"kw1\">not</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">alter</span> phil <span class=\"kw1\">assoc</span>\u00a0:<span class=\"me1\">eating</span>? true<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">alter</span> phil <span class=\"kw1\">update-in</span> <span class=\"br0\">[</span>:<span class=\"me1\">food</span><span class=\"br0\">]</span> <span class=\"kw1\">dec</span><span class=\"br0\">)</span><br/>        true<span class=\"br0\">)</span><br/>      false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> stop<span class=\"sy0\">-</span>eating <span class=\"br0\">[</span>phil<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dosync</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>:<span class=\"me1\">eating</span>? @phil<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">alter</span> phil <span class=\"kw1\">assoc</span>\u00a0:<span class=\"me1\">eating</span>? false<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span>:<span class=\"me1\">forks</span> @phil<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">alter</span> f <span class=\"kw1\">not</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dine <span class=\"br0\">[</span>phil retry<span class=\"sy0\">-</span>interval max<span class=\"sy0\">-</span>eat<span class=\"sy0\">-</span>duration max<span class=\"sy0\">-</span>think<span class=\"sy0\">-</span>duration<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">pos?</span> <span class=\"br0\">(</span>:<span class=\"me1\">food</span> @phil<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>start<span class=\"sy0\">-</span>eating phil<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>        <span class=\"br0\">(</span>Thread<span class=\"sy0\">/</span>sleep <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int max<span class=\"sy0\">-</span>eat<span class=\"sy0\">-</span>duration<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>stop<span class=\"sy0\">-</span>eating phil<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>Thread<span class=\"sy0\">/</span>sleep <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int max<span class=\"sy0\">-</span>think<span class=\"sy0\">-</span>duration<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>Thread<span class=\"sy0\">/</span>sleep retry<span class=\"sy0\">-</span>interval<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 81, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>in-package <span class=\"sy0\">:</span><span class=\"me1\">common-lisp-user</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;</span><br/><span class=\"co1\">;; FLAG -- if using quicklisp, you can get bordeaux-threads loaded up </span><br/><span class=\"co1\">;; with: (ql:quickload\u00a0:bordeaux-threads)</span><br/><span class=\"co1\">;;</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *philosophers* '<span class=\"br0\">(</span>Aristotle Kant Spinoza Marx Russell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass philosopher <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span> <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"kw1\">name</span> <span class=\"sy0\">:</span><span class=\"me1\">reader</span> name-of<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>left-fork <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">left-fork</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> left-fork-of<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>right-fork <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">right-fork</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> right-fork-of<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>meals-left <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">meals-left</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> meals-left-of<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass fork <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>lock <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">make-lock</span> <span class=\"st0\">\"fork\"</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">reader</span> lock-of<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> random-normal <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>mean <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sd <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>x1 #<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>* 2<span class=\"sy0\">.</span>0d0 <span class=\"br0\">(</span><span class=\"kw1\">random</span> 1d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #<span class=\"nu0\">1</span>#<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>x2 #<span class=\"nu0\">2</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>* 2<span class=\"sy0\">.</span>0d0 <span class=\"br0\">(</span><span class=\"kw1\">random</span> 1d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #<span class=\"nu0\">2</span>#<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>w  #<span class=\"nu0\">3</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* x1 x1<span class=\"br0\">)</span> <span class=\"br0\">(</span>* x2 x2<span class=\"br0\">)</span><span class=\"br0\">)</span> #<span class=\"nu0\">3</span>#<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> w 1d0<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>* x1 <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* -2d0 <span class=\"br0\">(</span>log w<span class=\"br0\">)</span><span class=\"br0\">)</span> w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> sd<span class=\"br0\">)</span> mean<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sleep* <span class=\"br0\">(</span>time<span class=\"br0\">)</span> <span class=\"br0\">(</span>sleep <span class=\"br0\">(</span><span class=\"kw1\">max</span> time <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dining-philosophers <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>philosopher-names *philosophers*<span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span>meals <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span>dining-time'<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span>thinking-time '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                 <span class=\"br0\">(</span><span class=\"br0\">(</span>stream e<span class=\"br0\">)</span> *error-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"br0\">(</span><span class=\"kw1\">length</span> philosopher-names<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>forks <span class=\"br0\">(</span>loop repeat count collect <span class=\"br0\">(</span>make-instance 'fork<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>philosophers <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span><br/>                             for <span class=\"kw1\">name</span> in philosopher-names collect<br/>                               <span class=\"br0\">(</span>make-instance 'philosopher<br/>                                    <span class=\"sy0\">:</span><span class=\"me1\">left-fork</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span>mod i count<span class=\"br0\">)</span> forks<span class=\"br0\">)</span><br/>                                    <span class=\"sy0\">:</span><span class=\"me1\">right-fork</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> count<span class=\"br0\">)</span> forks<span class=\"br0\">)</span><br/>                                    <span class=\"sy0\">:</span><span class=\"kw1\">name</span> <span class=\"kw1\">name</span><br/>                                    <span class=\"sy0\">:</span><span class=\"me1\">meals-left</span> meals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>condition <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">make-condition-variable</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>lock <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">make-lock</span> <span class=\"st0\">\"main loop\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>         <span class=\"br0\">(</span>output-lock <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">make-lock</span> <span class=\"st0\">\"output lock\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>p philosophers<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>think <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>/me <span class=\"st0\">\"is now thinking\"</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>sleep* <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'random-normal thinking-time<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>/me <span class=\"st0\">\"is now hungry\"</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>dine<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>dine <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">with-lock-held</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lock-of <span class=\"br0\">(</span>left-fork-of p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">acquire-lock</span> <span class=\"br0\">(</span>lock-of <span class=\"br0\">(</span>right-fork-of p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span>/me <span class=\"st0\">\"couldn't get a fork and ~<br/>                                    returns to thinking\"</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">release-lock</span> <span class=\"br0\">(</span>lock-of <span class=\"br0\">(</span>left-fork-of p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>return-from dine <span class=\"br0\">(</span>think<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>/me <span class=\"st0\">\"is eating\"</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>sleep* <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'random-normal dining-time<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">release-lock</span> <span class=\"br0\">(</span>lock-of <span class=\"br0\">(</span>right-fork-of p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>/me <span class=\"st0\">\"is done eating (~A meals left)\"</span><br/>                        <span class=\"br0\">(</span>decf <span class=\"br0\">(</span>meals-left-of p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>meals-left-of p<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>/me <span class=\"st0\">\"leaves the dining room\"</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">with-lock-held</span> <span class=\"br0\">(</span>lock<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">setq</span> philosophers <span class=\"br0\">(</span><span class=\"kw1\">delete</span> p philosophers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">condition-notify</span> condition<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>t <span class=\"br0\">(</span>think<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>/me <span class=\"br0\">(</span>control <span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">with-lock-held</span> <span class=\"br0\">(</span>output-lock<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>write-sequence <span class=\"br0\">(</span>string <span class=\"br0\">(</span>name-of p<span class=\"br0\">)</span><span class=\"br0\">)</span> e<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>write-char #\\Space e<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'format e <span class=\"br0\">(</span>concatenate 'string control <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>                          args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">make-thread</span> #'think<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">with-lock-held</span> <span class=\"br0\">(</span>lock<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>endp philosophers<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>format e <span class=\"st0\">\"all philosophers are done dining~%\"</span><span class=\"br0\">)</span> <br/>              <span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">with-lock-held</span> <span class=\"br0\">(</span>lock<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>bt<span class=\"sy0\">:</span><span class=\"me1\">condition-wait</span> condition lock<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">parallelism</span><span class=\"sy0\">,</span><br/>       core.<span class=\"me1\">sync</span>.<span class=\"me1\">mutex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> eat<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> name<span class=\"sy0\">,</span> Mutex<span class=\"br0\">[</span><span class=\"br0\">]</span> forks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">\" is hungry.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> forks.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Take forks i and j. The lower one first to prevent deadlock.</span><br/>    <span class=\"kw4\">auto</span> fork1 <span class=\"sy0\">=</span> forks<span class=\"br0\">[</span>min<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> fork2 <span class=\"sy0\">=</span> forks<span class=\"br0\">[</span>max<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    fork1.<span class=\"me1\">lock</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>exit<span class=\"br0\">)</span> fork1.<span class=\"me1\">unlock</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    fork2.<span class=\"me1\">lock</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>exit<span class=\"br0\">)</span> fork2.<span class=\"me1\">unlock</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">\" is eating.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">\" is full.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> think<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> name<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">\" is thinking.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> philosophers <span class=\"sy0\">=</span> <span class=\"st0\">\"Aristotle Kant Spinoza Marx Russell\"</span>.<span class=\"me1\">split</span><span class=\"sy0\">;</span><br/>    Mutex<span class=\"br0\">[</span>philosophers.<span class=\"me1\">length</span><span class=\"br0\">]</span> forks<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> fork<span class=\"sy0\">;</span> forks<span class=\"br0\">)</span><br/>        fork <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Mutex<span class=\"sy0\">;</span><br/>\u00a0<br/>    defaultPoolThreads <span class=\"sy0\">=</span> forks.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> philo<span class=\"sy0\">;</span> taskPool.<span class=\"me1\">parallel</span><span class=\"br0\">(</span>philosophers<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            eat<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> philo<span class=\"sy0\">,</span> forks<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            philo.<span class=\"me1\">think</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 41, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'tasks<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> names #<span class=\"br0\">(</span>Aristotle Kant Spinoza Marx Russell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> abouts #<span class=\"br0\">(</span><span class=\"st0\">\"Wittgenstein\"</span> <span class=\"st0\">\"the nature of the World\"</span> <span class=\"st0\">\"Kant\"</span>  <span class=\"st0\">\"starving\"</span> <br/>    <span class=\"st0\">\"spaghettis\"</span> <span class=\"st0\">\"the essence of things\"</span> <span class=\"st0\">\"\u03a9\"</span> <span class=\"st0\">\"\ud83d\udcde\"</span> <span class=\"st0\">\"\u26bd\ufe0f\"</span> <span class=\"st0\">\"\ud83c\udf45\"</span> <span class=\"st0\">\"\ud83c\udf3f\"</span> <br/>    <span class=\"st0\">\"philosophy\"</span> <span class=\"st0\">\"\ud83d\udc94\"</span>  <span class=\"st0\">\"\ud83d\udc60\"</span> <span class=\"st0\">\"rosetta code\"</span> <span class=\"st0\">\"his to-do list\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>about<span class=\"br0\">)</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"thinking about\u00a0%a.\"</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> abouts <span class=\"br0\">(</span>random <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> abouts<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; statistics</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rounds <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"nu0\">5</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>eat i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> rounds i <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> rounds i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; forks are resources = semaphores</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>left i<span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>right i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> forks <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>semaphore <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fork i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> forks i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> laquais <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>semaphore <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; philosophers tasks</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>philo i<span class=\"br0\">)</span><br/><span class=\"co1\">;; thinking</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> <span class=\"br0\">(</span>about<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sleep <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2000</span> <span class=\"br0\">(</span>random <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait laquais<span class=\"br0\">)</span><br/><span class=\"co1\">;; get forks</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> 'sitting<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>left i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>right i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> 'eating<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>eat i<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>sleep <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">6000</span> <span class=\"br0\">(</span>random <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; put-forks</span><br/>    <span class=\"br0\">(</span>signal <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>left i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>signal <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>right i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>signal laquais<span class=\"br0\">)</span><br/>  i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> tasks <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>task philo i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 41, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'tasks<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> names #<span class=\"br0\">(</span>Aristotle Kant Spinoza Marx Russell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> abouts #<span class=\"br0\">(</span><span class=\"st0\">\"Wittgenstein\"</span> <span class=\"st0\">\"the nature of the World\"</span> <span class=\"st0\">\"Kant\"</span>  <span class=\"st0\">\"starving\"</span> <br/>    <span class=\"st0\">\"spaghettis\"</span> <span class=\"st0\">\"the essence of things\"</span> <span class=\"st0\">\"\u03a9\"</span> <span class=\"st0\">\"\ud83d\udcde\"</span> <span class=\"st0\">\"\u26bd\ufe0f\"</span> <span class=\"st0\">\"\ud83c\udf45\"</span> <span class=\"st0\">\"\ud83c\udf3f\"</span> <br/>    <span class=\"st0\">\"philosophy\"</span> <span class=\"st0\">\"\ud83d\udc94\"</span>  <span class=\"st0\">\"\ud83d\udc60\"</span> <span class=\"st0\">\"rosetta code\"</span> <span class=\"st0\">\"his to-do list\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>about<span class=\"br0\">)</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"thinking about\u00a0%a.\"</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> abouts <span class=\"br0\">(</span>random <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> abouts<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; statistics</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rounds <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"nu0\">5</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>eat i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> rounds i <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> rounds i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; forks are resources = semaphores</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>left i<span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>right i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> forks <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>semaphore <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fork i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> forks i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> laquais <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>semaphore <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; philosophers tasks</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>philo i<span class=\"br0\">)</span><br/><span class=\"co1\">;; thinking</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> <span class=\"br0\">(</span>about<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sleep <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2000</span> <span class=\"br0\">(</span>random <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait laquais<span class=\"br0\">)</span><br/><span class=\"co1\">;; get forks</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> 'sitting<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>left i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>wait <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>right i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>writeln <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> names i<span class=\"br0\">)</span> 'eating<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>eat i<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>sleep <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">6000</span> <span class=\"br0\">(</span>random <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; put-forks</span><br/>    <span class=\"br0\">(</span>signal <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>left i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>signal <span class=\"br0\">(</span>fork <span class=\"br0\">(</span>right i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>signal laquais<span class=\"br0\">)</span><br/>  i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> tasks <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>task philo i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 58, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>    DINING_PHILOSOPHERS<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>    make<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>    make<br/>            <span class=\"co1\">-- Create philosophers and forks.</span><br/>        <span class=\"kw2\">local</span><br/>            first_fork<span class=\"sy0\">:</span> <span class=\"kw1\">separate</span> FORK<br/>            left_fork<span class=\"sy0\">:</span> <span class=\"kw1\">separate</span> FORK<br/>            right_fork<span class=\"sy0\">:</span> <span class=\"kw1\">separate</span> FORK<br/>            philosopher<span class=\"sy0\">:</span> <span class=\"kw1\">separate</span> PHILOSOPHER<br/>            i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>        <span class=\"kw2\">do</span><br/>            print <span class=\"br0\">(</span><span class=\"st0\">\"Dining Philosophers<span class=\"es0\">%N</span>\"</span> <span class=\"sy0\">+</span> philosopher_count.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" philosophers, \"</span> <span class=\"sy0\">+</span> round_count.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" rounds<span class=\"es0\">%N</span><span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">create</span> philosophers.<span class=\"me1\">make</span><br/>            <span class=\"kw2\">from</span><br/>                i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw2\">create</span> first_fork.<span class=\"me1\">make</span> <span class=\"br0\">(</span>philosopher_count, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                left_fork <span class=\"sy0\">:=</span> first_fork<br/>            <span class=\"kw2\">until</span><br/>                i <span class=\"sy0\">&gt;</span> philosopher_count<br/>            <span class=\"kw2\">loop</span><br/>                <span class=\"kw2\">if</span> i <span class=\"sy0\">&lt;</span> philosopher_count <span class=\"kw2\">then</span><br/>                    <span class=\"kw2\">create</span> right_fork.<span class=\"me1\">make</span> <span class=\"br0\">(</span>i, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">else</span><br/>                    right_fork <span class=\"sy0\">:=</span> first_fork<br/>                <span class=\"kw2\">end</span><br/>                <span class=\"kw2\">create</span> philosopher.<span class=\"me1\">make</span> <span class=\"br0\">(</span>i, left_fork, right_fork, round_count<span class=\"br0\">)</span><br/>                philosophers.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>philosopher<span class=\"br0\">)</span><br/>                left_fork <span class=\"sy0\">:=</span> right_fork<br/>                i <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw2\">end</span><br/>            philosophers.<span class=\"me1\">do_all</span> <span class=\"br0\">(</span><span class=\"kw2\">agent</span> launch_philosopher<span class=\"br0\">)</span><br/>            print <span class=\"br0\">(</span><span class=\"st0\">\"Make Done!<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Implementation</span><br/>\u00a0<br/>    philosopher_count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>            <span class=\"co1\">-- Number of philosophers.</span><br/>\u00a0<br/>    round_count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">30</span><br/>            <span class=\"co1\">-- Number of times each philosopher should eat.</span><br/>\u00a0<br/>    philosophers<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><span class=\"kw1\">separate</span> PHILOSOPHER<span class=\"br0\">]</span><br/>            <span class=\"co1\">-- List of philosophers.</span><br/>\u00a0<br/>    launch_philosopher <span class=\"br0\">(</span>a_philosopher<span class=\"sy0\">:</span> <span class=\"kw1\">separate</span> PHILOSOPHER<span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Launch a_philosopher.</span><br/>        <span class=\"kw2\">do</span><br/>            a_philosopher.<span class=\"me1\">live</span><br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span> <span class=\"co1\">-- class DINING_PHILOSOPHERS</span></pre>"}, {"lang": "Erlang", "loc": 105, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>philosophers<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>dining<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sleep</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"kw1\">receive</span><br/><span class=\"kw1\">after</span> <span class=\"re5\">T</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<span class=\"me1\">true</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">doForks</span><span class=\"br0\">(</span><span class=\"re5\">ForkList</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span>grabforks<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">doForks</span><span class=\"br0\">(</span><span class=\"re5\">ForkList</span> <span class=\"sy3\">--</span> <span class=\"br0\">[</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span>releaseforks<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">doForks</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span>| <span class=\"re5\">ForkList</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span>available<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">Right</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Sender</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <br/>          <span class=\"re5\">Sender</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>areAvailable<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">Left</span><span class=\"sy1\">,</span> <span class=\"re5\">ForkList</span><span class=\"br0\">)</span> <span class=\"kw1\">andalso</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">Right</span><span class=\"sy1\">,</span> <span class=\"re5\">ForkList</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span>\t\t     <br/>          <span class=\"re3\">doForks</span><span class=\"br0\">(</span><span class=\"re5\">ForkList</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span>die<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Forks put away.~n\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">areAvailable</span><span class=\"br0\">(</span><span class=\"re5\">Forks</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"me1\">forks</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>available<span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">receive</span><br/>\t\t<span class=\"br0\">{</span>areAvailable<span class=\"sy1\">,</span> false<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"br0\">{</span>areAvailable<span class=\"sy1\">,</span> true<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">process</span>W<span class=\"re3\">aitList</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">process</span>W<span class=\"re3\">aitList</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Client</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re5\">H</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">case</span> <span class=\"re3\">areAvailable</span><span class=\"br0\">(</span><span class=\"re5\">Forks</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>\t\ttrue <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Client</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>served<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t\ttrue<span class=\"sy1\">;</span><br/>\t\tfalse <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">process</span>W<span class=\"re3\">aitList</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> false<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"me1\">forks</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>die<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Waiter is leaving.~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\tdiningRoom <span class=\"sy3\">!</span> <span class=\"br0\">{</span>allgone<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"re5\">WaitList</span><span class=\"sy1\">,</span> <span class=\"re5\">ClientCount</span><span class=\"sy1\">,</span> <span class=\"re5\">EatingCount</span><span class=\"sy1\">,</span> <span class=\"re5\">Busy</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">receive</span><br/>\t\t<span class=\"br0\">{</span>waiting<span class=\"sy1\">,</span> <span class=\"re5\">Client</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re5\">WaitList1</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Client</span>|WaitList<span class=\"br0\">]</span><span class=\"sy1\">,</span>\t<span class=\"co1\">%% add to waiting list</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> <span class=\"re5\">Busy</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"re5\">EatingCount</span><span class=\"sy3\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span>\t<br/>\t\t\t\ttrue <span class=\"sy1\">-&gt;</span>\t<span class=\"re5\">Busy1</span> <span class=\"sy3\">=</span> <span class=\"kw3\">process</span>W<span class=\"re3\">aitList</span><span class=\"br0\">(</span><span class=\"re5\">WaitList1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t\tfalse <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Busy1</span> <span class=\"sy3\">=</span> <span class=\"re5\">Busy</span><br/>\t\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"re5\">WaitList1</span><span class=\"sy1\">,</span> <span class=\"re5\">ClientCount</span><span class=\"sy1\">,</span> <span class=\"re5\">EatingCount</span><span class=\"sy1\">,</span> <span class=\"re5\">Busy1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\t\t<span class=\"br0\">{</span>eating<span class=\"sy1\">,</span> <span class=\"re5\">Client</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"re5\">WaitList</span> <span class=\"sy3\">--</span> <span class=\"br0\">[</span><span class=\"re5\">Client</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">ClientCount</span><span class=\"sy1\">,</span> <span class=\"re5\">EatingCount</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> false<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<br/>\u00a0<br/>\t\t<span class=\"br0\">{</span>finished<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"re5\">WaitList</span><span class=\"sy1\">,</span> <span class=\"re5\">ClientCount</span><span class=\"sy1\">,</span> <span class=\"re5\">EatingCount</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <br/>\t\t\t\t<span class=\"kw3\">process</span>W<span class=\"re3\">aitList</span><span class=\"br0\">(</span><span class=\"re5\">WaitList</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>\t\t<span class=\"br0\">{</span>leaving<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"re5\">WaitList</span><span class=\"sy1\">,</span> <span class=\"re5\">ClientCount</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">EatingCount</span><span class=\"sy1\">,</span> <span class=\"re5\">Busy</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> \t<br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s is leaving.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Name</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\twaiter <span class=\"sy3\">!</span> <span class=\"br0\">{</span>leaving<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"sy1\">,</span> <span class=\"re5\">Cycle</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s is thinking.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Name</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">sleep</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s is hungry.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Name</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\twaiter <span class=\"sy3\">!</span> <span class=\"br0\">{</span>waiting<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"co1\">%%sit at table</span><br/>\u00a0<br/>\t<span class=\"kw1\">receive</span><br/>\t\t<span class=\"br0\">{</span>served<span class=\"br0\">}</span><span class=\"sy1\">-&gt;</span> <span class=\"me1\">forks</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>grabforks<span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"br0\">}</span><span class=\"sy1\">,</span>\t<span class=\"co1\">%%grab forks</span><br/>\t\t\twaiter <span class=\"sy3\">!</span> <span class=\"br0\">{</span>eating<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span>\t<span class=\"co1\">%%start eating</span><br/>\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s is eating.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Name</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t<span class=\"re3\">sleep</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\tforks <span class=\"sy3\">!</span> <span class=\"br0\">{</span>releaseforks<span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"br0\">}</span><span class=\"sy1\">,</span>\t\t\t\t\t<span class=\"co1\">%% put forks down</span><br/>\twaiter <span class=\"sy3\">!</span> <span class=\"br0\">{</span>finished<span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t<span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Forks</span><span class=\"sy1\">,</span> <span class=\"re5\">Cycle</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">dining</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\t<span class=\"re5\">AllForks</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re5\">Clients</span> <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">register</span><span class=\"br0\">(</span>diningRoom<span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">register</span><span class=\"br0\">(</span>forks<span class=\"sy1\">,</span> <span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">doForks</span><span class=\"br0\">(</span><span class=\"re5\">AllForks</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">register</span><span class=\"br0\">(</span>waiter<span class=\"sy1\">,</span> <span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">doWaiter</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Clients</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> false<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re5\">Life_span</span> <span class=\"sy3\">=</span> <span class=\"nu0\">20</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"st_h\">'Aristotle'</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Life_span</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"st_h\">'Kant'</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Life_span</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"st_h\">'Spinoza'</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Life_span</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"st_h\">'Marx'</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Life_span</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"re3\">philosopher</span><span class=\"br0\">(</span><span class=\"st_h\">'Russel'</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Life_span</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">receive</span><br/> \t\t\t<span class=\"br0\">{</span>allgone<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Dining room closed.~n\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"kw3\">unregister</span><span class=\"br0\">(</span>diningRoom<span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 54, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> FREE <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> LOCKED <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw2\">sequence</span> forks<br/>forks <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span>FREE<span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> person<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> name<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> left_fork<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> right_fork<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">while</span> forks<span class=\"br0\">[</span>left_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> LOCKED <span class=\"kw1\">or</span> forks<span class=\"br0\">[</span>right_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> LOCKED <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> forks<span class=\"br0\">[</span>left_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> FREE <span class=\"kw1\">then</span><br/>                <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" hasn't right fork.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">elsif</span> forks<span class=\"br0\">[</span>right_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> FREE <span class=\"kw1\">then</span><br/>                <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" hasn't left fork.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" hasn't both forks.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" is waiting.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" grabs forks.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        forks<span class=\"br0\">[</span>left_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> LOCKED<br/>        forks<span class=\"br0\">[</span>right_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> LOCKED<br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" is eating.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" puts forks down and leaves the dinning room.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        forks<span class=\"br0\">[</span>left_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> FREE<br/>        forks<span class=\"br0\">[</span>right_fork<span class=\"br0\">]</span> <span class=\"sy1\">=</span> FREE<br/>\u00a0<br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" is thinking.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> name <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" becomes hungry.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> rid<br/><span class=\"kw2\">atom</span> taskid<br/>rid <span class=\"sy1\">=</span> <span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"person\"</span><span class=\"br0\">)</span><br/>taskid <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span>rid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>taskid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>taskid <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span>rid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"Kant\"</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>taskid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>taskid <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span>rid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"Spinoza\"</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>taskid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>taskid <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span>rid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"Marx\"</span><span class=\"sy2\">,</span><span class=\"nu0\">4</span><span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>taskid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>taskid <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span>rid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"st0\">\"Russell\"</span><span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>taskid<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">get_key</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "F#", "loc": 54, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> flip f x y <span class=\"sy0\">=</span> f y x<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> cycle s <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"kw1\">yield!</span> s<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> cycle s <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Agent<span class=\"sy0\">&lt;</span><span class=\"st0\">'T&gt; = MailboxProcessor&lt;'</span>T<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Message <span class=\"sy0\">=</span> Waiting <span class=\"kw1\">of</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span> AsyncReplyChannel<span class=\"sy0\">&lt;</span><span class=\"kw4\">unit</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> | Done <span class=\"kw1\">of</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> reply <span class=\"br0\">(</span>c: AsyncReplyChannel<span class=\"sy0\">&lt;</span>_<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> c.<span class=\"me1\">Reply</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> strategy forks waiting <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> aux, waiting <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">partition</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> <span class=\"sy0\">&gt;&gt;</span> flip <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">isSubset</span> forks<span class=\"br0\">)</span> waiting<br/>    <span class=\"kw1\">let</span> forks <span class=\"sy0\">=</span> aux <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">fst</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> forks<br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> reply<span class=\"br0\">)</span> aux<br/>    forks, waiting<br/>\u00a0<br/><span class=\"kw1\">let</span> waiter strategy forkCount <span class=\"sy0\">=</span><br/>  Agent<span class=\"sy0\">&lt;</span>_<span class=\"sy0\">&gt;</span>.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> inbox <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop forks waiting <span class=\"sy0\">=</span><br/>      <span class=\"kw4\">async</span> <span class=\"br0\">{</span> <span class=\"kw1\">let</span> forks, waiting <span class=\"sy0\">=</span> strategy forks waiting<br/>              <span class=\"kw1\">let!</span> msg <span class=\"sy0\">=</span> inbox.<span class=\"me1\">Receive</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">match</span> msg <span class=\"kw1\">with</span><br/>                | Waiting r <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">return</span><span class=\"sy0\">!</span> loop forks <span class=\"br0\">(</span>waiting @ <span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                | Done f <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">return</span><span class=\"sy0\">!</span> loop <span class=\"br0\">(</span>forks <span class=\"sy0\">+</span> f<span class=\"br0\">)</span> waiting <span class=\"br0\">}</span><br/>    loop <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">init</span> forkCount id<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> philosopher <span class=\"br0\">(</span>waiter: Agent<span class=\"sy0\">&lt;</span>_<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> name forks <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rng <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> forks <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Set</span></a>.<span class=\"me1\">ofArray</span> forks<br/>  Agent<span class=\"sy0\">&lt;</span>_<span class=\"sy0\">&gt;</span>.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> inbox <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>      <span class=\"kw4\">async</span> <span class=\"br0\">{</span> printfn <span class=\"st0\">\"%s is thinking\"</span> name<br/>              <span class=\"kw1\">do</span><span class=\"sy0\">!</span> Async.<span class=\"me1\">Sleep</span><span class=\"br0\">(</span>rng.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              printfn <span class=\"st0\">\"%s is hungry\"</span> name<br/>              <span class=\"kw1\">do</span><span class=\"sy0\">!</span> waiter.<span class=\"me1\">PostAndAsyncReply</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> Waiting <span class=\"br0\">(</span>forks, c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              printfn <span class=\"st0\">\"%s is eating\"</span> name<br/>              <span class=\"kw1\">do</span><span class=\"sy0\">!</span> Async.<span class=\"me1\">Sleep</span><span class=\"br0\">(</span>rng.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              printfn <span class=\"st0\">\"%s is done eating\"</span> name<br/>              waiter.<span class=\"me1\">Post</span><span class=\"br0\">(</span>Done <span class=\"br0\">(</span>forks<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">return</span><span class=\"sy0\">!</span> loop <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    loop <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> forks <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">5</span> id <span class=\"sy0\">|&gt;</span> cycle <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">windowed</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> <span class=\"nu0\">5</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>  <span class=\"kw1\">let</span> names <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"plato\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"aristotel\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"kant\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nietzsche\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"russel\"</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> waiter <span class=\"sy0\">=</span> waiter strategy <span class=\"nu0\">5</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map2</span> <span class=\"br0\">(</span>philosopher waiter<span class=\"br0\">)</span> names forks <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>  Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>  <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 84, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"hash/fnv\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Number of philosophers is simply the length of this list.</span><br/><span class=\"co1\">// It is not otherwise fixed in the program.</span><br/><span class=\"kw1\">var</span> ph <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Kant\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Spinoza\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Marx\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Russell\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> hunger <span class=\"sy2\">=</span> <span class=\"nu0\">3</span>                <span class=\"co1\">// number of times each philosopher eats</span><br/><span class=\"kw1\">const</span> think <span class=\"sy2\">=</span> time<span class=\"sy3\">.</span>Second <span class=\"sy3\">/</span> <span class=\"nu0\">100</span> <span class=\"co1\">// mean think time</span><br/><span class=\"kw1\">const</span> eat <span class=\"sy2\">=</span> time<span class=\"sy3\">.</span>Second <span class=\"sy3\">/</span> <span class=\"nu0\">100</span>   <span class=\"co1\">// mean eat time</span><br/>\u00a0<br/><span class=\"kw1\">var</span> fmt <span class=\"sy2\">=</span> log<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"co1\">// for thread-safe output</span><br/>\u00a0<br/><span class=\"kw1\">var</span> done <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// This solution uses channels to implement synchronization.</span><br/><span class=\"co1\">// Sent over channels are \"forks.\"</span><br/><span class=\"kw1\">type</span> fork <span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"co1\">// A fork object in the program models a physical fork in the simulation.</span><br/><span class=\"co1\">// A separate channel represents each fork place.  Two philosophers</span><br/><span class=\"co1\">// have access to each fork.  The channels are buffered with capacity = 1,</span><br/><span class=\"co1\">// representing a place for a single fork.</span><br/>\u00a0<br/><span class=\"co1\">// Goroutine for philosopher actions.  An instance is run for each</span><br/><span class=\"co1\">// philosopher.  Instances run concurrently.</span><br/><span class=\"kw4\">func</span> philosopher<span class=\"sy1\">(</span>phName <span class=\"kw4\">string</span><span class=\"sy1\">,</span><br/>    dominantHand<span class=\"sy1\">,</span> otherHand <span class=\"kw4\">chan</span> fork<span class=\"sy1\">,</span> done <span class=\"kw4\">chan</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"seated\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// each philosopher goroutine has a random number generator,</span><br/>    <span class=\"co1\">// seeded with a hash of the philosopher's name.</span><br/>    h <span class=\"sy2\">:=</span> fnv<span class=\"sy3\">.</span>New64a<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>phName<span class=\"sy1\">))</span><br/>    rg <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>NewSource<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>h<span class=\"sy3\">.</span>Sum64<span class=\"sy1\">())))</span><br/>    <span class=\"co1\">// utility function to sleep for a randomized nominal time</span><br/>    rSleep <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>t time<span class=\"sy3\">.</span>Duration<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span>t<span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> time<span class=\"sy3\">.</span>Duration<span class=\"sy1\">(</span>rg<span class=\"sy3\">.</span>Int63n<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>t<span class=\"sy1\">))))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> h <span class=\"sy2\">:=</span> hunger<span class=\"sy1\">;</span> h &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> h<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"hungry\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy3\">&lt;-</span>dominantHand <span class=\"co1\">// pick up forks</span><br/>        <span class=\"sy3\">&lt;-</span>otherHand<br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"eating\"</span><span class=\"sy1\">)</span><br/>        rSleep<span class=\"sy1\">(</span>eat<span class=\"sy1\">)</span><br/>        dominantHand <span class=\"sy3\">&lt;-</span> <span class=\"st0\">'f'</span> <span class=\"co1\">// put down forks</span><br/>        otherHand <span class=\"sy3\">&lt;-</span> <span class=\"st0\">'f'</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"thinking\"</span><span class=\"sy1\">)</span><br/>        rSleep<span class=\"sy1\">(</span>think<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"satisfied\"</span><span class=\"sy1\">)</span><br/>    done &lt;<span class=\"sy3\">-</span> <span class=\"kw2\">true</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>phName<span class=\"sy1\">,</span> <span class=\"st0\">\"left the table\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"table empty\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// Create fork channels and start philosopher goroutines,</span><br/>    <span class=\"co1\">// supplying each goroutine with the appropriate channels</span><br/>    place0 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> fork<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    place0 &lt;<span class=\"sy3\">-</span> <span class=\"st0\">'f'</span> <span class=\"co1\">// byte in channel represents a fork on the table.</span><br/>    placeLeft <span class=\"sy2\">:=</span> place0<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ph<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        placeRight <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> fork<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        placeRight &lt;<span class=\"sy3\">-</span> <span class=\"st0\">'f'</span><br/>        <span class=\"kw1\">go</span> philosopher<span class=\"sy1\">(</span>ph<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> placeLeft<span class=\"sy1\">,</span> placeRight<span class=\"sy1\">,</span> done<span class=\"sy1\">)</span><br/>        placeLeft <span class=\"sy2\">=</span> placeRight<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Make one philosopher left handed by reversing fork place</span><br/>    <span class=\"co1\">// supplied to philosopher's dominant hand.</span><br/>    <span class=\"co1\">// This makes precedence acyclic, preventing deadlock.</span><br/>    <span class=\"kw1\">go</span> philosopher<span class=\"sy1\">(</span>ph<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> place0<span class=\"sy1\">,</span> placeLeft<span class=\"sy1\">,</span> done<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// they are all now busy eating</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">range</span> ph <span class=\"sy1\">{</span><br/>        &lt;<span class=\"sy3\">-</span>done <span class=\"co1\">// wait for philosphers to finish</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"table empty\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 56, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">groovy.transform.Canonical</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">java.util.concurrent.locks.Lock</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">java.util.concurrent.locks.ReentrantLock</span><br/>\u00a0<br/>@Canonical<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Fork <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> name<br/>    Lock lock <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> ReentrantLock<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> pickUp<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> philosopher<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lock.<span class=\"me1\">lock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"  $philosopher picked up $name\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> putDown<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> philosopher<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lock.<span class=\"me1\">unlock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"  $philosopher put down $name\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>@Canonical<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Philosopher <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20extends\"><span class=\"kw2\">extends</span></a> <a href=\"http://www.google.de/search?as_q=Thread&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Thread</span></a> <span class=\"br0\">{</span><br/>    Fork f1<br/>    Fork f2<br/>\u00a0<br/>    @Override<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> random <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> bite <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"$name is hungry\"</span><br/>            f1.<span class=\"me1\">pickUp</span> name<br/>            f2.<span class=\"me1\">pickUp</span> name<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"$name is eating bite $bite\"</span><br/>            <a href=\"http://www.google.de/search?as_q=Thread&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span> random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">100</span><br/>            f2.<span class=\"me1\">putDown</span> name<br/>            f1.<span class=\"me1\">putDown</span> name<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> diningPhilosophers<span class=\"br0\">(</span>names<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> forks <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">names</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Fork<span class=\"br0\">(</span>name: <span class=\"st0\">\"Fork $it\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> philosophers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    names.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a><span class=\"br0\">{</span> n, i <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <span class=\"br0\">(</span>i1, i2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>i, <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i2 <span class=\"sy0\">&lt;</span> i1<span class=\"br0\">)</span> <span class=\"br0\">(</span>i1, i2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>i2, i<span class=\"br0\">]</span><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> p <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Philosopher<span class=\"br0\">(</span>name: n, f1: forks<span class=\"br0\">[</span>i1<span class=\"br0\">]</span>, f2: forks<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        p.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20start\"><span class=\"kw8\">start</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        philosophers <span class=\"sy0\">&lt;&lt;</span> p<br/>    <span class=\"br0\">}</span><br/>    philosophers.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>diningPhilosophers<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'Aristotle'</span>, <span class=\"st0\">'Kant'</span>, <span class=\"st0\">'Spinoza'</span>, <span class=\"st0\">'Marx'</span>, <span class=\"st0\">'Russell'</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 66, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Philosophers <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<span class=\"sy0\">.</span>STM<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/><span class=\"co1\">-- TMVars are transactional references. They can only be used in transactional actions.</span><br/><span class=\"co1\">-- They are either empty or contain one value. Taking an empty reference fails and</span><br/><span class=\"co1\">-- putting a value in a full reference fails. A transactional action only succeeds</span><br/><span class=\"co1\">-- when all the component actions succeed, else it rolls back and retries until it</span><br/><span class=\"co1\">-- succeeds.</span><br/><span class=\"co1\">-- The Int is just for display purposes.</span><br/><span class=\"kw1\">type</span> Fork <span class=\"sy0\">=</span> TMVar <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>\u00a0<br/>newFork <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> Fork<br/>newFork i <span class=\"sy0\">=</span> newTMVarIO i<br/>\u00a0<br/><span class=\"co1\">-- The basic transactional operations on forks</span><br/>takeFork <span class=\"sy0\">::</span> Fork <span class=\"sy0\">-&gt;</span> STM <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>takeFork fork <span class=\"sy0\">=</span> takeTMVar fork<br/>\u00a0<br/>releaseFork <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Fork <span class=\"sy0\">-&gt;</span> STM <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>releaseFork i fork <span class=\"sy0\">=</span> putTMVar fork i<br/>\u00a0<br/><span class=\"kw1\">type</span> Name <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>runPhilosopher <span class=\"sy0\">::</span> Name <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Fork<span class=\"sy0\">,</span> Fork<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>runPhilosopher name <span class=\"br0\">(</span>left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span> <span class=\"sy0\">=</span> forever <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span>name <span class=\"sy0\">++</span> <span class=\"st0\">\" is hungry.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- Run the transactional action atomically.</span><br/>  <span class=\"co1\">-- The type system ensures this is the only way to run transactional actions.</span><br/>  <span class=\"br0\">(</span>leftNum<span class=\"sy0\">,</span> rightNum<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> atomically <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>    leftNum <span class=\"sy0\">&lt;-</span> takeFork left<br/>    rightNum <span class=\"sy0\">&lt;-</span> takeFork right<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>leftNum<span class=\"sy0\">,</span> rightNum<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span>name <span class=\"sy0\">++</span> <span class=\"st0\">\" got forks \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> leftNum <span class=\"sy0\">++</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> rightNum <span class=\"sy0\">++</span> <span class=\"st0\">\" and is now eating.\"</span><span class=\"br0\">)</span><br/>  delay <span class=\"sy0\">&lt;-</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  threadDelay <span class=\"br0\">(</span>delay <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"co1\">-- 1, 10 seconds. threadDelay uses nanoseconds.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span>name <span class=\"sy0\">++</span> <span class=\"st0\">\" is done eating. Going back to thinking.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  atomically <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>    releaseFork leftNum left<br/>    releaseFork rightNum right<br/>\u00a0<br/>  delay <span class=\"sy0\">&lt;-</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  threadDelay <span class=\"br0\">(</span>delay <span class=\"sy0\">*</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\u00a0<br/>philosophers <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>philosophers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Marx\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Russel\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  forks <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> newFork <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">let</span> namedPhilosophers  <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> runPhilosopher philosophers<br/>      forkPairs          <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> forks <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> <span class=\"sy0\">$</span> forks<span class=\"br0\">)</span><br/>      philosophersWithForks <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">$</span><span class=\"br0\">)</span> namedPhilosophers forkPairs<br/>\u00a0<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Running the philosophers. Press enter to quit.\"</span><br/>\u00a0<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> forkIO philosophersWithForks<br/>\u00a0<br/>  <span class=\"co1\">-- All threads exit when the main thread exits.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 29, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> forks<span class=\"sy0\">,</span> names<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    names <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Aristotle\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Kant\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Spinoza\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Marks\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Russell\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"^C to terminate\"</span><span class=\"br0\">)</span><br/>    nP <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>names<br/>    forks <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span>mutex<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>nP <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> p <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>nP <span class=\"kw1\">do</span> thread philosopher<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> philosopher<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    f1 <span class=\"sy0\">:=</span> forks<span class=\"br0\">[</span>min<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"sy0\">%*</span>forks<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    f2 <span class=\"sy0\">:=</span> forks<span class=\"br0\">[</span>max<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"sy0\">%*</span>forks<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" thinking\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">*?</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" hungry\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>            fork1 <span class=\"sy0\">:=</span> lock<span class=\"br0\">(</span>f1<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> fork2 <span class=\"sy0\">:=</span> trylock<span class=\"br0\">(</span>f2<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">write</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" eating\"</span><span class=\"br0\">)</span><br/>                <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">*?</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span> <span class=\"br0\">(</span>unlock<span class=\"br0\">(</span>fork2<span class=\"br0\">)</span><span class=\"sy0\">,</span> unlock<span class=\"br0\">(</span>fork1<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># full</span><br/>                <span class=\"br0\">}</span><br/>            unlock<span class=\"br0\">(</span>fork1<span class=\"br0\">)</span>  <span class=\"co1\"># Free first fork and go back to waiting</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 115, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">diningphilosophers</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.atomic.AtomicBoolean</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.atomic.AtomicInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> PhilosopherState <span class=\"br0\">{</span> Get, Eat, Pon <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Fork <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> ON_TABLE <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> instances <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> id<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> AtomicInteger holder <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> AtomicInteger<span class=\"br0\">(</span>ON_TABLE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Fork<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> id <span class=\"sy0\">=</span> instances<span class=\"sy0\">++;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Philosopher <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> maxWaitMs <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span>                          <span class=\"co1\">//  must be &gt; 0</span><br/>    <span class=\"kw1\">static</span> AtomicInteger token <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> AtomicInteger<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> instances <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    AtomicBoolean end <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> AtomicBoolean<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> id<span class=\"sy0\">;</span><br/>    PhilosopherState state <span class=\"sy0\">=</span> PhilosopherState.<span class=\"me1\">Get</span><span class=\"sy0\">;</span><br/>    Fork left<span class=\"sy0\">;</span><br/>    Fork right<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> timesEaten <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Philosopher<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        id <span class=\"sy0\">=</span> instances<span class=\"sy0\">++;</span><br/>        left <span class=\"sy0\">=</span> Main.<span class=\"me1\">forks</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        right <span class=\"sy0\">=</span> Main.<span class=\"me1\">forks</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">(</span>id<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>Main.<span class=\"me1\">philosopherCount</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> sleep<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">try</span> <span class=\"br0\">{</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>maxWaitMs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> waitForFork<span class=\"br0\">(</span>Fork fork<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fork.<span class=\"me1\">holder</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> Fork.<span class=\"me1\">ON_TABLE</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                fork.<span class=\"me1\">holder</span>.<span class=\"me1\">set</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"co1\">//  my id shows I hold it</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                                <span class=\"co1\">//  someone still holds it</span><br/>                sleep<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                            <span class=\"co1\">//  check again later</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state <span class=\"sy0\">==</span> PhilosopherState.<span class=\"me1\">Pon</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>    <span class=\"co1\">//  all that pondering</span><br/>                state <span class=\"sy0\">=</span> PhilosopherState.<span class=\"me1\">Get</span><span class=\"sy0\">;</span>       <span class=\"co1\">//  made me hungry</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// ==PhilosopherState.Get</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>token.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> id<span class=\"br0\">)</span> <span class=\"br0\">{</span>            <span class=\"co1\">//  my turn now</span><br/>                    waitForFork<span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    waitForFork<span class=\"br0\">(</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span>             <span class=\"co1\">//  Ah needs me some foahks!</span><br/>                    token.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"br0\">(</span>id<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">%</span> Main.<span class=\"me1\">philosopherCount</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    state <span class=\"sy0\">=</span> PhilosopherState.<span class=\"me1\">Eat</span><span class=\"sy0\">;</span><br/>                    timesEaten<span class=\"sy0\">++;</span><br/>                    sleep<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                        <span class=\"co1\">//  eat for a while</span><br/>                    left.<span class=\"me1\">holder</span>.<span class=\"me1\">set</span><span class=\"br0\">(</span>Fork.<span class=\"me1\">ON_TABLE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    right.<span class=\"me1\">holder</span>.<span class=\"me1\">set</span><span class=\"br0\">(</span>Fork.<span class=\"me1\">ON_TABLE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    state <span class=\"sy0\">=</span> PhilosopherState.<span class=\"me1\">Pon</span><span class=\"sy0\">;</span>   <span class=\"co1\">//  ponder for a while</span><br/>                    sleep<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                    <span class=\"co1\">//  token.get()\u00a0!= id, so not my turn</span><br/>                    sleep<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>end.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> philosopherCount <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\">//  token +2 behavior good for odd #s</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> runSeconds <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> ArrayList<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span> forks <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Fork<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> ArrayList<span class=\"sy0\">&lt;</span>Philosopher<span class=\"sy0\">&gt;</span> philosophers <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Philosopher<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> philosopherCount <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> forks.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> philosopherCount <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            philosophers.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Philosopher<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Philosopher p <span class=\"sy0\">:</span> philosophers<span class=\"br0\">)</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> endTime <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>runSeconds <span class=\"sy0\">*</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                                                    <span class=\"co1\">//  print status</span><br/>            StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Philosopher p <span class=\"sy0\">:</span> philosophers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>p.<span class=\"me1\">state</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"co1\">//  This is a snapshot at a particular</span><br/>            <span class=\"br0\">}</span>                              <span class=\"co1\">//  instant.  Plenty happens between.</span><br/>\u00a0<br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"     |\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Fork f <span class=\"sy0\">:</span> forks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> holder <span class=\"sy0\">=</span> f.<span class=\"me1\">holder</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>holder<span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"sy0\">?</span><span class=\"st0\">\"   \"</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"P%02d\"</span>,holder<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">try</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> endTime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Philosopher p <span class=\"sy0\">:</span> philosophers<span class=\"br0\">)</span> p.<span class=\"me1\">end</span>.<span class=\"me1\">set</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Philosopher p <span class=\"sy0\">:</span> philosophers<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"P%02d: ate\u00a0%,d times,\u00a0%,d/sec<span class=\"es0\">\\n</span>\"</span>,<br/>                p.<span class=\"me1\">id</span>, p.<span class=\"me1\">timesEaten</span>, p.<span class=\"me1\">timesEaten</span><span class=\"sy0\">/</span>runSeconds<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JoCaml", "loc": 21, "block": "<pre class=\"text highlighted_source\">let random_wait n = Unix.sleep (Random.int n);;<br/>let print s m = Printf.printf \"philosopher\u00a0%s is\u00a0%s\\n\" s m; flush(stdout);;<br/>let will_eat s = print s \"eating\"; random_wait 10;;<br/>let will_think s = print s \"thinking\"; random_wait 20; print s \"hungry\";;<br/>\u00a0<br/>  (* a,b,c,d,e are thinking philosophers; ah,bh,ch,dh,eh are the same philosophers when hungry;<br/>     fab is the fork located between philosophers a and b; similarly for fbc, fcd, ... *)<br/>\u00a0<br/>def  ah() &amp; fab() &amp; fea() = will_eat \"Aristotle\"; a() &amp; fab() &amp; fea() <br/> or  bh() &amp; fab() &amp; fbc() = will_eat \"Kant\";      b() &amp; fab() &amp; fbc() <br/> or  ch() &amp; fbc() &amp; fcd() = will_eat \"Spinoza\";   c() &amp; fbc() &amp; fcd() <br/> or  dh() &amp; fcd() &amp; fde() = will_eat \"Marx\";      d() &amp; fcd() &amp; fde() <br/> or  eh() &amp; fde() &amp; fea() = will_eat \"Russell\";   e() &amp; fde() &amp; fea()<br/>\u00a0<br/> and a() = will_think \"Aristotle\"; ah()<br/> and b() = will_think \"Kant\";      bh()<br/> and c() = will_think \"Spinoza\";   ch()<br/> and d() = will_think \"Marx\";      dh()<br/> and e() = will_think \"Russell\";   eh()<br/>;; <br/>spawn fab() &amp; fbc() &amp; fcd() &amp; fde() &amp; fea() &amp; a() &amp; b() &amp; c() &amp; d() &amp; e();;</pre>"}, {"lang": "Julia", "loc": 85, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>mutable struct Philosopher<br/>    name::String<br/>    hungry::Bool<br/>    righthanded::Bool<br/>    rightforkheld::Channel<br/>    leftforkheld::Channel<br/>    function Philosopher(name, leftfork, rightfork)<br/>        this = new()<br/>        this.name = name<br/>        this.hungry = rand([false, true]) # not specified so start as either<br/>        this.righthanded   = (name == \"Aristotle\")\u00a0? false\u00a0: true<br/>        this.leftforkheld  = leftfork<br/>        this.rightforkheld = rightfork<br/>        this<br/>    end<br/>end<br/>\u00a0<br/>mutable struct FiveForkTable<br/>    fork51::Channel<br/>    fork12::Channel<br/>    fork23::Channel<br/>    fork34::Channel<br/>    fork45::Channel    <br/>    function FiveForkTable()<br/>        this = new()<br/>        this.fork51 = Channel(1); put!(this.fork51, \"fork\") # start with one fork per channel<br/>        this.fork12 = Channel(1); put!(this.fork12, \"fork\") <br/>        this.fork23 = Channel(1); put!(this.fork23, \"fork\") <br/>        this.fork34 = Channel(1); put!(this.fork34, \"fork\") <br/>        this.fork45 = Channel(1); put!(this.fork45, \"fork\") <br/>        this<br/>    end<br/>end<br/>\u00a0<br/>\u00a0<br/>table = FiveForkTable();<br/>tasks = [Philosopher(\"Aristotle\", table.fork12, table.fork51),<br/>         Philosopher(\"Kant\", table.fork23, table.fork12),<br/>         Philosopher(\"Spinoza\", table.fork34, table.fork23),<br/>         Philosopher(\"Marx\", table.fork45, table.fork34),<br/>         Philosopher(\"Russell\", table.fork51, table.fork45)]<br/>\u00a0<br/>function dine(t,p)<br/>    if p.righthanded<br/>       take!(p.rightforkheld); println(\"$(p.name) takes right fork\")<br/>       take!(p.leftforkheld); println(\"$(p.name) takes left fork\")<br/>    else<br/>       take!(p.leftforkheld); println(\"$(p.name) takes left fork\")<br/>       take!(p.rightforkheld); println(\"$(p.name) takes right fork\")<br/>    end    <br/>end<br/>\u00a0<br/>function leavetothink(t, p)<br/>    put!(p.rightforkheld, \"fork\"); println(\"$(p.name) puts down right fork\")<br/>    put!(p.leftforkheld, \"fork\");  println(\"$(p.name) puts down left fork\")<br/>end<br/>\u00a0<br/>contemplate(t) = sleep(t)<br/>\u00a0<br/>function dophil(p, t, fullaftersecs=2.0, hungryaftersecs=10.0)<br/>    while true<br/>        if p.hungry<br/>            println(\"$(p.name) is hungry\")<br/>            dine(table, p)<br/>            sleep(fullaftersecs)<br/>            p.hungry = false<br/>            leavetothink(t, p)<br/>        else<br/>            println(\"$(p.name) is out of the dining room for now.\")<br/>            contemplate(hungryaftersecs)<br/>            p.hungry = true<br/>        end<br/>    end<br/>end<br/>\u00a0<br/>function runall(tasklist)<br/>    for p in tasklist<br/>        @async dophil(p, table)<br/>    end<br/>    while true begin sleep(5) end end<br/>end<br/>\u00a0<br/>runall(tasks)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 58, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.31</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">concurrent</span>.<span class=\"me1\">locks</span>.<span class=\"me1\">Lock</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">concurrent</span>.<span class=\"me1\">locks</span>.<span class=\"me1\">ReentrantLock</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Fork<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lock <span class=\"sy0\">=</span> ReentrantLock<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun pickUp<span class=\"br0\">(</span>philosopher<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lock.<span class=\"me1\">lock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  $philosopher picked up $name\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun putDown<span class=\"br0\">(</span>philosopher<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lock.<span class=\"me1\">unlock</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  $philosopher put down $name\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Philosopher<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pname<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f1<span class=\"sy0\">:</span> Fork, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f2<span class=\"sy0\">:</span> Fork<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Thread<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$pname is hungry\"</span><span class=\"br0\">)</span><br/>            f1.<span class=\"me1\">pickUp</span><span class=\"br0\">(</span>pname<span class=\"br0\">)</span><br/>            f2.<span class=\"me1\">pickUp</span><span class=\"br0\">(</span>pname<span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$pname is eating bite $it\"</span><span class=\"br0\">)</span><br/>            Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> + 100L<span class=\"br0\">)</span><br/>            f2.<span class=\"me1\">putDown</span><span class=\"br0\">(</span>pname<span class=\"br0\">)</span><br/>            f1.<span class=\"me1\">putDown</span><span class=\"br0\">(</span>pname<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun diningPhilosophers<span class=\"br0\">(</span>names<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> names.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> forks <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">{</span> Fork<span class=\"br0\">(</span><span class=\"st0\">\"Fork ${it + 1}\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> philosophers <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Philosopher<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    names.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> i, n -<span class=\"sy0\">&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i1 <span class=\"sy0\">=</span> i<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> size<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i2 <span class=\"sy0\">&lt;</span> i1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i1 <span class=\"sy0\">=</span> i2<br/>            i2 <span class=\"sy0\">=</span> i<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Philosopher<span class=\"br0\">(</span>n, forks<span class=\"br0\">[</span>i1<span class=\"br0\">]</span>, forks<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        p.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        philosophers.<span class=\"me1\">add</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    philosophers.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> it.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span>, <span class=\"st0\">\"Kant\"</span>, <span class=\"st0\">\"Spinoza\"</span>, <span class=\"st0\">\"Marx\"</span>, <span class=\"st0\">\"Russell\"</span><span class=\"br0\">)</span><br/>    diningPhilosophers<span class=\"br0\">(</span>names<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 156, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">category</span>(chopstick).<br/>\u00a0<br/>    <span class=\"co1\">% chopstick actions (picking up and putting down) are synchronized using a notification</span><br/>    <span class=\"co1\">% such that a chopstick can only be handled by a single philosopher at a time:</span><br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(pick_up<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    pick_up <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">threaded_wait</span>(available).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(put_down<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    put_down <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">threaded_notify</span>(available).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_category</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(cs1,<br/>    <span class=\"kw3\">imports</span>(chopstick)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>(<span class=\"kw4\">threaded_notify</span>(available)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(cs2,<br/>    <span class=\"kw3\">imports</span>(chopstick)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>(<span class=\"kw4\">threaded_notify</span>(available)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(cs3,<br/>    <span class=\"kw3\">imports</span>(chopstick)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>(<span class=\"kw4\">threaded_notify</span>(available)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(cs4,<br/>    <span class=\"kw3\">imports</span>(chopstick)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>(<span class=\"kw4\">threaded_notify</span>(available)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(cs5,<br/>    <span class=\"kw3\">imports</span>(chopstick)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">initialization</span>(<span class=\"kw4\">threaded_notify</span>(available)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">category</span>(philosopher).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(left_chopstick<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(right_chopstick<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">private</span>(message<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">synchronized</span>(message<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">uses</span>(random, [random<span class=\"sy1\">/</span><span class=\"nu0\">3</span>]).<br/>\u00a0<br/>    run(<span class=\"nu0\">0</span>, <span class=\"re0\">_</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">this</span>(<span class=\"re0\">Philosopher</span>),<br/>        message([<span class=\"re0\">Philosopher</span>, <span class=\"st0\">' terminated.'</span>]).<br/>\u00a0<br/>    run(<span class=\"re0\">Count</span>, <span class=\"re0\">MaxTime</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"re0\">Count</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span>,<br/>        think(<span class=\"re0\">MaxTime</span>),<br/>        eat(<span class=\"re0\">MaxTime</span>),<br/>        <span class=\"re0\">Count2</span> <span class=\"kw5\">is</span> <span class=\"re0\">Count</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span>,<br/>        run(<span class=\"re0\">Count2</span>, <span class=\"re0\">MaxTime</span>).<br/>\u00a0<br/>    think(<span class=\"re0\">MaxTime</span>)<span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">this</span>(<span class=\"re0\">Philosopher</span>),<br/>        random(<span class=\"nu0\">1</span>, <span class=\"re0\">MaxTime</span>, <span class=\"re0\">ThinkTime</span>),<br/>        message([<span class=\"st0\">'Philosopher '</span>, <span class=\"re0\">Philosopher</span>, <span class=\"st0\">' thinking for '</span>, <span class=\"re0\">ThinkTime</span>, <span class=\"st0\">' seconds.'</span>]),<br/>        thread_sleep(<span class=\"re0\">ThinkTime</span>).<br/>\u00a0<br/>    eat(<span class=\"re0\">MaxTime</span>)<span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">this</span>(<span class=\"re0\">Philosopher</span>),<br/>        random(<span class=\"nu0\">1</span>, <span class=\"re0\">MaxTime</span>, <span class=\"re0\">EatTime</span>),<br/>        <span class=\"sy1\">::</span>left_chopstick(<span class=\"re0\">LeftStick</span>),<br/>        <span class=\"sy1\">::</span>right_chopstick(<span class=\"re0\">RightStick</span>),<br/>        <span class=\"re0\">LeftStick</span><span class=\"sy1\">::</span>pick_up,<br/>        <span class=\"re0\">RightStick</span><span class=\"sy1\">::</span>pick_up,<br/>        message([<span class=\"st0\">'Philosopher '</span>, <span class=\"re0\">Philosopher</span>, <span class=\"st0\">' eating for '</span>, <span class=\"re0\">EatTime</span>, <span class=\"st0\">' seconds with chopsticks '</span>, <span class=\"re0\">LeftStick</span>, <span class=\"st0\">' and '</span>, <span class=\"re0\">RightStick</span>, <span class=\"st0\">'.'</span>]),<br/>        thread_sleep(<span class=\"re0\">EatTime</span>),<br/>        <span class=\"sy1\">::</span><span class=\"re0\">LeftStick</span><span class=\"sy1\">::</span>put_down,<br/>        <span class=\"sy1\">::</span><span class=\"re0\">RightStick</span><span class=\"sy1\">::</span>put_down.<br/>\u00a0<br/>    <span class=\"co1\">% writing a message needs to be synchronized as it's accomplished  </span><br/>    <span class=\"co1\">% using a combination of individual write/1 and nl/0 calls:</span><br/>    message([]) <span class=\"sy2\">:-</span><br/>        <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw5\">flush_output</span>.<br/>    message([<span class=\"re0\">Atom</span>| <span class=\"re0\">Atoms</span>]) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">Atom</span>),<br/>        message(<span class=\"re0\">Atoms</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_category</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(aristotle,<br/>    <span class=\"kw3\">imports</span>(philosopher)).<br/>\u00a0<br/>    left_chopstick(cs1).<br/>    right_chopstick(cs2).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(kant,<br/>    <span class=\"kw3\">imports</span>(philosopher)).<br/>\u00a0<br/>    left_chopstick(cs2).<br/>    right_chopstick(cs3).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(spinoza,<br/>    <span class=\"kw3\">imports</span>(philosopher)).<br/>\u00a0<br/>    left_chopstick(cs3).<br/>    right_chopstick(cs4).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(marx,<br/>    <span class=\"kw3\">imports</span>(philosopher)).<br/>\u00a0<br/>    left_chopstick(cs4).<br/>    right_chopstick(cs5).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(russell,<br/>    <span class=\"kw3\">imports</span>(philosopher)).<br/>\u00a0<br/>    left_chopstick(cs1).    <span class=\"co1\">% change order so that the chopsticks are picked</span><br/>    right_chopstick(cs5).   <span class=\"co1\">% in different order from the other philosophers</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "Nim", "loc": 47, "block": "<pre class=\"text highlighted_source\">import threadpool, locks, math, os, random<br/># to call randomize() as a seed, need to import random module<br/>randomize()<br/>\u00a0<br/>type Philosopher = ref object<br/>  name: string<br/>  food: string<br/>  forkLeft, forkRight: int<br/>\u00a0<br/>const<br/>  n = 5<br/>  names = [\"Aristotle\", \"Kant\", \"Spinoza\", \"Marx\", \"Russell\"]<br/>  foods = [\" rat poison\", \" cockroaches\", \" dog food\", \" lemon-curd toast\", \" baked worms\"]<br/>\u00a0<br/>var<br/>  forks: array[n, Lock]<br/>  phils: array[n, Philosopher]<br/>  threads: array[n, Thread[Philosopher]]<br/>\u00a0<br/>proc run(p: Philosopher) {.thread.} =<br/>  # random deprecated, use rand(x .. y)<br/>  sleep rand(1..10) * 500<br/>  echo p.name, \" is hungry.\"<br/>\u00a0<br/>  acquire forks[min(p.forkLeft, p.forkRight)]<br/>  sleep rand(1..5) * 500<br/>  acquire forks[max(p.forkLeft, p.forkRight)]<br/>\u00a0<br/>  echo p.name, \" starts eating\", p.food, \".\"<br/>  sleep rand(1..10) * 500<br/>\u00a0<br/>  echo p.name, \" finishes eating\", p.food, \" and leaves to think.\"<br/>\u00a0<br/>  release forks[p.forkLeft]<br/>  release forks[p.forkRight]<br/>\u00a0<br/>for i in 0..&lt;n:<br/>  initLock forks[i]<br/>  phils[i] = Philosopher(<br/>    name: names[i],<br/>    food: foods[rand(0 .. n) mod n],<br/>    forkLeft: i,<br/>    forkRight: (i + 1) mod n<br/>  )<br/>  createThread(threads[i], run, phils[i])<br/>\u00a0<br/>joinThreads(threads)</pre>"}, {"lang": "OxygenBasic", "loc": 103, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'=========================<br/>class RoundTableWith5Seats<br/>'=========================<br/>\u00a0<br/> \u00a0% hungry    0<br/> \u00a0% beingUsed 1<br/> \u00a0% putDown   0<br/> \u00a0% empty     0<br/>\u00a0<br/>  sys fork[5], plate[5],chair[5],philosopher[5]<br/>  sys first<br/>\u00a0<br/>  method AddPasta() as sys<br/>    function rand() as sys<br/>      static seed=0x12345678<br/>      mov eax,seed<br/>      rol eax,7<br/>      mul seed<br/>      xor eax,0x5335ABD9<br/>      mov seed,eax<br/>      return seed<br/>    end function<br/>    return 4+(rand() and 15)<br/>  end method<br/>\u00a0<br/>  method dine()<br/>  first++ 'PRIORITY DINER<br/>  if first&gt;5 then first-=5<br/>  for i=1 to 5<br/>    kl=first+i-1<br/>    kr=first+i<br/>    if kl&gt;5 then kl-=5<br/>    if kr&gt;5 then kr-=5<br/>    if philosopher(kl) = hungry then<br/>      if not fork(kl) or fork(kr) = beingUsed then<br/>        plate(kl) = AddPasta()<br/>        fork(kl)=beingUsed<br/>        fork(kr)=beingUsed<br/>      end if<br/>    end if<br/>    '<br/>  next<br/>  '<br/>  for kl=1 to 5<br/>    kr=kl+1\u00a0: if kr&gt;5 then kr-=5<br/>    if plate(kl)<br/>      philosopher(kl)+=1 'PHILOSOPHER DINING<br/>      --plate(kl)<br/>      if plate(kl)=empty<br/>        fork(kl)=PutDown<br/>        fork(kr)=PutDown<br/>      end if<br/>    else<br/>      if philosopher(kl)&gt;0<br/>        --philosopher(kl) 'PHILOSOPHER THINKING<br/>      end if<br/>    end if<br/>  next<br/>  '<br/>  end method<br/>\u00a0<br/>  method show() as string<br/>  cr=chr(13)+chr(10)\u00a0: tab=chr(9)<br/>  pr=\"philos\" tab \"activity\" tab \"plate\" tab \"fork L\" tab \"fork R\" cr cr<br/>  for i=1 to 5<br/>  j=i+1\u00a0: if j&gt;5 then j-=5<br/>  if plate(i)=0 then<br/>    if philosopher(i)=0 then<br/>      act=\"waiting\"<br/>    else<br/>      act=\"thinks\"<br/>    end if<br/>  else<br/>    act=\"dining\"<br/>  end if<br/>  '<br/>  pr+=i tab act tab plate(i) tab fork(i) tab fork(j) cr<br/>  next<br/>  return pr<br/>  end method<br/>\u00a0<br/>end class<br/>\u00a0<br/>'TEST<br/>'====<br/>\u00a0<br/>RoundTableWith5Seats Sopho<br/>for i=1 to 100<br/>  Sopho.dine<br/>next<br/>\u00a0<br/>print Sopho.show<br/>'putfile \"s.txt\",Sopho.show<br/>\u00a0<br/>'philos\taction\tplate\tfork L\tfork R<br/>'<br/>'1\twaiting\t0\t0\t1<br/>'2\tdining\t8\t1\t1<br/>'3\tthinks\t0\t1\t1<br/>'4\tdining\t8\t1\t1<br/>'5\tthinks\t0\t1\t0<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 117, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Philosophers = <span class=\"br0\">[</span>aristotle kant spinoza marx russell<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Start</span><span class=\"br0\">}</span><br/>     Forks = <span class=\"br0\">{</span>MakeList <span class=\"br0\">{</span>Length Philosophers<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>ForAll Forks NewFork<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span><br/>        Name <span class=\"kw1\">in</span> Philosophers<br/>        LeftFork <span class=\"kw1\">in</span> Forks<br/>        RightFork <span class=\"kw1\">in</span> <span class=\"br0\">{</span>RightShift Forks<span class=\"br0\">}</span><br/>     <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">thread</span><br/>           <span class=\"br0\">{</span>Philosopher Name LeftFork RightFork<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Philosopher</span> Name LeftFork RightFork<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span>ShowInfo Name<span class=\"sy0\">#</span><span class=\"st0\">\" is hungry.\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">{</span>TakeForks <span class=\"br0\">[</span>LeftFork RightFork<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ShowInfo Name<span class=\"sy0\">#</span><span class=\"st0\">\" got forks.\"</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>WaitRandom<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ReleaseFork LeftFork<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ReleaseFork RightFork<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">{</span>ShowInfo Name<span class=\"sy0\">#</span><span class=\"st0\">\" is thinking.\"</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>WaitRandom<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">WaitRandom</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Delay 1000 <span class=\"sy0\">+</span> <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> 4000<span class=\"br0\">}</span> <span class=\"co1\">%% 1-5 seconds</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">TakeForks</span> Forks<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>ForAll Forks WaitForFork<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> <span class=\"br0\">{</span>TryAtomically <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span><br/>                            <span class=\"br0\">{</span>ForAll Forks TakeFork<span class=\"br0\">}</span><br/>                         <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">of</span> <span class=\"kw1\">true</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>ForAll Forks InitForkNotifier<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"kw1\">false</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>TakeForks Forks<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%%</span><br/>  <span class=\"co1\">%% Fork type</span><br/>  <span class=\"co1\">%%</span><br/>\u00a0<br/>  <span class=\"co1\">%% A fork is a mutable reference to a pair</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NewFork</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>NewCell<br/>      <span class=\"kw1\">unit</span><span class=\"br0\">(</span>taken:_     <span class=\"co1\">%% a fork is taken by setting this value to a unique value</span><br/>           notify:<span class=\"kw1\">unit</span> <span class=\"co1\">%% to wait for a taken fork</span><br/>\t  <span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">TakeFork</span> F<span class=\"br0\">}</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">@</span>F<span class=\"br0\">)</span><span class=\"sy0\">.</span>taken = <span class=\"br0\">{</span>NewName<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">InitForkNotifier</span> F<span class=\"br0\">}</span><br/>     <span class=\"co1\">%% we cannot do this in TakeFork</span><br/>     <span class=\"co1\">%% because side effect are not allowed in subordinate spaces</span><br/>     New Old<br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Exchange F Old New<span class=\"br0\">}</span><br/>     New = <span class=\"kw1\">unit</span><span class=\"br0\">(</span>taken:Old<span class=\"sy0\">.</span>taken notify:_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">ReleaseFork</span> F<span class=\"br0\">}</span><br/>     New Old<br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Exchange F Old New<span class=\"br0\">}</span><br/>     New = <span class=\"kw1\">unit</span><span class=\"br0\">(</span>taken:_ notify:<span class=\"kw1\">unit</span><span class=\"br0\">)</span><br/>     Old<span class=\"sy0\">.</span>notify = <span class=\"kw1\">unit</span> <span class=\"co1\">%% notify waiters</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">WaitForFork</span> F<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Wait <span class=\"br0\">(</span><span class=\"sy0\">@</span>F<span class=\"br0\">)</span><span class=\"sy0\">.</span>notify<span class=\"br0\">}</span>  <span class=\"co1\">%% returns immediatly if fork is free, otherwise blocks</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%%</span><br/>  <span class=\"co1\">%% Helpers</span><br/>  <span class=\"co1\">%%</span><br/>\u00a0<br/>  <span class=\"co1\">%% Implements transactions on data flow variables</span><br/>  <span class=\"co1\">%% with computation spaces. Returns success.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">TryAtomically</span> P<span class=\"br0\">}</span><br/>     <span class=\"kw1\">try</span><br/>\tS = <span class=\"br0\">{</span>Space<span class=\"sy0\">.</span>new<br/>\t     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Sync<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">{</span>P<span class=\"br0\">}</span><br/>\t\tSync = <span class=\"kw1\">unit</span><br/>\t     <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>\t<span class=\"br0\">{</span>Space<span class=\"sy0\">.</span>askVerbose S<span class=\"br0\">}</span> <span class=\"sy0\">\\=</span> failed = <span class=\"kw1\">true</span><br/>\t<span class=\"br0\">{</span>Wait <span class=\"br0\">{</span>Space<span class=\"sy0\">.</span>merge S<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">true</span><br/>     <span class=\"kw1\">catch</span> _ <span class=\"kw1\">then</span><br/>\t<span class=\"kw1\">false</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">RightShift</span> Xs<span class=\"br0\">}</span> <span class=\"co1\">%% circular</span><br/>     <span class=\"kw1\">case</span> Xs <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> nil<br/>     <span class=\"kw1\">else</span> <span class=\"br0\">{</span>Append Xs<span class=\"sy0\">.</span>2 <span class=\"br0\">[</span>Xs<span class=\"sy0\">.</span>1<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  ShowInfo = System<span class=\"sy0\">.</span>showInfo<br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Start<span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 52, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">use</span> threads<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> threads<span class=\"sy0\">::</span><span class=\"me2\">shared</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@names</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Aristotle Kant Spinoza Marx Russell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@forks</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">'On Table'</span><span class=\"br0\">)</span> x <span class=\"re0\">@names</span><span class=\"sy0\">;</span><br/>share <span class=\"re0\">$forks</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#forks</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> pick_up_forks <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$philosopher</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"re0\">$second</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$philosopher</span><span class=\"sy0\">,</span> <span class=\"re0\">$philosopher</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">(</span><span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"re0\">$second</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$second</span><span class=\"sy0\">,</span> <span class=\"re0\">$first</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$philosopher</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$fork</span> <span class=\"br0\">(</span> <span class=\"re0\">@forks</span><span class=\"br0\">[</span> <span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"re0\">$second</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      lock <span class=\"re0\">$fork</span><span class=\"sy0\">;</span><br/>      cond_wait<span class=\"br0\">(</span><span class=\"re0\">$fork</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"re0\">$fork</span> <span class=\"kw1\">ne</span> <span class=\"st_h\">'On Table'</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$fork</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'In Hand'</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> drop_forks <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$philosopher</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$fork</span> <span class=\"br0\">(</span> <span class=\"re0\">@forks</span><span class=\"br0\">[</span><span class=\"re0\">$philosopher</span><span class=\"sy0\">,</span> <span class=\"re0\">$philosopher</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      lock <span class=\"re0\">$fork</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$fork</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'In Hand'</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$fork</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'On Table'</span><span class=\"sy0\">;</span><br/>      cond_signal<span class=\"br0\">(</span><span class=\"re0\">$fork</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> philosopher <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$philosopher</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"re0\">$names</span><span class=\"br0\">[</span><span class=\"re0\">$philosopher</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$meal</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"st0\">\" is pondering<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/sleep.html\"><span class=\"kw3\">sleep</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"st0\">\" is hungry<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>      pick_up_forks<span class=\"br0\">(</span> <span class=\"re0\">$philosopher</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"st0\">\" is eating<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/sleep.html\"><span class=\"kw3\">sleep</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>      drop_forks<span class=\"br0\">(</span> <span class=\"re0\">$philosopher</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"st0\">\" is done<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> threads<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">\\&amp;philosopher</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#names</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$thread</span> <span class=\"br0\">(</span> <span class=\"re0\">@t</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">$thread</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Done<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">__END__</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 51, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Fork <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$!lock</span> <span class=\"sy0\">=</span> Lock<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> grab<span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"sy0\">,</span> <span class=\"re0\">$which</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">say</span> <span class=\"st0\">\"$who grabbing $which fork\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$!lock</span><span class=\"sy0\">.</span><span class=\"me1\">lock</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> drop<span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"sy0\">,</span> <span class=\"re0\">$which</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">say</span> <span class=\"st0\">\"$who dropping $which fork\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$!lock</span><span class=\"sy0\">.</span><span class=\"me1\">unlock</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Lollipop <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$!channel</span> <span class=\"sy0\">=</span> Channel<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> mine<span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$!channel</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> yours <span class=\"br0\">{</span> <span class=\"re0\">$!channel</span><span class=\"sy0\">.</span><span class=\"me1\">receive</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dally<span class=\"br0\">(</span><span class=\"re0\">$sec</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> sleep <span class=\"nu0\">0.01</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sec</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@names</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">@names</span> <span class=\"sy0\">||=</span> <span class=\"sy0\">&lt;</span>Aristotle Kant Spinoza Marx Russell<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@lfork</span> <span class=\"sy0\">=</span> Fork<span class=\"sy0\">.</span><span class=\"kw2\">new</span> <span class=\"kw1\">xx</span> <span class=\"re0\">@names</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rfork</span> <span class=\"sy0\">=</span> <span class=\"re0\">@lfork</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$lollipop</span> <span class=\"sy0\">=</span> Lollipop<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    start <span class=\"br0\">{</span> <span class=\"re0\">$lollipop</span><span class=\"sy0\">.</span><span class=\"me1\">yours</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@philosophers</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> flat <span class=\"re0\">@names</span> <span class=\"kw1\">Z</span> <span class=\"re0\">@lfork</span> <span class=\"kw1\">Z</span> <span class=\"re0\">@rfork</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>\tstart <span class=\"br0\">{</span> <br/>\t    sleep <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$l</span><span class=\"sy0\">.</span><span class=\"me1\">grab</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"st_h\">'left'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdally <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"co1\"># give opportunity for deadlock</span><br/>\t\t<span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"me1\">grab</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"st_h\">'right'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">say</span> <span class=\"st0\">\"$n eating\"</span><span class=\"sy0\">;</span><br/>\t\tdally <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$l</span><span class=\"sy0\">.</span><span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"st_h\">'left'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"st_h\">'right'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"re0\">$lollipop</span><span class=\"sy0\">.</span><span class=\"me1\">mine</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsleep <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"co1\"># lick at least once</span><br/>\t\t<span class=\"kw3\">say</span> <span class=\"st0\">\"$n lost lollipop to $lollipop.yours(), now digesting\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tdally <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    sink await <span class=\"re0\">@philosophers</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 49, "block": "<pre class=\"text highlighted_source\">integer fork1 = init_cs(),<br/>        fork2 = init_cs(),<br/>        fork3 = init_cs(),<br/>        fork4 = init_cs(),<br/>        fork5 = init_cs()<br/>integer terminate = 0                   -- control flag<br/>\u00a0<br/>procedure person(sequence name, atom left_fork, atom right_fork)<br/>-- (except Russell, who gets left and right the other way round)<br/>    while terminate=0 do<br/>        enter_cs(left_fork)<br/>        enter_cs(right_fork)<br/>        puts(1, name &amp; \" grabs forks.\\n\")<br/>        for i=1 to rand(10) do<br/>--          if terminate then exit end if<br/>            puts(1, name &amp; \" is eating.\\n\")<br/>--          sleep(1)<br/>        end for<br/>        puts(1, name &amp; \" puts forks down and leaves the dinning room.\\n\")<br/>        leave_cs(left_fork)<br/>        leave_cs(right_fork)<br/>        for i=1 to rand(10) do<br/>--          if terminate then exit end if<br/>            puts(1, name &amp; \" is thinking.\\n\")<br/>--          sleep(1)<br/>        end for<br/>        puts(1, name &amp; \" becomes hungry.\\n\")<br/>    end while<br/>end procedure<br/>constant r_person = routine_id(\"person\")<br/>\u00a0<br/>constant threads = {create_thread(r_person,{\"Aristotle\",fork1,fork2}),<br/>                    create_thread(r_person,{\"Kant\",fork2,fork3}),<br/>                    create_thread(r_person,{\"Spinoza\",fork3,fork4}),<br/>                    create_thread(r_person,{\"Marx\",fork4,fork5}),<br/>--                  create_thread(r_person,{\"Russell\",fork5,fork1})}    -- this will deadlock!<br/>                    create_thread(r_person,{\"Russell\",fork1,fork5})}<br/>\u00a0<br/>constant ESC = #1B<br/>while not find(get_key(),{ESC,'q','Q'}) do<br/>    sleep(1)<br/>end while<br/>terminate = 1<br/>wait_thread(threads)    -- (not strictly necessary)<br/>delete_cs(fork1)        -- \"\"<br/>delete_cs(fork2)<br/>delete_cs(fork3)<br/>delete_cs(fork4)<br/>delete_cs(fork5)</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(de dining (Name State)<br/>   (loop<br/>      (prinl Name \": \" State)<br/>      (state 'State                       # Dispatch according to state<br/>         (thinking 'hungry)               # If thinking, get hungry<br/>         (hungry                          # If hungry, grab random fork<br/>            (if (rand T)<br/>               (and (acquire leftFork) 'leftFork)<br/>               (and (acquire rightFork) 'rightFork) ) )<br/>         (hungry 'hungry                  # Failed, stay hungry for a while<br/>            (wait (rand 1000 3000)) )<br/>         (leftFork                        # If holding left fork, try right one<br/>            (and (acquire rightFork) 'eating)<br/>            (wait 2000) )                 # then eat for 2 seconds<br/>         (rightFork                       # If holding right fork, try left one<br/>            (and (acquire leftFork) 'eating)<br/>            (wait 2000) )                 # then eat for 2 seconds<br/>         ((leftFork rightFork) 'hungry    # Otherwise, go back to hungry,<br/>            (release (val State))         # release left or right fork<br/>            (wait (rand 1000 3000)) )     # and stay hungry<br/>         (eating 'thinking             # After eating, resume thinking<br/>            (release leftFork)<br/>            (release rightFork)<br/>            (wait 6000) ) ) ) )           # for 6 seconds<br/>\u00a0<br/>(setq *Philosophers<br/>   (maplist<br/>      '((Phils Forks)<br/>         (let (leftFork (tmp (car Forks))  rightFork (tmp (cadr Forks)))<br/>            (or<br/>               (fork)  # Parent: Collect child process IDs<br/>               (dining (car Phils) 'hungry) ) ) )  # Initially hungry<br/>      '(\"Aristotle\" \"Kant\" \"Spinoza\" \"Marx\" \"Russell\")<br/>      '(\"ForkA\" \"ForkB\" \"ForkC\" \"ForkD\" \"ForkE\" .) ) )<br/>\u00a0<br/>(push '*Bye '(mapc kill *Philosophers))  # Terminate all upon exit</pre>"}, {"lang": "Pike", "loc": 94, "block": "<pre class=\"pike highlighted_source\">class Philosopher<br/><span class=\"br0\">{</span> <br/>    string name<span class=\"sy0\">;</span><br/>    object left<span class=\"sy0\">;</span><br/>    object right<span class=\"sy0\">;</span><br/>\u00a0<br/>    void create<span class=\"br0\">(</span>string _name, object _left, object _right<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        name <span class=\"sy0\">=</span> _name<span class=\"sy0\">;</span><br/>        left <span class=\"sy0\">=</span> _left<span class=\"sy0\">;</span><br/>        right <span class=\"sy0\">=</span> _right<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    void take_forks<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>&gt;take<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> right<span class=\"sy0\">-</span>&gt;take<span class=\"br0\">(</span>this<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s is EATING<span class=\"es0\">\\n</span>\"</span>, name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            call_out<span class=\"br0\">(</span>drop_forks, random<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s is WAITING<span class=\"es0\">\\n</span>\"</span>, name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>random<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                drop_forks<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            call_out<span class=\"br0\">(</span>take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    void drop_forks<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        left<span class=\"sy0\">-</span>&gt;drop<span class=\"br0\">(</span>this<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        right<span class=\"sy0\">-</span>&gt;drop<span class=\"br0\">(</span>this<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"%s is THINKING<span class=\"es0\">\\n</span>\"</span>, name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        call_out<span class=\"br0\">(</span>take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>class Fork<br/><span class=\"br0\">{</span><br/>    int number<span class=\"sy0\">;</span><br/>    Philosopher user<span class=\"sy0\">;</span><br/>\u00a0<br/>    void create<span class=\"br0\">(</span>int _number<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        number <span class=\"sy0\">=</span> _number<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    int take<span class=\"br0\">(</span>object new_user<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>user<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s takes fork\u00a0%d<span class=\"es0\">\\n</span>\"</span>, new_user<span class=\"sy0\">-</span>&gt;name, number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            user <span class=\"sy0\">=</span> new_user<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>new_user <span class=\"sy0\">==</span> user<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s has fork\u00a0%d<span class=\"es0\">\\n</span>\"</span>, new_user<span class=\"sy0\">-</span>&gt;name, number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s tries to take fork\u00a0%d from\u00a0%s<span class=\"es0\">\\n</span>\"</span>, new_user<span class=\"sy0\">-</span>&gt;name, number, user<span class=\"sy0\">-</span>&gt;name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    void drop<span class=\"br0\">(</span>object old_user<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>old_user <span class=\"sy0\">==</span> user<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"%s drops fork\u00a0%d<span class=\"es0\">\\n</span>\"</span>, old_user<span class=\"sy0\">-</span>&gt;name, number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            user <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>int main<span class=\"br0\">(</span>int argc, array argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/>  array forks <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Fork<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Fork<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, Fork<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, Fork<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  array philosophers <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> <br/>                           Philosopher<span class=\"br0\">(</span><span class=\"st0\">\"einstein\"</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <br/>                           Philosopher<span class=\"br0\">(</span><span class=\"st0\">\"plato\"</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <br/>                           Philosopher<span class=\"br0\">(</span><span class=\"st0\">\"sokrates\"</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <br/>                           Philosopher<span class=\"br0\">(</span><span class=\"st0\">\"chomsky\"</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <br/>                           Philosopher<span class=\"br0\">(</span><span class=\"st0\">\"archimedes\"</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <br/>                        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  call_out<span class=\"br0\">(</span>philosophers<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>&gt;take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  call_out<span class=\"br0\">(</span>philosophers<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>&gt;take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  call_out<span class=\"br0\">(</span>philosophers<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>&gt;take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  call_out<span class=\"br0\">(</span>philosophers<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>&gt;take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  call_out<span class=\"br0\">(</span>philosophers<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>&gt;take_forks, random<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 450, "block": "<pre class=\"prolog highlighted_source\">dining_philosophers <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Dining philosophers'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Dining philosophers\u00a0: statistics'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">800</span><span class=\"sy4\">,</span><span class=\"nu0\">800</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> ellipse<span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy4\">,</span><span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy4\">,</span><span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> E<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>F1<span class=\"sy4\">,</span> fork<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>F2<span class=\"sy4\">,</span> fork<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>F3<span class=\"sy4\">,</span> fork<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>F4<span class=\"sy4\">,</span> fork<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>F5<span class=\"sy4\">,</span> fork<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend_list<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> <span class=\"br0\">[</span>F1<span class=\"sy4\">,</span>F2<span class=\"sy4\">,</span>F3<span class=\"sy4\">,</span>F4<span class=\"sy4\">,</span>F5<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>Waiter<span class=\"sy4\">,</span> waiter<span class=\"br0\">(</span>F1<span class=\"sy4\">,</span> F2<span class=\"sy4\">,</span> F3<span class=\"sy4\">,</span> F4<span class=\"sy4\">,</span> F5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tcreate_plate<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_plate<span class=\"br0\">(</span>P2<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_plate<span class=\"br0\">(</span>P3<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_plate<span class=\"br0\">(</span>P4<span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_plate<span class=\"br0\">(</span>P5<span class=\"sy4\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tcreate_point<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Pt1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_point<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Pt2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_point<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Pt3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_point<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span> Pt4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_point<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span> Pt5<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\u00a0<br/>\tnew<span class=\"br0\">(</span>Ph1<span class=\"sy4\">,</span> philosopher<span class=\"br0\">(</span><span class=\"st_h\">'Aristotle'</span><span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> P1<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Pt1<span class=\"sy4\">,</span> left<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Ph2<span class=\"sy4\">,</span> philosopher<span class=\"br0\">(</span><span class=\"st_h\">'Kant'</span><span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> P2<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> Pt2<span class=\"sy4\">,</span> left<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Ph3<span class=\"sy4\">,</span> philosopher<span class=\"br0\">(</span><span class=\"st_h\">'Spinoza'</span><span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> P3<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> Pt3<span class=\"sy4\">,</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Ph4<span class=\"sy4\">,</span> philosopher<span class=\"br0\">(</span><span class=\"st_h\">'Marx'</span><span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> P4<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> Pt4<span class=\"sy4\">,</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Ph5<span class=\"sy4\">,</span> philosopher<span class=\"br0\">(</span><span class=\"st_h\">'Russell'</span><span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> P5<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span> Pt5<span class=\"sy4\">,</span> left<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend<span class=\"br0\">(</span>Waiter<span class=\"sy4\">,</span> init_phi<span class=\"sy4\">,</span> Ph1<span class=\"sy4\">,</span> Ph2<span class=\"sy4\">,</span> Ph3<span class=\"sy4\">,</span> Ph4<span class=\"sy4\">,</span> Ph5<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend_list<span class=\"br0\">(</span><span class=\"br0\">[</span>Ph1<span class=\"sy4\">,</span> Ph2<span class=\"sy4\">,</span> Ph3<span class=\"sy4\">,</span> Ph4<span class=\"sy4\">,</span> Ph5<span class=\"br0\">]</span><span class=\"sy4\">,</span> start<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> done_message<span class=\"sy4\">,</span> and<span class=\"br0\">(</span>message<span class=\"br0\">(</span>Waiter<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>Ph1<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>Ph2<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>Ph3<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>Ph4<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>Ph5<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t message<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>create_plate<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> ellipse<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"sy4\">,</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">140</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">140</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>create_point<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">220</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">220</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">20</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>waiter <span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> \"gives the forks to the philosophers\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>f1<span class=\"sy4\">,</span> fork<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free or used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>f2<span class=\"sy4\">,</span> fork<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free or used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>f3<span class=\"sy4\">,</span> fork<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free or used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>f4<span class=\"sy4\">,</span> fork<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free or used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>f5<span class=\"sy4\">,</span> fork<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free or used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phi1<span class=\"sy4\">,</span> philosopher<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"philosopher\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phi2<span class=\"sy4\">,</span> philosopher<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"philosopher\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phi3<span class=\"sy4\">,</span> philosopher<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"philosopher\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phi4<span class=\"sy4\">,</span> philosopher<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"philosopher\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phi5<span class=\"sy4\">,</span> philosopher<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"philosopher\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> F1<span class=\"sy4\">,</span> F2<span class=\"sy4\">,</span> F3<span class=\"sy4\">,</span> F4<span class=\"sy4\">,</span> F5<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f1<span class=\"sy4\">,</span> F1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f2<span class=\"sy4\">,</span> F2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f3<span class=\"sy4\">,</span> F3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f4<span class=\"sy4\">,</span> F4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f5<span class=\"sy4\">,</span> F5<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init_phi<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi1<span class=\"sy4\">,</span>Phi2<span class=\"sy4\">,</span> Phi3<span class=\"sy4\">,</span> Phi4<span class=\"sy4\">,</span> Phi5<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi1<span class=\"sy4\">,</span> Phi1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi2<span class=\"sy4\">,</span> Phi2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi3<span class=\"sy4\">,</span> Phi3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi4<span class=\"sy4\">,</span> Phi4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi5<span class=\"sy4\">,</span> Phi5<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>want_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"br0\">(</span> get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi1<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span> <span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> f5<span class=\"sy4\">,</span> f1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi2<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> f1<span class=\"sy4\">,</span> f2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi3<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> f2<span class=\"sy4\">,</span> f3<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi4<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> f3<span class=\"sy4\">,</span> f4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi5<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> f4<span class=\"sy4\">,</span> f5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>give_back_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"br0\">(</span> get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi1<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span> <span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi2<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi3<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi3<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi4<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi5<span class=\"sy4\">,</span> Phi<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi1<span class=\"sy4\">,</span> Phi1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcheck_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi1<span class=\"sy4\">,</span> f5<span class=\"sy4\">,</span> f1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi2<span class=\"sy4\">,</span> Phi2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcheck_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi2<span class=\"sy4\">,</span> f1<span class=\"sy4\">,</span> f2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi3<span class=\"sy4\">,</span> Phi3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcheck_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi3<span class=\"sy4\">,</span> f2<span class=\"sy4\">,</span> f3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi4<span class=\"sy4\">,</span> Phi4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcheck_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi4<span class=\"sy4\">,</span> f3<span class=\"sy4\">,</span> f4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phi5<span class=\"sy4\">,</span> Phi5<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcheck_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi5<span class=\"sy4\">,</span> f4<span class=\"sy4\">,</span> f5<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f5<span class=\"sy4\">,</span> F5<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F5<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f1<span class=\"sy4\">,</span> F1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F1<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f1<span class=\"sy4\">,</span> F1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F1<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f2<span class=\"sy4\">,</span> F2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F2<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi3<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f2<span class=\"sy4\">,</span> F2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F2<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f3<span class=\"sy4\">,</span> F3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F3<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi4<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f3<span class=\"sy4\">,</span> F3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F3<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f4<span class=\"sy4\">,</span> F4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F4<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>release_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> phi5<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f4<span class=\"sy4\">,</span> F4<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F4<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> f5<span class=\"sy4\">,</span> F5<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>F5<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>check_forks<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Phi<span class=\"sy4\">,</span> F1<span class=\"sy4\">,</span> F2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> F1<span class=\"sy4\">,</span> FF1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> F2<span class=\"sy4\">,</span> FF2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">(</span>get<span class=\"br0\">(</span>Phi<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> waiting<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t     get<span class=\"br0\">(</span>FF1<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t     get<span class=\"br0\">(</span>FF2<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t     send<span class=\"br0\">(</span>Phi<span class=\"sy4\">,</span> receive_forks<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t     send<span class=\"br0\">(</span>FF1<span class=\"sy4\">,</span> used<span class=\"sy4\">,</span> right<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t     send<span class=\"br0\">(</span>FF2<span class=\"sy4\">,</span> used<span class=\"sy4\">,</span> left<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span><br/>\t     <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>philosopher <span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> \"eat<span class=\"sy4\">,</span> think or wait <span class=\"sy5\">!</span>\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>name<span class=\"sy4\">,</span> string<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>window<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>status<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"eating<span class=\"sy3\">/</span>thinking<span class=\"sy3\">/</span>waiting\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>waiter<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>plate<span class=\"sy4\">,</span>  object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>mytimer<span class=\"sy4\">,</span> timer<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>pos<span class=\"sy4\">,</span> point<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>side<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>old_text<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>window_stat<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>line_stat<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>stat_wait<span class=\"sy4\">,</span> my_stat<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>stat_eat<span class=\"sy4\">,</span> my_stat<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>stat_think<span class=\"sy4\">,</span> my_stat<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% m\u00e9thode appel\u00e9e lors de la destruction de l'objet</span><br/><span class=\"co1\">% On arr\u00eate d'abord le timer pour poursuivre ensuite</span><br/><span class=\"co1\">% sans probl\u00e8me (appel par le timer de ressources lib\u00e9r\u00e9es)</span><br/>unlink<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P?mytimer<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> Sta<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstop_timer<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Sta<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window_stat<span class=\"sy4\">,</span> WS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> line_stat<span class=\"sy4\">,</span> LS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>LS<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> VLS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsformat<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"st_h\">'Statistics of philosopher\u00a0: ~w'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> text<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span> font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VLS <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>WS<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Text<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tVLS1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VLS<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> ST<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ST<span class=\"sy4\">,</span> statistics<span class=\"sy4\">,</span> WS<span class=\"sy4\">,</span> VLS1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tVLS2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VLS<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_eat<span class=\"sy4\">,</span> SE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SE<span class=\"sy4\">,</span> statistics<span class=\"sy4\">,</span> WS<span class=\"sy4\">,</span> VLS2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tVLS3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VLS<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_wait<span class=\"sy4\">,</span> SW<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SW<span class=\"sy4\">,</span> statistics<span class=\"sy4\">,</span> WS<span class=\"sy4\">,</span> VLS3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> unlink<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Name<span class=\"sy4\">,</span> Waiter<span class=\"sy4\">,</span> Plate<span class=\"sy4\">,</span> Window<span class=\"sy4\">,</span> Window_stat<span class=\"sy4\">,</span> Line_stat<span class=\"sy4\">,</span> Point<span class=\"sy4\">,</span> Side<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"co1\">% gtrace,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> Window<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window_stat<span class=\"sy4\">,</span> Window_stat<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tLine <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Line_stat <span class=\"sy3\">*</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> line_stat<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> waiter<span class=\"sy4\">,</span>Waiter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> plate<span class=\"sy4\">,</span>Plate<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> thinking<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> pos<span class=\"sy4\">,</span> Point<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> side<span class=\"sy4\">,</span> Side<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Window<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Plate<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> old_text<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> text<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> display_status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_wait<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> my_stat<span class=\"br0\">(</span><span class=\"st_h\">'Waiting'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_eat<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> my_stat<span class=\"br0\">(</span><span class=\"st_h\">'Eating'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> my_stat<span class=\"br0\">(</span><span class=\"st_h\">'Thinking'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>stop_timer<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> eating<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_eat<span class=\"sy4\">,</span> SE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SE<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>stop_timer<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> waiting<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_wait<span class=\"sy4\">,</span> SW<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SW<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>stop_timer<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> thinking<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> ST<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ST<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% internal message send by the timer</span><br/>my_message<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"co1\">% gtrace,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnext_status<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% philosopher eating ==&gt; thinking</span><br/>next_status<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> eating<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> waiter<span class=\"sy4\">,</span> Waiter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_eat<span class=\"sy4\">,</span> SE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SE<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> ST<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ST<span class=\"sy4\">,</span> start<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Waiter<span class=\"sy4\">,</span> give_back_forks<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> thinking<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> display_status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> plate<span class=\"sy4\">,</span> Plate<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Plate<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>white<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy3\">+</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mytimer<span class=\"sy4\">,</span> Timer<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Timer<span class=\"sy4\">,</span> interval<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Timer<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">once</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>next_status<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> thinking<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> waiter<span class=\"sy4\">,</span> Waiter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> waiting<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> display_status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> ST<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ST<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_wait<span class=\"sy4\">,</span> SW<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SW<span class=\"sy4\">,</span> start<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Waiter<span class=\"sy4\">,</span> want_forks<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% send by the waiter</span><br/><span class=\"co1\">% philosopher can eat\u00a0!</span><br/>receive_forks<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_wait<span class=\"sy4\">,</span> SW<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SW<span class=\"sy4\">,</span> stop<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_eat<span class=\"sy4\">,</span> SE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>SE<span class=\"sy4\">,</span> start<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> eating<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> display_status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> plate<span class=\"sy4\">,</span> Plate<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Plate<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>black<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy3\">+</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mytimer<span class=\"sy4\">,</span> Timer<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Timer<span class=\"sy4\">,</span> interval<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Timer<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">once</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display_status<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> old_text<span class=\"sy4\">,</span> OT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfree<span class=\"br0\">(</span>OT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> Status<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tchoose_color<span class=\"br0\">(</span>Status<span class=\"sy4\">,</span> Colour<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsformat<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"st_h\">'~w ~w'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy4\">,</span> Status<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> W<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> pos<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> text<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span> font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> Colour<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> string<span class=\"sy4\">,</span> Str<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> width<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> side<span class=\"sy4\">,</span> right<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> X1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">-</span> M<span class=\"sy4\">;</span> X1 <span class=\"sy6\">=</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Text<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> old_text<span class=\"sy4\">,</span> Text<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>start<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> stat_think<span class=\"sy4\">,</span> ST<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ST<span class=\"sy4\">,</span> start<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> mytimer<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> timer<span class=\"br0\">(</span>I<span class=\"sy4\">,</span>message<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> my_message<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P?mytimer<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">once</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>choose_color<span class=\"br0\">(</span>eating<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>blue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>choose_color<span class=\"br0\">(</span>thinking<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>green<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>choose_color<span class=\"br0\">(</span>waiting<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span>red<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>disk<span class=\"sy4\">,</span> ellipse<span class=\"sy4\">,</span> \"disk with color \"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>        send<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> initialise<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> pen<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>change_color<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>my_stat <span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> \"statistics\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>name<span class=\"sy4\">,</span> string<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>nb<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>duration<span class=\"sy4\">,</span> real<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>start<span class=\"sy4\">,</span> real<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> duration<span class=\"sy4\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>start<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget_time<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>stop<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget_time<span class=\"br0\">(</span>Fin<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> plus<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> duration<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> Deb<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tget<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> VD<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Deb<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> VDeb<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> VD <span class=\"sy3\">+</span> Fin <span class=\"sy3\">-</span> VDeb<span class=\"sy4\">,</span><br/>\u00a0<br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> duration<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>statistics<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> VN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> duration<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> VD<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> Name<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsformat<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"st_h\">'~w~tnb\u00a0:~13| ~t~w~17| duration\u00a0: ~t~1f~35|'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy4\">,</span> VN<span class=\"sy4\">,</span> VD<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> text<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Text<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span> font<span class=\"br0\">(</span>screen<span class=\"sy4\">,</span> roman<span class=\"sy4\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">*</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Text<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span>pce_end_class<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% forks changes of place</span><br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>fork<span class=\"sy4\">,</span> line<span class=\"sy4\">,</span> \"to help philosopphers to eat\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>value<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"<span class=\"nu0\">0</span> <span class=\"sy6\">=&gt;</span> <span class=\"nu0\">4</span>\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>side<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"br0\">)</span><span class=\"sy4\">,</span> \"left <span class=\"sy3\">/</span> right\"<span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>status<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"free <span class=\"sy3\">/</span> used\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend_super<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> initialise<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcompute<span class=\"br0\">(</span>Val<span class=\"sy4\">,</span> free<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> PS<span class=\"sy4\">,</span> PE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> PS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> end<span class=\"sy4\">,</span> PE<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>free<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> position<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>used<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Side<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> used<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> side<span class=\"sy4\">,</span> Side<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> position<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>position<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> value<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> St<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> side<span class=\"sy4\">,</span> Side<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcompute<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> St<span class=\"sy4\">,</span> Side<span class=\"sy4\">,</span> PS<span class=\"sy4\">,</span> PE<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> start<span class=\"sy4\">,</span> PS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> end<span class=\"sy4\">,</span> PE<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>compute<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> free<span class=\"sy4\">,</span> _Side<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XS<span class=\"sy4\">,</span>YS<span class=\"br0\">)</span><span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XE<span class=\"sy4\">,</span>YE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tA <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span> <span class=\"sy3\">+</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\tXS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>compute<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> used<span class=\"sy4\">,</span> left<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XS<span class=\"sy4\">,</span>YS<span class=\"br0\">)</span><span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XE<span class=\"sy4\">,</span>YE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tA <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span> <span class=\"sy3\">+</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">5</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">15</span><span class=\"sy4\">,</span><br/>\tXS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>compute<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> used<span class=\"sy4\">,</span> right<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XS<span class=\"sy4\">,</span>YS<span class=\"br0\">)</span><span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XE<span class=\"sy4\">,</span>YE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tA <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">2.5</span> <span class=\"sy3\">+</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">5</span> <span class=\"sy3\">+</span>  <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">15</span><span class=\"sy4\">,</span><br/>\tXS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYE <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">400</span> <span class=\"sy3\">+</span> <span class=\"nu0\">180</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 117, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> Tell<span class=\"br0\">(</span>Mutex, Message<span class=\"br0\">)</span> <span class=\"co1\">; Make a macro to easy send info back to main thread</span><br/>  <span class=\"kw2\">LockMutex</span><span class=\"br0\">(</span>Mutex<span class=\"br0\">)</span><br/>    <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>Queue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Queue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Queue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Message<br/>    SignalSemaphore<span class=\"br0\">(</span>Semaphore<span class=\"br0\">)</span><br/>  <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex<span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"co1\">;Set up a data structure to pass needed info into the threads</span><br/><span class=\"kw1\">Structure</span> Thread_Parameters<br/>  Name.s<br/>  fork1.i<br/>  fork2.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"co1\">; Declare function to be used</span><br/><span class=\"kw1\">Declare</span>.i TryFork<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span>   PutDownFork<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span>   Invite<span class=\"br0\">(</span>Namn.s, Fork1, Fork2<span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span>   _philosophers<span class=\"br0\">(</span><span class=\"sy0\">*</span>arg.Thread_Parameters<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Global</span> Semaphore <span class=\"sy0\">=</span> CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Global</span> Mutex1     <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Eg. fork 1</span><br/><span class=\"kw1\">Global</span> Mutex2     <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Eg. fork 2</span><br/><span class=\"kw1\">Global</span> Mutex3     <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Eg. fork 3</span><br/><span class=\"kw1\">Global</span> Mutex4     <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Eg. fork 4</span><br/><span class=\"kw1\">Global</span> Mutex5     <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; Eg. fork 5</span><br/><span class=\"kw1\">Global</span> Mutex_main <span class=\"sy0\">=</span> <span class=\"kw2\">CreateMutex</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">; locking communication with the main thread which do all output.</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">NewList</span> Queue.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  Invite<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"co1\">; Get all Philosophers activated</span><br/>  Invite<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span>,     <span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  Invite<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span>,  <span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  Invite<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span>,     <span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  Invite<span class=\"br0\">(</span><span class=\"st0\">\"Russell\"</span>,  <span class=\"nu0\">5</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CompilerIf</span> #PB_Compiler_OS<span class=\"sy0\">=</span>#PB_OS_Windows<br/>    SetConsoleTitle_<span class=\"br0\">(</span><span class=\"st0\">\"Dining philosophers, by Jofur\"</span><span class=\"br0\">)</span>   <span class=\"co1\">; Using a Windows-API here, so checking before</span><br/>  <span class=\"kw1\">CompilerEndIf</span><br/>  <span class=\"co1\">; Wait and see if any Philosophers want to tell me anything</span><br/>  <span class=\"kw1\">Repeat</span><br/>    WaitSemaphore<span class=\"br0\">(</span>Semaphore<span class=\"br0\">)</span><br/>    <span class=\"kw2\">LockMutex</span><span class=\"br0\">(</span>Mutex_main<span class=\"br0\">)</span><br/>      <span class=\"kw1\">ForEach</span> Queue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span> Queue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"co1\">; Print what the Philosopher(s) told me</span><br/>        i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Next</span> Queue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>Queue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex_main<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> TryFork<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\">; Se is fork #n is free and if so pick it up</span><br/>  <span class=\"kw1\">Select</span> n<br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">TryLockMutex</span><span class=\"br0\">(</span>Mutex1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">TryLockMutex</span><span class=\"br0\">(</span>Mutex2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">3</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">TryLockMutex</span><span class=\"br0\">(</span>Mutex3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">TryLockMutex</span><span class=\"br0\">(</span>Mutex4<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Default</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">TryLockMutex</span><span class=\"br0\">(</span>Mutex5<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndSelect</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> PutDownFork<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">; put down fork #n and free it to be used by neighbors. </span><br/>  <span class=\"kw1\">Select</span> n<br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span>: <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span>: <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">3</span>: <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">4</span>: <span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex4<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Default</span>:<span class=\"kw2\">UnlockMutex</span><span class=\"br0\">(</span>Mutex5<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndSelect</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Invite<span class=\"br0\">(</span>Namn.s, Fork1, Fork2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>arg.Thread_Parameters <span class=\"co1\">;create the structure containing the parameters</span><br/>  <span class=\"kw1\">Protected</span> Thread<br/>  <span class=\"sy0\">*</span>arg <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Thread_Parameters<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>arg<span class=\"sy0\">\\</span>Name <span class=\"sy0\">=</span> Namn<br/>  <span class=\"sy0\">*</span>arg<span class=\"sy0\">\\</span>fork1 <span class=\"sy0\">=</span> Fork1<br/>  <span class=\"sy0\">*</span>arg<span class=\"sy0\">\\</span>fork2 <span class=\"sy0\">=</span> Fork2<br/>  Thread<span class=\"sy0\">=</span><span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@_philosophers<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy0\">*</span>arg<span class=\"br0\">)</span> <span class=\"co1\">;send the thread a pointer to our structure</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Thread<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> _philosophers<span class=\"br0\">(</span><span class=\"sy0\">*</span>arg.Thread_Parameters<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Iam.s<span class=\"sy0\">=*</span>arg<span class=\"sy0\">\\</span>Name, j<span class=\"sy0\">=*</span>arg<span class=\"sy0\">\\</span>fork1, k<span class=\"sy0\">=*</span>arg<span class=\"sy0\">\\</span>fork2<br/>  <span class=\"kw1\">Protected</span> f1, f2<br/>  ClearStructure<span class=\"br0\">(</span><span class=\"sy0\">*</span>arg, Thread_Parameters<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FreeMemory</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>arg<span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw1\">Repeat</span><br/>    Tell<span class=\"br0\">(</span>Mutex_main,Iam<span class=\"sy0\">+</span><span class=\"st0\">\": Going to the table\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Repeat</span>          <span class=\"co1\">;Trying to get my two forks</span><br/>      f1<span class=\"sy0\">=</span>TryFork<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> f1<br/>        f2<span class=\"sy0\">=</span>TryFork<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> f2   <span class=\"co1\">; I got only one fork  </span><br/>          PutDownFork<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>          f1<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> f2<br/>        <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; Take a short breath, then try the forks in the other order</span><br/>        <span class=\"kw1\">Swap</span> j,k<br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Until</span> f1 <span class=\"kw1\">And</span> f2<br/>    Tell<span class=\"br0\">(</span>Mutex_main,Iam<span class=\"sy0\">+</span><span class=\"st0\">\": I have fork #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" &amp; #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" and I'm eating now\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">1500</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    Tell<span class=\"br0\">(</span>Mutex_main,Iam<span class=\"sy0\">+</span><span class=\"st0\">\": release fork #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" &amp; #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    PutDownFork<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>    PutDownFork<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>    f1<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:f2<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    Tell<span class=\"br0\">(</span>Mutex_main,Iam<span class=\"sy0\">+</span><span class=\"st0\">\": Thinking about the nature of the universe...\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">2500</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 67, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">threading</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/>\u00a0<br/><span class=\"co1\"># Dining philosophers, 5 Phillies with 5 forks. Must have two forks to eat.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Deadlock is avoided by never waiting for a fork while holding a fork (locked)</span><br/><span class=\"co1\"># Procedure is to do block while waiting to get first fork, and a nonblocking</span><br/><span class=\"co1\"># acquire of second fork.  If failed to get second fork, release first fork,</span><br/><span class=\"co1\"># swap which fork is first and which is second and retry until getting both.</span><br/><span class=\"co1\">#  </span><br/><span class=\"co1\"># See discussion page note about 'live lock'.</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Philosopher<span class=\"br0\">(</span><span class=\"kw3\">threading</span>.<span class=\"me1\">Thread</span><span class=\"br0\">)</span>:<br/>\u00a0<br/>    running <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> xname<span class=\"sy0\">,</span> forkOnLeft<span class=\"sy0\">,</span> forkOnRight<span class=\"br0\">)</span>:<br/>        <span class=\"kw3\">threading</span>.<span class=\"me1\">Thread</span>.<span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> xname<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">forkOnLeft</span> <span class=\"sy0\">=</span> forkOnLeft<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">forkOnRight</span> <span class=\"sy0\">=</span> forkOnRight<br/>\u00a0<br/>    <span class=\"kw1\">def</span> run<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">running</span><span class=\"br0\">)</span>:<br/>            <span class=\"co1\">#  Philosopher is thinking (but really is sleeping).</span><br/>            <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span> <span class=\"kw3\">random</span>.<span class=\"me1\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">'%s is hungry.'</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">name</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">dine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> dine<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        fork1<span class=\"sy0\">,</span> fork2 <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">forkOnLeft</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">forkOnRight</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">self</span>.<span class=\"me1\">running</span>:<br/>            fork1.<span class=\"me1\">acquire</span><span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>            locked <span class=\"sy0\">=</span> fork2.<span class=\"me1\">acquire</span><span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> locked: <span class=\"kw1\">break</span><br/>            fork1.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">'%s swaps forks'</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">name</span><br/>            fork1<span class=\"sy0\">,</span> fork2 <span class=\"sy0\">=</span> fork2<span class=\"sy0\">,</span> fork1<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">return</span><br/>\u00a0<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">dining</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        fork2.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        fork1.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> dining<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\t\t\t<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'%s starts eating '</span>% <span class=\"kw2\">self</span>.<span class=\"me1\">name</span><br/>        <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'%s finishes eating and leaves to think.'</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">name</span><br/>\u00a0<br/><span class=\"kw1\">def</span> DiningPhilosophers<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    forks <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw3\">threading</span>.<span class=\"me1\">Lock</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    philosopherNames <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'Aristotle'</span><span class=\"sy0\">,</span><span class=\"st0\">'Kant'</span><span class=\"sy0\">,</span><span class=\"st0\">'Buddha'</span><span class=\"sy0\">,</span><span class=\"st0\">'Marx'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Russel'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    philosophers<span class=\"sy0\">=</span> <span class=\"br0\">[</span>Philosopher<span class=\"br0\">(</span>philosopherNames<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> forks<span class=\"br0\">[</span>i%<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> forks<span class=\"br0\">[</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>%<span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> \\<br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw3\">random</span>.<span class=\"me1\">seed</span><span class=\"br0\">(</span><span class=\"nu0\">507129</span><span class=\"br0\">)</span><br/>    Philosopher.<span class=\"me1\">running</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> philosophers: p.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    Philosopher.<span class=\"me1\">running</span> <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Now we're finishing.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>DiningPhilosophers<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 89, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Racket has traditional semaphores in addition to several higher level<br/>;; synchronization tools.  (Note that these semaphores are used for Racket's<br/>;; green-threads, there are also \"future semaphores\" which are used for OS<br/>;; threads, with a similar interface.)<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; First, a bunch of code to run the experiments below<br/>\u00a0<br/>;; Only two philosophers to make it deadlock very fast<br/>(define philosophers '(Aristotle Kant #|Spinoza Marx Russell|#))<br/>\u00a0<br/>(define (run-philosopher name fork1 fork2)<br/>  (define (show what) (displayln (~a name \" \" what)))<br/>  (define (loop)<br/>    (show \"thinks\") (sleep (* 2 (random))) (show \"is hungry\")<br/>    (grab-forks fork1 fork2 (\u03bb() (show \"eats\") (sleep (random))))<br/>    (loop))<br/>  (thread loop))<br/>\u00a0<br/>(define (run:simple)<br/>  (define forks (for/list ([i philosophers]) (make-semaphore 1)))<br/>  (for ([i philosophers] [fork1 forks] [fork2 (cons (last forks) forks)])<br/>    (run-philosopher i fork1 fork2))<br/>  (sleep (* 60 60 24 365)))<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; This is the naive implementation, which can be used to try getting a<br/>;; deadlock.<br/>\u00a0<br/>(define (grab:naive fork1 fork2 eat!)<br/>  (semaphore-wait fork1)<br/>  (sleep (random))\u00a0; to make deadlocks probable<br/>  (semaphore-wait fork2)<br/>  (eat!)<br/>  (semaphore-post fork1)<br/>  (semaphore-post fork2))<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; One way to solve it is to release the first fork if the second is busy and<br/>;; wait for a while.<br/>\u00a0<br/>(define (grab:release+wait fork1 fork2 eat!)<br/>  (semaphore-wait fork1)<br/>  (if (not (semaphore-try-wait? fork2))<br/>   \u00a0;; couldn't grab the second fork, so release the first and wait<br/>    (begin (semaphore-post fork1)<br/>           (sleep (random))<br/>           (grab-forks fork1 fork2))\u00a0; can swap them to improve chances<br/>   \u00a0;; we have both forks<br/>    (begin (eat!)<br/>           (semaphore-post fork1)<br/>           (semaphore-post fork2))))<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; Another solution is to label the forks and lock the lowest-id one first,<br/>;; which makes the naive solution work.<br/>\u00a0<br/>(define (run:labeled-forks)<br/>  (define forks (for/list ([i philosophers]) (make-semaphore 1)))<br/> \u00a0;; the simple run used forks as (1 2 3 4) (4 1 2 3) -- so to implement this,<br/> \u00a0;; we can swap the two first ones: (4 2 3 4) (1 1 2 3)<br/>  (for ([i philosophers]<br/>        [fork1 (cons (last forks) (cdr forks))]<br/>        [fork2 (cons (first forks) forks)])<br/>    (run-philosopher i fork1 fork2))<br/>  (sleep (* 60 60 24 365)))<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; Homework: implement the centralized waiter solution<br/>\u00a0<br/>;; ...<br/>\u00a0<br/>;; ----------------------------------------------------------------------------<br/>;; Uncomment one of the following pairs to try it<br/>\u00a0<br/>;; (define grab-forks grab:naive)<br/>;; (define run run:simple)<br/>\u00a0<br/>;; (define grab-forks grab:release+wait)<br/>;; (define run run:simple)<br/>\u00a0<br/>;; (define grab-forks grab:naive)<br/>;; (define run run:labeled-forks)<br/>\u00a0<br/>(run)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 48, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates a solution in solving the  dining philosophers problem.     */</span><br/><span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">halt</span>                                   <span class=\"coMULTI\">/*branches to  HALT:   (on Ctrl\u2500break).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> seed diners                            <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,, seed <span class=\"coMULTI\">/*this allows for random repeatability.*/</span><br/><span class=\"kw1\">if</span> diners= <span class=\"st0\">''</span>           <span class=\"kw3\">then</span> diners = <span class=\"st0\">'Aristotle, Kant, Spinoza, Marx, Russell'</span><br/>  tell=<span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>seed, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"st0\">'+'</span><span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*Leading + in SEED? Then no statistics*/</span><br/>diners=<span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>diners, , <span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>         <span class=\"coMULTI\">/*change to an uncommatized diners list*/</span><br/>     #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>diners<span class=\"br0\">)</span>;      @<span class=\"sy0\">.</span>=  <span class=\"nu0\">0</span>                <span class=\"coMULTI\">/*#: the number of dining philosophers.*/</span><br/>  eatL=<span class=\"nu0\">15</span>;               eatH= <span class=\"nu0\">60</span>                <span class=\"coMULTI\">/*minimum &amp; maximum minutes for eating.*/</span><br/>thinkL=<span class=\"nu0\">30</span>;             thinkH=<span class=\"nu0\">180</span>                <span class=\"coMULTI\">/*   \"    \"    \"       \"     \" thinking*/</span><br/>forks<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>                                         <span class=\"coMULTI\">/*indicate that all forks are on table.*/</span><br/>          <span class=\"kw1\">do</span> tic=<span class=\"nu0\">1</span>         <span class=\"coMULTI\">/*'til halted.*/</span>      <span class=\"coMULTI\">/*use  \"minutes\"  for time advancement.*/</span><br/>          <span class=\"kw1\">call</span> grabForks                         <span class=\"coMULTI\">/*determine if anybody can grab 2 forks*/</span><br/>          <span class=\"kw1\">call</span> passTime                          <span class=\"coMULTI\">/*handle philosophers eating|thinking. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*tic*/</span>                          <span class=\"coMULTI\">/*     \u00b7\u00b7\u00b7 and time marches on \u00b7\u00b7\u00b7     */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]    this REXX program was halted,*/</span><br/><span class=\"kw2\">halt</span>: <span class=\"kw1\">say</span> <span class=\"st0\">'  \u00b7\u00b7\u00b7 REXX program halted!'</span>           <span class=\"coMULTI\">/*probably by Ctrl\u2500Break or equivalent.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fork: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> ox;  x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   L=x - <span class=\"nu0\">1</span>;    <span class=\"kw1\">if</span> L==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> L=#  <span class=\"coMULTI\">/*use \"round Robin\".*/</span><br/>      <span class=\"kw1\">if</span> ox<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  forks<span class=\"sy0\">.</span>L=<span class=\"nu0\">1</span>;  forks<span class=\"sy0\">.</span>x=<span class=\"nu0\">1</span>;  <span class=\"kw1\">return</span>;  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*drop the forks.   */</span><br/>      got2= forks<span class=\"sy0\">.</span>L <span class=\"sy0\">&amp;</span> forks<span class=\"sy0\">.</span>x                                       <span class=\"coMULTI\">/*get 2 forks or not*/</span><br/>      <span class=\"kw1\">if</span> got2  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  forks<span class=\"sy0\">.</span>L=<span class=\"nu0\">0</span>;  forks<span class=\"sy0\">.</span>x=<span class=\"nu0\">0</span>;           <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*obtained 2 forks. */</span><br/>      <span class=\"kw1\">return</span> got2                                <span class=\"coMULTI\">/*return with success  \u00b7\u00b7\u00b7 or failure. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>grabForks:   <span class=\"kw1\">do</span> person=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  #                 <span class=\"coMULTI\">/*see if any person can grab two forks.*/</span><br/>             <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>person<span class=\"sy0\">.</span>state<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*this diner ain't in a waiting state. */</span><br/>             <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>fork<span class=\"br0\">(</span>person<span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*this diner didn't grab two forks.    */</span><br/>             @<span class=\"sy0\">.</span>person<span class=\"sy0\">.</span>state= <span class=\"st0\">'eating'</span>            <span class=\"coMULTI\">/*this diner is slurping spaghetti.    */</span><br/>             @<span class=\"sy0\">.</span>person<span class=\"sy0\">.</span>dur=<span class=\"kw6\">random</span><span class=\"br0\">(</span>eatL, eatH<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*how long will this diner eat pasta\u00a0? */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*person*/</span>                    <span class=\"coMULTI\">/* [\u2191]  process the dining philosophers*/</span><br/>          <span class=\"kw1\">return</span>                                 <span class=\"coMULTI\">/*all the diners have been examined.   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>passTime: <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>                      <span class=\"coMULTI\">/*display a handy blank line separator.*/</span><br/>            <span class=\"kw1\">do</span> p=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                        <span class=\"coMULTI\">/*handle each of the diner's activity. */</span><br/>            <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>tic, <span class=\"nu0\">9</span>, <span class=\"sy0\">.</span><span class=\"br0\">)</span>           <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> diners, p<span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>,<br/>                      <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state <span class=\"st0\">'waiting'</span>,<span class=\"nu0\">1</span>+<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state==<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>         <span class=\"coMULTI\">/*this diner is waiting for two forks. */</span><br/>            @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur= @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur - <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*indicate single time unit has passed.*/</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>         <span class=\"coMULTI\">/*Activity done?   No, then keep it up.*/</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state==<span class=\"st0\">'eating'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                      <span class=\"coMULTI\">/*now, leave the table.*/</span><br/>                                         <span class=\"kw1\">call</span> fork  -p           <span class=\"coMULTI\">/*drop the darn forks. */</span><br/>                                         @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state= <span class=\"st0\">'thinking'</span>                 <span class=\"coMULTI\">/*status.*/</span><br/>                                         @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>dur=<span class=\"kw6\">random</span><span class=\"br0\">(</span>thinkL, thinkH<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*length.*/</span><br/>                                         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/* [\u2193]  a diner goes   \u2500\u2500\u25ba  the table. */</span><br/>                                    <span class=\"kw3\">else</span> <span class=\"kw1\">if</span>  @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state==<span class=\"st0\">'thinking'</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>state=<span class=\"nu0\">0</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p*/</span>                          <span class=\"coMULTI\">/*[\u2191]  P (person)\u2261 dining philosophers.*/</span><br/>          <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 70, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'mutex_m'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Philosopher<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>name, left_fork, right_fork<span class=\"br0\">)</span><br/>    <span class=\"re1\">@name</span> = name<br/>    <span class=\"re1\">@left_fork</span> = left_fork<br/>    <span class=\"re1\">@right_fork</span> = right_fork<br/>    <span class=\"re1\">@meals</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> go<br/>    <span class=\"kw1\">while</span> <span class=\"re1\">@meals</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><br/>      think<br/>      dine<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name is full!\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> think<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name is thinking...\"</span><br/>    <span class=\"kw3\">sleep</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name is hungry...\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> dine<br/>    fork1, fork2 = <span class=\"re1\">@left_fork</span>, <span class=\"re1\">@right_fork</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">true</span><br/>      pickup<span class=\"br0\">(</span>fork1, <span class=\"re3\">:wait</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name has fork #{fork1.fork_id}...\"</span><br/>      <span class=\"kw1\">if</span> pickup<span class=\"br0\">(</span>fork2, <span class=\"re3\">:wait</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">break</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name cannot pickup second fork #{fork2.fork_id}...\"</span><br/>      release<span class=\"br0\">(</span>fork1<span class=\"br0\">)</span><br/>      fork1, fork2 = fork2, fork1<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name has the second fork #{fork2.fork_id}...\"</span><br/>\u00a0<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name eats...\"</span><br/>    <span class=\"kw3\">sleep</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name belches\"</span><br/>    <span class=\"re1\">@meals</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>\u00a0<br/>    release<span class=\"br0\">(</span>@left_fork<span class=\"br0\">)</span><br/>    release<span class=\"br0\">(</span>@right_fork<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> pickup<span class=\"br0\">(</span><span class=\"kw3\">fork</span>, opt<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name attempts to pickup fork #{fork.fork_id}...\"</span><br/>    opt<span class=\"br0\">[</span><span class=\"re3\">:wait</span><span class=\"br0\">]</span>\u00a0? <span class=\"kw3\">fork</span>.<span class=\"me1\">mutex</span>.<span class=\"me1\">mu_lock</span>\u00a0: <span class=\"kw3\">fork</span>.<span class=\"me1\">mutex</span>.<span class=\"me1\">mu_try_lock</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> release<span class=\"br0\">(</span><span class=\"kw3\">fork</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"philosopher #@name releases fork #{fork.fork_id}...\"</span><br/>    <span class=\"kw3\">fork</span>.<span class=\"me1\">mutex</span>.<span class=\"me1\">unlock</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n = <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"kw3\">Fork</span> = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:fork_id</span>, <span class=\"re3\">:mutex</span><span class=\"br0\">)</span><br/>forks = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">Fork</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>i, <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span>.<span class=\"me1\">extend</span><span class=\"br0\">(</span>Mutex_m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>philosophers = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <br/>                 <span class=\"kw4\">Thread</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>i, forks<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, forks<span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>id, f1, f2<span class=\"sy0\">|</span><br/>                   ph = Philosopher.<span class=\"me1\">new</span><span class=\"br0\">(</span>id, f1, f2<span class=\"br0\">)</span>.<span class=\"me1\">go</span><br/>                 <span class=\"kw1\">end</span><br/>               <span class=\"kw1\">end</span><br/>\u00a0<br/>philosophers.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>thread<span class=\"sy0\">|</span> thread.<span class=\"me1\">join</span><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 63, "block": "<pre class=\"text highlighted_source\">use std::thread;<br/>use std::sync::{Mutex, Arc};<br/>\u00a0<br/>struct Philosopher {<br/>    name: String,<br/>    left: usize,<br/>    right: usize,<br/>}<br/>\u00a0<br/>impl Philosopher {<br/>    fn new(name: &amp;str, left: usize, right: usize) -&gt; Philosopher {<br/>        Philosopher {<br/>            name: name.to_string(),<br/>            left: left,<br/>            right: right,<br/>        }<br/>    }<br/>\u00a0<br/>    fn eat(&amp;self, table: &amp;Table) {<br/>        let _left = table.forks[self.left].lock().unwrap();<br/>        let _right = table.forks[self.right].lock().unwrap();<br/>\u00a0<br/>        println!(\"{} is eating.\", self.name);<br/>\u00a0<br/>        thread::sleep_ms(1000);<br/>\u00a0<br/>        println!(\"{} is done eating.\", self.name);<br/>    }<br/>}<br/>\u00a0<br/>struct Table {<br/>    forks: Vec&lt;Mutex&lt;()&gt;&gt;,<br/>}<br/>\u00a0<br/>fn main() {<br/>    let table = Arc::new(Table { forks: vec![<br/>        Mutex::new(()),<br/>        Mutex::new(()),<br/>        Mutex::new(()),<br/>        Mutex::new(()),<br/>        Mutex::new(()),<br/>    ]});<br/>\u00a0<br/>    let philosophers = vec![<br/>        Philosopher::new(\"Baruch Spinoza\", 0, 1),<br/>        Philosopher::new(\"Gilles Deleuze\", 1, 2),<br/>        Philosopher::new(\"Karl Marx\", 2, 3),<br/>        Philosopher::new(\"Friedrich Nietzsche\", 3, 4),<br/>        Philosopher::new(\"Michel Foucault\", 0, 4),<br/>    ];<br/>\u00a0<br/>    let handles: Vec&lt;_&gt; = philosophers.into_iter().map(|p| {<br/>        let table = table.clone();<br/>\u00a0<br/>        thread::spawn(move || {<br/>            p.eat(&amp;table);<br/>        })<br/>    }).collect();<br/>\u00a0<br/>    for h in handles {<br/>        h.join().unwrap();<br/>    }<br/>}</pre>"}, {"lang": "Smalltalk", "loc": 98, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"st0\">'From Squeak3.7 of '</span><span class=\"st0\">'4 September 2004'</span><span class=\"st0\">' [latest update: #5989] on 13 October 2011 at 2:44:42 pm'</span>!<br/><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Philosopher</span><br/>\tinstanceVariableNames: <span class=\"st0\">'table random name seat forks running'</span><br/>\tclassVariableNames: <span class=\"st0\">''</span><br/>\tpoolDictionaries: <span class=\"st0\">''</span><br/>\tcategory: <span class=\"st0\">'rosettacode'</span>!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>createfork<br/>\t^ <span class=\"re0\">Semaphore</span> forMutualExclusion!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>displayState: <span class=\"re5\">aStateName</span> <br/>\t<span class=\"re0\">Transcript</span> show: <span class=\"re5\">name</span> , <span class=\"st0\">' is '</span> , <span class=\"re5\">aStateName</span>;<br/>\t\t cr!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>pickUpForkAt: <span class=\"re5\">relativePosition</span> <br/>\t|<span class=\"re3\"> fork pos </span>|<br/>\t<span class=\"re6\">pos</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> tableIndex: <span class=\"re5\">seat</span> + <span class=\"re5\">relativePosition</span>.<br/>\t<span class=\"br0\">(</span><span class=\"re5\">fork</span> <span class=\"sy0\">:=</span> <span class=\"re5\">table</span> at: <span class=\"re5\">pos</span><span class=\"br0\">)</span><br/>\t\tifNotNil: <span class=\"br0\">[</span><span class=\"re5\">fork</span><br/>\t\t\t\tcritical: <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re5\">table</span> at: <span class=\"re5\">pos</span><span class=\"br0\">)</span> notNil<br/>\t\t\t\t\t\tifTrue: <span class=\"br0\">[</span><span class=\"re5\">table</span> at: <span class=\"re5\">pos</span> put: <span class=\"kw1\">nil</span><span class=\"br0\">]</span><br/>\t\t\t\t\t\tifFalse: <span class=\"br0\">[</span><span class=\"re5\">fork</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">nil</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>\t^ <span class=\"br0\">(</span><span class=\"re5\">forks</span> at: <span class=\"re5\">relativePosition</span> put: <span class=\"re5\">fork</span><span class=\"br0\">)</span> notNil!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>putBackForkAt: <span class=\"re5\">aRelativePosition</span> <br/>\t|<span class=\"re3\"> fork </span>|<br/>\t<span class=\"re6\">fork</span> <span class=\"sy0\">:=</span> <span class=\"re5\">forks</span> at: <span class=\"re5\">aRelativePosition</span>.<br/>\t<span class=\"re5\">fork</span><br/>\t\tifNotNil: <span class=\"br0\">[</span><span class=\"re5\">table</span><br/>\t\t\t\tat: <span class=\"br0\">(</span><span class=\"kw1\">self</span> tableIndex: <span class=\"re5\">seat</span> + <span class=\"re5\">aRelativePosition</span><span class=\"br0\">)</span><br/>\t\t\t\tput: <span class=\"re5\">fork</span>.<br/>\t\t\t<span class=\"re5\">forks</span> at: <span class=\"re5\">aRelativePosition</span> put: <span class=\"kw1\">nil</span><span class=\"br0\">]</span>!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>tableIndex: <span class=\"re5\">aNum</span> <br/>\t^ aNum - <span class=\"re5\">1</span> \\\\ table size + <span class=\"re5\">1</span>!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'private'</span>!<br/>waitRandomTime<br/>\t<span class=\"br0\">(</span><span class=\"re0\">Delay</span> forMilliseconds: <span class=\"br0\">(</span><span class=\"re5\">random</span> next * <span class=\"re5\">4000</span><span class=\"br0\">)</span> rounded<span class=\"br0\">)</span> wait!\u00a0!<br/>\u00a0<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'dining'</span>!<br/>eat<br/>\t<span class=\"kw1\">self</span> displayState: <span class=\"st0\">'eating'</span>;<br/>\t\t waitRandomTime;<br/>\t\t putBackForkAt: -<span class=\"re5\">1</span>;<br/>\t\t putBackForkAt: <span class=\"re5\">1</span>!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'dining'</span>!<br/>pickUpForks<br/>\t<span class=\"kw1\">self</span> displayState: <span class=\"st0\">'trying to pick up forks'</span>.<br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">self</span> pickUpForkAt: -<span class=\"re5\">1</span><span class=\"br0\">)</span><br/>\t\tifTrue: <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">self</span> pickUpForkAt: <span class=\"re5\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tifFalse: <span class=\"br0\">[</span><span class=\"kw1\">self</span> putBackForkAt: -<span class=\"re5\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>\t<span class=\"br0\">(</span><span class=\"re5\">forks</span> at: <span class=\"re5\">1</span><span class=\"br0\">)</span> notNil<span class=\"br0\">]</span><br/>\t\twhileFalse: <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">Delay</span> forMilliseconds: <span class=\"re5\">10</span><span class=\"br0\">)</span> wait<span class=\"br0\">]</span>!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'dining'</span>!<br/>think<br/>\t<span class=\"kw1\">self</span> displayState: <span class=\"st0\">'thinking'</span>;<br/>\t\t waitRandomTime!\u00a0!<br/>\u00a0<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> methodsFor: <span class=\"st0\">'initialize-release'</span>!<br/>beginDining: <span class=\"re5\">aName</span> at: <span class=\"re5\">aTable</span> <br/>\t<span class=\"re6\">name</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aName</span>.<br/>\t<span class=\"re5\">table</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aTable</span>.<br/>\t<span class=\"re5\">forks</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Dictionary</span> new at: -<span class=\"re5\">1</span> put: <span class=\"kw1\">nil</span>;<br/>\t\t\t\t at: <span class=\"re5\">1</span> put: <span class=\"kw1\">nil</span>;<br/>\t\t\t\t yourself.<br/>\t<span class=\"re5\">random</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Random</span> new seed: <span class=\"re5\">name</span> hash.<br/>\t<span class=\"re5\">seat</span> <span class=\"sy0\">:=</span> <span class=\"re5\">table</span> size + <span class=\"re5\">1</span>.<br/>\t<span class=\"re5\">table</span> add: <span class=\"kw1\">self</span>;<br/>\t\t add: <span class=\"kw1\">self</span> createfork.<br/>\t<span class=\"re5\">running</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">true</span>.<br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">Delay</span> forSeconds: <span class=\"re5\">20</span><span class=\"br0\">)</span> wait.<br/>\t<span class=\"re5\">running</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">false</span><span class=\"br0\">]</span> fork.<br/>\t<span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">running</span><span class=\"br0\">]</span><br/>\t\twhileTrue: <span class=\"br0\">[</span><span class=\"kw1\">self</span> think; pickUpForks; eat<span class=\"br0\">]</span>.<br/>\t<span class=\"kw1\">nil</span><span class=\"br0\">]</span> fork!\u00a0!<br/>\u00a0<br/><span class=\"coMULTI\">\"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \"</span>!<br/>\u00a0<br/><span class=\"re0\">Philosopher</span> class<br/>\tinstanceVariableNames: <span class=\"st0\">''</span>!<br/>\u00a0<br/>!<span class=\"re0\">Philosopher</span> class methodsFor: <span class=\"st0\">'examples'</span>!<br/>diningPhilosophersTest<br/>\t|<span class=\"re3\"> diningTable </span>|<br/>\t<span class=\"re6\">diningTable</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>\t<span class=\"sy0\">#</span><span class=\"br0\">(</span><span class=\"st0\">'Aristotle'</span> <span class=\"st0\">'Kant'</span> <span class=\"st0\">'Buddha'</span> <span class=\"st0\">'Marx'</span> <span class=\"st0\">'Russel'</span> <span class=\"br0\">)</span><br/>\t\tdo: <span class=\"br0\">[</span>:<span class=\"re5\">aName</span> | <span class=\"re0\">Philosopher</span> new beginDining: <span class=\"re5\">aName</span> at: <span class=\"re5\">diningTable</span><span class=\"br0\">]</span>!\u00a0!<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 68, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Thread<br/>\u00a0<br/><span class=\"kw1\">foreach</span> name <span class=\"br0\">{</span>Aristotle Kant Spinoza Marx Russel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> forks <span class=\"br0\">[</span>thread::<span class=\"me1\">mutex</span> create<span class=\"br0\">]</span><br/>    <span class=\"kw2\">lappend</span> tasks <span class=\"br0\">[</span><span class=\"kw1\">set</span> t <span class=\"br0\">[</span>thread::<span class=\"me1\">create</span> -preserved <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Implement each task as a coroutine internally for simplicity of presentation</span><br/>        <span class=\"co1\"># This is because we want to remain able to receive messages so we can shut</span><br/>        <span class=\"co1\"># down neatly at the end of the program.</span><br/>\t<span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> doTask <span class=\"br0\">{</span><span class=\"br0\">}</span> coroutine t philosopher<br/>\t<span class=\"kw1\">proc</span> delay <span class=\"br0\">{</span>expression<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    yield <span class=\"br0\">[</span>after <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$expression</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># Forks are mutexes...</span><br/>        <span class=\"kw1\">proc</span> pickUpFork fork <span class=\"br0\">{</span><br/>            thread::<span class=\"me1\">mutex</span> lock <span class=\"re0\">$fork</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">proc</span> putDownFork fork <span class=\"br0\">{</span><br/>            thread::<span class=\"me1\">mutex</span> unlock <span class=\"re0\">$fork</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># The actual implementation of the task</span><br/>\t<span class=\"kw1\">proc</span> philosopher <span class=\"br0\">{</span>f1 f2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">global</span> name<br/>\t    <span class=\"co1\"># Always acquire forks in order; prevents deadlock</span><br/>            <span class=\"co1\"># Uses the \"natural\" order of the lexicographical order of the fork names</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$f1</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$f2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$f1</span> <span class=\"re0\">$f2</span><span class=\"br0\">]</span> f2 f1<br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\"># The classic \"philosophers\" loop</span><br/>\t    <span class=\"kw1\">while</span> <span class=\"br0\">{</span>true<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$name is thinking\"</span><br/>\t\tdelay <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$name is hungry, getting fork in left hand\"</span><br/>\t\tpickUpFork <span class=\"re0\">$f1</span><br/>\t\tdelay <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><span class=\"co1\"># Make deadlock likely if it is possible!</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$name is hungry, getting fork in right hand\"</span><br/>\t\tpickUpFork <span class=\"re0\">$f2</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$name is eating\"</span><br/>\t\tdelay <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"$name has finished eating; putting down forks\"</span><br/>\t\tputDownFork <span class=\"re0\">$f2</span><br/>\t\tputDownFork <span class=\"re0\">$f1</span><br/>                delay <span class=\"nu0\">100</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tthread::<span class=\"me1\">wait</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    thread::<span class=\"me1\">send</span> <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">set</span> name <span class=\"re0\">$name</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Set the tasks going</span><br/><span class=\"kw1\">foreach</span> t <span class=\"re0\">$tasks</span> <span class=\"br0\">{</span>f1 f2<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    thread::<span class=\"me1\">send</span> -async <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>            doTask <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$forks</span> <span class=\"re0\">$f1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$forks</span> <span class=\"re0\">$f2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Kill everything off after 30 seconds; that's enough for demonstration!</span><br/>after <span class=\"nu0\">30000</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Completing...\"</span><br/><span class=\"kw1\">foreach</span> t <span class=\"re0\">$tasks</span> <span class=\"br0\">{</span><br/>    thread::<span class=\"me1\">send</span> -async <span class=\"re0\">$t</span> thread::<span class=\"kw1\">exit</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 50, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Threading</span><br/><span class=\"kw1\">Module</span> Module1<br/>   <span class=\"kw1\">Public</span> rnd <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Random<br/>\u00a0<br/>   <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"co1\">'Aristotle, Kant, Spinoza, Marx, and Russel </span><br/>       <span class=\"kw1\">Dim</span> f1 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> f2 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> f3 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> f4 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Dim</span> f5 <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Fork<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>       Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"1: Deadlock\"</span><span class=\"br0\">)</span><br/>       Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"2: Live lock\"</span><span class=\"br0\">)</span><br/>       Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"3: Working\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">Select</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><br/>           <span class=\"kw1\">Case</span> <span class=\"st0\">\"1\"</span><br/>               <span class=\"kw1\">Using</span> _<br/>                   Aristotle <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelfishPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span>, f1, f2<span class=\"br0\">)</span>, _<br/>                   Kant <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelfishPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span>, f2, f3<span class=\"br0\">)</span>, _<br/>                   Spinoza <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelfishPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span>, f3, f4<span class=\"br0\">)</span>, _<br/>                   Marx <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelfishPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span>, f4, f5<span class=\"br0\">)</span>, _<br/>                   Russel <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelfishPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Russel\"</span>, f5, f1<span class=\"br0\">)</span><br/>\u00a0<br/>                   Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>               <span class=\"kw1\">End</span> <span class=\"kw1\">Using</span><br/>           <span class=\"kw1\">Case</span> <span class=\"st0\">\"2\"</span><br/>               <span class=\"kw1\">Using</span> _<br/>                   Aristotle <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelflessPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span>, f1, f2<span class=\"br0\">)</span>, _<br/>                   Kant <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelflessPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span>, f2, f3<span class=\"br0\">)</span>, _<br/>                   Spinoza <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelflessPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span>, f3, f4<span class=\"br0\">)</span>, _<br/>                   Marx <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelflessPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span>, f4, f5<span class=\"br0\">)</span>, _<br/>                   Russel <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> SelflessPhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Russel\"</span>, f5, f1<span class=\"br0\">)</span><br/>\u00a0<br/>                   Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>               <span class=\"kw1\">End</span> <span class=\"kw1\">Using</span><br/>           <span class=\"kw1\">Case</span> <span class=\"st0\">\"3\"</span><br/>               <span class=\"kw1\">Using</span> _<br/>                   Aristotle <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> WisePhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Aristotle\"</span>, f1, f2<span class=\"br0\">)</span>, _<br/>                   Kant <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> WisePhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Kant\"</span>, f2, f3<span class=\"br0\">)</span>, _<br/>                   Spinoza <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> WisePhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Spinoza\"</span>, f3, f4<span class=\"br0\">)</span>, _<br/>                   Marx <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> WisePhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Marx\"</span>, f4, f5<span class=\"br0\">)</span>, _<br/>                   Russel <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> WisePhilosopher<span class=\"br0\">(</span><span class=\"st0\">\"Russel\"</span>, f5, f1<span class=\"br0\">)</span><br/>\u00a0<br/>                   Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>               <span class=\"kw1\">End</span> <span class=\"kw1\">Using</span><br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">Select</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "zkl", "loc": 26, "block": "<pre class=\"text highlighted_source\">var [const] forks=(5).pump(List,Atomic.Bool.fp(False)),  // True==fork in use<br/>    seats=(5).pump(List,'wrap(n){ List(forks[n],forks[(n+1)%5]) });<br/>fcn sitAndEat(name,n){  // assigned seating<br/>   while(1){<br/>      fa,fb:=seats[n].shuffle(); // ambidextrous<br/>      if(fa.setIf(True,False)){  // got the first fork<br/>\t if(fb.setIf(True,False)){  // got the other fork, nom nom time<br/>\t    name.println(\" is eating\"); <br/>\t    Atomic.sleep((1).random(5));<br/>\t    fa.set(False); fb.set(False);  // put forks down<br/>\t    return();  // leave the table<br/>\t }<br/>\t else{<br/>\t    fa.set(False);  // put fork down, try again in a bit<br/>\t    name.println(\": Could not get two forks\");<br/>\t }<br/>      } else name.println(\": Could not get first fork\");<br/>      Atomic.sleep((1).random(2));  // sits for a bit<br/>   }<br/>}<br/>fcn philo([(seat,name)]){  // a thread<br/>   while(1){  // eat and think forever<br/>      name.println(\" is thinking.\"); Atomic.sleep((1).random(5));<br/>      sitAndEat(name,seat);<br/>   }<br/>}</pre>"}]}