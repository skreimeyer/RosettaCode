{"task": "Solve_a_Numbrix_puzzle", "blocks": [{"lang": "AutoHotkey", "loc": 63, "block": "<pre class=\"autohotkey highlighted_source\">SolveNumbrix<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> R<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> C<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>R<span class=\"sy0\">&amp;&amp;</span>C<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if neighbors (not first iteration)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tGrid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"&gt;\"</span> num \t\t\t\t\t<span class=\"co1\">; place num in current neighbor and mark it visited \"&gt;\"</span><br/>\t\trow<span class=\"sy0\">:=</span>R<span class=\"sy0\">,</span> col<span class=\"sy0\">:=</span>C\t\t\t\t\t\t<span class=\"co1\">; move to current neighbor</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tnum<span class=\"sy0\">++</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; increment num</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>num<span class=\"sy0\">=</span>max<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if reached end</span><br/>\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">; return solution</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t\t\t<span class=\"co1\">; if current num is a locked value</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t<span class=\"co1\">; find row of num</span><br/>\t\tcol <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t<span class=\"co1\">; find col of num</span><br/>\t\t<span class=\"kw1\">if</span> SolveNumbrix<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location and value</span><br/>\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tfor each<span class=\"sy0\">,</span> value in StrSplit<span class=\"br0\">(</span>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tR <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<br/>\t\t\tC <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span>C<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; a hole or out of bounds</span><br/>\t\t\t|| <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; visited</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num+1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num-1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t<span class=\"co1\">; locked value</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"br0\">]</span>\t\t\t\t<span class=\"co1\">; locked cell</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> SolveNumbrix<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> C<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location, neighbor and value</span><br/>\t\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tnum<span class=\"sy0\">--</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; step back</span><br/>\tfor i<span class=\"sy0\">,</span> line in Grid<br/>\t\tfor j<span class=\"sy0\">,</span> element in line<br/>\t\t\t<span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>StrReplace<span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> num<span class=\"br0\">)</span><br/>\t\t\t\tGrid<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> row<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\":\"</span> col<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span> row<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"st0\">\":\"</span> col<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span> row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span> row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/>map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tfor i<span class=\"sy0\">,</span> row in Grid<br/>\t<span class=\"br0\">{</span><br/>\t\tfor j<span class=\"sy0\">,</span> element in row<br/>\t\t\tline <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"`t\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> element <br/>\t\tmap <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>map<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span>?<span class=\"st0\">\"`n\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> line<br/>\t\tline <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> StrReplace<span class=\"br0\">(</span>map<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 157, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;bitset&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> bitset<span class=\"sy1\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy1\">&gt;</span> hood_t<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> node<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> val<span class=\"sy4\">;</span><br/>\thood_t neighbors<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> nSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> solve<span class=\"br0\">(</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> puzz, <span class=\"kw4\">int</span> max_wid<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t\twid <span class=\"sy1\">=</span> max_wid<span class=\"sy4\">;</span> <br/>\t\thei <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> wid<span class=\"sy4\">;</span><br/>\t\tmax <span class=\"sy1\">=</span> wid <span class=\"sy2\">*</span> hei<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">int</span> len <span class=\"sy1\">=</span> max, c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\tarr <span class=\"sy1\">=</span> vector<span class=\"sy1\">&lt;</span>node<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>len, node<span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tweHave <span class=\"sy1\">=</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>len <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> s <span class=\"sy4\">:</span> puzz<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy1\">==</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> max<span class=\"sy2\">--</span><span class=\"sy4\">;</span> arr<span class=\"br0\">[</span>c<span class=\"sy2\">++</span><span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t\t\tarr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span>s.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> weHave<span class=\"br0\">[</span>arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t\tc<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tsolveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;&amp;</span> s <span class=\"sy4\">:</span> puzz<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy1\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t\t\t\ts <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">to_string</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\tc<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>\t<span class=\"kw4\">bool</span> search<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> dr<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>w <span class=\"sy1\">&gt;</span> max <span class=\"sy3\">&amp;&amp;</span> dr <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span>w <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> dr <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span>w <span class=\"sy1\">==</span> max <span class=\"sy3\">&amp;&amp;</span> weHave<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tnode<span class=\"sy3\">&amp;</span> n <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\tn.<span class=\"me1\">neighbors</span> <span class=\"sy1\">=</span> getNeighbors<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>weHave<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">neighbors</span><span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> w<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>a, b, w <span class=\"sy2\">+</span> dr, dr<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">neighbors</span><span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tarr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>a, b, w <span class=\"sy2\">+</span> dr, dr<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t\t\t\tarr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\thood_t getNeighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\thood_t retval<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> xx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> xx<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>xx<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>xx<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> a <span class=\"sy1\">&gt;=</span> wid <span class=\"sy3\">||</span> b <span class=\"sy1\">&gt;=</span> hei<span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tretval.<span class=\"me1\">set</span><span class=\"br0\">(</span>xx<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> retval<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> x, y, z<span class=\"sy4\">;</span> findStart<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>z <span class=\"sy1\">==</span> <span class=\"nu0\">99999</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Can't find start point!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t\tsearch<span class=\"br0\">(</span>x, y, z <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>z <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> search<span class=\"br0\">(</span>x, y, z <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> findStart<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> x, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> y, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> z<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tz <span class=\"sy1\">=</span> <span class=\"nu0\">99999</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> b<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&lt;</span> z<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tx <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span><br/>\t\t\tz <span class=\"sy1\">=</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> dx <span class=\"sy1\">=</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> dy <span class=\"sy1\">=</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> wid, hei, max<span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span>node<span class=\"sy1\">&gt;</span> arr<span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span> weHave<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> wid<span class=\"sy4\">;</span> string p<span class=\"sy4\">;</span><br/>\t<span class=\"co1\">//p = \". . . . . . . . . . . 46 45 . 55 74 . . . 38 . . 43 . . 78 . . 35 . . . . . 71 . . . 33 . . . 59 . . . 17 . . . . . 67 . . 18 . . 11 . . 64 . . . 24 21 . 1  2 . . . . . . . . . . .\"; wid = 9;</span><br/>\t<span class=\"co1\">//p = \". . . . . . . . . . 11 12 15 18 21 62 61 . .  6 . . . . . 60 . . 33 . . . . . 57 . . 32 . . . . . 56 . . 37 .  1 . . . 73 . . 38 . . . . . 72 . . 43 44 47 48 51 76 77 . . . . . . . . . .\"; wid = 9;</span><br/>\tp <span class=\"sy1\">=</span> <span class=\"st0\">\"17 . . . 11 . . . 59 . 15 . . 6 . . 61 . . . 3 . . .  63 . . . . . . 66 . . . . 23 24 . 68 67 78 . 54 55 . . . . 72 . . . . . . 35 . . . 49 . . . 29 . . 40 . . 47 . 31 . . . 39 . . . 45\"</span><span class=\"sy4\">;</span> wid <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tistringstream iss<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> puzz<span class=\"sy4\">;</span><br/>\tcopy<span class=\"br0\">(</span>istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>iss<span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>puzz<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tnSolver s<span class=\"sy4\">;</span> s.<span class=\"me1\">solve</span><span class=\"br0\">(</span>puzz, wid<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> s <span class=\"sy4\">:</span> puzz<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"*\"</span> <span class=\"sy3\">&amp;&amp;</span> s <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">atoi</span><span class=\"br0\">(</span>s.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"   \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">++</span>c <span class=\"sy1\">&gt;=</span> wid<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"pause\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 209, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span>  <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> BitSet8 <span class=\"sy0\">=</span> <span class=\"kw4\">ubyte</span><span class=\"sy0\">;</span> <span class=\"co1\">// A set of 8 bits.</span><br/>    <span class=\"kw2\">alias</span> Cell <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> <span class=\"kw4\">string</span> <span class=\"br0\">{</span> unavailableInCell <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> availableInCell <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> Cell <span class=\"br0\">{</span> unavailableCell <span class=\"sy0\">=</span> Cell.<span class=\"me1\">max</span><span class=\"sy0\">,</span> availableCell <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> inPuzzle<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">const</span> rawPuzzle <span class=\"sy0\">=</span> inPuzzle.<span class=\"me1\">splitLines</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">split</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>rawPuzzle.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Is rectangular.</span><br/>\u00a0<br/>        gridWidth <span class=\"sy0\">=</span> rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        gridHeight <span class=\"sy0\">=</span> rawPuzzle.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> nMaxCells <span class=\"sy0\">=</span> gridWidth <span class=\"sy0\">*</span> gridHeight<span class=\"sy0\">;</span><br/>        grid <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Cell<span class=\"br0\">[</span>nMaxCells<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> knownMutable <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>nMaxCells <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">uint</span> nAvailableMutable <span class=\"sy0\">=</span> nMaxCells<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">bool</span><span class=\"br0\">[</span>Cell<span class=\"br0\">]</span> seenCells<span class=\"sy0\">;</span> <span class=\"co1\">// To avoid duplicate input numbers.</span><br/>\u00a0<br/>        <span class=\"kw4\">uint</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> piece<span class=\"sy0\">;</span> rawPuzzle.<span class=\"me1\">join</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>piece <span class=\"sy0\">==</span> unavailableInCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nAvailableMutable<span class=\"sy0\">--;</span><br/>                grid<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unavailableCell<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>piece <span class=\"sy0\">==</span> availableInCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> availableCell<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> cell <span class=\"sy0\">=</span> piece.<span class=\"me1\">to</span><span class=\"sy0\">!</span>Cell<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span>cell <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> cell <span class=\"sy0\">&lt;=</span> nMaxCells<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span>cell <span class=\"sy0\">!</span><span class=\"kw2\">in</span> seenCells<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                seenCells<span class=\"br0\">[</span>cell<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                knownMutable<span class=\"br0\">[</span>cell<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            i<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        known <span class=\"sy0\">=</span> knownMutable.<span class=\"me1\">idup</span><span class=\"sy0\">;</span><br/>        nAvailable <span class=\"sy0\">=</span> nAvailableMutable<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">@disable</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">auto</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc<br/>    <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>result.<span class=\"me1\">isNull</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Can't verify 'result' here because it's const.</span><br/>            <span class=\"co1\">// assert(!result.get.join.canFind(availableCell.text));</span><br/>\u00a0<br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>grid.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>availableCell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">auto</span> values <span class=\"sy0\">=</span> grid.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">!=</span> unavailableCell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">auto</span> interval <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span>reduce<span class=\"sy0\">!</span>min<span class=\"br0\">(</span>values.<span class=\"me1\">front</span><span class=\"sy0\">,</span> values.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                 reduce<span class=\"sy0\">!</span>max<span class=\"br0\">(</span>values.<span class=\"me1\">front</span><span class=\"sy0\">,</span> values.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span>values.<span class=\"me1\">walkLength</span> <span class=\"sy0\">==</span> interval.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span>interval.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> values.<span class=\"me1\">count</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Quadratic.</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> grid<br/>                      .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> unavailableCell<span class=\"br0\">)</span> <span class=\"sy0\">?</span> unavailableInCell <span class=\"sy0\">:</span> c.<span class=\"me1\">text</span><span class=\"br0\">)</span><br/>                      .<span class=\"me1\">chunks</span><span class=\"br0\">(</span>gridWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">alias</span> OutRange <span class=\"sy0\">=</span> Nullable<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">const</span> start <span class=\"sy0\">=</span> findStart<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> OutRange<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        search<span class=\"br0\">(</span>start.<span class=\"me1\">r</span><span class=\"sy0\">,</span> start.<span class=\"me1\">c</span><span class=\"sy0\">,</span> start.<span class=\"me1\">cell</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start.<span class=\"me1\">cell</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> direction <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            search<span class=\"br0\">(</span>start.<span class=\"me1\">r</span><span class=\"sy0\">,</span> start.<span class=\"me1\">c</span><span class=\"sy0\">,</span> start.<span class=\"me1\">cell</span> <span class=\"sy0\">+</span> direction<span class=\"sy0\">,</span> direction<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid.<span class=\"me1\">any</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">==</span> availableCell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> OutRange<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">return</span> OutRange<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span><span class=\"sy0\">:</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> c<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Cell cell<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> direction<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cell <span class=\"sy0\">&gt;</span> nAvailable <span class=\"sy0\">&amp;&amp;</span> direction <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>cell <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> direction <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>            <span class=\"br0\">(</span>cell <span class=\"sy0\">==</span> nAvailable <span class=\"sy0\">&amp;&amp;</span> known<span class=\"br0\">[</span>cell<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"co1\">// One solution found.</span><br/>\u00a0<br/>        <span class=\"kw4\">immutable</span> neighbors <span class=\"sy0\">=</span> getNeighbors<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>known<span class=\"br0\">[</span>cell<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> rc<span class=\"sy0\">;</span> shifts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>1u <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">immutable</span> c2 <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                              r2 <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r2 <span class=\"sy0\">*</span> gridWidth <span class=\"sy0\">+</span> c2<span class=\"br0\">]</span> <span class=\"sy0\">==</span> cell<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>r2<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> cell <span class=\"sy0\">+</span> direction<span class=\"sy0\">,</span> direction<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> rc<span class=\"sy0\">;</span> shifts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>neighbors <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>1u <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> c2 <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          r2 <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          pos <span class=\"sy0\">=</span> r2 <span class=\"sy0\">*</span> gridWidth <span class=\"sy0\">+</span> c2<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> availableCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"sy0\">;</span>          <span class=\"co1\">// Try.</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>r2<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> cell <span class=\"sy0\">+</span> direction<span class=\"sy0\">,</span> direction<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                    grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> availableCell<span class=\"sy0\">;</span> <span class=\"co1\">// Restore.</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    BitSet8 getNeighbors<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> c<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> usable <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> rc<span class=\"sy0\">;</span> shifts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> c2 <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      r2 <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> rc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2 <span class=\"sy0\">&gt;=</span> gridWidth <span class=\"sy0\">||</span> r2 <span class=\"sy0\">&gt;=</span> gridHeight<span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r2 <span class=\"sy0\">*</span> gridWidth <span class=\"sy0\">+</span> c2<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> unavailableCell<span class=\"br0\">)</span><br/>                usable <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>1u <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> usable<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">auto</span> findStart<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> Triple <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">uint</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> Cell<span class=\"sy0\">,</span><span class=\"st0\">\"cell\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Nullable<span class=\"sy0\">!</span>Triple result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> cell <span class=\"sy0\">=</span> Cell.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">gridHeight</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">gridWidth</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> pos <span class=\"sy0\">=</span> gridWidth <span class=\"sy0\">*</span> r <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> availableCell <span class=\"sy0\">&amp;&amp;</span><br/>                    grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> unavailableCell <span class=\"sy0\">&amp;&amp;</span> grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    cell <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    result <span class=\"sy0\">=</span> Triple<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> cell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> shifts <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> gridWidth<span class=\"sy0\">,</span> gridHeight<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> nAvailable<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> known<span class=\"sy0\">;</span> <span class=\"co1\">// Given known cells of the puzzle.</span><br/>    Cell<span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span>  <span class=\"co1\">// Flattened mutable game grid.</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// enum NumbrixPuzzle to catch malformed puzzles at compile-time.</span><br/>    <span class=\"kw4\">enum</span> puzzle1 <span class=\"sy0\">=</span> <span class=\"st0\">\".  .  .  .  .  .  .  .  .<br/>                    .  . 46 45  . 55 74  .  .<br/>                    . 38  .  . 43  .  . 78  .<br/>                    . 35  .  .  .  .  . 71  .<br/>                    .  . 33  .  .  . 59  .  .<br/>                    . 17  .  .  .  .  . 67  .<br/>                    . 18  .  . 11  .  . 64  .<br/>                    .  . 24 21  .  1  2  .  .<br/>                    .  .  .  .  .  .  .  .  .\"</span>.<span class=\"me1\">NumbrixPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> puzzle2 <span class=\"sy0\">=</span> <span class=\"st0\">\".  .  .  .  .  .  .  .  .<br/>                    . 11 12 15 18 21 62 61  .<br/>                    .  6  .  .  .  .  . 60  .<br/>                    . 33  .  .  .  .  . 57  .<br/>                    . 32  .  .  .  .  . 56  .<br/>                    . 37  .  1  .  .  . 73  .<br/>                    . 38  .  .  .  .  . 72  .<br/>                    . 43 44 47 48 51 76 77  .<br/>                    .  .  .  .  .  .  .  .  .\"</span>.<span class=\"me1\">NumbrixPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> puzzle3 <span class=\"sy0\">=</span> <span class=\"st0\">\"17  .  .  . 11  .  .  . 59<br/>                     . 15  .  .  6  .  . 61  .<br/>                     .  .  3  .  .  . 63  .  .<br/>                     .  .  .  . 66  .  .  .  .<br/>                    23 24  . 68 67 78  . 54 55<br/>                     .  .  .  . 72  .  .  .  .<br/>                     .  . 35  .  .  . 49  .  .<br/>                     . 29  .  . 40  .  . 47  .<br/>                    31  .  .  . 39  .  .  . 45\"</span>.<span class=\"me1\">NumbrixPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>puzzle<span class=\"sy0\">;</span> <span class=\"br0\">[</span>puzzle1<span class=\"sy0\">,</span> puzzle2<span class=\"sy0\">,</span> puzzle3<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> solution <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">solve</span><span class=\"sy0\">;</span> <span class=\"co1\">// Solved at run-time.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solution.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            writeln<span class=\"br0\">(</span><span class=\"st0\">\"No solution found for puzzle.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"One solution:<span class=\"es1\">\\n</span>%(%-(%2s\u00a0%)<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 29, "block": "<pre class=\"text highlighted_source\"># require HLPsolver<br/>\u00a0<br/>adjacent = [{-1, 0}, {0, -1}, {0, 1}, {1, 0}]<br/>\u00a0<br/>board1 = \"\"\"<br/> 0  0  0  0  0  0  0  0  0<br/> 0  0 46 45  0 55 74  0  0<br/> 0 38  0  0 43  0  0 78  0<br/> 0 35  0  0  0  0  0 71  0<br/> 0  0 33  0  0  0 59  0  0<br/> 0 17  0  0  0  0  0 67  0<br/> 0 18  0  0 11  0  0 64  0<br/> 0  0 24 21  0  1  2  0  0<br/> 0  0  0  0  0  0  0  0  0<br/>\"\"\"<br/>HLPsolver.solve(board1, adjacent)<br/>\u00a0<br/>board2 = \"\"\"<br/> 0  0  0  0  0  0  0  0  0<br/> 0 11 12 15 18 21 62 61  0<br/> 0  6  0  0  0  0  0 60  0<br/> 0 33  0  0  0  0  0 57  0<br/> 0 32  0  0  0  0  0 56  0<br/> 0 37  0  1  0  0  0 73  0<br/> 0 38  0  0  0  0  0 72  0<br/> 0 43 44 47 48 51 76 77  0<br/> 0  0  0  0  0  0  0  0  0<br/>\"\"\"<br/>HLPsolver.solve(board2, adjacent)</pre>"}, {"lang": "Go", "loc": 119, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> example1 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,00,46,45,00,55,74,00,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,38,00,00,43,00,00,78,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,35,00,00,00,00,00,71,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,00,33,00,00,00,59,00,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,17,00,00,00,00,00,67,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,18,00,00,11,00,00,64,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,00,24,21,00,01,02,00,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> example2 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,11,12,15,18,21,62,61,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,06,00,00,00,00,00,60,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,33,00,00,00,00,00,57,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,32,00,00,00,00,00,56,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,37,00,01,00,00,00,73,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,38,00,00,00,00,00,72,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,43,44,47,48,51,76,77,00\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> moves <span class=\"sy2\">=</span> <span class=\"sy1\">[][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">}}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    grid        <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><br/>    clues       <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>    totalToFill <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> count<span class=\"sy1\">,</span> nextClue <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> count &gt; totalToFill <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    back <span class=\"sy2\">:=</span> grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> back <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> &amp;&amp; back <span class=\"sy2\">!=</span> count <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> back <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; nextClue &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>clues<span class=\"sy1\">)</span> &amp;&amp; clues<span class=\"sy1\">[</span>nextClue<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> count <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> back <span class=\"sy3\">==</span> count <span class=\"sy1\">{</span><br/>        nextClue<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> count<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> move <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> moves <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span>move<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> c<span class=\"sy3\">+</span>move<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> count<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> nextClue<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> back<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printResult<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Solution for example\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\b</span>:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> grid <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> row <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n<span class=\"sy1\">,</span> board <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">][]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>example1<span class=\"sy1\">,</span> example2<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        nRows <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>board<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/>        nCols <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>board<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">))</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/>        startRow<span class=\"sy1\">,</span> startCol <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>        grid <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nRows<span class=\"sy1\">)</span><br/>        totalToFill <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>nRows <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>nCols <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">var</span> lst <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; nRows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            grid<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nCols<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; nCols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> &amp;&amp; r &lt; nRows<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                row <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>board<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">)</span><br/>                <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt; nCols<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                    val<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span>row<span class=\"sy1\">[</span>c<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>                    <span class=\"kw1\">if</span> val &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                        lst <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>lst<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>                    <span class=\"sy1\">}</span><br/>                    <span class=\"kw1\">if</span> val <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                        startRow<span class=\"sy1\">,</span> startCol <span class=\"sy2\">=</span> r<span class=\"sy1\">,</span> c<br/>                    <span class=\"sy1\">}</span><br/>                    grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> val<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>lst<span class=\"sy1\">)</span><br/>        clues <span class=\"sy2\">=</span> lst<br/>        <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>startRow<span class=\"sy1\">,</span> startCol<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            printResult<span class=\"sy1\">(</span>n <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 90, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> nCells<span class=\"sy0\">,</span> cMap<span class=\"sy0\">,</span> best<br/><span class=\"kw1\">record</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    puzzle <span class=\"sy0\">:=</span> showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy0\">,</span>readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span>findStart<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"sy0\">,&amp;</span><span class=\"kw3\">null</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Output\"</span><span class=\"sy0\">,</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Start with a reduced puzzle space</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    nCells <span class=\"sy0\">:=</span> maxCols <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">:</span> gencells<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        maxCols <span class=\"sy0\">&lt;:=</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Now normalize all rows to the same length</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>p <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">!</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">|-</span><span class=\"nu0\">1</span><span class=\"sy0\">\\</span><span class=\"br0\">(</span>maxCols <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gencells<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> WS<span class=\"sy0\">,</span> NWS<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>        NWS <span class=\"sy0\">:=</span> <span class=\"sy0\">~</span><span class=\"br0\">(</span>WS <span class=\"sy0\">:=</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        cMap <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\"># Map to/from internal model</span><br/>        cMap<span class=\"br0\">[</span><span class=\"st0\">\"_\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span> cMap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"sy0\">:=</span> <span class=\"st0\">\"_\"</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    s <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>NWS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"sy0\">|</span>w<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">~=</span> w <span class=\"kw1\">then</span> nCells <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">suspend</span> w<br/>            <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showPuzzle<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>label<span class=\"sy0\">,</span><span class=\"st0\">\" with \"</span><span class=\"sy0\">,</span>nCells<span class=\"sy0\">,</span><span class=\"st0\">\" cells:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>p <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>r <span class=\"kw1\">do</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">|</span>c<span class=\"br0\">)</span><span class=\"sy0\">,*</span>nCells<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> findStart<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>p<span class=\"br0\">[</span>r <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>best <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>            loc <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>path<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> puzzle<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> loc<span class=\"sy0\">,</span> <span class=\"kw4\">parent</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> getVal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getLoc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> loc<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getParent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">parent</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>nCells <span class=\"sy0\">=</span> val<span class=\"sy0\">,</span> puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>val<span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> visit<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span>best<span class=\"sy0\">,</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">,</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        v <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span>      <span class=\"co1\"># number we're looking for</span><br/>        xv <span class=\"sy0\">:=</span> puzzle<span class=\"br0\">[</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">fail</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xv <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>xv <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>        <span class=\"kw1\">if</span> xv <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">|</span>v<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            ancestor <span class=\"sy0\">:=</span> self<br/>            <span class=\"kw1\">while</span> xl <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>ancestor <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>ancestor<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">=</span> c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>            <span class=\"kw1\">return</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><br/>    val <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> best <span class=\"sy0\">:=</span> self<br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span>  <span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span>   <span class=\"co1\"># North</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span>   <span class=\"co1\"># East</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>   self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span>   <span class=\"co1\"># South</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span>   <span class=\"co1\"># West</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 91, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Numbrix <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> board <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span>,<br/>        <span class=\"st0\">\"00,00,46,45,00,55,74,00,00\"</span>,<br/>        <span class=\"st0\">\"00,38,00,00,43,00,00,78,00\"</span>,<br/>        <span class=\"st0\">\"00,35,00,00,00,00,00,71,00\"</span>,<br/>        <span class=\"st0\">\"00,00,33,00,00,00,59,00,00\"</span>,<br/>        <span class=\"st0\">\"00,17,00,00,00,00,00,67,00\"</span>,<br/>        <span class=\"st0\">\"00,18,00,00,11,00,00,64,00\"</span>,<br/>        <span class=\"st0\">\"00,00,24,21,00,01,02,00,00\"</span>,<br/>        <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> moves <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> clues<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> totalToFill<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> nRows <span class=\"sy0\">=</span> board.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> startRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, startCol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>nRows<span class=\"br0\">]</span><span class=\"br0\">[</span>nCols<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        totalToFill <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nRows <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>nCols <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> lst <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> nRows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">&lt;</span> nRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> val <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>row<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>val <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        lst.<span class=\"me1\">add</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>val <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        startRow <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>                        startCol <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        clues <span class=\"sy0\">=</span> lst.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">mapToInt</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> i<span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>startRow, startCol, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> count, <span class=\"kw4\">int</span> nextClue<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> totalToFill<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> count<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextClue <span class=\"sy0\">&lt;</span> clues.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>clues<span class=\"br0\">[</span>nextClue<span class=\"br0\">]</span> <span class=\"sy0\">==</span> count<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> back <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> count<span class=\"br0\">)</span><br/>            nextClue<span class=\"sy0\">++;</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> move <span class=\"sy0\">:</span> moves<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r <span class=\"sy0\">+</span> move<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, c <span class=\"sy0\">+</span> move<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, nextClue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">:</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 90, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> example1 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span>,<br/>    <span class=\"st0\">\"00,00,46,45,00,55,74,00,00\"</span>,<br/>    <span class=\"st0\">\"00,38,00,00,43,00,00,78,00\"</span>,<br/>    <span class=\"st0\">\"00,35,00,00,00,00,00,71,00\"</span>,<br/>    <span class=\"st0\">\"00,00,33,00,00,00,59,00,00\"</span>,<br/>    <span class=\"st0\">\"00,17,00,00,00,00,00,67,00\"</span>,<br/>    <span class=\"st0\">\"00,18,00,00,11,00,00,64,00\"</span>,<br/>    <span class=\"st0\">\"00,00,24,21,00,01,02,00,00\"</span>,<br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> example2 <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span>,<br/>    <span class=\"st0\">\"00,11,12,15,18,21,62,61,00\"</span>,<br/>    <span class=\"st0\">\"00,06,00,00,00,00,00,60,00\"</span>,<br/>    <span class=\"st0\">\"00,33,00,00,00,00,00,57,00\"</span>,<br/>    <span class=\"st0\">\"00,32,00,00,00,00,00,56,00\"</span>,<br/>    <span class=\"st0\">\"00,37,00,01,00,00,00,73,00\"</span>,<br/>    <span class=\"st0\">\"00,38,00,00,00,00,00,72,00\"</span>,<br/>    <span class=\"st0\">\"00,43,44,47,48,51,76,77,00\"</span>,<br/>    <span class=\"st0\">\"00,00,00,00,00,00,00,00,00\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> moves <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> to <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> to -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> board<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>   <br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> grid<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> clues<span class=\"sy0\">:</span> IntArray<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> totalToFill <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, count<span class=\"sy0\">:</span> Int, nextClue<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> totalToFill<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> back <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> back <span class=\"sy0\">!=</span> count<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextClue <span class=\"sy0\">&lt;</span> clues.<span class=\"me1\">size</span> <span class=\"sy0\">&amp;&amp;</span> clues<span class=\"br0\">[</span>nextClue<span class=\"br0\">]</span> <span class=\"sy0\">==</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nextClue2 <span class=\"sy0\">=</span> nextClue<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>back <span class=\"sy0\">==</span> count<span class=\"br0\">)</span> nextClue2++<br/>    grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in moves<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r + m.<span class=\"me1\">second</span>, c + m.<span class=\"me1\">first</span>, count + <span class=\"nu0\">1</span>, nextClue2<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>    grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> back<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printResult<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Solution for example $n:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> continue<br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>n, ex<span class=\"br0\">)</span> in listOf<span class=\"br0\">(</span>example1, example2<span class=\"br0\">)</span>.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        board <span class=\"sy0\">=</span> ex<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nRows <span class=\"sy0\">=</span> board.<span class=\"me1\">size</span> + <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span> + <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> startRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> startCol <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        grid <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>nCols<span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        totalToFill <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nRows - <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>nCols - <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lst <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">1</span> until nRows - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> row <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">1</span> until nCols - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>c - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> lst.<span class=\"me1\">add</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        startRow <span class=\"sy0\">=</span> r<br/>                        startCol <span class=\"sy0\">=</span> c<br/>                    <span class=\"br0\">}</span><br/>                    grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        lst.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        clues <span class=\"sy0\">=</span> lst.<span class=\"me1\">toIntArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>startRow, startCol, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> printResult<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"co4\">&lt;&lt;END;<br/> 0  0  0  0  0  0  0  0  0<br/> 0  0 46 45  0 55 74  0  0<br/> 0 38  0  0 43  0  0 78  0<br/> 0 35  0  0  0  0  0 71  0<br/> 0  0 33  0  0  0 59  0  0<br/> 0 17  0  0  0  0  0 67  0<br/> 0 18  0  0 11  0  0 64  0<br/> 0  0 24 21  0  1  2  0  0<br/> 0  0  0  0  0  0  0  0  0<br/>END</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$gap</span> <span class=\"sy0\">=</span> <span class=\"co2\">/.\\n/</span> <span class=\"sy0\">*</span> <span class=\"co5\">$-</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"sy0\">;</span><br/><span class=\"co2\">s/ (?=\\d\\b)/0/g</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%02d\"</span><span class=\"sy0\">,</span> <span class=\"co2\">tr/0-9//</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solve<span class=\"br0\">(</span> <span class=\"st_h\">'01'</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve<br/>  <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$have</span><span class=\"sy0\">,</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$have</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$max</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"solution<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$in</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/</span><span class=\"re0\">\\b0</span><span class=\"sy0\">/</span> <span class=\"sy0\">/</span>gr<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$in</span> <span class=\"sy0\">=~</span> <span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$want</span> <span class=\"sy0\">=</span> <span class=\"re0\">$have</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$in</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/($have|$want)( |.{$gap})($have|$want)/s</span> <span class=\"kw1\">and</span> solve<span class=\"br0\">(</span><span class=\"re0\">$want</span><span class=\"sy0\">,</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/$have \\K00/$want/</span>          <span class=\"kw1\">and</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$want</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># R</span><br/>    <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/$have.{$gap}\\K00/$want/s</span>   <span class=\"kw1\">and</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$want</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># D</span><br/>    <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/00(?= $have)/$want/</span>        <span class=\"kw1\">and</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$want</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># L</span><br/>    <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$in</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/00(?=.{$gap}$have)/$want/s</span> <span class=\"kw1\">and</span> solve<span class=\"br0\">(</span> <span class=\"re0\">$want</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># U</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 117, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@adjacent</span> <span class=\"sy0\">=</span>           <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>          <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                         <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>put <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    __ __ __ __ __ __ __ __ __<br/>    __ __ <span class=\"nu0\">46</span> <span class=\"nu0\">45</span> __ <span class=\"nu0\">55</span> <span class=\"nu0\">74</span> __ __<br/>    __ <span class=\"nu0\">38</span> __ __ <span class=\"nu0\">43</span> __ __ <span class=\"nu0\">78</span> __<br/>    __ <span class=\"nu0\">35</span> __ __ __ __ __ <span class=\"nu0\">71</span> __<br/>    __ __ <span class=\"nu0\">33</span> __ __ __ <span class=\"nu0\">59</span> __ __<br/>    __ <span class=\"nu0\">17</span> __ __ __ __ __ <span class=\"nu0\">67</span> __<br/>    __ <span class=\"nu0\">18</span> __ __ <span class=\"nu0\">11</span> __ __ <span class=\"nu0\">64</span> __<br/>    __ __ <span class=\"nu0\">24</span> <span class=\"nu0\">21</span> __  <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span> __ __<br/>    __ __ __ __ __ __ __ __ __<br/>    <span class=\"kw2\">END</span><br/>\u00a0<br/><span class=\"co1\"># And</span><br/>put <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">18</span> <span class=\"nu0\">21</span> <span class=\"nu0\">62</span> <span class=\"nu0\">61</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">60</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">33</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">57</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">32</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">56</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">37</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">73</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">38</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">72</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">43</span> <span class=\"nu0\">44</span> <span class=\"nu0\">47</span> <span class=\"nu0\">48</span> <span class=\"nu0\">51</span> <span class=\"nu0\">76</span> <span class=\"nu0\">77</span>  <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">END</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> solveboard<span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@known</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@neigh</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@degree</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"co2\">/^_/</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">??</span> Rat <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span> <span class=\"sy0\">--&gt;</span> List<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eager gather <span class=\"kw1\">for</span> <span class=\"re0\">@adjacent</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            take <span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">defined</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H<span class=\"es0\">\\e</span>[0J\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    try_fill <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> try_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tries</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">$old</span> <span class=\"kw1\">and</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span>               <span class=\"co1\"># conjecture grid value</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H\"</span><span class=\"sy0\">;</span>                    <span class=\"co1\"># show conjectured board</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Rat <span class=\"br0\">{</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"nu0\">0</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'_'</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span>  <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$width}d\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># conjecture new degrees</span><br/>            <span class=\"kw3\">push</span> <span class=\"re0\">@degrees</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<span class=\"sy0\">;</span>         <span class=\"co1\"># and categorize by degree</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">defined</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ties</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@ties</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">{</span>           <span class=\"co1\"># reverse works better for this hidato anyway</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> try_fill <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>          <span class=\"co1\"># undo degree conjectures</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span>             <span class=\"co1\"># undo grid value conjecture</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$tries tries\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 102, "block": "<pre class=\"text highlighted_source\">sequence board, knownx, knowny<br/>\u00a0<br/>integer size, limit, nchars, tries<br/>string fmt, blank<br/>\u00a0<br/>constant ROW = 1, COL = 2<br/>constant moves = {{-1,0},{0,-1},{0,1},{1,0}}<br/>\u00a0<br/>function onboard(integer row, integer col)<br/>    return row&gt;=1 and row&lt;=size and col&gt;=nchars and col&lt;=nchars*size<br/>end function<br/>\u00a0<br/>function solve(integer row, integer col, integer n)<br/>integer nrow, ncol<br/>    tries+= 1<br/>    if n&gt;limit then return 1 end if<br/>    if knownx[n] then<br/>        for move=1 to length(moves) do<br/>            nrow = row+moves[move][ROW]<br/>            ncol = col+moves[move][COL]*nchars<br/>            if nrow = knownx[n]<br/>            and ncol = knowny[n] then<br/>                if solve(nrow,ncol,n+1) then return 1 end if<br/>                exit<br/>            end if<br/>        end for<br/>        return 0<br/>    end if<br/>    sequence wmoves = {}<br/>    for move=1 to length(moves) do<br/>        nrow = row+moves[move][ROW]<br/>        ncol = col+moves[move][COL]*nchars<br/>        if onboard(nrow,ncol)<br/>        and board[nrow][ncol]='.' then<br/>            board[nrow][ncol-nchars+1..ncol] = sprintf(fmt,n)<br/>            if solve(nrow,ncol,n+1) then return 1 end if<br/>            board[nrow][ncol-nchars+1..ncol] = blank<br/>        end if<br/>    end for<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure Numbrix(sequence s)<br/>integer y, ch, ch2, k<br/>atom t0 = time()<br/>    s = split(s,'\\n')<br/>    size = length(s)<br/>    limit = size*size<br/>    nchars = length(sprintf(\"\u00a0%d\",limit))<br/>    fmt = sprintf(\"\u00a0%%%dd\",nchars-1)<br/>    blank = repeat('.',nchars)<br/>    board = repeat(repeat(' ',size*nchars),size)<br/>    knownx = repeat(0,limit)<br/>    knowny = repeat(0,limit)<br/>    for x=1 to size do<br/>        for y=nchars to size*nchars by nchars do<br/>            ch = s[x][y]<br/>            if ch!='.' then<br/>                k = ch-'0'<br/>                ch2 = s[x][y-1]<br/>                if ch2!=' ' then<br/>                    k += (ch2-'0')*10<br/>                    board[x][y-1] = ch2<br/>                end if<br/>                knownx[k] = x<br/>                knowny[k] = y<br/>            end if<br/>            board[x][y] = ch<br/>        end for<br/>    end for<br/>    tries = 0<br/>    if solve(knownx[1],knowny[1],2) then<br/>        puts(1,join(board,\"\\n\"))<br/>        printf(1,\"\\nsolution found in\u00a0%d tries (%3.2fs)\\n\",{tries,time()-t0})<br/>    else<br/>        puts(1,\"no solutions found\\n\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant board1 = \"\"\"<br/>  .  .  .  .  .  .  .  .  .<br/>  .  . 46 45  . 55 74  .  .<br/>  . 38  .  . 43  .  . 78  .<br/>  . 35  .  .  .  .  . 71  .<br/>  .  . 33  .  .  . 59  .  .<br/>  . 17  .  .  .  .  . 67  .<br/>  . 18  .  . 11  .  . 64  .<br/>  .  . 24 21  .  1  2  .  .<br/>  .  .  .  .  .  .  .  .  .\"\"\"<br/>Numbrix(board1)<br/>\u00a0<br/>constant board2 = \"\"\"<br/>  .  .  .  .  .  .  .  .  .<br/>  . 11 12 15 18 21 62 61  .<br/>  .  6  .  .  .  .  . 60  .<br/>  . 33  .  .  .  .  . 57  .<br/>  . 32  .  .  .  .  . 56  .<br/>  . 37  .  1  .  .  . 73  .<br/>  . 38  .  .  .  .  . 72  .<br/>  . 43 44 47 48 51 76 77  .<br/>  .  .  .  .  .  .  .  .  .\"\"\"<br/>Numbrix(board2)</pre>"}, {"lang": "Python", "loc": 100, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>neighbours <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>exists <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>lastNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>wid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>hei <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> find_next<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>:<br/>        a <span class=\"sy0\">=</span> x + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        b <span class=\"sy0\">=</span> y + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> wid <span class=\"sy0\">&gt;</span> a <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"kw1\">and</span> hei <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">if</span> pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">==</span> z:<br/>                <span class=\"kw1\">return</span> a<span class=\"sy0\">,</span> b<br/>\u00a0<br/>    <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> find_solution<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> z <span class=\"sy0\">&gt;</span> lastNumber:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> exists<span class=\"br0\">[</span>z<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        s <span class=\"sy0\">=</span> find_next<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">return</span> find_solution<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> z + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>:<br/>        a <span class=\"sy0\">=</span> x + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        b <span class=\"sy0\">=</span> y + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> wid <span class=\"sy0\">&gt;</span> a <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"kw1\">and</span> hei <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">if</span> pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>                pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> z<br/>                r <span class=\"sy0\">=</span> find_solution<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> z + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span>pz<span class=\"sy0\">,</span> w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> lastNumber<span class=\"sy0\">,</span> wid<span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> exists<br/>\u00a0<br/>    lastNumber <span class=\"sy0\">=</span> w * h<br/>    wid <span class=\"sy0\">=</span> w<br/>    hei <span class=\"sy0\">=</span> h<br/>    exists <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>lastNumber + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    pa <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    st <span class=\"sy0\">=</span> pz.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> st<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\".\"</span>:<br/>                idx +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">else</span>:<br/>                pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                exists<span class=\"br0\">[</span>pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                idx +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    t <span class=\"sy0\">=</span> w * h + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> t:<br/>                t <span class=\"sy0\">=</span> pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>                x <span class=\"sy0\">=</span> i<br/>                y <span class=\"sy0\">=</span> j<br/>\u00a0<br/>    <span class=\"kw1\">return</span> find_solution<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> t + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> pa<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> show_result<span class=\"br0\">(</span>r<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>hei<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>wid<span class=\"br0\">)</span>:<br/>                stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" {:0{}d}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No Solution!<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>r <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"st0\">\". . . . . . . . . . . 46 45 . 55 74 . . . 38 . . 43 . . 78 . . 35 . . . . . 71 . . . 33 . . . 59 . . . 17\"</span><br/>          <span class=\"st0\">\" . . . . . 67 . . 18 . . 11 . . 64 . . . 24 21 . 1  2 . . . . . . . . . . .\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>show_result<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>\u00a0<br/>r <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"st0\">\". . . . . . . . . . 11 12 15 18 21 62 61 . .  6 . . . . . 60 . . 33 . . . . . 57 . . 32 . . . . . 56 . . 37\"</span><br/>          <span class=\"st0\">\" .  1 . . . 73 . . 38 . . . . . 72 . . 43 44 47 48 51 76 77 . . . . . . . . . .\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>show_result<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>\u00a0<br/>r <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"st0\">\"17 . . . 11 . . . 59 . 15 . . 6 . . 61 . . . 3 . . .  63 . . . . . . 66 . . . . 23 24 . 68 67 78 . 54 55\"</span><br/>          <span class=\"st0\">\" . . . . 72 . . . . . . 35 . . . 49 . . . 29 . . 40 . . 47 . 31 . . . 39 . . . 45\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>show_result<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 95, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;;; Used in my solutions of:<br/>;;; \"Solve a Hidato Puzzle\"<br/>;;; \"Solve a Holy Knights Tour\"<br/>;;; \"Solve a Numbrix Puzzle\"<br/>;;; \"Solve a Hopido Puzzle\"<br/>\u00a0<br/>;;; As well as the solver being common, the solution renderer and input formats are common<br/>(provide<br/>\u00a0;; Input:  list of neighbour offsets<br/>\u00a0;; Output: a solver function:<br/>\u00a0;;         Input:  a puzzle<br/>\u00a0;;         Output: either the solved puzzle or #f if impossible<br/> solve-hidato-family<br/>\u00a0;; Input:  puzzle<br/>\u00a0;;         optional minimum cell width<br/>\u00a0;; Output: a pretty string that can be printed<br/> puzzle-&gt;string)<br/>\u00a0<br/>;; Cell values are:<br/>;; zero?     - unvisited<br/>;; positive? - nth visitied<br/>;; else      - unvisitable. In the puzzle layout, it's a _. In the hash it's a -1, so we can care less<br/>;;                          about number type checking.<br/>;; A puzzle is a sequence of sequences of cell values<br/>;; We work with a puzzle as a hash keyed on (cons row-num col-num)<br/>\u00a0<br/>;; Take a puzzle and get a working hash of it<br/>(define (puzzle-&gt;hash p)<br/>  (for*/hash<br/>      (((r row-num) (in-parallel p (in-naturals)))<br/>       ((v col-num) (in-parallel r (in-naturals)))<br/>       #:when (integer? v))<br/>    (values (cons row-num col-num) v)))<br/>\u00a0<br/>;; Takes a hash and recreates a vector of vectors puzzle<br/>(define (hash-&gt;puzzle h# (blank '_))<br/>  (define keys (hash-keys h#))<br/>  (define n-rows (add1 (car (argmax car keys))))<br/>  (define n-cols (add1 (cdr (argmax cdr keys))))<br/>  (for/vector #:length n-rows ((r n-rows))<br/>    (for/vector #:length n-cols ((c n-cols))<br/>      (hash-ref h# (cons r c) blank))))<br/>\u00a0<br/>;; See \"provide\" section for description<br/>(define (puzzle-&gt;string p (w #f))<br/>  (match p<br/>    [#f \"unsolved\"]<br/>    [(? sequence? s)<br/>     (define (max-n-digits p)<br/>       (and p (add1 (order-of-magnitude (* (vector-length p) (vector-length (vector-ref p 0)))))))<br/>     (define min-width (or w (max-n-digits p)))     <br/>     (string-join<br/>      (for/list ((r s))<br/>        (string-join<br/>         (for/list ((c r)) (~a c #:align 'right #:min-width min-width))<br/>         \" \"))<br/>      \"\\n\")]))<br/>\u00a0<br/>(define ((solve-hidato-family neighbour-offsets) board)<br/>  (define board# (puzzle-&gt;hash board))<br/> \u00a0;; reverse mapping, will only take note of positive values<br/>  (define targets# (for/hash ([(k v) (in-hash board#)] #:when (positive? v)) (values v k)))<br/>\u00a0<br/>  (define (neighbours r.c)<br/>    (for/list ((r+.c+ neighbour-offsets))<br/>      (match-define (list r+ c+) r+.c+)<br/>      (match-define (cons r  c ) r.c)<br/>      (cons (+ r r+) (+ c c+))))<br/>\u00a0<br/> \u00a0;; Count the moves, rather than check for \"no more zeros\" in puzzle<br/>  (define last-move (length (filter number? (hash-values board#))))<br/>\u00a0<br/> \u00a0;; Depth first solution of the puzzle (we have to go deep, it's where the solutions are!<br/>  (define (inr-solve-pzl b# move r.c)<br/>    (cond<br/>      [(= move last-move) b#]\u00a0; no moves needed, so solved<br/>      [else<br/>       (define m++ (add1 move))<br/>       (for*/or\u00a0; check each neighbour as an option<br/>           ((r.c+ (in-list (neighbours r.c)))<br/>            #:when (equal? (hash-ref targets# move r.c) r.c)\u00a0; we're where we should be!<br/>            #:when (match (hash-ref b# r.c+ -1) (0 #t) ((== m++) #t) (_ #f)))<br/>         (inr-solve-pzl (hash-set b# r.c+ m++) m++ r.c+))]))<br/>\u00a0<br/>  (define (solution-starting-at n)<br/>    (define start-r.c (for/first (((k v) (in-hash board#)) #:when (= n v)) k))<br/>    (and start-r.c (inr-solve-pzl board# n start-r.c)))  <br/>\u00a0<br/>  (define sltn<br/>    (cond [(solution-starting-at 1) =&gt; values]<br/>         \u00a0;; next clause starts from 0 for hopido<br/>          [(solution-starting-at 0) =&gt; values]))<br/>\u00a0<br/>  (and sltn (hash-&gt;puzzle sltn)))</pre>"}, {"lang": "REXX", "loc": 52, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves a  Numbrix (R) puzzle, it also displays the puzzle and solution.  */</span><br/>maxR=<span class=\"nu0\">0</span>;    maxC=<span class=\"nu0\">0</span>;    maxX=<span class=\"nu0\">0</span>;     minR=9e9;      minC=9e9;    minX=9e9;    cells=<span class=\"nu0\">0</span>;    @<span class=\"sy0\">.</span>=<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> xxx;        PZ=<span class=\"st0\">'Numbrix puzzle'</span>        <span class=\"coMULTI\">/*get the cell definitions from the CL.*/</span><br/>xxx=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>xxx, , <span class=\"st0\">\"/\\;:_\"</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*also allow other characters as comma.*/</span><br/>\u00a0<br/>               <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> xxx<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  xxx    r c   marks  <span class=\"st0\">','</span>  xxx<br/>                   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> marks<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;          <a class=\"__cf_email__\" data-cfemail=\"c19efc81\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<br/>                   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> marks  x  marks<br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*normalize  \u2502x\u2502  */</span><br/>                   minR=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minR,r<span class=\"br0\">)</span>;  maxR=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxR,r<span class=\"br0\">)</span>; minC=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minC,c<span class=\"br0\">)</span>; maxC=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxC,c<span class=\"br0\">)</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; \u00a0!r=r; \u00a0!c=c;  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*the START cell. */</span><br/>                   <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">\"cell at\"</span> r c <span class=\"st0\">'is already occupied with:'</span>  _<br/>                   @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=x;   c=c+<span class=\"nu0\">1</span>;    cells=cells+<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*assign a mark.  */</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"sy0\">.</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                  <span class=\"coMULTI\">/*is a hole?  Skip*/</span><br/>                   <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">'illegal marker specified:'</span> x<br/>                   minX=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minX,x<span class=\"br0\">)</span>;    maxX=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxX,x<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*min and max  X. */</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while marks\u00ac='' */</span><br/>               <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*while xxx  \u00ac='' */</span><br/><span class=\"kw1\">call</span> show                                        <span class=\"coMULTI\">/* [\u2193]  is used for making fast moves. */</span><br/>Nr = <span class=\"st0\">'0  1   0  -1    -1   1   1  -1'</span>            <span class=\"coMULTI\">/*possible  row     for the next move. */</span><br/>Nc = <span class=\"st0\">'1  0  -1   0     1  -1   1  -1'</span>            <span class=\"coMULTI\">/*   \"      column   \"   \"    \"    \"   */</span><br/>pMoves=<span class=\"kw6\">words</span><span class=\"br0\">(</span>Nr<span class=\"br0\">)</span> -<span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>PZ,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'N'</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*is this to be a Numbrix puzzle\u00a0?     */</span><br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves;   Nr<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nr,i<span class=\"br0\">)</span>;   Nc<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nc,i<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*for fast moves. */</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>next<span class=\"br0\">(</span><span class=\"nu0\">2</span>,!r,!c<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">'No solution possible for this'</span> PZ<span class=\"st0\">\".\"</span><br/><span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'A solution for the'</span>   PZ   <span class=\"st0\">\"exists.\"</span>;    <span class=\"kw1\">say</span>;                <span class=\"kw1\">call</span> show<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>err:  <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"st0\">'***error*** (from'</span> PZ<span class=\"st0\">\"): \"</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;        <span class=\"kw1\">say</span>;          <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>next: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> Nr<span class=\"sy0\">.</span> Nc<span class=\"sy0\">.</span> cells pMoves;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #,r,c;   ##=#+<span class=\"nu0\">1</span><br/>           <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves                                   <span class=\"coMULTI\">/* [\u2193]  try some moves. */</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  r+Nr<span class=\"sy0\">.</span>t c+Nc<span class=\"sy0\">.</span>t  <span class=\"kw2\">with</span> nr nc               <span class=\"coMULTI\">/*next move co\u00f6rdinates.*/</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=#     <span class=\"coMULTI\">/*let's try this move.  */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*is this the last move?*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                               @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=<span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*undo the above move.  */</span><br/>                               <span class=\"kw1\">iterate</span>                          <span class=\"coMULTI\">/*go &amp; try another move.*/</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==#  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                               <span class=\"coMULTI\">/*this a fill-in move\u00a0? */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*this is the last move.*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*a fill-in move.       */</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                                  <span class=\"coMULTI\">/*this ain't working.   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show: <span class=\"kw1\">if</span> maxR<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> maxC<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no legal cell was specified.'</span><br/>      <span class=\"kw1\">if</span> minX<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no  1  was specified for the puzzle start'</span><br/>      w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw1\">do</span>    r=maxR  <span class=\"kw2\">to</span> minR  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>; _=<br/>                                  <span class=\"kw1\">do</span> c=minC  <span class=\"kw2\">to</span> maxC;        _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c,w<span class=\"br0\">)</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*c*/</span><br/>                               <span class=\"kw1\">say</span> _<br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>      <span class=\"kw1\">say</span>;    <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'HLPsolver'</span><br/>\u00a0<br/>ADJACENT = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>board1 = <span class=\"co4\">&lt;&lt;EOS<br/> 0  0  0  0  0  0  0  0  0<br/> 0  0 46 45  0 55 74  0  0<br/> 0 38  0  0 43  0  0 78  0<br/> 0 35  0  0  0  0  0 71  0<br/> 0  0 33  0  0  0 59  0  0<br/> 0 17  0  0  0  0  0 67  0<br/> 0 18  0  0 11  0  0 64  0<br/> 0  0 24 21  0  1  2  0  0<br/> 0  0  0  0  0  0  0  0  0<br/>EOS</span><br/>HLPsolver.<span class=\"me1\">new</span><span class=\"br0\">(</span>board1<span class=\"br0\">)</span>.<span class=\"me1\">solve</span><br/>\u00a0<br/>board2 = <span class=\"co4\">&lt;&lt;EOS<br/> 0  0  0  0  0  0  0  0  0<br/> 0 11 12 15 18 21 62 61  0<br/> 0  6  0  0  0  0  0 60  0<br/> 0 33  0  0  0  0  0 57  0<br/> 0 32  0  0  0  0  0 56  0<br/> 0 37  0  1  0  0  0 73  0<br/> 0 38  0  0  0  0  0 72  0<br/> 0 43 44 47 48 51 76 77  0<br/> 0  0  0  0  0  0  0  0  0<br/>EOS</span><br/>HLPsolver.<span class=\"me1\">new</span><span class=\"br0\">(</span>board2<span class=\"br0\">)</span>.<span class=\"me1\">solve</span></pre>"}, {"lang": "SystemVerilog", "loc": 127, "block": "<pre class=\"systemverilog highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">///  NumbrixSolver                                                         ///</span><br/><span class=\"co1\">///     Solve the puzzle, by using system verilog randomization engine     ///</span><br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"kw4\">class</span> NumbrixSolver<span class=\"sy0\">;</span><br/>  <span class=\"kw3\">rand</span> <span class=\"kw5\">int</span> solvedBoard<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw5\">int</span> fixedBoard<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw5\">int</span> numCells<span class=\"sy0\">;</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Dynamically resize the board accordingly to the size of the reference///</span><br/>  <span class=\"co1\">/// board                                                                ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> height <span class=\"br0\">{</span><br/>    solvedBoard.<span class=\"kw7\">size</span> <span class=\"sy0\">==</span> fixedBoard.<span class=\"kw7\">size</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">constraint</span> width <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw7\">size</span> <span class=\"sy0\">==</span> fixedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw7\">size</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"co1\">///  Fix the positions defined in the input board                        ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> fixed <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>fixedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> fixedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"co1\">///  Ensures that the whole board is filled from the number with numbers ///</span><br/>  <span class=\"co1\">///   1,2,3,...,numCells                                                 ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> range <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw3\">inside</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>numCells<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"co1\">///  Ensures that there is no repeated number, consequently every number ///</span><br/>  <span class=\"co1\">///  is present on the board                                             ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> uniqueness <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i1 <span class=\"sy0\">!=</span> i2<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>j1 <span class=\"sy0\">!=</span> j2<span class=\"br0\">)</span><span class=\"br0\">)</span> solvedBoard<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> solvedBoard<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Ensures that exists one direction connecting the numbers in          ///</span><br/>  <span class=\"co1\">/// increasing order                                                     ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> f_seq <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>numCells<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>      <span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> solvedBoard.size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>    <span class=\"sy0\">==</span> <br/>                                         solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>      <span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"kw7\">size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <br/>                                         solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>      <span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>                       <span class=\"sy0\">==</span> <br/>                                         solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>      <span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>j<span class=\"br0\">]</span>                         <span class=\"sy0\">==</span> <br/>                                         solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> pre_randomize<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// the multiplication is not supported in the constraints</span><br/>    numCells <span class=\"sy0\">=</span> fixedBoard.<span class=\"kw7\">size</span> <span class=\"sy0\">*</span> fixedBoard<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"kw7\">size</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">endfunction</span><br/>  <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> printSolvedBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>solvedBoard<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>        $write<span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy0\">,</span> solvedBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">end</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">endfunction</span><br/><span class=\"kw4\">endclass</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// SolveNumBrix: A program demonstrating how to use NumbrixSolver class   ///</span><br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/>\u00a0<br/><span class=\"kw4\">program</span> SolveNumbrix<span class=\"sy0\">;</span><br/>  NumbrixSolver board<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">initial</span> <span class=\"kw4\">begin</span><br/>    board <span class=\"sy0\">=</span> <span class=\"kw3\">new</span><span class=\"sy0\">;</span><br/>    board.fixedBoard <span class=\"sy0\">=</span> '<span class=\"br0\">{</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">46</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">74</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">38</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">43</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">78</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">71</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">33</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">59</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">67</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span>board.<span class=\"kw7\">randomize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"Solution for the Example 1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      board.printSolvedBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw4\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"Failed to solve Example 1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>\u00a0<br/>    board.fixedBoard <span class=\"sy0\">=</span> '<span class=\"br0\">{</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">61</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">6</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">33</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">73</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">38</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">72</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">43</span><span class=\"sy0\">,</span> <span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">47</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">77</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      '<span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span>board.<span class=\"kw7\">randomize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"Solution for the Example 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      board.printSolvedBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw4\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"Failed to solve Example 2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>    $finish<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">end</span><br/><span class=\"kw4\">endprogram</span><br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 197, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Loop over adjacent pairs in a list.</span><br/><span class=\"co1\"># Example:</span><br/><span class=\"co1\"># \u00a0% eachpair {a b} {1 2 3} {puts $a $b}</span><br/><span class=\"co1\">#  1 2</span><br/><span class=\"co1\">#  2 3</span><br/><span class=\"kw1\">proc</span> eachpair <span class=\"br0\">{</span>varNames ls script<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>lassign <span class=\"re0\">$varNames</span> _i _j<span class=\"br0\">]</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"Must supply exactly two arguments\"</span><br/>    <span class=\"br0\">}</span><br/>    tailcall <span class=\"kw1\">foreach</span> <span class=\"re0\">$_i</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$ls</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"re0\">$_j</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$ls</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span> <span class=\"re0\">$script</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> numbrix <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> parse <span class=\"br0\">{</span>txt<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> map <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$txt</span><span class=\"br0\">]</span> \\n<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> print <span class=\"br0\">{</span>map<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap row <span class=\"re0\">$map</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap val <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">format</span> <span class=\"sy0\">%</span>2d <span class=\"re0\">$val</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">]</span> \\n<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> mark <span class=\"br0\">{</span>map x y i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lset</span> map <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> moves <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span><br/>            -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>      <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>                <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> r <span class=\"br0\">[</span>+ <span class=\"re0\">$dx</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$dy</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> rmap <span class=\"br0\">{</span>map<span class=\"br0\">}</span> <span class=\"br0\">{</span>   <span class=\"sy0\">;</span><span class=\"co1\"># generate a reverse map in a dict {val {x y} ..}</span><br/>        <span class=\"kw1\">set</span> rmap <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> h <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$map</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> w <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> x <span class=\"re0\">$w</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> x -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> y <span class=\"re0\">$h</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> y -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    dict <span class=\"kw1\">set</span> rmap <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$rmap</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> gaps <span class=\"br0\">{</span>rmap<span class=\"br0\">}</span> <span class=\"br0\">{</span>  <span class=\"sy0\">;</span><span class=\"co1\"># list all the gaps to be filled</span><br/>        <span class=\"kw1\">set</span> known <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer <span class=\"br0\">[</span>dict keys <span class=\"re0\">$rmap</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> gaps <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        eachpair <span class=\"br0\">{</span>i j<span class=\"br0\">}</span> <span class=\"re0\">$known</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lappend</span> gaps <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$gaps</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> fixgaps <span class=\"br0\">{</span>map rmap gaps<span class=\"br0\">}</span> <span class=\"br0\">{</span>  <span class=\"sy0\">;</span><span class=\"co1\"># add a \"tail\" gap if needed</span><br/>        <span class=\"kw1\">set</span> w <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$map</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> h <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> size <span class=\"br0\">[</span><span class=\"sy0\">*</span> <span class=\"re0\">$h</span> <span class=\"re0\">$w</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> max <span class=\"br0\">[</span>max <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>dict keys <span class=\"re0\">$rmap</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$max</span> ne <span class=\"re0\">$size</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> gaps <span class=\"re0\">$max</span> Inf<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$gaps</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">proc</span> paths <span class=\"br0\">{</span>map x0 y0 n<span class=\"br0\">}</span> <span class=\"br0\">{</span>  <span class=\"sy0\">;</span><span class=\"co1\"># generate all the maps with a single path filled legally</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$map</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"re0\">$x0</span> <span class=\"re0\">$y0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> paths <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">[</span>moves <span class=\"re0\">$x0</span> <span class=\"re0\">$y0</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$map</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> == <span class=\"re0\">$n</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span>mark <span class=\"re0\">$map</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$i</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> == <span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lappend</span> paths <span class=\"re0\">$map</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> || <span class=\"br0\">(</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lappend</span> paths <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><br/>                    paths <span class=\"br0\">[</span><br/>                        mark <span class=\"re0\">$map</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$i</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">]</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span>- <span class=\"re0\">$n</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$paths</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> solve <span class=\"br0\">{</span>map<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># fixpoint map</span><br/>        <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>   <span class=\"sy0\">;</span><span class=\"co1\"># first we iteratively fill in paths with distinct solutions</span><br/>            <span class=\"kw1\">set</span> rmap <span class=\"br0\">[</span>rmap <span class=\"re0\">$map</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> gaps <span class=\"br0\">[</span>gaps <span class=\"re0\">$rmap</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> gaps <span class=\"br0\">[</span>fixgaps <span class=\"re0\">$map</span> <span class=\"re0\">$rmap</span> <span class=\"re0\">$gaps</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$gaps</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$map</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">set</span> oldmap <span class=\"re0\">$map</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>i j<span class=\"br0\">}</span> <span class=\"re0\">$gaps</span> <span class=\"br0\">{</span><br/>                lassign <span class=\"br0\">[</span>dict get <span class=\"re0\">$rmap</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> x0 y0<br/>                <span class=\"kw1\">set</span> n <span class=\"br0\">[</span>- <span class=\"re0\">$j</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>paths <span class=\"re0\">$map</span> <span class=\"re0\">$x0</span> <span class=\"re0\">$y0</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$paths</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$paths</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"co1\">#puts \"solved $i..$j\"</span><br/>                    <span class=\"co1\">#puts [print $map]</span><br/>                    <span class=\"kw1\">set</span> map <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$paths</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"sy0\">;</span><span class=\"co1\"># we could intersect the paths to maybe get some tiles</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$map</span> eq <span class=\"re0\">$oldmap</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">#puts \"unique paths exhausted - going DFS\"</span><br/>        try <span class=\"br0\">{</span>   <span class=\"sy0\">;</span><span class=\"co1\"># for any left over paths, go DFS</span><br/>            <span class=\"sy0\">;</span><span class=\"co1\"># we might want to sort the gaps first</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>i j<span class=\"br0\">}</span> <span class=\"re0\">$gaps</span> <span class=\"br0\">{</span><br/>                lassign <span class=\"br0\">[</span>dict get <span class=\"re0\">$rmap</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> x0 y0<br/>                <span class=\"kw1\">set</span> n <span class=\"br0\">[</span>- <span class=\"re0\">$j</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>paths <span class=\"re0\">$map</span> <span class=\"re0\">$x0</span> <span class=\"re0\">$y0</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">foreach</span> path <span class=\"re0\">$paths</span> <span class=\"br0\">{</span><br/>                    <span class=\"co1\">#puts \"recursing on $i..$j\"</span><br/>                    <span class=\"kw1\">set</span> sol <span class=\"br0\">[</span>solve <span class=\"re0\">$path</span><span class=\"br0\">]</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$sol</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">return</span> <span class=\"re0\">$sol</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">namespace</span> export <span class=\"br0\">{</span><span class=\"br0\">[</span>a-z<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">namespace</span> ensemble create<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> puzzles <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">46</span> <span class=\"nu0\">45</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">55</span> <span class=\"nu0\">74</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">38</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">43</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">78</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">35</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">71</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">33</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">59</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">17</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">67</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">18</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">11</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">64</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">24</span> <span class=\"nu0\">21</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">{</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">18</span> <span class=\"nu0\">21</span> <span class=\"nu0\">62</span> <span class=\"nu0\">61</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">60</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">33</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">57</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">32</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">56</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">37</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">73</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">38</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">72</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span> <span class=\"nu0\">43</span> <span class=\"nu0\">44</span> <span class=\"nu0\">47</span> <span class=\"nu0\">48</span> <span class=\"nu0\">51</span> <span class=\"nu0\">76</span> <span class=\"nu0\">77</span>  <span class=\"nu0\">0</span><br/>        <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">foreach</span> puzzle <span class=\"re0\">$puzzles</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> map <span class=\"br0\">[</span>numbrix parse <span class=\"re0\">$puzzle</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>== Puzzle [incr i] ==\"</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span>numbrix print <span class=\"re0\">$map</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> sol <span class=\"br0\">[</span>numbrix solve <span class=\"re0\">$map</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$sol</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>== Solution $i ==\"</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span>numbrix print <span class=\"re0\">$sol</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>== No Solution for Puzzle $i ==\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 58, "block": "<pre class=\"text highlighted_source\">     // Solve Hidato/Hopido/Numbrix puzzles<br/>class Puzzle{  // hold info concerning this puzzle<br/>   var board, nrows,ncols, cells,<br/>       start,      // (r,c) where 1 is located, Void if no 1<br/>       terminated, // if board holds highest numbered cell<br/>       given,\t   // all the pre-loaded cells<br/>       adj,        // a list of (r,c) that are valid next cells<br/>      \u00a0;<br/>\u00a0<br/>   fcn print_board{<br/>      d:=Dictionary(-1,\"  \", 0,\"__\");<br/>      foreach r in (board){<br/>\t r.pump(String,'wrap(c){ \"%2s \".fmt(d.find(c,c)) }).println();<br/>      }<br/>   }<br/>   fcn init(s,adjacent){<br/>      adj=adjacent;<br/>      lines:=s.split(\"\\n\");<br/>      ncols,nrows=lines[0].split().len(),lines.len();<br/>      board=nrows.pump(List(), ncols.pump(List(),-1).copy);<br/>      given,start=List(),Void;<br/>      cells,terminated=0,True;<br/>      foreach r,row in (lines.enumerate()){<br/>\t foreach c,cell in (row.split().enumerate()){<br/>\t    if(cell==\"X\") continue;   // X == not in play, leave at -1<br/>\t    cells+=1;<br/>\t    val:=cell.toInt();<br/>\t    board[r][c]=val;<br/>\t    given.append(val);<br/>\t    if(val==1) start=T(r,c);<br/>\t }<br/>      }<br/>      println(\"Number of cells = \",cells);<br/>      if(not given.holds(cells)){ given.append(cells); terminated=False; }<br/>      given=given.filter().sort();<br/>   }<br/>   fcn solve{   //--&gt;Bool<br/>      if(start) return(_solve(start.xplode()));<br/>      foreach r,c in (nrows,ncols){<br/>\t if(board[r][c]==0 and _solve(r,c)) return(True);<br/>      }<br/>      False<br/>   }<br/>   fcn [private] _solve(r,c,n=1, next=0){<br/>      if(n&gt;given[-1])                       \t\t   return(True);<br/>      if(not ( (0&lt;=r&lt;nrows) and (0&lt;=c&lt;ncols) ))\t\t   return(False);<br/>      if(board[r][c] and board[r][c]!=n)                   return(False);<br/>      if(terminated and board[r][c]==0 and given[next]==n) return(False);<br/>\u00a0<br/>      back:=0;<br/>      if(board[r][c]==n){ next+=1; back=n; }<br/>\u00a0<br/>      board[r][c]=n;<br/>      foreach i,j in (adj){ if(self.fcn(r+i,c+j,n+1, next)) return(True) }<br/>      board[r][c]=back;<br/>      False<br/>   }<br/>} // Puzzle</pre>"}]}