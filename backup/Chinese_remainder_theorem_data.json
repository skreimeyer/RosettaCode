{"task": "Chinese_remainder_theorem", "blocks": [{"lang": "360 Assembly", "loc": 44, "block": "<pre class=\"text highlighted_source\">*        Chinese remainder theorem 06/09/2015<br/>CHINESE  CSECT<br/>         USING  CHINESE,R12        base addr<br/>         LR     R12,R15<br/>BEGIN    LA     R9,1               m=1<br/>         LA     R6,1               j=1<br/>LOOPJ    C      R6,NN              do j=1 to nn<br/>         BH     ELOOPJ<br/>         LR     R1,R6              j<br/>         SLA    R1,2               j*4<br/>         M      R8,N-4(R1)         m=m*n(j)<br/>         LA     R6,1(R6)           j=j+1<br/>         B      LOOPJ<br/>ELOOPJ   LA     R6,1               x=1<br/>LOOPX    CR     R6,R9              do x=1 to m<br/>         BH     ELOOPX<br/>         LA     R7,1               i=1<br/>LOOPI    C      R7,NN              do i=1 to nn<br/>         BH     ELOOPI<br/>         LR     R1,R7              i<br/>         SLA    R1,2               i*4<br/>         LR     R5,R6              x<br/>         LA     R4,0<br/>         D      R4,N-4(R1)         x//n(i)<br/>         C      R4,A-4(R1)         if x//n(i)^=a(i)<br/>         BNE    ITERX              then iterate x<br/>         LA     R7,1(R7)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   MVC    PG(2),=C'x='<br/>         XDECO  R6,PG+2            edit x<br/>         XPRNT  PG,14              print buffer<br/>         B      RETURN<br/>ITERX    LA     R6,1(R6)           x=x+1<br/>         B      LOOPX<br/>ELOOPX   XPRNT  NOSOL,17           print<br/>RETURN   XR     R15,R15            rc=0<br/>         BR     R14<br/>NN       DC     F'3'<br/>N        DC     F'3',F'5',F'7'<br/>A        DC     F'2',F'3',F'2'<br/>PG       DS     CL80<br/>NOSOL    DC     CL17'no solution found'<br/>         YREGS<br/>         END    CHINESE</pre>"}, {"lang": "Ada", "loc": 20, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Mod_Inv;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Chin_Rema <span class=\"kw1\">is</span>   <br/>   N: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>   A: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;   <br/>   Tmp: Positive;<br/>   Prod: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>   Sum: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> N'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Prod\u00a0:= Prod * N<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Tmp\u00a0:= Prod / N<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      Sum\u00a0:= Sum + A<span class=\"br0\">(</span>I<span class=\"br0\">)</span> * Mod_Inv.<span class=\"me1\">Inverse</span><span class=\"br0\">(</span>Tmp, N<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> * Tmp;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Sum <span class=\"kw2\">mod</span> Prod<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Chin_Rema;</pre>"}, {"lang": "Bracmat", "loc": 38, "block": "<pre class=\"text highlighted_source\">( ( mul-inv<br/>  =   a b b0 q x0 x1<br/>    .  \u00a0!arg:(?a.?b:?b0)<br/>      &amp; (\u00a0!b:1<br/>        |   0:?x0<br/>          &amp; 1:?x1<br/>          &amp;   whl<br/>            ' (\u00a0!a:&gt;1<br/>              &amp;   (!b.mod$(!a.!b):?q.!x1+-1*!q*!x0.!x0)<br/>               \u00a0: (?a.?b.?x0.?x1)<br/>              )<br/>          &amp; (\u00a0!x1:&lt;0&amp;!b0+!x1<br/>            |\u00a0!x1<br/>            )<br/>        )<br/>  )<br/>&amp; ( chinese-remainder<br/>  =   n a as p ns ni prod sum<br/>    .  \u00a0!arg:(?n.?a)<br/>      &amp; 1:?prod<br/>      &amp; 0:?sum<br/>      &amp;\u00a0!n:?ns<br/>      &amp; whl'(!ns:%?ni\u00a0?ns&amp;!prod*!ni:?prod)<br/>      &amp;\u00a0!n:?ns<br/>      &amp;\u00a0!a:?as<br/>      &amp;   whl<br/>        ' (\u00a0!ns:%?ni\u00a0?ns<br/>          &amp;\u00a0!as:%?ai\u00a0?as<br/>          &amp; div$(!prod.!ni):?p<br/>          &amp;\u00a0!sum+!ai*mul-inv$(!p.!ni)*!p:?sum<br/>          )<br/>      &amp; mod$(!sum.!prod):?arg<br/>      &amp;\u00a0!arg<br/>  )<br/>&amp; 3 5 7:?n<br/>&amp; 2 3 2:?a<br/>&amp; put$(str$(chinese-remainder$(!n.!a) \\n))<br/>);</pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// returns x where (a * x)\u00a0% b == 1</span><br/><span class=\"kw4\">int</span> mul_inv<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> b0 <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> q<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> x0<span class=\"sy0\">,</span> x0 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 <span class=\"sy0\">+=</span> b0<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x1<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> chinese_remainder<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> p<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> prod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> prod <span class=\"sy0\">*=</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tp <span class=\"sy0\">=</span> prod <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tsum <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mul_inv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">%</span> prod<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> chinese_remainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 53, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ChineseRemainderTheorem<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> ChineseRemainderTheorem<span class=\"sy0\">.</span><span class=\"me1\">Solve</span><span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> maxCount <span class=\"sy0\">=</span> n<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>counter <span class=\"sy0\">&lt;=</span> maxCount<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{result} \u2261 {a[counter]} (mod {n[counter]})\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                counter<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> ChineseRemainderTheorem<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Solve<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> prod <span class=\"sy0\">=</span> n<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">*</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> p<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> sm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                p <span class=\"sy0\">=</span> prod <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                sm <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> ModularMultiplicativeInverse<span class=\"br0\">(</span>p, n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sm <span class=\"sy0\">%</span> prod<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> ModularMultiplicativeInverse<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> mod<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> mod<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> mod<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 42, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns test-p<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn extended-gcd<br/>  <span class=\"st0\">\"The extended Euclidean algorithm<br/>  Returns a list containing the GCD and the B\u00e9zout coefficients<br/>  corresponding to the inputs. \"</span><br/>  <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>zero? a<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> b<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>zero? b<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> a<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>s <span class=\"nu0\">0</span><br/>                     s0 <span class=\"nu0\">1</span><br/>                     t <span class=\"nu0\">1</span><br/>                     t0 <span class=\"nu0\">0</span><br/>                     r <span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> b<span class=\"br0\">)</span><br/>                     r0 <span class=\"br0\">(</span>math/<span class=\"kw1\">abs</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? r<span class=\"br0\">)</span><br/>                  <span class=\"br0\">[</span>r0 s0 t0<span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>q <span class=\"br0\">(</span>quot r0 r<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>- s0 <span class=\"br0\">(</span>* q s<span class=\"br0\">)</span><span class=\"br0\">)</span> s<br/>                           <span class=\"br0\">(</span>- t0 <span class=\"br0\">(</span>* q t<span class=\"br0\">)</span><span class=\"br0\">)</span> t<br/>                           <span class=\"br0\">(</span>- r0 <span class=\"br0\">(</span>* q r<span class=\"br0\">)</span><span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn chinese_remainder<br/>  <span class=\"st0\">\" Main routine to return the chinese remainder \"</span><br/>  <span class=\"br0\">[</span>n a<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>prod <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> * </span>n<span class=\"br0\">)</span><br/>        reducer <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>sum <span class=\"br0\">[</span>n_i a_i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>p <span class=\"br0\">(</span>quot prod n_i<span class=\"br0\">)</span>           <span class=\"co1\">; p = prod / n_i</span><br/>                        egcd <span class=\"br0\">(</span>extended-gcd p n_i<span class=\"br0\">)</span>   <span class=\"co1\">; Extended gcd</span><br/>                        inv_p <span class=\"br0\">(</span>second egcd<span class=\"br0\">)</span><span class=\"br0\">]</span>        <span class=\"co1\">; Second item is the inverse</span><br/>                    <span class=\"br0\">(</span>+ sum <span class=\"br0\">(</span>* a_i inv_p p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sum-prod <span class=\"br0\">(</span>reduce reducer <span class=\"nu0\">0</span> <span class=\"br0\">(</span>map vector n a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">; Replaces the Python for loop to sum</span><br/>                                                      <span class=\"co1\">; (map vector n a) is same as</span><br/>        <span class=\"co1\">;                                            \u00a0; Python's version Zip (n, a)</span><br/>    <span class=\"br0\">(</span>mod sum-prod prod<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                             <span class=\"co1\">; Result line</span><br/>\u00a0<br/><span class=\"br0\">(</span>def n <span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def a <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>chinese_remainder n a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Coffeescript", "loc": 20, "block": "<pre class=\"coffeescript highlighted_source\">crt = <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tsum = <span class=\"nu0\">0</span><br/>\tprod = n.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"sy0\">*</span>c<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">[</span>ni<span class=\"sy0\">,</span>ai<span class=\"br0\">]</span> <span class=\"kw1\">in</span> _.<span class=\"me1\">zip</span> n<span class=\"sy0\">,</span>a<br/>\t\tp = prod <span class=\"sy0\">//</span> ni<br/>\t\tsum <span class=\"sy0\">+</span>= ai <span class=\"sy0\">*</span> p <span class=\"sy0\">*</span> mulInv p<span class=\"sy0\">,</span>ni<br/>\tsum <span class=\"sy0\">%</span> prod<br/>\u00a0<br/>mulInv = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tb0 = b<br/>\t<span class=\"br0\">[</span>x0<span class=\"sy0\">,</span>x1<span class=\"br0\">]</span> = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> b==<span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>\t\tq = a <span class=\"sy0\">//</span> b<br/>\t\t<span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span> = <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">%</span> b<span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">[</span>x0<span class=\"sy0\">,</span>x1<span class=\"br0\">]</span> = <span class=\"br0\">[</span>x1<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>x0<span class=\"sy0\">,</span> x0<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> x1 <span class=\"sy0\">+</span>= b0<br/>\tx1<br/>\u00a0<br/>print crt <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> chinese-remainder <span class=\"br0\">(</span>am<span class=\"br0\">)</span><br/><span class=\"st0\">\"Calculates the Chinese Remainder for the given set of integer modulo pairs.<br/> Note: All the ni and the N must be coprimes.\"</span><br/>  <span class=\"br0\">(</span>loop <span class=\"sy0\">:</span><span class=\"me1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">.</span> m<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">in</span> am<br/>        <span class=\"sy0\">:</span><span class=\"me1\">with</span> mtot <span class=\"sy0\">=</span> <span class=\"br0\">(</span>reduce #'* <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> X<span class=\"br0\">)</span><span class=\"br0\">)</span> am<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span><span class=\"me1\">with</span> sum  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy0\">:</span><span class=\"me1\">finally</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>mod sum mtot<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span><span class=\"kw1\">do</span><br/>   <span class=\"br0\">(</span>incf sum <span class=\"br0\">(</span>* a <span class=\"br0\">(</span>invmod <span class=\"br0\">(</span>/ mtot m<span class=\"br0\">)</span> m<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ mtot m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 40, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T chineseRemainder<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc<br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> a.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> T mulInv<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T a<span class=\"sy0\">,</span> T b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> b0 <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        T x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> T<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> q <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> amb <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span><br/>            a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> amb<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> xqx <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<span class=\"sy0\">;</span><br/>            x1 <span class=\"sy0\">=</span> x0<span class=\"sy0\">;</span><br/>            x0 <span class=\"sy0\">=</span> xqx<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            x1 <span class=\"sy0\">+=</span> b0<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x1<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> prod <span class=\"sy0\">=</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    T p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> sm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> ni<span class=\"sy0\">;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        p <span class=\"sy0\">=</span> prod <span class=\"sy0\">/</span> ni<span class=\"sy0\">;</span><br/>        sm <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mulInv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> ni<span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sm <span class=\"sy0\">%</span> prod<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>              a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    chineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/>math.lib v1.10 \u00ae EchoLisp<br/>Lib: math.lib loaded.<br/>\u00a0<br/><span class=\"br0\">(</span>crt<span class=\"sy0\">-</span>solve '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">23</span><br/><span class=\"br0\">(</span>crt<span class=\"sy0\">-</span>solve '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">1005</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\ud83d\udca5 error: mod<span class=\"br0\">[</span>i<span class=\"br0\">]</span> must be co<span class=\"sy0\">-</span>primes\u00a0: assertion failed\u00a0: <span class=\"nu0\">1005</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule Chinese do<br/>  def remainder(mods, remainders) do<br/>    max = Enum.reduce(mods, fn x,acc -&gt; x*acc end)<br/>    Enum.zip(mods, remainders)<br/>    |&gt; Enum.map(fn {m,r} -&gt; Enum.take_every(r..max, m) |&gt; MapSet.new end)<br/>    |&gt; Enum.reduce(fn set,acc -&gt; MapSet.intersection(set, acc) end)<br/>    |&gt; MapSet.to_list<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect Chinese.remainder([3,5,7], [2,3,2])<br/>IO.inspect Chinese.remainder([10,4,9], [11,22,19])<br/>IO.inspect Chinese.remainder([11,12,13], [10,4,12])</pre>"}, {"lang": "Erlang", "loc": 41, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>crt<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"sy1\">,</span> <span class=\"br0\">[</span>zip<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> unzip<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> foldl<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> sum<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>egcd<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> mod<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> mod_inv<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> chinese_remainder<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">egcd</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">egcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">egcd</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span><span class=\"re5\">A</span> <span class=\"kw2\">div</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">mod_inv</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">egcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span><br/>        <span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re5\">Y</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"sy1\">;</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"me1\">undefined</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">mod</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">X</span> <span class=\"sy3\">=</span> <span class=\"re5\">A</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span><br/>        <span class=\"re5\">X</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">M</span><span class=\"sy1\">;</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">calc_inverses</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">calc_inverses</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">N</span> | <span class=\"re5\">Ns</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">M</span> | <span class=\"re5\">Ms</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">mod_inv</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        undefined <span class=\"sy1\">-&gt;</span> <span class=\"me1\">undefined</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">Inv</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">Inv</span> | <span class=\"re3\">calc_inverses</span><span class=\"br0\">(</span><span class=\"re5\">Ns</span><span class=\"sy1\">,</span> <span class=\"re5\">Ms</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">chinese_remainder</span><span class=\"br0\">(</span><span class=\"re5\">Congruences</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Residues</span><span class=\"sy1\">,</span> <span class=\"re5\">Modulii</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">unzip</span><span class=\"br0\">(</span><span class=\"re5\">Congruences</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">ModPI</span> <span class=\"sy3\">=</span> <span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">B</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Modulii</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">CRT_Modulii</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">ModPI</span> <span class=\"kw2\">div</span> <span class=\"re5\">M</span> <span class=\"sy3\">||</span> <span class=\"re5\">M</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Modulii</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">calc_inverses</span><span class=\"br0\">(</span><span class=\"re5\">CRT_Modulii</span><span class=\"sy1\">,</span> <span class=\"re5\">Modulii</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        undefined <span class=\"sy1\">-&gt;</span> <span class=\"me1\">undefined</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">Inverses</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">Solution</span> <span class=\"sy3\">=</span> <span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">B</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">CRT_Modulii</span><span class=\"sy1\">,</span><br/>                                    <span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">B</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Residues</span><span class=\"sy1\">,</span> <span class=\"re5\">Inverses</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re3\">mod</span><span class=\"br0\">(</span><span class=\"re5\">Solution</span><span class=\"sy1\">,</span> <span class=\"re5\">ModPI</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> sieve cs x N <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> cs <span class=\"kw1\">with</span><br/>    | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    | <span class=\"br0\">(</span>a,n<span class=\"br0\">)</span>::rest <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> arrProgress <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>x, x<span class=\"sy0\">+</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> x<br/>        <span class=\"kw1\">let</span> firstXmodNequalA <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">tryFind</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">match</span> firstXmodNequalA <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> n arrProgress<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | None <span class=\"sy0\">-&gt;</span> None<br/>        | Some<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> sieve rest x <span class=\"br0\">(</span>N<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>,<span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">12</span>,<span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> congruences <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> cs <span class=\"sy0\">=</span><br/>        congruences<br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>a,n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">%</span> n, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sortBy</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"sy0\">~-</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">let</span> an <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span> cs<br/>    <span class=\"kw1\">match</span> sieve <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tail</span> cs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> an<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> an<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>    | None    <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"no solution\"</span><br/>    | Some<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"result =\u00a0%i\"</span> x<br/><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: math.algebra prettyprint\u00a0;<br/>{ 2 3 2 } { 3 5 7 } chinese-remainder .</pre>"}, {"lang": "Forth", "loc": 39, "block": "<pre class=\"text highlighted_source\">: egcd ( a b -- a b )<br/>    dup 0= IF<br/>        2drop 1 0<br/>    ELSE<br/>        dup -rot /mod               \\ -- b r=a%b q=a/b<br/>        -rot recurse                \\ -- q (s,t) = egcd(b, r)<br/>        &gt;r swap <a class=\"__cf_email__\" data-cfemail=\"601220\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * - r&gt; swap      \\ -- t (s - q*t)<br/>    THEN\u00a0;<br/>\u00a0<br/>: egcd&gt;gcd  ( a b x y -- n )  \\ calculate gcd from egcd<br/>    rot * -rot * +\u00a0;<br/>\u00a0<br/>: mod-inv  ( a m -- a' )     \\ modular inverse with coprime check<br/>    2dup egcd over &gt;r egcd&gt;gcd r&gt; swap 1 &lt;&gt; -24 and throw\u00a0;<br/>\u00a0<br/>: array-product ( adr count -- n )<br/>    1 -rot  cells bounds\u00a0?DO  i @ *  cell +LOOP\u00a0;<br/>\u00a0<br/>: crt-from-array  ( adr1 adr2 count -- n )<br/>    2dup array-product   locals| M count m[] a[] |<br/>    0  \\ result<br/>    count 0 DO<br/>        m[] i cells + @<br/>        dup M swap /<br/>        dup rot mod-inv *<br/>        a[] i cells + @ * +<br/>    LOOP  M mod\u00a0;<br/>\u00a0<br/>create crt-residues[]  10 cells allot<br/>create crt-moduli[]    10 cells allot<br/>\u00a0<br/>: crt ( .... n -- n )  \\ takes pairs of \"n (mod m)\" from stack.<br/>    10 min  locals| n |<br/>    n 0 DO<br/>        crt-moduli[] i cells +\u00a0!<br/>        crt-residues[] i cells +\u00a0!<br/>    LOOP<br/>    crt-residues[] crt-moduli[] n crt-from-array\u00a0;<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 7, "block": "<pre class=\"text highlighted_source\">import integers.modinv<br/>\u00a0<br/>def crt( congruences ) =<br/>    N = product( n | (_, n) &lt;- congruences )<br/>    sum( a*modinv(N/n, n)*N/n | (a, n) &lt;- congruences ) mod N<br/>\u00a0<br/>println( crt([(2, 3), (3, 5), (2, 7)]) )</pre>"}, {"lang": "Go", "loc": 39, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> one <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> crt<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> n <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>n<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> n<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>        p<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> n1<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> x<span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> z <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> n1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> n <span class=\"sy1\">{</span><br/>        q<span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> n1<span class=\"sy1\">)</span><br/>        z<span class=\"sy3\">.</span>GCD<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> &amp;s<span class=\"sy1\">,</span> n1<span class=\"sy1\">,</span> &amp;q<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> z<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>one<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"%d not coprime\"</span><span class=\"sy1\">,</span> n1<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        x<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;x<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;s<span class=\"sy1\">,</span> &amp;q<span class=\"sy1\">)))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy3\">.</span>Mod<span class=\"sy1\">(</span>&amp;x<span class=\"sy1\">,</span> p<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">{</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">),</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">),</span><br/>    <span class=\"sy1\">}</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">{</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">),</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">),</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>crt<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 33, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>zipWithM<span class=\"br0\">)</span><br/>\u00a0<br/>egcd <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>egcd <span class=\"sy0\">_</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>egcd a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t<span class=\"sy0\">,</span> s <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span> <span class=\"sy0\">=</span> egcd b r<br/>    <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a>` b<br/>\u00a0<br/>modInv <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>modInv a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> egcd a b <span class=\"kw1\">of</span><br/>    <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> a <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> Just x<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">-&gt;</span> Nothing<br/>\u00a0<br/>chineseRemainder <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>chineseRemainder residues modulii <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  inverses <span class=\"sy0\">&lt;-</span> zipWithM modInv crtModulii modulii<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` modPI<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> crtModulii <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> residues inverses<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    modPI <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> modulii<br/>    crtModulii <span class=\"sy0\">=</span> <span class=\"br0\">(</span>modPI `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>`<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> modulii<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> chineseRemainder <span class=\"sy0\">&lt;$&gt;</span><br/>  <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> numbers   <span class=\"co1\"># for gcd()</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>cr<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>cr<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">22</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> cr<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">~=</span> gcd<span class=\"br0\">(</span>n<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span>  <span class=\"co1\"># Not pairwise coprime</span><br/>    <span class=\"br0\">(</span>prod <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> sm <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> prod <span class=\"sy0\">*:=</span> <span class=\"sy0\">!</span>n<br/>    <span class=\"kw1\">every</span> p <span class=\"sy0\">:=</span> prod<span class=\"sy0\">/</span><span class=\"br0\">(</span>ni <span class=\"sy0\">:=</span> n<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> sm <span class=\"sy0\">+:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mul_inv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span>ni<span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>    <span class=\"kw1\">return</span> sm<span class=\"sy0\">%</span>prod<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mul_inv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>b0 <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> q <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">)</span><span class=\"sy0\">/</span>b <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>t <span class=\"sy0\">:=</span> a<span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">:=</span> t<span class=\"sy0\">%</span>b<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"sy0\">:=</span> x0<span class=\"sy0\">,</span> x0 <span class=\"sy0\">:=</span> x1<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>t<span class=\"sy0\">,</span> x1 <span class=\"sy0\">:=</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> x1<span class=\"sy0\">+</span>b0 <span class=\"kw1\">else</span> x1<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   crt =: <span class=\"sy0\">(</span><span class=\"nu0\">1</span> + ] - {:@:[ -: {<a class=\"__cf_email__\" data-cfemail=\"daf49a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[ | ]<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span>&amp;<span class=\"nu0\">0</span>@:,:</pre>"}, {"lang": "Java", "loc": 46, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ChineseRemainderTheorem <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> chineseRemainder<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> prod <span class=\"sy0\">=</span> stream<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">*</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> p, sm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p <span class=\"sy0\">=</span> prod <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            sm <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mulInv<span class=\"br0\">(</span>p, n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sm <span class=\"sy0\">%</span> prod<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> mulInv<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> b0 <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> amb <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span><br/>            a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> amb<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> xqx <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<span class=\"sy0\">;</span><br/>            x1 <span class=\"sy0\">=</span> x0<span class=\"sy0\">;</span><br/>            x0 <span class=\"sy0\">=</span> xqx<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            x1 <span class=\"sy0\">+=</span> b0<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> x1<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 31, "block": "<pre class=\"text highlighted_source\"># mul_inv(a;b) returns x where (a * x)\u00a0% b == 1, or else null<br/>def mul_inv(a; b):<br/>\u00a0<br/>  # state: [a, b, x0, x1]<br/>  def iterate:<br/>    .[0] as $a | .[1] as $b<br/>    | if $a &gt; 1 then<br/>        if $b == 0 then null<br/>        else ($a / $b | floor) as $q<br/>           | [$b, ($a\u00a0% $b), (.[3] - ($q * .[2])), .[2]] | iterate<br/>        end<br/>      else .<br/>      end\u00a0;<br/>\u00a0<br/>  if (b == 1) then 1<br/>  else [a,b,0,1] | iterate<br/>       | if . == null then .<br/>         else  .[3] | if . &lt;  0 then . + b else . end<br/>         end<br/>  end;<br/>\u00a0<br/>def chinese_remainder(mods; remainders):<br/>  (reduce mods[] as $i (1; . * $i)) as $prod<br/>  | reduce range(0; mods|length) as $i<br/>      (0;<br/>       ($prod/mods[$i]) as $p<br/>       | mul_inv($p; mods[$i]) as $mi<br/>       | if $mi == null then error(\"nogo: p=\\($p) mods[\\($i)]=\\(mods[$i])\")<br/>         else . + (remainders[$i] * $mi * $p)<br/>         end )<br/>  | .\u00a0% $prod\u00a0;</pre>"}, {"lang": "Julia", "loc": 26, "block": "<pre class=\"text highlighted_source\">function chineseremainder(n::Array{Int}, a::Array{Int})<br/>    sum = 0<br/>    prd = prod(n)<br/>    for (ni, ai) in zip(n, a)<br/>        p   = prd \u00f7 ni<br/>        sum += ai * mulinv(p, ni) * p<br/>    end<br/>    return sum\u00a0% prd<br/>end<br/>\u00a0<br/>function mulinv(a::Int, b::Int)<br/>    @assert(a\u00a0% b\u00a0!= 0, \"$a is multiple of $b\")<br/>    @assert(b\u00a0% a\u00a0!= 0, \"$b is multiple of $a\")<br/>    b0 = b<br/>    x0, x1 = 0, 1<br/>    if b == 1 return 1 end<br/>    while a &gt; 1<br/>        q = a \u00f7 b<br/>        a, b = b, a\u00a0% b<br/>        x0, x1 = x1 - q * x0, x0<br/>    end<br/>    if x1 &lt; 0 x1 += b0 end<br/>    return x1<br/>end<br/>\u00a0<br/>@show chineseremainder([3, 5, 7], [2, 3, 2])</pre>"}, {"lang": "Kotlin", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><span class=\"coMULTI\">/* returns x where (a * x)\u00a0% b == 1 */</span><br/>fun multInv<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> aa <span class=\"sy0\">=</span> a<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bb <span class=\"sy0\">=</span> b<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>aa <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> aa / bb<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> bb<br/>        bb <span class=\"sy0\">=</span> aa <span class=\"sy0\">%</span> bb<br/>        aa <span class=\"sy0\">=</span> t<br/>        t <span class=\"sy0\">=</span> x0<br/>        x0 <span class=\"sy0\">=</span> x1 - q <span class=\"sy0\">*</span> x0<br/>        x1 <span class=\"sy0\">=</span> t<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 +<span class=\"sy0\">=</span> b<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> x1<br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun chineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> IntArray, a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod <span class=\"sy0\">=</span> n.<span class=\"me1\">fold</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, i -<span class=\"sy0\">&gt;</span> acc <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> prod / n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        sum +<span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> multInv<span class=\"br0\">(</span>p, n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum <span class=\"sy0\">%</span> prod<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 46, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Taken from https://www.rosettacode.org/wiki/Sum_and_product_of_an_array#Lua</span><br/><span class=\"kw1\">function</span> prodf<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> a <span class=\"kw2\">and</span> a <span class=\"sy0\">*</span> prodf<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> prodt<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> prodf<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mulInv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> b0 <span class=\"sy0\">=</span> b<br/>    <span class=\"kw1\">local</span> x0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">local</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> q <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>a <span class=\"sy0\">/</span> b<span class=\"br0\">)</span><br/>        <span class=\"kw1\">local</span> amb <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>fmod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> amb<br/>        <span class=\"kw1\">local</span> xqx <span class=\"sy0\">=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0<br/>        x1 <span class=\"sy0\">=</span> x0<br/>        x0 <span class=\"sy0\">=</span> xqx<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        x1 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> b0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> x1<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> chineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> prod <span class=\"sy0\">=</span> prodt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> p<br/>    <span class=\"kw1\">local</span> sm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>n <span class=\"kw1\">do</span><br/>        p <span class=\"sy0\">=</span> prod <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        sm <span class=\"sy0\">=</span> sm <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mulInv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>fmod<span class=\"br0\">(</span>sm<span class=\"sy0\">,</span> prod<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/>a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"kw3\">io.write</span><span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt; chrem( [2, 3, 2], [3, 5, 7] );<br/>                                           23<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">ChineseRemainder[{2, 3, 2}, {3, 5, 7}]<br/>23</pre>"}, {"lang": "MATLAB / Octave", "loc": 4, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> f = chineseRemainder<span class=\"br0\">(</span>r, m<span class=\"br0\">)</span><br/>  s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/prod.html\"><span class=\"kw2\">prod</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span> ./ m;<br/>  <span class=\"br0\">[</span>~, t<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/gcd.html\"><span class=\"kw2\">gcd</span></a><span class=\"br0\">(</span>s, m<span class=\"br0\">)</span>;<br/>  f = s .* t * r';</pre>"}, {"lang": "Modula-2", "loc": 69, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> CRT;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WriteInt<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> MulInv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>    b0<span class=\"sy0\">,</span>x0<span class=\"sy0\">,</span>x1<span class=\"sy0\">,</span>q<span class=\"sy0\">,</span>amb<span class=\"sy0\">,</span>xqx <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    b0 <span class=\"sy0\">:=</span> b;<br/>    x0 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    x1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> a&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        q <span class=\"sy0\">:=</span> a <span class=\"kw1\">DIV</span> b;<br/>        amb <span class=\"sy0\">:=</span> a <span class=\"kw1\">MOD</span> b;<br/>        a <span class=\"sy0\">:=</span> b;<br/>        b <span class=\"sy0\">:=</span> amb;<br/>        xqx <span class=\"sy0\">:=</span> x1 <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> x0;<br/>        x1 <span class=\"sy0\">:=</span> x0;<br/>        x0 <span class=\"sy0\">:=</span> xqx<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">IF</span> x1&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        x1 <span class=\"sy0\">:=</span> x1 <span class=\"sy0\">+</span> b0<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> x1<br/><span class=\"kw1\">END</span> MulInv;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ChineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>a <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>    prod<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>sm <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    prod <span class=\"sy0\">:=</span> n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        prod <span class=\"sy0\">:=</span> prod <span class=\"sy0\">*</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    sm <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        p <span class=\"sy0\">:=</span> prod <span class=\"kw1\">DIV</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>        sm <span class=\"sy0\">:=</span> sm <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> MulInv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> sm <span class=\"kw1\">MOD</span> prod<br/><span class=\"kw1\">END</span> ChineseRemainder;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> TA <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> n<span class=\"sy0\">,</span>a <span class=\"sy0\">:</span> TA;<br/><span class=\"kw1\">BEGIN</span><br/>    n <span class=\"sy0\">:=</span> TA<span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span>;<br/>    a <span class=\"sy0\">:=</span> TA<span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span>;<br/>    WriteInt<span class=\"br0\">(</span>ChineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> CRT.</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">proc mulInv(a0, b0): int =<br/>  var (a, b, x0) = (a0, b0, 0)<br/>  result = 1<br/>  if b == 1: return<br/>  while a &gt; 1:<br/>    let q = a div b<br/>    a = a mod b<br/>    swap a, b<br/>    result = result - q * x0<br/>    swap x0, result<br/>  if result &lt; 0: result += b0<br/>\u00a0<br/>proc chineseRemainder[T](n, a: T): int =<br/>  var prod = 1<br/>  var sum = 0<br/>  for x in n: prod *= x<br/>\u00a0<br/>  for i in 0 .. &lt;n.len:<br/>    let p = prod div n[i]<br/>    sum += a[i] * mulInv(p, n[i]) * p<br/>\u00a0<br/>  sum mod prod<br/>\u00a0<br/>echo chineseRemainder([3,5,7], [2,3,2])</pre>"}, {"lang": "OCaml", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Core<span class=\"sy0\">.</span>Std<br/><span class=\"kw1\">open</span> <span class=\"kw1\">Option</span><span class=\"sy0\">.</span>Monad_infix<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> egcd a b <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> q <span class=\"sy0\">=</span> a<span class=\"sy0\">/</span>b <span class=\"kw1\">and</span> r <span class=\"sy0\">=</span> a <span class=\"kw1\">mod</span> b <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> <span class=\"br0\">(</span>s, t<span class=\"br0\">)</span> <span class=\"sy0\">=</span> egcd b r <span class=\"kw1\">in</span><br/>         <span class=\"br0\">(</span>t, s <span class=\"sy0\">-</span> q<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> mod_inv a b <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> egcd a b <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> a<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Some x <span class=\"kw1\">else</span> None<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> calc_inverses ns ms <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> list_inverses ns ms l <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">match</span> <span class=\"br0\">(</span>ns, ms<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>         <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Some l<br/>         <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, _<span class=\"br0\">)</span><br/>         <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> assert <span class=\"kw1\">false</span><br/>         <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n<span class=\"sy0\">::</span>ns, m<span class=\"sy0\">::</span>ms<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> inv <span class=\"sy0\">=</span> mod_inv n m <span class=\"kw1\">in</span><br/>               <span class=\"kw1\">match</span> inv <span class=\"kw1\">with</span><br/>                  <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> None<br/>                  <span class=\"sy0\">|</span> Some v <span class=\"sy0\">-&gt;</span> list_inverses ns ms <span class=\"br0\">(</span>v<span class=\"sy0\">::</span>l<span class=\"br0\">)</span><br/>   <span class=\"kw1\">in</span><br/>      list_inverses ns ms <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"kw1\">fun</span> l <span class=\"sy0\">-&gt;</span> Some <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev l<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> chinese_remainder congruences <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> <span class=\"br0\">(</span>residues, modulii<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>unzip congruences <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> mod_pi <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>reduce_exn modulii <span class=\"re1\">~f</span><span class=\"sy0\">:</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> crt_modulii <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map modulii <span class=\"re1\">~f</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> m <span class=\"sy0\">-&gt;</span> mod_pi <span class=\"sy0\">/</span> m<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   calc_inverses crt_modulii modulii <span class=\"sy0\">&gt;&gt;=</span><br/>      <span class=\"kw1\">fun</span> inverses <span class=\"sy0\">-&gt;</span><br/>         Some <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map3_exn residues inverses crt_modulii <span class=\"re1\">~f</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> a b c <span class=\"sy0\">-&gt;</span> a<span class=\"sy0\">*</span>b<span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/>               <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>reduce_exn <span class=\"re1\">~f</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>               <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> n<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> n <span class=\"kw1\">mod</span> mod_pi <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">'</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> n<span class=\"sy0\">'</span> <span class=\"sy0\">+</span> mod_pi <span class=\"kw1\">else</span> n<span class=\"sy0\">'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 8, "block": "<pre class=\"parigp highlighted_source\">chivec<span class=\"br0\">(</span>residues<span class=\"sy0\">,</span> moduli<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>m<span class=\"sy0\">=</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#residues<span class=\"sy0\">,</span><br/>    m<span class=\"sy0\">=</span><span class=\"kw1\">chinese</span><span class=\"br0\">(</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span>residues<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>moduli<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>m<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">lift</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>chivec<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/chinese/</span><span class=\"sy0\">;</span><br/>say chinese<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># returns x where (a * x)\u00a0% b == 1</span><br/><span class=\"kw2\">sub</span> mul<span class=\"sy0\">-</span>inv<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b0</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>\t<span class=\"re0\">$b</span><span class=\"sy0\">,</span><br/>\t<span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">div</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">*@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$b0</span> <span class=\"kw1\">if</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> chinese<span class=\"sy0\">-</span>remainder<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> \\N <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"re0\">@n</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">*</span><span class=\"re0\">@a</span> <span class=\"br0\">{</span><br/>\tN R<span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> \\p <span class=\"sy0\">=</span> N <span class=\"kw1\">div</span> <span class=\"re0\">@n</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> mul<span class=\"sy0\">-</span>inv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"re0\">@n</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>\t<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">@n</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> chinese<span class=\"sy0\">-</span>remainder<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 29, "block": "<pre class=\"text highlighted_source\">(de modinv (A B)<br/>   (let (B0 B  X0 0  X1 1  Q 0  T1 0)<br/>      (while (&lt; 1 A)<br/>         (setq<br/>            Q (/ A B)<br/>            T1 B<br/>            B (% A B)<br/>            A T1<br/>            T1 X0<br/>            X0 (- X1 (* Q X0))<br/>            X1 T1 ) )<br/>      (if (lt0 X1) (+ X1 B0) X1) ) )<br/>\u00a0<br/>(de chinrem (N A)<br/>   (let P (apply * N)<br/>      (%<br/>         (sum<br/>            '((N A)<br/>               (setq T1 (/ P N))<br/>               (* A (modinv T1 N) T1) )<br/>            N<br/>            A )<br/>         P ) ) )<br/>\u00a0<br/>(println<br/>   (chinrem (3 5 7) (2 3 2))<br/>   (chinrem (11 12 13) (10 4 12)) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PureBasic", "loc": 77, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DisableDebugger</span><br/><span class=\"kw1\">DataSection</span><br/>  LBL_n1:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>    <br/>  LBL_a1:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>    <br/>  LBL_n2:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">11</span>,<span class=\"nu0\">12</span>,<span class=\"nu0\">13</span><br/>  LBL_a2:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">10</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">12</span><br/>  LBL_n3:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">10</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">9</span><br/>  LBL_a3:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">11</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">19</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> ErrorHdl<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>ErrorMessage<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> PrintData<span class=\"br0\">(</span>n,a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Idx.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> n<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"sy0\">&lt;</span>a<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"( \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>PeekI<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" . \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>PeekI<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" )\"</span><span class=\"br0\">)</span><br/>    Idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"]\\nx = \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i Produkt_n<span class=\"br0\">(</span>n_Adr.i,a_Adr.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> p.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> n_Adr<span class=\"sy0\">&lt;</span>a_Adr<br/>    p<span class=\"sy0\">*</span>PeekI<span class=\"br0\">(</span>n_Adr<span class=\"br0\">)</span><br/>    n_Adr<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> p<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i Eval_x1<span class=\"br0\">(</span>a.i,b.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> b0.i<span class=\"sy0\">=</span>b, x0.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, x1.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, q.i, t.i<br/>  <span class=\"kw1\">If</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> x1\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw1\">While</span> a<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><br/>    q<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span>a<span class=\"sy0\">/</span>b<span class=\"br0\">)</span><br/>    t<span class=\"sy0\">=</span>b\u00a0: b<span class=\"sy0\">=</span>a<span class=\"sy0\">%</span>b\u00a0: a<span class=\"sy0\">=</span>t<br/>    t<span class=\"sy0\">=</span>x0\u00a0: x0<span class=\"sy0\">=</span>x1<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>x0\u00a0: x1<span class=\"sy0\">=</span>t<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">If</span> x1<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> x1<span class=\"sy0\">+</span>b0\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> x1  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i ChineseRem<span class=\"br0\">(</span>n_Adr.i,a_Adr.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> prod.i<span class=\"sy0\">=</span>Produkt_n<span class=\"br0\">(</span>n_Adr,a_Adr<span class=\"br0\">)</span>, a.i, b.i, p.i, Idx.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, sum.i<br/>  <span class=\"kw1\">While</span> n_Adr<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"sy0\">&lt;</span>a_Adr  <br/>    b<span class=\"sy0\">=</span>PeekI<span class=\"br0\">(</span>n_Adr<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"br0\">)</span><br/>    p<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span>prod<span class=\"sy0\">/</span>b<span class=\"br0\">)</span>\u00a0: a<span class=\"sy0\">=</span>p <br/>    sum<span class=\"sy0\">+</span>PeekI<span class=\"br0\">(</span>a_Adr<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"sy0\">*</span>Idx<span class=\"br0\">)</span><span class=\"sy0\">*</span>Eval_x1<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><span class=\"sy0\">*</span>p<br/>    Idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<span class=\"sy0\">%</span>prod<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>OnErrorCall<span class=\"br0\">(</span>@ErrorHdl<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Chinese remainder theorem\"</span><span class=\"br0\">)</span><br/>PrintData<span class=\"br0\">(</span>?LBL_n1,?LBL_a1<span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ChineseRem<span class=\"br0\">(</span>?LBL_n1,?LBL_a1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>PrintData<span class=\"br0\">(</span>?LBL_n2,?LBL_a2<span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ChineseRem<span class=\"br0\">(</span>?LBL_n2,?LBL_a2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>PrintData<span class=\"br0\">(</span>?LBL_n3,?LBL_a3<span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ChineseRem<span class=\"br0\">(</span>?LBL_n3,?LBL_a3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Python 2.7</span><br/><span class=\"kw1\">def</span> chinese_remainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    prod <span class=\"sy0\">=</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> a<span class=\"sy0\">,</span> b: a*b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> n_i<span class=\"sy0\">,</span> a_i <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span>:<br/>        p <span class=\"sy0\">=</span> prod / n_i<br/>        <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> a_i * mul_inv<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> n_i<span class=\"br0\">)</span> * p<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span>\u00a0% prod<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> mul_inv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    b0 <span class=\"sy0\">=</span> b<br/>    x0<span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        q <span class=\"sy0\">=</span> a / b<br/>        a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> a%b<br/>        x0<span class=\"sy0\">,</span> x1 <span class=\"sy0\">=</span> x1 - q * x0<span class=\"sy0\">,</span> x0<br/>    <span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: x1 +<span class=\"sy0\">=</span> b0<br/>    <span class=\"kw1\">return</span> x1<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>    a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span> chinese_remainder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 44, "block": "<pre class=\"rsplus highlighted_source\">mul_inv <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  b0 <span class=\"sy0\">&lt;-</span> b<br/>  x0 <span class=\"sy0\">&lt;-</span> 0L<br/>  x1 <span class=\"sy0\">&lt;-</span> 1L<br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>1L<span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/while.html\"><span class=\"kw2\">while</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/q.html\"><span class=\"kw2\">q</span></a> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/as.integer.html\"><span class=\"kw2\">as.<span class=\"me1\">integer</span></span></a><span class=\"br0\">(</span>a<span class=\"sy0\">/</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/t.html\"><span class=\"kw2\">t</span></a> <span class=\"sy0\">&lt;-</span> b<br/>    b <span class=\"sy0\">&lt;-</span> a <span class=\"sy0\">%%</span> b<br/>    a <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/t.html\"><span class=\"kw2\">t</span></a><br/>\u00a0<br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/t.html\"><span class=\"kw2\">t</span></a> <span class=\"sy0\">&lt;-</span> x0<br/>    x0 <span class=\"sy0\">&lt;-</span> x1 <span class=\"sy0\">-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/q.html\"><span class=\"kw2\">q</span></a><span class=\"sy0\">*</span>x0<br/>    x1 <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/t.html\"><span class=\"kw2\">t</span></a><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 <span class=\"sy0\">&lt;-</span> x1 <span class=\"sy0\">+</span> b0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>x1<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>chinese_remainder <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  len <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prod.html\"><span class=\"kw2\">prod</span></a> <span class=\"sy0\">&lt;-</span> 1L<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a> <span class=\"sy0\">&lt;-</span> 0L<br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html\"><span class=\"kw2\">for</span></a> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>len<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prod.html\"><span class=\"kw2\">prod</span></a> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prod.html\"><span class=\"kw2\">prod</span></a> <span class=\"sy0\">*</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html\"><span class=\"kw2\">for</span></a> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    p <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/as.integer.html\"><span class=\"kw2\">as.<span class=\"me1\">integer</span></span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prod.html\"><span class=\"kw2\">prod</span></a> <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mul_inv<span class=\"br0\">(</span>p, n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a> <span class=\"sy0\">%%</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prod.html\"><span class=\"kw2\">prod</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>n <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span>3L, 5L, 7L<span class=\"br0\">)</span><br/>a <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span>2L, 3L, 2L<span class=\"br0\">)</span><br/>\u00a0<br/>chinese_remainder<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require (only-in math/number-theory solve-chinese))<br/>(define as '(2 3 2))<br/>(define ns '(3 5 7))<br/>(solve-chinese as ns)</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates  Sun Tzu's  (or Sunzi's)  Chinese Remainder  Theorem.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> Ns As <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> Ns==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> Ns==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> Ns = <span class=\"st0\">'3,5,7'</span>           <span class=\"coMULTI\">/*Ns not specified?   Then use default.*/</span><br/><span class=\"kw1\">if</span> As==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> As==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> As = <span class=\"st0\">'2,3,2'</span>           <span class=\"coMULTI\">/*As  \"      \"          \"   \"      \"   */</span><br/>       <span class=\"kw1\">say</span> <span class=\"st0\">'Ns: '</span> Ns<br/>       <span class=\"kw1\">say</span> <span class=\"st0\">'As: '</span> As;                   <span class=\"kw1\">say</span><br/>Ns=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>Ns, , <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>Ns<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*elide any superfluous blanks from N's*/</span><br/>As=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>As, , <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  _=<span class=\"kw6\">words</span><span class=\"br0\">(</span>As<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*  \"    \"       \"        \"      \"  A's*/</span><br/><span class=\"kw1\">if</span> #<span class=\"sy0\">\\</span>==_   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span>  <span class=\"st0\">\"size of number sets don't match.\"</span>;   <span class=\"kw1\">exit</span> <span class=\"nu0\">131</span>;    <span class=\"kw3\">end</span><br/><span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span>  <span class=\"st0\">\"size of the  N  set isn't valid.\"</span>;   <span class=\"kw1\">exit</span> <span class=\"nu0\">132</span>;    <span class=\"kw3\">end</span><br/><span class=\"kw1\">if</span> _==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span>  <span class=\"st0\">\"size of the  A  set isn't valid.\"</span>;   <span class=\"kw1\">exit</span> <span class=\"nu0\">133</span>;    <span class=\"kw3\">end</span><br/>N=<span class=\"nu0\">1</span>                                              <span class=\"coMULTI\">/*the product\u2500to\u2500be  for  prod(n.j).   */</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                              <span class=\"coMULTI\">/*process each number for  As  and Ns. */</span><br/>      n<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Ns,j<span class=\"br0\">)</span>;  N=N<span class=\"sy0\">*</span>n<span class=\"sy0\">.</span>j                   <span class=\"coMULTI\">/*get an  N.j  and calculate product.  */</span><br/>      a<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>As,j<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/* \"   \"  A.j  from the  As  list.     */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span>    x=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                           <span class=\"coMULTI\">/*use a simple algebraic method.       */</span><br/>         <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                           <span class=\"coMULTI\">/*process each   N.i  and  A.i  number.*/</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>n<span class=\"sy0\">.</span>i<span class=\"sy0\">\\</span>==a<span class=\"sy0\">.</span>i  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> x         <span class=\"coMULTI\">/*is modulus correct for the number X\u00a0?*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>                             <span class=\"coMULTI\">/* [\u2191]  limit solution to the product. */</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'found a solution with X='</span>   x         <span class=\"coMULTI\">/*display one possible solution.       */</span><br/>      <span class=\"kw1\">exit</span>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/>      <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*x*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'no solution found.'</span>                         <span class=\"coMULTI\">/*oops, announce that solution \u00ac found.*/</span></pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> chinese_remainder<span class=\"br0\">(</span>mods, remainders<span class=\"br0\">)</span><br/>  max = mods.<span class=\"me1\">inject</span><span class=\"br0\">(</span>\u00a0:<span class=\"sy0\">*</span> <span class=\"br0\">)</span>                            <br/>  series = remainders.<span class=\"me1\">zip</span><span class=\"br0\">(</span> mods <span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>r,m<span class=\"sy0\">|</span> r.<span class=\"me1\">step</span><span class=\"br0\">(</span> max, m <span class=\"br0\">)</span>.<span class=\"me1\">to_a</span> <span class=\"br0\">}</span> <br/>  series.<span class=\"me1\">inject</span><span class=\"br0\">(</span>\u00a0:<span class=\"sy0\">&amp;</span> <span class=\"br0\">)</span>.<span class=\"me1\">first</span> <span class=\"co1\">#returns nil when empty</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> chinese_remainder<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>     <span class=\"co1\">#=&gt; 23</span><br/><span class=\"kw3\">p</span> chinese_remainder<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">11</span>,<span class=\"nu0\">22</span>,<span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">#=&gt; nil</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">fn mul_inv(mut a: i32,mut b: i32)-&gt; i32<br/>\t{ let b0=b;let mut t;let mut q;<br/>\t  let mut x0=0;let mut x1=1;<br/>\t  if b==1<br/>\t\t{return 1;<br/>\t\t}<br/>\t  while a&gt;1<br/>\t\t{ q=a/b;<br/>\t\t  t=b;<br/>\t\t  b=a%b;<br/>\t\t  a=t;<br/>\t\t  t=x0;<br/>\t\t  x0=x1-q*x0;<br/>\t\t  x1=t;<br/>\t\t}<br/>\t  if x1&lt;0<br/>\t\t{x1+=b0;<br/>\t\t}<br/>\t\tx1<br/>\t}<br/>\u00a0<br/>fn chinese_remainder(n: &amp;mut[i32],a: &amp;mut[i32],len: usize)-&gt;i32<br/>\t{<br/>\t\tlet mut p=0;let mut prod=1;let mut sum=0;<br/>\t\tfor i in 0..len<br/>\t\t { prod*=n[i];<br/>\t\t }<br/>\t\tfor i in 0..len<br/>\t\t { p=prod/n[i];<br/>\t\t   sum += a[i]*mul_inv(p, n[i])*p;<br/>\t\t }<br/>\t\tsum%prod<br/>\t}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>\u00a0<br/>    let mut n = [3,5,7];<br/>\tlet mut a = [2,3,2];<br/>\tlet s = a.len(); <br/>    println!(\"{}\",chinese_remainder(&amp;mut n,&amp;mut a,s));<br/>\u00a0<br/>}</pre>"}, {"lang": "Scala", "loc": 41, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"br0\">{</span>Success, Try<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ChineseRemainderTheorem <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> chineseRemainder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, a<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> a.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod <span class=\"sy0\">=</span> n.<span class=\"me1\">product</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iter<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, a<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, sm<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mulInv<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, x0<span class=\"sy0\">:</span> Int, x1<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> loop<span class=\"br0\">(</span>b, a <span class=\"sy0\">%</span> b, x1 - <span class=\"br0\">(</span>a / b<span class=\"br0\">)</span> <span class=\"sy0\">*</span> x0, x0<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> x1<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x1 <span class=\"sy0\">=</span> loop<span class=\"br0\">(</span>a, b, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> x1 + b <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> x1<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">nonEmpty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> prod / n.<span class=\"me1\">head</span><br/>\u00a0<br/>        iter<span class=\"br0\">(</span>n.<span class=\"me1\">tail</span>, a.<span class=\"me1\">tail</span>, sm + a.<span class=\"me1\">head</span> <span class=\"sy0\">*</span> mulInv<span class=\"br0\">(</span>p, n.<span class=\"me1\">head</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> p<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> sm<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Try <span class=\"br0\">{</span><br/>      iter<span class=\"br0\">(</span>n, a, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> prod<br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Success<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>          <span class=\"sy0\">=&gt;</span> None<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>chineseRemainder<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span>, List<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 24, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func integer: modInverse (in integer: a, in integer: b) is<br/>  return ord(modInverse(bigInteger conv a, bigInteger conv b));<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array integer: n is [] (3, 5, 7);<br/>    const array integer: a is [] (2, 3, 2);<br/>    var integer: num is 0;<br/>    var integer: prod is 1;<br/>    var integer: sum is 0;<br/>    var integer: index is 0;<br/>  begin<br/>    for num range n do<br/>      prod *:= num;<br/>    end for;<br/>    for key index range a do<br/>      num\u00a0:= prod div n[index];<br/>      sum +:= a[index] * modInverse(num, n[index]) * num;<br/>    end for;<br/>    writeln(sum mod prod);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func chinese_remainder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var N = n.<span class=\"me1\">prod</span><br/>    func <span class=\"br0\">(</span><span class=\"sy0\">*</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n.<span class=\"me1\">range</span>.<span class=\"me1\">sum</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>            var <span class=\"kw3\">p</span> = <span class=\"br0\">(</span>N <span class=\"sy0\">/</span> n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"kw3\">p</span>.<span class=\"me1\">invmod</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">p</span><br/>        <span class=\"br0\">}</span> <span class=\"sy0\">%</span> N<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say chinese_remainder<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Swift", "loc": 106, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>\u00a0<br/>/*<br/> * Function: euclid<br/> * Usage: (r,s) = euclid(m,n)<br/> * --------------------------<br/> * The extended Euclidean algorithm subsequently performs<br/> * Euclidean divisions till the remainder is zero and then<br/> * returns the B\u00e9zout coefficients r and s.<br/> */<br/>\u00a0<br/>func euclid(_ m:Int, _ n:Int) -&gt; (Int,Int) {<br/>    if m\u00a0% n == 0 {<br/>        return (0,1)<br/>    } else {<br/>        let rs = euclid(n\u00a0% m, m)<br/>        let r = rs.1 - rs.0 * (n / m)<br/>        let s = rs.0<br/>\u00a0<br/>        return (r,s)<br/>    }<br/>}<br/>\u00a0<br/>/*<br/> * Function: gcd<br/> * Usage: x = gcd(m,n)<br/> * -------------------<br/> * The greatest common divisor of two numbers a and b<br/> * is expressed by ax + by = gcd(a,b) where x and y are<br/> * the B\u00e9zout coefficients as determined by the extended<br/> * euclidean algorithm.<br/> */<br/>\u00a0<br/>func gcd(_ m:Int, _ n:Int) -&gt; Int {<br/>    let rs = euclid(m, n)<br/>    return m * rs.0 + n * rs.1<br/>}<br/>\u00a0<br/>/*<br/> * Function: coprime<br/> * Usage: truth = coprime(m,n)<br/> * ---------------------------<br/> * If two values are coprime, their greatest common<br/> * divisor is 1.<br/> */<br/>\u00a0<br/>func coprime(_ m:Int, _ n:Int) -&gt; Bool {<br/>    return gcd(m,n) == 1\u00a0? true\u00a0: false<br/>}<br/>\u00a0<br/>coprime(14,26)<br/>//coprime(2,4)<br/>\u00a0<br/>/*<br/> * Function: crt<br/> * Usage: x = crt(a,n)<br/> * -------------------<br/> * The Chinese Remainder Theorem supposes that given the<br/> * integers n_1...n_k that are pairwise co-prime, then for<br/> * any sequence of integers a_1...a_k there exists an integer<br/> * x that solves the system of linear congruences:<br/> *<br/> *   x === a_1 (mod n_1)<br/> *   ...<br/> *   x === a_k (mod n_k)<br/> */<br/>\u00a0<br/>func crt(_ a_i:[Int], _ n_i:[Int]) -&gt; Int {<br/>    // There is no identity operator for elements of [Int].<br/>    // The offset of the elements of an enumerated sequence<br/>    // can be used instead, to determine if two elements of the same<br/>    // array are the same.<br/>    let divs = n_i.enumerated()<br/>\u00a0<br/>    // Check if elements of n_i are pairwise coprime divs.filter{ $0.0 &lt; n.0 }<br/>    divs.forEach{<br/>        n in divs.filter{ $0.0 &lt; n.0 }.forEach{<br/>            assert(coprime(n.1, $0.1))<br/>        }<br/>    }<br/>\u00a0<br/>    // Calculate factor N<br/>    let N = n_i.map{$0}.reduce(1, *)<br/>\u00a0<br/>    // Euclidean algorithm determines s_i (and r_i)<br/>    var s:[Int] = []<br/>\u00a0<br/>    // Using euclidean algorithm to calculate r_i, s_i<br/>    n_i.forEach{ s += [euclid($0, N / $0).1] }<br/>\u00a0<br/>    // Solve for x<br/>    var x = 0<br/>    a_i.enumerated().forEach{<br/>        x += $0.1 * s[$0.0] * N / n_i[$0.0]<br/>    }<br/>\u00a0<br/>    // Return minimal solution<br/>    return x\u00a0% N<br/>}<br/>\u00a0<br/>let a = [2,3,2]<br/>let n = [3,5,7]<br/>\u00a0<br/>let x = crt(a,n)<br/>\u00a0<br/>print(x)</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">mulinv</span> <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> b0 <span class=\"re0\">$b</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> x0 <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> x1 <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> x0 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> - <span class=\"br0\">(</span><span class=\"re0\">$a</span> / <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> x1 <span class=\"re0\">$x0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> a <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">incr</span> x1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> chineseRemainder <span class=\"br0\">{</span>nList aList<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> prod <span class=\"br0\">[</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>::<span class=\"sy0\">*</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$nList</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> n <span class=\"re0\">$nList</span> a <span class=\"re0\">$aList</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> p <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$prod</span> / <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">incr</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">*</span> mulinv<span class=\"br0\">(</span><span class=\"re0\">$p</span>, <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">%</span> <span class=\"re0\">$prod</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>chineseRemainder <span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "uBasic/4tH", "loc": 54, "block": "<pre class=\"text highlighted_source\">@(000) = 3\u00a0: @(001) = 5\u00a0: @(002) = 7<br/>@(100) = 2\u00a0: @(101) = 3\u00a0: @(102) = 2<br/>\u00a0<br/>Print Func (_Chinese_Remainder (3))<br/>\u00a0<br/>' -------------------------------------<br/>\u00a0<br/>@(000) = 11\u00a0: @(001) = 12\u00a0: @(002) = 13<br/>@(100) = 10\u00a0: @(101) = 04\u00a0: @(102) = 12<br/>\u00a0<br/>Print Func (_Chinese_Remainder (3))<br/>\u00a0<br/>' -------------------------------------<br/>\u00a0<br/>End<br/>\u00a0<br/>                                       ' returns x where (a * x)\u00a0% b == 1<br/>_Mul_Inv Param (2)                     ' ( a b -- n)<br/>  Local (4)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"83e0c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"d6b496\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  <a class=\"__cf_email__\" data-cfemail=\"234763\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>  <a class=\"__cf_email__\" data-cfemail=\"98fdd8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>\u00a0<br/>  If <a class=\"__cf_email__\" data-cfemail=\"4f2d0f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 Then Return (1)<br/>\u00a0<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"b4d5f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 1<br/>     <a class=\"__cf_email__\" data-cfemail=\"402600\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"741534\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"bbd9fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>     Push <a class=\"__cf_email__\" data-cfemail=\"a1c3e1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0: <a class=\"__cf_email__\" data-cfemail=\"b1d3f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"86e7c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"cfad8f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0: <a class=\"__cf_email__\" data-cfemail=\"d5b495\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = Pop()<br/>     Push <a class=\"__cf_email__\" data-cfemail=\"731733\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0: <a class=\"__cf_email__\" data-cfemail=\"bfdbff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"187d58\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - <a class=\"__cf_email__\" data-cfemail=\"fc9abc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"d3b793\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0: <a class=\"__cf_email__\" data-cfemail=\"aecbee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = Pop()<br/>  Loop<br/>\u00a0<br/>  If <a class=\"__cf_email__\" data-cfemail=\"2c496c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 0 Then <a class=\"__cf_email__\" data-cfemail=\"bfdaff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"8de8cd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + <a class=\"__cf_email__\" data-cfemail=\"761536\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"5d381d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>\u00a0<br/>\u00a0<br/>_Chinese_Remainder Param (1)           ' ( len -- n)<br/>  Local (5)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"9dffdd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>  <a class=\"__cf_email__\" data-cfemail=\"c5a685\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"412501\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 Step 1 While <a class=\"__cf_email__\" data-cfemail=\"fe9abe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; <a class=\"__cf_email__\" data-cfemail=\"9ffedf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"c4a684\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"d4b694\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * @(<a class=\"__cf_email__\" data-cfemail=\"c2a682\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>  Next<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"5c381c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 Step 1 While <a class=\"__cf_email__\" data-cfemail=\"234763\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; <a class=\"__cf_email__\" data-cfemail=\"761736\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"9cf9dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"97f5d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / @(<a class=\"__cf_email__\" data-cfemail=\"315571\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>    <a class=\"__cf_email__\" data-cfemail=\"3d5e7d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"492a09\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + (@(100 + <a class=\"__cf_email__\" data-cfemail=\"b7d3f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) * Func (_Mul_Inv (<a class=\"__cf_email__\" data-cfemail=\"0d684d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, @(<a class=\"__cf_email__\" data-cfemail=\"1e7a5e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))) * <a class=\"__cf_email__\" data-cfemail=\"2b4e6b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>  Next<br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"ccaf8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"365476\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\"), one=BN(1);<br/>\u00a0<br/>fcn crt(xs,ys){<br/>   p:=xs.reduce('*,BN(1));<br/>   X:=BN(0);<br/>   foreach x,y in (xs.zip(ys)){<br/>      q:=p/x;<br/>      z,s,_:=q.gcdExt(x);<br/>      if(z!=one) throw(Exception.ValueError(\"%d not coprime\".fmt(x)));<br/>      X+=y*s*q;<br/>   }<br/>   return(X\u00a0% p);<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 24, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DIM</span> n<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">30</span> READ n<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">50</span> DATA <span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">2</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">LET</span> prod=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> sum=<span class=\"nu0\">0</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span>: <span class=\"kw1\">LET</span> prod=prod*n<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">120</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">LET</span> p=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>prod/n<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> a=p: <span class=\"kw1\">LET</span> b=n<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">LET</span> sum=sum+a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>*x1*p<br/><span class=\"nu0\">160</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">170</span> <span class=\"kw1\">PRINT</span> FN m<span class=\"br0\">(</span>sum,prod<span class=\"br0\">)</span><br/><span class=\"nu0\">180</span> STOP <br/><span class=\"nu0\">200</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b: <span class=\"co3\">REM Modulus function</span><br/><span class=\"nu0\">1000</span> <span class=\"kw1\">LET</span> b0=b: <span class=\"kw1\">LET</span> x0=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> x1=<span class=\"nu0\">1</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">IF</span> b=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1020</span> <span class=\"kw1\">IF</span> a&lt;=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1100</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">LET</span> q=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> t=b: <span class=\"kw1\">LET</span> b=FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> a=t<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">LET</span> t=x0: <span class=\"kw1\">LET</span> x0=x1-q*x0: <span class=\"kw1\">LET</span> x1=t<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1020</span><br/><span class=\"nu0\">1100</span> <span class=\"kw1\">IF</span> x1&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> x1=x1+b0<br/><span class=\"nu0\">1110</span> <span class=\"kw1\">RETURN</span> </pre>"}]}