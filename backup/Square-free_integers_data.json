{"task": "Square-free_integers", "blocks": [{"lang": "ALGOL 68", "loc": 82, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># count/show some square free numbers                                           #</span><br/>    <span class=\"coMULTI\"># a number is square free if not divisible by any square and so not divisible   #</span><br/>    <span class=\"coMULTI\"># by any squared prime                                                          #</span><br/>    <span class=\"coMULTI\"># to satisfy the task we need to know the primes up to root 1 000 000 000 145   #</span><br/>    <span class=\"coMULTI\"># and the square free numbers up to 1 000 000                                   #</span><br/>    <span class=\"coMULTI\"># sieve the primes                                                              #</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> one trillion <span class=\"sy1\">=</span> <span class=\"kw8\">LENG</span> 1 000 000 <span class=\"sy1\">*</span> <span class=\"kw8\">LENG</span> 1 000 000<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> prime max <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw8\">SHORTEN</span> <span class=\"kw24\">long sqrt</span><span class=\"br0\">(</span> one trillion <span class=\"sy1\">+</span> 145 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> prime max <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> prime<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> prime <span class=\"kw2\">DO</span> prime<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> s <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> prime max <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> prime<span class=\"br0\">[</span> s <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> s <span class=\"sy1\">*</span> s <span class=\"kw2\">BY</span> s <span class=\"kw2\">TO</span> prime max <span class=\"kw2\">DO</span> prime<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sieve the square free integers                                                #</span><br/>    <span class=\"kw3\">INT</span> sf max <span class=\"sy1\">=</span> 1 000 000<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> sf max <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> square free<span class=\"sy1\">;</span><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> square free <span class=\"kw2\">DO</span> square free<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> s <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> sf max <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> prime<span class=\"br0\">[</span> s <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw3\">INT</span> q <span class=\"sy1\">=</span> s <span class=\"sy1\">*</span> s<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> q <span class=\"kw2\">BY</span> q <span class=\"kw2\">TO</span> sf max <span class=\"kw2\">DO</span> square free<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if n is square free, FALSE otherwise                             #</span><br/>    <span class=\"kw4\">PROC</span> is square free <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">IF</span> n <span class=\"sy1\">&lt;=</span> sf max <span class=\"kw2\">THEN</span> square free<span class=\"br0\">[</span> <span class=\"kw8\">SHORTEN</span> n <span class=\"br0\">]</span><br/>         <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># n is larger than the sieve - use trial division                       #</span><br/>            <span class=\"kw3\">INT</span> max factor    <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw8\">SHORTEN</span> <span class=\"kw24\">long sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">BOOL</span> square free <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> f <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> max factor <span class=\"kw2\">WHILE</span> square free <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> prime<span class=\"br0\">[</span> f <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># have a prime                                                  #</span><br/>                    square free <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> n <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span> <span class=\"kw8\">LENG</span> f <span class=\"sy1\">*</span> <span class=\"kw8\">LENG</span> f <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0 <span class=\"br0\">)</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            square free<br/>         <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># is square free #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the count of square free numbers between m and n (inclusive)          #</span><br/>    <span class=\"kw4\">PROC</span> count square free <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> m<span class=\"sy1\">,</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"kw3\">INT</span> count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> m <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> <span class=\"kw2\">IF</span> square free<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> count <span class=\"sy1\">+:=</span> 1 <span class=\"kw2\">FI</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            count<br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># count square free #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># task requirements                                                             #</span><br/>    <span class=\"coMULTI\"># show square free numbers from 1 -&gt; 145                                        #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Square free numbers from 1 to 145\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span>    count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 145 <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> is square free<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>4 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> count <span class=\"kw12\">MOD</span> 20 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show square free numbers from 1 trillion -&gt; one trillion + 145                #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Square free numbers from 1 000 000 000 000 to 1 000 000 000 145\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 145 <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> is square free<span class=\"br0\">(</span> one trillion <span class=\"sy1\">+</span> i <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> one trillion <span class=\"sy1\">+</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>14 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> count <span class=\"kw12\">MOD</span> 5 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show counts of square free numbers                                            #</span><br/>    <span class=\"kw3\">INT</span> sf       100 <span class=\"sy1\">:=</span>              count square free<span class=\"br0\">(</span>       1<span class=\"sy1\">,</span>       100 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"square free numbers between 1 and       100: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sf       100<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> sf     1 000 <span class=\"sy1\">:=</span> sf     100 <span class=\"sy1\">+</span> count square free<span class=\"br0\">(</span>     101<span class=\"sy1\">,</span>     1 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"square free numbers between 1 and     1 000: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sf     1 000<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> sf    10 000 <span class=\"sy1\">:=</span> sf   1 000 <span class=\"sy1\">+</span> count square free<span class=\"br0\">(</span>   1 001<span class=\"sy1\">,</span>    10 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"square free numbers between 1 and    10 000: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sf    10 000<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> sf   100 000 <span class=\"sy1\">:=</span> sf  10 000 <span class=\"sy1\">+</span> count square free<span class=\"br0\">(</span>  10 001<span class=\"sy1\">,</span>   100 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"square free numbers between 1 and   100 000: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sf   100 000<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> sf 1 000 000 <span class=\"sy1\">:=</span> sf 100 000 <span class=\"sy1\">+</span> count square free<span class=\"br0\">(</span> 100 001<span class=\"sy1\">,</span> 1 000 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"square free numbers between 1 and 1 000 000: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sf 1 000 000<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>6 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "C", "loc": 87, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define TRUE 1</span><br/><span class=\"co2\">#define FALSE 0</span><br/><span class=\"co2\">#define TRILLION 1000000000000</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> bool<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> <span class=\"kw4\">uint64</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">uint64</span> limit<span class=\"sy0\">,</span> <span class=\"kw4\">uint64</span> <span class=\"sy0\">*</span>primes<span class=\"sy0\">,</span> <span class=\"kw4\">uint64</span> <span class=\"sy0\">*</span>length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint64</span> i<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> p2<span class=\"sy0\">;</span><br/>    bool <span class=\"sy0\">*</span>c <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>limit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>bool<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* composite = TRUE */</span><br/>    primes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    count  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* no need to process even numbers &gt; 2 */</span><br/>    p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> limit<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> primes<span class=\"br0\">[</span>count<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">*</span>length <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> squareFree<span class=\"br0\">(</span><span class=\"kw4\">uint64</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">uint64</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">uint64</span> <span class=\"sy0\">*</span>results<span class=\"sy0\">,</span> <span class=\"kw4\">uint64</span> <span class=\"sy0\">*</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span>    <br/>    <span class=\"kw4\">uint64</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> np<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> limit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint64</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint64</span> <span class=\"sy0\">*</span>primes <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>limit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    bool add<span class=\"sy0\">;</span><br/>    sieve<span class=\"br0\">(</span>limit<span class=\"sy0\">,</span> primes<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>np<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> from<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> to<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        add <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> np<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p <span class=\"sy0\">=</span> primes<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> p2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                add <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>add<span class=\"br0\">)</span> results<span class=\"br0\">[</span>count<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">*</span>len <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>primes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint64</span> i<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>sf<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* allocate enough memory to deal with all examples */</span><br/>    sf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1000000</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Square-free integers from 1 to 145:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    squareFree<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">145</span><span class=\"sy0\">,</span> sf<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">20</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4lld\"</span><span class=\"sy0\">,</span> sf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Square-free integers from\u00a0%ld to\u00a0%ld:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> TRILLION<span class=\"sy0\">,</span> TRILLION <span class=\"sy0\">+</span> <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    squareFree<span class=\"br0\">(</span>TRILLION<span class=\"sy0\">,</span> TRILLION <span class=\"sy0\">+</span> <span class=\"nu0\">145</span><span class=\"sy0\">,</span> sf<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%14lld\"</span><span class=\"sy0\">,</span> sf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Number of square-free integers:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"nu0\">100000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        squareFree<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> sf<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  from\u00a0%d to\u00a0%d =\u00a0%lld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>   <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 20, "block": "<pre class=\"text highlighted_source\">USING: formatting grouping io kernel math math.functions<br/>math.primes.factors math.ranges sequences sets\u00a0;<br/>IN: rosetta-code.square-free<br/>\u00a0<br/>: sq-free? ( n --\u00a0? ) factors all-unique?\u00a0;<br/>\u00a0<br/>! Word wrap for numbers.<br/>: numbers-per-line ( m -- n ) log10 &gt;integer 2 + 80 swap /i\u00a0;<br/>\u00a0<br/>: sq-free-show ( from to -- )<br/>    2dup \"Square-free integers from\u00a0%d to\u00a0%d:\\n\" printf<br/>    [ [a,b] [ sq-free? ] filter ] [ numbers-per-line group ] bi<br/>    [ [ \"%3d \" printf ] each nl ] each nl\u00a0;<br/>\u00a0<br/>: sq-free-count ( limit -- )<br/>    dup [1,b] [ sq-free? ] count swap<br/>    \"%6d square-free integers from 1 to\u00a0%d\\n\" printf\u00a0;<br/>\u00a0<br/>1 145 10 12 ^ dup 145 + [ sq-free-show ] <a class=\"__cf_email__\" data-cfemail=\"0a3868634a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>        \u00a0! part 1<br/>2 6 [a,b] [ 10 swap ^ ] map [ sq-free-count ] each   \u00a0! part 2</pre>"}, {"lang": "FreeBASIC", "loc": 89, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 06-07-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> trillion = 1000000000000ull<br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> ULong max = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>trillion + <span class=\"nu0\">145</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> list<span class=\"br0\">(</span><span class=\"br0\">)</span>, sieve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong prime<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ReDim</span> list<span class=\"br0\">(</span>max<span class=\"br0\">)</span>, prime<span class=\"br0\">(</span>max\\<span class=\"nu0\">12</span><span class=\"br0\">)</span>, sieve<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong a, b, c, i, k, stop_ = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">4</span> <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span>   <span class=\"co1\">' prime sieve remove even numbers except 2</span><br/>    sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> stop_ <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span> <span class=\"co1\">' proces odd numbers</span><br/>    <span class=\"kw1\">If</span> sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> a = i * i <span class=\"kw1\">To</span> max <span class=\"kw1\">Step</span> i * <span class=\"nu0\">2</span><br/>            sieve<span class=\"br0\">(</span>a<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> max          <span class=\"co1\">' move primes to a list</span><br/>    <span class=\"kw1\">If</span> sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        c += <span class=\"nu0\">1</span><br/>        prime<span class=\"br0\">(</span>c<span class=\"br0\">)</span> = i<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">ReDim</span> sieve<span class=\"br0\">(</span><span class=\"nu0\">145</span><span class=\"br0\">)</span>: <span class=\"kw1\">ReDim</span> <span class=\"kw1\">Preserve</span> prime<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> c  <span class=\"co1\">' find all square free integers between 1 and 1000000</span><br/>    a = prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> a &gt; <span class=\"nu0\">1000000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">For</span> k = a <span class=\"kw1\">To</span> <span class=\"nu0\">1000000</span> <span class=\"kw1\">Step</span> a<br/>        list<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>k = <span class=\"nu0\">0</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">145</span>          <span class=\"co1\">' show all between 1 and 145</span><br/>    <span class=\"kw1\">If</span> list<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span><span class=\"st0\">\"####\"</span>; i;<br/>        k +=<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> k <span class=\"kw1\">Mod</span> <span class=\"nu0\">20</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/>sieve<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>              <span class=\"co1\">' = trillion</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span>            <span class=\"co1\">' process primes 2, 3, 5, 7, 11</span><br/>    a = prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    b = a - trillion <span class=\"kw1\">Mod</span> a<br/>    <span class=\"kw1\">For</span> k = b <span class=\"kw1\">To</span> <span class=\"nu0\">145</span> <span class=\"kw1\">Step</span> a<br/>        sieve<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">6</span> <span class=\"kw1\">To</span> c            <span class=\"co1\">' process the rest of the primes</span><br/>    a = prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    k = a - trillion <span class=\"kw1\">Mod</span> a<br/>    <span class=\"kw1\">If</span> k &lt;= <span class=\"nu0\">145</span> <span class=\"kw1\">Then</span> sieve<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>k = <span class=\"nu0\">0</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">145</span><br/>    <span class=\"kw1\">If</span> sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"################\"</span>; <span class=\"br0\">(</span>trillion + i<span class=\"br0\">)</span>;<br/>        k += <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> k <span class=\"kw1\">Mod</span> <span class=\"nu0\">5</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/>a = <span class=\"nu0\">1</span>\u00a0: b = <span class=\"nu0\">100</span>\u00a0: k = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> <span class=\"kw1\">Until</span> b &gt; <span class=\"nu0\">1000000</span>      <span class=\"co1\">' count them</span><br/>    <span class=\"kw1\">For</span> i = a <span class=\"kw1\">To</span> b<br/>        <span class=\"kw1\">If</span> list<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> k += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"There are \"</span>; k; <span class=\"st0\">\" square free integers between 1 and \"</span>; b<br/>    a = b\u00a0: b *= <span class=\"nu0\">10</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 81, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sieve<span class=\"sy1\">(</span>limit <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span><br/>    primes <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> limit<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// composite = true</span><br/>    <span class=\"co1\">// no need to process even numbers &gt; 2</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        p2 <span class=\"sy2\">:=</span> p <span class=\"sy3\">*</span> p<br/>        <span class=\"kw1\">if</span> p2 &gt; limit <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> p2<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> p <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            p <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            primes <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>primes<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> primes<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> squareFree<span class=\"sy1\">(</span>from<span class=\"sy1\">,</span> to <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>results <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    limit <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>to<span class=\"sy1\">)))</span><br/>    primes <span class=\"sy2\">:=</span> sieve<span class=\"sy1\">(</span>limit<span class=\"sy1\">)</span><br/>outer<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> from<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> to<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> primes <span class=\"sy1\">{</span><br/>            p2 <span class=\"sy2\">:=</span> p <span class=\"sy3\">*</span> p<br/>            <span class=\"kw1\">if</span> p2 &gt; <span class=\"nu2\">i</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>p2 <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span> outer<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        results <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>results<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> trillion <span class=\"kw4\">uint64</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1000000000000</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Square-free integers from 1 to 145:\"</span><span class=\"sy1\">)</span><br/>    sf <span class=\"sy2\">:=</span> squareFree<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">145</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sf<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> &amp;&amp; <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">20</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy1\">,</span> sf<span class=\"sy1\">[</span>i<span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Square-free integers from\u00a0%d to\u00a0%d:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> trillion<span class=\"sy1\">,</span> trillion<span class=\"sy3\">+</span><span class=\"nu0\">145</span><span class=\"sy1\">)</span><br/>    sf <span class=\"sy2\">=</span> squareFree<span class=\"sy1\">(</span>trillion<span class=\"sy1\">,</span> trillion<span class=\"sy3\">+</span><span class=\"nu0\">145</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sf<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> &amp;&amp; <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">5</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%14d\"</span><span class=\"sy1\">,</span> sf<span class=\"sy1\">[</span>i<span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Number of square-free integers:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"nu0\">10000</span><span class=\"sy1\">,</span> <span class=\"nu0\">100000</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"  from\u00a0%d to\u00a0%d =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>squareFree<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Java", "loc": 69, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SquareFree<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> sieve<span class=\"br0\">(</span><span class=\"kw4\">long</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> primes <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        primes.<span class=\"me1\">add</span><span class=\"br0\">(</span>2L<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>limit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// composite = true</span><br/>        <span class=\"co1\">// no need to process even numbers &gt; 2</span><br/>        <span class=\"kw4\">long</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">long</span> p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> limit<span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> c<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> primes.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> primes<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> squareFree<span class=\"br0\">(</span><span class=\"kw4\">long</span> from, <span class=\"kw4\">long</span> to<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> limit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> primes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> results <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        outer<span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> from<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> to<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> p <span class=\"sy0\">:</span> primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">long</span> p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> p2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span> outer<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            results.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> results<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> TRILLION <span class=\"sy0\">=</span> 1000000000000L<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Square-free integers from 1 to 145:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> sf <span class=\"sy0\">=</span> squareFree<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sf.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">20</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>, sf.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Square-free integers\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" from\u00a0%d to\u00a0%d:<span class=\"es0\">\\n</span>\"</span>, TRILLION, TRILLION <span class=\"sy0\">+</span> <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sf <span class=\"sy0\">=</span> squareFree<span class=\"br0\">(</span>TRILLION, TRILLION <span class=\"sy0\">+</span> <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sf.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%14d\"</span>, sf.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Number of square-free integers:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tos <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, <span class=\"nu0\">10000</span>, <span class=\"nu0\">100000</span>, <span class=\"nu0\">1000000</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> to <span class=\"sy0\">:</span> tos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"  from\u00a0%d to\u00a0%d =\u00a0%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"nu0\">1</span>, to, squareFree<span class=\"br0\">(</span><span class=\"nu0\">1</span>, to<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 56, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.50</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">math</span>.<span class=\"me1\">sqrt</span><br/>\u00a0<br/>fun sieve<span class=\"br0\">(</span>limit<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span>2L<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>limit.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// composite = true</span><br/>    <span class=\"co1\">// no need to process even numbers &gt; 2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> limit<span class=\"br0\">)</span> break<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in p2..<span class=\"me1\">limit</span> step 2L <span class=\"sy0\">*</span> p<span class=\"br0\">)</span> c<span class=\"br0\">[</span>i.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span> p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">3</span>..<span class=\"me1\">limit</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c<span class=\"br0\">[</span>i.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            primes.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> primes<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun squareFree<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> LongProgression<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>r.<span class=\"me1\">last</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> results <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> break<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> p2 <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> continue<span class=\"sy0\">@</span>outer<br/>        <span class=\"br0\">}</span><br/>        results.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> results<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printResults<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> LongProgression, c<span class=\"sy0\">:</span> Int, f<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Square-free integers from ${r.first} to ${r.last}:\"</span><span class=\"br0\">)</span><br/>    squareFree<span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">chunked</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        it.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%${f}d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TRILLION <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">_</span>000000L<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printResults<span class=\"br0\">(</span><span class=\"nu0\">1</span>..145L, <span class=\"nu0\">20</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    printResults<span class=\"br0\">(</span>TRILLION..<span class=\"me1\">TRILLION</span> + 145L, <span class=\"nu0\">5</span>, <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Number of square-free integers:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    longArrayOf<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, <span class=\"nu0\">10000</span>, <span class=\"nu0\">100000</span>, <span class=\"nu0\">1000000</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        j -<span class=\"sy0\">&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"  from 1 to $j = ${squareFree(1..j).size}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> squareFree <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> root <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> <span class=\"br0\">(</span>root <span class=\"sy0\">*</span> root<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> run <span class=\"br0\">(</span>lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> showValues<span class=\"br0\">)</span><br/>  <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"From \"</span> <span class=\"sy0\">..</span> lo <span class=\"sy0\">..</span> <span class=\"st0\">\" to \"</span> <span class=\"sy0\">..</span> hi<span class=\"br0\">)</span><br/>  <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>showValues <span class=\"kw2\">and</span> <span class=\"st0\">\":<span class=\"es1\">\\n</span>\"</span> <span class=\"kw2\">or</span> <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> lo<span class=\"sy0\">,</span> hi <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> squareFree<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">if</span> showValues <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>showValues <span class=\"kw2\">and</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"kw2\">or</span> count<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">145</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1000000000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000000145</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> example <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> run<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>example<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 22, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/is_square_free moebius/</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> square_free_count <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$count</span> <span class=\"sy0\">+=</span> moebius<span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"re0\">$k</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Square\u2500free numbers between 1 and 145:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> is_square_free<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Square-free numbers between 10^12 and 10^12 + 145:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> is_square_free<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> 1e12 <span class=\"sy0\">..</span> 1e12 <span class=\"sy0\">+</span> <span class=\"nu0\">145</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> square_free_count<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"re0\">*$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The number of square-free numbers between 1 and 10^$n (inclusive) is: $c<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 44, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># Prime factorization routines</span><br/><span class=\"kw2\">sub</span> prime<span class=\"sy0\">-</span>factors <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    flat prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> find<span class=\"sy0\">-</span>factor <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$gcd</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> gcd <span class=\"nu0\">6541380665835015</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$gcd</span> <span class=\"kw1\">if</span> <span class=\"re0\">$gcd</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span>      <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rho</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$rho</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$fixed</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$rho</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$constant</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$fixed</span> <span class=\"br0\">)</span> gcd <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Task routine</span><br/><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>square<span class=\"sy0\">-</span>free <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">@v</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;prime</span><span class=\"sy0\">-</span>factors<span class=\"sy0\">.</span><span class=\"me1\">Bag</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span><span class=\"sy0\">;</span> <span class=\"re0\">@v</span><span class=\"sy0\">.</span><span class=\"me1\">sum</span><span class=\"sy0\">/</span><span class=\"re0\">@v</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The Task</span><br/><span class=\"co1\"># Parts 1 &amp; 2</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">145</span><span class=\"sy0\">,</span> 1e12<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">,</span> <span class=\"nu0\">145</span><span class=\"sy0\">+</span>1e12<span class=\"sy0\">.</span><span class=\"me1\">Int</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Square\u2500free numbers between $start and $end:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$start</span> <span class=\"sy0\">..</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">hyper</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>4batch<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>square<span class=\"sy0\">-</span>free <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"nu0\">84</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Part 3</span><br/><span class=\"kw1\">for</span> 1e2<span class=\"sy0\">,</span> 1e3<span class=\"sy0\">,</span> 1e4<span class=\"sy0\">,</span> 1e5<span class=\"sy0\">,</span> 1e6 <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>The number of square\u2500free numbers between 1 and {$_} (inclusive) is: \"</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">race</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>square<span class=\"sy0\">-</span>free<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 24, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw1\">def</span> SquareFree <span class=\"br0\">(</span> _number <span class=\"br0\">)</span>\u00a0:<br/>\t<span class=\"kw2\">max</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span> _number <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> root <span class=\"kw1\">in</span> <span class=\"kw2\">range</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">max</span>+<span class=\"nu0\">1</span> <span class=\"br0\">)</span>:\t\t\t\t\t<span class=\"co1\"># Create a custom prime sieve</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> _number\u00a0% <span class=\"br0\">(</span> root * root <span class=\"br0\">)</span>:<br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ListSquareFrees<span class=\"br0\">(</span> _start<span class=\"sy0\">,</span> _end <span class=\"br0\">)</span>:<br/>\tcount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span> <span class=\"br0\">(</span> _start<span class=\"sy0\">,</span> _end+<span class=\"nu0\">1</span> <span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">True</span> <span class=\"sy0\">==</span> SquareFree<span class=\"br0\">(</span> i <span class=\"br0\">)</span>:<br/>\t\t\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"st0\">\"{}<span class=\"es0\">\\t</span>\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><br/>\t\t\tcount +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Total count of square-free numbers between {} and {}: {}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>_start<span class=\"sy0\">,</span> _end<span class=\"sy0\">,</span> count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>ListSquareFrees<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span><br/>ListSquareFrees<span class=\"br0\">(</span> <span class=\"nu0\">1000000000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000000145</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays  square\u2500free numbers  (integers &gt; 1)  up to a specified limit.  */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> LO==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> LO==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> LO=  <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> HI==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> HI==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> HI=<span class=\"nu0\">145</span>                 <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>sw= linesize<span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span>                               <span class=\"coMULTI\">/*use one less than a full line.       */</span><br/>count = <span class=\"nu0\">0</span>                                        <span class=\"coMULTI\">/*count of square\u2500free numbers found.  */</span><br/>$=                                               <span class=\"coMULTI\">/*variable that holds a line of numbers*/</span><br/>   <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>HI<span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*process all integers between LO &amp; HI.*/</span><br/>   <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isSquareFree<span class=\"br0\">(</span>j<span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>            <span class=\"coMULTI\">/*Not square\u2500free?   Then skip this #. */</span><br/>   count= count + <span class=\"nu0\">1</span>                              <span class=\"coMULTI\">/*bump the count of square\u2500free numbers*/</span><br/>   <span class=\"kw1\">if</span> HI<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                         <span class=\"coMULTI\">/*Only counting 'em? Then look for more*/</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$ <span class=\"sy0\">||</span> j<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>sw  <span class=\"kw3\">then</span> $= <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$ j<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*append the number to the output list.*/</span><br/>                         <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> $;  $=j;  <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*display a line of numbers.*/</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>TheNum= <span class=\"st0\">'The number of square\u2500free numbers between '</span><br/><span class=\"kw1\">if</span> HI<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> TheNum  LO     <span class=\"st0\">\" and \"</span>     <span class=\"kw6\">abs</span><span class=\"br0\">(</span>HI<span class=\"br0\">)</span>      <span class=\"st0\">' (inclusive)  is: '</span>     count<br/><span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> $                            <span class=\"coMULTI\">/*are there any residuals to display\u00a0? */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isSquareFree: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #;  <span class=\"kw1\">if</span> #<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*is the number too small?*/</span><br/>              limit= iSqrt<span class=\"br0\">(</span>#<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*obtain the integer square root of #.?*/</span><br/>              odd=#<span class=\"sy0\">//</span><span class=\"nu0\">2</span>                           <span class=\"coMULTI\">/*ODD=1   if # is odd,   ODD=0 if even.*/</span><br/>                       <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>+odd  <span class=\"kw2\">to</span> limit  <span class=\"kw2\">by</span> <span class=\"nu0\">1</span>+odd    <span class=\"coMULTI\">/*use all numbers, or just odds*/</span><br/>                       <span class=\"kw1\">if</span> # <span class=\"sy0\">//</span> k<span class=\"sy0\">**</span><span class=\"nu0\">2</span> == <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>  <span class=\"coMULTI\">/*Is # divisible by a square?  */</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                       <span class=\"coMULTI\">/* [\u2191]  Yes? Then ^ square\u2500free*/</span><br/>              <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>iSqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  r=<span class=\"nu0\">0</span>;  q=<span class=\"nu0\">1</span>;             <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> q<span class=\"sy0\">&lt;</span>=x;  q=q<span class=\"sy0\">*</span><span class=\"nu0\">4</span>;  <span class=\"kw3\">end</span><br/>                  <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> q<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>; q=q%4; _=x-r-q; r=r%2; <span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;x=_;r=r+q; <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">return</span> r                                  <span class=\"coMULTI\">/*R  is the integer square root of  X. */</span></pre>"}, {"lang": "Sidef", "loc": 34, "block": "<pre class=\"ruby highlighted_source\">func is_square_free<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    n.<span class=\"me1\">abs</span>!       <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    n.<span class=\"me1\">factor_exp</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> all <span class=\"br0\">{</span> .<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func square_free_count<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span> .. <span class=\"me1\">n</span>.<span class=\"me1\">isqrt</span> <span class=\"sy0\">-&gt;</span> sum <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>        moebius<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> idiv<span class=\"br0\">(</span>n, k<span class=\"sy0\">*</span>k<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func display_results<span class=\"br0\">(</span>a, c, f = <span class=\"br0\">{</span> _ <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span>c, <span class=\"br0\">{</span><span class=\"sy0\">|*</span>s<span class=\"sy0\">|</span><br/>        say s.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var a = range<span class=\"br0\">(</span>   <span class=\"nu0\">1</span>,      <span class=\"nu0\">145</span><span class=\"br0\">)</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> is_square_free<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>var b = range<span class=\"br0\">(</span>1e12, 1e12<span class=\"sy0\">+</span><span class=\"nu0\">145</span><span class=\"br0\">)</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> is_square_free<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"There are #{a.len} square\u2500free numbers between 1 and 145:\"</span><br/>display_results<span class=\"br0\">(</span>a, <span class=\"nu0\">17</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"st0\">\"%3s\"</span> <span class=\"sy0\">%</span> n <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>There are #{b.len} square\u2500free numbers between 10^12 and 10^12 + 145:\"</span><br/>display_results<span class=\"br0\">(</span>b, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> .. <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    var c = square_free_count<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>n<span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"The number of square\u2500free numbers between 1 and 10^#{n} (inclusive) is: #{c}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\">const Limit=1 + (1e12 + 145).sqrt();\t// 1000001 because it fits this task<br/>var [const] <br/>   BI=Import.lib(\"zklBigNum\"),    // GNU Multiple Precision Arithmetic Library<br/>   primes=List.createLong(Limit); // one big allocate (vs lots of allocs)<br/>\u00a0<br/>// GMP provide nice way to generate primes, nextPrime is in-place<br/>p:=BI(0); while(p&lt;Limit){ primes.append(p.nextPrime().toInt()); } // 78,499 primes<br/>\u00a0<br/>fcn squareFree(start,end,save=False){ //--&gt;(cnt,list|n)<br/>   sink\u00a0:= Sink(if(save) List else Void);  // Sink(Void) is one item sink<br/>   cnt, numPrimes\u00a0:= 0, (end - start).toFloat().sqrt().toInt() - 1;<br/>   foreach n in ([start..end]){<br/>      foreach j in ([0..numPrimes]){<br/>         p,p2\u00a0:= primes[j], p*p;<br/>\t if(p2&gt;n) break;<br/>\t if(n%p2==0) continue(2);  // --&gt;foreach n<br/>      }<br/>      sink.write(n); cnt+=1<br/>   }<br/>   return(cnt,sink.close());<br/>}</pre>"}]}