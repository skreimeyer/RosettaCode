{"task": "Ramer-Douglas-Peucker_line_simplification", "blocks": [{"lang": "C++", "loc": 109, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;stdexcept&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> Point<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> PerpendicularDistance<span class=\"br0\">(</span><span class=\"kw4\">const</span> Point <span class=\"sy3\">&amp;</span>pt, <span class=\"kw4\">const</span> Point <span class=\"sy3\">&amp;</span>lineStart, <span class=\"kw4\">const</span> Point <span class=\"sy3\">&amp;</span>lineEnd<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> dx <span class=\"sy1\">=</span> lineEnd.<span class=\"me1\">first</span> <span class=\"sy2\">-</span> lineStart.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> dy <span class=\"sy1\">=</span> lineEnd.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> lineStart.<span class=\"me1\">second</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Normalise</span><br/>\t<span class=\"kw4\">double</span> mag <span class=\"sy1\">=</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>dx,<span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>dy,<span class=\"nu16\">2.0</span><span class=\"br0\">)</span>,<span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>mag <span class=\"sy1\">&gt;</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tdx <span class=\"sy2\">/</span><span class=\"sy1\">=</span> mag<span class=\"sy4\">;</span> dy <span class=\"sy2\">/</span><span class=\"sy1\">=</span> mag<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> pvx <span class=\"sy1\">=</span> pt.<span class=\"me1\">first</span> <span class=\"sy2\">-</span> lineStart.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> pvy <span class=\"sy1\">=</span> pt.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> lineStart.<span class=\"me1\">second</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Get dot product (project pv onto normalized direction)</span><br/>\t<span class=\"kw4\">double</span> pvdot <span class=\"sy1\">=</span> dx <span class=\"sy2\">*</span> pvx <span class=\"sy2\">+</span> dy <span class=\"sy2\">*</span> pvy<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Scale line direction vector</span><br/>\t<span class=\"kw4\">double</span> dsx <span class=\"sy1\">=</span> pvdot <span class=\"sy2\">*</span> dx<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> dsy <span class=\"sy1\">=</span> pvdot <span class=\"sy2\">*</span> dy<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Subtract this from pv</span><br/>\t<span class=\"kw4\">double</span> ax <span class=\"sy1\">=</span> pvx <span class=\"sy2\">-</span> dsx<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> ay <span class=\"sy1\">=</span> pvy <span class=\"sy2\">-</span> dsy<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>ax,<span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>ay,<span class=\"nu16\">2.0</span><span class=\"br0\">)</span>,<span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> RamerDouglasPeucker<span class=\"br0\">(</span><span class=\"kw4\">const</span> vector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span>pointList, <span class=\"kw4\">double</span> epsilon, vector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span>out<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">throw</span> invalid_argument<span class=\"br0\">(</span><span class=\"st0\">\"Not enough points to simplify\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Find the point with the maximum distance from line between start and end</span><br/>\t<span class=\"kw4\">double</span> dmax <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">size_t</span> index <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">size_t</span> end <span class=\"sy1\">=</span> pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> end<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> d <span class=\"sy1\">=</span> PerpendicularDistance<span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy1\">&gt;</span> dmax<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tindex <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\t\t\tdmax <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// If max distance is greater than epsilon, recursively simplify</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>dmax <span class=\"sy1\">&gt;</span> epsilon<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// Recursive call</span><br/>\t\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> recResults1<span class=\"sy4\">;</span><br/>\t\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> recResults2<span class=\"sy4\">;</span><br/>\t\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> firstLine<span class=\"br0\">(</span>pointList.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, pointList.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span>index<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> lastLine<span class=\"br0\">(</span>pointList.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span>index, pointList.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tRamerDouglasPeucker<span class=\"br0\">(</span>firstLine, epsilon, recResults1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tRamerDouglasPeucker<span class=\"br0\">(</span>lastLine, epsilon, recResults2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Build the result list</span><br/>\t\tout.<span class=\"me1\">assign</span><span class=\"br0\">(</span>recResults1.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, recResults1.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tout.<span class=\"me1\">insert</span><span class=\"br0\">(</span>out.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, recResults2.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, recResults2.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>out.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">throw</span> runtime_error<span class=\"br0\">(</span><span class=\"st0\">\"Problem assembling output\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span> <br/>\t<span class=\"kw1\">else</span> <br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//Just return start and end points</span><br/>\t\tout.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tout.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tout.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> pointList<span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span>Point<span class=\"sy1\">&gt;</span> pointListOut<span class=\"sy4\">;</span><br/>\u00a0<br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">0.0</span>, <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">1.0</span>, <span class=\"nu16\">0.1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">2.0</span>, <span class=\"sy2\">-</span><span class=\"nu16\">0.1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">3.0</span>, <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">4.0</span>, <span class=\"nu16\">6.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">5.0</span>, <span class=\"nu16\">7.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">6.0</span>, <span class=\"nu16\">8.1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">7.0</span>, <span class=\"nu16\">9.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">8.0</span>, <span class=\"nu16\">9.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpointList.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">9.0</span>, <span class=\"nu16\">9.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tRamerDouglasPeucker<span class=\"br0\">(</span>pointList, <span class=\"nu16\">1.0</span>, pointListOut<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"result\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span> pointListOut.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> pointListOut<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span> <span class=\"sy1\">&lt;&lt;</span> pointListOut<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 90, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> LineSimplification <span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">Point </span><span class=\"sy0\">=</span> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> PerpendicularDistance<span class=\"br0\">(</span>Point pt, Point lineStart, Point lineEnd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> dx <span class=\"sy0\">=</span> lineEnd<span class=\"sy0\">.</span><span class=\"me1\">Item1</span> <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">.</span><span class=\"me1\">Item1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> dy <span class=\"sy0\">=</span> lineEnd<span class=\"sy0\">.</span><span class=\"me1\">Item2</span> <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Normalize</span><br/>            <span class=\"kw4\">double</span> mag <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> dx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mag <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dx <span class=\"sy0\">/=</span> mag<span class=\"sy0\">;</span><br/>                dy <span class=\"sy0\">/=</span> mag<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">double</span> pvx <span class=\"sy0\">=</span> pt<span class=\"sy0\">.</span><span class=\"me1\">Item1</span> <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">.</span><span class=\"me1\">Item1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> pvy <span class=\"sy0\">=</span> pt<span class=\"sy0\">.</span><span class=\"me1\">Item2</span> <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Get dot product (project pv onto normalized direction)</span><br/>            <span class=\"kw4\">double</span> pvdot <span class=\"sy0\">=</span> dx <span class=\"sy0\">*</span> pvx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> pvy<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Scale line direction vector and subtract it from pv</span><br/>            <span class=\"kw4\">double</span> ax <span class=\"sy0\">=</span> pvx <span class=\"sy0\">-</span> pvdot <span class=\"sy0\">*</span> dx<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> ay <span class=\"sy0\">=</span> pvy <span class=\"sy0\">-</span> pvdot <span class=\"sy0\">*</span> dy<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>ax <span class=\"sy0\">*</span> ax <span class=\"sy0\">+</span> ay <span class=\"sy0\">*</span> ay<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> RamerDouglasPeucker<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointList, <span class=\"kw4\">double</span> epsilon, List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> output<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pointList<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"Not enough points to simplify\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// Find the point with the maximum distance from line between the start and end</span><br/>            <span class=\"kw4\">double</span> dmax <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> pointList<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> PerpendicularDistance<span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> dmax<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    index <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                    dmax <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// If max distance is greater than epsilon, recursively simplify</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dmax <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> recResults1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> recResults2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> firstLine <span class=\"sy0\">=</span> pointList<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span>index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> lastLine <span class=\"sy0\">=</span> pointList<span class=\"sy0\">.</span><span class=\"me1\">Skip</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                RamerDouglasPeucker<span class=\"br0\">(</span>firstLine, epsilon, recResults1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                RamerDouglasPeucker<span class=\"br0\">(</span>lastLine, epsilon, recResults2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">// build the result list</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>recResults1<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span>recResults1<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>recResults2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>output<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Exception<span class=\"br0\">(</span><span class=\"st0\">\"Problem assembling output\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// Just return start and end points</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                output<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>pointList<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointList <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>,<span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>,<span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>,<span class=\"nu0\">5.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">4.0</span>,<span class=\"nu0\">6.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>,<span class=\"nu0\">7.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">6.0</span>,<span class=\"nu0\">8.1</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">7.0</span>,<span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">8.0</span>,<span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">9.0</span>,<span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointListOut <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            RamerDouglasPeucker<span class=\"br0\">(</span>pointList, <span class=\"nu0\">1.0</span>, pointListOut<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Points remaining after simplification:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            pointListOut<span class=\"sy0\">.</span><span class=\"kw1\">ForEach</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 89, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span> <span class=\"sy0\">:</span> enforce<span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pointList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"nu16\">0.0</span> <span class=\"sy0\">+</span>  0.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">1.0</span> <span class=\"sy0\">+</span>  0.1i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">2.0</span> <span class=\"sy0\">+</span> <span class=\"sy0\">-</span>0.1i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">3.0</span> <span class=\"sy0\">+</span>  5.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">4.0</span> <span class=\"sy0\">+</span>  6.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">5.0</span> <span class=\"sy0\">+</span>  7.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">6.0</span> <span class=\"sy0\">+</span>  8.1i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">7.0</span> <span class=\"sy0\">+</span>  9.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">8.0</span> <span class=\"sy0\">+</span>  9.0i<span class=\"sy0\">,</span><br/>        <span class=\"nu16\">9.0</span> <span class=\"sy0\">+</span>  9.0i<br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pointListOut<span class=\"sy0\">;</span><br/>\u00a0<br/>    ramerDouglasPeucker<span class=\"br0\">(</span>pointList<span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> pointListOut<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"result\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span> pointListOut.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>pointListOut<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">re</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy0\">,</span> pointListOut<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">real</span> perpendicularDistance<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">creal</span> pt<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">creal</span> lineStart<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">creal</span> lineEnd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">creal</span> d <span class=\"sy0\">=</span> lineEnd <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Normalise</span><br/>    <span class=\"kw4\">real</span> mag <span class=\"sy0\">=</span>  hypot<span class=\"br0\">(</span>d.<span class=\"me1\">re</span><span class=\"sy0\">,</span> d.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mag <span class=\"sy0\">&gt;</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d <span class=\"sy0\">/=</span> mag<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">creal</span> pv <span class=\"sy0\">=</span> pt <span class=\"sy0\">-</span> lineStart<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Get dot product (project pv onto normalized direction)</span><br/>    <span class=\"kw4\">real</span> pvdot <span class=\"sy0\">=</span> d.<span class=\"me1\">re</span> <span class=\"sy0\">*</span> pv.<span class=\"me1\">re</span> <span class=\"sy0\">+</span> d.<span class=\"me1\">im</span> <span class=\"sy0\">*</span> pv.<span class=\"me1\">im</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Scale line direction vector</span><br/>    <span class=\"kw4\">creal</span> ds <span class=\"sy0\">=</span> pvdot <span class=\"sy0\">*</span> d<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Subtract this from pv</span><br/>    <span class=\"kw4\">creal</span> a <span class=\"sy0\">=</span> pv <span class=\"sy0\">-</span> ds<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> hypot<span class=\"br0\">(</span>a.<span class=\"me1\">re</span><span class=\"sy0\">,</span> a.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ramerDouglasPeucker<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pointList<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> epsilon<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> output<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    enforce<span class=\"br0\">(</span>pointList.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Not enough points to simplify\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Find the point with the maximum distance from line between start and end</span><br/>    <span class=\"kw4\">real</span> dmax <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> end <span class=\"sy0\">=</span> pointList.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>end<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">real</span> d <span class=\"sy0\">=</span> perpendicularDistance<span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> dmax<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            index <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            dmax <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// If max distance is greater than epsilon, recursively simplify</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dmax <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Recursive call</span><br/>        <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> firstLine <span class=\"sy0\">=</span> pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"me1\">index</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> lastLine <span class=\"sy0\">=</span> pointList<span class=\"br0\">[</span>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>$<span class=\"br0\">]</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> recResults1<span class=\"sy0\">;</span><br/>        ramerDouglasPeucker<span class=\"br0\">(</span>firstLine<span class=\"sy0\">,</span> epsilon<span class=\"sy0\">,</span> recResults1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">creal</span><span class=\"br0\">[</span><span class=\"br0\">]</span> recResults2<span class=\"sy0\">;</span><br/>        ramerDouglasPeucker<span class=\"br0\">(</span>lastLine<span class=\"sy0\">,</span> epsilon<span class=\"sy0\">,</span> recResults2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Build the result list</span><br/>        output <span class=\"sy0\">=</span> recResults1 <span class=\"sy0\">~</span> recResults2<span class=\"sy0\">;</span><br/>\u00a0<br/>        enforce<span class=\"br0\">(</span>output.<span class=\"me1\">length</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Problem assembling output\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//Just return start and end points</span><br/>        output.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        output <span class=\"sy0\">~=</span> pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        output <span class=\"sy0\">~=</span> pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> RDP<span class=\"sy1\">(</span>l <span class=\"sy1\">[]</span>point<span class=\"sy1\">,</span> \u03b5 <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>point <span class=\"sy1\">{</span><br/>    x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    dMax <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><br/>    last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>l<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    p1 <span class=\"sy2\">:=</span> l<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    p2 <span class=\"sy2\">:=</span> l<span class=\"sy1\">[</span>last<span class=\"sy1\">]</span><br/>    x21 <span class=\"sy2\">:=</span> p2<span class=\"sy3\">.</span>x <span class=\"sy3\">-</span> p1<span class=\"sy3\">.</span>x<br/>    y21 <span class=\"sy2\">:=</span> p2<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> p1<span class=\"sy3\">.</span>y<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> l<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span>last<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>y21<span class=\"sy3\">*</span>p<span class=\"sy3\">.</span>x <span class=\"sy3\">-</span> x21<span class=\"sy3\">*</span>p<span class=\"sy3\">.</span>y <span class=\"sy3\">+</span> p2<span class=\"sy3\">.</span>x<span class=\"sy3\">*</span>p1<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> p2<span class=\"sy3\">.</span>y<span class=\"sy3\">*</span>p1<span class=\"sy3\">.</span>x<span class=\"sy1\">);</span> d &gt; dMax <span class=\"sy1\">{</span><br/>            x <span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>            dMax <span class=\"sy2\">=</span> d<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> dMax &gt; \u03b5 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> append<span class=\"sy1\">(</span>RDP<span class=\"sy1\">(</span>l<span class=\"sy1\">[:</span>x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> \u03b5<span class=\"sy1\">),</span> RDP<span class=\"sy1\">(</span>l<span class=\"sy1\">[</span>x<span class=\"sy1\">:],</span> \u03b5<span class=\"sy1\">)[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span>point<span class=\"sy1\">{</span>l<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> l<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>l<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>RDP<span class=\"sy1\">([]</span>point<span class=\"sy1\">{{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy3\">.</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">}},</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 26, "block": "<pre class=\"j highlighted_source\">mp=: +/ .*           <span class=\"co1\">NB. matrix product</span><br/>norm=: +/&amp;.:*:       <span class=\"co1\">NB. vector norm</span><br/>normalize=: <span class=\"sy0\">(</span>% norm<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span> &lt; norm<span class=\"sy0\">)</span><br/>\u00a0<br/>dxy=. <a class=\"__cf_email__\" data-cfemail=\"026c6d706f636e6b786742\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>{: - {.<span class=\"sy0\">)</span><br/>pv=. -\"<span class=\"nu0\">1</span> {.<br/><span class=\"co1\">NB.*perpDist v Calculate perpendicular distance of points from a line</span><br/>perpDist=: norm\"<span class=\"nu0\">1</span>@<span class=\"sy0\">(</span>pv <span class=\"sy0\">(</span>[ -\"<span class=\"nu0\">1</span> mp\"<span class=\"nu0\">1</span>~ */ ]<span class=\"sy0\">)</span> dxy<span class=\"sy0\">)</span> f.<br/>\u00a0<br/>rdp=: verb define<br/>  <span class=\"nu0\">1</span> rdp <span class=\"kw2\">y</span><br/> \u00a0:<br/>  points=. <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">if.</span> <span class=\"nu0\">2</span> &gt; # points <span class=\"kw1\">do.</span> points <span class=\"kw1\">return.</span> <span class=\"kw1\">end.</span><br/>\u00a0<br/>  <span class=\"co1\">NB. index and maximum distance from line between start and end</span><br/>  <span class=\"st_h\">'dmax imax'</span>=. <span class=\"sy0\">(</span>&gt;./ , ] i. &gt;./<span class=\"sy0\">)</span> perpDist points<br/>  <span class=\"kw1\">if.</span> dmax &gt; <span class=\"kw2\">x</span> <span class=\"kw1\">do.</span><br/>    res1=. <span class=\"kw2\">x</span> }:@rdp <span class=\"sy0\">(</span><span class=\"nu0\">1</span>+imax<span class=\"sy0\">)</span> {. points<br/>    res2=. <span class=\"kw2\">x</span> rdp imax }. points<br/>    out=. res1 , res2<br/>  <span class=\"kw1\">else.</span><br/>    out=. <span class=\"sy0\">(</span>{. ,: {:<span class=\"sy0\">)</span> points<br/>  <span class=\"kw1\">end.</span><br/>  out<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">javafx.util.Pair</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LineSimplification <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"kw1\">extends</span> Pair<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, Double<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> key, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">super</span><span class=\"br0\">(</span>key, value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"(%f,\u00a0%f)\"</span>, getKey<span class=\"br0\">(</span><span class=\"br0\">)</span>, getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> perpendicularDistance<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> pt, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> lineStart, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> lineEnd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> dx <span class=\"sy0\">=</span> lineEnd.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> lineStart.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> dy <span class=\"sy0\">=</span> lineEnd.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> lineStart.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Normalize</span><br/>        <span class=\"kw4\">double</span> mag <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>dx, dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mag <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dx <span class=\"sy0\">/=</span> mag<span class=\"sy0\">;</span><br/>            dy <span class=\"sy0\">/=</span> mag<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">double</span> pvx <span class=\"sy0\">=</span> pt.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> lineStart.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> pvy <span class=\"sy0\">=</span> pt.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> lineStart.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Get dot product (project pv onto normalized direction)</span><br/>        <span class=\"kw4\">double</span> pvdot <span class=\"sy0\">=</span> dx <span class=\"sy0\">*</span> pvx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> pvy<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Scale line direction vector and subtract it from pv</span><br/>        <span class=\"kw4\">double</span> ax <span class=\"sy0\">=</span> pvx <span class=\"sy0\">-</span> pvdot <span class=\"sy0\">*</span> dx<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> ay <span class=\"sy0\">=</span> pvy <span class=\"sy0\">-</span> pvdot <span class=\"sy0\">*</span> dy<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>ax, ay<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> ramerDouglasPeucker<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointList, <span class=\"kw4\">double</span> epsilon, List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Not enough points to simplify\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Find the point with the maximum distance from line between the start and end</span><br/>        <span class=\"kw4\">double</span> dmax <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> end<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> perpendicularDistance<span class=\"br0\">(</span>pointList.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, pointList.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, pointList.<span class=\"me1\">get</span><span class=\"br0\">(</span>end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> dmax<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                index <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                dmax <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// If max distance is greater than epsilon, recursively simplify</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dmax <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> recResults1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> recResults2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> firstLine <span class=\"sy0\">=</span> pointList.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> lastLine <span class=\"sy0\">=</span> pointList.<span class=\"me1\">subList</span><span class=\"br0\">(</span>index, pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ramerDouglasPeucker<span class=\"br0\">(</span>firstLine, epsilon, recResults1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ramerDouglasPeucker<span class=\"br0\">(</span>lastLine, epsilon, recResults2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// build the result list</span><br/>            out.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>recResults1.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, recResults1.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            out.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>recResults2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>out.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntimeexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RuntimeException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Problem assembling output\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Just return start and end points</span><br/>            out.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            out.<span class=\"me1\">add</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            out.<span class=\"me1\">add</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">get</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointList <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">7.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">6.0</span>, <span class=\"nu0\">8.1</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">7.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>                <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">9.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointListOut <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ramerDouglasPeucker<span class=\"br0\">(</span>pointList, <span class=\"nu0\">1.0</span>, pointListOut<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Points remaining after simplification:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pointListOut.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 42, "block": "<pre class=\"text highlighted_source\">const Point = Vector{Float64}<br/>\u00a0<br/>function perpdist(pt::Point, lnstart::Point, lnend::Point)<br/>    d = normalize!(lnend .- lnstart)<br/>\u00a0<br/>    pv = pt .- lnstart<br/>    # Get dot product (project pv onto normalized direction)<br/>    pvdot = dot(d, pv)<br/>    # Scale line direction vector<br/>    ds = pvdot .* d<br/>    # Subtract this from pv<br/>    return norm(pv .- ds)<br/>end<br/>\u00a0<br/>function rdp(plist::Vector{Point}, \u03f5::Float64 = 1.0)<br/>    if length(plist) &lt; 2<br/>        throw(ArgumentError(\"not enough points to simplify\"))<br/>    end<br/>\u00a0<br/>    # Find the point with the maximum distance from line between start and end<br/>    distances  = collect(perpdist(pt, plist[1], plist[end]) for pt in plist)<br/>    dmax, imax = findmax(distances)<br/>\u00a0<br/>    # If max distance is greater than epsilon, recursively simplify<br/>    if dmax &gt; \u03f5<br/>        fstline = plist[1:imax]<br/>        lstline = plist[imax:end]<br/>\u00a0<br/>        recrst1 = rdp(fstline, \u03f5)<br/>        recrst2 = rdp(lstline, \u03f5)<br/>\u00a0<br/>        out = vcat(recrst1, recrst2)<br/>    else<br/>        out = [plist[1], plist[end]]<br/>    end<br/>\u00a0<br/>    return out<br/>end<br/>\u00a0<br/>plist = Point[[0.0, 0.0], [1.0, 0.1], [2.0, -0.1], [3.0, 5.0], [4.0, 6.0], [5.0, 7.0], [6.0, 8.1], [7.0, 9.0], [8.0, 9.0], [9.0, 9.0]]<br/>@show plist<br/>@show rdp(plist)</pre>"}, {"lang": "Kotlin", "loc": 76, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>typealias Point <span class=\"sy0\">=</span> Pair<span class=\"sy0\">&lt;</span>Double, Double<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun perpendicularDistance<span class=\"br0\">(</span>pt<span class=\"sy0\">:</span> Point, lineStart<span class=\"sy0\">:</span> Point, lineEnd<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dx <span class=\"sy0\">=</span> lineEnd.<span class=\"me1\">first</span> - lineStart.<span class=\"me1\">first</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dy <span class=\"sy0\">=</span> lineEnd.<span class=\"me1\">second</span> - lineStart.<span class=\"me1\">second</span><br/>\u00a0<br/>    <span class=\"co1\">// Normalize</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mag <span class=\"sy0\">=</span> Math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>dx, dy<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>mag <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> dx /<span class=\"sy0\">=</span> mag<span class=\"sy0\">;</span> dy /<span class=\"sy0\">=</span> mag <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pvx <span class=\"sy0\">=</span> pt.<span class=\"me1\">first</span> - lineStart.<span class=\"me1\">first</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pvy <span class=\"sy0\">=</span> pt.<span class=\"me1\">second</span> - lineStart.<span class=\"me1\">second</span><br/>\u00a0<br/>    <span class=\"co1\">// Get dot product (project pv onto normalized direction)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pvdot <span class=\"sy0\">=</span> dx <span class=\"sy0\">*</span> pvx + dy <span class=\"sy0\">*</span> pvy<br/>\u00a0<br/>    <span class=\"co1\">// Scale line direction vector and substract it from pv</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ax <span class=\"sy0\">=</span> pvx - pvdot <span class=\"sy0\">*</span> dx<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ay <span class=\"sy0\">=</span> pvy - pvdot <span class=\"sy0\">*</span> dy<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>ax, ay<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun RamerDouglasPeucker<span class=\"br0\">(</span>pointList<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span>, epsilon<span class=\"sy0\">:</span> Double, out<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pointList.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Not enough points to simplify\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// Find the point with the maximum distance from line between start and end</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dmax <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> pointList.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> perpendicularDistance<span class=\"br0\">(</span>pointList<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, pointList<span class=\"br0\">[</span>end<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> dmax<span class=\"br0\">)</span> <span class=\"br0\">{</span> index <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> dmax <span class=\"sy0\">=</span> d <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// If max distance is greater than epsilon, recursively simplify</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dmax <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> recResults1 <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> recResults2 <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> firstLine <span class=\"sy0\">=</span> pointList.<span class=\"me1\">take</span><span class=\"br0\">(</span>index + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastLine  <span class=\"sy0\">=</span> pointList.<span class=\"me1\">drop</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>        RamerDouglasPeucker<span class=\"br0\">(</span>firstLine, epsilon, recResults1<span class=\"br0\">)</span><br/>        RamerDouglasPeucker<span class=\"br0\">(</span>lastLine, epsilon, recResults2<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// build the result list</span><br/>        out.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>recResults1.<span class=\"me1\">take</span><span class=\"br0\">(</span>recResults1.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        out.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>recResults2<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>out.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> RuntimeException<span class=\"br0\">(</span><span class=\"st0\">\"Problem assembling output\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Just return start and end points</span><br/>        out.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        out.<span class=\"me1\">add</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        out.<span class=\"me1\">add</span><span class=\"br0\">(</span>pointList.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pointList <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, -<span class=\"nu0\">0.1</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">7.0</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">6.0</span>, <span class=\"nu0\">8.1</span><span class=\"br0\">)</span>,<br/>\tPoint<span class=\"br0\">(</span><span class=\"nu0\">7.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>\tPoint<span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,<br/>        Point<span class=\"br0\">(</span><span class=\"nu0\">9.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pointListOut <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    RamerDouglasPeucker<span class=\"br0\">(</span>pointList, <span class=\"nu0\">1.0</span>, pointListOut<span class=\"br0\">)</span>   <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Points remaining after simplification:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in pointListOut<span class=\"br0\">)</span> println<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> norm <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"re0\">@list</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@list</span>\u00bb\u00b2<span class=\"sy0\">.</span><span class=\"me1\">sum</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> perpendicular<span class=\"sy0\">-</span>distance <span class=\"br0\">(</span><span class=\"re0\">@start</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw3\">end</span> <span class=\"kw1\">where</span> <span class=\"sy0\">@</span><span class=\"kw3\">end</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">@start</span><span class=\"sy0\">,</span> <span class=\"re0\">@point</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">@point</span> eqv <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"re0\">@start</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw3\">end</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> $\u0394<span class=\"kw1\">x</span><span class=\"sy0\">,</span> $\u0394y <span class=\"br0\">)</span> <span class=\"sy0\">=</span>   <span class=\"sy0\">@</span><span class=\"kw3\">end</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"re0\">@start</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span>$\u0394px<span class=\"sy0\">,</span> $\u0394py<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@point</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"re0\">@start</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span>$\u0394<span class=\"kw1\">x</span><span class=\"sy0\">,</span> $\u0394y<span class=\"br0\">)</span> \u00ab<span class=\"sy0\">/=</span>\u00bb norm $\u0394<span class=\"kw1\">x</span><span class=\"sy0\">,</span> $\u0394y<span class=\"sy0\">;</span><br/>    norm <span class=\"br0\">(</span>$\u0394px<span class=\"sy0\">,</span> $\u0394py<span class=\"br0\">)</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"br0\">(</span>$\u0394<span class=\"kw1\">x</span><span class=\"sy0\">,</span> $\u0394y<span class=\"br0\">)</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"br0\">(</span>$\u0394<span class=\"kw1\">x</span><span class=\"sy0\">*</span>$\u0394px <span class=\"sy0\">+</span> $\u0394y<span class=\"sy0\">*</span>$\u0394py<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> Ramer<span class=\"sy0\">-</span>Douglas<span class=\"sy0\">-</span>Peucker<span class=\"br0\">(</span><span class=\"re0\">@points</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> \\\u03b5 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@points</span> <span class=\"kw1\">if</span> <span class=\"re0\">@points</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">@points</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> perpendicular<span class=\"sy0\">-</span>distance <span class=\"sy0\">|</span><span class=\"re0\">@points</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$index</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmax</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@d</span><span class=\"sy0\">.</span><span class=\"kw3\">first</span><span class=\"sy0\">:</span> <span class=\"re0\">@d</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"kw3\">kv</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> flat<br/>      Ramer<span class=\"sy0\">-</span>Douglas<span class=\"sy0\">-</span>Peucker<span class=\"br0\">(</span> <span class=\"re0\">@points</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> \u03b5 <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      Ramer<span class=\"sy0\">-</span>Douglas<span class=\"sy0\">-</span>Peucker<span class=\"br0\">(</span> <span class=\"re0\">@points</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"sy0\">..*</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> \u03b5 <span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"re0\">$dmax</span> <span class=\"sy0\">&gt;</span> \u03b5<span class=\"sy0\">;</span><br/>    <span class=\"re0\">@points</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># TESTING</span><br/><span class=\"kw3\">say</span> Ramer<span class=\"sy0\">-</span>Douglas<span class=\"sy0\">-</span>Peucker<span class=\"br0\">(</span><br/>   <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> shapely.<span class=\"me1\">geometry</span> <span class=\"kw1\">import</span> LineString<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__<span class=\"sy0\">==</span><span class=\"st0\">\"__main__\"</span>:<br/>\tline <span class=\"sy0\">=</span> LineString<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>-<span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8.1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span>line.<span class=\"me1\">simplify</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> preserve_topology<span class=\"sy0\">=</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 45, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math/flonum)<br/>;; points are lists of x y (maybe extensible to z)<br/>;; x+y gets both parts as values<br/>(define (x+y p) (values (first p) (second p)))<br/>\u00a0<br/>;; https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line<br/>(define (\u22a5-distance P1 P2)<br/>  (let*-values<br/>      ([(x1 y1) (x+y P1)]<br/>       [(x2 y2) (x+y P2)]<br/>       [(dx dy) (values (- x2 x1) (- y2 y1))]<br/>       [(h) (sqrt (+ (sqr dy) (sqr dx)))])<br/>    (\u03bb (P0)<br/>      (let-values (((x0 y0) (x+y P0)))<br/>        (/ (abs (+ (* dy x0) (* -1 dx y0) (* x2 y1) (* -1 y2 x1))) h)))))<br/>\u00a0<br/>(define (douglas-peucker points-in \u03f5)<br/>  (let recur ((ps points-in))<br/>   \u00a0;; curried distance function which will be applicable to all points<br/>    (let*-values<br/>        ([(p0) (first ps)]<br/>         [(pz) (last ps)]<br/>         [(p-d) (\u22a5-distance p0 pz)]<br/>        \u00a0;; Find the point with the maximum distance<br/>         [(dmax index)<br/>          (for/fold ((dmax 0) (index 0))<br/>                    ((i (in-range 1 (sub1 (length ps)))))\u00a0; skips the first, stops before the last<br/>            (define d (p-d (list-ref ps i)))<br/>            (if (&gt; d dmax) (values d i) (values dmax index)))])<br/>     \u00a0;; If max distance is greater than epsilon, recursively simplify<br/>      (if (&gt; dmax \u03f5)<br/>         \u00a0;; recursive call<br/>          (let-values ([(l r) (split-at ps index)])<br/>            (append (drop-right (recur l) 1) (recur r)))<br/>          (list p0 pz)))))\u00a0;; else we can return this simplification<br/>\u00a0<br/>(module+ main<br/>  (douglas-peucker<br/>   '((0 0) (1 0.1) (2 -0.1) (3 5) (4 6) (5 7) (6 8.1) (7 9) (8 9) (9 9))<br/>   1.0))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-= ((\u22a5-distance '(0 0) '(0 1)) '(1 0)) 1 epsilon.0))</pre>"}, {"lang": "Sidef", "loc": 28, "block": "<pre class=\"ruby highlighted_source\">func perpendicular_distance<span class=\"br0\">(</span>Arr start, Arr <span class=\"kw1\">end</span>, Arr point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>point == start<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>point == <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"nu0\">0</span><br/>    var <span class=\"br0\">(</span>\u0394x,  \u0394y <span class=\"br0\">)</span> = <span class=\"br0\">(</span>  <span class=\"kw1\">end</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0start<span class=\"br0\">)</span>...<br/>    <span class=\"me1\">var</span> <span class=\"br0\">(</span>\u0394px, \u0394py<span class=\"br0\">)</span> = <span class=\"br0\">(</span>point\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0start<span class=\"br0\">)</span>...<br/>    <span class=\"me1\">var</span> h = hypot<span class=\"br0\">(</span>\u0394x, \u0394y<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>\\\u0394x, \\\u0394y<span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">*</span>_ <span class=\"sy0\">/</span>= h <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span>\u0394px, \u0394py<span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0<span class=\"br0\">(</span><span class=\"br0\">[</span>\u0394x, \u0394y<span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"br0\">(</span>\u0394x<span class=\"sy0\">*</span>\u0394px <span class=\"sy0\">+</span> \u0394y<span class=\"sy0\">*</span>\u0394py<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">**</span>\u00bb <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span>.<span class=\"me1\">sqrt</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func Ramer_Douglas_Peucker<span class=\"br0\">(</span>Arr points <span class=\"br0\">{</span> .<span class=\"me1\">all</span> <span class=\"br0\">{</span> .<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>, \u03b5 = <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    points.<span class=\"me1\">len</span> == <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> points<br/>\u00a0<br/>    var d = <span class=\"br0\">(</span>^points <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><br/>        perpendicular_distance<span class=\"br0\">(</span>points<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, points<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, points<span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d.<span class=\"me1\">max</span> <span class=\"sy0\">&gt;</span> \u03b5<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var i = d.<span class=\"me1\">index</span><span class=\"br0\">(</span>d.<span class=\"me1\">max</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">return</span> <span class=\"br0\">[</span>Ramer_Douglas_Peucker<span class=\"br0\">(</span>points.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span>, \u03b5<span class=\"br0\">)</span>.<span class=\"me1\">ft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>...,<br/>                Ramer_Douglas_Peucker<span class=\"br0\">(</span>points.<span class=\"me1\">ft</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>,    \u03b5<span class=\"br0\">)</span>...<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"br0\">[</span>points<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say Ramer_Douglas_Peucker<span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0.1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"sy0\">-</span><span class=\"nu0\">0.1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">5</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">6</span>,<span class=\"nu0\">8.1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">9</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">fcn perpendicularDistance(start,end, point){  // all are tuples: (x,y) --&gt;|d|<br/>   dx,dy  \u00a0:= end  .zipWith('-,start);\t// deltas<br/>   dpx,dpy\u00a0:= point.zipWith('-,start);<br/>   mag    \u00a0:= (dx*dx + dy*dy).sqrt();<br/>   if(mag&gt;0.0){ dx/=mag; dy/=mag; }<br/>   p,dsx,dsy\u00a0:= dx*dpx + dy*dpy, p*dx, p*dy;<br/>   ((dpx - dsx).pow(2) + (dpy - dsy).pow(2)).sqrt()<br/>}<br/>\u00a0<br/>fcn RamerDouglasPeucker(points,epsilon=1.0){  // list of tuples --&gt; same<br/>   if(points.len()==2) return(points);  // but we'll do one point<br/>   d:=points.pump(List,  // first result/element is always zero<br/>      fcn(p, s,e){ perpendicularDistance(s,e,p) }.fp1(points[0],points[-1]));<br/>   index,dmax\u00a0:= (0.0).minMaxNs(d)[1], d[index]; // minMaxNs--&gt;index of min &amp; max<br/>   if(dmax&gt;epsilon){<br/>       return(RamerDouglasPeucker(points[0,index],epsilon)[0,-1].extend(<br/>              RamerDouglasPeucker(points[index,*],epsilon)))<br/>   } else return(points[0],points[-1]);<br/>}</pre>"}]}