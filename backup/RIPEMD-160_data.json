{"task": "RIPEMD-160", "blocks": [{"lang": "C#", "loc": 17, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Security.Cryptography</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes <span class=\"sy0\">=</span> Encoding<span class=\"sy0\">.</span><span class=\"me1\">ASCII</span><span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RIPEMD160 myRIPEMD160 <span class=\"sy0\">=</span> RIPEMD160Managed<span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hashValue <span class=\"sy0\">=</span> myRIPEMD160<span class=\"sy0\">.</span><span class=\"me1\">ComputeHash</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> hexdigest <span class=\"sy0\">=</span> BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>hashValue<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>hexdigest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use 'pandect<span class=\"sy0\">.</span>core<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ripemd160 <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> 'ironclad<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> string-to-ripemd-<span class=\"nu0\">160</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the RIPEMD-160 digest of the given ASCII string.\"</span><br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span> <br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> <span class=\"sy0\">:</span><span class=\"me1\">ripemd-</span><span class=\"nu0\">160</span> <br/>                              <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>string-to-ripemd-<span class=\"nu0\">160</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">ripemd</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%02x%)\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">ripemd160Of</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 179, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 22-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> RIPEMD_160<span class=\"br0\">(</span>message <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro ROtate_left(x, n)</span><br/>    <span class=\"br0\">(</span>x <span class=\"kw1\">Shl</span> n <span class=\"kw1\">Or</span> x <span class=\"kw1\">Shr</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> - n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro    f1(x, y, z)</span><br/>    <span class=\"br0\">(</span>x <span class=\"kw1\">Xor</span> y <span class=\"kw1\">Xor</span> z<span class=\"br0\">)</span>               <span class=\"co1\">' (0 &lt;= j &lt;= 15)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro    f2(x, y, z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>x And y<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Not</span> x<span class=\"br0\">)</span> And z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' (16 &lt;= j &lt;= 31)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro    f3(x, y, z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"kw1\">Not</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> z<span class=\"br0\">)</span>          <span class=\"co1\">''(32 &lt;= j &lt;= 47)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro    f4(x, y, z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>x And z<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>y And <span class=\"br0\">(</span><span class=\"kw1\">Not</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">''(48 &lt;= j &lt;= 63)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro   f5(x, y, z)</span><br/>    <span class=\"br0\">(</span>x <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span>y <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"kw1\">Not</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>          <span class=\"co1\">''(64 &lt;= j &lt;= 79)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; K<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span>, K1<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>  K<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  = &amp;H00000000    <span class=\"co1\">'  (0 &lt;= j &lt;= 15)</span><br/>  K<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  = &amp;H5A827999    <span class=\"co1\">' (16 &lt;= j &lt;= 31)</span><br/>  K<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>  = &amp;H6ED9EBA1    <span class=\"co1\">' (32 &lt;= j &lt;= 47)</span><br/>  K<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>  = &amp;H8F1BBCDC    <span class=\"co1\">' (48 &lt;= j &lt;= 63)</span><br/>  K<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>  = &amp;HA953FD4E    <span class=\"co1\">' (64 &lt;= j &lt;= 79)</span><br/>  K1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = &amp;H50A28BE6    <span class=\"co1\">'  (0 &lt;= j &lt;= 15)</span><br/>  K1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> = &amp;H5C4DD124    <span class=\"co1\">' (16 &lt;= j &lt;= 31)</span><br/>  K1<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> = &amp;H6D703EF3    <span class=\"co1\">' (32 &lt;= j &lt;= 47)</span><br/>  K1<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> = &amp;H7A6D76E9    <span class=\"co1\">' (48 &lt;= j &lt;= 63)</span><br/>  K1<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> = &amp;H00000000    <span class=\"co1\">' (64 &lt;= j &lt;= 79)</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> r<span class=\"br0\">(</span><span class=\"nu0\">16</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = _<br/>  <span class=\"br0\">{</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">8</span>, _<br/>    <span class=\"nu0\">3</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, _<br/>    <span class=\"nu0\">1</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">2</span>, _<br/>    <span class=\"nu0\">4</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">13</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> r1<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = _<br/>  <span class=\"br0\">{</span> <span class=\"nu0\">5</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">12</span>, _<br/>    <span class=\"nu0\">6</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, _<br/>    <span class=\"nu0\">15</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">13</span>, _<br/>    <span class=\"nu0\">8</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">14</span>, _<br/>    <span class=\"nu0\">12</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> s<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = _<br/>  <span class=\"br0\">{</span> <span class=\"nu0\">11</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">8</span>, _<br/>    <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">12</span>, _<br/>    <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">5</span>, _<br/>    <span class=\"nu0\">11</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, _<br/>    <span class=\"nu0\">9</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> s1<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = _<br/>  <span class=\"br0\">{</span> <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">6</span>, _<br/>    <span class=\"nu0\">9</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">11</span>, _<br/>    <span class=\"nu0\">9</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">5</span>, _<br/>    <span class=\"nu0\">15</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">8</span>, _<br/>    <span class=\"nu0\">8</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">13</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">11</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h0 = &amp;H67452301<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h1 = &amp;HEFCDAB89<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h2 = &amp;H98BADCFE<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h3 = &amp;H10325476<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h4 = &amp;HC3D2E1F0<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>  <span class=\"co1\">' set the first bit after the message to 1</span><br/>  message = message + <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' add one char to the length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong padding = <span class=\"nu0\">64</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>l +<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span> \\ <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' 512 \\ 8 = 64 char.</span><br/>\u00a0<br/>  <span class=\"co1\">' check if we have enough room for inserting the length</span><br/>  <span class=\"kw1\">If</span> padding &lt; <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span> padding = padding + <span class=\"nu0\">64</span><br/>\u00a0<br/>  message = message + <span class=\"kw1\">String</span><span class=\"br0\">(</span>padding, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">' adjust length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong l1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span>                <span class=\"co1\">' new length</span><br/>\u00a0<br/>  l = l * <span class=\"nu0\">8</span>    <span class=\"co1\">' orignal length in bits</span><br/>  <span class=\"co1\">' create ubyte ptr to point to l ( = length in bits)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ub_ptr = Cast<span class=\"br0\">(</span><span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span>, @l<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span>  <span class=\"co1\">'copy length of message to the last 8 bytes</span><br/>    message<span class=\"br0\">[</span>l1 -<span class=\"nu0\">8</span> + i<span class=\"br0\">]</span> = ub_ptr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; A, B, C, D, E, A1, B1, C1, D1, E1, T, T1<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>l1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">64</span> <span class=\"co1\">' split into 64 byte block</span><br/>\u00a0<br/>    <span class=\"co1\">' x point to 16 * 4byte block inside the string message</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span> X = Cast<span class=\"br0\">(</span>UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>i*<span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    A  = h0\u00a0: B  = h1\u00a0: C  = h2\u00a0: D  = h3\u00a0: E  = h4<br/>    A1 = h0\u00a0: B1 = h1\u00a0: C1 = h2\u00a0: D1 = h3\u00a0: E1 = h4<br/>\u00a0<br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span><br/>      Select <span class=\"kw1\">Case</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> j<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">15</span><br/>          T = A + f1<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"co1\">'+ K(1)</span><br/>          T = ROtate_Left<span class=\"br0\">(</span>T, s<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E<br/>          T1 = A1 + f5<span class=\"br0\">(</span>B1, C1, D1<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          T1 = ROtate_Left<span class=\"br0\">(</span>T1, s1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E1<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">16</span> <span class=\"kw1\">To</span> <span class=\"nu0\">31</span><br/>          T = A + f2<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          T = ROtate_Left<span class=\"br0\">(</span>T, s<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E<br/>          T1 = A1 + f4<span class=\"br0\">(</span>B1, C1, D1<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          T1 = ROtate_Left<span class=\"br0\">(</span>T1, s1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E1<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">32</span> <span class=\"kw1\">To</span> <span class=\"nu0\">47</span><br/>          T = A + f3<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>          T = ROtate_Left<span class=\"br0\">(</span>T, s<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E<br/>          T1 = A1 + f3<span class=\"br0\">(</span>B1, C1, D1<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K1<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>          T1 = ROtate_Left<span class=\"br0\">(</span>T1, s1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E1<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">48</span> <span class=\"kw1\">To</span> <span class=\"nu0\">63</span><br/>          T = A + f4<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>          T = ROtate_Left<span class=\"br0\">(</span>T, s<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E<br/>          T1 = A1 + f2<span class=\"br0\">(</span>B1, C1, D1<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K1<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>          T1 = ROtate_Left<span class=\"br0\">(</span>T1, s1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E1<br/>        <span class=\"kw1\">Case</span> <span class=\"nu0\">64</span> <span class=\"kw1\">To</span> <span class=\"nu0\">79</span><br/>          T = A + f5<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> + K<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>          T = ROtate_Left<span class=\"br0\">(</span>T, s<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E<br/>          T1 = A1 + f1<span class=\"br0\">(</span>B1, C1, D1<span class=\"br0\">)</span> + X<span class=\"br0\">[</span>r1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">'+ K1(5)</span><br/>          T1 = ROtate_Left<span class=\"br0\">(</span>T1, s1<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + E1<br/>      <span class=\"kw1\">End</span> Select<br/>\u00a0<br/>      A = E\u00a0: E = D\u00a0: D = ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: C = B\u00a0: B = T<br/>      A1 = E1\u00a0: E1 = D1\u00a0: D1 = ROtate_left<span class=\"br0\">(</span>C1, <span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: C1 = B1\u00a0: B1 = T1<br/>\u00a0<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    T  = h1 + C + D1<br/>    h1 = h2 + D + E1<br/>    h2 = h3 + E + A1<br/>    h3 = h4 + A + B1<br/>    h4 = h0 + B + C1<br/>    h0 = T<br/>\u00a0<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> answer<br/>  <span class=\"co1\">' convert h0, h1, h2, h3 and h4 in hex, then add, low order first</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> hs1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h0, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>hs1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  hs1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h1, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>hs1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  hs1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h2, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>hs1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  hs1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h3, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>hs1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  hs1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h4, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>hs1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Return</span> <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test = <span class=\"st0\">\"Rosetta Code\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> test; <span class=\"st0\">\" =&gt; \"</span>; RIPEMD_160<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"golang.org/x/crypto/ripemd160\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">:=</span> ripemd160<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>ord<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Crypto<span class=\"sy0\">.</span>Hash<span class=\"sy0\">.</span>RIPEMD160 <span class=\"br0\">(</span>hash<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"br0\">(</span>unpack<span class=\"sy0\">,</span> pack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span>                     <span class=\"co1\">-- output to terminal</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%02x\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span>    <span class=\"co1\">-- to hex string</span><br/>       unpack <span class=\"sy0\">$</span>                       <span class=\"co1\">-- to array of Word8</span><br/>       hash <span class=\"sy0\">$</span>                         <span class=\"co1\">-- RIPEMD-160 hash to ByteString</span><br/>       pack <span class=\"sy0\">$</span>                         <span class=\"co1\">-- to ByteString</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><span class=\"sy0\">.</span>ord<span class=\"br0\">)</span>         <span class=\"co1\">-- to array of Word8</span><br/>       <span class=\"st0\">\"Rosetta Code\"</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 16, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">org.bouncycastle.crypto.digests.RIPEMD160Digest</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">org.bouncycastle.util.encoders.Hex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RosettaRIPEMD160<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> argv<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> r <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"US-ASCII\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        RIPEMD160Digest d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RIPEMD160Digest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">update</span> <span class=\"br0\">(</span>r, <span class=\"nu0\">0</span>, r.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> o <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span>d.<span class=\"me1\">getDigestSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">doFinal</span> <span class=\"br0\">(</span>o, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Hex.<span class=\"me1\">encode</span> <span class=\"br0\">(</span>o, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">using Nettle<br/>\u00a0<br/>labels = [\"\\\"\\\" (empty string)\", \"\\\"a\\\"\", \"\\\"abc\\\"\",<br/>        \"\\\"message digest\\\"\", \"\\\"a...z\\\"\",<br/>        \"\\\"abcdbcde...nopq\\\"\", \"\\\"A...Za...z0...9\\\"\",<br/>        \"8 times \\\"1234567890\\\"\", \"1 million times \\\"a\\\"\"]<br/>texts = [\"\", \"a\", \"abc\", \"message digest\", \"abcdefghijklmnopqrstuvwxyz\",<br/>        \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",<br/>        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",<br/>        \"1234567890\" ^ 8, \"a\" ^ 1_000_000]<br/>expects = [\"9c1185a5c5e9fc54612808977ee8f548b2258d31\",<br/>        \"0bdc9d2d256b3ee9daae347be6f4dc835a467ffe\",<br/>        \"8eb208f7e05d987a9b044a8e98c6b087f15a0bfc\",<br/>        \"5d0689ef49d2fae572b881b123a85ffa21595f36\",<br/>        \"f71c27109c692c1b56bbdceb5b9d2865b3708dbc\",<br/>        \"12a053384a9c0c88e405a06c27dcf49ada62eb2b\",<br/>        \"b0e20b6e3116640286ed3a87a5713079b21f5189\",<br/>        \"9b752e45573d4b39f4dbd3323cab82bf63326bfb\",<br/>        \"52783243c1697bdbe16d37f97f68f08325dc1528\"]<br/>\u00a0<br/>for (lab, text, expect) in zip(labels, texts, expects)<br/>    digest = hexdigest(\"ripemd160\", text)<br/>    println(\"# $lab\\n -&gt; digest: $digest\\n -&gt; expect: $expect\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">bouncycastle</span>.<span class=\"me1\">crypto</span>.<span class=\"me1\">digests</span>.<span class=\"me1\">RIPEMD160Digest</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">bouncycastle</span>.<span class=\"me1\">util</span>.<span class=\"me1\">encoders</span>.<span class=\"me1\">Hex</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">text</span>.<span class=\"me1\">Charsets</span>.<span class=\"me1\">US_ASCII</span><br/>\u00a0<br/>fun RIPEMD160Digest.<span class=\"me1\">inOneGo</span><span class=\"br0\">(</span>input <span class=\"sy0\">:</span> ByteArray<span class=\"br0\">)</span> <span class=\"sy0\">:</span> ByteArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> output <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span>digestSize<span class=\"br0\">)</span><br/>\u00a0<br/>    update<span class=\"br0\">(</span>input, <span class=\"nu0\">0</span>, input.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    doFinal<span class=\"br0\">(</span>output, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> output<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span>US<span class=\"sy0\">_</span>ASCII<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> output <span class=\"sy0\">=</span> RIPEMD160Digest<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">inOneGo</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>\u00a0<br/>    Hex.<span class=\"me1\">encode</span><span class=\"br0\">(</span>output, System.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>    System.<span class=\"me1\">out</span>.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cipher_digest(\"Rosetta Code\", -digest='RIPEMD160', -hex)<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>lua<br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">\"crypto\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>crypto<span class=\"sy0\">.</span>digest<span class=\"br0\">(</span><span class=\"st0\">\"ripemd160\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Hash[\"Rosetta code\",\"RIPEMD160\",\"HexString\"]</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Hash <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    in <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hash <span class=\"sy0\">:=</span> Encryption.Hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">RIPEMD160</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToHexString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pari/pari.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/ripemd.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define HEX(x)  (((x) &lt; 10)? (x)+'0': (x)-10+'a')</span><br/>\u00a0<br/>GEN plug_ripemd160<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>text<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> md<span class=\"br0\">[</span>RIPEMD160_DIGEST_LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  RIPEMD160<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>text<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"br0\">]</span>   <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span><span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> strtoGENstr<span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Crypt<span class=\"sy0\">::</span><span class=\"me2\">RIPEMD160</span><span class=\"sy0\">;</span><br/>say <a href=\"http://perldoc.perl.org/functions/unpack.html\"><span class=\"kw3\">unpack</span></a> <span class=\"st0\">\"H*\"</span><span class=\"sy0\">,</span> Crypt<span class=\"sy0\">::</span><span class=\"me2\">RIPEMD160</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">hash</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 80, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">=</span><span class=\"kw1\">for</span> CREDITS<br/>Crypto<span class=\"sy0\">-</span>JS v2<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<br/>http<span class=\"sy0\">:</span><span class=\"co1\">#code.google.com/p/crypto-js/</span><br/>Copyright <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"nu0\">2009</span><span class=\"sy0\">,</span> Jeff Mott<span class=\"sy0\">.</span> <span class=\"me1\">All</span> rights reserved<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> rotl<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&lt;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">+|</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> prefix<span class=\"sy0\">:&lt;</span>m<span class=\"sy0\">^&gt;</span> <span class=\"br0\">{</span> <span class=\"sy0\">+^</span><span class=\"re0\">$^x</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>m<span class=\"sy0\">+&gt;</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$^y</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> r1 <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span><br/>    <span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">13</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">6</span> <span class=\"nu0\">15</span> <span class=\"nu0\">3</span> <span class=\"nu0\">12</span> <span class=\"nu0\">0</span> <span class=\"nu0\">9</span> <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">14</span> <span class=\"nu0\">11</span> <span class=\"nu0\">8</span><br/>    <span class=\"nu0\">3</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">15</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">6</span> <span class=\"nu0\">13</span> <span class=\"nu0\">11</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">13</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">15</span> <span class=\"nu0\">14</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span><br/>    <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span> <span class=\"nu0\">7</span> <span class=\"nu0\">12</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">8</span> <span class=\"nu0\">11</span> <span class=\"nu0\">6</span> <span class=\"nu0\">15</span> <span class=\"nu0\">13</span><br/><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> r2 <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">9</span> <span class=\"nu0\">2</span> <span class=\"nu0\">11</span> <span class=\"nu0\">4</span> <span class=\"nu0\">13</span> <span class=\"nu0\">6</span> <span class=\"nu0\">15</span> <span class=\"nu0\">8</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> <span class=\"nu0\">3</span> <span class=\"nu0\">12</span><br/>    <span class=\"nu0\">6</span> <span class=\"nu0\">11</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">13</span> <span class=\"nu0\">5</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/>    <span class=\"nu0\">15</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">8</span> <span class=\"nu0\">12</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">13</span><br/>    <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">11</span> <span class=\"nu0\">15</span> <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">2</span> <span class=\"nu0\">13</span> <span class=\"nu0\">9</span> <span class=\"nu0\">7</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span><br/>    <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">10</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">2</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span><br/><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> s1 <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">12</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">8</span><br/>    <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">11</span> <span class=\"nu0\">9</span> <span class=\"nu0\">7</span> <span class=\"nu0\">15</span> <span class=\"nu0\">7</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">7</span> <span class=\"nu0\">13</span> <span class=\"nu0\">12</span><br/>    <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">9</span> <span class=\"nu0\">13</span> <span class=\"nu0\">15</span> <span class=\"nu0\">14</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span><br/>    <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">14</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span><br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">15</span> <span class=\"nu0\">5</span> <span class=\"nu0\">11</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">12</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">11</span> <span class=\"nu0\">8</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><br/><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> s2 <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">15</span> <span class=\"nu0\">15</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">14</span> <span class=\"nu0\">12</span> <span class=\"nu0\">6</span><br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">13</span> <span class=\"nu0\">15</span> <span class=\"nu0\">7</span> <span class=\"nu0\">12</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">11</span> <span class=\"nu0\">7</span> <span class=\"nu0\">7</span> <span class=\"nu0\">12</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">15</span> <span class=\"nu0\">13</span> <span class=\"nu0\">11</span><br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">7</span> <span class=\"nu0\">15</span> <span class=\"nu0\">11</span> <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span> <span class=\"nu0\">14</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">13</span> <span class=\"nu0\">13</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span><br/>    <span class=\"nu0\">15</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">11</span> <span class=\"nu0\">14</span> <span class=\"nu0\">14</span> <span class=\"nu0\">6</span> <span class=\"nu0\">14</span> <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">5</span> <span class=\"nu0\">15</span> <span class=\"nu0\">8</span><br/>    <span class=\"nu0\">8</span> <span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">15</span> <span class=\"nu0\">13</span> <span class=\"nu0\">11</span> <span class=\"nu0\">11</span><br/><span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">constant</span> F <span class=\"sy0\">=</span> <br/>    <span class=\"sy0\">*</span> <span class=\"sy0\">+^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">+^</span> <span class=\"sy0\">*,</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$^y</span><span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span>m<span class=\"sy0\">^</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$^z</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">+|</span> m<span class=\"sy0\">^*</span><span class=\"br0\">)</span> <span class=\"sy0\">+^</span> <span class=\"sy0\">*,</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$^z</span><span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"re0\">$^y</span> <span class=\"sy0\">+&amp;</span> m<span class=\"sy0\">^</span><span class=\"re0\">$^z</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">*</span> <span class=\"sy0\">+^</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">+|</span> m<span class=\"sy0\">^*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> K1 <span class=\"sy0\">=</span> flat <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>0x00000000 0x5a827999 0x6ed9eba1 0x8f1bbcdc 0xa953fd4e<span class=\"sy0\">&gt;</span>\u00a0\u00bb<span class=\"kw1\">xx</span>\u00bb <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> K2 <span class=\"sy0\">=</span> flat <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>0x50a28be6 0x5c4dd124 0x6d703ef3 0x7a6d76e9 0x00000000<span class=\"sy0\">&gt;</span>\u00a0\u00bb<span class=\"kw1\">xx</span>\u00bb <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">our</span> <span class=\"kw2\">proto</span> rmd160<span class=\"br0\">(</span>$<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> Blob <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> rmd160<span class=\"br0\">(</span>Str <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> rmd160 <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"sy0\">:</span> <span class=\"st_h\">'ascii'</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> rmd160<span class=\"br0\">(</span>Blob <span class=\"re0\">$data</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <span class=\"sy0\">|</span> <span class=\"re0\">$data</span><span class=\"sy0\">,</span> 0x80<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"re0\">@b</span><span class=\"sy0\">-</span><span class=\"nu0\">448</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">$data</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span> gather <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">8</span> <span class=\"br0\">{</span> take <span class=\"re0\">$len</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> <span class=\"re0\">$len</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">256</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@word</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@b</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"br0\">{</span><br/>        take <span class=\"kw3\">reduce</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span><span class=\"nu0\">256</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@h</span> <span class=\"sy0\">=</span> 0x67452301<span class=\"sy0\">,</span> 0xefcdab89<span class=\"sy0\">,</span> 0x98badcfe<span class=\"sy0\">,</span> 0x10325476<span class=\"sy0\">,</span> 0xc3d2e1f0<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">@word</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">@Y</span> <span class=\"sy0\">=</span> <span class=\"re0\">@h</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">80</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$T</span> <span class=\"sy0\">=</span> rotl<span class=\"br0\">(</span><br/>                <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> m<span class=\"sy0\">+</span> F<span class=\"br0\">[</span><span class=\"re0\">$j</span> <span class=\"kw1\">div</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"sy0\">|@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> m<span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">@word</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span>r1<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> m<span class=\"sy0\">+</span> K1<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s1<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span>              <br/>            <span class=\"br0\">)</span> m<span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">@</span><span class=\"kw1\">X</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$T</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> rotl<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$T</span> <span class=\"sy0\">=</span> rotl<span class=\"br0\">(</span><br/>                <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> m<span class=\"sy0\">+</span> F<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">79</span><span class=\"sy0\">-</span><span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> m<span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">@word</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span>r2<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> m<span class=\"sy0\">+</span> K2<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s2<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">)</span> m<span class=\"sy0\">+</span> <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@Y</span> <span class=\"sy0\">=</span> <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$T</span><span class=\"sy0\">,</span> <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> rotl<span class=\"br0\">(</span><span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">@h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>flat <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"sy0\">,^</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">Z</span><span class=\"br0\">[</span>m<span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>flat <span class=\"sy0\">@</span><span class=\"kw1\">X</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"sy0\">,^</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">Z</span><span class=\"br0\">[</span>m<span class=\"sy0\">+</span><span class=\"br0\">]</span> flat <span class=\"re0\">@Y</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"sy0\">,^</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> Blob<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@h</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$word</span> <span class=\"kw1\">is</span> rw <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">4</span> <span class=\"br0\">{</span> take <span class=\"re0\">$word</span> <span class=\"sy0\">%</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> <span class=\"re0\">$word</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">256</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> rmd160 <span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 4, "block": "<pre class=\"text highlighted_source\">include builtins\\ripemd160.e<br/>\u00a0<br/>constant test = \"Rosetta Code\"<br/>printf(1,\"\\n%s =&gt;\u00a0%s\\n\",{test,ripemd160(test)})</pre>"}, {"lang": "PicoLisp", "loc": 160, "block": "<pre class=\"text highlighted_source\">(de *R160-R1 . (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16<br/>               8 5 14 2 11 7 16 4 13 1 10 6 3 15 12 9<br/>               4 11 15 5 10 16 9 2 3 8 1 7 14 12 6 13<br/>               2 10 12 11 1 9 13 5 14 4 8 16 15 6 7 3<br/>               5 1 6 10 8 13 3 11 15 2 4 9 12 7 16 14 .))<br/>(de *R160-R2 . (6 15 8 1 10 3 12 5 14 7 16 9 2 11 4 13<br/>                7 12 4 8 1 14 6 11 15 16 9 13 5 10 2 3<br/>                16 6 2 4 8 15 7 10 12 9 13 3 11 1 5 14<br/>                9 7 5 2 4 12 16 1 6 13 3 14 10 8 11 15<br/>                13 16 11 5 2 6 9 8 7 3 14 15 1 4 10 12 .))<br/>(de *R160-S1 . (11 14 15 12 5 8 7 9 11 13 14 15 6 7 9 8<br/>               7 6 8 13 11 9 7 15 7 12 15 9 11 7 13 12<br/>               11 13 6 7 14 9 13 15 14 8 13 6 5 12 7 5<br/>               11 12 14 15 14 15 9 8 9 14 5 6 8 6 5 12<br/>               9 15 5 11 6 8 13 12 5 12 13 14 11 8 5 6 .))<br/>(de *R160-S2 . (8 9 9 11 13 15 15 5 7 7 8 11 14 14 12 6<br/>                9 13 15 7 12 8 9 11 7 7 12 7 6 15 13 11<br/>                9 7 15 11 8 6 6 14 12 13 5 14 13 13 7 5<br/>                15 5 8 11 14 14 6 14 6 9 12 9 12 5 15 8<br/>                8 5 12 9 12 5 14 6 8 13 6 5 15 13 11 11 .))<br/>\u00a0<br/>(de mod32 (N)<br/>   (&amp; N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de not32 (N)<br/>   (x| N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de add32 @<br/>   (mod32 (pass +)) )<br/>\u00a0<br/>(de leftRotate (X C)<br/>   (| (mod32 (&gt;&gt; (- C) X)) (&gt;&gt; (- 32 C) X)) )<br/>\u00a0<br/>(de ripemd160 (Str)<br/>   (let Len (length Str)<br/>      (setq Str<br/>         (conc<br/>            (need<br/>               (- 8 (* 64 (/ (+ Len 1 8 63) 64)))<br/>               (conc<br/>                  (mapcar char (chop Str))<br/>                  (cons `(hex \"80\")) )<br/>               0 )<br/>            (make<br/>               (setq Len (* 8 Len))<br/>               (do 8<br/>                  (link (&amp; Len 255))<br/>                  (setq Len (&gt;&gt; 8 Len )) ) ) ) ) )<br/>   (let<br/>      (H0 `(hex \"67452301\")<br/>         H1 `(hex \"EFCDAB89\")<br/>         H2 `(hex \"98BADCFE\")<br/>         H3 `(hex \"10325476\") <br/>         H4 `(hex \"C3D2E1F0\") )<br/>      (while Str<br/>         (let<br/>            (A1 H0  B1 H1  C1 H2  D1 H3  E1 H4<br/>               A2 H0  B2 H1  C2 H2  D2 H3  E2 H4<br/>               W (make<br/>                     (do 16<br/>                        (link<br/>                           (apply |<br/>                              (mapcar &gt;&gt; (0 -8 -16 -24) (cut 4 'Str)) ) ) ) ) )<br/>            (use (Func1 Func2 Hex1 Hex2)<br/>               (for I 80<br/>                  (cond<br/>                     ((&gt;= 16 I)<br/>                        (setq<br/>                           Func1 '(x| B1 C1 D1)<br/>                           Func2 '(x| B2 (| C2 (not32 D2)))<br/>                           Hex1 0<br/>                           Hex2 `(hex \"50A28BE6\") ) )<br/>                     ((&gt;= 32 I) <br/>                        (setq<br/>                           Func1 '(| (&amp; B1 C1) (&amp; (not32 B1) D1))<br/>                           Func2 '(| (&amp; B2 D2) (&amp; C2 (not32 D2)))<br/>                           Hex1 `(hex \"5A827999\")<br/>                           Hex2 `(hex \"5C4DD124\") ) )<br/>                     ((&gt;= 48 I)<br/>                        (setq<br/>                           Func1 '(x| (| B1 (not32 C1)) D1)<br/>                           Func2 '(x| (| B2 (not32 C2)) D2)<br/>                           Hex1 `(hex \"6ED9EBA1\")<br/>                           Hex2 `(hex \"6D703EF3\") ) )<br/>                     ((&gt;= 64 I)<br/>                        (setq<br/>                           Func1 '(| (&amp; B1 D1) (&amp; C1 (not32 D1)))<br/>                           Func2 '(| (&amp; B2 C2) (&amp; (not32 B2) D2))<br/>                           Hex1 `(hex \"8F1BBCDC\")<br/>                           Hex2 `(hex \"7A6D76E9\") ) )<br/>                     (T<br/>                        (setq<br/>                           Func1 '(x| B1 (| C1 (not32 D1)))<br/>                           Func2 '(x| B2 C2 D2)<br/>                           Hex1 `(hex \"A953FD4E\")<br/>                           Hex2 0 ) ) )<br/>                  (setq<br/>                     Tmp1<br/>                     (add32<br/>                        (leftRotate<br/>                           (add32<br/>                              A1<br/>                              (eval Func1)<br/>                              (get W (pop '*R160-R1))<br/>                              Hex1 )<br/>                           (pop '*R160-S1) )<br/>                        E1 )<br/>                     Tmp2      <br/>                     (add32<br/>                        (leftRotate<br/>                           (add32<br/>                              A2<br/>                              (eval Func2)<br/>                              (get W (pop '*R160-R2))<br/>                              Hex2 )<br/>                           (pop '*R160-S2) )<br/>                        E2 )<br/>                     A1 E1<br/>                     E1 D1<br/>                     D1 (leftRotate C1 10)<br/>                     C1 B1<br/>                     B1 Tmp1 <br/>\u00a0<br/>                     A2 E2<br/>                     E2 D2<br/>                     D2 (leftRotate C2 10)<br/>                     C2 B2<br/>                     B2 Tmp2 ) ) )<br/>               (setq<br/>                  Tmp (add32 H1 C1 D2)<br/>                  H1 (add32 H2 D1 E2)<br/>                  H2 (add32 H3 E1 A2)<br/>                  H3 (add32 H4 A1 B2)<br/>                  H4 (add32 H0 B1 C2)<br/>                  H0 Tmp ) ) )<br/>      (make<br/>         (for N (list H0 H1 H2 H3 H4)<br/>            (do 4<br/>               (link (&amp; N 255))<br/>               (setq N (&gt;&gt; 8 N)) ) ) ) ) )<br/>\u00a0<br/>(let Str \"Rosetta Code\" <br/>   (println<br/>      (pack<br/>         (mapcar<br/>            '((B) (pad 2 (hex B)))<br/>            (ripemd160 Str) ) ) )<br/>   (println<br/>      (pack<br/>         (mapcar<br/>            '((B) (pad 2 (hex B)))<br/>            (native <br/>               \"libcrypto.so\"<br/>               \"RIPEMD160\"<br/>               '(B . 20)<br/>               Str<br/>               (length Str)<br/>               '(NIL (20)) ) ) ) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 53, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Hash<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span>DefaultParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"String\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"String\"</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$String</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ParameterSetName<span class=\"sy0\">=</span><span class=\"st0\">\"FileName\"</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$FileName</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$false</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateSet<span class=\"br0\">(</span><span class=\"st0\">\"MD5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"RIPEMD160\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SHA1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SHA256\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SHA384\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SHA512\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$HashType</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"MD5\"</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$hashAlgorithm</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Security.Cryptography.HashAlgorithm<span class=\"br0\">]</span><br/>    <span class=\"re0\">$stringBuilder</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> System.Text.StringBuilder<br/>\u00a0<br/>    <span class=\"kw3\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$PSCmdlet</span>.ParameterSetName<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"String\"</span><br/>        <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$hashAlgorithm</span>::Create<span class=\"br0\">(</span><span class=\"re0\">$HashType</span><span class=\"br0\">)</span>.ComputeHash<span class=\"br0\">(</span><span class=\"br0\">[</span>System.Text.Encoding<span class=\"br0\">]</span>::UTF8.GetBytes<span class=\"br0\">(</span><span class=\"re0\">$String</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>\t        <span class=\"re0\">$stringBuilder</span>.Append<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToString<span class=\"br0\">(</span><span class=\"st0\">\"x2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Out-Null</span><br/>\t    <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"st0\">\"FileName\"</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$fileStream</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> System.IO.FileStream <span class=\"kw5\">-ArgumentList</span> <span class=\"re0\">$FileName</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>System.IO.FileMode<span class=\"br0\">]</span>::Open<span class=\"br0\">)</span><br/>\u00a0<br/>\t    <span class=\"re0\">$hashAlgorithm</span>::Create<span class=\"br0\">(</span><span class=\"re0\">$HashType</span><span class=\"br0\">)</span>.ComputeHash<span class=\"br0\">(</span><span class=\"re0\">$fileStream</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>\t        <span class=\"re0\">$stringBuilder</span>.Append<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToString<span class=\"br0\">(</span><span class=\"st0\">\"x2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Out-Null</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"re0\">$fileStream</span>.Close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t    <span class=\"re0\">$fileStream</span>.Dispose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$stringBuilder</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\">Python 3.3.0 <span class=\"br0\">(</span>v3.3.0:bd8afb90ebf2<span class=\"sy0\">,</span> Sep <span class=\"nu0\">29</span> <span class=\"nu0\">2012</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>:<span class=\"nu0\">57</span>:<span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>MSC v.1600 <span class=\"nu0\">64</span> bit <span class=\"br0\">(</span>AMD64<span class=\"br0\">)</span><span class=\"br0\">]</span> on win32<br/>Type <span class=\"st0\">\"copyright\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"credits\"</span> <span class=\"kw1\">or</span> <span class=\"st0\">\"license()\"</span> <span class=\"kw1\">for</span> more information.<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> hashlib<br/><span class=\"sy0\">&gt;&gt;&gt;</span> h <span class=\"sy0\">=</span> hashlib.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">'ripemd160'</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> h.<span class=\"me1\">update</span><span class=\"br0\">(</span>b<span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> h.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'b3be159860842cebaa7174c8fff0aa9e50a5199f'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require (planet soegaard/digest:1:2/digest))<br/>(ripemd160 #\"Rosetta Code\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'digest'</span><br/><span class=\"kw3\">puts</span> <span class=\"re2\">Digest::RMD160</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">bouncycastle</span>.<span class=\"me1\">crypto</span>.<span class=\"me1\">digests</span>.<span class=\"me1\">RIPEMD160Digest</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RosettaRIPEMD160 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>raw, messageDigest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"US-ASCII\"</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> RIPEMD160Digest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  messageDigest.<span class=\"me1\">update</span><span class=\"br0\">(</span>raw, <span class=\"nu0\">0</span>, raw.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> out <span class=\"sy0\">=</span> Array.<span class=\"me1\">fill</span><span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">(</span>messageDigest.<span class=\"me1\">getDigestSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  messageDigest.<span class=\"me1\">doFinal</span><span class=\"br0\">(</span>out, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>out.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"b3be159860842cebaa7174c8fff0aa9e50a5199f\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 197, "block": "<pre class=\"text highlighted_source\">// Circular left shift: http://en.wikipedia.org/wiki/Circular_shift<br/>// Precendence should be the same as &lt;&lt;<br/>infix operator  ~&lt;&lt; { precedence 160 associativity none }<br/>\u00a0<br/>public func ~&lt;&lt; (lhs: UInt32, rhs: Int) -&gt; UInt32 {<br/>    return (lhs &lt;&lt; UInt32(rhs)) | (lhs &gt;&gt; UInt32(32 - rhs));<br/>}<br/>\u00a0<br/>    public struct Block {<br/>        public init() {}<br/>\u00a0<br/>        var message: [UInt32] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]<br/>\u00a0<br/>        // Initial values<br/>        var h\u2080: UInt32 = 0x67452301<br/>        var h\u2081: UInt32 = 0xEFCDAB89<br/>        var h\u2082: UInt32 = 0x98BADCFE<br/>        var h\u2083: UInt32 = 0x10325476<br/>        var h\u2084: UInt32 = 0xC3D2E1F0<br/>\u00a0<br/>        public var hash: [UInt32] {<br/>            return [h\u2080, h\u2081, h\u2082, h\u2083, h\u2084]<br/>        }<br/>\u00a0<br/>        // FIXME: Make private as soon as tests support that<br/>        public mutating func compress (message: [UInt32]) -&gt; () {<br/>            assert(count(message) == 16, \"Wrong message size\")<br/>\u00a0<br/>            var A\u1d38 = h\u2080<br/>            var B\u1d38 = h\u2081<br/>            var C\u1d38 = h\u2082<br/>            var D\u1d38 = h\u2083<br/>            var E\u1d38 = h\u2084<br/>\u00a0<br/>            var A\u1d3f = h\u2080<br/>            var B\u1d3f = h\u2081<br/>            var C\u1d3f = h\u2082<br/>            var D\u1d3f = h\u2083<br/>            var E\u1d3f = h\u2084<br/>\u00a0<br/>            for j in 0...79 {<br/>                // Left side<br/>                let word\u1d38 = message[r.Left[j]]<br/>                let function\u1d38 = f(j)<br/>\u00a0<br/>                let T\u1d38: UInt32 = ((A\u1d38 &amp;+ function\u1d38(B\u1d38,C\u1d38,D\u1d38) &amp;+ word\u1d38 &amp;+ K.Left[j]) ~&lt;&lt; s.Left[j]) &amp;+ E\u1d38<br/>\u00a0<br/>                A\u1d38 = E\u1d38<br/>                E\u1d38 = D\u1d38<br/>                D\u1d38 = C\u1d38 ~&lt;&lt; 10<br/>                C\u1d38 = B\u1d38<br/>                B\u1d38 = T\u1d38<br/>\u00a0<br/>                // Right side<br/>                let word\u1d3f = message[r.Right[j]]<br/>                let function\u1d3f = f(79 - j)<br/>\u00a0<br/>                let T\u1d3f: UInt32 = ((A\u1d3f &amp;+ function\u1d3f(B\u1d3f,C\u1d3f,D\u1d3f) &amp;+ word\u1d3f &amp;+ K.Right[j]) ~&lt;&lt; s.Right[j]) &amp;+ E\u1d3f<br/>\u00a0<br/>                A\u1d3f = E\u1d3f<br/>                E\u1d3f = D\u1d3f<br/>                D\u1d3f = C\u1d3f ~&lt;&lt; 10<br/>                C\u1d3f = B\u1d3f<br/>                B\u1d3f = T\u1d3f<br/>            }<br/>\u00a0<br/>            let T = h\u2081 &amp;+ C\u1d38 &amp;+ D\u1d3f<br/>            h\u2081 = h\u2082 &amp;+ D\u1d38 &amp;+ E\u1d3f<br/>            h\u2082 = h\u2083 &amp;+ E\u1d38 &amp;+ A\u1d3f<br/>            h\u2083 = h\u2084 &amp;+ A\u1d38 &amp;+ B\u1d3f<br/>            h\u2084 = h\u2080 &amp;+ B\u1d38 &amp;+ C\u1d3f<br/>            h\u2080 = T<br/>        }<br/>\u00a0<br/>        public func f (j: Int) -&gt; ((UInt32, UInt32, UInt32) -&gt; UInt32) {<br/>            switch j {<br/>            case let index where j &lt; 0:<br/>                assert(false, \"Invalid j\")<br/>                return {(_, _, _) in 0 }<br/>            case let index where j &lt;= 15:<br/>                return {(x, y, z) in  x ^ y ^ z }<br/>            case let index where j &lt;= 31:<br/>                return {(x, y, z) in  (x &amp; y) | (~x &amp; z) }<br/>            case let index where j &lt;= 47:<br/>                return {(x, y, z) in  (x | ~y) ^ z }<br/>            case let index where j &lt;= 63:<br/>                return {(x, y, z) in  (x &amp; z) | (y &amp; ~z) }<br/>            case let index where j &lt;= 79:<br/>                return {(x, y, z) in  x ^ (y | ~z) }<br/>            default:<br/>                assert(false, \"Invalid j\")<br/>                return {(_, _, _) in 0 }<br/>            }<br/>        }<br/>\u00a0<br/>        public enum K {<br/>            case Left, Right<br/>\u00a0<br/>            public subscript(j: Int) -&gt; UInt32 {<br/>                switch j {<br/>                case let index where j &lt; 0:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                case let index where j &lt;= 15:<br/>                    return self == .Left\u00a0? 0x00000000\u00a0: 0x50A28BE6<br/>                case let index where j &lt;= 31:<br/>                    return self == .Left\u00a0? 0x5A827999\u00a0: 0x5C4DD124<br/>                case let index where j &lt;= 47:<br/>                    return self == .Left\u00a0? 0x6ED9EBA1\u00a0: 0x6D703EF3<br/>                case let index where j &lt;= 63:<br/>                    return self == .Left\u00a0? 0x8F1BBCDC\u00a0: 0x7A6D76E9<br/>                case let index where j &lt;= 79:<br/>                    return self == .Left\u00a0? 0xA953FD4E\u00a0: 0x00000000<br/>                default:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                    }<br/>            }<br/>        }<br/>\u00a0<br/>        public enum r {<br/>            case Left, Right<br/>\u00a0<br/>            public subscript (j: Int) -&gt; Int {<br/>                switch j {<br/>                case let index where j &lt; 0:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                case let index where j &lt;= 15:<br/>                    if self == .Left {<br/>                        return index<br/>                    } else {<br/>                        return [5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12][index]<br/>                    }<br/>                case let index where j &lt;= 31:<br/>                    if self == .Left {<br/>                        return [ 7, 4,13, 1,10, 6,15, 3,12, 0, 9, 5, 2,14,11, 8][index - 16]<br/>                    } else {<br/>                        return [ 6,11, 3, 7, 0,13, 5,10,14,15, 8,12, 4, 9, 1, 2][index - 16]<br/>                    }<br/>                case let index where j &lt;= 47:<br/>                    if self == .Left {<br/>                        return [3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12][index - 32]<br/>                    } else {<br/>                        return [15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13][index - 32]<br/>                    }<br/>                case let index where j &lt;= 63:<br/>                    if self == .Left {<br/>                        return [1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2][index - 48]<br/>                    } else {<br/>                        return [8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14][index - 48]<br/>                    }<br/>                case let index where j &lt;= 79:<br/>                    if self == .Left {<br/>                        return [ 4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13][index - 64]<br/>                    } else {<br/>                        return [12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11][index - 64]<br/>                    }<br/>\u00a0<br/>                default:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                }<br/>            }<br/>\u00a0<br/>\u00a0<br/>        }<br/>\u00a0<br/>        public enum s {<br/>            case Left, Right<br/>\u00a0<br/>            public subscript(j: Int) -&gt; Int {<br/>                switch j {<br/>                case let index where j &lt; 0:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                case let index where j &lt;= 15:<br/>                    return (self == .Left\u00a0? [11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8]\u00a0: [8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6])[j]<br/>                case let index where j &lt;= 31:<br/>                    return (self == .Left\u00a0? [7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12]\u00a0: [9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11])[j - 16]<br/>                case let index where j &lt;= 47:<br/>                    return (self == .Left\u00a0? [11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5]\u00a0: [9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5])[j - 32]<br/>                case let index where j &lt;= 63:<br/>                    return (self == .Left\u00a0? [11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12]\u00a0: [15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8])[j - 48]<br/>                case let index where j &lt;= 79:<br/>                    return (self == .Left\u00a0? [9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]\u00a0: [8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11])[j - 64]<br/>                default:<br/>                    assert(false, \"Invalid j\")<br/>                    return 0<br/>                    }<br/>            }<br/>\u00a0<br/>        }<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    }</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require ripemd160<br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>ripemd::<span class=\"me1\">ripemd160</span> -hex <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">var MsgHash=Import(\"zklMsgHash\");<br/>MsgHash.RIPEMD160(\"Rosetta Code\")</pre>"}]}