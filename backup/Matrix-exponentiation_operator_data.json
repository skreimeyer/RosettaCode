{"task": "Matrix-exponentiation_operator", "blocks": [{"lang": "Ada", "loc": 90, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Matrix <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">generic</span><br/>      <span class=\"kw3\">type</span> Element <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>      Zero\u00a0: Element;<br/>      One \u00a0: Element;<br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>A, B\u00a0: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element <span class=\"kw1\">is</span> &lt;&gt;;<br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>A, B\u00a0: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Element <span class=\"kw1\">is</span> &lt;&gt;;<br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Image <span class=\"br0\">(</span>X\u00a0: Element<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">package</span> Matrices <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Matrix <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Integer <span class=\"kw3\">range</span> &lt;&gt;, Integer <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Element;<br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>A, B\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"**\"</span> <span class=\"br0\">(</span>A\u00a0: Matrix; Power\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix;<br/>      <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>A\u00a0: Matrix<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Matrices;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Matrices <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>A, B\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>         R  \u00a0: Matrix <span class=\"br0\">(</span>A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, B'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Sum\u00a0: Element\u00a0:= Zero;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> R'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> R'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>               Sum\u00a0:= Zero;<br/>               <span class=\"kw1\">for</span> K <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>                  Sum\u00a0:= Sum + A <span class=\"br0\">(</span>I, K<span class=\"br0\">)</span> * B <span class=\"br0\">(</span>K, J<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>               R <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span>\u00a0:= Sum;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">return</span> R;<br/>      <span class=\"kw1\">end</span> <span class=\"st0\">\"*\"</span>;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"**\"</span> <span class=\"br0\">(</span>A\u00a0: Matrix; Power\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> Power = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> A;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">declare</span><br/>            R\u00a0: Matrix <span class=\"br0\">(</span>A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Zero<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            P\u00a0: Matrix \u00a0:= A;<br/>            E\u00a0: Natural\u00a0:= Power;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> P'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span> <span class=\"co1\">-- R is identity matrix</span><br/>               R <span class=\"br0\">(</span>I, I<span class=\"br0\">)</span>\u00a0:= One;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">if</span> E = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">return</span> R;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> E <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                  R\u00a0:= R * P;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               E\u00a0:= E / <span class=\"nu0\">2</span>;<br/>               <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> E = <span class=\"nu0\">0</span>;<br/>               P\u00a0:= P * P;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">return</span> R;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"st0\">\"**\"</span>;<br/>\u00a0<br/>      <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>A\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> A'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>               Put <span class=\"br0\">(</span>Image <span class=\"br0\">(</span>A <span class=\"br0\">(</span>I, J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            New_Line;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> Put;<br/>   <span class=\"kw1\">end</span> Matrices;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Integer_Matrices <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Matrices <span class=\"br0\">(</span>Integer, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, Image =&gt; Integer'Image<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Integer_Matrices;<br/>\u00a0<br/>   M\u00a0: Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M =\"</span><span class=\"br0\">)</span>;       Put <span class=\"br0\">(</span>M<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**0 =\"</span><span class=\"br0\">)</span>;    Put <span class=\"br0\">(</span>M**<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**1 =\"</span><span class=\"br0\">)</span>;    Put <span class=\"br0\">(</span>M**<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**2 =\"</span><span class=\"br0\">)</span>;    Put <span class=\"br0\">(</span>M**<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M*M =\"</span><span class=\"br0\">)</span>;     Put <span class=\"br0\">(</span>M*M<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**3 =\"</span><span class=\"br0\">)</span>;    Put <span class=\"br0\">(</span>M**<span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M*M*M =\"</span><span class=\"br0\">)</span>;   Put <span class=\"br0\">(</span>M*M*M<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**4 =\"</span><span class=\"br0\">)</span>;    Put <span class=\"br0\">(</span>M**<span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M*M*M*M =\"</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span>M*M*M*M<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M**10 =\"</span><span class=\"br0\">)</span>;   Put <span class=\"br0\">(</span>M**<span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"M*M*M*M*M*M*M*M*M*M =\"</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span>M*M*M*M*M*M*M*M*M*M<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Matrix;</pre>"}, {"lang": "ALGOL 68", "loc": 31, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> default upb<span class=\"sy1\">=</span>3<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> VEC <span class=\"sy1\">=</span> <span class=\"br0\">[</span>default upb<span class=\"br0\">]</span>COSCAL<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> MAT <span class=\"sy1\">=</span> <span class=\"br0\">[</span>default upb<span class=\"sy1\">,</span>default upb<span class=\"br0\">]</span>COSCAL<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>COSCAL<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    COSCAL result<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span> result<span class=\"sy1\">+:=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VEC a<span class=\"sy1\">,</span> MAT b<span class=\"br0\">)</span>VEC<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload vec times matrix #</span><br/>    <span class=\"br0\">[</span>2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>COSCAL result<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> b <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> b <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"sy1\">*</span>b<span class=\"br0\">[</span><span class=\"sy1\">,</span>j<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MAT a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>MAT<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"coMULTI\"># overload matrix times matrix #</span><br/>    <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">LWB</span> b<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> b<span class=\"br0\">]</span>COSCAL result<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> result <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">:=</span>a<span class=\"br0\">[</span>k<span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"sy1\">*</span>b <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    result<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> IDENTITY <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> upb<span class=\"br0\">)</span>MAT<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>upb<span class=\"sy1\">,</span>upb<span class=\"br0\">]</span> COSCAL out<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> upb <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> upb <span class=\"kw2\">DO</span><br/>      out<span class=\"br0\">[</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">]</span><span class=\"sy1\">:=</span> <span class=\"br0\">(</span> i<span class=\"sy1\">=</span>j <span class=\"sy1\">|</span>1<span class=\"sy1\">|</span>0<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "BBC BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">      DIM matrix(1,1), output(1,1)<br/>      matrix() = 3, 2, 2, 1<br/>\u00a0<br/>      FOR power% = 0 TO 9<br/>        PROCmatrixpower(matrix(), output(), power%)<br/>        PRINT \"matrix()^\"\u00a0; power% \" = \"<br/>        FOR row% = 0 TO DIM(output(), 1)<br/>          FOR col% = 0 TO DIM(output(), 2)<br/>            PRINT output(row%,col%);<br/>          NEXT<br/>          PRINT<br/>        NEXT row%<br/>      NEXT power%<br/>      END<br/>\u00a0<br/>      DEF PROCmatrixpower(src(), dst(), pow%)<br/>      LOCAL i%<br/>      dst() = 0<br/>      FOR i% = 0 TO DIM(dst(), 1)\u00a0: dst(i%,i%) = 1\u00a0: NEXT<br/>      IF pow% THEN<br/>        FOR i% = 1 TO pow%<br/>          dst() = dst() . src()<br/>        NEXT<br/>      ENDIF<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 184, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> squareMtxStruct <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span>   dim<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">**</span>m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>SquareMtx<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* function for initializing row r of a new matrix */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>FillFunc<span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ff_data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>SquareMtx NewSquareMtx<span class=\"br0\">(</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> FillFunc fillFunc<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ff_data <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    SquareMtx sm <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> squareMtxStruct<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sm<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> rw<span class=\"sy0\">;</span><br/>        sm<span class=\"sy0\">-&gt;</span>dim <span class=\"sy0\">=</span> dim<span class=\"sy0\">;</span><br/>        sm<span class=\"sy0\">-&gt;</span>cells <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>dim<span class=\"sy0\">*</span>dim <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sm<span class=\"sy0\">-&gt;</span>m <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span> dim <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sm<span class=\"sy0\">-&gt;</span>cells <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>sm<span class=\"sy0\">-&gt;</span>m <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>rw<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> rw<span class=\"sy0\">&lt;</span>dim<span class=\"sy0\">;</span> rw<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sm<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sm<span class=\"sy0\">-&gt;</span>cells <span class=\"sy0\">+</span> dim<span class=\"sy0\">*</span>rw<span class=\"sy0\">;</span><br/>                fillFunc<span class=\"br0\">(</span> sm<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy0\">,</span> rw<span class=\"sy0\">,</span> dim<span class=\"sy0\">,</span> ff_data <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sm<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sm<span class=\"sy0\">-&gt;</span>cells<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>sm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Square Matrix allocation failure<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Malloc failed for square matrix<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sm<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ffMatxSquare<span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> SquareMtx m0 <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> col<span class=\"sy0\">,</span> ix<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>m0rw <span class=\"sy0\">=</span> m0<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;</span> dim<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ix<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">&lt;</span>dim<span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sum <span class=\"sy0\">+=</span> m0rw<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">*</span> m0<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        cells<span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ffMatxMulply<span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> SquareMtx mplcnds<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    SquareMtx mleft <span class=\"sy0\">=</span> mplcnds<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    SquareMtx mrigt <span class=\"sy0\">=</span> mplcnds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>m0rw <span class=\"sy0\">=</span> mleft<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> col<span class=\"sy0\">,</span> ix<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;</span> dim<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ix<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">&lt;</span>dim<span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sum <span class=\"sy0\">+=</span> m0rw<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">*</span> mrigt<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        cells<span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> MatxMul<span class=\"br0\">(</span> SquareMtx mr<span class=\"sy0\">,</span> SquareMtx left<span class=\"sy0\">,</span> SquareMtx rigt<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> rw<span class=\"sy0\">;</span><br/>    SquareMtx mplcnds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    mplcnds<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span> mplcnds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> rigt<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>rw <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> rw <span class=\"sy0\">&lt;</span> left<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">;</span> rw<span class=\"sy0\">++</span><span class=\"br0\">)</span>  <br/>        ffMatxMulply<span class=\"br0\">(</span> mr<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy0\">,</span> rw<span class=\"sy0\">,</span> left<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">,</span> mplcnds<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ffIdentity<span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>v <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> col<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>dim<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> cells<span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    cells<span class=\"br0\">[</span>rw<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> ffCopy<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> SquareMtx m1<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> col<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>dim<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> cells<span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m1<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> FreeSquareMtx<span class=\"br0\">(</span> SquareMtx m <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">-&gt;</span>cells<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>SquareMtx SquareMtxPow<span class=\"br0\">(</span> SquareMtx m0<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    SquareMtx v0 <span class=\"sy0\">=</span> NewSquareMtx<span class=\"br0\">(</span>m0<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">,</span> ffIdentity<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtx v1 <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    SquareMtx base0 <span class=\"sy0\">=</span> NewSquareMtx<span class=\"br0\">(</span> m0<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">,</span> ffCopy<span class=\"sy0\">,</span> m0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtx base1 <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    SquareMtx mplcnds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v1<span class=\"br0\">)</span><br/>                MatxMul<span class=\"br0\">(</span> v1<span class=\"sy0\">,</span> v0<span class=\"sy0\">,</span> base0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span>  <span class=\"br0\">{</span><br/>                mplcnds<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v0<span class=\"sy0\">;</span> mplcnds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> base0<span class=\"sy0\">;</span><br/>                v1 <span class=\"sy0\">=</span> NewSquareMtx<span class=\"br0\">(</span>m0<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">,</span> ffMatxMulply<span class=\"sy0\">,</span> mplcnds<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>            <span class=\"br0\">}</span><br/>            <span class=\"br0\">{</span>t <span class=\"sy0\">=</span> v0<span class=\"sy0\">;</span> v0<span class=\"sy0\">=</span>v1<span class=\"sy0\">;</span> v1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>base1<span class=\"br0\">)</span><br/>            MatxMul<span class=\"br0\">(</span> base1<span class=\"sy0\">,</span> base0<span class=\"sy0\">,</span> base0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <br/>            base1 <span class=\"sy0\">=</span> NewSquareMtx<span class=\"br0\">(</span> m0<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">,</span> ffMatxSquare<span class=\"sy0\">,</span> base0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        t <span class=\"sy0\">=</span> base0<span class=\"sy0\">;</span> base0 <span class=\"sy0\">=</span> base1<span class=\"sy0\">;</span> base1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>base0<span class=\"br0\">)</span> FreeSquareMtx<span class=\"br0\">(</span>base0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>base1<span class=\"br0\">)</span> FreeSquareMtx<span class=\"br0\">(</span>base1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v1<span class=\"br0\">)</span> FreeSquareMtx<span class=\"br0\">(</span>v1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> v0<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>FILE <span class=\"sy0\">*</span>fout<span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> SquareMtxPrint<span class=\"br0\">(</span> SquareMtx mtx<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>mn <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> col<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> mtx<span class=\"sy0\">-&gt;</span>dim<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\"%s dim:%d =<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> mn<span class=\"sy0\">,</span> mtx<span class=\"sy0\">-&gt;</span>dim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>rw<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> rw<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">;</span> rw<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\" |\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>col<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> col<span class=\"sy0\">&lt;</span>d<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\"%8.5f \"</span><span class=\"sy0\">,</span>mtx<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\" |<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fillInit<span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>cells<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rw<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dim<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> theta <span class=\"sy0\">=</span> <span class=\"nu16\">3.1415926536</span><span class=\"sy0\">/</span><span class=\"nu16\">6.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> c1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span> theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> s1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span> theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span>rw<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>        cells<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>c1<span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>s1<span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>        cells<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span>s1<span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>c1<span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>        cells<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu16\">0.0</span><span class=\"sy0\">;</span> cells<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    SquareMtx m0 <span class=\"sy0\">=</span> NewSquareMtx<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> fillInit<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtx m1 <span class=\"sy0\">=</span> SquareMtxPow<span class=\"br0\">(</span> m0<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtx m2 <span class=\"sy0\">=</span> SquareMtxPow<span class=\"br0\">(</span> m0<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtx m3 <span class=\"sy0\">=</span> SquareMtxPow<span class=\"br0\">(</span> m0<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//  fout = stdout;</span><br/>    fout <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"matrx_exp.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtxPrint<span class=\"br0\">(</span>m0<span class=\"sy0\">,</span> <span class=\"st0\">\"m0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> FreeSquareMtx<span class=\"br0\">(</span>m0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtxPrint<span class=\"br0\">(</span>m1<span class=\"sy0\">,</span> <span class=\"st0\">\"m0^5\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> FreeSquareMtx<span class=\"br0\">(</span>m1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtxPrint<span class=\"br0\">(</span>m2<span class=\"sy0\">,</span> <span class=\"st0\">\"m0^9\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> FreeSquareMtx<span class=\"br0\">(</span>m2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SquareMtxPrint<span class=\"br0\">(</span>m3<span class=\"sy0\">,</span> <span class=\"st0\">\"m0^2\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> FreeSquareMtx<span class=\"br0\">(</span>m3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 49, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;complex&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> MSize <span class=\"sy1\">=</span> <span class=\"nu0\">3</span>, <span class=\"kw2\">class</span> T <span class=\"sy1\">=</span> complex<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">class</span> SqMx <span class=\"br0\">{</span><br/>  <span class=\"kw4\">typedef</span> T Ax<span class=\"br0\">[</span>MSize<span class=\"br0\">]</span><span class=\"br0\">[</span>MSize<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">typedef</span> SqMx<span class=\"sy1\">&lt;</span>MSize, T<span class=\"sy1\">&gt;</span> Mx<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  Ax a<span class=\"sy4\">;</span><br/>  SqMx<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  SqMx<span class=\"br0\">(</span><span class=\"kw4\">const</span> Ax <span class=\"sy3\">&amp;</span>_a<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// constructor with pre-defined array</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">=</span> _a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">static</span> Mx identity<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Mx m<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        m.<span class=\"me1\">a</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>r <span class=\"sy1\">==</span> c <span class=\"sy4\">?</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> m<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">friend</span> ostream <span class=\"sy3\">&amp;</span>operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> Mx <span class=\"sy3\">&amp;</span>p<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span> <span class=\"co1\">// ugly print</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        os <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">a</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span><span class=\"sy4\">;</span><br/>      os <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  Mx operator<span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Mx <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Mx d<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d.<span class=\"me1\">a</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> MSize<span class=\"sy4\">;</span> k<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>          d.<span class=\"me1\">a</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">*</span> b.<span class=\"me1\">a</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> d<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 59, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply-matrices <span class=\"br0\">(</span>matrix-<span class=\"nu0\">0</span> matrix-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Takes two 2D arrays and returns their product, or an error if they cannot be multiplied\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>m0-dims <span class=\"br0\">(</span>array-dimensions matrix-<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m1-dims <span class=\"br0\">(</span>array-dimensions matrix-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m0-dim <span class=\"br0\">(</span><span class=\"kw1\">length</span> m0-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m1-dim <span class=\"br0\">(</span><span class=\"kw1\">length</span> m1-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> m0-dim<span class=\"br0\">)</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> m1-dim<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Array given not a matrix\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>m0-rows <span class=\"br0\">(</span><span class=\"kw1\">car</span> m0-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>m0-cols <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> m0-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>m1-rows <span class=\"br0\">(</span><span class=\"kw1\">car</span> m1-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>m1-cols <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> m1-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> m0-cols m1-rows<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Incompatible dimensions\"</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rarr <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> m0-rows m1-cols<span class=\"br0\">)</span><br/>                                     <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m0-cols<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>cc <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m0-cols<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> cc <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m1-cols<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                                 <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cc<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> cc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>cr <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m0-cols<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <br/>                                  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m1-cols<span class=\"br0\">)</span> cc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cr<span class=\"br0\">)</span><br/>                             cr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> cr m0-rows<span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rarr cr cc<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rarr cr cc<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">aref</span> matrix-<span class=\"nu0\">0</span> cr n<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">aref</span> matrix-<span class=\"nu0\">1</span> n cc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> matrix-<span class=\"kw1\">identity</span> <span class=\"br0\">(</span>dim<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Creates a new identity matrix of size dim*dim\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rarr <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> dim dim<span class=\"br0\">)</span><br/>                         <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n dim<span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rarr n n<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> matrix-<span class=\"kw1\">expt</span> <span class=\"br0\">(</span>matrix <span class=\"kw1\">exp</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Takes the first argument (a matrix) and multiplies it by itself exp times\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>m-dims <span class=\"br0\">(</span>array-dimensions matrix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m-rows <span class=\"br0\">(</span><span class=\"kw1\">car</span> m-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m-cols <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> m-dims<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>/<span class=\"sy0\">=</span> m-rows m-cols<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Non-square matrix\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>matrix-<span class=\"kw1\">identity</span> m-rows<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rarr <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> m-rows m-cols<span class=\"br0\">)</span><span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>cc <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> cc <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m-cols<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"nu0\">0</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>cr <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> cc <span class=\"br0\">(</span><span class=\"nu0\">1</span>- m-cols<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cr<span class=\"br0\">)</span><br/>                                cr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> cr m-rows<span class=\"br0\">)</span> rarr<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rarr cr cc<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> matrix cr cc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod <span class=\"kw1\">exp</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>me2 <span class=\"br0\">(</span>matrix-<span class=\"kw1\">expt</span> matrix <span class=\"br0\">(</span>/ <span class=\"kw1\">exp</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span>multiply-matrices me2 me2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>me2 <span class=\"br0\">(</span>matrix-<span class=\"kw1\">expt</span> matrix <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>multiply-matrices matrix <span class=\"br0\">(</span>multiply-matrices me2 me2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Chapel", "loc": 12, "block": "<pre class=\"text highlighted_source\">proc **(a, e) {<br/>    // create result matrix of same dimensions<br/>    var r:[a.domain] a.eltType;<br/>    // and initialize to identity matrix<br/>    forall ij in r.domain do<br/>        r(ij) = if ij(1) == ij(2) then 1 else 0;<br/>\u00a0<br/>    for 1..e do<br/>        r *= a;<br/>\u00a0<br/>    return r;<br/>}</pre>"}, {"lang": "D", "loc": 75, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> SquareMat<span class=\"br0\">(</span>T <span class=\"sy0\">=</span> <span class=\"kw4\">creal</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">public</span> <span class=\"kw4\">static</span> <span class=\"kw4\">string</span> fmt <span class=\"sy0\">=</span> <span class=\"st0\">\"%8.3f\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> TM <span class=\"sy0\">=</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> TM a<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">public</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> side<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>side <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        a <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> TM<span class=\"br0\">(</span>side<span class=\"sy0\">,</span> side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">public</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> TM m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>m.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>m.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> m.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Is square.</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// 2D dup.</span><br/>        a.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> m.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> m<span class=\"br0\">)</span><br/>            a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"&lt;%(%(\"</span> <span class=\"sy0\">~</span> fmt <span class=\"sy0\">~</span> <span class=\"st0\">\",\u00a0%)<span class=\"es1\">\\n</span>\u00a0%)&gt;\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">public</span> <span class=\"kw4\">static</span> SquareMat identity<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> side<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> m <span class=\"sy0\">=</span> SquareMat<span class=\"br0\">(</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> row<span class=\"sy0\">;</span> m.<span class=\"me1\">a</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                row<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> c<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">public</span> SquareMat opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"sy0\">:</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> SquareMat other<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span> <span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> other.<span class=\"me1\">a</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> side <span class=\"sy0\">=</span> other.<span class=\"me1\">a</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> SquareMat<span class=\"br0\">(</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                d.<span class=\"me1\">a</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> ark<span class=\"sy0\">;</span> a<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                    d.<span class=\"me1\">a</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> ark <span class=\"sy0\">*</span> other.<span class=\"me1\">a</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">public</span> SquareMat opBinary<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"sy0\">:</span><span class=\"st0\">\"^^\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"co1\">// The task part.</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Negative exponent not implemented.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> sq <span class=\"sy0\">=</span> SquareMat<span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> SquareMat.<span class=\"me1\">identity</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> sq <span class=\"sy0\">=</span> sq <span class=\"sy0\">*</span> sq<span class=\"sy0\">,</span> n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                d <span class=\"sy0\">=</span> d <span class=\"sy0\">*</span> sq<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> M <span class=\"sy0\">=</span> SquareMat<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">real</span> q <span class=\"sy0\">=</span> <span class=\"nu16\">0.5</span>.<span class=\"me1\">sqrt</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> m <span class=\"sy0\">=</span> M<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>   q <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">*</span>1.0Li<span class=\"sy0\">,</span>    q <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">*</span>1.0Li<span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">+</span> 0.0Li<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                     <span class=\"br0\">[</span>0.0L <span class=\"sy0\">-</span> q<span class=\"sy0\">*</span>1.0Li<span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">+</span> q<span class=\"sy0\">*</span>1.0Li<span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">+</span> 0.0Li<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                     <span class=\"br0\">[</span>0.0L <span class=\"sy0\">+</span>   0.0Li<span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">+</span>   0.0Li<span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">+</span> 1.0Li<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    M.<span class=\"me1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%5.2f\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> p<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"m ^^\u00a0%d =<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> m <span class=\"sy0\">^^</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre>                               10\nThis example calculates | 3 2 |\n                        | 2 1 |\n</pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.matrices sequences\u00a0;<br/>\u00a0<br/>: my-m^n ( m n -- m' )<br/>    dup 0 &lt; [ \"no negative exponents\" throw ] [<br/>        [ drop length identity-matrix ]<br/>        [ swap '[ _ m. ] times ] 2bi<br/>    ] if\u00a0;</pre>"}, {"lang": "Fortran", "loc": 53, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> matmod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">! Overloading the ** operator does not work because the compiler cannot</span><br/><span class=\"co1\">! differentiate between matrix exponentiation and the elementwise raising</span><br/><span class=\"co1\">! of an array to a power therefore we define a new operator</span><br/>  <span class=\"kw1\">interface</span> <span class=\"kw1\">operator</span> <span class=\"br0\">(</span>.<span class=\"me1\">matpow</span>.<span class=\"br0\">)</span><br/>    <span class=\"kw1\">module</span> <span class=\"kw1\">procedure</span> matrix_exp<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> matrix_exp<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">m</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>m,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>m,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    res <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>m,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      res<span class=\"br0\">(</span>i,i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  res <span class=\"sy0\">=</span> m<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, n<br/>    res <span class=\"sy0\">=</span> <span class=\"kw4\">matmul</span><span class=\"br0\">(</span>res, m<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> matrix_exp<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> matmod<br/>\u00a0<br/><span class=\"kw1\">program</span> Matrix_exponentiation<br/>  <span class=\"kw3\">use</span> matmod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">m1</span>, m2<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  m1 <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"sy0\">/</span> n, n <span class=\"sy0\">/</span><span class=\"br0\">)</span>, order <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span><br/>    m2 <span class=\"sy0\">=</span> m1 .<span class=\"me1\">matpow</span>. <span class=\"me1\">i</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>m2,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> m2<span class=\"br0\">(</span>j,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Matrix_exponentiation</pre>"}, {"lang": "GAP", "loc": 8, "block": "<pre class=\"text highlighted_source\"># Matrix exponentiation is built-in<br/>A\u00a0:= [[0 , 1], [1, 1]];<br/>PrintArray(A);<br/>#   [ [  0,  1 ],<br/>#     [  1,  1 ] ]<br/>PrintArray(A^10);<br/>#   [ [  34,  55 ],<br/>#     [  55,  89 ] ]</pre>"}, {"lang": "Haskell", "loc": 32, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">&lt;+&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/><span class=\"br0\">(</span><span class=\"sy0\">&lt;+&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/><span class=\"br0\">(</span><span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">newtype</span> Mat a <span class=\"sy0\">=</span><br/>  Mat <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span><br/>         <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> <span class=\"br0\">(</span>Mat a<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> <span class=\"br0\">(</span>Mat x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Mat <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a><span class=\"br0\">)</span> x<br/>  Mat x <span class=\"sy0\">+</span> Mat y <span class=\"sy0\">=</span> Mat <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;+&gt;</span><span class=\"br0\">)</span> x y<br/>  Mat x <span class=\"sy0\">*</span> Mat y <span class=\"sy0\">=</span><br/>    Mat<br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span> xs Main<span class=\"sy0\">.&lt;*&gt;</span> ys <span class=\"co1\">-- Main prefix to distinguish fron applicative operator</span><br/>        <span class=\"sy0\">|</span> ys <span class=\"sy0\">&lt;-</span> transpose y <span class=\"br0\">]</span><br/>      <span class=\"sy0\">|</span> xs <span class=\"sy0\">&lt;-</span> x <span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a> <span class=\"co1\">-- don't know dimension of the desired matrix</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:signum\"><span class=\"kw3\">signum</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> Mat <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"nu0\">4</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">mp=: +/ .*   <span class=\"co1\">NB. Matrix multiplication </span><br/>pow=: pow0=: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'mp&amp;x^:y =i.#x'</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// IdentityMatrix is a \"subclass\" of Matrix</span><br/><span class=\"kw1\">function</span> IdentityMatrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">mtx</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>IdentityMatrix.<span class=\"kw1\">prototype</span> <span class=\"sy0\">=</span> Matrix.<span class=\"kw1\">prototype</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// the Matrix exponentiation function</span><br/><span class=\"co1\">// returns a new matrix</span><br/>Matrix.<span class=\"kw1\">prototype</span>.<span class=\"me1\">exp</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> IdentityMatrix<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> result.<span class=\"me1\">mult</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">{</span>print<span class=\"br0\">(</span>m.<span class=\"me1\">exp</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 24, "block": "<pre class=\"text highlighted_source\"># produce an array of length n that is 1 at i and 0 elsewhere<br/>def indicator(i;n): [range(0;n) | 0] | .[i] = 1;<br/>\u00a0<br/># Identity matrix:<br/>def identity(n): reduce range(0;n) as $i ([]; . + [indicator( $i; n )] );<br/>\u00a0<br/>def direct_matrix_exp(n):<br/>  . as $in<br/>  | if n == 0 then identity($in|length)<br/>    else reduce range(1;n) as $i ($in; . as $m | multiply($m; $in))<br/>    end;<br/>\u00a0<br/>def matrix_exp(n):<br/>  if n &lt; 4 then direct_matrix_exp(n)<br/>  else . as $in<br/>  | ((n|2)|floor) as $m<br/>  | matrix_exp($m) as $ans<br/>  | multiply($ans;$ans) as $ans<br/>  | (n - (2 * $m) ) as $residue<br/>  | if $residue == 0 then $ans<br/>    else matrix_exp($residue) as $residue<br/>    | multiply($ans; $residue )<br/>    end<br/>  end;</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">julia&gt; [1 1\u00a0; 1 0]^10<br/>2x2 Array{Int64,2}:<br/> 89  55<br/> 55  34</pre>"}, {"lang": "Kotlin", "loc": 57, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> DoubleArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>operator fun Matrix.<span class=\"me1\">times</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows2 <span class=\"sy0\">=</span> other.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols2 <span class=\"sy0\">=</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    require<span class=\"br0\">(</span>cols1 <span class=\"sy0\">==</span> rows2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>cols2<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until rows1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until cols2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until rows2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> other<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun identityMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ident <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> ident<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ident<br/><span class=\"br0\">}</span><br/>\u00a0<br/>infix fun Matrix.<span class=\"me1\">pow</span><span class=\"br0\">(</span>n <span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    require <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> identityMatrix<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow <span class=\"sy0\">=</span> identityMatrix<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> base <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> e <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>e and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> pow <span class=\"sy0\">*=</span> base<br/>        e <span class=\"sy0\">=</span> e shr <span class=\"nu0\">1</span><br/>        base <span class=\"sy0\">*=</span> base<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> pow<br/><span class=\"br0\">}</span>  <br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"** Power of $n **\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> printMatrix<span class=\"br0\">(</span>m pow i, i<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 13, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>MatrixD$ <span class=\"sy0\">=</span><span class=\"st0\">\"3, 3,          0.86603,  0.50000,  0.00000,     -0.50000,  0.86603,  0.00000,     0.00000,  0.00000,  1.00000\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Exponentiation of a matrix\"</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixD$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"         Raised to power 5 =\"</span><br/>MatrixE$ <span class=\"sy0\">=</span>MatrixToPower$<span class=\"br0\">(</span> MatrixD$<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixE$<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"         Raised to power 9 =\"</span><br/>MatrixE$ <span class=\"sy0\">=</span>MatrixToPower$<span class=\"br0\">(</span> MatrixD$<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> DisplayMatrix MatrixE$<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 96, "block": "<pre class=\"lua highlighted_source\">Matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Matrix<span class=\"sy0\">.</span>new<span class=\"br0\">(</span> dim_y<span class=\"sy0\">,</span> dim_x <span class=\"br0\">)</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span> dim_y <span class=\"kw2\">and</span> dim_x <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> metatab <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span> matrix<span class=\"sy0\">,</span> metatab <span class=\"br0\">)</span><br/>    metatab<span class=\"sy0\">.</span>__add <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>Add<br/>    metatab<span class=\"sy0\">.</span>__mul <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>Mul<br/>    metatab<span class=\"sy0\">.</span>__pow <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>Pow<br/>\u00a0<br/>    matrix<span class=\"sy0\">.</span>dim_y <span class=\"sy0\">=</span> dim_y<br/>    matrix<span class=\"sy0\">.</span>dim_x <span class=\"sy0\">=</span> dim_x <br/>\u00a0<br/>    matrix<span class=\"sy0\">.</span>data <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dim_y <span class=\"kw1\">do</span><br/>        matrix<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> matrix<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Matrix<span class=\"sy0\">.</span>Show<span class=\"br0\">(</span> m <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_y <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span> m<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Matrix<span class=\"sy0\">.</span>Add<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_x <span class=\"sy0\">==</span> n<span class=\"sy0\">.</span>dim_x <span class=\"kw2\">and</span> m<span class=\"sy0\">.</span>dim_y <span class=\"sy0\">==</span> n<span class=\"sy0\">.</span>dim_y <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>new<span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_y<span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_y <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>            r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> n<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Matrix<span class=\"sy0\">.</span>Mul<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_x <span class=\"sy0\">==</span> n<span class=\"sy0\">.</span>dim_y <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>new<span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_y<span class=\"sy0\">,</span> n<span class=\"sy0\">.</span>dim_x <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_y <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>            r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>                r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> m<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Matrix<span class=\"sy0\">.</span>Pow<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> p <span class=\"br0\">)</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_x <span class=\"sy0\">==</span> m<span class=\"sy0\">.</span>dim_y <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>new<span class=\"br0\">(</span> m<span class=\"sy0\">.</span>dim_y<span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_y <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> j <span class=\"kw1\">then</span><br/>                    r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">else</span><br/>                    r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">elseif</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_y <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"sy0\">.</span>dim_x <span class=\"kw1\">do</span><br/>                r<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span>        <br/>    <span class=\"kw1\">else</span><br/>        r <span class=\"sy0\">=</span> m<br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> p <span class=\"kw1\">do</span><br/>            r <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> m<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>m <span class=\"sy0\">=</span> Matrix<span class=\"sy0\">.</span>new<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>m<span class=\"sy0\">.</span>data <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>n <span class=\"sy0\">=</span> m<span class=\"sy0\">^</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Matrix<span class=\"sy0\">.</span>Show<span class=\"br0\">(</span> n <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; M\u00a0:= &lt;&lt;1,2&gt;|&lt;3,4&gt;&gt;;<br/>&gt; M ^ 2;</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">a = {{3, 2}, {4, 1}};<br/>MatrixPower[a, 0]<br/>MatrixPower[a, 1]<br/>MatrixPower[a, -1]<br/>MatrixPower[a, 4]<br/>MatrixPower[a, 1/2]<br/>MatrixPower[a, Pi]</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>output<span class=\"br0\">]</span> = matrixexponentiation<span class=\"br0\">(</span>matrixA, exponent<span class=\"br0\">)</span><br/>   output = matrixA^<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 10, "block": "<pre class=\"text highlighted_source\">a: matrix([3, 2],<br/>          [4, 1])$<br/>\u00a0<br/>a ^^ 4;<br/>/* matrix([417, 208],<br/>          [416, 209]) */<br/>\u00a0<br/>a ^^ -1;<br/>/* matrix([-1/5, 2/5],<br/>          [4/5, -3/5]) */</pre>"}, {"lang": "OCaml", "loc": 58, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* identity matrix *)</span><br/><span class=\"kw1\">let</span> eye n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n n <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    a<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">1.0</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* matrix dimensions *)</span><br/><span class=\"kw1\">let</span> dim a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length a, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length a<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* make matrix from list in row-major order *)</span><br/><span class=\"kw1\">let</span> matrix p q v <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> q<span class=\"br0\">)</span><br/>  <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad dimensions\"</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix p q <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd v<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> g i j <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/>    <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>v <span class=\"sy0\">-&gt;</span><br/>        a<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> x<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> q<br/>        <span class=\"kw1\">then</span> g i <span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> v<br/>        <span class=\"kw1\">else</span> g <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> v<br/>    <span class=\"kw1\">in</span><br/>    g <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> v<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* matrix product *)</span><br/><span class=\"kw1\">let</span> matmul a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n, p <span class=\"sy0\">=</span> dim a<br/>  <span class=\"kw1\">and</span> q, r <span class=\"sy0\">=</span> dim b <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> p <span class=\"sy0\">&lt;&gt;</span> q <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad dimensions\"</span> <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n r <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> r<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> p<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        c<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> c<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+.</span> a<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*.</span> b<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* generic exponentiation, usual algorithm *)</span><br/><span class=\"kw1\">let</span> pow one mul a n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> g p x <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> x<br/>  <span class=\"sy0\">|</span> i <span class=\"sy0\">-&gt;</span><br/>      g <span class=\"br0\">(</span>mul p p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> i <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> mul p x <span class=\"kw1\">else</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  g a one n<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* example with integers *)</span><br/>pow <span class=\"nu0\">1</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"nu0\">16</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* -\u00a0: int = 65536 *)</span></pre>"}, {"lang": "Octave", "loc": 6, "block": "<pre class=\"octave highlighted_source\">M <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"sy5\">;</span> <span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>M<span class=\"sy2\">^</span><span class=\"nu0\">0</span><br/>M<span class=\"sy2\">^</span><span class=\"nu0\">1</span><br/>M<span class=\"sy2\">^</span><span class=\"nu0\">2</span><br/>M<span class=\"sy2\">^</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>M<span class=\"sy2\">^</span><span class=\"nu19\">0.5</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">M<span class=\"sy0\">^</span>n</pre>"}, {"lang": "Perl", "loc": 94, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> SquareMatrix<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Carp<span class=\"sy0\">;</span>                       <span class=\"co1\"># standard, \"it's not my fault\" module</span><br/>\u00a0<br/><span class=\"kw2\">use</span> overload <span class=\"br0\">(</span><br/>        <span class=\"st_h\">'\"\"'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_string</span><span class=\"sy0\">,</span>   <span class=\"co1\"># overload string operator so we can just print</span><br/>        <span class=\"st_h\">'*'</span>     <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_mult</span><span class=\"sy0\">,</span>     <span class=\"co1\"># multiplication, needed for expo</span><br/>        <span class=\"st_h\">'*='</span>    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_mult</span><span class=\"sy0\">,</span>     <span class=\"co1\"># ditto, explicitly defined to trigger copy</span><br/>        <span class=\"st_h\">'**'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_expo</span><span class=\"sy0\">,</span>     <span class=\"co1\"># overload exponentiation</span><br/>        <span class=\"st_h\">'='</span>     <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;_copy</span><span class=\"sy0\">,</span>     <span class=\"co1\"># copy operator</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> make <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$cls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># verify each row given is the right length</span><br/>                confess <span class=\"st0\">\"Bad data @$_: matrix must be square \"</span><br/>                        <span class=\"kw1\">if</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"br0\">]</span> <span class=\"co1\"># important: actually copy all the rows</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> identity <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$self</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@rows</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\@rows</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> zero <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$self</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"re0\">$n</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _string <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"[ \"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>  \"</span> <span class=\"sy0\">=&gt;</span><br/>                <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%12.6g\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"  ]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _mult <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">zero</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@idx</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span><span class=\"re0\">@idx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">@col</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@idx</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"re0\">@idx</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$row</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$col</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"re0\">@idx</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _expo <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        confess <span class=\"st0\">\"matrix **: must be non-negative integer power\"</span><br/>                        <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$tmp</span><span class=\"sy0\">,</span> <span class=\"re0\">$out</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">identity</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$out</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$tmp</span>    <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$tmp</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$tmp</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$out</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _copy <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># now use our matrix class</span><br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> SquareMatrix<span class=\"sy0\">-&gt;</span><span class=\"me1\">make</span><span class=\"br0\">(</span><br/>                <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"### Order $_<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span> <span class=\"sy0\">**</span> <span class=\"co5\">$_</span>        <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> SquareMatrix<span class=\"sy0\">-&gt;</span><span class=\"me1\">make</span><span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span> <span class=\"nu0\">1.0001</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>       <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">1.001</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span>       <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.99998</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span> 1e<span class=\"sy0\">-</span>8<span class=\"sy0\">,</span>   <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0002</span>  <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>### Matrix is now<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span>  <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>### Big power:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span>     <span class=\"re0\">$m</span> <span class=\"sy0\">**</span> <span class=\"nu0\">100</span>_000<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>### Too big:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span>       <span class=\"re0\">$m</span> <span class=\"sy0\">**</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>### WAY too big:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span>   <span class=\"re0\">$m</span> <span class=\"sy0\">**</span> <span class=\"nu0\">1</span>_000_000_000_000<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>### But identity matrix can handle that<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$m</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">identity</span> <span class=\"sy0\">**</span> <span class=\"nu0\">1</span>_000_000_000_000<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 35, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">subset</span> SqMat <span class=\"kw1\">of</span> Array <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">==</span> <span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"br0\">]</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;*&gt;</span><span class=\"br0\">(</span>SqMat <span class=\"re0\">$a</span><span class=\"sy0\">,</span> SqMat <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$a</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$c</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> infix<span class=\"sy0\">:&lt;**&gt;</span> <span class=\"br0\">(</span>SqMat <span class=\"re0\">$m</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$n</span> <span class=\"kw1\">is</span> copy <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$m</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$m</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"re0\">$out</span> <span class=\"sy0\">*</span> <span class=\"re0\">$tmp</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$tmp</span> <span class=\"sy0\">*</span> <span class=\"re0\">$tmp</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$out</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> show <span class=\"br0\">(</span>SqMat <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m</span><span class=\"sy0\">.</span><span class=\"me1\">flatmap</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"me1\">list</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$size}s\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$m</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$order</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"### Order $order\"</span><span class=\"sy0\">;</span><br/>    show <span class=\"re0\">@m</span> <span class=\"sy0\">**</span> <span class=\"re0\">$order</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 55, "block": "<pre class=\"text highlighted_source\">function identity(integer n)<br/>sequence res = repeat(repeat(0,n),n)<br/>    for i=1 to n do<br/>        res[i][i] = 1<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function matrix_mul(sequence a, sequence b)<br/>sequence c<br/>    if length(a[1])\u00a0!= length(b) then<br/>        return 0<br/>    else<br/>        c = repeat(repeat(0,length(b[1])),length(a))<br/>        for i=1 to length(a) do<br/>            for j=1 to length(b[1]) do<br/>                for k=1 to length(a[1]) do<br/>                    c[i][j] += a[i][k]*b[k][j]<br/>                end for<br/>            end for<br/>        end for<br/>        return c<br/>    end if<br/>end function<br/>\u00a0<br/>function matrix_exponent(sequence m, integer n)<br/>integer l = length(m)<br/>    if n=0 then return identity(l) end if<br/>    sequence res = m<br/>    for i=2 to n do<br/>        res = matrix_mul(res,m)<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>constant M1 = {{5}}<br/>constant M2 = {{3, 2},<br/>               {2, 1}}<br/>constant M3 = {{1, 2, 0},<br/>               {0, 3, 1},<br/>               {1, 0, 0}}<br/>\u00a0<br/>ppOpt({pp_Nest,1})<br/>pp(matrix_exponent(M1,0))<br/>pp(matrix_exponent(M1,1))<br/>pp(matrix_exponent(M1,2))<br/>puts(1,\"==\\n\")<br/>pp(matrix_exponent(M2,0))<br/>pp(matrix_exponent(M2,1))<br/>pp(matrix_exponent(M2,2))<br/>pp(matrix_exponent(M2,10))<br/>puts(1,\"==\\n\")<br/>pp(matrix_exponent(M3,10))<br/>puts(1,\"==\\n\")<br/>pp(matrix_exponent(identity(4),5))</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de matIdent (N)<br/>   (let L (need N (1) 0)<br/>      (mapcar '(() (copy (rot L))) L) ) )<br/>\u00a0<br/>(de matExp (Mat N)<br/>   (let M (matIdent (length Mat))<br/>      (do N<br/>         (setq M (matMul M Mat)) )<br/>      M ) )<br/>\u00a0<br/>(matExp '((3 2) (2 1)) 3)</pre>"}, {"lang": "Python", "loc": 56, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> mul<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> matrixMul<span class=\"br0\">(</span>m1<span class=\"sy0\">,</span> m2<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><br/>    <span class=\"kw1\">lambda</span> row:<br/>      <span class=\"kw2\">map</span><span class=\"br0\">(</span><br/>        <span class=\"kw1\">lambda</span> *column:<br/>          <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        *m2<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    m1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> identity<span class=\"br0\">(</span>size<span class=\"br0\">)</span>:<br/>\tsize <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span>j<span class=\"br0\">)</span>*<span class=\"nu0\">1</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> size<span class=\"br0\">]</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> size<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> matrixExp<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"kw2\">pow</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">assert</span> pow<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">pow</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"kw2\">pow</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Only non-negative, integer powers allowed\"</span><br/>\taccumulator <span class=\"sy0\">=</span> identity<span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">pow</span><span class=\"br0\">)</span>:<br/>\t\taccumulator <span class=\"sy0\">=</span> matrixMul<span class=\"br0\">(</span>accumulator<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> accumulator<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> printtable<span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> data:<br/>\t\t<span class=\"kw1\">print</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%-5s'</span>\u00a0% <span class=\"br0\">(</span><span class=\"st0\">'%s'</span>\u00a0% cell<span class=\"br0\">)</span> <span class=\"kw1\">for</span> cell <span class=\"kw1\">in</span> row<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> m <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>%i:'</span>\u00a0% i<br/>\tprinttable<span class=\"br0\">(</span> matrixExp<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"nu0\">0</span>:<br/><span class=\"nu0\">1</span>     <span class=\"nu0\">0</span>    <br/><span class=\"nu0\">0</span>     <span class=\"nu0\">1</span>    <br/>\u00a0<br/><span class=\"nu0\">1</span>:<br/><span class=\"nu0\">3</span>     <span class=\"nu0\">2</span>    <br/><span class=\"nu0\">2</span>     <span class=\"nu0\">1</span>    <br/>\u00a0<br/><span class=\"nu0\">2</span>:<br/><span class=\"nu0\">13</span>    <span class=\"nu0\">8</span>    <br/><span class=\"nu0\">8</span>     <span class=\"nu0\">5</span>    <br/>\u00a0<br/><span class=\"nu0\">3</span>:<br/><span class=\"nu0\">55</span>    <span class=\"nu0\">34</span>   <br/><span class=\"nu0\">34</span>    <span class=\"nu0\">21</span>   <br/>\u00a0<br/><span class=\"nu0\">4</span>:<br/><span class=\"nu0\">233</span>   <span class=\"nu0\">144</span>  <br/><span class=\"nu0\">144</span>   <span class=\"nu0\">89</span>   <br/><span class=\"sy0\">&gt;&gt;&gt;</span> printtable<span class=\"br0\">(</span> matrixExp<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"nu0\">1346269</span> <span class=\"nu0\">832040</span><br/><span class=\"nu0\">832040</span> <span class=\"nu0\">514229</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 22, "block": "<pre class=\"text highlighted_source\">library(Biodem)<br/>m &lt;- matrix(c(3,2,2,1), nrow=2)<br/>mtx.exp(m, 0)<br/>#      [,1] [,2]<br/># [1,]    1    0<br/># [2,]    0    1<br/>mtx.exp(m, 1)<br/>#      [,1] [,2]<br/># [1,]    3    2<br/># [2,]    2    1<br/>mtx.exp(m, 2)<br/>#      [,1] [,2]<br/># [1,]   13    8<br/># [2,]    8    5<br/>mtx.exp(m, 3)<br/>#      [,1] [,2]<br/># [1,]   55   34<br/># [2,]   34   21<br/>mtx.exp(m, 10)<br/>#         [,1]   [,2]<br/># [1,] 1346269 832040<br/># [2,]  832040 514229</pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define a (matrix ((3 2) (2 1))))<br/>\u00a0<br/>;; Using the builtin matrix exponentiation<br/>(for ([i 11])<br/>  (printf \"a^~a = ~s\\n\" i (matrix-expt a i)))<br/>\u00a0<br/>;; Output:<br/>;; a^0 = (array #[#[1 0] #[0 1]])<br/>;; a^1 = (array #[#[3 2] #[2 1]])<br/>;; a^2 = (array #[#[13 8] #[8 5]])<br/>;; a^3 = (array #[#[55 34] #[34 21]])<br/>;; a^4 = (array #[#[233 144] #[144 89]])<br/>;; a^5 = (array #[#[987 610] #[610 377]])<br/>;; a^6 = (array #[#[4181 2584] #[2584 1597]])<br/>;; a^7 = (array #[#[17711 10946] #[10946 6765]])<br/>;; a^8 = (array #[#[75025 46368] #[46368 28657]])<br/>;; a^9 = (array #[#[317811 196418] #[196418 121393]])<br/>;; a^10 = (array #[#[1346269 832040] #[832040 514229]])<br/>\u00a0<br/>;; But it could be implemented manually, using matrix multiplication<br/>(define (mpower M p)<br/>  (cond [(= p 1) M]<br/>        [(even? p) (mpower (matrix* M M) (/ p 2))]<br/>        [else (matrix* M (mpower M (sub1 p)))]))<br/>(for ([i (in-range 1 11)])<br/>  (printf \"a^~a = ~s\\n\" i (matrix-expt a i)))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre>$ irb\nirb(main):001:0&gt; require 'matrix'\n=&gt; true\nirb(main):002:0&gt; m=Matrix[[3,2],[2,1]]\n=&gt; Matrix[[3, 2], [2, 1]]\nirb(main):003:0&gt; m**0\n=&gt; Matrix[[1, 0], [0, 1]]\nirb(main):004:0&gt; m ** 1\n=&gt; Matrix[[3, 2], [2, 1]]\nirb(main):005:0&gt; m ** 2\n=&gt; Matrix[[13, 8], [8, 5]]\nirb(main):006:0&gt; m ** 5\n=&gt; Matrix[[987, 610], [610, 377]]\nirb(main):007:0&gt; m ** 10\n=&gt; Matrix[[1346269, 832040], [832040, 514229]]</pre>"}, {"lang": "Scala", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Matrix<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>matrix<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> n<span class=\"sy0\">:</span> Numeric<span class=\"br0\">[</span>T<span class=\"br0\">]</span>, m<span class=\"sy0\">:</span> ClassManifest<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> n.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows<span class=\"sy0\">=</span>matrix.<span class=\"me1\">size</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols<span class=\"sy0\">=</span>matrix<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> row<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>matrix<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> col<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>matrix map <span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Matrix<span class=\"br0\">[</span>T<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span><br/>    Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>rows, other.<span class=\"me1\">cols</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>      <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">row</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span>, other.<span class=\"me1\">col</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">zipped</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_*_</span><span class=\"br0\">)</span> reduceLeft <span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">**</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>x <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> createIdentityMatrix<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> List.<span class=\"me1\">fill</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> reduceLeft <span class=\"br0\">(</span><span class=\"sy0\">_*_</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> createIdentityMatrix<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span>Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row,col<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row <span class=\"sy0\">==</span> col<span class=\"br0\">)</span> one <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> zero<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> matrix map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span>, <span class=\"st0\">\", \"</span>, <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MatrixTest <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">(</span>Array<span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, Array<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"-- m --<span class=\"es1\">\\n</span>\"</span>+m<span class=\"br0\">)</span><br/>\u00a0<br/>    Seq<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">20</span>,<span class=\"nu0\">50</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>x <span class=\"sy0\">=&gt;</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"-- m**\"</span>+x+<span class=\"st0\">\" --\"</span><span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span>m<span class=\"sy0\">**</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>dec x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>halve x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">/</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>row<span class=\"sy0\">*</span>col row col<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">*</span> row col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span>multiply m1 m2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span>apply <span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> col <span class=\"br0\">(</span>row<span class=\"sy0\">*</span>col row col<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        m2<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    m1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> mat <span class=\"kw1\">exp</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"kw1\">exp</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> mat<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>square<span class=\"sy0\">-</span>matrix <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> mat <span class=\"br0\">(</span>halve <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span>multiply mat <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> mat <span class=\"br0\">(</span>dec <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>square<span class=\"sy0\">-</span>matrix mat<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>matrix<span class=\"sy0\">-</span>multiply mat mat<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 92, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const type: matrix is array array float;<br/>\u00a0<br/>const func string: str (in matrix: mat) is func<br/>  result<br/>    var string: stri is \"\";<br/>  local<br/>    var integer: row is 0;<br/>    var integer: column is 0;<br/>  begin<br/>    for row range 1 to length(mat) do<br/>      for column range 1 to length(mat[row]) do<br/>        stri &amp;:= str(mat[row][column]);<br/>        if column &lt; length(mat[row]) then<br/>          stri &amp;:= \", \";<br/>        end if;<br/>      end for;<br/>      if row &lt; length(mat) then<br/>        stri &amp;:= \"\\n\";<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>enable_output(matrix);<br/>\u00a0<br/>const func matrix: (in matrix: mat1) * (in matrix: mat2) is func<br/>  result<br/>    var matrix: product is matrix.value;<br/>  local<br/>    var integer: row is 0;<br/>    var integer: column is 0;<br/>    var integer: k is 0;<br/>  begin<br/>    product\u00a0:= length(mat1) times length(mat1) times 0.0;<br/>    for row range 1 to length(mat1) do<br/>      for column range 1 to length(mat1) do<br/>        product[row][column]\u00a0:= 0.0;<br/>        for k range 1 to length(mat1) do<br/>          product[row][column] +:= mat1[row][k] * mat2[k][column];<br/>        end for;<br/>      end for;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func matrix: (in var matrix: base) ** (in var integer: exponent) is func<br/>  result<br/>    var matrix: power is matrix.value;<br/>  local<br/>    var integer: row is 0;<br/>    var integer: column is 0;<br/>  begin<br/>    if exponent &lt; 0 then<br/>      raise NUMERIC_ERROR;<br/>    else<br/>      if odd(exponent) then<br/>        power\u00a0:= base;<br/>      else<br/>        # Create identity matrix<br/>        power\u00a0:= length(base) times length(base) times 0.0;<br/>        for row range 1 to length(base) do<br/>          for column range 1 to length(base) do<br/>            if row = column then<br/>              power[row][column]\u00a0:= 1.0;<br/>            end if;<br/>          end for;<br/>        end for;<br/>      end if;<br/>      exponent\u00a0:= exponent div 2;<br/>      while exponent &gt; 0 do<br/>        base\u00a0:= base * base;<br/>        if odd(exponent) then<br/>          power\u00a0:= power * base;<br/>        end if;<br/>        exponent\u00a0:= exponent div 2;<br/>      end while;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var matrix: m is [] (<br/>      [] (4.0, 3.0),<br/>      [] (2.0, 1.0));<br/>    var integer: exponent is 0;<br/>  begin<br/>    for exponent range [] (0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23) do<br/>      writeln(\"m ** \" &lt;&amp; exponent &lt;&amp; \" =\");<br/>      writeln(m ** exponent);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Array</span> <span class=\"br0\">{</span><br/>    method <span class=\"sy0\">**</span> <span class=\"br0\">(</span>Number n <span class=\"br0\">{</span> .<span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var tmp = <span class=\"kw2\">self</span><br/>        var out = <span class=\"kw2\">self</span>.<span class=\"me1\">len</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw2\">self</span>.<span class=\"me1\">len</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> i == j\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>            out = <span class=\"br0\">(</span>out <span class=\"st0\">`mmul`</span> tmp<span class=\"br0\">)</span> <span class=\"kw1\">if</span> n.<span class=\"me1\">is_odd</span><br/>            n <span class=\"sy0\">&gt;&gt;</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"kw1\">break</span><br/>            tmp = <span class=\"br0\">(</span>tmp <span class=\"st0\">`mmul`</span> tmp<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> out<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var m = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>         <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>         <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> order <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"### Order #{order}\"</span><br/>    var t = <span class=\"br0\">(</span>m <span class=\"sy0\">**</span> order<span class=\"br0\">)</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">'  '</span>, t.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>  \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPAD", "loc": 24, "block": "<pre class=\"text highlighted_source\">(1) -&gt; A:=matrix [[0,-%i],[%i,0]]<br/>\u00a0<br/>        +0   -\u00a0%i+<br/>   (1)  |        |<br/>        +%i   0  +<br/>                                               Type: Matrix(Complex(Integer))<br/>(2) -&gt; A^4<br/>\u00a0<br/>        +1  0+<br/>   (2)  |    |<br/>        +0  1+<br/>                                               Type: Matrix(Complex(Integer))<br/>(3) -&gt; A^(-1)<br/>\u00a0<br/>        +0   -\u00a0%i+<br/>   (3)  |        |<br/>        +%i   0  +<br/>                                     Type: Matrix(Fraction(Complex(Integer)))<br/>(4) -&gt; inverse A<br/>\u00a0<br/>        +0   -\u00a0%i+<br/>   (4)  |        |<br/>        +%i   0  +<br/>                          Type: Union(Matrix(Fraction(Complex(Integer))),...)</pre>"}, {"lang": "Stata", "loc": 13, "block": "<pre class=\"text highlighted_source\">real matrix matpow(real matrix a, real scalar n) {<br/>\treal matrix p, x<br/>\treal scalar i, s<br/>\ts = n&lt;0<br/>\tn = abs(n)<br/>\tx = a<br/>\tp = I(rows(a))<br/>\tfor (i=n; i&gt;0; i=floor(i/2)) {<br/>\t\tif (mod(i,2)==1) p = p*x<br/>\t\tx = x*x<br/>\t}<br/>\treturn(s?luinv(p):p)<br/>}</pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> matrix_exp <span class=\"br0\">{</span>m pow<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> is int -strict <span class=\"re0\">$pow</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"non-integer exponents not implemented\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$pow</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"negative exponents not implemented\"</span><br/>    <span class=\"br0\">}</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$m</span><span class=\"br0\">]</span> rows cols<br/>    <span class=\"co1\"># assume square matrix</span><br/>    <span class=\"kw1\">set</span> temp <span class=\"br0\">[</span>identity <span class=\"re0\">$rows</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$pow</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> temp <span class=\"br0\">[</span>matrix_multiply <span class=\"re0\">$temp</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$temp</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> identity <span class=\"br0\">{</span>size<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lset</span> i <span class=\"re0\">$n</span> <span class=\"re0\">$n</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$i</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">[3,2;4,1]^4</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#import lin<br/>\u00a0<br/>id  = @h ^|CzyCK33/1.! 0.!*<br/>mex = ||<a class=\"__cf_email__\" data-cfemail=\"a4cdc0e4c8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> mmult:-0^|DlS/~&amp; iota</pre>"}]}