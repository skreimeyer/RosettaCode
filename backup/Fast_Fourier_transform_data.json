{"task": "Fast_Fourier_transform", "blocks": [{"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Complex_Arrays</span>;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">package</span> Complex_Arrays <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Complex_Arrays</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Complex_Arrays;<br/><span class=\"kw3\">function</span> Generic_FFT <span class=\"br0\">(</span>X\u00a0: Complex_Vector<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Complex_Vector;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PRIO</span> DICE <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span> <span class=\"coMULTI\"># ideally = 11 #</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> DICE <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR in<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> step<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"coMULTI\">##</span><span class=\"coMULTI\"># Dice the array, extract array values a \"step\" apart #</span><span class=\"coMULTI\">##</span><br/>    <span class=\"kw2\">IF</span> step <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>        in<br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw3\">INT</span> upb out <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw8\">UPB</span> in<span class=\"sy1\">-</span><span class=\"kw8\">LWB</span> in<span class=\"br0\">)</span><span class=\"sy1\">%</span>step<span class=\"sy1\">+</span>1<span class=\"br0\">]</span>SCALAR out<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> index <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> in <span class=\"kw2\">BY</span> step <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> in <span class=\"kw2\">DO</span><br/>            out<span class=\"br0\">[</span>upb out<span class=\"sy1\">+:=</span>1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> in<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        out<span class=\"br0\">[</span><span class=\"sy1\">@</span><span class=\"kw8\">LWB</span> in<span class=\"br0\">]</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> fft <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR in t<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"coMULTI\">##</span><span class=\"coMULTI\"># The Cooley-Tukey FFT algorithm #</span><span class=\"coMULTI\">##</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> in t <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">UPB</span> in t <span class=\"kw2\">THEN</span><br/>      in t<span class=\"br0\">[</span><span class=\"sy1\">@</span>0<span class=\"br0\">]</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR t <span class=\"sy1\">=</span> in t<span class=\"br0\">[</span><span class=\"sy1\">@</span>0<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> n <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> t <span class=\"sy1\">+</span> 1<span class=\"sy1\">,</span> half n <span class=\"sy1\">=</span> n <span class=\"sy1\">%</span> 2<span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> t<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> t<span class=\"br0\">]</span>SCALAR coef<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span>SCALAR even <span class=\"sy1\">=</span> fft<span class=\"br0\">(</span>t    DICE 2<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                  odd <span class=\"sy1\">=</span> fft<span class=\"br0\">(</span>t<span class=\"br0\">[</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span>DICE 2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">COMPL</span> i <span class=\"sy1\">=</span> 0 <span class=\"kw10\">I</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">REAL</span> w <span class=\"sy1\">=</span>  2<span class=\"sy1\">*</span><span class=\"kw23\">pi</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> t <span class=\"kw2\">TO</span> half n<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">COMPL</span> cis t <span class=\"sy1\">=</span> scalar <span class=\"kw24\">exp</span><span class=\"br0\">(</span>0 <span class=\"kw10\">I</span> <span class=\"br0\">(</span><span class=\"sy1\">-</span>w <span class=\"sy1\">*</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            coef<span class=\"br0\">[</span>k<span class=\"br0\">]</span>          <span class=\"sy1\">:=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">+</span> cis t<span class=\"sy1\">;</span><br/>            coef<span class=\"br0\">[</span>k <span class=\"sy1\">+</span> half n<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">-</span> cis t<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        coef<br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "APL", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fft\u2190{<br/>    N\u2190\u2374\u2375<br/>    N\u22641:\u2375<br/>    (1|2\u235fN)\u22600:'Argument must be a power of 2 in length'<br/>    even\u2190fft(N\u23740 1)/\u2375<br/>    odd\u2190fft(N\u23741 0)/\u2375<br/>    k\u2190N\u00f72<br/>    T\u2190even\u00d7*(0J\u00af2\u00d7(\u25cb1)\u00d7(\u00af1+\u2373k)\u00f7N)<br/>    (odd+T),odd-T<br/>}<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">      @% = &amp;60A<br/>\u00a0<br/>      DIM Complex{r#, i#}<br/>      DIM in{(7)} = Complex{}, out{(7)} = Complex{}<br/>      DATA 1, 1, 1, 1, 0, 0, 0, 0<br/>\u00a0<br/>      PRINT \"Input (real, imag):\"<br/>      FOR I% = 0 TO 7<br/>        READ in{(I%)}.r#<br/>        PRINT in{(I%)}.r# \",\" in{(I%)}.i#<br/>      NEXT<br/>\u00a0<br/>      PROCfft(out{()}, in{()}, 0, 1, DIM(in{()},1)+1)<br/>\u00a0<br/>      PRINT \"Output (real, imag):\"<br/>      FOR I% = 0 TO 7<br/>        PRINT out{(I%)}.r# \",\" out{(I%)}.i#<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF PROCfft(b{()}, o{()}, B%, S%, N%)<br/>      LOCAL I%, t{}\u00a0: DIM t{} = Complex{}<br/>      IF S% &lt; N% THEN<br/>        PROCfft(o{()}, b{()}, B%, S%*2, N%)<br/>        PROCfft(o{()}, b{()}, B%+S%, S%*2, N%)<br/>        FOR I% = 0 TO N%-1 STEP 2*S%<br/>          t.r# = COS(-PI*I%/N%)<br/>          t.i# = SIN(-PI*I%/N%)<br/>          PROCcmul(t{}, o{(B%+I%+S%)})<br/>          b{(B%+I% DIV 2)}.r# = o{(B%+I%)}.r# + t.r#<br/>          b{(B%+I% DIV 2)}.i# = o{(B%+I%)}.i# + t.i#<br/>          b{(B%+(I%+N%) DIV 2)}.r# = o{(B%+I%)}.r# - t.r#<br/>          b{(B%+(I%+N%) DIV 2)}.i# = o{(B%+I%)}.i# - t.i#<br/>        NEXT<br/>      ENDIF<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcmul(c{},d{})<br/>      LOCAL r#, i#<br/>      r# = c.r#*d.r# - c.i#*d.i#<br/>      i# = c.r#*d.i# + c.i#*d.r#<br/>      c.r# = r#<br/>      c.i# = i#<br/>      ENDPROC<br/>\u00a0</pre>"}, {"lang": "C", "loc": 54, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;complex.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> PI<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">double</span> complex cplx<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> _fft<span class=\"br0\">(</span>cplx buf<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cplx out<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> step<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>step <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t_fft<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> step <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t_fft<span class=\"br0\">(</span>out <span class=\"sy0\">+</span> step<span class=\"sy0\">,</span> buf <span class=\"sy0\">+</span> step<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> step <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> step<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcplx t <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cexp.html\"><span class=\"kw3\">cexp</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>I <span class=\"sy0\">*</span> PI <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> out<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> step<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tbuf<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"sy0\">;</span><br/>\t\t\tbuf<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> t<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fft<span class=\"br0\">(</span>cplx buf<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tcplx out<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t_fft<span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> s<span class=\"sy0\">,</span> cplx buf<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%g \"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"(%g,\u00a0%g) \"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tPI <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\tcplx buf<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow<span class=\"br0\">(</span><span class=\"st0\">\"Data: \"</span><span class=\"sy0\">,</span> buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfft<span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>FFT\u00a0: \"</span><span class=\"sy0\">,</span> buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 125, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;complex&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;valarray&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">double</span> PI <span class=\"sy1\">=</span> <span class=\"nu16\">3.141592653589793238460</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> Complex<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">valarray</span><span class=\"sy1\">&lt;</span>Complex<span class=\"sy1\">&gt;</span> CArray<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Cooley\u2013Tukey FFT (in-place, divide-and-conquer)</span><br/><span class=\"co1\">// Higher memory requirements and redundancy although more intuitive</span><br/><span class=\"kw4\">void</span> fft<span class=\"br0\">(</span>CArray<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> N <span class=\"sy1\">=</span> x.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>N <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// divide</span><br/>    CArray even <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"me2\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, N<span class=\"sy2\">/</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    CArray  odd <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"me2\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, N<span class=\"sy2\">/</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// conquer</span><br/>    fft<span class=\"br0\">(</span>even<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    fft<span class=\"br0\">(</span>odd<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// combine</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> N<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Complex t <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">polar</span><span class=\"br0\">(</span><span class=\"nu16\">1.0</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span> PI <span class=\"sy2\">*</span> k <span class=\"sy2\">/</span> N<span class=\"br0\">)</span> <span class=\"sy2\">*</span> odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        x<span class=\"br0\">[</span>k    <span class=\"br0\">]</span> <span class=\"sy1\">=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">+</span> t<span class=\"sy4\">;</span><br/>        x<span class=\"br0\">[</span>k<span class=\"sy2\">+</span>N<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">-</span> t<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Cooley-Tukey FFT (in-place, breadth-first, decimation-in-frequency)</span><br/><span class=\"co1\">// Better optimized but less intuitive</span><br/><span class=\"co1\">//\u00a0!!! Warning\u00a0: in some cases this code make result different from not optimased version above (need to fix bug)</span><br/><span class=\"co1\">// The bug is now fixed @2017/05/30 </span><br/><span class=\"kw4\">void</span> fft<span class=\"br0\">(</span>CArray <span class=\"sy3\">&amp;</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// DFT</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> N <span class=\"sy1\">=</span> x.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, k <span class=\"sy1\">=</span> N, n<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> thetaT <span class=\"sy1\">=</span> 3.14159265358979323846264338328L <span class=\"sy2\">/</span> N<span class=\"sy4\">;</span><br/>\tComplex phiT <span class=\"sy1\">=</span> Complex<span class=\"br0\">(</span><span class=\"kw3\">cos</span><span class=\"br0\">(</span>thetaT<span class=\"br0\">)</span>, <span class=\"sy2\">-</span><span class=\"kw3\">sin</span><span class=\"br0\">(</span>thetaT<span class=\"br0\">)</span><span class=\"br0\">)</span>, T<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>k <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tn <span class=\"sy1\">=</span> k<span class=\"sy4\">;</span><br/>\t\tk <span class=\"sy1\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\tphiT <span class=\"sy1\">=</span> phiT <span class=\"sy2\">*</span> phiT<span class=\"sy4\">;</span><br/>\t\tT <span class=\"sy1\">=</span> 1.0L<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> l <span class=\"sy1\">&lt;</span> k<span class=\"sy4\">;</span> l<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> l<span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> N<span class=\"sy4\">;</span> a <span class=\"sy2\">+</span><span class=\"sy1\">=</span> n<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> k<span class=\"sy4\">;</span><br/>\t\t\t\tComplex t <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy2\">-</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\t\tx<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\t\tx<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy1\">=</span> t <span class=\"sy2\">*</span> T<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tT <span class=\"sy2\">*</span><span class=\"sy1\">=</span> phiT<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\">// Decimate</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span>log2<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> N<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>\t\t<span class=\"co1\">// Reverse bits</span><br/>\t\tb <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xaaaaaaaa</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0x55555555</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tb <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xcccccccc</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0x33333333</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tb <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xf0f0f0f0</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0x0f0f0f0f</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tb <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0xff00ff00</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> <span class=\"nu12\">0x00ff00ff</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tb <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span>b <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy2\">-</span> m<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">&gt;</span> a<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tComplex t <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\tx<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy1\">=</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t\tx<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\">//// Normalize (This section make it not working correctly)</span><br/>\t<span class=\"co1\">//Complex f = 1.0 / sqrt(N);</span><br/>\t<span class=\"co1\">//for (unsigned int i = 0; i &lt; N; i++)</span><br/>\t<span class=\"co1\">//\tx[i] *= f;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// inverse fft (in-place)</span><br/><span class=\"kw4\">void</span> ifft<span class=\"br0\">(</span>CArray<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// conjugate the complex numbers</span><br/>    x <span class=\"sy1\">=</span> x.<span class=\"me1\">apply</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">conj</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// forward fft</span><br/>    fft<span class=\"br0\">(</span> x <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// conjugate the complex numbers again</span><br/>    x <span class=\"sy1\">=</span> x.<span class=\"me1\">apply</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">conj</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// scale the numbers</span><br/>    x <span class=\"sy2\">/</span><span class=\"sy1\">=</span> x.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> Complex test<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu16\">1.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">0.0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    CArray data<span class=\"br0\">(</span>test, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// forward fft</span><br/>    fft<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"fft\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// inverse fft</span><br/>    ifft<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ifft\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 69, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Fast Fourier Transform in C#</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Performs a Bit Reversal Algorithm on a postive integer <br/>     * for given number of bits<br/>     * e.g. 011 with 3 bits is reversed to 110 */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> BitReverse<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> bits<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw4\">int</span> reversedN <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>       <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> bits <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>       n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            reversedN <span class=\"sy0\">=</span> <span class=\"br0\">(</span>reversedN <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            count<span class=\"sy0\">--;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>reversedN <span class=\"sy0\">&lt;&lt;</span> count<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bits<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Uses Cooley-Tukey iterative in-place algorithm with radix-2 DIT case<br/>     * assumes no of points provided are a power of 2 */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> FFT<span class=\"br0\">(</span>Complex<span class=\"br0\">[</span><span class=\"br0\">]</span> buffer<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span><span class=\"br0\">(</span>buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> swapPos <span class=\"sy0\">=</span> BitReverse<span class=\"br0\">(</span>j, bits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> temp <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>swapPos<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            buffer<span class=\"br0\">[</span>swapPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> N <span class=\"sy0\">&lt;=</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> N <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> evenIndex <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k<span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> oddIndex <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k <span class=\"sy0\">+</span> <span class=\"br0\">(</span>N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">var</span> even <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">var</span> odd <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">double</span> term <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> k <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>N<span class=\"sy0\">;</span><br/>                    Complex exp <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Complex<span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> odd<span class=\"sy0\">;</span><br/>\u00a0<br/>                    buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even <span class=\"sy0\">+</span> exp<span class=\"sy0\">;</span><br/>                    buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even <span class=\"sy0\">-</span> exp<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Complex<span class=\"br0\">[</span><span class=\"br0\">]</span> input <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>       <br/>\u00a0<br/>        FFT<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span>       <br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Results:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Complex c <span class=\"kw1\">in</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/>        <span class=\"br0\">}</span>   <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fft <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> x <br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span>*<br/>       <span class=\"br0\">(</span><br/>         <span class=\"br0\">(</span>even <span class=\"br0\">(</span>fft <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span> by <span class=\"nu0\">2</span> collect <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>odd <span class=\"br0\">(</span>fft <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> below <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span> by <span class=\"nu0\">2</span> collect <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>aux <span class=\"br0\">(</span>loop for k from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> collect <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">exp</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>complex <span class=\"nu0\">0</span> -<span class=\"nu0\">2</span><span class=\"br0\">)</span> pi k <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> k odd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'+ even aux<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'- even aux<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fft '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> fft<span class=\"br0\">(</span>x\u00a0: <span class=\"kw3\">Array</span><span class=\"br0\">(</span>Float64<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"kw4\">Complex</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">to_c</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> x.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>  even = fft<span class=\"br0\">(</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> k<span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  odd = fft<span class=\"br0\">(</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  c = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> <span class=\"kw4\">Complex</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>::PI <span class=\"sy0\">*</span> k <span class=\"sy0\">/</span> x.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">exp</span> <span class=\"br0\">}</span><br/>  codd = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> c<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">return</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> codd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">-</span> codd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">fft</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 19, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">-</span>\u220f<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>complex <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> PI<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fft xs N<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> N <span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<br/>\t<span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">[</span><br/>\t\t<span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> N <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>even <span class=\"br0\">(</span>fft <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">0</span> N <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>xs i<span class=\"br0\">]</span><span class=\"br0\">)</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>odd  <span class=\"br0\">(</span>fft <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> N <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>xs i<span class=\"br0\">]</span><span class=\"br0\">)</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>k N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"sy0\">*=</span> odd k  <span class=\"br0\">(</span><span class=\"kw1\">exp</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">-</span>\u220f<span class=\"sy0\">*</span><span class=\"nu0\">2</span> k<span class=\"br0\">)</span> N <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>vector<span class=\"sy0\">-</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"sy0\">+</span> even odd<span class=\"br0\">)</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"sy0\">-</span> even odd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> data #<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>fft data <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    \u2192 #<span class=\"br0\">(</span> <span class=\"nu0\">4</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">1</span><span class=\"sy0\">-</span>2.414213562373095i <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">1</span><span class=\"sy0\">-</span>0.4142135623730949i <br/>       <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">1</span><span class=\"sy0\">+</span>0.4142135623730949i <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">1</span><span class=\"sy0\">+</span>2.414213562373095i<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 101, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FFT<br/>\u00a0<br/>CONST CNT=8<br/>\u00a0<br/>!$DYNAMIC<br/>DIM REL[0],IMG[0],CMP[0],V[0]<br/>\u00a0<br/>BEGIN<br/>   SIG=INT(LOG(CNT)/LOG(2)+0.9999)<br/>   REAL1=2^SIG<br/>\u00a0<br/>   REAL=REAL1-1<br/>   REAL2=INT(REAL1/2)<br/>   REAL4=INT(REAL1/4)<br/>   REAL3=REAL4+REAL2<br/>\u00a0<br/>!$DIM REL[REAL1],IMG[REAL1],CMP[REAL3]<br/>\u00a0<br/>FOR I=0 TO CNT-1 DO<br/>   READ(REL[I],IMG[I])<br/>END FOR<br/>\u00a0<br/>DATA(1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0)<br/>\u00a0<br/>SIG2=INT(SIG/2)<br/>SIG1=SIG-SIG2<br/>CNT1=2^SIG1<br/>CNT2=2^SIG2<br/>\u00a0<br/>!$DIM V[CNT1-1]<br/>V[0]=0<br/>DV=1<br/>PTR=CNT1<br/>\u00a0<br/>FOR J=1 TO SIG1 DO<br/>  HLFPTR=INT(PTR/2)<br/>  PT=CNT1-HLFPTR<br/>  FOR I=HLFPTR TO PT STEP PTR DO<br/>    V[I]=V[I-HLFPTR]+DV<br/>  END FOR<br/>  DV=2*DV<br/>  PTR=HLFPTR<br/>END FOR<br/>\u00a0<br/>K=2*\u03c0/REAL1<br/>\u00a0<br/>FOR X=0 TO REAL4 DO<br/>   CMP[X]=COS(K*X)<br/>   CMP[REAL2-X]=-CMP[X]<br/>   CMP[REAL2+X]=-CMP[X]<br/>END FOR<br/>\u00a0<br/>PRINT(\"FFT: BIT REVERSAL\")<br/>\u00a0<br/>FOR I=0 TO CNT1-1 DO<br/>  IP=I*CNT2<br/>  FOR J=0 TO CNT2-1 DO<br/>    H=IP+J<br/>    G=V[J]*CNT2+V[I]<br/>    IF G&gt;H THEN<br/>       SWAP(REL[G],REL[H])<br/>       SWAP(IMG[G],IMG[H])<br/>    END IF<br/>  END FOR<br/>END FOR<br/>\u00a0<br/>T=1<br/>FOR STAGE=1 TO SIG DO<br/>  PRINT(\"STAGE:\";STAGE)<br/>  D=INT(REAL2/T)<br/>  FOR II=0 TO T-1 DO<br/>     L=D*II<br/>     LS=L+REAL4<br/>     FOR I=0 TO D-1 DO<br/>       A=2*I*T+II<br/>       B=A+T<br/>       F1=REL[A]<br/>       F2=IMG[A]<br/>       CNT1=CMP[L]*REL[B]<br/>       CNT2=CMP[LS]*IMG[B]<br/>       CNT3=CMP[LS]*REL[B]<br/>       CNT4=CMP[L]*IMG[B]<br/>       REL[A]=F1+CNT1-CNT2<br/>       IMG[A]=F2+CNT3+CNT4<br/>       REL[B]=F1-CNT1+CNT2<br/>       IMG[B]=F2-CNT3-CNT4<br/>     END FOR<br/>  END FOR<br/>  T=2*T<br/>END FOR<br/>\u00a0<br/>PRINT(\"NUM REAL     IMAG\")<br/>FOR I=0 TO REAL DO<br/>    IF ABS(REL[I])&lt;1E-5 THEN REL[I]=0 END IF<br/>    IF ABS(IMG[I])&lt;1E-5 THEN IMG[I]=0 END IF<br/>    PRINT(I;\"\";)<br/>    WRITE(\"##.###### ##.######\";REL[I];IMG[I])<br/>END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>IN: USE math.transforms.fft<br/>IN: { 1 1 1 1 0 0 0 0 } fft .<br/>{<br/>    C{ 4.0 0.0 }<br/>    C{ 1.0 -2.414213562373095 }<br/>    C{ 0.0 0.0 }<br/>    C{ 1.0 -0.4142135623730949 }<br/>    C{ 0.0 0.0 }<br/>    C{ 0.9999999999999999 0.4142135623730949 }<br/>    C{ 0.0 0.0 }<br/>    C{ 0.9999999999999997 2.414213562373095 }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 59, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> fft_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>,       <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">dp</span><span class=\"sy0\">=</span><span class=\"kw4\">selected_real_kind</span><span class=\"br0\">(</span><span class=\"nu0\">15</span>,<span class=\"nu0\">300</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">pi</span><span class=\"sy0\">=</span><span class=\"nu0\">3.141592653589793238460</span>_dp<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"co1\">! In place Cooley-Tukey FFT</span><br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> fft<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">complex</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    <span class=\"kw3\">complex</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>                               <span class=\"sy0\">::</span> <span class=\"me2\">t</span><br/>    <span class=\"kw3\">integer</span>                                        <span class=\"sy0\">::</span> <span class=\"me2\">N</span><br/>    <span class=\"kw3\">integer</span>                                        <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw3\">complex</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>    <span class=\"sy0\">::</span> <span class=\"me2\">even</span>, odd<br/>\u00a0<br/>    N<span class=\"sy0\">=</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>N <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>odd<span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>even<span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! divide</span><br/>    odd <span class=\"sy0\">=</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>N<span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    even<span class=\"sy0\">=</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>N<span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! conquer</span><br/>    <span class=\"kw1\">call</span> fft<span class=\"br0\">(</span>odd<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> fft<span class=\"br0\">(</span>even<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">! combine</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>       t<span class=\"sy0\">=</span><span class=\"kw4\">exp</span><span class=\"br0\">(</span><span class=\"kw4\">cmplx</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span>_dp,<span class=\"sy0\">-</span><span class=\"nu0\">2.0</span>_dp<span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,dp<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>N,dp<span class=\"br0\">)</span>,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>even<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       x<span class=\"br0\">(</span>i<span class=\"br0\">)</span>     <span class=\"sy0\">=</span> odd<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> t<br/>       x<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> odd<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-</span> t<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>odd<span class=\"br0\">)</span><br/>    <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>even<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> fft<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> fft_mod<br/>\u00a0<br/><span class=\"kw1\">program</span> test<br/>  <span class=\"kw3\">use</span> fft_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">complex</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">data</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <br/>\u00a0<br/><span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> fft<span class=\"br0\">(</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">8</span><br/>     write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(\"(\", F20.15, \",\", F20.15, \"i )\")'</span><span class=\"br0\">)</span> <span class=\"kw3\">data</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test</pre>"}, {"lang": "GAP", "loc": 23, "block": "<pre class=\"text highlighted_source\"># Here an implementation with no optimization (O(n^2)).<br/># In GAP, E(n) = exp(2*i*pi/n), a primitive root of the unity.<br/>\u00a0<br/>Fourier\u00a0:= function(a)<br/>\tlocal n, z;<br/>\tn\u00a0:= Size(a);<br/>\tz\u00a0:= E(n);<br/>\treturn List([0 .. n - 1], k -&gt; Sum([0 .. n - 1], j -&gt; a[j + 1]*z^(-k*j)));<br/>end;<br/>\u00a0<br/>InverseFourier\u00a0:= function(a)<br/>\tlocal n, z;<br/>\tn\u00a0:= Size(a);<br/>\tz\u00a0:= E(n);<br/>\treturn List([0 .. n - 1], k -&gt; Sum([0 .. n - 1], j -&gt; a[j + 1]*z^(k*j)))/n;<br/>end;<br/>\u00a0<br/>Fourier([1, 1, 1, 1, 0, 0, 0, 0]);<br/># [ 4, 1-E(8)-E(8)^2-E(8)^3, 0, 1-E(8)+E(8)^2-E(8)^3,<br/>#   0, 1+E(8)-E(8)^2+E(8)^3, 0, 1+E(8)+E(8)^2+E(8)^3 ]<br/>\u00a0<br/>InverseFourier(last);<br/># [ 1, 1, 1, 1, 0, 0, 0, 0 ]</pre>"}, {"lang": "Go", "loc": 29, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/cmplx\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ditfft2<span class=\"sy1\">(</span>x <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> y <span class=\"sy1\">[]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> s <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        y<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">complex</span><span class=\"sy1\">(</span>x<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    ditfft2<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>s<span class=\"sy1\">)</span><br/>    ditfft2<span class=\"sy1\">(</span>x<span class=\"sy1\">[</span>s<span class=\"sy1\">:],</span> y<span class=\"sy1\">[</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">:],</span> n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>s<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> k &lt; n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        tf <span class=\"sy2\">:=</span> <span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">*</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">))</span> <span class=\"sy3\">*</span> y<span class=\"sy1\">[</span>k<span class=\"sy3\">+</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>        y<span class=\"sy1\">[</span>k<span class=\"sy1\">],</span> y<span class=\"sy1\">[</span>k<span class=\"sy3\">+</span>n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> y<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span><span class=\"sy3\">+</span>tf<span class=\"sy1\">,</span> y<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span><span class=\"sy3\">-</span>tf<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    x <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    y <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/>    ditfft2<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>x<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> y <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%8.4f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex<br/>\u00a0<br/><span class=\"co1\">-- Cooley-Tukey</span><br/>fft <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>fft <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>fft xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> ys ts <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> ys ts<br/>    <span class=\"kw1\">where</span> n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<br/>          ys <span class=\"sy0\">=</span> fft evens<br/>          zs <span class=\"sy0\">=</span> fft odds <br/>          <span class=\"br0\">(</span>evens<span class=\"sy0\">,</span> odds<span class=\"br0\">)</span> <span class=\"sy0\">=</span> split xs<br/>          split <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          split <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>          split <span class=\"br0\">(</span>x:y:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x:xt<span class=\"sy0\">,</span> y:yt<span class=\"br0\">)</span> <span class=\"kw1\">where</span> <span class=\"br0\">(</span>xt<span class=\"sy0\">,</span> yt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> split xs<br/>          ts <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\z k <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:exp\"><span class=\"kw3\">exp</span></a><span class=\"st0\">' k n * z) zs [0..]<br/>          exp'</span> k n <span class=\"sy0\">=</span> cis <span class=\"sy0\">$</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> k<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> fft <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "Idris", "loc": 31, "block": "<pre class=\"text highlighted_source\">module Main<br/>\u00a0<br/>import Data.Complex<br/>\u00a0<br/>\u00a0<br/>concatPair\u00a0: List (a, a) -&gt; List (a)<br/>concatPair xs with (unzip xs)<br/>  | (xs1, xs2) = xs1 ++ xs2 <br/>\u00a0<br/>fft'\u00a0: List (Complex Double) -&gt; Nat -&gt; Nat -&gt; List (Complex Double)<br/>fft' (x::xs) (S Z) _ = [x]<br/>fft' xs n s = concatPair $ map (\\(x1,x2,k) =&gt; <br/>                let eTerm = ((cis (-2 * pi * ((cast k) - 1) / (cast n))) * x2) in<br/>                  (x1 + eTerm, x1 - eTerm)) $ zip3 left right [1..n `div` 2]<br/>\u00a0<br/>             where<br/>                  left\u00a0: List (Complex Double)  <br/>                  right\u00a0: List (Complex Double)<br/>                  left  = fft' (xs) (n `div` 2) (2 * s) <br/>                  right = fft' (drop s xs) (n `div` 2) (2 * s)<br/>\u00a0<br/>\u00a0<br/>-- Recursive Cooley-Tukey with radix-2 DIT case<br/>-- assumes no of points provided are a power of 2<br/>fft\u00a0: List (Complex Double) -&gt; List (Complex Double)<br/>fft [] = []<br/>fft xs = fft' xs (length xs) 1 <br/>\u00a0<br/>\u00a0<br/>main\u00a0: IO()<br/>main = traverse_ printLn $ fft [1,1,1,1,0,0,0,0]</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">cube  =: <span class=\"sy0\">(</span>$~ q:@#<span class=\"sy0\">)</span>\u00a0:. ,<br/>rou   =: ^@<a class=\"__cf_email__\" data-cfemail=\"91fbbfd1febf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<span class=\"sy0\">(</span>% #<span class=\"sy0\">)</span>@<a class=\"__cf_email__\" data-cfemail=\"f198dfb1dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:  <span class=\"co1\">NB. roots of unity </span><br/>floop =: <span class=\"nu0\">4</span>\u00a0: <span class=\"st_h\">'for_r. i.#$x do. (y=.{.\"1 y) ] x=.(+/x) ,&amp;,:\"r (-/x)*y end.'</span><br/>fft   =: ] floop&amp;.cube <a class=\"__cf_email__\" data-cfemail=\"ee9c819bae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#</pre>"}, {"lang": "Java", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FastFourierTransform <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> bitReverse<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> bits<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> reversedN <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> bits <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            reversedN <span class=\"sy0\">=</span> <span class=\"br0\">(</span>reversedN <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            count<span class=\"sy0\">--;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>reversedN <span class=\"sy0\">&lt;&lt;</span> count<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bits<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> fft<span class=\"br0\">(</span>Complex<span class=\"br0\">[</span><span class=\"br0\">]</span> buffer<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>log<span class=\"br0\">(</span>buffer.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> log<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> buffer.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> swapPos <span class=\"sy0\">=</span> bitReverse<span class=\"br0\">(</span>j, bits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Complex temp <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>swapPos<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            buffer<span class=\"br0\">[</span>swapPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> N <span class=\"sy0\">&lt;=</span> buffer.<span class=\"me1\">length</span><span class=\"sy0\">;</span> N <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> buffer.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> evenIndex <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k<span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> oddIndex <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k <span class=\"sy0\">+</span> <span class=\"br0\">(</span>N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    Complex even <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    Complex odd <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">double</span> term <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI <span class=\"sy0\">*</span> k<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> N<span class=\"sy0\">;</span><br/>                    Complex exp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span>cos<span class=\"br0\">(</span>term<span class=\"br0\">)</span>, sin<span class=\"br0\">(</span>term<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mult</span><span class=\"br0\">(</span>odd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even.<span class=\"me1\">add</span><span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even.<span class=\"me1\">sub</span><span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> input <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Complex<span class=\"br0\">[</span><span class=\"br0\">]</span> cinput <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">[</span>input.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            cinput<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        fft<span class=\"br0\">(</span>cinput<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Results:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Complex c <span class=\"sy0\">:</span> cinput<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Complex <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> re<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> im<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Complex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Complex<span class=\"br0\">(</span><span class=\"kw4\">double</span> r, <span class=\"kw4\">double</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        re <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>        im <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Complex add<span class=\"br0\">(</span>Complex b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">re</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">re</span>, <span class=\"kw1\">this</span>.<span class=\"me1\">im</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Complex sub<span class=\"br0\">(</span>Complex b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">re</span> <span class=\"sy0\">-</span> b.<span class=\"me1\">re</span>, <span class=\"kw1\">this</span>.<span class=\"me1\">im</span> <span class=\"sy0\">-</span> b.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Complex mult<span class=\"br0\">(</span>Complex b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">re</span> <span class=\"sy0\">*</span> b.<span class=\"me1\">re</span> <span class=\"sy0\">-</span> <span class=\"kw1\">this</span>.<span class=\"me1\">im</span> <span class=\"sy0\">*</span> b.<span class=\"me1\">im</span>,<br/>                <span class=\"kw1\">this</span>.<span class=\"me1\">re</span> <span class=\"sy0\">*</span> b.<span class=\"me1\">im</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">im</span> <span class=\"sy0\">*</span> b.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"(%f,%f)\"</span>, re, im<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 66, "block": "<pre class=\"javascript highlighted_source\"><span class=\"coMULTI\">/*<br/>complex fast fourier transform and inverse from<br/>http://rosettacode.org/wiki/Fast_Fourier_transform#C.2B.2B<br/>*/</span><br/><span class=\"kw1\">function</span> icfft<span class=\"br0\">(</span>amplitudes<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> N <span class=\"sy0\">=</span> amplitudes.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> iN <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> N<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//conjugate if imaginary part is not 0</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>amplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Complex<span class=\"br0\">)</span><br/>\t\t\tamplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>amplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//apply fourier transform</span><br/>\tamplitudes <span class=\"sy0\">=</span> cfft<span class=\"br0\">(</span>amplitudes<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//conjugate again</span><br/>\t\tamplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>amplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">//scale</span><br/>\t\tamplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">re</span> <span class=\"sy0\">*=</span> iN<span class=\"sy0\">;</span><br/>\t\tamplitudes<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">im</span> <span class=\"sy0\">*=</span> iN<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> amplitudes<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> cfft<span class=\"br0\">(</span>amplitudes<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> N <span class=\"sy0\">=</span> amplitudes.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> N <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> amplitudes<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> hN <span class=\"sy0\">=</span> N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> even <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> odd <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\teven.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> hN<span class=\"sy0\">;</span><br/>\todd.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> hN<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> hN<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\teven<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> amplitudes<span class=\"br0\">[</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\todd<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> amplitudes<span class=\"br0\">[</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\teven <span class=\"sy0\">=</span> cfft<span class=\"br0\">(</span>even<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\todd <span class=\"sy0\">=</span> cfft<span class=\"br0\">(</span>odd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> hN<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Complex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\teven<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span>even<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Complex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\todd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span>odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> k<span class=\"sy0\">/</span>N<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">var</span> t <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> a <span class=\"sy0\">*</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tt.<span class=\"me1\">cexp</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span>.<span class=\"me1\">mul</span><span class=\"br0\">(</span>odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tamplitudes<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tamplitudes<span class=\"br0\">[</span>k <span class=\"sy0\">+</span> hN<span class=\"br0\">]</span> <span class=\"sy0\">=</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">sub</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> even<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> amplitudes<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//test code</span><br/><span class=\"co1\">//console.log( cfft([1,1,1,1,0,0,0,0]) );</span><br/><span class=\"co1\">//console.log( icfft(cfft([1,1,1,1,0,0,0,0])) );</span></pre>"}, {"lang": "jq", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># multiplication of real or complex numbers<br/>def cmult(x; y):<br/>    if (x|type) == \"number\" then<br/>       if  (y|type) == \"number\" then [ x*y, 0 ]<br/>       else [x * y[0], x * y[1]]<br/>       end<br/>    elif (y|type) == \"number\" then cmult(y;x)<br/>    else [ x[0] * y[0] - x[1] * y[1],  x[0] * y[1] + x[1] * y[0]]<br/>    end;<br/>\u00a0<br/>def cplus(x; y):<br/>    if (x|type) == \"number\" then<br/>       if  (y|type) == \"number\" then [ x+y, 0 ]<br/>       else [ x + y[0], y[1]]<br/>       end<br/>    elif (y|type) == \"number\" then cplus(y;x)<br/>    else [ x[0] + y[0], x[1] + y[1] ]<br/>    end;<br/>\u00a0<br/>def cminus(x; y): cplus(x; cmult(-1; y));<br/>\u00a0<br/># e(ix) = cos(x) + i sin(x)<br/>def expi(x): [ (x|cos), (x|sin) ];</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">fft([1,1,1,1,0,0,0,0])</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Math</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> re<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> im<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    operator infix fun plus<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re + x.<span class=\"me1\">re</span>, im + x.<span class=\"me1\">im</span><span class=\"br0\">)</span><br/>    operator infix fun minus<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re - x.<span class=\"me1\">re</span>, im - x.<span class=\"me1\">im</span><span class=\"br0\">)</span><br/>    operator infix fun times<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re <span class=\"sy0\">*</span> x, im <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><br/>    operator infix fun times<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re <span class=\"sy0\">*</span> x.<span class=\"me1\">re</span> - im <span class=\"sy0\">*</span> x.<span class=\"me1\">im</span>, re <span class=\"sy0\">*</span> x.<span class=\"me1\">im</span> + im <span class=\"sy0\">*</span> x.<span class=\"me1\">re</span><span class=\"br0\">)</span><br/>    operator infix fun div<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re / x, im / x<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exp<span class=\"sy0\">:</span> Complex by lazy <span class=\"br0\">{</span> Complex<span class=\"br0\">(</span>cos<span class=\"br0\">(</span>im<span class=\"br0\">)</span>, sin<span class=\"br0\">(</span>im<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>cosh<span class=\"br0\">(</span>re<span class=\"br0\">)</span> + sinh<span class=\"br0\">(</span>re<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        b <span class=\"sy0\">==</span> <span class=\"st0\">\"0.000\"</span> -<span class=\"sy0\">&gt;</span> a<br/>        a <span class=\"sy0\">==</span> <span class=\"st0\">\"0.000\"</span> -<span class=\"sy0\">&gt;</span> b + <span class=\"st0\">'i'</span><br/>        im <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> a + <span class=\"st0\">\" + \"</span> + b + <span class=\"st0\">'i'</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> a + <span class=\"st0\">\" - \"</span> + b + <span class=\"st0\">'i'</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"st0\">\"%1.3f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>re<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"st0\">\"%1.3f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>abs<span class=\"br0\">(</span>im<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 107, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    P <span class=\"sy0\">=</span><span class=\"nu0\">8</span><br/>    S  <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> P<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"kw2\">log</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">0.9999</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Pi <span class=\"sy0\">=</span><span class=\"nu0\">3.14159265</span><br/>    R1 <span class=\"sy0\">=</span><span class=\"nu0\">2</span>^S<br/>\u00a0<br/>    R <span class=\"sy0\">=</span>R1 <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    R2 <span class=\"sy0\">=</span>div<span class=\"br0\">(</span> R1<span class=\"sy0\">,</span>  <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    R4 <span class=\"sy0\">=</span>div<span class=\"br0\">(</span> R1<span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    R3 <span class=\"sy0\">=</span>R4 <span class=\"sy0\">+</span>R2<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> Re<span class=\"br0\">(</span> R1<span class=\"br0\">)</span><span class=\"sy0\">,</span> Im<span class=\"br0\">(</span> R1<span class=\"br0\">)</span><span class=\"sy0\">,</span> Co<span class=\"br0\">(</span> R3<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> N <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> P <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">read</span> dummy<span class=\"sy0\">:</span> Re<span class=\"br0\">(</span> N<span class=\"br0\">)</span> <span class=\"sy0\">=</span>dummy<br/>        <span class=\"kw1\">read</span> dummy<span class=\"sy0\">:</span> Im<span class=\"br0\">(</span> N<span class=\"br0\">)</span> <span class=\"sy0\">=</span>dummy<br/>    <span class=\"kw1\">next</span> N<br/>\u00a0<br/>    <span class=\"kw1\">data</span>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>     <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>       <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    S2 <span class=\"sy0\">=</span>div<span class=\"br0\">(</span> S<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    S1 <span class=\"sy0\">=</span>S <span class=\"sy0\">-</span>S2<br/>    P1 <span class=\"sy0\">=</span><span class=\"nu0\">2</span>^S1<br/>    P2 <span class=\"sy0\">=</span><span class=\"nu0\">2</span>^S2<br/>\u00a0<br/>    <span class=\"kw1\">dim</span> V<span class=\"br0\">(</span> P1 <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    V<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    DV <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    DP <span class=\"sy0\">=</span>P1<br/>\u00a0<br/>    <span class=\"kw1\">for</span> J <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> S1<br/>        HA <span class=\"sy0\">=</span>div<span class=\"br0\">(</span> DP<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        PT <span class=\"sy0\">=</span>P1 <span class=\"sy0\">-</span>HA<br/>        <span class=\"kw1\">for</span> I <span class=\"sy0\">=</span>HA <span class=\"kw1\">to</span> PT step DP<br/>            V<span class=\"br0\">(</span> I<span class=\"br0\">)</span> <span class=\"sy0\">=</span>V<span class=\"br0\">(</span> I <span class=\"sy0\">-</span>HA<span class=\"br0\">)</span> <span class=\"sy0\">+</span>DV<br/>        <span class=\"kw1\">next</span> I<br/>        DV <span class=\"sy0\">=</span>DV <span class=\"sy0\">+</span>DV<br/>        DP <span class=\"sy0\">=</span>HA<br/>    <span class=\"kw1\">next</span> J<br/>\u00a0<br/>    K <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span>Pi <span class=\"sy0\">/</span>R1<br/>\u00a0<br/>    <span class=\"kw1\">for</span> X <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> R4<br/>        COX <span class=\"sy0\">=</span><span class=\"kw2\">cos</span><span class=\"br0\">(</span> K <span class=\"sy0\">*</span>X<span class=\"br0\">)</span><br/>        Co<span class=\"br0\">(</span> X<span class=\"br0\">)</span> <span class=\"sy0\">=</span>COX<br/>        Co<span class=\"br0\">(</span> R2 <span class=\"sy0\">-</span>X<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"sy0\">-</span>COX<br/>        Co<span class=\"br0\">(</span> R2 <span class=\"sy0\">+</span>X<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"sy0\">-</span>COX<br/>    <span class=\"kw1\">next</span> X<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"FFT: bit reversal\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> I <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> P1 <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        IP <span class=\"sy0\">=</span>I <span class=\"sy0\">*</span>P2<br/>        <span class=\"kw1\">for</span> J <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> P2 <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            H <span class=\"sy0\">=</span>IP <span class=\"sy0\">+</span>J<br/>            G <span class=\"sy0\">=</span>V<span class=\"br0\">(</span> J<span class=\"br0\">)</span> <span class=\"sy0\">*</span>P2 <span class=\"sy0\">+</span>V<span class=\"br0\">(</span> I<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> G <span class=\"sy0\">&gt;</span>H <span class=\"kw1\">then</span> temp <span class=\"sy0\">=</span>Re<span class=\"br0\">(</span> G<span class=\"br0\">)</span><span class=\"sy0\">:</span> Re<span class=\"br0\">(</span> G<span class=\"br0\">)</span> <span class=\"sy0\">=</span>Re<span class=\"br0\">(</span> H<span class=\"br0\">)</span><span class=\"sy0\">:</span> Re<span class=\"br0\">(</span> H<span class=\"br0\">)</span> <span class=\"sy0\">=</span>temp<br/>            <span class=\"kw1\">if</span> G <span class=\"sy0\">&gt;</span>H <span class=\"kw1\">then</span> temp <span class=\"sy0\">=</span>Im<span class=\"br0\">(</span> G<span class=\"br0\">)</span><span class=\"sy0\">:</span> Im<span class=\"br0\">(</span> G<span class=\"br0\">)</span> <span class=\"sy0\">=</span>Im<span class=\"br0\">(</span> H<span class=\"br0\">)</span><span class=\"sy0\">:</span> Im<span class=\"br0\">(</span> H<span class=\"br0\">)</span> <span class=\"sy0\">=</span>temp<br/>        <span class=\"kw1\">next</span> J<br/>    <span class=\"kw1\">next</span> I<br/>\u00a0<br/>    T <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> stage <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> S <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"  Stage:- \"</span>; stage<br/>        D <span class=\"sy0\">=</span>div<span class=\"br0\">(</span> R2<span class=\"sy0\">,</span> T<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> Z <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> T <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            L   <span class=\"sy0\">=</span>D <span class=\"sy0\">*</span>Z<br/>            LS  <span class=\"sy0\">=</span>L <span class=\"sy0\">+</span>R4<br/>            <span class=\"kw1\">for</span> I <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> D <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>                A      <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span>I <span class=\"sy0\">*</span>T <span class=\"sy0\">+</span>Z<br/>                B      <span class=\"sy0\">=</span>A <span class=\"sy0\">+</span>T<br/>                F1     <span class=\"sy0\">=</span>Re<span class=\"br0\">(</span> A<span class=\"br0\">)</span><br/>                F2     <span class=\"sy0\">=</span>Im<span class=\"br0\">(</span> A<span class=\"br0\">)</span><br/>                P1     <span class=\"sy0\">=</span>Co<span class=\"br0\">(</span> L<span class=\"br0\">)</span>  <span class=\"sy0\">*</span>Re<span class=\"br0\">(</span> B<span class=\"br0\">)</span><br/>                P2     <span class=\"sy0\">=</span>Co<span class=\"br0\">(</span> LS<span class=\"br0\">)</span> <span class=\"sy0\">*</span>Im<span class=\"br0\">(</span> B<span class=\"br0\">)</span><br/>                P3     <span class=\"sy0\">=</span>Co<span class=\"br0\">(</span> LS<span class=\"br0\">)</span> <span class=\"sy0\">*</span>Re<span class=\"br0\">(</span> B<span class=\"br0\">)</span><br/>                P4     <span class=\"sy0\">=</span>Co<span class=\"br0\">(</span> L<span class=\"br0\">)</span>  <span class=\"sy0\">*</span>Im<span class=\"br0\">(</span> B<span class=\"br0\">)</span><br/>                Re<span class=\"br0\">(</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span>F1 <span class=\"sy0\">+</span>P1 <span class=\"sy0\">-</span>P2<br/>                Im<span class=\"br0\">(</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span>F2 <span class=\"sy0\">+</span>P3 <span class=\"sy0\">+</span>P4<br/>                Re<span class=\"br0\">(</span> B<span class=\"br0\">)</span> <span class=\"sy0\">=</span>F1 <span class=\"sy0\">-</span>P1 <span class=\"sy0\">+</span>P2<br/>                Im<span class=\"br0\">(</span> B<span class=\"br0\">)</span> <span class=\"sy0\">=</span>F2 <span class=\"sy0\">-</span>P3 <span class=\"sy0\">-</span>P4<br/>            <span class=\"kw1\">next</span> I<br/>        <span class=\"kw1\">next</span> Z<br/>        T <span class=\"sy0\">=</span>T <span class=\"sy0\">+</span>T<br/>    <span class=\"kw1\">next</span> stage<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"   M          Re( M)       Im( M)\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> M <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> R<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> Re<span class=\"br0\">(</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span>^<span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"kw1\">then</span> Re<span class=\"br0\">(</span> M<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> Im<span class=\"br0\">(</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span>^<span class=\"sy0\">-</span><span class=\"nu0\">5</span> <span class=\"kw1\">then</span> Im<span class=\"br0\">(</span> M<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"   \"</span>; M<span class=\"sy0\">,</span> Re<span class=\"br0\">(</span> M<span class=\"br0\">)</span><span class=\"sy0\">,</span> Im<span class=\"br0\">(</span> M<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> M<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> div<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>        div <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> a <span class=\"sy0\">/</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 67, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- operations on complex number</span><br/>complex <span class=\"sy0\">=</span> <span class=\"br0\">{</span>__mt<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>new <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">local</span> new<span class=\"sy0\">=</span><span class=\"br0\">{</span>r<span class=\"sy0\">=</span>r<span class=\"sy0\">,</span> i<span class=\"sy0\">=</span>i <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <br/>  <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>new<span class=\"sy0\">,</span>complex<span class=\"sy0\">.</span>__mt<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> new<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>__mt<span class=\"sy0\">.</span>__add <span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> complex<span class=\"sy0\">.</span>new<span class=\"br0\">(</span>c1<span class=\"sy0\">.</span>r <span class=\"sy0\">+</span> c2<span class=\"sy0\">.</span>r<span class=\"sy0\">,</span> c1<span class=\"sy0\">.</span>i <span class=\"sy0\">+</span> c2<span class=\"sy0\">.</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>__mt<span class=\"sy0\">.</span>__sub <span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> complex<span class=\"sy0\">.</span>new<span class=\"br0\">(</span>c1<span class=\"sy0\">.</span>r <span class=\"sy0\">-</span> c2<span class=\"sy0\">.</span>r<span class=\"sy0\">,</span> c1<span class=\"sy0\">.</span>i <span class=\"sy0\">-</span> c2<span class=\"sy0\">.</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>__mt<span class=\"sy0\">.</span>__mul <span class=\"br0\">(</span>c1<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> complex<span class=\"sy0\">.</span>new<span class=\"br0\">(</span>c1<span class=\"sy0\">.</span>r<span class=\"sy0\">*</span>c2<span class=\"sy0\">.</span>r <span class=\"sy0\">-</span> c1<span class=\"sy0\">.</span>i<span class=\"sy0\">*</span>c2<span class=\"sy0\">.</span>i<span class=\"sy0\">,</span><br/>                      c1<span class=\"sy0\">.</span>r<span class=\"sy0\">*</span>c2<span class=\"sy0\">.</span>i <span class=\"sy0\">+</span> c1<span class=\"sy0\">.</span>i<span class=\"sy0\">*</span>c2<span class=\"sy0\">.</span>r<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>expi <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> complex<span class=\"sy0\">.</span>new<span class=\"br0\">(</span><span class=\"kw3\">math.cos</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw3\">math.sin</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> complex<span class=\"sy0\">.</span>__mt<span class=\"sy0\">.</span>__tostring<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">..</span>c<span class=\"sy0\">.</span>r<span class=\"sy0\">..</span><span class=\"st0\">\",\"</span><span class=\"sy0\">..</span>c<span class=\"sy0\">.</span>i<span class=\"sy0\">..</span><span class=\"st0\">\")\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Cooley\u2013Tukey FFT (in-place, divide-and-conquer)</span><br/><span class=\"co1\">-- Higher memory requirements and redundancy although more intuitive</span><br/><span class=\"kw1\">function</span> fft<span class=\"br0\">(</span>vect<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> n<span class=\"sy0\">=#</span>vect<br/>  <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> vect <span class=\"kw1\">end</span><br/><span class=\"co1\">-- divide  </span><br/>  <span class=\"kw1\">local</span> odd<span class=\"sy0\">,</span>even<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>    odd<span class=\"br0\">[</span><span class=\"sy0\">#</span>odd<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>vect<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    even<span class=\"br0\">[</span><span class=\"sy0\">#</span>even<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>vect<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"co1\">-- conquer</span><br/>  fft<span class=\"br0\">(</span>even<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fft<span class=\"br0\">(</span>odd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">-- combine</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> t<span class=\"sy0\">=</span>even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> complex<span class=\"sy0\">.</span>expi<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">math.pi</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><br/>    vect<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"sy0\">;</span><br/>    vect<span class=\"br0\">[</span>k<span class=\"sy0\">+</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">-</span> t<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> vect<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> toComplex<span class=\"br0\">(</span>vectr<span class=\"br0\">)</span><br/>  vect<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>r <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>vectr<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    vect<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>complex<span class=\"sy0\">.</span>new<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> vect<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- test</span><br/>data <span class=\"sy0\">=</span> toComplex<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"orig:\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"fft:\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>fft<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>with( DiscreteTransforms ):<br/>\u00a0<br/>FourierTransform( &lt;1,1,1,1,0,0,0,0&gt;, normalization=none );<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Fourier[{1,1,1,1,0,0,0,0}, FourierParameters-&gt;{1,-1}]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fft.html\"><span class=\"kw2\">fft</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>'<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">load(fft)$<br/>fft([1, 2, 3, 4]);<br/>[2.5, -0.5 *\u00a0%i - 0.5, -0.5, 0.5 *\u00a0%i - 0.5]</pre>"}, {"lang": "Nim", "loc": 26, "block": "<pre class=\"text highlighted_source\">import math, complex, strutils<br/>\u00a0<br/>proc toComplex(x: float): TComplex = result.re = x<br/>proc toComplex(x: TComplex): TComplex = x<br/>\u00a0<br/># Works with floats and complex numbers as input<br/>proc fft[T](x: openarray[T]): seq[TComplex] =<br/>  let n = x.len<br/>  result = newSeq[TComplex]()<br/>  if n &lt;= 1:<br/>    for v in x: result.add toComplex(v)<br/>    return<br/>  var evens, odds = newSeq[T]()<br/>  for i, v in x:<br/>    if i mod 2 == 0: evens.add v<br/>    else: odds.add v<br/>  var (even, odd) = (fft(evens), fft(odds))<br/>\u00a0<br/>  for k in 0 .. &lt; n div 2:<br/>    result.add(even[k] + exp((0.0, -2*pi*float(k)/float(n))) * odd[k])<br/>\u00a0<br/>  for k in 0 .. &lt; n div 2:<br/>    result.add(even[k] - exp((0.0, -2*pi*float(k)/float(n))) * odd[k])<br/>\u00a0<br/>for i in fft(@[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]):<br/>  echo formatFloat(abs(i), ffDecimal, 3)</pre>"}, {"lang": "OCaml", "loc": 25, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> fac k n <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> m2pi <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">4.0</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALacos\"><span class=\"kw3\">acos</span></a> <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>   polar <span class=\"nu0\">1.0</span> <span class=\"br0\">(</span>m2pi<span class=\"sy0\">*.</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> k<span class=\"br0\">)</span><span class=\"sy0\">/.</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> merge l r n <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> f <span class=\"br0\">(</span>k,t<span class=\"br0\">)</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> k, <span class=\"br0\">(</span>mul <span class=\"br0\">(</span>fac k n<span class=\"br0\">)</span> x<span class=\"br0\">)</span> <span class=\"sy0\">::</span> t<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left f <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map2 add l z<span class=\"br0\">)</span> @ <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map2 sub l z<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fft lst <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> ditfft2 a n s <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth lst a<span class=\"br0\">]</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> odd <span class=\"sy0\">=</span> ditfft2 a <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> even <span class=\"sy0\">=</span> ditfft2 <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>s<span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      merge odd even n <span class=\"kw1\">in</span><br/>   ditfft2 <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length lst<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> show l <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> pr x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"(%f\u00a0%f) \"</span> x<span class=\"sy0\">.</span>re x<span class=\"sy0\">.</span>im <span class=\"kw1\">in</span><br/>   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter pr l<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> indata <span class=\"sy0\">=</span> <span class=\"br0\">[</span>one<span class=\"sy0\">;</span>one<span class=\"sy0\">;</span>one<span class=\"sy0\">;</span>one<span class=\"sy0\">;</span>zero<span class=\"sy0\">;</span>zero<span class=\"sy0\">;</span>zero<span class=\"sy0\">;</span>zero<span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>show indata<span class=\"sy0\">;</span><br/>show <span class=\"br0\">(</span>fft indata<span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 118, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>list=<span class=\"st0\">'1 1 1 1 0 0 0 0'</span><br/>n=<span class=\"kw6\">words</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>x=<span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n<br/>  x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>=<span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>list,i<span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'FFT  in'</span>,x<br/><span class=\"kw1\">call</span> fft x<br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'FFT out'</span>,x<br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>show: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> data,x<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'---data---   num       real-part   imaginary-part'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'----------   ---       ---------   --------------'</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> x~size<br/>    <span class=\"kw1\">say</span> data <span class=\"kw6\">right</span><span class=\"br0\">(</span>i,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"st0\">'       '</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>~string<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>fft: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> in<br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  n=in~size<br/>  <span class=\"kw1\">If</span> n=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span><br/>  odd=<span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  even=<span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n <span class=\"kw2\">By</span> <span class=\"nu0\">2</span>; odd<span class=\"br0\">[</span><span class=\"br0\">(</span>j+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>=in<span class=\"br0\">[</span>j<span class=\"br0\">]</span>; <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> n <span class=\"kw2\">By</span> <span class=\"nu0\">2</span>; even<span class=\"br0\">[</span>j<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>=in<span class=\"br0\">[</span>j<span class=\"br0\">]</span>; <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Call</span> fft odd<br/>  <span class=\"kw1\">Call</span> fft even<br/>  pi=3<span class=\"sy0\">.</span>14159265358979323E0<br/>  n_2=n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n_2<br/>    w=-<span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span><span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>N<br/>    t=<span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>rxCalcCos<span class=\"br0\">(</span>w,,<span class=\"st0\">'R'</span><span class=\"br0\">)</span>,rxCalcSin<span class=\"br0\">(</span>w,,<span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>even<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    in<span class=\"br0\">[</span>i<span class=\"br0\">]</span>=odd<span class=\"br0\">[</span>i<span class=\"br0\">]</span>+t<br/>    in<span class=\"br0\">[</span>i+n_2<span class=\"br0\">]</span>=odd<span class=\"br0\">[</span>i<span class=\"br0\">]</span>-t<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>::class complex<br/>::method init<br/>  <span class=\"kw1\">expose</span> r i<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> r, i = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- complex instances are immutable, so these are</span><br/><span class=\"co1\">-- read only attributes</span><br/>::<span class=\"kw1\">attribute</span> r GET<br/>::<span class=\"kw1\">attribute</span> i GET<br/>\u00a0<br/>::method add<br/>  <span class=\"kw1\">expose</span> r i<br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> other<br/>  <span class=\"kw1\">if</span> other~isa<span class=\"br0\">(</span><span class=\"sy0\">.</span>complex<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>     <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r + other~r, i + other~i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r + other, i<span class=\"br0\">)</span><br/>\u00a0<br/>::method subtract<br/>  <span class=\"kw1\">expose</span> r i<br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> other<br/>  <span class=\"kw1\">if</span> other~isa<span class=\"br0\">(</span><span class=\"sy0\">.</span>complex<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>     <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r - other~r, i - other~i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r - other, i<span class=\"br0\">)</span><br/>\u00a0<br/>::method <span class=\"st0\">\"+\"</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"co1\">-- need to check if this is a prefix plus or an addition</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>      <span class=\"kw1\">return</span> self  <span class=\"co1\">-- we can return this copy since it is immutable</span><br/>  <span class=\"kw3\">else</span><br/>      <span class=\"kw1\">forward</span> message<span class=\"br0\">(</span><span class=\"st0\">\"ADD\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>::method <span class=\"st0\">\"-\"</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"co1\">-- need to check if this is a prefix minus or a subtract</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>      <span class=\"kw1\">forward</span> message<span class=\"br0\">(</span><span class=\"st0\">\"NEGATIVE\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span><br/>      <span class=\"kw1\">forward</span> message<span class=\"br0\">(</span><span class=\"st0\">\"SUBTRACT\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>::method times<br/>  <span class=\"kw1\">expose</span> r i<br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> other<br/>  <span class=\"kw1\">if</span> other~isa<span class=\"br0\">(</span><span class=\"sy0\">.</span>complex<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>     <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r <span class=\"sy0\">*</span> other~r - i <span class=\"sy0\">*</span> other~i, r <span class=\"sy0\">*</span> other~i + i <span class=\"sy0\">*</span> other~r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> self~class~new<span class=\"br0\">(</span>r <span class=\"sy0\">*</span> other, i <span class=\"sy0\">*</span> other<span class=\"br0\">)</span><br/>\u00a0<br/>::method <span class=\"st0\">\"*\"</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">forward</span> message<span class=\"br0\">(</span><span class=\"st0\">\"TIMES\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>::method string<br/>  <span class=\"kw1\">expose</span> r i<br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">12</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> i=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">If</span> r=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>        <span class=\"kw1\">Return</span> <span class=\"st0\">'0'</span><br/>      <span class=\"kw3\">Else</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>r,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">When</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>r,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">' +'</span><span class=\"kw6\">format</span><span class=\"br0\">(</span>i,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">'i'</span><br/>    <span class=\"kw3\">Otherwise</span><br/>      <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>r,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">' -'</span><span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">abs</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">'i'</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>::method formatnumber private<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw2\">value</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"+\"</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"-\"</span> <span class=\"kw2\">value</span>~<span class=\"kw6\">abs</span><br/>\u00a0<br/>::requires rxMath library</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">FFT<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>t<span class=\"sy0\">=-</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">Pi</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">/</span>#v<span class=\"sy0\">,</span>tt<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>tt<span class=\"sy0\">=</span>t<span class=\"sy0\">*</span><span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"kw1\">exp</span><span class=\"br0\">(</span>tt<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>FFT<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fft <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">@_</span> <span class=\"kw1\">if</span> <span class=\"co5\">@_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@evn</span> <span class=\"sy0\">=</span> fft<span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">not</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#_</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@odd</span> <span class=\"sy0\">=</span> fft<span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#_</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$twd</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"re0\">*i</span><span class=\"sy0\">*</span> pi <span class=\"sy0\">/</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$odd</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> <a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"re0\">$twd</span> <span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#odd</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><br/>    <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$evn</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$odd</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#evn</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$evn</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$odd</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#evn</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> fft <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> fft <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@_</span> <span class=\"kw1\">if</span> <span class=\"re0\">@_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@evn</span> <span class=\"sy0\">=</span> fft<span class=\"br0\">(</span> <span class=\"re0\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@odd</span> <span class=\"sy0\">=</span> fft<span class=\"br0\">(</span> <span class=\"re0\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span><br/>    <span class=\"kw3\">map</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">cis</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>tau <span class=\"sy0\">/</span> <span class=\"re0\">@_</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> flat <span class=\"re0\">@evn</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@odd</span><span class=\"sy0\">,</span> <span class=\"re0\">@evn</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0<span class=\"re0\">@odd</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> fft <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 129, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\FastFourierTransform.exw<br/>-- =====================================<br/>--<br/>--  Originally written by Robert Craig and posted to EuForum Dec 13, 2001<br/>--<br/>\u00a0<br/>constant REAL = 1, IMAG = 2<br/>\u00a0<br/>type complex(sequence x)<br/>    return length(x)=2 and atom(x[REAL]) and atom(x[IMAG])<br/>end type<br/>\u00a0<br/>function p2round(integer x)<br/>-- rounds x up to a power of two<br/>integer p = 1<br/>    while p&lt;x do<br/>        p += p<br/>    end while<br/>    return p<br/>end function<br/>\u00a0<br/>function log2(atom x)<br/>-- return log2 of x, or -1 if x is not a power of 2<br/>    if x&gt;0 then<br/>        integer p = -1<br/>        while floor(x)=x do<br/>            x /= 2<br/>            p += 1<br/>        end while<br/>        if x=0.5 then<br/>            return p<br/>        end if<br/>    end if<br/>    return -1<br/>end function<br/>\u00a0<br/>function bitrev(sequence a)<br/>-- bitrev an array of complex numbers<br/>integer j=1, n = length(a)<br/>    for i=1 to n-1 do<br/>        if i&lt;j then<br/>            {a[i],a[j]} = {a[j],a[i]}<br/>        end if<br/>        integer k = n/2<br/>        while k&lt;j do<br/>            j -= k<br/>            k /= 2<br/>        end while<br/>        j = j+k<br/>    end for<br/>    return a<br/>end function<br/>\u00a0<br/>function cmult(complex arg1, complex arg2)<br/>-- complex multiply <br/>    return {arg1[REAL]*arg2[REAL]-arg1[IMAG]*arg2[IMAG],<br/>            arg1[REAL]*arg2[IMAG]+arg1[IMAG]*arg2[REAL]}<br/>end function<br/>\u00a0<br/>function ip_fft(sequence a)<br/>-- perform an in-place fft on an array of complex numbers<br/>-- that has already been bit reversed<br/>integer n = length(a)<br/>integer ip, le, le1<br/>complex u, w, t<br/>\u00a0<br/>    for l=1 to log2(n) do<br/>        le = power(2, l)<br/>        le1 = le/2<br/>        u = {1, 0}<br/>        w = {cos(PI/le1), sin(PI/le1)}<br/>        for j=1 to le1 do<br/>            for i=j to n by le do<br/>                ip = i+le1<br/>                t = cmult(a[ip], u)<br/>                a[ip] = sq_sub(a[i],t)<br/>                a[i] = sq_add(a[i],t)<br/>            end for<br/>            u = cmult(u, w)<br/>        end for<br/>    end for<br/>    return a<br/>end function<br/>\u00a0<br/>function fft(sequence a)<br/>integer n = length(a)<br/>    if log2(n)=-1 then<br/>        puts(1, \"input vector length is not a power of two, padded with 0's\\n\\n\")<br/>        n = p2round(n)<br/>         -- pad with 0's <br/>        for j=length(a)+1 to n do<br/>            a = append(a,{0, 0})<br/>        end for<br/>    end if<br/>    a = ip_fft(bitrev(a))<br/>    -- reverse output from fft to switch +ve and -ve frequencies<br/>    for i=2 to n/2 do<br/>        integer j = n+2-i<br/>        {a[i],a[j]} = {a[j],a[i]}<br/>    end for<br/>    return a<br/>end function<br/>\u00a0<br/>function ifft(sequence a)<br/>integer n = length(a)<br/>    if log2(n)=-1 then\u00a0?9/0 end if -- (or as above?)<br/>    a = ip_fft(bitrev(a))<br/>    -- modifies results to get inverse fft<br/>    for i=1 to n do<br/>        a[i] = sq_div(a[i],n)<br/>    end for<br/>    return a<br/>end function<br/>\u00a0<br/>constant a = {{1, 0},<br/>              {1, 0},<br/>              {1, 0},<br/>              {1, 0},<br/>              {0, 0},<br/>              {0, 0},<br/>              {0, 0},<br/>              {0, 0}}<br/>\u00a0<br/>printf(1, \"Results of\u00a0%d-point fft:\\n\\n\", length(a))<br/>ppOpt({pp_Nest,1,pp_IntFmt,\"%10.6f\",pp_FltFmt,\"%10.6f\"})<br/>pp(fft(a))<br/>printf(1, \"\\nResults of\u00a0%d-point inverse fft (rounded to 6 d.p.):\\n\\n\", length(a))<br/>pp(ifft(fft(a)))</pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\"># apt-get install libfftw3-dev<br/>\u00a0<br/>(scl 4)<br/>\u00a0<br/>(de FFTW_FORWARD . -1)<br/>(de FFTW_ESTIMATE . 64)<br/>\u00a0<br/>(de fft (Lst)<br/>   (let<br/>      (Len (length Lst)<br/>         In (native \"libfftw3.so\" \"fftw_malloc\" 'N (* Len 16))<br/>         Out (native \"libfftw3.so\" \"fftw_malloc\" 'N (* Len 16))<br/>         P (native \"libfftw3.so\" \"fftw_plan_dft_1d\" 'N<br/>            Len In Out FFTW_FORWARD FFTW_ESTIMATE ) )<br/>      (struct In NIL (cons 1.0 (apply append Lst)))<br/>      (native \"libfftw3.so\" \"fftw_execute\" NIL P)<br/>      (prog1 (struct Out (make (do Len (link (1.0 . 2)))))<br/>         (native \"libfftw3.so\" \"fftw_destroy_plan\" NIL P)<br/>         (native \"libfftw3.so\" \"fftw_free\" NIL Out)<br/>         (native \"libfftw3.so\" \"fftw_free\" NIL In) ) ) )</pre>"}, {"lang": "PL/I", "loc": 49, "block": "<pre class=\"text highlighted_source\">test: PROCEDURE OPTIONS (MAIN, REORDER); /* Derived from Fortran Rosetta Code */<br/>\u00a0<br/>  /* In-place Cooley-Tukey FFT */<br/>FFT: PROCEDURE (x) RECURSIVE;<br/>   DECLARE  x(*) COMPLEX FLOAT (18);<br/>   DECLARE  t    COMPLEX FLOAT (18);<br/>   DECLARE ( N, Half_N ) FIXED BINARY (31);<br/>   DECLARE ( i, j ) FIXED BINARY (31);<br/>   DECLARE (even(*), odd(*)) CONTROLLED COMPLEX FLOAT (18);<br/>   DECLARE pi FLOAT (18) STATIC INITIAL ( 3.14159265358979323E0);<br/>\u00a0<br/>   N = HBOUND(x);<br/>\u00a0<br/>   if N &lt;= 1 THEN return;<br/>\u00a0<br/>   allocate odd((N+1)/2), even(N/2);<br/>\u00a0<br/>    /* divide */<br/>   do j = 1 to N by 2; odd((j+1)/2) = x(j); end;<br/>   do j = 2 to N by 2; even(j/2)    = x(j); end;<br/>\u00a0<br/>    /* conquer */<br/>   call fft(odd);<br/>   call fft(even);<br/>\u00a0<br/>    /* combine */<br/>   half_N = N/2;<br/>   do i=1 TO half_N;<br/>      t = exp(COMPLEX(0, -2*pi*(i-1)/N))*even(i);<br/>      x(i)        = odd(i) + t;<br/>      x(i+half_N) = odd(i) - t;<br/>   end;<br/>\u00a0<br/>   FREE odd, even;<br/>\u00a0<br/>END fft;<br/>\u00a0<br/>\u00a0<br/>   DECLARE data(8)  COMPLEX FLOAT (18) STATIC INITIAL (<br/>                    1, 1, 1, 1, 0, 0, 0, 0);<br/>   DECLARE ( i ) FIXED BINARY (31);<br/>\u00a0<br/>   call fft(data);<br/>\u00a0<br/>   do i=1 TO 8;<br/>      PUT SKIP LIST ( fixed(data(i), 25, 12) );<br/>   end;<br/>\u00a0<br/>END test;</pre>"}, {"lang": "Prolog", "loc": 38, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> twiddles<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%_______________________________________________________________</span><br/><span class=\"co1\">% Arithemetic for complex numbers; only the needed rules</span><br/>add<span class=\"br0\">(</span>cx<span class=\"br0\">(</span>R1<span class=\"sy4\">,</span>I1<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R2<span class=\"sy4\">,</span>I2<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R<span class=\"sy4\">,</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1<span class=\"sy3\">+</span>R2<span class=\"sy4\">,</span> I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I1<span class=\"sy3\">+</span>I2<span class=\"sy4\">.</span><br/>sub<span class=\"br0\">(</span>cx<span class=\"br0\">(</span>R1<span class=\"sy4\">,</span>I1<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R2<span class=\"sy4\">,</span>I2<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R<span class=\"sy4\">,</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1<span class=\"sy3\">-</span>R2<span class=\"sy4\">,</span> I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I1<span class=\"sy3\">-</span>I2<span class=\"sy4\">.</span><br/>mul<span class=\"br0\">(</span>cx<span class=\"br0\">(</span>R1<span class=\"sy4\">,</span>I1<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R2<span class=\"sy4\">,</span>I2<span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span>R<span class=\"sy4\">,</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1<span class=\"sy3\">*</span>R2<span class=\"sy3\">-</span>I1<span class=\"sy3\">*</span>I2<span class=\"sy4\">,</span> I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1<span class=\"sy3\">*</span>I2<span class=\"sy3\">+</span>R2<span class=\"sy3\">*</span>I1<span class=\"sy4\">.</span><br/>polar_cx<span class=\"br0\">(</span>Mag<span class=\"sy4\">,</span> Theta<span class=\"sy4\">,</span> cx<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>     <span class=\"co1\">% Euler</span><br/>\tR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Mag <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>Theta<span class=\"br0\">)</span><span class=\"sy4\">,</span> I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Mag <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>Theta<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%___________________________________________________</span><br/><span class=\"co1\">% FFT Implementation. Note: K rdiv N is a rational number,</span><br/><span class=\"co1\">% making the lookup in dynamic database predicate twiddles/2 very</span><br/><span class=\"co1\">% efficient.  Also, polar_cx/2 gets called only when necessary- in </span><br/><span class=\"co1\">% this case (N=8), exactly 3 times: (where Tf=1/4, 1/8, or 3/8).</span><br/>tw<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>                    <span class=\"co1\">% Calculate e^(-2*pi*k/N)</span><br/>tw<span class=\"br0\">(</span>Tf<span class=\"sy4\">,</span> Cx<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> twiddles<span class=\"br0\">(</span>Tf<span class=\"sy4\">,</span> Cx<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>     <span class=\"co1\">% dynamic match?</span><br/>tw<span class=\"br0\">(</span>Tf<span class=\"sy4\">,</span> Cx<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> polar_cx<span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy4\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>pi<span class=\"sy3\">*</span>Tf<span class=\"sy4\">,</span> Cx<span class=\"br0\">)</span><span class=\"sy4\">,</span> assert<span class=\"br0\">(</span>twiddles<span class=\"br0\">(</span>Tf<span class=\"sy4\">,</span> Cx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>fftVals<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Even<span class=\"sy4\">,</span> Odd<span class=\"sy4\">,</span> V0<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>       <span class=\"co1\">% solves all V0,V1 for N,Even,Odd</span><br/>\tnth0<span class=\"br0\">(</span>K<span class=\"sy4\">,</span>Even<span class=\"sy4\">,</span>E<span class=\"br0\">)</span><span class=\"sy4\">,</span> nth0<span class=\"br0\">(</span>K<span class=\"sy4\">,</span>Odd<span class=\"sy4\">,</span>O<span class=\"br0\">)</span><span class=\"sy4\">,</span> Tf <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> K rdiv N<span class=\"sy4\">,</span> tw<span class=\"br0\">(</span>Tf<span class=\"sy4\">,</span>Cx<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmul<span class=\"br0\">(</span>Cx<span class=\"sy4\">,</span>O<span class=\"sy4\">,</span>M<span class=\"br0\">)</span><span class=\"sy4\">,</span> add<span class=\"br0\">(</span>E<span class=\"sy4\">,</span>M<span class=\"sy4\">,</span>V0<span class=\"br0\">)</span><span class=\"sy4\">,</span> sub<span class=\"br0\">(</span>E<span class=\"sy4\">,</span>M<span class=\"sy4\">,</span>V1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>split<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> <span class=\"co1\">% split [[a0,b0],[a1,b1],...] into [a0,a1,...] and [b0,b1,...]</span><br/>split<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>V0<span class=\"sy4\">,</span>V1<span class=\"br0\">]</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V0<span class=\"sy5\">|</span>T0<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V1<span class=\"sy5\">|</span>T1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> split<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> T0<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>fft<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>fft<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> List<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>Ve<span class=\"sy4\">,</span> <span class=\"br0\">(</span>nth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span>Ve<span class=\"br0\">)</span><span class=\"sy4\">,</span>I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> EL<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> fft<span class=\"br0\">(</span>EL<span class=\"sy4\">,</span> Even<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>Vo<span class=\"sy4\">,</span> <span class=\"br0\">(</span>nth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span>T<span class=\"sy4\">,</span>Vo<span class=\"br0\">)</span><span class=\"sy4\">,</span>I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>OL<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> fft<span class=\"br0\">(</span>OL<span class=\"sy4\">,</span> Odd<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>V0<span class=\"sy4\">,</span>V1<span class=\"br0\">]</span><span class=\"sy4\">,</span>fftVals<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>Even<span class=\"sy4\">,</span>Odd<span class=\"sy4\">,</span>V0<span class=\"sy4\">,</span>V1<span class=\"br0\">)</span><span class=\"sy4\">,</span>FFTVals<span class=\"br0\">)</span><span class=\"sy4\">,</span>    <span class=\"co1\">% calc FFT</span><br/>\tsplit<span class=\"br0\">(</span>FFTVals<span class=\"sy4\">,</span>L0<span class=\"sy4\">,</span>L1<span class=\"br0\">)</span><span class=\"sy4\">,</span> append<span class=\"br0\">(</span>L0<span class=\"sy4\">,</span>L1<span class=\"sy4\">,</span>List<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%___________________________________________________</span><br/>test <span class=\"sy1\">:-</span> D<span class=\"sy6\">=</span><span class=\"br0\">[</span>cx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>cx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\ttime<span class=\"br0\">(</span>fft<span class=\"br0\">(</span>D<span class=\"sy4\">,</span>DRes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> writef<span class=\"br0\">(</span><span class=\"st_h\">'fft=['</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> P <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">10</span>^<span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>member<span class=\"br0\">(</span>cx<span class=\"br0\">(</span>Ri<span class=\"sy4\">,</span>Ii<span class=\"br0\">)</span><span class=\"sy4\">,</span> DRes<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>Ri<span class=\"sy3\">*</span>P<span class=\"br0\">)</span><span class=\"sy3\">/</span>P<span class=\"sy4\">,</span> I <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>Ii<span class=\"sy3\">*</span>P<span class=\"br0\">)</span><span class=\"sy3\">/</span>P<span class=\"sy4\">,</span><br/>\t <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>I<span class=\"sy6\">&gt;=</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'+'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">;</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'j, '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">']'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">cmath</span> <span class=\"kw1\">import</span> exp<span class=\"sy0\">,</span> pi<br/>\u00a0<br/><span class=\"kw1\">def</span> fft<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    N <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">return</span> x<br/>    even <span class=\"sy0\">=</span> fft<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span>::<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    odd <span class=\"sy0\">=</span>  fft<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span>::<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    T<span class=\"sy0\">=</span> <span class=\"br0\">[</span>exp<span class=\"br0\">(</span>-2j*pi*k/N<span class=\"br0\">)</span>*odd<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N//<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> + T<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N//<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> + \\<br/>           <span class=\"br0\">[</span>even<span class=\"br0\">[</span>k<span class=\"br0\">]</span> - T<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N//<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"%5.3f\"</span>\u00a0% <span class=\"kw2\">abs</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <br/>                <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> fft<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">fft(c(1,1,1,1,0,0,0,0))</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(array-fft (array #[1. 1. 1. 1. 0. 0. 0. 0.]))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 68, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs a  fast Fourier transform  (FFT)  on a set of  complex numbers. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   - <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*limited by the  PI  function result. */</span><br/><span class=\"kw1\">arg</span> data                                         <span class=\"coMULTI\">/*ARG verb uppercases the DATA from CL.*/</span><br/><span class=\"kw1\">if</span> data=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> data=<span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>                  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>size=<span class=\"kw6\">words</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>;       pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*PAD:  for indenting and padding SAYs.*/</span><br/>  <span class=\"kw1\">do</span> p=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>  <span class=\"nu0\">2</span><span class=\"sy0\">**</span>p<span class=\"sy0\">&gt;</span>=size       \u00a0;   <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*number of args exactly a power of 2? */</span><br/>  <span class=\"kw1\">do</span> j=size+<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>p;  data=data <span class=\"nu0\">0</span>;   <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*add zeroes to DATA 'til a power of 2.*/</span><br/>size=<span class=\"kw6\">words</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>;       ph=p%2    \u00a0;   <span class=\"kw1\">call</span> hdr          <span class=\"coMULTI\">/*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*/</span><br/>                        <span class=\"coMULTI\">/* [\u2193] TRANSLATE allows I &amp; J*/</span>  <span class=\"coMULTI\">/*\u2551 Numbers in data can be in \u2551*/</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> size                                <span class=\"coMULTI\">/*\u2551 seven formats:  real      \u2551*/</span><br/>         _=<span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>data, j+<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">'J'</span>, <span class=\"st0\">\"I\"</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*\u2551                 real,imag \u2551*/</span><br/>         <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  _    #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>j  <span class=\"st0\">''</span>  $  <span class=\"nu0\">1</span>     <span class=\"st0\">\",\"</span> #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>j  <span class=\"coMULTI\">/*\u2551                     ,imag \u2551*/</span><br/>         <span class=\"kw1\">if</span> $==<span class=\"st0\">'J'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>j #<span class=\"nu0\">2</span><span class=\"sy0\">.</span>j <span class=\"st0\">\"J\"</span> #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>j  <span class=\"coMULTI\">/*\u2551                      nnnJ \u2551*/</span><br/>                                                         <span class=\"coMULTI\">/*\u2551                      nnnj \u2551*/</span><br/>           <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  <span class=\"nu0\">2</span>;      #<span class=\"sy0\">.</span>m<span class=\"sy0\">.</span>j= <span class=\"kw6\">word</span><span class=\"br0\">(</span>#<span class=\"sy0\">.</span>m<span class=\"sy0\">.</span>j <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*\u2551                      nnnI \u2551*/</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span>          <span class=\"coMULTI\">/*omitted part?  [\u2191] */</span>  <span class=\"coMULTI\">/*\u2551                      nnni \u2551*/</span><br/>                                                         <span class=\"coMULTI\">/*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/</span><br/>         <span class=\"kw1\">say</span> pad <span class=\"st0\">' FFT   in '</span>     <span class=\"kw6\">center</span><span class=\"br0\">(</span>j+<span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>     pad    fmt<span class=\"br0\">(</span>#<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>     fmt<span class=\"br0\">(</span>#<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>j, <span class=\"st0\">\"i\"</span><span class=\"br0\">)</span><br/>         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span><br/>tran=pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>p;     \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;    hp=<span class=\"nu0\">2</span><span class=\"sy0\">**</span>p\u00a0%2;        A=<span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>p-ph<span class=\"br0\">)</span>;        ptr=A;      dbl=<span class=\"nu0\">1</span><br/><span class=\"kw1\">say</span><br/>         <span class=\"kw1\">do</span> p-ph;        halfPtr=ptr\u00a0% <span class=\"nu0\">2</span><br/>                      <span class=\"kw1\">do</span> i=halfPtr  <span class=\"kw2\">by</span> ptr  <span class=\"kw2\">to</span> A-halfPtr;   _=i - halfPtr;  \u00a0!<span class=\"sy0\">.</span>i=!<span class=\"sy0\">.</span>_ + dbl<br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>         ptr=halfPtr;             dbl=dbl+dbl<br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p-ph*/</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>p%4;  cmp<span class=\"sy0\">.</span>j=cos<span class=\"br0\">(</span>j<span class=\"sy0\">*</span>tran<span class=\"br0\">)</span>;     _=hp - j;     cmp<span class=\"sy0\">.</span>_= -cmp<span class=\"sy0\">.</span>j<br/>                                                    _=hp + j;     cmp<span class=\"sy0\">.</span>_= -cmp<span class=\"sy0\">.</span>j<br/>         <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>B=<span class=\"nu0\">2</span><span class=\"sy0\">**</span>ph<br/>         <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>      <span class=\"kw2\">for</span> A;            q=i <span class=\"sy0\">*</span> B<br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> B;   h=q+j;   _=!<span class=\"sy0\">.</span>j<span class=\"sy0\">*</span>B+!<span class=\"sy0\">.</span>i;     <span class=\"kw1\">if</span> _<span class=\"sy0\">&lt;</span>=h  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>             <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>_  #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>h  #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>_  #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>h    <span class=\"kw2\">with</span>    #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>h  #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>_  #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>h  #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>_<br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                              <span class=\"coMULTI\">/* [\u2191]  swap  two sets of values. */</span><br/>         <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*i*/</span><br/>dbl=<span class=\"nu0\">1</span><br/>         <span class=\"kw1\">do</span> p                 \u00a0;         w= hp\u00a0% dbl<br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>   <span class=\"kw2\">for</span> dbl   \u00a0;        Lb= w <span class=\"sy0\">*</span> k           \u00a0;          Lh= Lb + <span class=\"nu0\">2</span><span class=\"sy0\">**</span>p\u00a0% <span class=\"nu0\">4</span><br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span> <span class=\"kw2\">for</span> w     \u00a0;         a= j <span class=\"sy0\">*</span> dbl <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + k \u00a0;           b=  a + dbl<br/>             r=#<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>a;  i=#<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>a\u00a0;        c1= cmp<span class=\"sy0\">.</span>Lb <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>b  \u00a0;          c4= cmp<span class=\"sy0\">.</span>Lb <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>b<br/>                                        c2= cmp<span class=\"sy0\">.</span>Lh <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>b  \u00a0;          c3= cmp<span class=\"sy0\">.</span>Lh <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>b<br/>                                     #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>a= r + c1 - c2     \u00a0;       #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>a= i + c3 + c4<br/>                                     #<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>b= r - c1 + c2     \u00a0;       #<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>b= i - c3 - c4<br/>             <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span><br/>           <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*k*/</span><br/>         dbl=dbl+dbl<br/>         <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*p*/</span><br/><span class=\"kw1\">call</span> hdr<br/>         <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> size<br/>         <span class=\"kw1\">say</span> pad     <span class=\"st0\">\" FFT  out \"</span>     <span class=\"kw6\">center</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span>    pad    fmt<span class=\"br0\">(</span>#<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>    fmt<span class=\"br0\">(</span>#<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>i,<span class=\"st0\">'j'</span><span class=\"br0\">)</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>                             <span class=\"coMULTI\">/*[\u2191] #s are shown with 10 decimal digs*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  q=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>;      z=<span class=\"nu0\">1</span>;    _=<span class=\"nu0\">1</span>;   p=<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*bare bones COS. */</span><br/>       <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;  _=-_<span class=\"sy0\">*</span>q<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  z=z+_;  <span class=\"kw1\">if</span> z=p  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> z;   p=z;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fmt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y,j;  y=y<span class=\"sy0\">/</span><span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*prettifies complex numbers for output*/</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">'1e-'</span><span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>%4  <span class=\"kw3\">then</span> y=<span class=\"nu0\">0</span>;       <span class=\"kw1\">if</span> y=<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span><br/>     y=<span class=\"kw6\">format</span><span class=\"br0\">(</span>y, , <span class=\"nu0\">10</span><span class=\"br0\">)</span>;                           <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> y=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>y, <span class=\"st0\">'T'</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>     y=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>y, , <span class=\"sy0\">.</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span> y<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> y=<span class=\"st0\">' '</span>y;                     <span class=\"kw1\">return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>y <span class=\"sy0\">||</span> j, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>hdr: _= <span class=\"st0\">'\u2500\u2500\u2500data\u2500\u2500\u2500   num       real\u2500part      imaginary\u2500part'</span>;          <span class=\"kw1\">say</span> pad _<br/>     <span class=\"kw1\">say</span> pad  <span class=\"kw6\">translate</span><span class=\"br0\">(</span>_,  <span class=\"st0\">\" \"</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span>,  <span class=\"st0\">\" \"</span><span class=\"kw6\">xrange</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;                     <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>pi:  <span class=\"kw1\">return</span> <span class=\"nu0\">3.1415926535897932384626433832795028841971693993751058209749445923078164062862</span><br/>r2r: <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">//</span>  <span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span>               <span class=\"coMULTI\">/*reduce the radians to a unit circle. */</span></pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> fft<span class=\"br0\">(</span>vec<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> vec <span class=\"kw1\">if</span> vec.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>  evens_odds = vec.<span class=\"me1\">partition</span>.<span class=\"me1\">with_index</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>_,i<span class=\"sy0\">|</span> i.<span class=\"me1\">even</span>?<span class=\"br0\">}</span><br/>  evens, odds = evens_odds.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>even_odd<span class=\"sy0\">|</span> fft<span class=\"br0\">(</span>even_odd<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">}</span> <br/>  evens.<span class=\"me1\">zip</span><span class=\"br0\">(</span>odds<span class=\"br0\">)</span>.<span class=\"me1\">map</span>.<span class=\"me1\">with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>even, odd<span class=\"br0\">)</span>,i<span class=\"sy0\">|</span><br/>    even <span class=\"sy0\">+</span> odd <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>::E <span class=\"sy0\">**</span> <span class=\"kw4\">Complex</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>::PI <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> vec.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>fft<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"%9.6f\u00a0%+9.6fi\"</span> <span class=\"sy0\">%</span> c.<span class=\"me1\">rect</span><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 100, "block": "<pre class=\"text highlighted_source\">cnt  = 8<br/>sig  = int(log(cnt) /log(2) +0.9999)<br/>\u00a0<br/>pi    = 3.14159265<br/>real1 = 2^sig<br/>\u00a0<br/>real  = real1 -1<br/>real2 = int(real1 /  2)<br/>real4 = int(real1 /  4)<br/>real3 = real4 +real2<br/>\u00a0<br/>dim rel(real1)<br/>dim img(real1)<br/>dim cmp(real3)<br/>\u00a0<br/>for i = 0 to cnt -1<br/>    read rel(i)<br/>    read img(i)<br/>next i<br/>\u00a0<br/>data    1,0, 1,0, 1,0, 1,0, 0,0, 0,0, 0,0, 0,0<br/>\u00a0<br/>sig2 = int(sig / 2)<br/>sig1 = sig -sig2<br/>cnt1 = 2^sig1<br/>cnt2 = 2^sig2<br/>\u00a0<br/>dim v(cnt1 -1)<br/>v(0) = 0<br/>dv   = 1<br/>ptr  = cnt1<br/>\u00a0<br/>for j = 1 to sig1<br/>    hlfPtr = int(ptr / 2)<br/>    pt     = cnt1 - hlfPtr<br/>    for i = hlfPtr to pt step ptr<br/>        v(i) = v(i -hlfPtr) + dv<br/>    next i<br/>    dv = dv + dv<br/>    ptr = hlfPtr<br/>next j<br/>\u00a0<br/>k = 2 *pi /real1<br/>\u00a0<br/>for x = 0 to real4<br/>    cmp(x)         = cos(k *x)<br/>    cmp(real2 - x) = 0 - cmp(x)<br/>    cmp(real2 + x) = 0 - cmp(x)<br/>next x<br/>\u00a0<br/>print \"fft: bit reversal\"<br/>\u00a0<br/>for i = 0 to cnt1 -1<br/>    ip = i *cnt2<br/>    for j = 0 to cnt2 -1<br/>        h = ip +j<br/>        g = v(j) *cnt2 +v(i)<br/>        if g &gt;h then <br/>                temp   = rel(g)<br/>                rel(g) = rel(h)<br/>                rel(h) = temp<br/>                temp   = img(g)<br/>                img(g) = img(h)<br/>                img(h) = temp<br/>         end if<br/>    next j<br/>next i<br/>\u00a0<br/>t = 1<br/>for stage = 1 to sig<br/>    print \"  stage:- \"; stage<br/>    d = int(real2 / t)<br/>    for ii = 0 to t -1<br/>        l   = d *ii<br/>        ls  = l +real4<br/>        for i = 0 to d -1<br/>            a      = 2 *i *t +ii<br/>            b      = a +t<br/>            f1     = rel(a)<br/>            f2     = img(a)<br/>            cnt1   = cmp(l)  *rel(b)<br/>            cnt2   = cmp(ls) *img(b)<br/>            cnt3   = cmp(ls) *rel(b)<br/>            cnt4   = cmp(l)  *img(b)<br/>            rel(a) = f1 + cnt1 - cnt2<br/>            img(a) = f2 + cnt3 + cnt4<br/>            rel(b) = f1 - cnt1 + cnt2<br/>            img(b) = f2 - cnt3 - cnt4<br/>        next i<br/>    next ii<br/>    t = t +t<br/>next stage<br/>\u00a0<br/>print \"  Num   real   imag\"<br/>for i = 0 to real<br/>    if abs(rel(i)) &lt;10^-5 then rel(i) = 0<br/>    if abs(img(i)) &lt;10^-5 then img(i) = 0<br/>    print \"   \"; i;\"   \";using(\"##.#\",rel(i));\"    \";img(i)<br/>next i<br/>end</pre>"}, {"lang": "Rust", "loc": 61, "block": "<pre class=\"text highlighted_source\">extern crate num;<br/>use num::complex::Complex;<br/>use std::f64::consts::PI;<br/>\u00a0<br/>const I: Complex&lt;f64&gt; = Complex { re: 0.0, im: 1.0 };<br/>\u00a0<br/>pub fn fft(input: &amp;[Complex&lt;f64&gt;]) -&gt; Vec&lt;Complex&lt;f64&gt;&gt; {<br/>    fn fft_inner(<br/>        buf_a: &amp;mut [Complex&lt;f64&gt;],<br/>        buf_b: &amp;mut [Complex&lt;f64&gt;],<br/>        n: usize,    // total length of the input array<br/>        step: usize, // precalculated values for t<br/>    ) {<br/>        if step &gt;= n {<br/>            return;<br/>        }<br/>\u00a0<br/>        fft_inner(buf_b, buf_a, n, step * 2);<br/>        fft_inner(&amp;mut buf_b[step..], &amp;mut buf_a[step..], n, step * 2);<br/>        // create a slice for each half of buf_a:<br/>        let (left, right) = buf_a.split_at_mut(n / 2);<br/>\u00a0<br/>        for i in (0..n).step_by(step * 2) {<br/>            let t = (-I * PI * (i as f64) / (n as f64)).exp() * buf_b[i + step];<br/>            left[i / 2] = buf_b[i] + t;<br/>            right[i / 2] = buf_b[i] - t;<br/>        }<br/>    }<br/>\u00a0<br/>    // round n (length) up to a power of 2:<br/>    let n_orig = input.len();<br/>    let n = n_orig.next_power_of_two();<br/>    // copy the input into a buffer:<br/>    let mut buf_a = input.to_vec();<br/>    // right pad with zeros to a power of two:<br/>    buf_a.append(&amp;mut vec![Complex { re: 0.0, im: 0.0 }; n - n_orig]);<br/>    // alternate between buf_a and buf_b to avoid allocating a new vector each time:<br/>    let mut buf_b = buf_a.clone();<br/>    fft_inner(&amp;mut buf_a, &amp;mut buf_b, n, 1);<br/>    buf_a<br/>}<br/>\u00a0<br/>fn show(label: &amp;str, buf: &amp;[Complex&lt;f64&gt;]) {<br/>    println!(\"{}\", label);<br/>    let string = buf<br/>        .into_iter()<br/>        .map(|x| format!(\"{:.4}{:+.4}i\", x.re, x.im))<br/>        .collect::&lt;Vec&lt;_&gt;&gt;()<br/>        .join(\", \");<br/>    println!(\"{}\", string);<br/>}<br/>\u00a0<br/>fn main() {<br/>    let input: Vec&lt;_&gt; = [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]<br/>        .into_iter()<br/>        .map(|x| Complex::from(x))<br/>        .collect();<br/>    show(\"input:\", &amp;input);<br/>    let output = fft(&amp;input);<br/>    show(\"output:\", &amp;output);<br/>}</pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"br0\">{</span> Pi, cos, sin, cosh, sinh, abs <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span>re<span class=\"sy0\">:</span> Double, im<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> +<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span><span class=\"sy0\">:</span> Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re + x.<span class=\"me1\">re</span>, im + x.<span class=\"me1\">im</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> -<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span><span class=\"sy0\">:</span> Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re - x.<span class=\"me1\">re</span>, im - x.<span class=\"me1\">im</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span>  Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re <span class=\"sy0\">*</span> x, im <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span><span class=\"sy0\">:</span> Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re <span class=\"sy0\">*</span> x.<span class=\"me1\">re</span> - im <span class=\"sy0\">*</span> x.<span class=\"me1\">im</span>, re <span class=\"sy0\">*</span> x.<span class=\"me1\">im</span> + im <span class=\"sy0\">*</span> x.<span class=\"me1\">re</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> /<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span>  Complex <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>re / x, im / x<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"st0\">\"%1.3f\"</span> format re<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"st0\">\"%1.3f\"</span> format abs<span class=\"br0\">(</span>im<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, <span class=\"st0\">\"0.000\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"0.000\"</span>, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b + <span class=\"st0\">\"i\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> im <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> a + <span class=\"st0\">\" + \"</span> + b + <span class=\"st0\">\"i\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a + <span class=\"st0\">\" - \"</span> + b + <span class=\"st0\">\"i\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> exp<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Complex <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cosh<span class=\"br0\">(</span>c.<span class=\"me1\">re</span><span class=\"br0\">)</span> + sinh<span class=\"br0\">(</span>c.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Complex<span class=\"br0\">(</span>cos<span class=\"br0\">(</span>c.<span class=\"me1\">im</span><span class=\"br0\">)</span>, sin<span class=\"br0\">(</span>c.<span class=\"me1\">im</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 1, "block": "<pre class=\"scilab highlighted_source\"><a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">fft</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"co2\">'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func fft<span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    arr.<span class=\"me1\">len</span> == <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> arr<br/>\u00a0<br/>    var evn = fft<span class=\"br0\">(</span><span class=\"br0\">[</span>arr<span class=\"br0\">[</span>^arr <span class=\"sy0\">-&gt;</span> grep <span class=\"br0\">{</span> .<span class=\"me1\">is_even</span> <span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    var odd = fft<span class=\"br0\">(</span><span class=\"br0\">[</span>arr<span class=\"br0\">[</span>^arr <span class=\"sy0\">-&gt;</span> grep <span class=\"br0\">{</span> .<span class=\"me1\">is_odd</span>  <span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    var twd = <span class=\"br0\">(</span>Num.<span class=\"me1\">tau</span>.<span class=\"me1\">i</span> <span class=\"sy0\">/</span> arr.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>\u00a0<br/>    ^odd <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> odd<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span>=\u00a0::exp<span class=\"br0\">(</span>twd <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span>evn\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0odd<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>evn\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0odd<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var cycles = <span class=\"nu0\">3</span><br/>var sequence = <span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><br/>var wave = sequence.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span>\u00a0::sin<span class=\"br0\">(</span>n <span class=\"sy0\">*</span> Num.<span class=\"me1\">tau</span> <span class=\"sy0\">/</span> sequence.<span class=\"me1\">len</span> <span class=\"sy0\">*</span> cycles<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>say <span class=\"st0\">\"wave:#{wave.map{|w| '%6.3f'\u00a0% w }.join(' ')}\"</span><br/>say <span class=\"st0\">\"fft: #{fft(wave).map { '%6.3f'\u00a0% .abs }.join(' ')}\"</span></pre>"}, {"lang": "SequenceL", "loc": 18, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Complex.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>fft(x(1))\u00a0:=<br/>    let<br/>        n\u00a0:= size(x);<br/>\u00a0<br/>        top\u00a0:= fft(x[range(1,n-1,2)]);<br/>        bottom\u00a0:= fft(x[range(2,n,2)]);<br/>\u00a0<br/>        d[i]\u00a0:= makeComplex(cos(2.0*pi*i/n), -sin(2.0*pi*i/n)) foreach i within 0...(n / 2 - 1);<br/>\u00a0<br/>        z\u00a0:= complexMultiply(d, bottom);<br/>    in<br/>        x when n &lt;= 1<br/>    else<br/>        complexAdd(top,z) ++ complexSubtract(top,z);</pre>"}, {"lang": "Stata", "loc": 8, "block": "<pre class=\"text highlighted_source\">. mata<br/>: a=1,2,3,4<br/>: fft(a)<br/>             1         2         3         4<br/>    +-----------------------------------------+<br/>  1 |       10   -2 - 2i        -2   -2 + 2i  |<br/>    +-----------------------------------------+<br/>: end</pre>"}, {"lang": "SystemVerilog", "loc": 89, "block": "<pre class=\"systemverilog highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw4\">package</span> math_pkg<span class=\"sy0\">;</span><br/>  <span class=\"co1\">// Inspired by the post</span><br/>  <span class=\"co1\">// https://community.cadence.com/cadence_blogs_8/b/fv/posts/create-a-sine-wave-generator-using-systemverilog</span><br/>  <span class=\"co1\">// import functions directly from C library</span><br/>  <span class=\"co1\">//import dpi task      C Name = SV function name</span><br/>  <span class=\"kw6\">import</span> <span class=\"st0\">\"DPI\"</span> <span class=\"kw3\">pure</span> <span class=\"kw4\">function</span> <span class=\"kw5\">real</span> cos <span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> rTheta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw6\">import</span> <span class=\"st0\">\"DPI\"</span> <span class=\"kw3\">pure</span> <span class=\"kw4\">function</span> <span class=\"kw5\">real</span> sin<span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw6\">import</span> <span class=\"st0\">\"DPI\"</span> <span class=\"kw3\">pure</span> <span class=\"kw4\">function</span> <span class=\"kw5\">real</span> atan2<span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> y<span class=\"sy0\">,</span> <span class=\"kw5\">input</span> <span class=\"kw5\">real</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">endpackage</span> <span class=\"sy0\">:</span> math_pkg<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// Encapsulates the functions in a parameterized class</span><br/><span class=\"co1\">// The FFT is implemented using floating point arithmetic (systemverilog real)</span><br/><span class=\"co1\">// Complex values are represented as a real vector [1:0], the index 0 is the real part</span><br/><span class=\"co1\">// and the index 1 is the imaginary part.</span><br/><span class=\"kw4\">class</span> fft_fp <span class=\"sy0\">#</span><span class=\"br0\">(</span><br/>  <span class=\"kw5\">parameter</span> LOG2_NS <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><br/>  <span class=\"kw5\">parameter</span> NS <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span>LOG2_NS<br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw5\">static</span> <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> bit_reverse_order<span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> buffer_in<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw5\">output</span> <span class=\"kw5\">real</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">begin</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">reg</span> <span class=\"br0\">[</span>LOG2_NS<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> NS<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      <span class=\"kw5\">reg</span> <span class=\"br0\">[</span>LOG2_NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ij<span class=\"sy0\">;</span><br/>      ij <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">{</span>j<span class=\"br0\">[</span>LOG2_NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\">// Right to left streaming</span><br/>      buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer_in<span class=\"br0\">[</span>ij<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      buffer<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer_in<span class=\"br0\">[</span>ij<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span>    <br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">endfunction</span><br/>  <span class=\"co1\">// SystemVerilog FFT implementation translated from Java</span><br/>  <span class=\"kw5\">static</span> <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> transform<span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> buffer_in<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw5\">output</span> <span class=\"kw5\">real</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">begin</span><br/>    <span class=\"kw5\">static</span> <span class=\"kw5\">real</span> pi <span class=\"sy0\">=</span> math_pkg<span class=\"sy0\">::</span>atan2<span class=\"br0\">(</span><span class=\"re3\">0.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"re3\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    bit_reverse_order<span class=\"br0\">(</span>buffer_in<span class=\"sy0\">,</span> buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">int</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> N <span class=\"sy0\">&lt;=</span> NS<span class=\"sy0\">;</span> N <span class=\"sy0\">=</span> N <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NS<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> N<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">int</span> k <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>          <span class=\"kw5\">int</span> evenIndex<span class=\"sy0\">;</span><br/>          <span class=\"kw5\">int</span> oddIndex<span class=\"sy0\">;</span><br/>          <span class=\"kw5\">real</span> theta<span class=\"sy0\">;</span><br/>          <span class=\"kw5\">real</span> wr<span class=\"sy0\">,</span> wi<span class=\"sy0\">;</span><br/>          <span class=\"kw5\">real</span> zr<span class=\"sy0\">,</span> zi<span class=\"sy0\">;</span><br/>          evenIndex <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k<span class=\"sy0\">;</span><br/>          oddIndex  <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> k <span class=\"sy0\">+</span> <span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          theta     <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re3\">2.0</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span>k<span class=\"sy0\">/</span><span class=\"kw5\">real</span>'<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"co1\">// Call to the DPI C functions </span><br/>          <span class=\"co1\">// (it could be memorized to save some calls but I dont think it worthes)</span><br/>          <span class=\"co1\">// w = exp(-2j*pi*k/N);</span><br/>          wr <span class=\"sy0\">=</span> math_pkg<span class=\"sy0\">::</span>cos<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>          wi <span class=\"sy0\">=</span> math_pkg<span class=\"sy0\">::</span>sin<span class=\"br0\">(</span>theta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"co1\">// x = w * buffer[oddIndex]</span><br/>          zr <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> wr <span class=\"sy0\">-</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> wi<span class=\"sy0\">;</span><br/>          zi <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> wi <span class=\"sy0\">+</span> buffer<span class=\"br0\">[</span>oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> wr<span class=\"sy0\">;</span><br/>          <span class=\"co1\">// update oddIndex before evenIndex </span><br/>          buffer<span class=\"br0\">[</span> oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> zr<span class=\"sy0\">;</span><br/>          buffer<span class=\"br0\">[</span> oddIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> zi<span class=\"sy0\">;</span><br/>          <span class=\"co1\">// because evenIndex is in the rhs</span><br/>          buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> zr<span class=\"sy0\">;</span><br/>          buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>evenIndex<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> zi<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">end</span><br/>      <span class=\"kw4\">end</span><br/>    <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">endfunction</span><br/>  <span class=\"co1\">// Implements the inverse FFT using the following identity</span><br/>  <span class=\"co1\">// ifft(x) = conj(fft(conj(x))/NS;</span><br/>  <span class=\"kw5\">static</span> <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> invert<span class=\"br0\">(</span><span class=\"kw5\">input</span> <span class=\"kw5\">real</span> buffer_in<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw5\">output</span> <span class=\"kw5\">real</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw5\">real</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>NS<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">begin</span><br/>    <span class=\"co1\">// Conjugates the input</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NS<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer_in<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>buffer_in<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>    transform<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Conjugate and scale the output</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"kw5\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NS<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>NS<span class=\"sy0\">;</span><br/>      buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>NS<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">endclass</span><br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 38, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">constants</span><br/><span class=\"kw2\">package</span> require math::<span class=\"me1\">fourier</span><br/>\u00a0<br/>math::<span class=\"me1\">constants</span>::<span class=\"me1\">constants</span> pi<br/><span class=\"co1\"># Helper functions</span><br/><span class=\"kw1\">proc</span> wave <span class=\"br0\">{</span>samples cycles<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> pi<br/>    <span class=\"kw1\">set</span> wave <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> factor <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$pi</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cycles</span> / <span class=\"re0\">$samples</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$samples</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> wave <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sin<span class=\"br0\">(</span><span class=\"re0\">$factor</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$wave</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> printwave <span class=\"br0\">{</span>waveName <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%7.3f\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$waveName</span> wave<br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-6s\"</span> <span class=\"sy0\">$</span><span class=\"br0\">{</span>waveName<span class=\"br0\">}</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> value <span class=\"re0\">$wave</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">append</span> out <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"re0\">$format</span> <span class=\"re0\">$value</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$out</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> waveMagnitude <span class=\"br0\">{</span>wave<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> value <span class=\"re0\">$wave</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$value</span> re im<br/>\t<span class=\"kw2\">lappend</span> out <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"re0\">$re</span>, <span class=\"re0\">$im</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$out</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> wave <span class=\"br0\">[</span>wave <span class=\"nu0\">16</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>printwave wave<br/><span class=\"co1\"># Uses FFT if input length is power of 2, and a less efficient algorithm otherwise</span><br/><span class=\"kw1\">set</span> fft <span class=\"br0\">[</span>math::<span class=\"me1\">fourier</span>::<span class=\"me1\">dft</span> <span class=\"re0\">$wave</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Convert to magnitudes for printing</span><br/><span class=\"kw1\">set</span> fft2 <span class=\"br0\">[</span>waveMagnitude <span class=\"re0\">$fft</span><span class=\"br0\">]</span><br/>printwave fft2</pre>"}, {"lang": "Ursala", "loc": 10, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#import flo<br/>\u00a0<br/>f = &lt;1+0j,1+0j,1+0j,1+0j,0+0j,0+0j,0+0j,0+0j&gt;    # complex sequence of 4 1's and 4 0's<br/>\u00a0<br/>g = c..mul^*D(sqrt+ float+ length,..u_fw_dft) f  # its fft<br/>\u00a0<br/>#cast\u00a0%jLW<br/>\u00a0<br/>t = (f,g)</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>v:=GSL.ZVector(8).set(1,1,1,1);<br/>GSL.FFT(v).toList().concat(\"\\n\").println();  // in place</pre>"}]}