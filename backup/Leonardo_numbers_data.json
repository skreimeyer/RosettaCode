{"task": "Leonardo_numbers", "blocks": [{"lang": "Ada", "loc": 36, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Leonardo <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Leo<br/>     <span class=\"br0\">(</span>N     \u00a0: Natural;<br/>      Step  \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      First \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      Second\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural<br/>   <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> L <span class=\"br0\">(</span>N\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">case</span> N <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">0</span>      =&gt; <span class=\"kw1\">return</span> First;<br/>            <span class=\"kw3\">when</span> <span class=\"nu0\">1</span>      =&gt; <span class=\"kw1\">return</span> Second;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <span class=\"kw1\">return</span> <span class=\"br0\">(</span>L <span class=\"br0\">(</span>N - <span class=\"nu0\">2</span><span class=\"br0\">)</span> + L <span class=\"br0\">(</span>N - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + Step<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">end</span> L;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> L <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Leo;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"First 25 Leonardo numbers:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">24</span> <span class=\"kw1\">loop</span><br/>      Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Leo <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   New_Line;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"First 25 Leonardo numbers with L(0) = 0, L(1) = 1, \"</span> &amp;<br/>             <span class=\"st0\">\"step = 0 (fibonacci numbers):\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">24</span> <span class=\"kw1\">loop</span><br/>      Put <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>Leo <span class=\"br0\">(</span>I, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   New_Line;<br/><span class=\"kw1\">end</span> Leonardo;</pre>"}, {"lang": "ALGOL 68", "loc": 42, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># leonardo number parameters #</span><br/>    <span class=\"kw4\">MODE</span> LEONARDO <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> l0<span class=\"sy1\">,</span> l1<span class=\"sy1\">,</span> add number <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># default leonardo number parameters #</span><br/>    LEONARDO leonardo numbers <span class=\"sy1\">=</span> LEONARDO<span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># operators to allow us to specify non-default parameters #</span><br/>    <span class=\"kw4\">PRIO</span> WITHLZERO <span class=\"sy1\">=</span> 9<span class=\"sy1\">,</span> WITHLONE <span class=\"sy1\">=</span> 9<span class=\"sy1\">,</span> WITHADDNUMBER <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   WITHLZERO     <span class=\"sy1\">=</span> <span class=\"br0\">(</span> LEONARDO parameters<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> l0         <span class=\"br0\">)</span>LEONARDO<span class=\"sy1\">:</span><br/>         LEONARDO<span class=\"br0\">(</span> l0<span class=\"sy1\">,</span> l1 <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">,</span> add number <span class=\"kw6\">OF</span> parameters <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   WITHLONE      <span class=\"sy1\">=</span> <span class=\"br0\">(</span> LEONARDO parameters<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> l1         <span class=\"br0\">)</span>LEONARDO<span class=\"sy1\">:</span><br/>         LEONARDO<span class=\"br0\">(</span> l0 <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">,</span> l1<span class=\"sy1\">,</span> add number <span class=\"kw6\">OF</span> parameters <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   WITHADDNUMBER <span class=\"sy1\">=</span> <span class=\"br0\">(</span> LEONARDO parameters<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> add number <span class=\"br0\">)</span>LEONARDO<span class=\"sy1\">:</span><br/>         LEONARDO<span class=\"br0\">(</span> l0 <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">,</span> l1 <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">,</span> add number <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show the first n Leonardo numbers with the specified parameters #</span><br/>    <span class=\"kw4\">PROC</span> show <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> LEONARDO parameters <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">IF</span> n <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span><br/>            <span class=\"kw3\">INT</span> l0         <span class=\"sy1\">=</span> l0         <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span> l1         <span class=\"sy1\">=</span> l1         <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span> add number <span class=\"sy1\">=</span> add number <span class=\"kw6\">OF</span> parameters<span class=\"sy1\">;</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> l0<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> n <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">THEN</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> l1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> lp <span class=\"sy1\">:=</span> l0<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> <span class=\"kw24\">ln</span> <span class=\"sy1\">:=</span> l1<span class=\"sy1\">;</span><br/>                <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>                    <span class=\"kw3\">INT</span> next <span class=\"sy1\">=</span> <span class=\"kw24\">ln</span> <span class=\"sy1\">+</span> lp <span class=\"sy1\">+</span> add number<span class=\"sy1\">;</span><br/>                    lp <span class=\"sy1\">:=</span> <span class=\"kw24\">ln</span><span class=\"sy1\">;</span><br/>                    <span class=\"kw24\">ln</span> <span class=\"sy1\">:=</span> next<span class=\"sy1\">;</span><br/>                    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> <span class=\"kw24\">ln</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">FI</span><br/>         <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># show #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># first series #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"First 25 Leonardo numbers\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    show<span class=\"br0\">(</span> 25<span class=\"sy1\">,</span> leonardo numbers <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># second series #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"First 25 Leonardo numbers from 0, 1 with add number = 0\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    show<span class=\"br0\">(</span> 25<span class=\"sy1\">,</span> leonardo numbers WITHLZERO 0 WITHADDNUMBER 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f LEONARDO_NUMBERS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    leonardo<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"st0\">\"Leonardo\"</span><span class=\"br0\">)</span><br/>    leonardo<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"st0\">\"Fibonacci\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> leonardo<span class=\"br0\">(</span>L0,L1,step,text,  i,tmp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s numbers (%d,%d,%d):<span class=\"es0\">\\n</span>\"</span>,text,L0,L1,step<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">25</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,L0<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,L1<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>,L0<span class=\"sy3\">+</span>L1<span class=\"sy3\">+</span>step<span class=\"br0\">)</span><br/>        tmp = L0<br/>        L0 = L1<br/>        L1 = tmp <span class=\"sy3\">+</span> L1 <span class=\"sy3\">+</span> step<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\"> 10 INPUT L0<br/> 20 INPUT L1<br/> 30 INPUT ADD<br/> 40 PRINT L0;\" \";L1;<br/> 50 FOR I=3 TO 25<br/> 60 LET TEMP=L1<br/> 70 LET L1=L0+L1+ADD<br/> 80 LET L0=TEMP<br/> 90 PRINT \" \";L1;<br/>100 NEXT I</pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">REM &gt;leonardo<br/>:<br/>PRINT \"Enter values of L0, L1, and ADD, separated by commas:\"<br/>INPUT l0%, l1%, add%<br/>PRINT l0% ' l1%<br/>FOR i% = 3 TO 25<br/>  temp% = l1%<br/>  l1% += l0% + add%<br/>  l0% = temp%<br/>  PRINT l1%<br/>NEXT<br/>PRINT<br/>END</pre>"}, {"lang": "Burlesque", "loc": 5, "block": "<pre class=\"text highlighted_source\">blsq ) 1 1 1{.+\\/.+}\\/+]23!CCLm]wdsh<br/>1 1 3 5 9 15 25 41 67 109 177 287 465 753 1219 1973 3193 5167 8361 13529 21891 35421 57313 92735 150049<br/>\u00a0<br/>blsq ) 0 1 0{.+\\/.+}\\/+]23!CCLm]wdsh<br/>0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> leonardo<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span><span class=\"kw4\">int</span> b<span class=\"sy0\">,</span><span class=\"kw4\">int</span> step<span class=\"sy0\">,</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>temp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"First 25 Leonardo numbers\u00a0: <span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span>num<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>step<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttemp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>\t\t\ta <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>\t\t\tb <span class=\"sy0\">=</span> temp<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>step<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>step<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter first two Leonardo numbers and increment step\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d%d%d\"</span><span class=\"sy0\">,&amp;</span>a<span class=\"sy0\">,&amp;</span>b<span class=\"sy0\">,&amp;</span>step<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tleonardo<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>step<span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> leoN<span class=\"br0\">(</span> <span class=\"kw4\">int</span> cnt, <span class=\"kw4\">int</span> l0 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">int</span> l1 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">int</span> add <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> t<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> cnt<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> l0 <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        t <span class=\"sy1\">=</span> l0 <span class=\"sy2\">+</span> l1 <span class=\"sy2\">+</span> add<span class=\"sy4\">;</span> l0 <span class=\"sy1\">=</span> l1<span class=\"sy4\">;</span> l1 <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Leonardo Numbers: \"</span><span class=\"sy4\">;</span> leoN<span class=\"br0\">(</span> <span class=\"nu0\">25</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Fibonacci Numbers: \"</span><span class=\"sy4\">;</span> leoN<span class=\"br0\">(</span> <span class=\"nu0\">25</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 17, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Leonardo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Leonardo<span class=\"br0\">(</span>L0<span class=\"sy0\">:</span> <span class=\"nu0\">0</span>, L1<span class=\"sy0\">:</span> <span class=\"nu0\">1</span>, <span class=\"kw1\">add</span><span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Leonardo<span class=\"br0\">(</span><span class=\"kw4\">int</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">int</span> L1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">int</span> <span class=\"kw1\">add</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> L0<span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span>L0, L1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>L1, L0 <span class=\"sy0\">+</span> L1 <span class=\"sy0\">+</span> <span class=\"kw1\">add</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;;;</span><br/><span class=\"co1\">;;; leo - calculates the first n number from a leo sequence.</span><br/><span class=\"co1\">;;; The first argument n is the number of values to return. The next three arguments a, b, add are optional.</span><br/><span class=\"co1\">;;; Default values provide the \"original\" leonardo numbers as defined in the task.</span><br/><span class=\"co1\">;;; a and b are the first and second element of the leonardo sequence.</span><br/><span class=\"co1\">;;; add is the \"add number\" as defined in the task definition.</span><br/><span class=\"co1\">;;;</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> leo <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>add <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>iterate <span class=\"br0\">(</span>n foo<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> foo<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span>iterate <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first foo<span class=\"br0\">)</span> <span class=\"br0\">(</span>second foo<span class=\"br0\">)</span> add<span class=\"br0\">)</span> foo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>T       <span class=\"br0\">(</span>iterate <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> b a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Leonardo Numbers: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    leonardoNumbers<span class=\"br0\">(</span> <span class=\"nu0\">25</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci Numbers: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    leonardoNumbers<span class=\"br0\">(</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> leonardoNumbers<span class=\"br0\">(</span><span class=\"kw4\">int</span> count<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> l0<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> l1<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> add<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> t<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>count<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span>l0<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        t <span class=\"sy0\">=</span> l0 <span class=\"sy0\">+</span> l1 <span class=\"sy0\">+</span> add<span class=\"sy0\">;</span><br/>        l0 <span class=\"sy0\">=</span> l1<span class=\"sy0\">;</span><br/>        l1 <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">USING: fry io kernel math prettyprint sequences\u00a0;<br/>IN: rosetta-code.leonardo-numbers<br/>\u00a0<br/>: first25-leonardo ( vector add -- seq )<br/>    23 swap '[ dup 2 tail* sum _ + over push ] times\u00a0;<br/>\u00a0<br/>: print-leo ( seq -- ) [ pprint bl ] each nl\u00a0;<br/>\u00a0<br/>\"First 25 Leonardo numbers:\" print<br/>V{ 1 1 } 1 first25-leonardo print-leo<br/>\u00a0<br/>\"First 25 Leonardo numbers with L(0)=0, L(1)=1, add=1:\" print<br/>V{ 0 1 } 0 first25-leonardo print-leo</pre>"}, {"lang": "Fortran", "loc": 35, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> LEONARDO<span class=\"br0\">(</span>LAST,L0,L1,AF<span class=\"br0\">)</span>\t<span class=\"co1\">!Show the first LAST values of the sequence.</span><br/>       <span class=\"kw3\">INTEGER</span> LAST\t<span class=\"co1\">!Limit to show.</span><br/>       <span class=\"kw3\">INTEGER</span> L0,L1\t<span class=\"co1\">!Starting values.</span><br/>       <span class=\"kw3\">INTEGER</span> AF\t<span class=\"co1\">!The \"Add factor\" to deviate from Fibonacci numbers.</span><br/>       <span class=\"kw3\">OPTIONAL</span> AF\t<span class=\"co1\">!Indicate that this parameter may be omitted.</span><br/>       <span class=\"kw3\">INTEGER</span> EMBOLISM\t<span class=\"co1\">!The bloat to employ.</span><br/>       <span class=\"kw3\">INTEGER</span> N,LN,LNL1,LNL2\t<span class=\"co1\">!Assistants to the calculation.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">PRESENT</span><span class=\"br0\">(</span>AF<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Perhaps the last parameter has not been given.</span><br/>          EMBOLISM <span class=\"sy0\">=</span> AF\t\t\t<span class=\"co1\">!It has. Take its value.</span><br/>         <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!But if not,</span><br/>          EMBOLISM <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!This is the specified default.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Perhaps there should be some report on this?</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> LAST,L0,L1,EMBOLISM\t<span class=\"co1\">!Announce.</span><br/>    <span class=\"nu0\">1</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"The first \"</span>,I0,\t<span class=\"co1\">!The I0 format code avoids excessive spacing.</span><br/>     <span class=\"nu0\">1</span>   <span class=\"st0\">\" numbers in the Leonardo sequence defined by L(0) = \"</span>,I0,<br/>     <span class=\"nu0\">2</span>   <span class=\"st0\">\" and L(1) = \"</span>,I0,<span class=\"st0\">\" with L(n) = L(n - 1) + L(n - 2) + \"</span>,I0<span class=\"br0\">)</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LAST <span class=\"kw2\">.<span class=\"me1\">GE</span>.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> L0\t<span class=\"co1\">!In principle, LAST may be small.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LAST <span class=\"kw2\">.<span class=\"me1\">GE</span>.</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> L1\t<span class=\"co1\">!!So, suspicion rules.</span><br/>    <span class=\"nu0\">2</span>   FORMAT <span class=\"br0\">(</span>I0,<span class=\"st0\">\", \"</span>,$<span class=\"br0\">)</span>\t<span class=\"co1\">!Obviously, the $ sez \"don't finish the line\".</span><br/>        LNL1 <span class=\"sy0\">=</span> L0\t<span class=\"co1\">!Syncopation for the sequence's initial values.</span><br/>        LN <span class=\"sy0\">=</span> L1\t\t<span class=\"co1\">!Since the parameters ought not be damaged.</span><br/>        <span class=\"kw1\">DO</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>,LAST\t<span class=\"co1\">!Step away.</span><br/>          LNL2 <span class=\"sy0\">=</span> LNL1\t\t<span class=\"co1\">!Advance the two state variables one step.</span><br/>          LNL1 <span class=\"sy0\">=</span> LN\t\t<span class=\"co1\">!Ready to make a step forward.</span><br/>          LN <span class=\"sy0\">=</span> LNL1 <span class=\"sy0\">+</span> LNL2 <span class=\"sy0\">+</span> EMBOLISM\t<span class=\"co1\">!Thus.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> LN\t<span class=\"co1\">!Reveal the value. Overflow is distant...</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next step.</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Finish the line.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> LEONARDO\t<span class=\"co1\">!Only speedy for the sequential production of values.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> LEONARDO<span class=\"br0\">(</span><span class=\"nu0\">25</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The first 25 Leonardo numbers.</span><br/>      <span class=\"kw1\">CALL</span> LEONARDO<span class=\"br0\">(</span><span class=\"nu0\">25</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Deviates to give the Fibonacci sequence.</span><br/>      <span class=\"kw1\">END</span> </pre>"}, {"lang": "Go", "loc": 20, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> leonardo<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> l0<span class=\"sy1\">,</span> l1<span class=\"sy1\">,</span> add <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    leo <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    leo<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> l0<br/>    leo<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> l1<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        leo<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> leo<span class=\"sy1\">[</span><span class=\"nu2\">i</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> leo<span class=\"sy1\">[</span><span class=\"nu2\">i</span> <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy3\">+</span> add<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> leo<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The first 25 Leonardo numbers with L[0] = 1, L[1] = 1 and add number = 1 are:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>leonardo<span class=\"sy1\">(</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The first 25 Leonardo numbers with L[0] = 0, L[1] = 1 and add number = 0 are:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>leonardo<span class=\"sy1\">(</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 24, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<span class=\"sy0\">.</span>Split <span class=\"br0\">(</span>chunksOf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- LEONARDO NUMBERS -----------------------------------------------------------</span><br/><span class=\"co1\">-- L0 -&gt; L1 -&gt; Add number -&gt; Series (infinite)</span><br/>leo <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>leo l0 l1 d <span class=\"sy0\">=</span> unfoldr <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">+</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>l0<span class=\"sy0\">,</span> l1<span class=\"br0\">)</span><br/>\u00a0<br/>leonardo <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>leonardo <span class=\"sy0\">=</span> leo <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>fibonacci <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>fibonacci <span class=\"sy0\">=</span> leo <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> twoLines <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\t</span>'</span>\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> chunksOf <span class=\"nu0\">16</span><br/>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"First 25 default (1, 1, 1) Leonardo numbers:<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"sy0\">,</span> twoLines <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">25</span> leonardo<br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"First 25 of the (0, 1, 0) Leonardo numbers (= Fibonacci numbers):<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"sy0\">,</span> twoLines <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">25</span> fibonacci<br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>leo =:  <span class=\"sy0\">(</span>] , {<a class=\"__cf_email__\" data-cfemail=\"bd93fd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ + <span class=\"nu0\">_2</span>&amp;{@] + {:@]<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">_2</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"5a711a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{:@[<span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/>@SuppressWarnings<span class=\"br0\">(</span><span class=\"st0\">\"SameParameterValue\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LeonardoNumbers <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> leonardo<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> leonardo<span class=\"br0\">(</span>n, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> leonardo<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> l0, <span class=\"kw4\">int</span> l1, <span class=\"kw4\">int</span> add<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> leo <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        leo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l0<span class=\"sy0\">;</span><br/>        leo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l1<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            leo<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> leo<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> leo<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> add<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>leo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"The first 25 Leonardo numbers with L[0] = 1, L[1] = 1 and add number = 1 are:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>leonardo<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>The first 25 Leonardo numbers with L[0] = 0, L[1] = 1 and add number = 0 are:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>leonardo<span class=\"br0\">(</span><span class=\"nu0\">25</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 6, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> leoNum <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> l0<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> l1<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> add<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>add<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> p.<span class=\"me1\">push</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> p<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> p <span class=\"sy0\">:</span> p<span class=\"sy0\">,</span> <span class=\"br0\">[</span>l0<span class=\"sy0\">,</span> l1<span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>leoNum<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>leoNum<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">def Leonardo(zero; one; incr):<br/>  def leo:<br/>    if . == 0 then zero<br/>    elif . == 1 then one<br/>    else ((.-1) |leo) + ((.-2) | leo) +  incr<br/>    end;<br/>  leo;</pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">function L(n, add::Int=1, firsts::Vector=[1, 1])<br/>    l = max(maximum(n) .+ 1, length(firsts))<br/>    r = Vector{Int}(l)<br/>    r[1:length(firsts)] = firsts<br/>    for i in 3:l<br/>        r[i] = r[i - 1] + r[i - 2] + add<br/>    end<br/>    return r[n .+ 1]<br/>end<br/>\u00a0<br/># Task 1<br/>println(\"First 25 Leonardo numbers: \", join(L(0:24), \", \"))<br/>\u00a0<br/># Task 2<br/>@show L(0) L(1)<br/>\u00a0<br/># Task 4<br/>println(\"First 25 Leonardo numbers starting with [0, 1]: \", join(L(0:24, 0, [0, 1]), \", \"))</pre>"}, {"lang": "Kotlin", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun leonardo<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, l0<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, l1<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, add<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> leo <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    leo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l0<br/>    leo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l1<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> until n<span class=\"br0\">)</span> leo<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> leo<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + leo<span class=\"br0\">[</span>i - <span class=\"nu0\">2</span><span class=\"br0\">]</span> + add<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> leo<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first 25 Leonardo numbers with L[0] = 1, L[1] = 1 and add number = 1 are:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>leonardo<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The first 25 Leonardo numbers with L[0] = 0, L[1] = 1 and add number = 0 are:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>leonardo<span class=\"br0\">(</span><span class=\"nu0\">25</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 20, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> leoNums <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> L0<span class=\"sy0\">,</span> L1<span class=\"sy0\">,</span> add<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> L0<span class=\"sy0\">,</span> L1<span class=\"sy0\">,</span> add <span class=\"sy0\">=</span> L0 <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> L1 <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> add <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">local</span> lNums<span class=\"sy0\">,</span> nextNum <span class=\"sy0\">=</span> <span class=\"br0\">{</span>L0<span class=\"sy0\">,</span> L1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">while</span> <span class=\"sy0\">#</span>lNums <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">do</span><br/>    nextNum <span class=\"sy0\">=</span> lNums<span class=\"br0\">[</span><span class=\"sy0\">#</span>lNums<span class=\"br0\">]</span> <span class=\"sy0\">+</span> lNums<span class=\"br0\">[</span><span class=\"sy0\">#</span>lNums <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> add<br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>lNums<span class=\"sy0\">,</span> nextNum<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> lNums<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> show <span class=\"br0\">(</span>msg<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>msg <span class=\"sy0\">..</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>x <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>show<span class=\"br0\">(</span><span class=\"st0\">\"Leonardo numbers\"</span><span class=\"sy0\">,</span> leoNums<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>show<span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci numbers\"</span><span class=\"sy0\">,</span> leoNums<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">L[n_]\u00a0:= 2 Fibonacci[n + 1] - 1; L /@ Range[25]</pre>"}, {"lang": "Modula-2", "loc": 34, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Leonardo;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> leonardo<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>step<span class=\"sy0\">,</span>num <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>temp <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> num <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> a<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>        <span class=\"kw1\">ELSIF</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>        <span class=\"kw1\">ELSE</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>step<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>            temp <span class=\"sy0\">:=</span> a;<br/>            a <span class=\"sy0\">:=</span> b;<br/>            b <span class=\"sy0\">:=</span> temp <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> step<br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn<br/><span class=\"kw1\">END</span> leonardo;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    leonardo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>;<br/>    leonardo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Leonardo.</pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> warnings <span class=\"st_h\">'experimental::signatures'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <span class=\"st_h\">'signatures'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> leonardo <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$l0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$l1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$add</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">$l0</span><span class=\"sy0\">,</span> <span class=\"re0\">$l1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$l1</span><span class=\"sy0\">,</span> <span class=\"re0\">$l0</span><span class=\"sy0\">+</span><span class=\"re0\">$l1</span><span class=\"sy0\">+</span><span class=\"re0\">$add</span><span class=\"br0\">)</span>  <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$l0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@L</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> leonardo<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">24</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Leonardo[1,1,1]: @L<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@F</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> leonardo<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">24</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Leonardo[0,1,0]: @F<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> \ud835\udc73 <span class=\"br0\">(</span> $\ud835\udc73<span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> $\ud835\udc73<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> $\ud835\udc73add <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> $\ud835\udc73<span class=\"nu0\">0</span><span class=\"sy0\">,</span> $\ud835\udc73<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"re0\">$^n2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$^n1</span> <span class=\"sy0\">+</span> $\ud835\udc73add <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Part 1</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The first 25 Leonardo numbers:\"</span><span class=\"sy0\">;</span><br/>put \ud835\udc73<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Part 2</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>The first 25 numbers using \ud835\udc730 of 0, \ud835\udc731 of 1, and adder of 0:\"</span><span class=\"sy0\">;</span><br/>put \ud835\udc73<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de leo (A B C)<br/>   (default A 1  B 1  C 1)<br/>   (make<br/>      (do 25<br/>         (inc<br/>            'B<br/>            (+ (link (swap 'A B)) C) ) ) ) )<br/>\u00a0<br/>(println 'Leonardo (leo))<br/>(println 'Fibonacci (leo 0 1 0))</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/>#N <span class=\"sy0\">=</span> <span class=\"nu0\">25</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> leon_R<span class=\"br0\">(</span>a.i, b.i, s.i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n.i <span class=\"sy0\">=</span> #N<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>    <span class=\"kw1\">ProcedureReturn</span> leon_R<span class=\"br0\">(</span>b, a <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> s, s, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span>  <br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Define</span> r$<br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter first two Leonardo numbers and increment step (separated by space)\u00a0: \"</span><span class=\"br0\">)</span><br/>  r$ <span class=\"sy0\">=</span> <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"First \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>#N<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" Leonardo numbers\u00a0: \"</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>r$, <span class=\"nu0\">1</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>        <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>r$, <span class=\"nu0\">2</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  leon_R<span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>r$, <span class=\"nu0\">1</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>         <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>r$, <span class=\"nu0\">2</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,           <br/>         <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>r$, <span class=\"nu0\">3</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  r$ <span class=\"sy0\">=</span> <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> Leonardo<span class=\"br0\">(</span>L_Zero<span class=\"sy0\">,</span> L_One<span class=\"sy0\">,</span> Add<span class=\"sy0\">,</span> Amount<span class=\"br0\">)</span>:<br/>    terms <span class=\"sy0\">=</span> <span class=\"br0\">[</span>L_Zero<span class=\"sy0\">,</span>L_One<span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>terms<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> Amount:<br/>        <span class=\"kw3\">new</span> <span class=\"sy0\">=</span> terms<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + terms<span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <span class=\"kw3\">new</span> +<span class=\"sy0\">=</span> Add<br/>        terms.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">new</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> terms<br/>\u00a0<br/>out <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"First 25 Leonardo numbers:\"</span><br/><span class=\"kw1\">for</span> term <span class=\"kw1\">in</span> Leonardo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>:<br/>    out +<span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><br/><span class=\"kw1\">print</span> out<br/>\u00a0<br/>out <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Leonardo numbers with fibonacci parameters:\"</span><br/><span class=\"kw1\">for</span> term <span class=\"kw1\">in</span> Leonardo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>:<br/>    out +<span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>term<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><br/><span class=\"kw1\">print</span> out<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (Leonardo n #:L0 (L0 1) #:L1 (L1 1) #:1+ (1+ 1))<br/>  (cond [(= n 0) L0]<br/>        [(= n 1) L1]<br/>        [else<br/>         (let inr ((n (- n 2)) (L_n-2 L0) (L_n-1 L1))<br/>           (let ((L_n (+ L_n-1 L_n-2 1+)))<br/>             (if (zero? n) L_n (inr (sub1 n) L_n-1 L_n))))]))<br/>\u00a0<br/>(module+ main<br/>  (map Leonardo (range 25))<br/>  (map (curry Leonardo #:L0 0 #:L1 1 #:1+ 0) (range 25)))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal? (Leonardo 0) 1)<br/>  (check-equal? (Leonardo 1) 1)<br/>  (check-equal? (Leonardo 2) 3)<br/>  (check-equal? (Leonardo 3) 5))</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm computes Leonardo numbers, allowing the specification of L(0), L(1), and ADD#*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">500</span>                               <span class=\"coMULTI\">/*just in case the user gets ka-razy.  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>                                             <span class=\"coMULTI\">/*define the default for the  @. array.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N L0 L1 a# <span class=\"sy0\">.</span>                           <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>  N ==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  N ==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>    N= <span class=\"nu0\">25</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> L0<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">&amp;</span> L0<span class=\"sy0\">\\</span>==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  @<span class=\"sy0\">.</span>0= L0             <span class=\"coMULTI\">/*Was     \"         \"   \"   \"   value. */</span><br/><span class=\"kw1\">if</span> L1<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">&amp;</span> L1<span class=\"sy0\">\\</span>==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  @<span class=\"sy0\">.</span>1= L1             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> a#<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">&amp;</span> a#<span class=\"sy0\">\\</span>==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  @<span class=\"sy0\">.</span>a= a#             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The first '</span>   N   <span class=\"st0\">\" Leonardo numbers are:\"</span>  <span class=\"coMULTI\">/*display a title for the output series*/</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>0<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span> <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>1<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'using '</span>     @<span class=\"sy0\">.</span>0     <span class=\"st0\">\" for L(0)\"</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>0<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span> <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>1<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'using '</span>     @<span class=\"sy0\">.</span>1     <span class=\"st0\">\" for L(1)\"</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>a<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>            <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'using '</span>     @<span class=\"sy0\">.</span>a     <span class=\"st0\">\" for the  add  number\"</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*display blank line before the output.*/</span><br/>$=                                               <span class=\"coMULTI\">/*initialize the output line to \"null\".*/</span><br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N                       <span class=\"coMULTI\">/*construct a list of Leonardo numbers.*/</span><br/>             <span class=\"kw1\">if</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <a class=\"__cf_email__\" data-cfemail=\"6a10572a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j                  <span class=\"coMULTI\">/*for the 1st two numbers, use the fiat*/</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>                     <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7 otherwise, compute the Leonardo #*/</span><br/>                          <a class=\"__cf_email__\" data-cfemail=\"217e1c61\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>0                  <span class=\"coMULTI\">/*save the old primary Leonardo number.*/</span><br/>                          @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"4b7b760b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1                <span class=\"coMULTI\">/*store the new primary number in old. */</span><br/>                          @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"89b8b4c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>0  +  _  +  @<span class=\"sy0\">.</span>a  <span class=\"coMULTI\">/*compute the next Leonardo number.    */</span><br/>                          <a class=\"__cf_email__\" data-cfemail=\"2d57106d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1                  <span class=\"coMULTI\">/*store the next Leonardo number in Z. */</span><br/>                          <span class=\"kw3\">end</span>                    <span class=\"coMULTI\">/* [\u2191]  only 2 Leonardo #s are stored. */</span><br/>             $=$ z                               <span class=\"coMULTI\">/*append the just computed # to $ list.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                         <span class=\"coMULTI\">/* [\u2193]  elide the leading blank in  $. */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>                                     <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Leanardo numbers<br/>\u00a0<br/>n0 = 1<br/>n1 = 1<br/>add = 1<br/>see \"First 25 Leonardo numbers:\" + nl<br/>leonardo()<br/>n0 = 1<br/>n1 = 1<br/>add = 0<br/>see \"First 25 Leonardo numbers with L(0) = 0, L(1) = 1, step = 0 (fibonacci numbers):\" + nl<br/>see \"\" + add + \" \"<br/>leonardo()<br/>\u00a0<br/>func leonardo()<br/>        see \"\" + n0 + \" \" + n1<br/>        for i=3 to 25<br/>              temp=n1<br/>              n1=n0+n1+add<br/>              n0=temp<br/>             see \" \"+ n1<br/>        next <br/>        see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> leonardo<span class=\"br0\">(</span>l0=<span class=\"nu0\">1</span>, l1=<span class=\"nu0\">1</span>, add=<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> to_enum<span class=\"br0\">(</span>__method__,l0,l1,add<span class=\"br0\">)</span> <span class=\"kw1\">unless</span> block_given?<br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span>  <br/>    <span class=\"kw1\">yield</span> l0<br/>    l0, l1 = l1, l0<span class=\"sy0\">+</span>l1<span class=\"sy0\">+</span>add<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> leonardo.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> leonardo<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"<br/>#mem execute(\"CREATE TABLE lno (name,L0,L1,ad)\")<br/>#mem execute(\"INSERT INTO lno VALUES('Leonardo',1,1,1),('Fibonacci',0,1,0);\")<br/>#mem execute(\"SELECT * FROM lno\")<br/>for j = 1 to 2<br/>#row  = #mem #nextrow()<br/>name$ = #row name$()<br/>L0    = #row L0()<br/>L1    = #row L1()<br/>ad    = #row ad()<br/>print\u00a0:print name$;\" add=\";ad\u00a0:print\" \";L0;\" \";L1;\" \";<br/>for i = 3 to 25<br/>  temp  = L1<br/>  L1    = L0 + L1 + ad<br/>  L0    = temp<br/>  print L1;\" \";<br/>next i<br/>next j<br/>end</pre>"}, {"lang": "Scala", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> leo<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int, n1<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, n2<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, addnum<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> n1<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> n2<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> n <span class=\"sy0\">=&gt;</span> leo<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, n1, n2, addnum<span class=\"br0\">)</span> + leo<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span>, n1, n2, addnum<span class=\"br0\">)</span> + addnum<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"The first 25 Leonardo Numbers:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span> until <span class=\"nu0\">25</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span> leo<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>The first 25 Fibonacci Numbers:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span> until <span class=\"nu0\">25</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span> leo<span class=\"br0\">(</span>n, n1<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, n2<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, addnum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func \ud835\udc73<span class=\"br0\">(</span>n, \ud835\udc73<span class=\"nu0\">0</span> = <span class=\"nu0\">1</span>, \ud835\udc73<span class=\"nu0\">1</span> = <span class=\"nu0\">1</span>, \ud835\udc73add = <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span>\ud835\udc73<span class=\"nu0\">0</span>, \ud835\udc73<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"br0\">(</span>\ud835\udc73<span class=\"nu0\">1</span>, \ud835\udc73<span class=\"nu0\">0</span> <span class=\"sy0\">+</span> \ud835\udc73<span class=\"nu0\">1</span> <span class=\"sy0\">+</span> \ud835\udc73add<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">*</span> n<br/>    <span class=\"kw2\">return</span> \ud835\udc73<span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"The first 25 Leonardo numbers:\"</span><br/>say <span class=\"nu0\">25</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> \ud835\udc73<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>The first 25 numbers using \ud835\udc730 of 0, \ud835\udc731 of 1, and adder of 0:\"</span><br/>say <span class=\"nu0\">25</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> \ud835\udc73<span class=\"br0\">(</span>_, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> LeonardoNumbers()<br/><span class=\"kw4\">Dim</span> L, MyString <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"First 25 Leonardo numbers\u00a0:\"</span><br/>    L = Leo_Numbers(25, 1, 1, 1)<br/>    MyString = Join(L, <span class=\"st0\">\"; \"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> MyString<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"First 25 Leonardo numbers from 0, 1 with add number = 0\"</span><br/>    L = Leo_Numbers(25, 0, 1, 0)<br/>    MyString = Join(L, <span class=\"st0\">\"; \"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> MyString<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"If the first prarameter is too small\u00a0:\"</span><br/>    L = Leo_Numbers(1, 0, 1, 0)<br/>    MyString = Join(L, <span class=\"st0\">\"; \"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> MyString<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> Leo_Numbers(HowMany <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, L_0 <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, L_1 <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Add_Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>)<br/><span class=\"kw4\">Dim</span> N <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Ltemp<br/>\u00a0<br/>    <span class=\"kw3\">If</span> HowMany &gt; 1 <span class=\"kw3\">Then</span><br/>        <span class=\"kw4\">ReDim</span> Ltemp(HowMany - 1)<br/>        Ltemp(0) = L_0: Ltemp(1) = L_1<br/>        <span class=\"kw3\">For</span> N = 2 <span class=\"kw3\">To</span> HowMany - 1<br/>             Ltemp(N) = Ltemp(N - 1) + Ltemp(N - 2) + Add_Nb<br/>        <span class=\"kw3\">Next</span> N<br/>    <span class=\"kw3\">Else</span><br/>        <span class=\"kw4\">ReDim</span> Ltemp(0)<br/>        Ltemp(0) = <span class=\"st0\">\"The first parameter is too small\"</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    Leo_Numbers = Ltemp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn leonardoNumber(n, n1=1,n2=1,addnum=1){<br/>   if(n==0) return(n1);<br/>   if(n==1) return(n2);<br/>   self.fcn(n-1,n1,n2,addnum) + self.fcn(n-2,n1,n2,addnum) + addnum<br/>}</pre>"}]}