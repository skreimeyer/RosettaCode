{"task": "Program_termination", "blocks": [{"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Task_Identification</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Task_Identification</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Main <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- Create as many task objects as your program needs</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- whatever logic is required in your Main procedure</span><br/>   <span class=\"kw1\">if</span> some_condition <span class=\"kw1\">then</span><br/>      Abort_Task <span class=\"br0\">(</span>Current_Task<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> Main;</pre>"}, {"lang": "Aime", "loc": 15, "block": "<pre class=\"text highlighted_source\">void<br/>f1(integer a)<br/>{<br/>    if (a) {<br/>\texit(1);<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    f1(3);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 3, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">IF</span> problem <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>   stop<br/><span class=\"kw2\">FI</span></pre>"}, {"lang": "ALGOL W", "loc": 1, "block": "<pre class=\"text highlighted_source\">if anErrorOccured then assert( false );</pre>"}, {"lang": "AppleScript", "loc": 3, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\t<span class=\"kw3\">If</span> problem <span class=\"kw3\">then</span> <span class=\"kw3\">return</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span></pre>"}, {"lang": "AutoHotkey", "loc": 2, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"kw1\">If</span> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "AutoIt", "loc": 3, "block": "<pre class=\"autoit highlighted_source\"><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> problem <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>  <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Exit</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Endif</span></a></pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span>problem<span class=\"br0\">)</span>exit <span class=\"nu0\">1</span></pre>"}, {"lang": "Axe", "loc": 1, "block": "<pre class=\"text highlighted_source\">Return\u02b3</pre>"}, {"lang": "BASIC", "loc": 3, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">IF</span> problem <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>   <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span></pre>"}, {"lang": "Batch File", "loc": 1, "block": "<pre class=\"dos highlighted_source\"><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> condition <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a></pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">      IF condition% THEN QUIT</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"287768\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"coMULTI\">/* More \"natural\" way of ending the program: finish all work and return<br/>   from main() */</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/* work work work */</span><br/>     ...<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* the return value is the exit code. see below */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>problem<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>exit_code<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"coMULTI\">/* On unix, exit code 0 indicates success, but other OSes may follow<br/>     different conventions.  It may be more portable to use symbols<br/>     EXIT_SUCCESS and EXIT_FAILURE; it all depends on what meaning<br/>     of codes are agreed upon.<br/>  */</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"coMULTI\">/* More \"natural\" way of ending the program: finish all work and return<br/>   from main() */</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/* work work work */</span><br/>     ...<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* the return value is the exit code. see below */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>problem<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>exit_code<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"coMULTI\">/* On unix, exit code 0 indicates success, but other OSes may follow<br/>     different conventions.  It may be more portable to use symbols<br/>     EXIT_SUCCESS and EXIT_FAILURE; it all depends on what meaning<br/>     of codes are agreed upon.<br/>  */</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 6, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> problem_occured<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"kw2\">EXIT_FAILURE</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 4, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   Environment<span class=\"sy0\">.</span><span class=\"me1\">Exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> problem<br/>   <span class=\"br0\">(</span><span class=\"sy0\">.</span> System exit integerErrorCode<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">;conventionally, error code 0 is the code for \"OK\",</span><br/>   <span class=\"co1\">; while anything else is an actual problem</span><br/>   <span class=\"co1\">;optionally: (-&gt; Runtime (. getRuntime) (. exit integerErrorCode))</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "COBOL", "loc": 3, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw1\">IF</span> problem<br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><br/>END-<span class=\"kw1\">IF</span></pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> terminate <span class=\"br0\">(</span>status<span class=\"br0\">)</span><br/>  #+sbcl     <span class=\"br0\">(</span>           sb-ext<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      <span class=\"sy0\">:</span><span class=\"me1\">unix-status</span> status<span class=\"br0\">)</span>    <span class=\"co1\">; SBCL</span><br/>  #+ccl      <span class=\"br0\">(</span>              ccl<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      status<span class=\"br0\">)</span>                 <span class=\"co1\">; Clozure CL</span><br/>  #+clisp    <span class=\"br0\">(</span>              ext<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      status<span class=\"br0\">)</span>                 <span class=\"co1\">; GNU CLISP</span><br/>  #+cmu      <span class=\"br0\">(</span>             unix<span class=\"sy0\">:</span><span class=\"me1\">unix-exit</span> status<span class=\"br0\">)</span>                 <span class=\"co1\">; CMUCL</span><br/>  #+ecl      <span class=\"br0\">(</span>              ext<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      status<span class=\"br0\">)</span>                 <span class=\"co1\">; ECL</span><br/>  #+abcl     <span class=\"br0\">(</span>              ext<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      <span class=\"sy0\">:</span><span class=\"me1\">status</span> status<span class=\"br0\">)</span>         <span class=\"co1\">; Armed Bear CL</span><br/>  #+allegro  <span class=\"br0\">(</span>             excl<span class=\"sy0\">:</span><span class=\"me1\">exit</span>      status <span class=\"sy0\">:</span><span class=\"me1\">quiet</span> t<span class=\"br0\">)</span>        <span class=\"co1\">; Allegro CL</span><br/>  #+gcl      <span class=\"br0\">(</span>common-lisp-user<span class=\"sy0\">::</span><span class=\"me0\">bye</span>       status<span class=\"br0\">)</span>                 <span class=\"co1\">; GCL</span><br/>  #+ecl      <span class=\"br0\">(</span>              ext<span class=\"sy0\">:</span><span class=\"me1\">quit</span>      status<span class=\"br0\">)</span>                 <span class=\"co1\">; ECL</span><br/>  <span class=\"br0\">(</span>cl-user<span class=\"sy0\">::</span><span class=\"me0\">quit</span><span class=\"br0\">)</span><span class=\"br0\">)</span>           <span class=\"co1\">; Many implementations put QUIT in the sandbox CL-USER package.</span></pre>"}, {"lang": "Computer/zero Assembly", "loc": 53, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdlib</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"foo at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"bar at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> spam<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"spam at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> baz<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// x can't be 0.</span><br/>\u00a0<br/>    <span class=\"co1\">// In release mode this becomes a halt, and it's sometimes</span><br/>    <span class=\"co1\">// necessary. If you remove this the compiler gives:</span><br/>    <span class=\"co1\">// Error: function test.notInfinite no return exp;</span><br/>    <span class=\"co1\">//    or assert(0); at end of function</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// This generates an error, that is not meant to be caught.</span><br/><span class=\"co1\">// Objects are not guaranteed to be finalized.</span><br/><span class=\"kw4\">int</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Error</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"sy0\">~</span><span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// This module destructor is never called if</span><br/>    <span class=\"co1\">// the program calls the exit function.</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Never called\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>foo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>bar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>spam<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//abort(); // Also this is allowed. Will not call foo, bar, spam.</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 53, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdlib</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"foo at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"bar at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw4\">void</span> spam<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"spam at exit\"</span>.<span class=\"me1\">puts</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> baz<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// x can't be 0.</span><br/>\u00a0<br/>    <span class=\"co1\">// In release mode this becomes a halt, and it's sometimes</span><br/>    <span class=\"co1\">// necessary. If you remove this the compiler gives:</span><br/>    <span class=\"co1\">// Error: function test.notInfinite no return exp;</span><br/>    <span class=\"co1\">//    or assert(0); at end of function</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// This generates an error, that is not meant to be caught.</span><br/><span class=\"co1\">// Objects are not guaranteed to be finalized.</span><br/><span class=\"kw4\">int</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Error</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"sy0\">~</span><span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// This module destructor is never called if</span><br/>    <span class=\"co1\">// the program calls the exit function.</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Never called\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>foo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>bar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    atexit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>spam<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//abort(); // Also this is allowed. Will not call foo, bar, spam.</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi/Pascal", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">System<span class=\"sy1\">.</span><span class=\"me1\">Halt</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">exitAtTop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EDSAC order code", "loc": 1, "block": "<pre class=\"text highlighted_source\">if rcode\u00a0!=\u00a0:ok, do: System.halt(1)</pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre class=\"text highlighted_source\">if rcode\u00a0!=\u00a0:ok, do: System.halt(1)</pre>"}, {"lang": "Emacs Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> something<br/>    <span class=\"br0\">(</span>kill-emacs<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 3, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"kw1\">if</span> problem <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">debug @<br/>if   QUIT  \\ quit back to the interpreter<br/>else BYE   \\ exit forth environment completely (e.g. end of a Forth shell script)<br/>then</pre>"}, {"lang": "Fortran", "loc": 3, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">IF</span> <span class=\"br0\">(</span>condition<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"br0\">[</span>message<span class=\"br0\">]</span> <br/><span class=\"co1\">! message is optional and is a character string.</span><br/><span class=\"co1\">! If present, the message is output to the standard output device.</span></pre>"}, {"lang": "FreeBASIC", "loc": 11, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'FB 1.05.0 Win64 'endprog.bas'</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> isError <span class=\"kw1\">As</span> Boolean = <span class=\"kw1\">True</span><br/><span class=\"kw1\">If</span> isError <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">End</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"co1\">' The following code won't be executed</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">if</span> condition <span class=\"kw1\">then</span><br/>    Environment.<span class=\"me1\">Exit</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Gambas", "loc": 11, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/do\"><span class=\"kw1\">Do</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1000</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/break\"><span class=\"kw1\">Break</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siCount<br/><a href=\"http://gambasdoc.org/help/lang/loop\"><span class=\"kw1\">Loop</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/me\"><span class=\"kw1\">Me</span></a>.<a href=\"http://gambasdoc.org/help/lang/close\"><span class=\"kw1\">Close</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Gema", "loc": 1, "block": "<pre class=\"text highlighted_source\">Star <a class=\"__cf_email__\" data-cfemail=\"5f0b2d3a34621f3a2d2d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{found a Star Trek reference\\n}@abort</pre>"}, {"lang": "Gnuplot", "loc": 4, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"re0\">problem=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">exit</span> gnuplot<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 5, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> problem <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <span class=\"kw1\">IF</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckstop.shtml\"><span class=\"kw3\">STOP</span></a></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span>intExitCode<span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Exit<br/>\u00a0<br/>when problem <span class=\"kw1\">do</span><br/>    exitWith ExitSuccess                    <span class=\"co1\">-- success</span><br/>    exitWith <span class=\"br0\">(</span>ExitFailure integerErrorCode<span class=\"br0\">)</span> <span class=\"co1\">-- some failure with code</span><br/>    exitSuccess                             <span class=\"co1\">-- success; in GHC 6.10+</span><br/>    exitFailure                             <span class=\"co1\">-- generic failure</span></pre>"}, {"lang": "HicEst", "loc": 1, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">ALARM</span><span class=\"br0\">(</span> <span class=\"nu0\">999</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw4\">exit</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>          <span class=\"co1\"># terminates the program setting an exit code of i</span><br/><span class=\"kw4\">stop</span><span class=\"br0\">(</span>x1<span class=\"sy1\">,</span>x2<span class=\"sy1\">,..</span><span class=\"br0\">)</span>   <span class=\"co1\"># terminates the program writing out x1,..; if any xi is a file writing switches to that file</span><br/><span class=\"kw4\">runerr</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span>x<span class=\"br0\">)</span>      <span class=\"co1\"># terminates the program with run time error 'i' for value 'x'</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\"><span class=\"nu0\">2</span>!:<span class=\"nu0\">55</span>^:] condition</pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span>problem<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span>integerErrorCode<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>   <span class=\"co1\">//conventionally, error code 0 is the code for \"OK\",</span><br/>   <span class=\"co1\">// while anything else is an actual problem</span><br/>   <span class=\"co1\">//optionally: Runtime.getRuntime().exit(integerErrorCode);</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some_condition<span class=\"br0\">)</span> <br/>    quit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">$ jq -n '\"Hello\", if 1 then error else 2 end'<br/>\"Hello\"</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>quit() # terminates program normally, with its child processes. See also exit(0).<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> problem <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span> System.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// non-zero code passed to OS to indicate a problem</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Program terminating normally\"</span><span class=\"br0\">)</span>  <span class=\"co1\">// this line will not be executed</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 12, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>//[<br/>\u00a0<br/>handle =&gt; {<br/>\tstdoutnl('The end is here')<br/>}<br/>\u00a0<br/>stdoutnl('Starting execution')<br/>\u00a0<br/>abort<br/>\u00a0<br/>stdoutnl('Ending execution')</pre>"}, {"lang": "Liberty BASIC", "loc": 1, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">if</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Logo", "loc": 6, "block": "<pre class=\"text highlighted_source\">bye  \u00a0; exits to shell<br/>\u00a0<br/>throw \"toplevel \u00a0; exits to interactive prompt<br/>\u00a0<br/>pause     \u00a0; escapes to interactive prompt for debugging<br/>continue  \u00a0; resumes after a PAUSE</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">if</span> some_condition <span class=\"kw1\">then</span> <br/>    <span class=\"kw3\">os.exit</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 4, "block": "<pre class=\"text highlighted_source\">beginning<br/>define(`problem',1)<br/>ifelse(problem,1,`m4exit(1)')<br/>ending</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">If[problem, Abort[]];</pre>"}, {"lang": "MATLAB", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">if</span> condition<br/>    <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">/* Basically, it's simply quit() */<br/>\u00a0<br/>block([ans], loop, if (ans: read(\"Really quit\u00a0? (y, n)\")) = 'y<br/>                   then quit()<br/>                   elseif ans = 'n then (print(\"Nice choice!\"), 'done)<br/>                   else (print(\"I dont' understand...\"), go(loop)));</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u0418\u041f0\tx=0\t04\t\u0421/\u041f\t...</pre>"}, {"lang": "Nemerle", "loc": 4, "block": "<pre class=\"text highlighted_source\">using System.Environment<br/>...<br/>    when (problem) Exit(1)<br/>...</pre>"}, {"lang": "NetRexx", "loc": 10, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>extremePrejudice = <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> extremePrejudice <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">exit</span> extremePrejudice<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 2, "block": "<pre class=\"text highlighted_source\">if problem:<br/>  quit(QuitFailure)</pre>"}, {"lang": "Oberon-2", "loc": 5, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/>  <span class=\"kw1\">IF</span> problem <span class=\"kw1\">THEN</span><br/>    <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  Runtime<span class=\"sy0\">-&gt;</span><span class=\"me1\">Exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">if</span> problem <span class=\"kw1\">then</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexit\"><span class=\"kw3\">exit</span></a> integerErrorCode<span class=\"sy0\">;</span><br/>  <span class=\"co1\">(* conventionally, error code 0 is the code for \"OK\",<br/>     while anything else is an actual problem *)</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">import: os<br/>\u00a0<br/>some_condition ifTrue: [ 0 OS.exit ]</pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">if</span> Problem <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span>stuff<span class=\"sy0\">,</span> <span class=\"kw1\">quit</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$problem</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> integerErrorCode<span class=\"sy0\">;</span><br/>    <span class=\"co1\"># conventionally, error code 0 is the code for \"OK\"</span><br/>    <span class=\"co1\">#  (you can also omit the argument in this case)</span><br/>    <span class=\"co1\"># while anything else is an actual problem</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">if</span> <span class=\"re0\">$problem</span> <span class=\"br0\">{</span> exit <span class=\"re0\">$error</span><span class=\"sy0\">-</span>code <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">if error_code!=NO_ERROR then<br/>    abort(0)<br/>end if</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span><br/>    <a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(push '*Bye '(prinl \"Goodbye world!\"))<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 2, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">STOP</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* terminates the entire program */</span><br/>      <span class=\"coMULTI\">/* PL/I does any required cleanup, such as closing files. */</span></pre>"}, {"lang": "Pop11", "loc": 3, "block": "<pre class=\"text highlighted_source\">if condition then<br/>    sysexit();<br/>endif;</pre>"}, {"lang": "PostScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">condition {stop} if</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">if</span> <span class=\"br0\">(</span>somecondition<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    exit<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\"><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">halt</span></a><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> problem <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">End</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/><span class=\"kw1\">if</span> problem:<br/>    <span class=\"kw3\">sys</span>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">if(problem) q(status=10)</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(run-stuff)<br/>(when (something-bad-happened) (exit 1))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw2\">if</span> <span class=\"kw3\">error?</span> <span class=\"kw2\">try</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">quit</span><span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">problem? [ bye ] ifTrue</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program showing five ways to perform a REXX program termination. */</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u25001st way\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u25002nd way\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">exit</span>  <span class=\"br0\">(</span>expression<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*Note: the \"expression\" doesn't need parentheses*/</span><br/>                       <span class=\"coMULTI\">/*\"expression\"  is any REXX expression.          */</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u25003rd way\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">return</span>                 <span class=\"coMULTI\">/*which returns to this program's invoker.  If   */</span><br/>                       <span class=\"coMULTI\">/*this is the main body  (and not a subroutine), */</span><br/>                       <span class=\"coMULTI\">/*the REXX interpreter terminates the program.   */</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u25004th way\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span>expression<span class=\"br0\">)</span>    <span class=\"coMULTI\">/* [See the note above concerning parentheses.]  */</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u25005th way\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>    <span class=\"coMULTI\">/*control*/</span><br/>    <span class=\"coMULTI\">/*   \u2502   */</span>        <span class=\"coMULTI\">/*if there is no EXIT and program control \"falls */</span><br/>    <span class=\"coMULTI\">/*   \u2502   */</span>        <span class=\"coMULTI\">/*through\" to the \"bottom\" (end) of the program, */</span><br/>    <span class=\"coMULTI\">/*   \u2502   */</span>        <span class=\"coMULTI\">/*an   EXIT   is simulated and the program is    */</span><br/>    <span class=\"coMULTI\">/*   \u2502   */</span>        <span class=\"coMULTI\">/*terminated.                                    */</span><br/>    <span class=\"coMULTI\">/*   \u2193   */</span><br/>    <span class=\"coMULTI\">/* e-o-f */</span>        <span class=\"coMULTI\">/* e-o-f   =   end-of-file.                      */</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for n = 1 to 10<br/>    see n + nl<br/>    if n = 5 exit ok<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">if</span> problem<br/>  <span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># or</span><br/><span class=\"kw1\">if</span> problem<br/>  abort   <span class=\"co1\"># equivalent to exit(1)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">if whatever then end</pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"The program is running\");<br/>    return;<br/>    println!(\"This line won't be printed\");<br/>}</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// sys.exit returns type \"Nothing\"</span><br/>  sys.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// conventionally, error code 0 is the code for \"OK\",</span><br/>  <span class=\"co1\">// while anything else is an actual problem</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">problem ifTrue: [exit: 1].</pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">if</span> problem<br/>  <span class=\"br0\">(</span>exit<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; exit successfully</span></pre>"}, {"lang": "Seed7", "loc": 9, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    # whatever logic is required in your main procedure<br/>    if some_condition then<br/>      exit(PROGRAM);<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>problem<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Sys.<span class=\"kw3\">exit</span><span class=\"br0\">(</span>code<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 1, "block": "<pre class=\"text highlighted_source\">IF terminallyIll THEN terminate_program;</pre>"}, {"lang": "SNOBOL4", "loc": 1, "block": "<pre class=\"text highlighted_source\">        &amp;code = condition errlevel\u00a0:s(end)</pre>"}, {"lang": "SSEM", "loc": 2, "block": "<pre class=\"text highlighted_source\">00000000000000110000000000000000   Test<br/>00000000000001110000000000000000   Stop</pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">if problem then<br/>  OS.Process.exit OS.Process.failure<br/>  (* valid status codes include OS.Process.success and OS.Process.failure *)<br/>else<br/>  ()</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$problem</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Print a \u201cfriendly\u201d message...</span><br/>    <span class=\"kw2\">puts</span> stderr <span class=\"st0\">\"some problem occurred\"</span><br/>    <span class=\"co1\"># Indicate to the caller of the program that there was a problem</span><br/>    <span class=\"kw1\">exit</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre>If 1\nStop\n</pre>"}, {"lang": "TI-89 BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">Prgm<br/>  ...<br/>  Stop<br/>  ...<br/>EndPrgm</pre>"}, {"lang": "TUSCRIPT", "loc": 4, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>IF (condition==1) STOP<br/>-&gt; execution stops and message:<br/>IF (condition==2) ERROR/STOP \"condition \",condition, \" Execution STOP \"</pre>"}, {"lang": "Unlambda", "loc": 1, "block": "<pre class=\"text highlighted_source\">`ei</pre>"}, {"lang": "UNIX Shell", "loc": 8, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/sh</span><br/>\u00a0<br/><span class=\"re2\">a</span>=<span class=\"st_h\">'1'</span><br/><span class=\"re2\">b</span>=<span class=\"st_h\">'1'</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$a</span>\"</span> <span class=\"re5\">-eq</span> <span class=\"st0\">\"<span class=\"es2\">$b</span>\"</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>  <span class=\"kw3\">exit</span> <span class=\"nu0\">239</span>    <span class=\"co0\"># Unexpected error</span><br/><span class=\"kw1\">fi</span><br/><span class=\"kw3\">exit</span> <span class=\"nu0\">0</span>    <span class=\"co0\"># Program terminated normally</span></pre>"}, {"lang": "Ursa", "loc": 1, "block": "<pre class=\"text highlighted_source\">stop</pre>"}, {"lang": "Vedit macro language", "loc": 6, "block": "<pre class=\"vedit highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">Return</span> <span class=\"br0\">}</span>        <span class=\"co1\">// Exit current macro. Return to calling macro.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">Break_Out</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>   <span class=\"co1\">// Stop all macro execution and return to command mode.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Exit <span class=\"br0\">}</span>          <span class=\"co1\">// Exit Vedit. Prompt for saving any changed files.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Exit<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>       <span class=\"co1\">// As above, but return specified value (instead of 0) to OS</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Xall <span class=\"br0\">}</span>          <span class=\"co1\">// Exit Vedit. Save changed files without prompting.</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Qall <span class=\"br0\">}</span>          <span class=\"co1\">// Exit Vedit. Do not save any files.</span></pre>"}, {"lang": "VBScript", "loc": 11, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">dim</span> i, j<br/>j = 0<br/><span class=\"kw3\">do</span><br/>    <span class=\"kw3\">for</span> i = 1 <span class=\"kw3\">to</span> 100<br/>        <span class=\"kw3\">while</span> j &lt; i<br/>            <span class=\"kw3\">if</span> i = 3 <span class=\"kw3\">then</span><br/>                wscript.quit<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        wend<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">loop</span></pre>"}, {"lang": "Visual Basic", "loc": 10, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Main()<br/>    <span class=\"co1\">'...<br/></span>    <span class=\"kw3\">If</span> problem <span class=\"kw3\">Then</span><br/>        <span class=\"kw3\">For</span> n&amp; = Forms.Count <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>            Unload Forms(n&amp;)<br/>        <span class=\"kw3\">Next</span><br/>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"co1\">'...<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 2, "block": "<pre class=\"text highlighted_source\">if Problem then exit 1;<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">if (die) System.exit();<br/>if (die) System.exit(1);<br/>if (die) System.exit(\"dumping core\");</pre>"}]}