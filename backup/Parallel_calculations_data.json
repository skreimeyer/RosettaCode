{"task": "Parallel_calculations", "blocks": [{"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Number <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   Zero\u00a0: Number;<br/>   One \u00a0: Number;<br/>   Two \u00a0: Number;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Image <span class=\"br0\">(</span>X\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span>   <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"mod\"</span> <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"&gt;=\"</span>  <span class=\"br0\">(</span>X, Y\u00a0: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Prime_Numbers <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Number_List <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Number;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>List\u00a0: Number_List<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">type</span> Calculate_Factors <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">entry</span> Start <span class=\"br0\">(</span>The_Number\u00a0: <span class=\"kw3\">in</span> Number<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Get_Size <span class=\"br0\">(</span>Size\u00a0: <span class=\"kw3\">out</span> Natural<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Get_Result <span class=\"br0\">(</span>List\u00a0: <span class=\"kw3\">out</span> Number_List<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Calculate_Factors;<br/>\u00a0<br/><span class=\"kw1\">end</span> Prime_Numbers;</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;omp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">12757923</span><span class=\"sy0\">,</span> <span class=\"nu0\">12878611</span><span class=\"sy0\">,</span> <span class=\"nu0\">12878893</span><span class=\"sy0\">,</span> <span class=\"nu0\">12757923</span><span class=\"sy0\">,</span> <span class=\"nu0\">15808973</span><span class=\"sy0\">,</span> <span class=\"nu0\">15780709</span><span class=\"sy0\">,</span> <span class=\"nu0\">197622519</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> largest<span class=\"sy0\">,</span> largest_factor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        omp_set_num_threads<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/* \"omp parallel for\" turns the for loop multithreaded by making each thread<br/>         * iterating only a part of the loop variable, in this case i; variables declared<br/>         * as \"shared\" will be implicitly locked on access<br/>         */</span><br/>        <span class=\"co2\">#pragma omp parallel for shared(largest_factor, largest)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> p<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> p <span class=\"sy0\">*</span> p <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">%</span> p<span class=\"sy0\">;</span> p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">*</span> p <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> p <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&gt;</span> largest_factor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        largest_factor <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>                        largest <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"thread\u00a0%d: found larger:\u00a0%d of\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                                omp_get_thread_num<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"thread\u00a0%d: not larger:  \u00a0%d of\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>                                omp_get_thread_num<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Largest factor:\u00a0%d of\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> largest_factor<span class=\"sy0\">,</span> largest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 57, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;ppl.h&gt; // MSVC++</span><br/><span class=\"co2\">#include &lt;concurrent_vector.h&gt; // MSVC++</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Factors<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> number<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> primes<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span><br/><span class=\"br0\">{</span><br/>    <span class=\"nu0\">12757923</span>, <span class=\"nu0\">12878611</span>, <span class=\"nu0\">12878893</span>, <span class=\"nu0\">12757923</span>, <span class=\"nu0\">15808973</span>, <span class=\"nu0\">15780709</span>, <span class=\"nu0\">197622519</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// concurrency-safe container replaces std::vector&lt;&gt;</span><br/>    Concurrency<span class=\"sy4\">::</span><span class=\"me2\">concurrent_vector</span><span class=\"sy1\">&lt;</span>Factors<span class=\"sy1\">&gt;</span> results<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// parallel algorithm replaces std::for_each()</span><br/>    Concurrency<span class=\"sy4\">::</span><span class=\"me2\">parallel_for_each</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Factors factors<span class=\"sy4\">;</span><br/>        factors.<span class=\"me1\">number</span> <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>f<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">%</span> f <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                factors.<span class=\"me1\">primes</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                n <span class=\"sy2\">/</span><span class=\"sy1\">=</span> f<span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        results.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// add factorization to results</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// end of parallel calculations</span><br/>\u00a0<br/>    <span class=\"co1\">// find largest minimal prime factor in results</span><br/>    <span class=\"kw4\">auto</span> max <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max_element</span><span class=\"br0\">(</span>results.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, results.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Factors <span class=\"sy3\">&amp;</span>a, <span class=\"kw4\">const</span> Factors <span class=\"sy3\">&amp;</span>b<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a.<span class=\"me1\">primes</span>.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">primes</span>.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// print number(s) and factorization</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span>results.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, results.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Factors <span class=\"sy3\">&amp;</span>f<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">primes</span>.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> max<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>primes.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> f.<span class=\"me1\">number</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = [ \"</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>f.<span class=\"me1\">primes</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, f.<span class=\"me1\">primes</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 34, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> PrimeFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> primes <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> div <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> div <span class=\"sy0\">&lt;=</span> number<span class=\"sy0\">;</span> div<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>number <span class=\"sy0\">%</span> div <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                primes<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                number <span class=\"sy0\">=</span> number <span class=\"sy0\">/</span> div<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> primes<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">12757923</span>, <span class=\"nu0\">12878611</span>, <span class=\"nu0\">12757923</span>, <span class=\"nu0\">15808973</span>, <span class=\"nu0\">15780709</span>, <span class=\"nu0\">197622519</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// Calculate each of those numbers' prime factors, in parallel</span><br/>        <span class=\"kw1\">var</span> factors <span class=\"sy0\">=</span> n<span class=\"sy0\">.</span><span class=\"me1\">AsParallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>PrimeFactors<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// Make a new list showing the smallest factor for each</span><br/>        <span class=\"kw1\">var</span> smallestFactors <span class=\"sy0\">=</span> factors<span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>thisNumbersFactors <span class=\"sy0\">=&gt;</span> thisNumbersFactors<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// Find the index that corresponds with the largest of those factors</span><br/>        <span class=\"kw4\">int</span> biggestFactor <span class=\"sy0\">=</span> smallestFactors<span class=\"sy0\">.</span><span class=\"me1\">Max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> whatIndexIsThat <span class=\"sy0\">=</span> smallestFactors<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>biggestFactor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} has the largest minimum prime factor: {1}\"</span>, n<span class=\"br0\">[</span>whatIndexIsThat<span class=\"br0\">]</span>, biggestFactor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, factors<span class=\"br0\">[</span>whatIndexIsThat<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 14, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>lazy<span class=\"sy0\">-</span>seqs\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">[</span>primes<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lpf <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>last<br/>          <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>p <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span> primes<span class=\"br0\">)</span><br/>               \u00a0:<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>rem n p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> <span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>pmap lpf<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">apply</span> max<span class=\"sy0\">-</span>key second<span class=\"br0\">)</span><br/>     println<br/>     <span class=\"kw1\">time</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 25, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> '<span class=\"br0\">(</span>lparallel<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">setf</span> lparallel<span class=\"sy0\">:</span>*kernel* <span class=\"br0\">(</span>lparallel<span class=\"sy0\">:</span><span class=\"me1\">make-kernel</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; Configure for your system.</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factor <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>acc '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop with max-d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><br/>       for d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> then <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ d<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ d <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> d max-d<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>factor <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> n d<span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> d <span class=\"br0\">(</span><span class=\"kw1\">caar</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>                                     <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> acc<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">cadar</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                     <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> d <span class=\"nu0\">1</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> max-minimum-factor <span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lparallel<span class=\"sy0\">:</span><span class=\"me1\">pmap-reduce</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">min</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">car</span> <span class=\"br0\">(</span>factor n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-max-factor <span class=\"br0\">(</span>pair<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a has the largest minimum factor ~a~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> decompose<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&gt;=</span> i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> i<span class=\"br0\">)</span><br/>            result <span class=\"sy0\">~=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">~=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">parallelism</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">ulong</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        2UL<span class=\"sy0\">^^</span><span class=\"nu0\">59</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> 2UL<span class=\"sy0\">^^</span><span class=\"nu0\">59</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> 2UL<span class=\"sy0\">^^</span><span class=\"nu0\">59</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">112</span>_272_537_195_293UL<span class=\"sy0\">,</span><br/>        <span class=\"nu0\">115</span>_284_584_522_153<span class=\"sy0\">,</span> <span class=\"nu0\">115</span>_280_098_190_773<span class=\"sy0\">,</span><br/>        <span class=\"nu0\">115</span>_797_840_077_099<span class=\"sy0\">,</span> <span class=\"nu0\">112</span>_582_718_962_171<span class=\"sy0\">,</span><br/>        <span class=\"nu0\">112</span>_272_537_095_293<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_099_726_829_285_419<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//auto factors = taskPool.amap!(n =&gt; tuple(decompose(n), n))(data);</span><br/>    <span class=\"co1\">//static enum genPair = (ulong n) pure =&gt; tuple(decompose(n), n);</span><br/>    <span class=\"kw4\">static</span> genPair<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>decompose<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">auto</span> factors <span class=\"sy0\">=</span> taskPool.<span class=\"me1\">amap</span><span class=\"sy0\">!</span>genPair<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> pairs <span class=\"sy0\">=</span> factors.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>min<span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"N. with largest min factor: \"</span><span class=\"sy0\">,</span> pairs.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 44, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> parallel_calculations <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>fun_results<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fun_results</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Datas</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">fun_spawn</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Datas</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">fun_receive</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Numbers</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">12757923</span><span class=\"sy1\">,</span> <span class=\"nu0\">12878611</span><span class=\"sy1\">,</span> <span class=\"nu0\">12757923</span><span class=\"sy1\">,</span> <span class=\"nu0\">15808973</span><span class=\"sy1\">,</span> <span class=\"nu0\">15780709</span><span class=\"sy1\">,</span> <span class=\"nu0\">197622519</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Results</span> <span class=\"sy3\">=</span> <span class=\"re3\">fun_results</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> factors<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Numbers</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Min_results</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">min</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Results</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">_Max_min_factor</span><span class=\"sy1\">,</span> <span class=\"re5\">Number</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">max</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Min_results</span><span class=\"sy1\">,</span> <span class=\"re5\">Numbers</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"re5\">Factors</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span> <span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Numbers</span><span class=\"sy1\">,</span> <span class=\"re5\">Results</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p has largest minimal factor among its prime factors ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Number</span><span class=\"sy1\">,</span> <span class=\"re5\">Factors</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">K</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fun_receive</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Result</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Type</span><span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"me2\">T</span><span class=\"re3\">ype</span><span class=\"br0\">(</span> <span class=\"re5\">Error</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fun_spawn</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Data</span><span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                <span class=\"re5\">Result</span> <span class=\"sy3\">=</span> <span class=\"kw1\">try</span><br/>                       <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span><span class=\"re5\">Data</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t\t       <span class=\"kw1\">catch</span><br/>\t               <span class=\"re5\">Type</span>:<span class=\"me2\">Error</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Type</span><span class=\"sy1\">,</span> <span class=\"re5\">Error</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t\t       <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t        <span class=\"re5\">My_pid</span> <span class=\"sy3\">!</span> <span class=\"re5\">Result</span><br/>        <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: io kernel fry locals sequences arrays math.primes.factors math.parser channels threads prettyprint\u00a0;<br/>IN: &lt;filename&gt;<br/>\u00a0<br/>:: map-parallel ( seq quot -- newseq )<br/>    &lt;channel&gt;\u00a0:&gt; ch<br/>    seq [ '[ _ quot call ch to ] \"factors\" spawn ] { } map-as<br/>    dup length [ ch from ] replicate nip\u00a0;<br/>\u00a0<br/>{ 576460752303423487 576460752303423487<br/>  576460752303423487 112272537195293<br/>  115284584522153 115280098190773<br/>  115797840077099 112582718962171<br/>  112272537095293 1099726829285419 }<br/>dup [ factors ] map-parallel<br/>dup [ infimum ] map dup supremum<br/>swap index swap dupd nth -rot swap nth<br/>\"Number with largest min. factor is \" swap number&gt;string append<br/>\", with factors: \" append write .<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 19, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> PrimeDecomp <span class=\"co1\">// Has the decompose function from the Prime decomposition task</span><br/>\u00a0<br/><span class=\"kw1\">let</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span>112272537195293L<span class=\"sy0\">;</span> 112582718962171L<span class=\"sy0\">;</span> 112272537095293L<span class=\"sy0\">;</span> 115280098190773L<span class=\"sy0\">;</span> 115797840077099L<span class=\"sy0\">;</span> 1099726829285419L<span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> decomp num <span class=\"sy0\">=</span> decompose num 2L<br/>\u00a0<br/><span class=\"kw1\">let</span> largestMinPrimeFactor <span class=\"br0\">(</span>numbers: <span class=\"kw4\">int64</span> list<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> decompDetails <span class=\"sy0\">=</span> Async.<span class=\"me1\">Parallel</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> numbers <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">async</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n, decomp n <span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"co1\">// Compute the number and its prime decomposition list</span><br/>                        <span class=\"sy0\">|&gt;</span> Async.<span class=\"me1\">RunSynchronously</span>                                           <span class=\"co1\">// Start and wait for all parallel computations to complete.</span><br/>                        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sortBy</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"kw3\">min</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">~-</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                           <span class=\"co1\">// Sort in descending order, based on the min prime decomp number.</span><br/>\u00a0<br/>    decompDetails.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> showLargestMinPrimeFactor numbers <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> number, primeList <span class=\"sy0\">=</span> largestMinPrimeFactor numbers<br/>    printf <span class=\"st0\">\"Number\u00a0%d has largest minimal factor:<span class=\"es0\">\\n</span>    \"</span> number<br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%d \"</span><span class=\"br0\">)</span> primeList<br/>\u00a0<br/>showLargestMinPrimeFactor data</pre>"}, {"lang": "Fortran", "loc": 56, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> Primes<br/>\u00a0<br/>    <span class=\"kw3\">use</span> ISO_FORTRAN_ENV<br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw3\">data</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"nu0\">2099726827</span>, <span class=\"nu0\">15780709</span>, <span class=\"nu0\">1122725370</span>, <span class=\"nu0\">15808973</span>, <span class=\"nu0\">576460741</span>, <span class=\"nu0\">12878611</span>, <span class=\"nu0\">12757923</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">outprimes</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">largest_factor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, largest <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, minim <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int16<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw4\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, OMP_GET_THREAD_NUM<br/>\u00a0<br/>    <span class=\"kw1\">call</span> omp_set_num_threads<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>    <span class=\"co1\">!$omp parallel do private(val,outprimes,count) shared(data,largest_factor,largest)</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw4\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><br/>        outprimes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">call</span> find_factors<span class=\"br0\">(</span><span class=\"kw3\">data</span><span class=\"br0\">(</span><span class=\"kw4\">val</span><span class=\"br0\">)</span>, outprimes, <span class=\"kw4\">count</span><span class=\"br0\">)</span><br/>        minim <span class=\"sy0\">=</span> <span class=\"kw4\">minval</span><span class=\"br0\">(</span>outprimes<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>minim &gt; largest_factor<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            largest_factor <span class=\"sy0\">=</span> minim<br/>            largest <span class=\"sy0\">=</span> <span class=\"kw3\">data</span><span class=\"br0\">(</span><span class=\"kw4\">val</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">'(A7,i0,A2,i12,100i12)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Thread '</span>, OMP_GET_THREAD_NUM<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">': '</span>, <span class=\"kw3\">data</span><span class=\"br0\">(</span><span class=\"kw4\">val</span><span class=\"br0\">)</span>, outprimes<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">count</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">!$omp end parallel do</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">'(i0,A26,i0)'</span><span class=\"br0\">)</span> largest, <span class=\"st0\">' have the Largest factor: '</span>, largest_factor<br/>\u00a0<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> find_factors<span class=\"br0\">(</span>n, d, <span class=\"kw4\">count</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int16<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw4\">count</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int16<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">div</span>, next, rest<br/>\u00a0<br/>        i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        div <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; next <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>; rest <span class=\"sy0\">=</span> n<br/>\u00a0<br/>        <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>rest <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>rest, div<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                d<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> div<br/>                i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                rest <span class=\"sy0\">=</span> rest <span class=\"sy0\">/</span> div<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>            div <span class=\"sy0\">=</span> next<br/>            next <span class=\"sy0\">=</span> next <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw4\">count</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> find_factors<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Primes<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 96, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// collection of numbers.  A slice is used for the collection.</span><br/><span class=\"co1\">// The elements are big integers, since that's what the function Primes</span><br/><span class=\"co1\">// uses (as was specified by the Prime decomposition task.)</span><br/><span class=\"kw1\">var</span> numbers <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">{</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">12757923</span><span class=\"sy1\">),</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">12878611</span><span class=\"sy1\">),</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">12878893</span><span class=\"sy1\">),</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">12757923</span><span class=\"sy1\">),</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">15808973</span><span class=\"sy1\">),</span><br/>    big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">15780709</span><span class=\"sy1\">),</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// main just calls the function specified by the task description and</span><br/><span class=\"co1\">// prints results.  note it allows for multiple numbers with the largest</span><br/><span class=\"co1\">// minimal factor.  the task didn't specify to handle this, but obviously</span><br/><span class=\"co1\">// it's possible.</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rs <span class=\"sy2\">:=</span> lmf<span class=\"sy1\">(</span>numbers<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"largest minimal factor:\"</span><span class=\"sy1\">,</span> rs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>decomp<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rs <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>number<span class=\"sy1\">,</span> <span class=\"st0\">\"-&gt;\"</span><span class=\"sy1\">,</span> r<span class=\"sy3\">.</span><span class=\"me1\">decomp</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// this type associates a number with it's prime decomposition.</span><br/><span class=\"co1\">// the type is neccessary so that they can be sent together over</span><br/><span class=\"co1\">// a Go channel, but it turns out to be convenient as well for</span><br/><span class=\"co1\">// the return type of lmf.</span><br/><span class=\"kw1\">type</span> result <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    number <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    decomp <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// the function specified by the task description, \"largest minimal factor.\"</span><br/><span class=\"kw4\">func</span> lmf<span class=\"sy1\">([]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>result <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// construct result channel and start a goroutine to decompose each number.</span><br/>    <span class=\"co1\">// goroutines run in parallel as CPU cores are available.</span><br/>    rCh <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> result<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> numbers <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">go</span> decomp<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> rCh<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// collect results.  &lt;-rCh returns a single result from the result channel.</span><br/>    <span class=\"co1\">// we know how many results to expect so code here collects exactly that</span><br/>    <span class=\"co1\">// many results, and accumulates a list of those with the largest</span><br/>    <span class=\"co1\">// minimal factor.</span><br/>    rs <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>result<span class=\"sy1\">{</span>&lt;<span class=\"sy3\">-</span>rCh<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>numbers<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> r <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>rCh<span class=\"sy1\">;</span> r<span class=\"sy3\">.</span>decomp<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>rs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>decomp<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>            rs <span class=\"sy2\">=</span> rs<span class=\"sy1\">[:</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>            rs<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> r<br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>            rs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>rs<span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> rs<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// decomp is the function run as a goroutine.  multiple instances of this</span><br/><span class=\"co1\">// function will run concurrently, one for each number being decomposed.</span><br/><span class=\"co1\">// it acts as a driver for Primes, calling Primes as needed, packaging</span><br/><span class=\"co1\">// the result, and sending the packaged result on the channel.</span><br/><span class=\"co1\">// \"as needed\" turns out to mean sending Primes a copy of n, as Primes</span><br/><span class=\"co1\">// as written is destructive on its argument.</span><br/><span class=\"kw4\">func</span> decomp<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">,</span> rCh <span class=\"kw4\">chan</span> result<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    rCh &lt;<span class=\"sy3\">-</span> result<span class=\"sy1\">{</span>n<span class=\"sy1\">,</span> Primes<span class=\"sy1\">(</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>n<span class=\"sy1\">))}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// code below copied from Prime decomposition task</span><br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    ZERO <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    ONE  <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Primes<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    res <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">{}</span><br/>    mod<span class=\"sy1\">,</span> div <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">),</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        div<span class=\"sy3\">.</span>DivMod<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> mod<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> mod<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>ZERO<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            res <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>res<span class=\"sy1\">,</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>            n<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>div<span class=\"sy1\">)</span><br/>            div<span class=\"sy3\">.</span>DivMod<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> mod<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"nu2\">i</span><span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> ONE<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> res<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 47, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Parallel<span class=\"sy0\">.</span>Strategies <span class=\"br0\">(</span>parMap<span class=\"sy0\">,</span> rdeepseq<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>DeepSeq <span class=\"br0\">(</span>NFData<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>maximumBy<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/>\u00a0<br/>nums <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>nums <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"nu0\">112272537195293</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu0\">112582718962171</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu0\">112272537095293</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu0\">115280098190773</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu0\">115797840077099</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu0\">1099726829285419</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>lowestFactor<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>lowestFactor s n<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> y<br/>  <span class=\"kw1\">where</span><br/>    y <span class=\"sy0\">=</span><br/>      <span class=\"br0\">[</span> x<br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>s <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:ceiling\"><span class=\"kw3\">ceiling</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <br/>      <span class=\"sy0\">,</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <br/>      <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> x <span class=\"br0\">]</span><br/>\u00a0<br/>primeFactors<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>primeFactors l n <span class=\"sy0\">=</span> f n l <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    f n l xs <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">then</span> f <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` l<span class=\"br0\">)</span> <span class=\"br0\">(</span>lowestFactor <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> l <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>l\u00a0: xs<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> xs<br/>\u00a0<br/>minPrimes<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Control<span class=\"sy0\">.</span>DeepSeq<span class=\"sy0\">.</span>NFData a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>minPrimes ns <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> primeFactors y x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  maximumBy <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> `on` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> ns <span class=\"br0\">(</span>parMap rdeepseq <span class=\"br0\">(</span>lowestFactor <span class=\"nu0\">3</span><span class=\"br0\">)</span> ns<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> minPrimes nums</pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    threads <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    L <span class=\"sy0\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>A <span class=\"kw1\">do</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>threads<span class=\"sy0\">,</span> thread L<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> primedecomp<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> wait<span class=\"br0\">(</span><span class=\"sy0\">!</span>threads<span class=\"br0\">)</span><br/>\u00a0<br/>    maxminF <span class=\"sy0\">:=</span> L<span class=\"br0\">[</span>maxminI <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>L <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> maxminF <span class=\"sy0\">&lt;:=</span> L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> maxminI <span class=\"sy0\">:=</span> i<br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>maxminI<span class=\"br0\">]</span><span class=\"sy0\">||</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>L<span class=\"br0\">[</span>maxminI<span class=\"br0\">]</span><span class=\"sy0\">||</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> primedecomp<span class=\"br0\">(</span>n<span class=\"br0\">)</span>         <span class=\"co1\">#: return a list of factors</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>F <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> genfactors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> F<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> factors<br/>\u00a0</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   numbers =. <span class=\"nu0\">12757923</span> <span class=\"nu0\">12878611</span> <span class=\"nu0\">12878893</span> <span class=\"nu0\">12757923</span> <span class=\"nu0\">15808973</span> <span class=\"nu0\">15780709</span> <span class=\"nu0\">197622519</span><br/>   factors =. q:&amp;.&gt; parallelize <span class=\"nu0\">2</span> numbers <span class=\"co1\">NB. q: is parallelized here</span><br/>   ind =. <span class=\"sy0\">(</span>i. &gt;./<span class=\"sy0\">)</span> &lt;./@&gt; factors<br/>   ind { numbers\u00a0;\"<span class=\"nu0\">_1</span> factors<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">12878611</span>\u2502<span class=\"nu0\">47</span> <span class=\"nu0\">101</span> <span class=\"nu0\">2713</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre>"}, {"lang": "Java", "loc": 37, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acomparator+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Comparator</span></a>.<span class=\"me1\">comparing</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> ParallelCalculations <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> NUMBERS <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"nu0\">12757923</span>,<br/>      <span class=\"nu0\">12878611</span>,<br/>      <span class=\"nu0\">12878893</span>,<br/>      <span class=\"nu0\">12757923</span>,<br/>      <span class=\"nu0\">15808973</span>,<br/>      <span class=\"nu0\">15780709</span>,<br/>      <span class=\"nu0\">197622519</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">arguments</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      stream<span class=\"br0\">(</span>NUMBERS<span class=\"br0\">)</span><br/>        .<span class=\"me1\">unordered</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">parallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span>ParallelCalculations<span class=\"sy0\">::</span>minimalPrimeFactor<span class=\"br0\">)</span><br/>        .<span class=\"me1\">max</span><span class=\"br0\">(</span>comparing<span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">ifPresent</span><span class=\"br0\">(</span>res <span class=\"sy0\">-&gt;</span> out.<span class=\"me1\">printf</span><span class=\"br0\">(</span><br/>          <span class=\"st0\">\"%d has the largest minimum prime factor:\u00a0%d%n\"</span>,<br/>          res<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>          res<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> minimalPrimeFactor<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&gt;=</span> i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>i, n<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>n, n<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 18, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> onmessage <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>event<span class=\"br0\">)</span> <span class=\"br0\">{</span>   <br/>    postMessage<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"n\"</span> <span class=\"sy0\">:</span> event.<span class=\"me1\">data</span>.<span class=\"me1\">n</span><span class=\"sy0\">,</span><br/>                 <span class=\"st0\">\"factors\"</span> <span class=\"sy0\">:</span> factor<span class=\"br0\">(</span>event.<span class=\"me1\">data</span>.<span class=\"me1\">n</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 <span class=\"st0\">\"id\"</span> <span class=\"sy0\">:</span> event.<span class=\"me1\">data</span>.<span class=\"me1\">id</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> factors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> p<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors<span class=\"br0\">[</span>factors.<span class=\"me1\">length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">/=</span> p<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> factors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Primes<br/>\u00a0<br/>factortodict(d, n) = (d[minimum(collect(keys(factor(n))))] = n)<br/>\u00a0<br/># Numbers are from from the Perl 6 example.<br/>numbers = [64921987050997300559,  70251412046988563035,  71774104902986066597,<br/>           83448083465633593921,  84209429893632345702,  87001033462961102237,<br/>           87762379890959854011,  89538854889623608177,  98421229882942378967,<br/>           259826672618677756753, 262872058330672763871, 267440136898665274575,<br/>           278352769033314050117, 281398154745309057242, 292057004737291582187]<br/>\u00a0<br/>mins = Dict()<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"5b193a283e751b28223538\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(<br/>    <a class=\"__cf_email__\" data-cfemail=\"8fdbe7fdeaeeebfca1cffbe7fdeaeeebfc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> for n in numbers<br/>        factortodict(mins, n)<br/>    end<br/>)<br/>\u00a0<br/>answer = maximum(keys(mins))<br/>println(\"The number that has the largest minimum prime factor is $(mins[answer]), with a smallest factor of $answer\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 52, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span><br/>\u00a0<br/><span class=\"coMULTI\">/* returns the number itself, its smallest prime factor and all its prime factors */</span><br/>fun primeFactorInfo<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Triple<span class=\"sy0\">&lt;</span>Int, Int, List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Number must be more than one\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Triple<span class=\"br0\">(</span>n, n, listOf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factors.<span class=\"me1\">add</span><span class=\"br0\">(</span>factor<span class=\"br0\">)</span><br/>            nn /<span class=\"sy0\">=</span> factor<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Triple<span class=\"br0\">(</span>n, factors.<span class=\"me1\">min</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>, factors<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"br0\">)</span> factor <span class=\"sy0\">=</span> nn<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>factor <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> factor +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factor <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"nu0\">12757923</span>, <span class=\"nu0\">12878611</span>, <span class=\"nu0\">12878893</span>, <span class=\"nu0\">12757923</span>, <span class=\"nu0\">15808973</span>, <span class=\"nu0\">15780709</span>, <span class=\"nu0\">197622519</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> info <span class=\"sy0\">=</span> numbers.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                      .<span class=\"me1\">parallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                      .<span class=\"me1\">map</span> <span class=\"br0\">{</span> primeFactorInfo<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                      .<span class=\"me1\">collect</span><span class=\"br0\">(</span>Collectors.<span class=\"me1\">toList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxFactor <span class=\"sy0\">=</span> info.<span class=\"me1\">maxBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span><span class=\"sy0\">!!</span>.<span class=\"me1\">second</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> results <span class=\"sy0\">=</span> info.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">second</span> <span class=\"sy0\">==</span> maxFactor <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The following number(s) have the largest minimal prime factor of $maxFactor:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>result in results<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"  ${result.first} whose prime factors are ${result.third}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>hasSmallestFactor[data_List]:=Sort[Transpose[{ParallelTable[FactorInteger[x][[1, 1]], {x, data}],data}]][[1, 2]]</pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">import: parallel<br/>\u00a0<br/>: largeMinFactor  dup mapParallel(#factors) zip maxFor(#[ second first ])\u00a0; </pre>"}, {"lang": "ooRexx", "loc": 15, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* Concurrency in ooRexx. Example of early reply */</span><br/>object1 = <span class=\"sy0\">.</span>example~new<br/>object2 = <span class=\"sy0\">.</span>example~new<br/><span class=\"kw1\">say</span> object1~primes<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">11111111111</span>,<span class=\"nu0\">11111111114</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> object2~primes<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">11111111111</span>,<span class=\"nu0\">11111111114</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Main ended at\"</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span><br/>::class example<br/>::method primes<br/><span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> which,bot,top<br/><span class=\"kw1\">reply</span> <span class=\"st0\">\"Start primes\"</span>which<span class=\"st0\">':'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> which=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Call</span> pd1 bot top<br/>  <span class=\"kw3\">When</span> which=<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Call</span> pd2 bot top<br/>  <span class=\"kw3\">End</span> </pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">v<span class=\"sy0\">=</span>pareval<span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">1000</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">factor</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">vecmin</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span></pre>"}, {"lang": "OxygenBasic", "loc": 183, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'CONFIGURATION<br/>'=============<br/>\u00a0<br/>% max     8192  'Maximum amount of Prime Numbers (must be 2^n) (excluding 1 and 2)<br/>% cores   4     'CPU cores available (limited to 4 here)<br/>% share   2048  'Amount of numbers allocated to each core<br/>\u00a0<br/>'SETUP<br/>'=====<br/>\u00a0<br/>'SOURCE DATA BUFFERS<br/>\u00a0<br/>sys primes[max]<br/>sys numbers[max]<br/>\u00a0<br/>'RESULT BUFFER<br/>\u00a0<br/>double pp[max] 'main thread<br/>\u00a0<br/>\u00a0<br/>'MULTITHREADING AND TIMING API<br/>'=============================<br/>\u00a0<br/>extern lib \"kernel32.dll\"<br/>'<br/>void   QueryPerformanceCounter(quad*c)<br/>void   QueryPerformanceFrequency(quad*freq)<br/>sys    CreateThread (sys lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, *lpThreadId)<br/>dword  WaitForMultipleObjects(sys nCount,*lpHandles, bWaitAll, dwMilliseconds)<br/>bool   CloseHandle(sys hObject)<br/>void   Sleep(sys dwMilliSeconds)<br/>'<br/>quad freq,t1,t2<br/>QueryPerformanceFrequency freq<br/>\u00a0<br/>\u00a0<br/>'MACROS AND FUNCTIONS<br/>'====================<br/>\u00a0<br/>\u00a0<br/>macro FindPrimes(p)<br/>'==================<br/>finit<br/>sys n=1<br/>sys c,k<br/>do<br/>  n+=2<br/>  if c&gt;=max then exit do<br/>  '<br/>  'IS IT DIVISIBLE BE ANY PREVIOUS PRIME<br/>  '<br/>  for k=1 to c<br/>     if frac(n/p[k])=0 then exit for<br/>  next<br/>  '<br/>  if k&gt;c then<br/>    c++<br/>    p[c]=n 'STORE PRIME<br/>  end if<br/>end do<br/>end macro<br/>\u00a0<br/>\u00a0<br/>macro ProcessNumbers(p,bb)<br/>'=========================<br/>finit<br/>sys i,b,e<br/>b=bb*share<br/>e=b+share<br/>sys v,w<br/>for i=b+1 to e<br/>  v=numbers(i)<br/>  for j=max to 1 step -1<br/>    w=primes(j)<br/>    if w&lt;v then<br/>      if frac(v/w)=0 then<br/>        p(i)=primes(j)    'store highest factor<br/>        exit for          'process next number<br/>      end if<br/>    end if<br/>  next<br/>next<br/>end macro<br/>\u00a0<br/>'THREAD FUNCTIONS<br/>\u00a0<br/>function threadA(sys v) as sys<br/>ProcessNumbers(pp,v)<br/>end function<br/>\u00a0<br/>\u00a0<br/>function threadB(sys v) as sys<br/>ProcessNumbers(pp,v)<br/>end function<br/>\u00a0<br/>\u00a0<br/>function threadC(sys v) as sys<br/>ProcessNumbers(pp,v)<br/>end function<br/>\u00a0<br/>\u00a0<br/>end extern<br/>\u00a0<br/>function mainThread(sys b)<br/>'===========================<br/>ProcessNumbers(pp,b)<br/>end function<br/>\u00a0<br/>\u00a0<br/>'SOURCE DATA GENERATION<br/>\u00a0<br/>sys seed = 0x12345678<br/>\u00a0<br/>function Rnd() as sys<br/>'====================<br/>'<br/>mov eax,seed<br/>rol eax,7<br/>imul eax,eax,13<br/>mov seed,eax<br/>return eax<br/>end function<br/>\u00a0<br/>\u00a0<br/>function GenerateNumbers()<br/>'=========================<br/>sys i,v,mask<br/>mask=max * 8 -1 'as bit mask<br/>for i=1 to max<br/>  v=rnd()<br/>  v and=mask<br/>  numbers(i)=v<br/>next<br/>end function<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>FindPrimes(primes)<br/>\u00a0<br/>GenerateNumbers()<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>% threads Cores-1<br/>\u00a0<br/>% INFINITE 0xFFFFFFFF  'Infinite timeout<br/>\u00a0<br/>sys Funs[threads]={@threadA,@threadB,@threadC} '3 additional threads<br/>sys  hThread[threads], id[threads], i<br/>'<br/>'START TIMER<br/>'<br/>QueryPerformanceCounter   t1<br/>'<br/>for i=1 to threads<br/>  hThread(i) =  CreateThread 0,0,funs(i),i,0,id(i)<br/>next<br/>\u00a0<br/>\u00a0<br/>MainThread(0) 'process numbers in main thread (bottom share)<br/>\u00a0<br/>if threads&gt;0 then<br/>  WaitForMultipleObjects Threads, hThread, 1, INFINITE<br/>end if<br/>\u00a0<br/>for i=1 to Threads<br/>  CloseHandle hThread(i)<br/>next<br/>\u00a0<br/>'CAPTURE NUMBER WITH HIGHEST PRIME FACTOR<br/>\u00a0<br/>sys n,f<br/>for i=1 to max<br/>  if pp(i)&gt;f then f=pp(i)\u00a0: n=i<br/>next<br/>\u00a0<br/>'STOP TIMER<br/>\u00a0<br/>QueryPerformanceCounter t2 <br/>\u00a0<br/>print str((t2-t1)/freq,3) \" secs    \" numbers(n) \"    \" f 'number with highest prime factor<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/factor vecmax/</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> threads<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> threads<span class=\"sy0\">::</span><span class=\"me2\">shared</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@results</span> <span class=\"sy0\">:</span>shared<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$tnum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span><br/>  <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> threads<span class=\"sy0\">-&gt;</span><span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"st_h\">'tfactor'</span><span class=\"sy0\">,</span> <span class=\"re0\">$tnum</span><span class=\"sy0\">++,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span><span class=\"nu0\">576460752303423487</span> <span class=\"nu0\">576460752303423487</span> <span class=\"nu0\">576460752303423487</span> <span class=\"nu0\">112272537195293</span><br/>  <span class=\"nu0\">115284584522153</span> <span class=\"nu0\">115280098190773</span> <span class=\"nu0\">115797840077099</span> <span class=\"nu0\">112582718962171</span> <span class=\"nu0\">299866111963290359</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$lmf</span> <span class=\"sy0\">=</span> vecmax<span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@results</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Largest minimal factor of $lmf found in:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"  $_-&gt;[0] = [@$_[1..$#$_]]<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$lmf</span> <span class=\"br0\">}</span> <span class=\"re0\">@results</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tfactor <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$tnum</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@results</span><span class=\"sy0\">,</span> shared_clone<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> factor<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 69, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> <span class=\"nu0\">64921987050997300559</span><span class=\"sy0\">,</span>  <span class=\"nu0\">70251412046988563035</span><span class=\"sy0\">,</span>  <span class=\"nu0\">71774104902986066597</span><span class=\"sy0\">,</span><br/>           <span class=\"nu0\">83448083465633593921</span><span class=\"sy0\">,</span>  <span class=\"nu0\">84209429893632345702</span><span class=\"sy0\">,</span>  <span class=\"nu0\">87001033462961102237</span><span class=\"sy0\">,</span><br/>           <span class=\"nu0\">87762379890959854011</span><span class=\"sy0\">,</span>  <span class=\"nu0\">89538854889623608177</span><span class=\"sy0\">,</span>  <span class=\"nu0\">98421229882942378967</span><span class=\"sy0\">,</span><br/>           <span class=\"nu0\">259826672618677756753</span><span class=\"sy0\">,</span> <span class=\"nu0\">262872058330672763871</span><span class=\"sy0\">,</span> <span class=\"nu0\">267440136898665274575</span><span class=\"sy0\">,</span><br/>           <span class=\"nu0\">278352769033314050117</span><span class=\"sy0\">,</span> <span class=\"nu0\">281398154745309057242</span><span class=\"sy0\">,</span> <span class=\"nu0\">292057004737291582187</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@factories</span> <span class=\"sy0\">=</span> <span class=\"re0\">@nums</span><span class=\"sy0\">.</span><span class=\"me1\">hyper</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>3batch<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"re0\">&amp;prime</span><span class=\"sy0\">-</span>factors<span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"%21d factors:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@nums</span> <span class=\"kw1\">Z</span> <span class=\"re0\">@factories</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$gmf</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"re0\">@factories</span>\u00bb<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">=&gt;</span>\u00ab\u00a0<span class=\"re0\">@nums</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">:</span> <span class=\"sy0\">+*.</span><span class=\"me1\">key</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Greatest minimum factor: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$gmf</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"from: { $gmf.value }<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Run time: '</span><span class=\"sy0\">,</span> now <span class=\"sy0\">-</span> <span class=\"kw2\">INIT</span> now<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'-'</span> <span class=\"kw1\">x</span> <span class=\"nu0\">80</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># For amusements sake and for relative comparison, using the same 100</span><br/><span class=\"co1\"># numbers as in the SequenceL example, testing with different numbers of threads.</span><br/>\u00a0<br/><span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">625070029</span> <span class=\"nu0\">413238785</span> <span class=\"nu0\">815577134</span> <span class=\"nu0\">738415913</span> <span class=\"nu0\">400125878</span> <span class=\"nu0\">967798656</span> <span class=\"nu0\">830022841</span><br/>   <span class=\"nu0\">774153795</span> <span class=\"nu0\">114250661</span> <span class=\"nu0\">259366941</span> <span class=\"nu0\">571026384</span> <span class=\"nu0\">522503284</span> <span class=\"nu0\">757673286</span> <span class=\"nu0\">509866901</span> <span class=\"nu0\">6303092</span><br/>   <span class=\"nu0\">516535622</span> <span class=\"nu0\">177377611</span> <span class=\"nu0\">520078930</span> <span class=\"nu0\">996973832</span> <span class=\"nu0\">148686385</span> <span class=\"nu0\">33604768</span> <span class=\"nu0\">384564659</span> <span class=\"nu0\">95268916</span><br/>   <span class=\"nu0\">659700539</span> <span class=\"nu0\">149740384</span> <span class=\"nu0\">320999438</span> <span class=\"nu0\">822361007</span> <span class=\"nu0\">701572051</span> <span class=\"nu0\">897604940</span> <span class=\"nu0\">2091927</span> <span class=\"nu0\">206462079</span><br/>   <span class=\"nu0\">290027015</span> <span class=\"nu0\">307100080</span> <span class=\"nu0\">904465970</span> <span class=\"nu0\">689995756</span> <span class=\"nu0\">203175746</span> <span class=\"nu0\">802376955</span> <span class=\"nu0\">220768968</span> <span class=\"nu0\">433644101</span><br/>   <span class=\"nu0\">892007533</span> <span class=\"nu0\">244830058</span> <span class=\"nu0\">36338487</span> <span class=\"nu0\">870509730</span> <span class=\"nu0\">350043612</span> <span class=\"nu0\">282189614</span> <span class=\"nu0\">262732002</span> <span class=\"nu0\">66723331</span><br/>   <span class=\"nu0\">908238109</span> <span class=\"nu0\">635738243</span> <span class=\"nu0\">335338769</span> <span class=\"nu0\">461336039</span> <span class=\"nu0\">225527523</span> <span class=\"nu0\">256718333</span> <span class=\"nu0\">277834108</span> <span class=\"nu0\">430753136</span><br/>   <span class=\"nu0\">151142121</span> <span class=\"nu0\">602303689</span> <span class=\"nu0\">847642943</span> <span class=\"nu0\">538451532</span> <span class=\"nu0\">683561566</span> <span class=\"nu0\">724473614</span> <span class=\"nu0\">422235315</span> <span class=\"nu0\">921779758</span><br/>   <span class=\"nu0\">766603317</span> <span class=\"nu0\">364366380</span> <span class=\"nu0\">60185500</span> <span class=\"nu0\">333804616</span> <span class=\"nu0\">988528614</span> <span class=\"nu0\">933855820</span> <span class=\"nu0\">168694202</span> <span class=\"nu0\">219881490</span><br/>   <span class=\"nu0\">703969452</span> <span class=\"nu0\">308390898</span> <span class=\"nu0\">567869022</span> <span class=\"nu0\">719881996</span> <span class=\"nu0\">577182004</span> <span class=\"nu0\">462330772</span> <span class=\"nu0\">770409840</span> <span class=\"nu0\">203075270</span><br/>   <span class=\"nu0\">666478446</span> <span class=\"nu0\">351859802</span> <span class=\"nu0\">660783778</span> <span class=\"nu0\">503851023</span> <span class=\"nu0\">789751915</span> <span class=\"nu0\">224633442</span> <span class=\"nu0\">347265052</span> <span class=\"nu0\">782142901</span><br/>   <span class=\"nu0\">43731988</span> <span class=\"nu0\">246754498</span> <span class=\"nu0\">736887493</span> <span class=\"nu0\">875621732</span> <span class=\"nu0\">594506110</span> <span class=\"nu0\">854991694</span> <span class=\"nu0\">829661614</span> <span class=\"nu0\">377470268</span><br/>   <span class=\"nu0\">984990763</span> <span class=\"nu0\">275192380</span> <span class=\"nu0\">39848200</span> <span class=\"nu0\">892766084</span> <span class=\"nu0\">76503760</span><span class=\"sy0\">&gt;</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$degree</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> \\factories <span class=\"sy0\">=</span> <span class=\"re0\">@nums</span><span class=\"sy0\">.</span><span class=\"me1\">hyper</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>degree<span class=\"br0\">(</span><span class=\"re0\">$degree</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>3batch<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"re0\">&amp;prime</span><span class=\"sy0\">-</span>factors<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$gmf</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"me1\">append</span><span class=\"br0\">(</span>factories\u00bb<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">=&gt;</span>\u00ab\u00a0<span class=\"re0\">@nums</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">:</span> <span class=\"sy0\">+*.</span><span class=\"me1\">key</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Factoring {<a class=\"__cf_email__\" data-cfemail=\"012a416f746c72\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>} numbers, greatest minimum factor: {$gmf.key}\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Using: $degree thread{ $degree &gt; 1\u00a0?? 's'\u00a0!! ''}\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">'Run time: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span> <span class=\"sy0\">-</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"st_h\">' seconds.'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Prime factoring routines from the Prime decomposition task</span><br/><span class=\"kw2\">sub</span> prime<span class=\"sy0\">-</span>factors <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">sort</span> flat prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> prime<span class=\"sy0\">-</span>factors<span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"re0\">$factor</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> find<span class=\"sy0\">-</span>factor <span class=\"br0\">(</span> Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$gcd</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> gcd <span class=\"nu0\">6541380665835015</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$gcd</span> <span class=\"kw1\">if</span> <span class=\"re0\">$gcd</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span>      <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$rho</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$rho</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$fixed</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$rho</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$constant</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$fixed</span> <span class=\"br0\">)</span> gcd <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$factor</span> <span class=\"sy0\">=</span> find<span class=\"sy0\">-</span>factor<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$constant</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\">(let Lst<br/>   (mapcan<br/>      '((N)<br/>         (later (cons)               # When done,<br/>            (cons N (factor N)) ) )  # return the number and its factors<br/>      (quote<br/>         188573867500151328137405845301  # Process a collection of 12 numbers<br/>         3326500147448018653351160281<br/>         979950537738920439376739947<br/>         2297143294659738998811251<br/>         136725986940237175592672413<br/>         3922278474227311428906119<br/>         839038954347805828784081<br/>         42834604813424961061749793<br/>         2651919914968647665159621<br/>         967022047408233232418982157<br/>         2532817738450130259664889<br/>         122811709478644363796375689 ) )<br/>   (wait NIL (full Lst))  # Wait until all computations are done<br/>   (maxi '((L) (apply min L)) Lst) )  # Result: Number in CAR, factors in CDR</pre>"}, {"lang": "Prolog", "loc": 32, "block": "<pre class=\"prolog highlighted_source\">threaded_decomp<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span>ID<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tthread_create<span class=\"br0\">(</span><br/>\t\t      <span class=\"br0\">(</span>prime_decomp<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t       thread_exit<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"sy4\">,</span>ID<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>threaded_decomp_list<span class=\"br0\">(</span>List<span class=\"sy4\">,</span>Erg<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>threaded_decomp<span class=\"sy4\">,</span>List<span class=\"sy4\">,</span>IDs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>thread_join<span class=\"sy4\">,</span>IDs<span class=\"sy4\">,</span>Results<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>pack_exit_out<span class=\"sy4\">,</span>Results<span class=\"sy4\">,</span>Smallest_Factors_List<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlargest_min_factor<span class=\"br0\">(</span>Smallest_Factors_List<span class=\"sy4\">,</span>Erg<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pack_exit_out<span class=\"br0\">(</span>exited<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span>X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">%Note that here some error handling should happen.</span><br/>\u00a0<br/>largest_min_factor<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>N<span class=\"sy4\">,</span>Facs<span class=\"br0\">)</span><span class=\"sy5\">|</span>A<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>Fs2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tmin_list<span class=\"br0\">(</span>Facs<span class=\"sy4\">,</span>MF<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlargest_min_factor<span class=\"br0\">(</span>A<span class=\"sy4\">,</span><span class=\"br0\">(</span>N<span class=\"sy4\">,</span>MF<span class=\"sy4\">,</span>Facs<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Fs2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>largest_min_factor<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>Acc<span class=\"sy4\">,</span>Acc<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>largest_min_factor<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>Facs1<span class=\"br0\">)</span><span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>MF2<span class=\"sy4\">,</span>Facs2<span class=\"br0\">)</span><span class=\"sy4\">,</span>Goal<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tmin_list<span class=\"br0\">(</span>Facs1<span class=\"sy4\">,</span> MF1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>MF1 <span class=\"sy6\">&gt;</span> MF2<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\tlargest_min_factor<span class=\"br0\">(</span>Rest<span class=\"sy4\">,</span><span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>MF1<span class=\"sy4\">,</span>Facs1<span class=\"br0\">)</span><span class=\"sy4\">,</span>Goal<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tlargest_min_factor<span class=\"br0\">(</span>Rest<span class=\"sy4\">,</span><span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>MF2<span class=\"sy4\">,</span>Facs2<span class=\"br0\">)</span><span class=\"sy4\">,</span>Goal<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>format_it<span class=\"br0\">(</span>List<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tthreaded_decomp_list<span class=\"br0\">(</span>List<span class=\"sy4\">,</span><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span>Factors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Number with largest minimal Factor is ~w\\nFactors are ~w\\n'</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Number</span></a><span class=\"sy4\">,</span>Factors<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 88, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> IO_block<br/>  <span class=\"kw2\">ThreadID</span>.i<br/>  StartSeamaphore.i<br/>  Value.q<br/>  MinimumFactor.i<br/>  List Factors.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/><span class=\"co1\">;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span><br/>\u00a0<br/><span class=\"kw1\">Declare</span> Factorize<span class=\"br0\">(</span><span class=\"sy0\">*</span>IO.IO_block<span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span><br/>\u00a0<br/>Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span><br/><span class=\"co1\">;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> AvailableCpu, MainSemaphore<br/>  <span class=\"kw1\">Protected</span> i, j, qData.q, Title$, Message$<br/>  <span class=\"kw1\">NewList</span> T.IO_block<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  AvailableCpu <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">GetEnvironmentVariable</span><span class=\"br0\">(</span><span class=\"st0\">\"NUMBER_OF_PROCESSORS\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> AvailableCpu<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>: AvailableCpu<span class=\"sy0\">=</span><span class=\"nu0\">1</span>: <span class=\"kw1\">EndIf</span><br/>  MainSemaphore <span class=\"sy0\">=</span> CreateSemaphore<span class=\"br0\">(</span>AvailableCpu<span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw1\">Restore</span> Start_of_data<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>?end_of_data<span class=\"sy0\">-</span>?Start_of_data<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Quad<span class=\"br0\">)</span><br/>    <span class=\"co1\">; Start all threads at ones, they will then be let to</span><br/>    <span class=\"co1\">; self-oganize according to the availiable Cores.</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Read</span>.q  qData<br/>    T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> qData<br/>    T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>StartSeamaphore <span class=\"sy0\">=</span> MainSemaphore<br/>    T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">ThreadID</span> <span class=\"sy0\">=</span> <span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@Factorize<span class=\"br0\">(</span><span class=\"br0\">)</span>, @T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw1\">ForEach</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">; Wait for all threads to complete their work and</span><br/>    <span class=\"co1\">; find the smallest factor from eact task.</span><br/>    <span class=\"kw2\">WaitThread</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">ThreadID</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">;</span><br/>  i <span class=\"sy0\">=</span> <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>IO_block<span class=\"sy0\">\\</span>MinimumFactor<span class=\"br0\">)</span><br/>  <span class=\"kw2\">SortStructuredList</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Integer, i, #PB_Sort_Descending<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  Title$<span class=\"sy0\">=</span><span class=\"st0\">\"Info\"</span><br/>  Message$<span class=\"sy0\">=</span><span class=\"st0\">\"Number \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" has largest minimal factor:\"</span><span class=\"sy0\">+</span>#CRLF$<br/>  <span class=\"kw1\">ForEach</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Message$ <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span>Title$, Message$<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">ProcedureDLL</span> Factorize<span class=\"br0\">(</span><span class=\"sy0\">*</span>IO.IO_block<span class=\"br0\">)</span> <span class=\"co1\">; Fill list Factors() with the factor parts of Number</span><br/>  <span class=\"co1\">;Based on http://rosettacode.org/wiki/Prime_decomposition#PureBasic</span><br/>  <span class=\"kw1\">With</span> <span class=\"sy0\">*</span>IO<br/>    <span class=\"kw1\">Protected</span> Value.q<span class=\"sy0\">=\\</span>Value<br/>    WaitSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>StartSeamaphore<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">While</span> Value <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>      Value <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">Protected</span> Max <span class=\"sy0\">=</span> Value<br/>    <span class=\"kw1\">While</span> I <span class=\"sy0\">&lt;=</span> Max <span class=\"kw1\">And</span> Value <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">While</span> Value <span class=\"sy0\">%</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> I<br/>        Value <span class=\"sy0\">/</span> I<br/>      <span class=\"kw1\">Wend</span><br/>      I <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw2\">SortList</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending<span class=\"br0\">)</span><br/>    <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">\\</span>MinimumFactor<span class=\"sy0\">=\\</span>Factors<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    SignalSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>StartSeamaphore<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndWith</span> <span class=\"co1\">;*IO</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  Start_of_data: <span class=\"co1\">; Same numbers as Ada</span><br/>  <span class=\"kw1\">Data</span>.q  <span class=\"nu0\">12757923</span>, <span class=\"nu0\">12878611</span>, <span class=\"nu0\">12757923</span>, <span class=\"nu0\">15808973</span>, <span class=\"nu0\">15780709</span>, <span class=\"nu0\">197622519</span><br/>  end_of_data:<br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 45, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> concurrent <span class=\"kw1\">import</span> futures<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> floor<span class=\"sy0\">,</span> sqrt<br/>\u00a0<br/>NUMBERS <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"nu0\">112272537195293</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">112582718962171</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">112272537095293</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">115280098190773</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">115797840077099</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">1099726829285419</span><span class=\"br0\">]</span><br/><span class=\"co1\"># NUMBERS = [33, 44, 55, 275]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> lowest_factor<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> _start<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><br/>    search_max <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>floor<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>_start<span class=\"sy0\">,</span> search_max<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> n\u00a0% i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">return</span> i<br/>    <span class=\"kw1\">return</span> n<br/>\u00a0<br/><span class=\"kw1\">def</span> prime_factors<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> lowest<span class=\"br0\">)</span>:<br/>    pf <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        pf.<span class=\"me1\">append</span><span class=\"br0\">(</span>lowest<span class=\"br0\">)</span><br/>        n //<span class=\"sy0\">=</span> lowest<br/>        lowest <span class=\"sy0\">=</span> lowest_factor<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>lowest<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> pf<br/>\u00a0<br/><span class=\"kw1\">def</span> prime_factors_of_number_with_lowest_prime_factor<span class=\"br0\">(</span>NUMBERS<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">with</span> futures.<span class=\"me1\">ProcessPoolExecutor</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> executor:<br/>        low_factor<span class=\"sy0\">,</span> number <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>l<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> l<span class=\"sy0\">,</span> f <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>executor.<span class=\"kw2\">map</span><span class=\"br0\">(</span>lowest_factor<span class=\"sy0\">,</span> NUMBERS<span class=\"br0\">)</span><span class=\"sy0\">,</span> NUMBERS<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        all_factors <span class=\"sy0\">=</span> prime_factors<span class=\"br0\">(</span>number<span class=\"sy0\">,</span> low_factor<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> number<span class=\"sy0\">,</span> all_factors<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'For these numbers:'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>  '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> NUMBERS<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    number<span class=\"sy0\">,</span> all_factors <span class=\"sy0\">=</span> prime_factors_of_number_with_lowest_prime_factor<span class=\"br0\">(</span>NUMBERS<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'    The one with the largest minimum prime factor is {}:'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'      All its prime factors in order are: {}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>all_factors<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(provide main)<br/>\u00a0<br/>(define (smallest-factor n)<br/>  (list (first (first (factorize n))) n))<br/>\u00a0<br/>(define numbers <br/>  '(112272537195293 112582718962171 112272537095293<br/>    115280098190773 115797840077099 1099726829285419))<br/>\u00a0<br/>(define (main)<br/> \u00a0; create as many instances of Racket as<br/> \u00a0; there are numbers:<br/>  (define ps <br/>    (for/list ([_ numbers])<br/>      (place ch<br/>             (place-channel-put <br/>              ch<br/>              (smallest-factor<br/>               (place-channel-get ch))))))<br/> \u00a0; send the numbers to the instances:<br/>  (map place-channel-put ps numbers)<br/> \u00a0; get the results and find the maximum:<br/>  (argmax first (map place-channel-get ps)))<br/>\u00a0</pre>"}, {"lang": "SequenceL", "loc": 13, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Conversion.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:= <br/>\tlet<br/>\t\tinputs\u00a0:= stringToInt(args);<br/>\t\tfactored\u00a0:= primeFactorization(inputs); <br/>\t\tminFactors\u00a0:= vectorMin(factored);<br/>\u00a0<br/>\t\tindexOfMax\u00a0:= firstIndexOf(minFactors, vectorMax(minFactors));<br/>\tin<br/>\t\t\"Number \" ++ intToString(inputs[indexOfMax]) ++ \" has largest minimal factor:\\n\"  ++ delimit(intToString(factored[indexOfMax]), ' ');</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">var nums = <span class=\"br0\">[</span><span class=\"nu0\">1275792312878611</span>, <span class=\"nu0\">12345678915808973</span>,<br/>            <span class=\"nu0\">1578070919762253</span>, <span class=\"nu0\">14700694496703910</span>,<span class=\"br0\">]</span>;<br/>\u00a0<br/>var factors = nums.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> prime_factors.<span class=\"me1\">ffork</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">wait</span> <span class=\"br0\">}</span><br/>say <span class=\"br0\">(</span><span class=\"br0\">(</span>nums ~Z factors<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>max_by <span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 42, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"kw2\">package</span> require Thread<br/>\u00a0<br/><span class=\"co1\"># Pooled computation engine; runs event loop internally</span><br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> pooled <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> poolSize <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"co1\"># Needs to be tuned to system size</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> computation <span class=\"br0\">{</span>computationDefinition entryPoint values<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> result<br/>\t<span class=\"kw1\">variable</span> poolSize<br/>\t<span class=\"co1\"># Add communication shim</span><br/>\t<span class=\"kw2\">append</span> computationDefinition <span class=\"br0\">[</span><span class=\"kw2\">subst</span> -nocommands <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">proc</span> poolcompute <span class=\"br0\">{</span>value target<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> outcome <span class=\"br0\">[</span><span class=\"re0\">$entryPoint</span> \\<span class=\"re0\">$value</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> msg <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">pooled</span>::<span class=\"me1\">result</span><span class=\"br0\">(</span>\\<span class=\"re0\">$value</span><span class=\"br0\">)</span> \\<span class=\"re0\">$outcome</span><span class=\"br0\">]</span><br/>\t\tthread::<span class=\"me1\">send</span> -async \\<span class=\"re0\">$target</span> \\<span class=\"re0\">$msg</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"co1\"># Set up the pool</span><br/>\t<span class=\"kw1\">set</span> pool <span class=\"br0\">[</span>tpool::<span class=\"me1\">create</span> -initcmd <span class=\"re0\">$computationDefinition</span> \\<br/>\t\t      -maxworkers <span class=\"re0\">$poolSize</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"co1\"># Prepare to receive results</span><br/>\tunset -nocomplain result<br/>\tarray <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># Dispatch the computations</span><br/>\t<span class=\"kw1\">foreach</span> value <span class=\"re0\">$values</span> <span class=\"br0\">{</span><br/>\t    tpool::<span class=\"me1\">post</span> <span class=\"re0\">$pool</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> poolcompute <span class=\"re0\">$value</span> <span class=\"br0\">[</span>thread::<span class=\"me1\">id</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># Wait for results</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size result<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$values</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>vwait pooled::<span class=\"me1\">result</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># Dispose of the pool</span><br/>\ttpool::<span class=\"me1\">release</span> <span class=\"re0\">$pool</span><br/>\u00a0<br/>\t<span class=\"co1\"># Return the results</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>array get result<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn factorize(x,y,z,etc){<br/>   xyzs:=vm.arglist;<br/>   fs:=xyzs.apply(factors.strand) // queue up factorizing for x,y,...<br/>       .apply(\"noop\")\t\t  // wait for all threads to finish factoring<br/>       .apply(fcn{ (0).min(vm.arglist) }); // find minimum factor for x,y...<br/>   [0..].zip(fs).filter(fcn([(n,x)],M){ x==M }.fp1((0).max(fs))) // find max of mins<br/>   .apply('wrap([(n,_)]){ xyzs[n] })  // and pluck src from arglist<br/>}</pre>"}]}