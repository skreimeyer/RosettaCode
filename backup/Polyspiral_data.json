{"task": "Polyspiral", "blocks": [{"lang": "C", "loc": 48, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define factor M_PI/180</span><br/><span class=\"co2\">#define LAG 1000</span><br/>\u00a0<br/><span class=\"kw4\">void</span> polySpiral<span class=\"br0\">(</span><span class=\"kw4\">int</span> windowWidth<span class=\"sy0\">,</span><span class=\"kw4\">int</span>\twindowHeight<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> incr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> angle<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> length<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tincr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>incr <span class=\"sy0\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">360</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>\t\tx <span class=\"sy0\">=</span> windowWidth<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\ty <span class=\"sy0\">=</span> windowHeight<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tlength <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t\tangle <span class=\"sy0\">=</span> incr<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">150</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tx1 <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> length<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>factor<span class=\"sy0\">*</span>angle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ty1 <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> length<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>factor<span class=\"sy0\">*</span>angle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tline<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tlength <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tangle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">+</span> incr<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">360</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tx <span class=\"sy0\">=</span> x1<span class=\"sy0\">;</span><br/>\t\t\ty <span class=\"sy0\">=</span> y1<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tdelay<span class=\"br0\">(</span>LAG<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcleardevice<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span>\t<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tinitwindow<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span><span class=\"st0\">\"Polyspiral\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpolySpiral<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 145, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">float</span> PI <span class=\"sy1\">=</span> <span class=\"nu17\">3.1415926536f</span>, TWO_PI <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>.<span class=\"me1\">f</span> <span class=\"sy2\">*</span> PI<span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> vector2<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    vector2<span class=\"br0\">(</span> <span class=\"kw4\">float</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">float</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> set<span class=\"br0\">(</span> a, b <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> set<span class=\"br0\">(</span> <span class=\"kw4\">float</span> a, <span class=\"kw4\">float</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> rotate<span class=\"br0\">(</span> <span class=\"kw4\">float</span> r <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">float</span> _x <span class=\"sy1\">=</span> x, _y <span class=\"sy1\">=</span> y,<br/>               s <span class=\"sy1\">=</span> sinf<span class=\"br0\">(</span> r <span class=\"br0\">)</span>, c <span class=\"sy1\">=</span> cosf<span class=\"br0\">(</span> r <span class=\"br0\">)</span>,<br/>               a <span class=\"sy1\">=</span> _x <span class=\"sy2\">*</span> c <span class=\"sy2\">-</span> _y <span class=\"sy2\">*</span> s, b <span class=\"sy1\">=</span> _x <span class=\"sy2\">*</span> s <span class=\"sy2\">+</span> _y <span class=\"sy2\">*</span> c<span class=\"sy4\">;</span><br/>        x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    vector2 add<span class=\"br0\">(</span> <span class=\"kw4\">const</span> vector2<span class=\"sy3\">&amp;</span> v <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy2\">+</span><span class=\"sy1\">=</span> v.<span class=\"me1\">x</span><span class=\"sy4\">;</span> y <span class=\"sy2\">+</span><span class=\"sy1\">=</span> v.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">float</span> x, y<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, brush<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, clr<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, wid<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        BITMAPINFO    bi<span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>        <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>    <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>      <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>       <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>      <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>        HDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        hdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        width <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> BYTE clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> pBits, clr, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setBrushColor<span class=\"br0\">(</span> DWORD bClr <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> brush <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        brush <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> bClr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD c <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenWidth<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> path <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        BITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>        BITMAPINFO       infoheader<span class=\"sy4\">;</span><br/>        BITMAP           bitmap<span class=\"sy4\">;</span><br/>        DWORD            wb<span class=\"sy4\">;</span><br/>\u00a0<br/>        GetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        fileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        GetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        HANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        CloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        pen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, wid, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span> HDC hdc<span class=\"sy4\">;</span><br/>    HPEN pen<span class=\"sy4\">;</span> HBRUSH brush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span> <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span> <span class=\"kw4\">int</span> width, height, wid<span class=\"sy4\">;</span><br/>    DWORD clr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    myBitmap bmp<span class=\"sy4\">;</span><br/>    bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">600</span>, <span class=\"nu0\">600</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    HDC dc <span class=\"sy1\">=</span> bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">float</span> fs <span class=\"sy1\">=</span> <span class=\"br0\">(</span> TWO_PI <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">100</span>.<span class=\"me1\">f</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> index <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> a <span class=\"sy1\">=</span> <span class=\"st0\">\"f://users//images//test\"</span>, b<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">float</span> ang, len<span class=\"sy4\">;</span><br/>    vector2 p1, p2<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">float</span> step <span class=\"sy1\">=</span> <span class=\"nu17\">0.1f</span><span class=\"sy4\">;</span> step <span class=\"sy1\">&lt;</span> <span class=\"nu17\">5.1f</span><span class=\"sy4\">;</span> step <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu17\">.05f</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ang <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> len <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>        p1.<span class=\"me1\">set</span><span class=\"br0\">(</span> <span class=\"nu0\">300</span>, <span class=\"nu0\">300</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">50</span> <span class=\"sy2\">+</span> <span class=\"nu0\">200</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">300</span> <span class=\"sy2\">+</span> <span class=\"nu0\">220</span>, <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">50</span> <span class=\"sy2\">+</span> <span class=\"nu0\">200</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">float</span> xx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> TWO_PI<span class=\"sy4\">;</span> xx <span class=\"sy2\">+</span><span class=\"sy1\">=</span> fs <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            MoveToEx<span class=\"br0\">(</span> dc, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p1.<span class=\"me1\">x</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p1.<span class=\"me1\">y</span>, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            p2.<span class=\"me1\">set</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, len <span class=\"br0\">)</span><span class=\"sy4\">;</span> p2.<span class=\"me1\">rotate</span><span class=\"br0\">(</span> ang <span class=\"br0\">)</span><span class=\"sy4\">;</span> p2.<span class=\"me1\">add</span><span class=\"br0\">(</span> p1 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            LineTo<span class=\"br0\">(</span> dc, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p2.<span class=\"me1\">x</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>p2.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            p1 <span class=\"sy1\">=</span> p2<span class=\"sy4\">;</span> ang <span class=\"sy2\">+</span><span class=\"sy1\">=</span> step<span class=\"sy4\">;</span> len <span class=\"sy2\">+</span><span class=\"sy1\">=</span> step<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> ss<span class=\"sy4\">;</span> ss <span class=\"sy1\">&lt;&lt;</span> index<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        b <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> ss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"st0\">\".bmp\"</span><span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 63, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Drawing2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Forms</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Threading</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Polyspiral<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">partial</span> <span class=\"kw4\">class</span> Form1 <span class=\"sy0\">:</span> Form<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">double</span> inc<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Form1<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Width <span class=\"sy0\">=</span> Height <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">;</span><br/>            StartPosition <span class=\"sy0\">=</span> FormStartPosition<span class=\"sy0\">.</span><span class=\"me1\">CenterScreen</span><span class=\"sy0\">;</span><br/>            SetStyle<span class=\"br0\">(</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">AllPaintingInWmPaint</span> <span class=\"sy0\">|</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">UserPaint</span> <span class=\"sy0\">|</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">DoubleBuffer</span>,<br/>                <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> timer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DispatcherTimer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Tick</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>s, e<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> inc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>inc <span class=\"sy0\">+</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360</span><span class=\"sy0\">;</span> Refresh<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Interval</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TimeSpan<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> DrawSpiral<span class=\"br0\">(</span>Graphics g, <span class=\"kw4\">int</span> len, <span class=\"kw4\">double</span> angleIncrement<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> x1 <span class=\"sy0\">=</span> Width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> y1 <span class=\"sy0\">=</span> Height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> angle <span class=\"sy0\">=</span> angleIncrement<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">150</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">double</span> y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"sy0\">;</span><br/>                g<span class=\"sy0\">.</span><span class=\"me1\">DrawLine</span><span class=\"br0\">(</span>Pens<span class=\"sy0\">.</span><span class=\"me1\">Blue</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x1, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y1, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x2, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                x1 <span class=\"sy0\">=</span> x2<span class=\"sy0\">;</span><br/>                y1 <span class=\"sy0\">=</span> y2<span class=\"sy0\">;</span><br/>\u00a0<br/>                len <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                angle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">+</span> angleIncrement<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw1\">override</span> <span class=\"kw4\">void</span> OnPaint<span class=\"br0\">(</span>PaintEventArgs args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> args<span class=\"sy0\">.</span><span class=\"me1\">Graphics</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">SmoothingMode</span> <span class=\"sy0\">=</span> SmoothingMode<span class=\"sy0\">.</span><span class=\"me1\">AntiAlias</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span>Color<span class=\"sy0\">.</span><span class=\"me1\">White</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            DrawSpiral<span class=\"br0\">(</span>g, <span class=\"nu0\">5</span>, ToRadians<span class=\"br0\">(</span>inc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">double</span> ToRadians<span class=\"br0\">(</span><span class=\"kw4\">double</span> angle<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> angle <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 81, "block": "<pre class=\"text highlighted_source\">import javafx.application {<br/>    Application<br/>}<br/>import javafx.stage {<br/>    Stage<br/>}<br/>import javafx.animation {<br/>    AnimationTimer<br/>}<br/>import ceylon.numeric.float {<br/>    remainder,<br/>    cos,<br/>    sin,<br/>    toRadians<br/>}<br/>import javafx.scene.layout {<br/>    BorderPane<br/>}<br/>import javafx.scene.canvas {<br/>    Canvas<br/>}<br/>import javafx.scene {<br/>    Scene<br/>}<br/>import javafx.scene.paint {<br/>    Color<br/>}<br/>\u00a0<br/>shared void run() {<br/>    Application.launch(`PolySpiralApp`);<br/>}<br/>\u00a0<br/>shared class PolySpiralApp() extends Application() {<br/>\u00a0<br/>    value width = 600.0;<br/>    value height = 600.0;<br/>\u00a0<br/>    variable value incr = 0.0;<br/>\u00a0<br/>    shared actual void start(Stage primaryStage) {<br/>\u00a0<br/>        value canvas = Canvas(width, height);<br/>        value graphics = canvas.graphicsContext2D;<br/>\u00a0<br/>        object extends AnimationTimer() {<br/>\u00a0<br/>            shared actual void handle(Integer now) {<br/>\u00a0<br/>                incr = remainder(incr + 0.05, 360.0);<br/>\u00a0<br/>                variable value x = width / 2.0;<br/>                variable value y = width / 2.0;<br/>                variable value length = 5.0;<br/>                variable value angle = incr;<br/>\u00a0<br/>                graphics.fillRect(0.0, 0.0, width, height);<br/>                graphics.beginPath();<br/>                graphics.moveTo(x, y);<br/>\u00a0<br/>                for (i in 1..150) {<br/>                    value radians = toRadians(angle);<br/>                    x = x + cos(radians) * length;<br/>                    y = y + sin(radians)  * length;<br/>                    graphics.stroke = Color.hsb(angle, 1.0, 1.0);<br/>                    graphics.lineTo(x, y);<br/>                    length += 3;<br/>                    angle = remainder(angle + incr, 360.0);<br/>                }<br/>\u00a0<br/>                graphics.stroke();<br/>            }<br/>        }.start();<br/>\u00a0<br/>        value root = BorderPane();<br/>        root.center = canvas;<br/>        value scene = Scene(root);<br/>        primaryStage.title = \"poly-spiral\";<br/>        primaryStage.setScene(scene);<br/>        primaryStage.show();<br/>    }<br/>}</pre>"}, {"lang": "Gnuplot", "loc": 17, "block": "<pre class=\"gnuplot highlighted_source\">\u00a0<br/><span class=\"co1\">## plotpoly.gp 1/10/17 aev</span><br/><span class=\"co1\">## Plotting a polyspiral and writing to the png-file. </span><br/><span class=\"co1\">## Note: assign variables: rng, d, clr, filename and ttl (before using load command).</span><br/><span class=\"co1\">## Direction d (-1 clockwise / 1 counter-clockwise)</span><br/><span class=\"kw1\">reset</span><br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+terminal%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">terminal</span></a> <span class=\"kw5\">png</span> <span class=\"kw5\">font</span> arial <span class=\"nu0\">12</span> <a href=\"http://www.google.com/search?q=%22set+size%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">size</span></a> <span class=\"nu0\">640</span><span class=\"sy0\">,</span><span class=\"nu0\">640</span><br/><span class=\"re0\">ofn=</span>filename<span class=\"sy0\">.</span><span class=\"st0\">\".png\"</span><br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+output%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">output</span></a> ofn<br/><span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+border%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">border</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+xtics%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">xtics</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+ytics%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">ytics</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+key%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">key</span></a>;<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+title%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">title</span></a> ttl <span class=\"kw5\">font</span> <span class=\"st0\">\"Arial:Bold,12\"</span><br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+parametric%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">parametric</span></a><br/><span class=\"re0\">c=</span>rng<span class=\"sy0\">*</span><span class=\"kw3\">pi</span>; <span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+xrange%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">xrange</span></a><span class=\"br0\">[</span><span class=\"sy0\">-</span>c<span class=\"sy0\">:</span>c<span class=\"br0\">]</span>; <span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+yrange%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">yrange</span></a><span class=\"br0\">[</span><span class=\"sy0\">-</span>c<span class=\"sy0\">:</span>c<span class=\"br0\">]</span>;<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+dummy%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">dummy</span></a> t<br/><span class=\"kw1\">plot</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>c<span class=\"br0\">]</span> t<span class=\"sy0\">*</span><span class=\"kw4\">cos</span><span class=\"br0\">(</span>d<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"sy0\">*</span><span class=\"kw4\">sin</span><span class=\"br0\">(</span>d<span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"kw5\">lt</span> rgb @clr<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+output%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">output</span></a><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 83, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE OverloadedStrings #-}</span><br/><span class=\"kw1\">import</span> Reflex<br/><span class=\"kw1\">import</span> Reflex<span class=\"sy0\">.</span>Dom<br/><span class=\"kw1\">import</span> Reflex<span class=\"sy0\">.</span>Dom<span class=\"sy0\">.</span>Time<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Text <span class=\"br0\">(</span>Text<span class=\"sy0\">,</span> pack<span class=\"br0\">)</span> <br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Map <span class=\"br0\">(</span>Map<span class=\"sy0\">,</span> fromList<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Time<span class=\"sy0\">.</span>Clock <span class=\"br0\">(</span>getCurrentTime<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Trans <span class=\"br0\">(</span>liftIO<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Point <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Segment <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Point<span class=\"sy0\">,</span>Point<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> mainWidget <span class=\"sy0\">$</span> <span class=\"kw1\">do</span> <br/>\u00a0<br/>  <span class=\"co1\">-- An event that fires every 0.05 seconds.</span><br/>  dTick <span class=\"sy0\">&lt;-</span> tickLossy <span class=\"nu0\">0.05</span> <span class=\"sy0\">=&lt;&lt;</span> liftIO getCurrentTime <br/>\u00a0<br/>  <span class=\"co1\">-- A dynamically updating counter.</span><br/>  dCounter <span class=\"sy0\">&lt;-</span> foldDyn <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> c <span class=\"sy0\">-&gt;</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">::</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> dTick<br/>\u00a0<br/>  <span class=\"kw1\">let</span> <br/>      <span class=\"co1\">-- A dynamically updating angle.</span><br/>      dAngle <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>\\c <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> c <span class=\"sy0\">/</span> <span class=\"nu0\">800.0</span><span class=\"br0\">)</span> dCounter<br/>\u00a0<br/>      <span class=\"co1\">-- A dynamically updating spiral</span><br/>      dSpiralMap <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> toSpiralMap dAngle<br/>\u00a0<br/>      <span class=\"co1\">-- svg parameters</span><br/>      width <span class=\"sy0\">=</span> <span class=\"nu0\">600</span><br/>      height <span class=\"sy0\">=</span> <span class=\"nu0\">600</span><br/>\u00a0<br/>      boardAttrs <span class=\"sy0\">=</span> <br/>         fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"width\"</span> <span class=\"sy0\">,</span> pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> width<span class=\"br0\">)</span><br/>                  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"height\"</span><span class=\"sy0\">,</span> pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> height<span class=\"br0\">)</span><br/>                  <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"viewBox\"</span><span class=\"sy0\">,</span> pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span>width<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span>height<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> width <span class=\"sy0\">++</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> height<span class=\"br0\">)</span><br/>                  <span class=\"br0\">]</span><br/>\u00a0<br/>  elAttr <span class=\"st0\">\"h1\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"style\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"color:black\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Polyspiral\"</span> <br/>  elAttr <span class=\"st0\">\"a\"</span> <span class=\"br0\">(</span><span class=\"st0\">\"href\"</span> <span class=\"sy0\">=</span>: <span class=\"st0\">\"http://rosettacode.org/wiki/Polyspiral#Haskell\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Rosetta Code / Polyspiral / Haskell\"</span><br/>\u00a0<br/>  el <span class=\"st0\">\"br\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  elSvgns <span class=\"st0\">\"svg\"</span> <span class=\"br0\">(</span>constDyn boardAttrs<span class=\"br0\">)</span> <span class=\"br0\">(</span>listWithKey dSpiralMap showLine<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- The svg attributes needed to display a line segment.</span><br/>lineAttrs <span class=\"sy0\">::</span> Segment <span class=\"sy0\">-&gt;</span> Map Text Text<br/>lineAttrs <span class=\"br0\">(</span><span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"st0\">\"x1\"</span><span class=\"sy0\">,</span>    pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x1<span class=\"br0\">)</span><br/>           <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"y1\"</span><span class=\"sy0\">,</span>    pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y1<span class=\"br0\">)</span><br/>           <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"x2\"</span><span class=\"sy0\">,</span>    pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x2<span class=\"br0\">)</span><br/>           <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"y2\"</span><span class=\"sy0\">,</span>    pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y2<span class=\"br0\">)</span><br/>           <span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"st0\">\"style\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"stroke:blue\"</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">]</span>    <br/>\u00a0<br/><span class=\"co1\">-- Use svg to display a line segment.</span><br/>showLine <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Dynamic t Segment <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showLine <span class=\"sy0\">_</span> dSegment <span class=\"sy0\">=</span> elSvgns <span class=\"st0\">\"line\"</span> <span class=\"br0\">(</span>lineAttrs <span class=\"sy0\">&lt;$&gt;</span> dSegment<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Given a point and distance/bearing , get the next point</span><br/>advance <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Point<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Point<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>advance angle <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> rot<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> new<span class=\"sy0\">_</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> len <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> rot<br/>      new<span class=\"sy0\">_</span>y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> len <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> rot<br/>      new<span class=\"sy0\">_</span>len <span class=\"sy0\">=</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">3.0</span> <br/>      new<span class=\"sy0\">_</span>rot <span class=\"sy0\">=</span> rot <span class=\"sy0\">+</span> angle<br/>  <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>new<span class=\"sy0\">_</span>x<span class=\"sy0\">,</span> new<span class=\"sy0\">_</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span> new<span class=\"sy0\">_</span>len<span class=\"sy0\">,</span> new<span class=\"sy0\">_</span>rot<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Given an angle, generate a map of segments that form a spiral.</span><br/>toSpiralMap <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Map <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>toSpiralMap angle <span class=\"sy0\">=</span><br/>      fromList                       <span class=\"co1\">-- changes list to map (for listWithKey)</span><br/>  <span class=\"sy0\">$</span>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span>                      <span class=\"co1\">-- annotates segments with index</span><br/>  <span class=\"sy0\">$</span>   <span class=\"br0\">(</span>\\pts <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> pts <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> pts<span class=\"br0\">)</span>   <span class=\"co1\">-- from points to line segments</span><br/>  <span class=\"sy0\">$</span>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">80</span>                        <span class=\"co1\">-- limit the number of points</span><br/>  <span class=\"sy0\">$</span>   <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>pt<span class=\"sy0\">,_,_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> pt<span class=\"br0\">)</span>              <span class=\"co1\">-- cull out the (x,y) values</span><br/>  <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>advance angle<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">-- compute the spiral</span><br/>\u00a0<br/><span class=\"co1\">-- Display an element in svg namespace</span><br/>elSvgns <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Text <span class=\"sy0\">-&gt;</span> Dynamic t <span class=\"br0\">(</span>Map Text Text<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m a <span class=\"sy0\">-&gt;</span> m a<br/>elSvgns t m ma <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"br0\">(</span>el<span class=\"sy0\">,</span> val<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> elDynAttrNS<span class=\"st0\">' (Just \"http://www.w3.org/2000/svg\") t m ma<br/>    return val</span></pre>"}, {"lang": "J", "loc": 50, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'gl2 trig media/imagekit'</span><br/>coinsert <span class=\"st_h\">'jgl2'</span><br/>\u00a0<br/>DT       =:\u00a0%<span class=\"nu0\">30</span>       <span class=\"co1\">NB. seconds</span><br/>ANGLE    =: <span class=\"nu0\">0.025p1</span>   <span class=\"co1\">NB. radians</span><br/>DIRECTION=: <span class=\"nu0\">0</span>         <span class=\"co1\">NB. radians</span><br/>\u00a0<br/>POLY=: noun define<br/>  pc poly;pn \"Poly Spiral\";<br/>  minwh <span class=\"nu0\">320</span> <span class=\"nu0\">320</span>; cc isi isigraph;<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>poly_run=: verb define <br/>  wd POLY,<span class=\"st_h\">'pshow'</span><br/>  wd <span class=\"st_h\">'timer '</span>,\":DT * <span class=\"nu0\">1000</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>poly_close=: verb define<br/>  wd <span class=\"st_h\">'timer 0; pclose'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>sys_timer_z_=: verb define<br/>  recalcAngle_base_ <span class=\"st_h\">''</span><br/>  wd <span class=\"st_h\">'psel poly; set isi invalid'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>poly_isi_paint=: verb define<br/>  drawPolyspiral DIRECTION<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>recalcAngle=: verb define<br/>  DIRECTION=: <span class=\"nu0\">2p1</span> | DIRECTION + ANGLE<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>drawPolyspiral=: verb define<br/>  glclear<span class=\"st_h\">''</span><br/>  x1y1 =. <span class=\"sy0\">(</span>glqwh<span class=\"st_h\">''</span><span class=\"sy0\">)</span>%<span class=\"nu0\">2</span><br/>  a=. -DIRECTION<br/>  len=. <span class=\"nu0\">5</span><br/>  <span class=\"re0\">for_i.</span> i.<span class=\"nu0\">150</span> <span class=\"kw1\">do.</span><br/>    glpen glrgb Hue a\u00a0% <span class=\"nu0\">2p1</span><br/>    x2y2=. x1y1 + len*<span class=\"sy0\">(</span>cos,sin<span class=\"sy0\">)</span> a<br/>    gllines &lt;.x1y1,x2y2<br/>    x1y1=. x2y2<br/>    len=. len+<span class=\"nu0\">3</span><br/>    a=. <span class=\"nu0\">2p1</span> | a - DIRECTION<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>poly_run<span class=\"st_h\">''</span></pre>"}, {"lang": "Java", "loc": 62, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.ActionEvent</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PolySpiral <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> PolySpiral<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Atimer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Timer</span></a><span class=\"br0\">(</span><span class=\"nu0\">40</span>, <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aactionevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ActionEvent</span></a> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            inc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>inc <span class=\"sy0\">+</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360</span><span class=\"sy0\">;</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawSpiral<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <span class=\"kw4\">int</span> len, <span class=\"kw4\">double</span> angleIncrement<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> x1 <span class=\"sy0\">=</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> y1 <span class=\"sy0\">=</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> angle <span class=\"sy0\">=</span> angleIncrement<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">150</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> 150f, 1.0f, 1.0f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">-</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> x1, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> y1, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> x2, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            x1 <span class=\"sy0\">=</span> x2<span class=\"sy0\">;</span><br/>            y1 <span class=\"sy0\">=</span> y2<span class=\"sy0\">;</span><br/>\u00a0<br/>            len <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            angle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">+</span> angleIncrement<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawSpiral<span class=\"br0\">(</span>g, <span class=\"nu0\">5</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>inc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"PolySpiral\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> PolySpiral<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 62, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;!-- Polyspiral.html --&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;&lt;title&gt;Polyspiral Generator&lt;/title&gt;&lt;/head&gt;<br/>&lt;script&gt;<br/>// Basic function for family of Polyspirals<br/>// Where: rng - range (prime parameter), w2 - half of canvas width,<br/>//        d - direction (1 - clockwise, -1 - counter clockwise).<br/>function ppsp(ctx, rng, w2, d) {<br/>  // Note: coefficients c, it, sc, sc2, sc3 are selected to fit canvas.<br/>  var c=Math.PI*rng, it=c/w2, sc=2, sc2=50, sc3=0.1, t, x, y;<br/>  console.log(\"Polyspiral PARs rng,w2,d:\", rng, \"/\", w2, \"/\", d);<br/>  if (rng&gt;1000) {sc=sc3}<br/>  ctx.beginPath();<br/>  for(var i=0; i&lt;sc2*c; i++) {<br/>    t=it*i;<br/>    x = sc*t*Math.cos(d*t)+w2; y = sc*t*Math.sin(d*t)+w2;<br/>    ctx.lineTo(x, y);<br/>  }//fend i<br/>  ctx.stroke();<br/>}<br/>// ******************************************<br/>// pspiral() - Generating and plotting Polyspirals<br/>function pspiral() {<br/>  // Setting basic vars for canvas and inpu parameters<br/>  var cvs = document.getElementById('cvsId');<br/>  var ctx = cvs.getContext(\"2d\");<br/>  var w = cvs.width, h = cvs.height;<br/>  var w2=w/2;<br/>  var clr = document.getElementById(\"color\").value; // color<br/>  var d = document.getElementById(\"dir\").value;     // direction<br/>  var rng = document.getElementById(\"rng\").value;   // range<br/>  rng=Number(rng);<br/>  ctx.fillStyle=\"white\"; ctx.fillRect(0,0,w,h);<br/>  ctx.strokeStyle=clr;<br/>  // Plotting spiral.<br/>  ppsp(ctx, rng, w2, d)<br/>}//func end<br/>&lt;/script&gt;&lt;/head&gt;<br/>&lt;body style=\"font-family: arial, helvatica, sans-serif;\"&gt;<br/>  &lt;b&gt;Color: &lt;/b&gt;<br/>  &lt;select id=\"color\"&gt;<br/>    &lt;option value=\"red\"&gt;red&lt;/option&gt;<br/>    &lt;option value=\"darkred\" selected&gt;darkred&lt;/option&gt;<br/>    &lt;option value=\"green\"&gt;green&lt;/option&gt;<br/>    &lt;option value=\"darkgreen\"&gt;darkgreen&lt;/option&gt;<br/>    &lt;option value=\"blue\"&gt;blue&lt;/option&gt;<br/>    &lt;option value=\"navy\"&gt;navy&lt;/option&gt;<br/>    &lt;option value=\"brown\"&gt;brown&lt;/option&gt;<br/>    &lt;option value=\"maroon\"&gt;maroon&lt;/option&gt;<br/>    &lt;option value=\"black\"&gt;black&lt;/option&gt;<br/>  &lt;/select&gt;&amp;nbsp;&amp;nbsp;<br/>  &lt;b&gt;Direction: &lt;/b&gt;<br/>  &lt;input id=\"dir\" value=\"1\" type=\"number\" min=\"-1\" max=\"1\" size=\"1\"&gt;&amp;nbsp;&amp;nbsp;<br/>  &lt;b&gt;Range: &lt;/b&gt;<br/>  &lt;input id=\"rng\" value=\"10\" type=\"number\" min=\"10\" max=\"4000\" step=\"10\" size=\"4\"&gt;&amp;nbsp;&amp;nbsp;<br/>  &lt;input type=\"button\" value=\"Plot it!\" onclick=\"pspiral();\"&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;<br/>  &lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Polyspiral&lt;/h3&gt;<br/>  &lt;canvas id=\"cvsId\" width=\"640\" height=\"640\" style=\"border: 2px inset;\"&gt;&lt;/canvas&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 55, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">ActionEvent</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PolySpiral<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> inc <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        Timer<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            inc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>inc + <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360.0</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawSpiral<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, length<span class=\"sy0\">:</span> Int, angleIncrement<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x1 <span class=\"sy0\">=</span> width / <span class=\"nu0\">2.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y1 <span class=\"sy0\">=</span> height / <span class=\"nu0\">2.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> len <span class=\"sy0\">=</span> length<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> angle <span class=\"sy0\">=</span> angleIncrement       <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">150</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>i / 150f, 1.0f, 1.0f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> x1 + Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> y1 - Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x1.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, y1.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, x2.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, y2.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            x1 <span class=\"sy0\">=</span> x2<br/>            y1 <span class=\"sy0\">=</span> y2<br/>            len +<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>            angle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle + angleIncrement<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">protected</span></a> fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span> <br/>        drawSpiral<span class=\"br0\">(</span>g, <span class=\"nu0\">5</span>, Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>inc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">defaultCloseOperation</span> <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>        f.<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"PolySpiral\"</span><br/>        f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">add</span><span class=\"br0\">(</span>PolySpiral<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 23, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>window<span class=\"sy0\">.</span>setTitle<span class=\"br0\">(</span><span class=\"st0\">\"Polyspiral\"</span><span class=\"br0\">)</span><br/>    incr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>update <span class=\"br0\">(</span>dt<span class=\"br0\">)</span><br/>    incr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>incr <span class=\"sy0\">+</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360</span><br/>    x1 <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    y1 <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    length <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    angle <span class=\"sy0\">=</span> incr<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span> <span class=\"kw1\">do</span><br/>        x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"kw3\">math.cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> length<br/>        y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"kw3\">math.sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> length<br/>        love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>line<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><br/>        x1<span class=\"sy0\">,</span> y1 <span class=\"sy0\">=</span> x2<span class=\"sy0\">,</span> y2<br/>        length <span class=\"sy0\">=</span> length <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><br/>        angle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">+</span> incr<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Plot the line from x1,y1 to x2,y2.</span><br/>plotline<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span>w<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw1\">plotmove</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">plotrline</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span>x2<span class=\"sy0\">-</span>x1<span class=\"sy0\">,</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ Convert degrees to radians.</span><br/>rad2<span class=\"br0\">(</span>degs<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw1\">return</span><span class=\"br0\">(</span>degs<span class=\"sy0\">*</span><span class=\"kw1\">Pi</span><span class=\"sy0\">/</span><span class=\"nu2\">180.0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ Convert Polar coordinates to Cartesian.</span><br/>cartes2<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>rndf<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span> x<span class=\"sy0\">=</span>r<span class=\"sy0\">*</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> y<span class=\"sy0\">=</span>r<span class=\"sy0\">*</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>rndf<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">round</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 95, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Polyspiral.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas, timer<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>constant TITLE = \"Polyspiral\"<br/>\u00a0<br/>atom incr = 0<br/>bool mod360 = false<br/>\u00a0<br/>procedure Polyspiral(atom x1, y1)<br/>atom angle = incr<br/>integer len = 5<br/>    incr += 0.05<br/>    if mod360 then<br/>        incr = mod(incr,360)<br/>    end if<br/>    for i=1 to 150 do<br/>        atom x2 = x1 + cos(angle)*len<br/>        atom y2 = y1 + sin(angle)*len<br/>        cdCanvasSetForeground(cddbuffer, i*#200+i*#40+i*#10)<br/>        cdCanvasLine(cddbuffer, x1, y1, x2, y2)<br/>        {x1, y1} = {x2, y2}<br/>        len += 3<br/>        angle += incr<br/>        if mod360 then<br/>            angle = mod(angle,360)<br/>        end if<br/>    end for<br/>end procedure<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>    integer {w, h} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    cdCanvasActivate(cddbuffer)<br/>    cdCanvasClear(cddbuffer)<br/>    Polyspiral(w/2, h/2)<br/>    cdCanvasFlush(cddbuffer)<br/>    integer ms = IupGetInt(timer,\"TIME\")<br/>    IupSetStrAttribute(dlg, \"TITLE\", \"%s (timer=%d [%g FPS], angle\u00a0%3.2f%s)\",<br/>                       {TITLE,ms,1000/ms,incr,iff(mod360?\" (mod360)\":\"\")})<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function timer_cb(Ihandle /*ih*/)<br/>    IupUpdate(canvas)<br/>    return IUP_IGNORE<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_GRAY)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    if c=' ' then<br/>        IupSetInt(timer,\"RUN\",not IupGetInt(timer,\"RUN\"))<br/>    elsif find(c,\"+-\") then<br/>        -- ('+' increases speed, by decreasing TIME)<br/>        IupSetInt(timer,\"TIME\",max(10,IupGetInt(timer,\"TIME\")-(','-c)*10))<br/>        IupSetInt(timer,\"RUN\",0)<br/>        IupSetInt(timer,\"RUN\",1)<br/>    elsif upper(c)='M' then<br/>        mod360 = not mod360<br/>    end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"640x640\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    timer = IupTimer(Icallback(\"timer_cb\"), 20)<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", TITLE)<br/>    IupSetCallback(dlg, \"K_ANY\", Icallback(\"esc_close\"))<br/>\u00a0<br/>    IupShow(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "Python", "loc": 40, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw1\">import</span> pygame<br/><span class=\"kw1\">from</span> pygame.<span class=\"kw2\">locals</span> <span class=\"kw1\">import</span> *<br/>\u00a0<br/>pygame.<span class=\"me1\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>screen <span class=\"sy0\">=</span> pygame.<span class=\"me1\">display</span>.<span class=\"me1\">set_mode</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>pygame.<span class=\"me1\">display</span>.<span class=\"me1\">set_caption</span><span class=\"br0\">(</span><span class=\"st0\">\"Polyspiral\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>incr <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>running <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">while</span> running:<br/>\tpygame.<span class=\"kw3\">time</span>.<span class=\"me1\">Clock</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">tick</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> event <span class=\"kw1\">in</span> pygame.<span class=\"me1\">event</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">if</span> event.<span class=\"kw2\">type</span><span class=\"sy0\">==</span>QUIT:<br/>\t\t\trunning <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\u00a0<br/>\tincr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>incr + <span class=\"nu0\">0.05</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">360</span><br/>\tx1 <span class=\"sy0\">=</span> pygame.<span class=\"me1\">display</span>.<span class=\"me1\">Info</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">current_w</span> / <span class=\"nu0\">2</span><br/>\ty1 <span class=\"sy0\">=</span> pygame.<span class=\"me1\">display</span>.<span class=\"me1\">Info</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">current_h</span> / <span class=\"nu0\">2</span><br/>\tlength <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>\tangle <span class=\"sy0\">=</span> incr<br/>\u00a0<br/>\tscreen.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">151</span><span class=\"br0\">)</span>:<br/>\t\tx2 <span class=\"sy0\">=</span> x1 + <span class=\"kw3\">math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> * length<br/>\t\ty2 <span class=\"sy0\">=</span> y1 + <span class=\"kw3\">math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> * length<br/>\t\tpygame.<span class=\"me1\">draw</span>.<span class=\"me1\">line</span><span class=\"br0\">(</span>screen<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\"># pygame.draw.aaline(screen, (255,0,0), (x1, y1), (x2, y2)) # Anti-Aliased</span><br/>\t\tx1<span class=\"sy0\">,</span> y1 <span class=\"sy0\">=</span> x2<span class=\"sy0\">,</span> y2<br/>\t\tlength +<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\t\tangle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle + incr<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">360</span><br/>\u00a0<br/>\tpygame.<span class=\"me1\">display</span>.<span class=\"me1\">flip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(require 2htdp/universe pict racket/draw)<br/>\u00a0<br/>(define ((polyspiral width height segment-length-increment n-segments) tick/s/28)<br/>  (define turn-angle (degrees-&gt;radians (/ tick/s/28 8)))<br/>  (pict-&gt;bitmap<br/>   (dc (\u03bb (dc dx dy)<br/>         (define old-brush (send dc get-brush))<br/>         (define old-pen (send dc get-pen))<br/>         (define path (new dc-path%))<br/>         (define x (/ width #i2))<br/>         (define y (/ height #i2))<br/>         (send path move-to x y)<br/>         (for/fold ((x x) (y y) (l segment-length-increment) (a #i0))<br/>                   ((seg n-segments))<br/>           (define x\u2032 (+ x (* l (cos a))))<br/>           (define y\u2032 (+ y (* l (sin a))))<br/>           (send path line-to x y)<br/>           (values x\u2032 y\u2032 (+ l segment-length-increment) (+ a turn-angle)))<br/>         (send dc draw-path path dx dy)<br/>         (send* dc (set-brush old-brush) (set-pen old-pen)))<br/>       width height)))<br/>\u00a0<br/>(animate (polyspiral 400 400 2 1000))</pre>"}, {"lang": "Ring", "loc": 57, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Polyspiral<br/>\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>paint = null<br/>incr = 1<br/>x1 = 1000<br/>y1 = 1080<br/>angle = 10<br/>length = 10<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"\")<br/>                  setgeometry(10,10,1000,1080)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,1000,1080)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(150,30,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>        for i = 1 to 150 <br/>             x2 = x1 + cos(angle) * length<br/>             y2 = y1 + sin(angle) * length<br/>             drawline(x1, y1, x2, y2)<br/>             x1 = x2<br/>             y1 = y2<br/>             length = length + 3<br/>             angle = (angle + incr)\u00a0% 360<br/>        next<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 55, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">ActionEvent</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PolySpiral <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"PolySpiral\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PolySpiral <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> inc <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawSpiral<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, l<span class=\"sy0\">:</span> Int, angleIncrement<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> len <span class=\"sy0\">=</span> l<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>getWidth / 2d, getHeight / 2d<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> angle <span class=\"sy0\">=</span> angleIncrement<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until <span class=\"nu0\">150</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>i / 150f, 1.0f, 1.0f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> x1 + math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> y1 - math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<br/>              g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x1.<span class=\"me1\">toInt</span>, y1.<span class=\"me1\">toInt</span>, x2.<span class=\"me1\">toInt</span>, y2.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>              x1 <span class=\"sy0\">=</span> x2<br/>              y1 <span class=\"sy0\">=</span> y2<br/>              len +<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>              angle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>angle + angleIncrement<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>math.<span class=\"me1\">Pi</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>          g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>          drawSpiral<span class=\"br0\">(</span>g, <span class=\"nu0\">5</span>, math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>inc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>        setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Timer<span class=\"br0\">(</span><span class=\"nu0\">40</span>, <span class=\"br0\">(</span><span class=\"sy0\">_:</span> ActionEvent<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          inc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>inc + <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">360</span><br/>          repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PolySpiral, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPL", "loc": 22, "block": "<pre class=\"text highlighted_source\">width,height = #.scrsize()<br/>#.angle(#.degrees)<br/>#.scroff()<br/>incr = 0<br/>&gt;<br/>  incr = (incr+0.05)%360<br/>  x = width/2<br/>  y = height/2<br/>  length = 5<br/>  angle = incr<br/>  #.scrclear()<br/>  #.drawline(x,y,x,y)<br/>  &gt; i, 1..150<br/>    x += length*#.cos(angle)<br/>    y += length*#.sin(angle)<br/>    #.drawcolor(#.hsv2rgb(angle,1,1):3)<br/>    #.drawline(x,y)<br/>    length += 3<br/>    angle = (angle+incr)%360<br/>  &lt;<br/>  #.scr()<br/>&lt;</pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">w,h:=640,640;<br/>bitmap:=PPM(w,h,0xFF|FF|FF);  // White background<br/>angleIncrement:=(3.0).toRad();<br/>while(True){<br/>   r,angle:=0.0, 0.0;<br/>   ao,len,inc:=w/2, 2.5, angleIncrement+(130.0).toRad();<br/>   foreach c in (128){<br/>      s,a:=r + len, angle + inc;<br/>      x,y:=r.toRectangular(angle);<br/>      u,v:=r.toRectangular(a);<br/>      c=c.shiftLeft(21) + c.shiftLeft(10) + c*8;  // convert c to a RGB<br/>      bitmap.line(ao+x,ao+y, ao+u,ao+v, c);<br/>      r,angle=s,a;<br/>   }<br/>   bitmap.writeJPGFile(\"polyspiral.zkl.jpg\");<br/>   bitmap.fill(0xFF|FF|FF);  // White background<br/>   angleIncrement=(angleIncrement + 0.05);<br/>   Atomic.sleep(3);<br/>}</pre>"}]}