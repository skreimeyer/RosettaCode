{"task": "Compare_a_list_of_strings", "blocks": [{"lang": "360 Assembly", "loc": 88, "block": "<pre class=\"text highlighted_source\">*        Compare a list of strings 31/01/2017<br/>COMPLIST CSECT<br/>         USING  COMPLIST,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \" &lt;-<br/>         ST     R15,8(R13)         \" -&gt;<br/>         LR     R13,R15            \" addressability<br/>         MVC    SNAME,=C'ABC'<br/>         LA     R1,SNAME<br/>         LA     R2,ABC<br/>         BAL    R14,TEST           call test('ABC',abc)<br/>         MVC    SNAME,=C'AAA'<br/>         LA     R1,SNAME<br/>         LA     R2,AAA<br/>         BAL    R14,TEST           call test('AAA',aaa)<br/>         MVC    SNAME,=C'ACB'<br/>         LA     R1,SNAME<br/>         LA     R2,ACB<br/>         BAL    R14,TEST           call test('ACB',acb)     <br/>         L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \" restore<br/>         XR     R15,R15            \" rc=0<br/>         BR     R14                exit<br/>*------- ----   test(name,xlist) -----------------------<br/>TEST     MVC    NAME,0(R1)         store argument #1<br/>         MVC    XLIST(6),0(R2)     store argument #2<br/>         MVI    ALLEQ,X'01'        alleq=true<br/>         MVI    INCRE,X'01'        incre=true<br/>         LA     R6,1               i=1<br/>LOOPI    LA     R2,NXLIST          hbound(xlist)<br/>         BCTR   R2,0               -1<br/>         CR     R6,R2              do i to hbound(xlist)-1<br/>         BH     ELOOPI<br/>         MVC    XBOOL,ALLEQ<br/>         OC     XBOOL,INCRE        or<br/>         CLI    XBOOL,X'01'        and while alleq or incre<br/>         BNE    ELOOPI<br/>         LA     R2,1(R6)           i+1<br/>         SLA    R2,1               *2<br/>         LA     R3,XLIST-2(R2)     @xlist(i+1)<br/>         LR     R1,R6              i<br/>         SLA    R1,1               *2<br/>         LA     R4,XLIST-2(R1)     @xlist(i)<br/>         CLC    0(2,R3),0(R4)      if xlist(i+1)=xlist(i)<br/>         BNE    SEL1B<br/>         MVI    INCRE,X'00'        incre=false<br/>         B      SEL1END<br/>SEL1B    CLC    0(2,R3),0(R4)      if xlist(i+1)&lt;xlist(i)<br/>         BNL    SEL1OTH<br/>         MVI    INCRE,X'00'        incre=false<br/>         MVI    ALLEQ,X'00'        alleq=false<br/>         B      SEL1END<br/>SEL1OTH  MVI    ALLEQ,X'00'        alleq=false<br/>SEL1END  LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   CLI    ALLEQ,X'01'        if alleq<br/>         BNE    SEL2B<br/>         MVC    TXT,=CL40'all elements are equal'<br/>         B      SEL2END<br/>SEL2B    CLI    INCRE,X'01'        if incre<br/>         BNE    SEL2OTH<br/>         MVC    TXT,=CL40'elements are in increasing order'<br/>         B      SEL2END<br/>SEL2OTH  MVC    TXT,=CL40'neither equal nor in increasing order'<br/>SEL2END  MVI    PG,C' '<br/>         MVC    PG+1(79),PG        clear buffer<br/>         MVC    PG(3),NAME<br/>         MVC    PG+3(3),=C'\u00a0: '<br/>         MVC    PG+6(40),TXT<br/>         XPRNT  PG,L'PG<br/>         BR     R14                return to caller<br/>*        ----   ----------------------------------------<br/>SNAME    DS     CL3<br/>ABC      DC     CL2'AA',CL2'BB',CL2'CC'<br/>AAA      DC     CL2'AA',CL2'AA',CL2'AA'<br/>ACB      DC     CL2'AA',CL2'CC',CL2'BB'<br/>NAME     DS     CL3<br/>XLIST    DS     3CL2<br/>NXLIST   EQU    (*-XLIST)/L'XLIST<br/>ALLEQ    DS     X<br/>INCRE    DS     X<br/>TXT      DS     CL40<br/>XBOOL    DS     X<br/>PG       DS     CL80<br/>         YREGS<br/>         END    COMPLIST</pre>"}, {"lang": "Ada", "loc": 4, "block": "<pre class=\"ada highlighted_source\">  <span class=\"kw3\">package</span> String_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span><br/>     <span class=\"br0\">(</span>Index_Type =&gt; Positive, Element_Type =&gt; String<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> String_Vec.<span class=\"me1\">Vector</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 40, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list1 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"AA\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"BB\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"CC\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"AA\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"AA\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"AA\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list3 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"AA\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"CC\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"BB\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list4 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"AA\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"ACB\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"BB\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"CC\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list5 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"single_element\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> all lists to test <span class=\"sy1\">=</span> <span class=\"br0\">(</span>list1<span class=\"sy1\">,</span> list2<span class=\"sy1\">,</span> list3<span class=\"sy1\">,</span> list4<span class=\"sy1\">,</span> list5<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> equal <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">BOOL</span> ok <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"sy1\">-</span> 1 <span class=\"kw2\">WHILE</span> ok <span class=\"kw2\">DO</span><br/>\t ok <span class=\"sy1\">:=</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> list<span class=\"br0\">[</span>i<span class=\"sy1\">+</span>1<span class=\"br0\">]</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      ok<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> less than <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">BOOL</span> ok <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"sy1\">-</span> 1 <span class=\"kw2\">WHILE</span> ok <span class=\"kw2\">DO</span><br/>\t ok <span class=\"sy1\">:=</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> list<span class=\"br0\">[</span>i <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      ok<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> all lists to test <span class=\"kw2\">DO</span><br/>   <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list <span class=\"sy1\">=</span> all lists to test<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"list:\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> list <span class=\"kw2\">DO</span> s <span class=\"sy1\">+:=</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">+</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span> s<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">IF</span> equal <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"...is lexically equal\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"...is not lexically equal\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">IF</span> less than <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"...is in strict ascending order\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"...is not in strict ascending order\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 36, "block": "<pre class=\"text highlighted_source\">   \u00a0% returns true if all elements of the string array a are equal, false otherwise\u00a0%<br/>   \u00a0% As Algol W procedures cannot determine the bounds of an array, the bounds    \u00a0%<br/>   \u00a0% must be specified in lo and hi                                               \u00a0%<br/>    logical procedure allStringsEqual ( string(256) array a ( * )<br/>                                     \u00a0; integer     value lo, hi<br/>                                      )\u00a0;<br/>    begin<br/>        logical same;<br/>        integer listPos;<br/>        same   \u00a0:= true;<br/>        listPos\u00a0:= lo + 1;<br/>        while same and listPos &lt;= hi do begin<br/>            same   \u00a0:= a( lo ) = a( listPos );<br/>            listPos\u00a0:= listPos + 1<br/>        end;<br/>        same<br/>    end allStringsEqual\u00a0;<br/>\u00a0<br/>   \u00a0% returns true if the elements of the string array a are in ascending order,   \u00a0%<br/>   \u00a0% false otherwise                                                              \u00a0%<br/>   \u00a0% As Algol W procedures cannot determine the bounds of an array, the bounds    \u00a0%<br/>   \u00a0% must be specified in lo and hi                                               \u00a0%<br/>    logical procedure ascendingOrder  ( string(256) array a ( * )<br/>                                     \u00a0; integer     value lo, hi<br/>                                      )\u00a0;<br/>    begin<br/>        logical ordered;<br/>        integer listPos;<br/>        ordered\u00a0:= true;<br/>        listPos\u00a0:= lo + 1;<br/>        while ordered and listPos &lt;= hi do begin<br/>            ordered\u00a0:= a( listPos - 1 ) &lt; a( listPos );<br/>            listPos\u00a0:= listPos + 1<br/>        end;<br/>        ordered<br/>    end ascendingOrder\u00a0;</pre>"}, {"lang": "AppleScript", "loc": 109, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- allEqual\u00a0:: [String] -&gt; Bool</span><br/><span class=\"kw3\">on</span> allEqual<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    _and<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span><span class=\"kw3\">my</span> _equal, xs, rest <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> allEqual<br/>\u00a0<br/><span class=\"co1\">-- azSorted\u00a0:: [String] -&gt; Bool</span><br/><span class=\"kw3\">on</span> azSorted<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    _and<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span><span class=\"kw3\">my</span> azBeforeOrSame, xs, rest <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> azSorted<br/>\u00a0<br/><span class=\"co1\">-- _equal\u00a0:: a -&gt; a -&gt; Bool</span><br/><span class=\"kw3\">on</span> _equal<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span> b<br/><span class=\"kw3\">end</span> _equal<br/>\u00a0<br/><span class=\"co1\">-- azBefore\u00a0:: String -&gt; String -&gt; Bool</span><br/><span class=\"kw3\">on</span> azBeforeOrSame<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a \u2265 b<br/><span class=\"kw3\">end</span> azBeforeOrSame<br/>\u00a0<br/><span class=\"co1\">-- _and\u00a0:: [a] -&gt; Bool</span><br/><span class=\"kw3\">on</span> _and<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    foldr<span class=\"br0\">(</span>_equal, <span class=\"kw1\">true</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> _and<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> lstA <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"isiZulu\"</span>, <span class=\"st0\">\"isiXhosa\"</span>, <span class=\"st0\">\"isiNdebele\"</span>, <span class=\"st0\">\"Xitsonga\"</span>, <span class=\"st0\">\"Tshivenda\"</span>, \u00ac<br/>        <span class=\"st0\">\"Setswana\"</span>, <span class=\"st0\">\"Sesotho sa Leboa\"</span>, <span class=\"st0\">\"Sesotho\"</span>, <span class=\"st0\">\"English\"</span>, <span class=\"st0\">\"Afrikaans\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> lstB <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"Afrikaans\"</span>, <span class=\"st0\">\"English\"</span>, <span class=\"st0\">\"Sesotho\"</span>, <span class=\"st0\">\"Sesotho sa Leboa\"</span>, <span class=\"st0\">\"Setswana\"</span>, \u00ac<br/>        <span class=\"st0\">\"Tshivenda\"</span>, <span class=\"st0\">\"Xitsonga\"</span>, <span class=\"st0\">\"isiNdebele\"</span>, <span class=\"st0\">\"isiXhosa\"</span>, <span class=\"st0\">\"isiZulu\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> lstC <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, \u00ac<br/>        <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span>, <span class=\"st0\">\"alpha\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"br0\">{</span>allEqual:map<span class=\"br0\">(</span>allEqual, <span class=\"br0\">[</span>lstA, lstB, lstC<span class=\"br0\">]</span><span class=\"br0\">)</span>, azSorted:map<span class=\"br0\">(</span>azSorted, <span class=\"br0\">[</span>lstA, lstB, lstC<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">-- &gt; {allEqual:{false, false, true}, azSorted:{false, true, true}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS</span><br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> lambda<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> lambda<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> nx <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">set</span> ny <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> ys<br/>    <span class=\"kw3\">if</span> nx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> ny <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> cond<span class=\"br0\">(</span>nx <span class=\"sy0\">&lt;</span> ny, nx, ny<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> lambda<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>            <span class=\"kw3\">return</span> lst<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> zipWith<br/>\u00a0<br/><span class=\"co1\">-- cond\u00a0:: Bool -&gt; (a -&gt; b) -&gt; (a -&gt; b) -&gt; (a -&gt; b)</span><br/><span class=\"kw3\">on</span> cond<span class=\"br0\">(</span>bool, f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        g<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> cond<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> lambda\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AWK", "loc": 29, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f COMPARE_A_LIST_OF_STRINGS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"AA,BB,CC\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"AA,AA,AA\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"AA,CC,BB\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"AA,ACB,BB,CC\"</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"single_element\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>list,  arr,i,n,test1,test2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    test1 = <span class=\"nu0\">1</span> <span class=\"co1\"># elements are identical</span><br/>    test2 = <span class=\"nu0\">1</span> <span class=\"co1\"># elements are in ascending order</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>list,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>list:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">!=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          test1 = <span class=\"nu0\">0</span> <span class=\"co1\"># elements are not identical</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">&gt;=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          test2 = <span class=\"nu0\">0</span> <span class=\"co1\"># elements are not in ascending order</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%d<span class=\"es0\">\\n</span>%d<span class=\"es0\">\\n</span>\"</span>,test1,test2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> strings_are_equal<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span> strings<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nstrings<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>result <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>nstrings <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    result <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>strings<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>strings<span class=\"sy0\">+</span>nstrings<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> strings_are_in_ascending_order<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"sy0\">*</span> strings<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nstrings<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>result <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>k <span class=\"sy0\">&lt;</span> nstrings<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&gt;=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>strings<span class=\"sy0\">+</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>strings<span class=\"sy0\">+</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"br0\">(</span><span class=\"kw4\">bool</span> lexicallyEqual, <span class=\"kw4\">bool</span> strictlyAscending<span class=\"br0\">)</span> CompareAListOfStrings<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> strings<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    strings<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span>, <span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>    <span class=\"br0\">(</span><br/>        strings<span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>,<br/>        Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, strings<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">All</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Compare</span><span class=\"br0\">(</span>strings<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, strings<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">all_of</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span><span class=\"br0\">(</span>strings.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, strings.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>             <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy1\">==</span> strings.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span>  <span class=\"co1\">// All equal</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">is_sorted</span><span class=\"br0\">(</span> strings.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, strings.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> a, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span>b <span class=\"sy1\">&lt;</span> a<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"co1\">// Strictly ascending</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> strings<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"AA AA AA AA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AA ACB BB CC\"</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>split<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        strings.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        strings.<span class=\"me1\">zip</span><span class=\"br0\">(</span>strings.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ab <span class=\"sy0\">=&gt;</span> ab<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> ab<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        strings.<span class=\"me1\">zip</span><span class=\"br0\">(</span>strings.<span class=\"me1\">dropOne</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ab <span class=\"sy0\">=&gt;</span> ab<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> ab<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co1\">;; Checks if all items in strings list are equal (returns true if list is empty)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">every?</span>\t<span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a nexta<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> a nexta<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> strings <span class=\"br0\">(</span><span class=\"kw1\">rest</span> strings<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Checks strings list is in ascending order (returns true if list is empty)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">every?</span>\t<span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a nexta<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>compare a nexta<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> strings <span class=\"br0\">(</span><span class=\"kw1\">rest</span> strings<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> strings-equal-p <span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">remove</span> <span class=\"br0\">(</span>first strings<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest strings<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">test</span> #'string<span class=\"sy0\">=</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> strings-ascending-p <span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for string1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>first strings<span class=\"br0\">)</span> then string2<br/>        for string2 in <span class=\"br0\">(</span>rest strings<span class=\"br0\">)</span><br/>        always <span class=\"br0\">(</span>string-lessp string1 string2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 31, "block": "<pre class=\"text highlighted_source\">import system'collections.<br/>import system'routines.<br/>import extensions.<br/>\u00a0<br/>extension helper<br/>{<br/>    isEqual<br/>        = nil == self seekFor(self firstMember) eachPair(:n:m)( m equal:n; inverted ).<br/>\u00a0<br/>    isAscending<br/>    [<br/>        var former\u00a0:= self enumerator.<br/>        var later\u00a0:= self enumerator.<br/>\u00a0<br/>        later next.<br/>\u00a0<br/>        ^ nil == former zip:later by(:prev:next)( next &lt;= prev ); seekEach(:b)( b )<br/>    ]<br/>}<br/>\u00a0<br/>public program =<br/>[<br/>    ((\"AA\",\"BB\",\"CC\"),(\"AA\",\"AA\",\"AA\"),(\"AA\",\"CC\",\"BB\"),(\"AA\",\"ACB\",\"BB\",\"CC\"),List new; append:\"single_element\")<br/>        forEach(:list)<br/>        [<br/>            console printLine(list,\" all equal - \",list isEqual).<br/>            console printLine(list,\" ascending - \",list isAscending)<br/>        ].<br/>\u00a0<br/>    console readChar.            <br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def compare_strings(strings) do<br/>    {length(Enum.uniq(strings))&lt;=1, strict_ascending(strings)}<br/>  end<br/>\u00a0<br/>  defp strict_ascending(strings) when length(strings) &lt;= 1, do: true<br/>  defp strict_ascending([first, second | _]) when first &gt;= second, do: false<br/>  defp strict_ascending([_, second | rest]), do: strict_ascending([second | rest])<br/>end<br/>\u00a0<br/>lists = [ ~w(AA AA AA AA), ~w(AA ACB BB CC), ~w(AA CC BB), [], [\"XYZ\"] ]<br/>Enum.each(lists, fn list -&gt;<br/>  IO.puts \"#{inspect RC.compare_strings(list)}\\t&lt;= #{inspect list} \"<br/>end)</pre>"}, {"lang": "Erlang", "loc": 14, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>compare_strings<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>all_equal<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>all_incr<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_equal</span><span class=\"br0\">(</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">all_fulfill</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">S1</span> <span class=\"sy3\">==</span> <span class=\"re5\">S2</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_incr</span><span class=\"br0\">(</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">all_fulfill</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">S1</span><span class=\"sy1\">,</span><span class=\"re5\">S2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">S1</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">S2</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">all_fulfill</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">all</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zipwith</span><span class=\"br0\">(</span><span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">droplast</span><span class=\"br0\">(</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">tl</span><span class=\"br0\">(</span><span class=\"re5\">Strings</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> allEqual strings <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">isEmpty</span> strings || <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">head</span> strings<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">tail</span> strings<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> ascending strings <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">isEmpty</span> strings || <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">forall2</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x y <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">&lt;</span> y<span class=\"br0\">)</span> strings <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">tail</span> strings<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USE: grouping<br/>all-equal?</pre>"}, {"lang": "Forth", "loc": 42, "block": "<pre class=\"text highlighted_source\">\\ linked list of strings creators<br/>: ,\"       ( -- )  [CHAR] \" WORD  <a class=\"__cf_email__\" data-cfemail=\"721132\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1+ ALLOT \u00a0;             \\ Parse input stream until \" and write into next available memory<br/>: [[       ( -- )  0 C,\u00a0;                                    \\ begin a list. write a 0 into next memory byte (null string)<br/>: ]]       ( -- )  [[\u00a0;                                      \\ end list with same null string<br/>\u00a0<br/>: nth      ( n list -- addr) swap 0 do count + loop\u00a0;        \\ return address of the Nth item in a list<br/>\u00a0<br/>: items    ( list -- n )                                     \\ return the number of items in a list<br/>           0<br/>           begin<br/>              1+ 2dup swap Nth <a class=\"__cf_email__\" data-cfemail=\"9ddedd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>           0= until<br/>           nip 1-\u00a0;<br/>\u00a0<br/>: compare$ ( $1 $2 -- -n|0|n )  count rot count compare\u00a0;    \\ compare is an ANS Forth word. returns 0 if $1=$2<br/>\u00a0<br/>: compare[]   ( list n1 n2 -- flag)                          \\ compare items n1 and n2 in list<br/>            ROT dup &gt;R nth ( -- $1)<br/>            swap r&gt; nth    ( -- $1 $2)<br/>            compare$\u00a0;<br/>\u00a0<br/>\\ create our lexical operators<br/>: LEX=     ( list -- flag)<br/>           0                                                 \\ place holder for the flag<br/>           over items 1<br/>           DO<br/>              over I  I 1+ compare[] +                       \\ we sum the comparison results on the stack<br/>           LOOP<br/>           nip 0=\u00a0;<br/>\u00a0<br/>: LEX&lt;     ( list -- flag)<br/>           0                                                 \\ place holder for the flag<br/>           over items 1<br/>           DO<br/>              over I  I 1+ compare[] 0&lt; NOT +<br/>           LOOP<br/>           nip 0=\u00a0;<br/>\u00a0<br/>\\ make some lists<br/>create strings  [[ ,\" ENTRY 4\" ,\" ENTRY 3\" ,\" ENTRY 2\" ,\" ENTRY 1\" ]]<br/>create strings2 [[ ,\" the same\" ,\" the same\" ,\" the same\" ]]<br/>create strings3 [[ ,\" AAA\" ,\" BBB\" ,\" CCC\" ,\" DDD\" ]] </pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: test-equality ( string node -- new-string bad? ) <br/>    over count                          \\ -- string node adr cnt <br/>    rot .line @ count   compare\u00a0; <br/>\u00a0<br/>: test-ascending ( string node -- new-string bad? ) <br/>    .line @ &gt;r <br/>    count  <a class=\"__cf_email__\" data-cfemail=\"1c6e5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> count     compare -1 &lt;&gt;   \\ -- bad? <br/>    r&gt; swap\u00a0; <br/>\u00a0<br/>: test-seq { seq 'test -- flag }        \\ 'TEST picture: string node -- new-string bad? <br/>     seq length 2 &lt; if  true exit then <br/>     seq .line @  seq 2nd  'test  find-node <br/>     nip  0=\u00a0; <br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 20, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw3\">INTEGER</span> MANY,LONG<br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>LONG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>,MANY <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Adjust to suit.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>LONG<span class=\"br0\">)</span> STRINGS<span class=\"br0\">(</span>MANY<span class=\"br0\">)</span>\t<span class=\"co1\">!A list of text strings.</span><br/>      STRINGS<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Fee\"</span><br/>      STRINGS<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Fie\"</span><br/>      STRINGS<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Foe\"</span><br/>      STRINGS<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Fum\"</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ALL</span><span class=\"br0\">(</span>STRINGS<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>MANY <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">LT</span>.</span> STRINGS<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>MANY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> MANY,<span class=\"st0\">\" strings: strictly increasing in order.\"</span><br/>       <span class=\"kw1\">ELSE</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> MANY,<span class=\"st0\">\" strings: not strictly increasing in order.\"</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ALL</span><span class=\"br0\">(</span>STRINGS<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>MANY <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> STRINGS<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>MANY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> MANY,<span class=\"st0\">\" strings: all equal.\"</span><br/>       <span class=\"kw1\">ELSE</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> MANY,<span class=\"st0\">\" strings: not all equal.\"</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 21, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> AllEqual<span class=\"br0\">(</span>strings<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>   <span class=\"kw1\">Dim</span> length <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>     <span class=\"kw1\">If</span> strings<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt;&gt; strings<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">Next</span><br/>   <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> AllAscending<span class=\"br0\">(</span>strings<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>   <span class=\"kw1\">Dim</span> length <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">If</span> length &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>     <span class=\"kw1\">If</span> strings<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt;= strings<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">Next</span><br/>   <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> cmp<br/>\u00a0<br/><span class=\"kw4\">func</span> AllEqual<span class=\"sy1\">(</span>strings <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strings<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfirst <span class=\"sy2\">:=</span> strings<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> strings<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> s <span class=\"sy2\">!=</span> first <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> AllLessThan<span class=\"sy1\">(</span>strings <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strings<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tlast <span class=\"sy2\">:=</span> strings<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> strings<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span>last &lt; s<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tlast <span class=\"sy2\">=</span> s<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gosu", "loc": 4, "block": "<pre class=\"text highlighted_source\">var list = {\"a\", \"b\", \"c\", \"d\"}<br/>\u00a0<br/>var isHomogeneous = list.toSet().Count &lt; 2 <br/>var isOrderedSet = list.toSet().order().toList() == list</pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\">allEqual <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>allEqual xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> xs <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> xs<span class=\"br0\">)</span><br/>\u00a0<br/>allIncr <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>allIncr xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"br0\">)</span> xs <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> xs<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   allEq =: <span class=\"nu0\">1</span> = +/@~:     <span class=\"co1\">NB. or 1 = #@:~. or -: 1&amp;|. or }.-:}:</span></pre>"}, {"lang": "Java", "loc": 13, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> CompareListOfStrings <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">\"AA\"</span>, <span class=\"st0\">\"AA\"</span>, <span class=\"st0\">\"AA\"</span>, <span class=\"st0\">\"AA\"</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"AA\"</span>, <span class=\"st0\">\"ACB\"</span>, <span class=\"st0\">\"BB\"</span>, <span class=\"st0\">\"CC\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a\u00a0: arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%n%s%n%s%n\"</span>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span>,<br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">stream</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> allEqual<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> out <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  while <span class=\"br0\">(</span><span class=\"sy0\">++</span>i<span class=\"sy0\">&lt;</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    out <span class=\"sy0\">=</span> out <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> azSorted<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> out <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  while <span class=\"br0\">(</span><span class=\"sy0\">++</span>i<span class=\"sy0\">&lt;</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    out <span class=\"sy0\">=</span> out <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'AA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'AA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'AA'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ACB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CC'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> empty <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> single <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'AA'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>allEqual<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>allEqual<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// false</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>allEqual<span class=\"br0\">(</span>empty<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>allEqual<span class=\"br0\">(</span>single<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>azSorted<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// false</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>azSorted<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>azSorted<span class=\"br0\">(</span>empty<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>azSorted<span class=\"br0\">(</span>single<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\"># Are the strings all equal?<br/>def lexically_equal:<br/>  . as $in<br/>  | reduce range(0;length-1) as $i<br/>      (true; if . then $in[$i] == $in[$i + 1] else false end);<br/>\u00a0<br/># Are the strings in strictly ascending order?<br/>def lexically_ascending:<br/>  . as $in<br/>  | reduce range(0;length-1) as $i<br/>      (true; if . then $in[$i] &lt; $in[$i + 1] else false end);</pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">allequal(arr::AbstractArray) = isempty(arr) || all(x -&gt; x == first(arr), arr)<br/>\u00a0<br/>test = [[\"RC\", \"RC\", \"RC\"], [\"RC\", \"RC\", \"Rc\"], [\"RA\", \"RB\", \"RC\"],<br/>       [\"RC\"], String[], ones(Int64, 4), 1:4]<br/>\u00a0<br/>for v in test<br/>    println(\"\\n# Testing $v:\")<br/>    println(\"The elements are $(\"not \" ^\u00a0!allequal(v))all equal.\")<br/>    println(\"The elements are $(\"not \" ^\u00a0!issorted(v))strictly increasing.\")<br/>end</pre>"}, {"lang": "Klong", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    {:[2&gt;#x;1;&amp;/=:'x]}:([\"test\" \"test\" \"test\"])<br/>1<br/>    {:[2&gt;#x;1;&amp;/&lt;:'x]}:([\"bar\" \"baz\" \"foo\"])<br/>1<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun areEqual<span class=\"br0\">(</span>strings<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>strings.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span> until strings.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">none</span> <span class=\"br0\">{</span> strings<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> strings<span class=\"br0\">[</span>it - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun areAscending<span class=\"br0\">(</span>strings<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>strings.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span> until strings.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">none</span> <span class=\"br0\">{</span> strings<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> strings<span class=\"br0\">[</span>it - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// The strings are given in the command line arguments</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The strings are\u00a0: ${args.joinToString()}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>areEqual<span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"They are all equal\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>areAscending<span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"They are in strictly ascending order\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"They are neither equal nor in ascending order\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 40, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> identical<span class=\"br0\">(</span>t_str<span class=\"br0\">)</span><br/>    _<span class=\"sy0\">,</span> fst <span class=\"sy0\">=</span> <span class=\"kw3\">next</span><span class=\"br0\">(</span>t_str<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> fst <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> i <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t_str<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">~=</span> fst <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ascending<span class=\"br0\">(</span>t_str<span class=\"br0\">)</span><br/>    prev <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> i <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t_str<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> prev <span class=\"kw2\">and</span> prev <span class=\"sy0\">&gt;=</span> i <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>        prev <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> check<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    t_str <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw2\">in</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>gmatch<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"st0\">\"[%a_]+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>t_str<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\": \"</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> identical<span class=\"br0\">(</span>t_str<span class=\"br0\">)</span> <span class=\"kw1\">then</span> str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\"not \"</span> <span class=\"kw1\">end</span><br/>    str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\"identical and \"</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> ascending<span class=\"br0\">(</span>t_str<span class=\"br0\">)</span> <span class=\"kw1\">then</span> str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\"not \"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>str <span class=\"sy0\">..</span> <span class=\"st0\">\"ascending.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>check<span class=\"br0\">(</span><span class=\"st0\">\"ayu dab dog gar panda tui yak\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"oy oy oy oy oy oy oy oy oy oy\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"somehow   somewhere  sometime\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"Hoosiers\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"AA,BB,CC\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"AA,AA,AA\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"AA,CC,BB\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"AA,ACB,BB,CC\"</span><span class=\"br0\">)</span><br/>check<span class=\"br0\">(</span><span class=\"st0\">\"single_element\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 17, "block": "<pre class=\"text highlighted_source\">lexEqual\u00a0:= proc(lst)<br/>\tlocal i:<br/>\tfor i from 2 to numelems(lst) do<br/>\t\tif lst[i-1] &lt;&gt; lst[i] then return false: fi:<br/>\tod:<br/>\treturn true:<br/>end proc:<br/>lexAscending\u00a0:= proc(lst)<br/>\tlocal i:<br/>\tfor i from 2 to numelems(lst) do<br/>\t\tif StringTools:-Compare(lst[i],lst[i-1]) then return false: fi:<br/>\tod:<br/>\treturn true:<br/>end proc:<br/>tst\u00a0:= [\"abc\",\"abc\",\"abc\",\"abc\",\"abc\"]:<br/>lexEqual(tst):<br/>lexAscending(tst):</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">data1 = {\"aaa\", \"aaa\", \"aab\"};<br/>Apply[Equal, data]<br/>OrderedQ[data]</pre>"}, {"lang": "NetRexx", "loc": 47, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isEqual<span class=\"br0\">(</span>list = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  state = boolean <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- default to true</span><br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> while ix <span class=\"sy0\">&lt;</span> list.<span class=\"me0\">length</span><br/>    state = list<span class=\"br0\">[</span>ix - <span class=\"nu0\">1</span><span class=\"br0\">]</span> == list<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>state <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> ix<br/>    <span class=\"kw3\">end</span> ix<br/>  <span class=\"kw1\">return</span> state<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method isAscending<span class=\"br0\">(</span>list = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  state = boolean <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- default to true</span><br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">1</span> while ix <span class=\"sy0\">&lt;</span> list.<span class=\"me0\">length</span><br/>    state = list<span class=\"br0\">[</span>ix - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> list<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>state <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> ix<br/>    <span class=\"kw3\">end</span> ix<br/>  <span class=\"kw1\">return</span> state<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  samples = <span class=\"br0\">[</span> -<br/>      <span class=\"br0\">[</span><span class=\"st0\">'AA'</span>, <span class=\"st0\">'BB'</span>, <span class=\"st0\">'CC'</span><span class=\"br0\">]</span> -<br/>    , <span class=\"br0\">[</span><span class=\"st0\">'AA'</span>, <span class=\"st0\">'AA'</span>, <span class=\"st0\">'AA'</span><span class=\"br0\">]</span> -<br/>    , <span class=\"br0\">[</span><span class=\"st0\">'AA'</span>, <span class=\"st0\">'CC'</span>, <span class=\"st0\">'BB'</span><span class=\"br0\">]</span> -<br/>    , <span class=\"br0\">[</span><span class=\"st0\">'single_element'</span><span class=\"br0\">]</span> -<br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">0</span> while ix <span class=\"sy0\">&lt;</span> samples.<span class=\"me0\">length</span><br/>    sample = samples<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> isEqual<span class=\"br0\">(</span>sample<span class=\"br0\">)</span>     <span class=\"kw3\">then</span> eq  = <span class=\"st0\">'elements are identical'</span><br/>                           <span class=\"kw3\">else</span> eq  = <span class=\"st0\">'elements are not identical'</span><br/>    <span class=\"kw1\">if</span> isAscending<span class=\"br0\">(</span>sample<span class=\"br0\">)</span> <span class=\"kw3\">then</span> asc = <span class=\"st0\">'elements are in ascending order'</span><br/>                           <span class=\"kw3\">else</span> asc = <span class=\"st0\">'elements are not in ascending order'</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'List:'</span> Arrays.<span class=\"kw6\">toString</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'  '</span>eq<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'  '</span>asc<br/>    <span class=\"kw3\">end</span> ix<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> analyze cmp l  <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> analyze<span class=\"sy0\">'</span> l prevs <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> l <span class=\"kw1\">with</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> cmp prevs s<br/>    <span class=\"sy0\">|</span> s<span class=\"sy0\">::</span>rest <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>cmp prevs s<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>analyze<span class=\"sy0\">'</span> rest s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> analyze<span class=\"sy0\">'</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>tl l<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd l<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> isEqual     <span class=\"sy0\">=</span> analyze <span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> isAscending <span class=\"sy0\">=</span> analyze <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"br0\">)</span> <span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> test sample <span class=\"sy0\">=</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> sample<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isEqual sample<span class=\"br0\">)</span><br/>       <span class=\"kw1\">then</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"elements are identical\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">else</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"elements are not identical\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isAscending sample<span class=\"br0\">)</span><br/>\t     <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"elements are in ascending order\"</span><br/>         <span class=\"kw1\">else</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"elements are not in ascending order\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> lasc <span class=\"sy0\">=</span>   <span class=\"br0\">[</span><span class=\"st0\">\"AA\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"BB\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"CC\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"EE\"</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> leq <span class=\"sy0\">=</span>    <span class=\"br0\">[</span><span class=\"st0\">\"AA\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"AA\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"AA\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"AA\"</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> lnoasc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"AA\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"BB\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"EE\"</span><span class=\"sy0\">;</span><span class=\"st0\">\"CC\"</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter test <span class=\"br0\">[</span>lasc<span class=\"sy0\">;</span>leq<span class=\"sy0\">;</span>lnoasc<span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: lexEqual   asSet size 1 &lt;=\u00a0;<br/>: lexCmp(l)  l l right( l size 1- ) zipWith(#&lt;) and\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 32, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 28.06.2014 Walter Pachl<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'ABC'</span>,<span class=\"sy0\">.</span>list~of<span class=\"br0\">(</span><span class=\"st0\">'AA'</span>,<span class=\"st0\">'BB'</span>,<span class=\"st0\">'CC'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'AAA'</span>,<span class=\"sy0\">.</span>list~of<span class=\"br0\">(</span><span class=\"st0\">'AA'</span>,<span class=\"st0\">'AA'</span>,<span class=\"st0\">'AA'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'ACB'</span>,<span class=\"sy0\">.</span>list~of<span class=\"br0\">(</span><span class=\"st0\">'AA'</span>,<span class=\"st0\">'CC'</span>,<span class=\"st0\">'BB'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>test: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> <span class=\"kw2\">name</span>,list<br/>all_equal=<span class=\"nu0\">1</span><br/>increasing=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">0</span> <span class=\"kw2\">To</span> list~items-<span class=\"nu0\">2</span><br/>  i1=i+<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> list<span class=\"br0\">[</span>i1<span class=\"br0\">]</span>==list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw3\">Then</span> increasing=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">When</span> list<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">&lt;&lt;</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>                                all_equal=<span class=\"nu0\">0</span><br/>                                increasing=<span class=\"nu0\">0</span><br/>                                <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">When</span> list<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw3\">Then</span> all_equal=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> all_equal <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">name</span><span class=\"st0\">': all elements are equal'</span><br/>  <span class=\"kw3\">When</span> increasing <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">name</span><span class=\"st0\">': elements are in increasing order'</span><br/>  <span class=\"kw3\">Otherwise</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">name</span><span class=\"st0\">': neither equal nor in increasing order'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">allEqual<span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"sy0\">=</span>#Set<span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">2</span><br/>inOrder<span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">Set</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"sy0\">==</span>strings</pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"nu0\">1.33</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>all<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>all <span class=\"br0\">{</span> <span class=\"re0\">$strings</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$strings</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$#strings</span>  <span class=\"co1\"># All equal</span><br/>all <span class=\"br0\">{</span> <span class=\"re0\">$strings</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">lt</span> <span class=\"re0\">$strings</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$#strings</span>  <span class=\"co1\"># Strictly ascending</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"br0\">[</span><span class=\"kw1\">eq</span><span class=\"br0\">]</span> <span class=\"re0\">@strings</span>  <span class=\"co1\"># All equal</span><br/><span class=\"br0\">[</span><span class=\"kw1\">lt</span><span class=\"br0\">]</span> <span class=\"re0\">@strings</span>  <span class=\"co1\"># Strictly ascending</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function allsame(sequence s)<br/>    for i=2 to length(s) do<br/>        if s[i]!=s[1] then return 0 end if<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>function strict_order(sequence s)<br/>    for i=2 to length(s) do<br/>        if s[i]&lt;=s[i-1] then return 0 end if<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>procedure test(sequence s)<br/>   \u00a0?{s,allsame(s),strict_order(s)}<br/>end procedure<br/>\u00a0<br/>test({\"AA\",\"BB\",\"CC\"})<br/>test({\"AA\",\"AA\",\"AA\"})<br/>test({\"AA\",\"CC\",\"BB\"})<br/>test({\"AA\",\"ACB\",\"BB\",\"CC\"})<br/>test({\"single_element\"})</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(= \"AA\" \"AA\" \"AA\")<br/>-&gt; T<br/>(= \"AA\" \"AA\" \"Aa\")<br/>-&gt; NIL<br/>(&lt; \"AA\" \"AA\")<br/>-&gt; NIL<br/>(&lt; \"AA\" \"Aa\")<br/>-&gt; T<br/>(&lt; \"1\" \"A\" \"B\" \"Z\" \"c\" )<br/>-&gt; T<br/>(&gt; \"A\" \"B\" \"Z\" \"C\")<br/>-&gt; NIL</pre>"}, {"lang": "PL/I", "loc": 40, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref attributes or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 01.07.2014 Walter Pachl<br/> *-------------------------------------------------------------------*/</span><br/> clist<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">hbound</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">sysprint</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> abc<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span><span class=\"st0\">'BB'</span><span class=\"sy0\">,</span><span class=\"st0\">'CC'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> aaa<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span><span class=\"st0\">'AA'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> acb<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'AA'</span><span class=\"sy0\">,</span><span class=\"st0\">'CC'</span><span class=\"sy0\">,</span><span class=\"st0\">'BB'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'ABC'</span><span class=\"sy0\">,</span>ABC<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'AAA'</span><span class=\"sy0\">,</span>AAA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> test<span class=\"br0\">(</span><span class=\"st0\">'ACB'</span><span class=\"sy0\">,</span>ACB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> test<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">name</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>all_equal<span class=\"sy0\">,</span>increasing<span class=\"br0\">)</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>i1<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> txt <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>all_equal\u00a0! increasing<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  i1<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">When</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span>i1<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> increasing<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">When</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span>i1<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>                     increasing<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>                     all_equal<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>                     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">Otherwise</span> <span class=\"coMULTI\">/* x(i1)&gt;x(i) */</span><br/>                     all_equal<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">When</span><span class=\"br0\">(</span>all_equal<span class=\"br0\">)</span>  txt<span class=\"sy0\">=</span><span class=\"st0\">'all elements are equal'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">When</span><span class=\"br0\">(</span>increasing<span class=\"br0\">)</span> txt<span class=\"sy0\">=</span><span class=\"st0\">'elements are in increasing order'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">Otherwise</span>        txt<span class=\"sy0\">=</span><span class=\"st0\">'neither equal nor in increasing order'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>!!<span class=\"st0\">': '</span>!!txt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> IsAscending <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Array</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span> <span class=\"re0\">$Array</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"kw3\">Where</span><span class=\"br0\">{</span> <span class=\"re0\">$Array</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$Array</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.Count <span class=\"kw4\">-eq</span> <span class=\"re0\">$Array</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> IsEqual     <span class=\"br0\">(</span> <span class=\"br0\">[</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Array</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span> <span class=\"re0\">$Array</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"kw3\">Where</span><span class=\"br0\">{</span> <span class=\"re0\">$Array</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Array</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.Count <span class=\"kw4\">-eq</span> <span class=\"re0\">$Array</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>IsAscending <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><br/>IsAscending <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><br/>IsAscending <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><br/>\u00a0<br/>IsEqual     <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><br/>IsEqual     <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"sy0\">,</span> <span class=\"st0\">'C'</span><br/>IsEqual     <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 38, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DataSection</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"sy0\">~</span><span class=\"st0\">\"AA\\tAA\\tAA\\nAA\\tBB\\tCC\\nAA\\tCC\\tBB\\nAA\\tACB\\tBB\\tCC\\nsingel_element\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> PassFail<span class=\"br0\">(</span>PF<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> PF\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Pass\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Fail\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> ProcRec<span class=\"br0\">(</span>Proc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> tf1$,tf2$\u00a0: <span class=\"kw1\">Static</span> chk.b\u00a0: chk<span class=\"sy0\">=</span>#True<br/>  tf1$<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>s$,c,tz$<span class=\"br0\">)</span>\u00a0: tf2$<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>s$,c<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,tz$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>tf2$<span class=\"br0\">)</span>\u00a0: Proc<span class=\"br0\">(</span>s$,tz$,c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span>  <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b IsStringsEqual<span class=\"br0\">(</span>s$,tz$<span class=\"sy0\">=~</span><span class=\"st0\">\"\\t\"</span>,c.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  ProcRec<span class=\"br0\">(</span>IsStringsEqual<span class=\"br0\">)</span><br/>  chk <span class=\"sy0\">&amp;</span> Bool<span class=\"br0\">(</span>tf1$<span class=\"sy0\">=</span>tf2$ <span class=\"kw1\">Or</span> tf2$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> chk<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b IsStringsAscending<span class=\"br0\">(</span>s$,tz$<span class=\"sy0\">=~</span><span class=\"st0\">\"\\t\"</span>,c.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  ProcRec<span class=\"br0\">(</span>IsStringsAscending<span class=\"br0\">)</span><br/>  chk <span class=\"sy0\">&amp;</span> Bool<span class=\"br0\">(</span>tf1$<span class=\"sy0\">&lt;</span>tf2$ <span class=\"kw1\">Or</span> tf2$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> chk  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> t$,sf$,c.i,i.i,PF.b<br/><span class=\"kw1\">Read</span>.s t$\u00a0: c<span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>t$,<span class=\"sy0\">~</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Compare a list of Strings\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  sf$<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>t$,i,<span class=\"sy0\">~</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"List\u00a0: \"</span><span class=\"sy0\">+</span>sf$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Lexical test  \u00a0: \"</span><span class=\"br0\">)</span>\u00a0: PassFail<span class=\"br0\">(</span>IsStringsEqual<span class=\"br0\">(</span>sf$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Ascending test\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: PassFail<span class=\"br0\">(</span>IsStringsAscending<span class=\"br0\">(</span>sf$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">all</span><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> nexta <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> nexta <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>strings<span class=\"sy0\">,</span> strings<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># All equal</span><br/><span class=\"kw2\">all</span><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> nexta <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> nexta <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>strings<span class=\"sy0\">,</span> strings<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># Strictly ascending</span><br/>\u00a0<br/><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>strings<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>  <span class=\"co1\"># Concise all equal</span><br/><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>strings<span class=\"sy0\">,</span> reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> strings  <span class=\"co1\"># Concise (but not particularly efficient) ascending</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>chunks &lt;- function (compare, xs) {<br/>  starts = which(c(T,\u00a0!compare(head(xs, -1), xs[-1]), T))<br/>  lapply(seq(1,length(starts)-1),<br/>         function(i) xs[starts[i]:(starts[i+1]-1)] )<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(define ((list-stringX? stringX?) strs)<br/>  (or (null? strs) (null? (cdr strs)) (apply stringX? strs)))<br/>(define list-string=? (list-stringX? string=?))<br/>(define list-string&lt;? (list-stringX? string&lt;?))<br/>\u00a0<br/>(module+ test<br/>  (require tests/eli-tester)<br/>  (test<br/>   (list-string=? '()) =&gt; #t<br/>   (list-string=? '(\"a\")) =&gt; #t<br/>   (list-string=? '(\"a\" \"a\")) =&gt; #t<br/>   (list-string=? '(\"a\" \"a\" \"a\")) =&gt; #t<br/>   (list-string=? '(\"b\" \"b\" \"a\")) =&gt; #f)<br/>\u00a0<br/>  (test<br/>   (list-string&lt;? '()) =&gt; #t<br/>   (list-string&lt;? '(\"a\")) =&gt; #t<br/>   (list-string&lt;? '(\"a\" \"b\")) =&gt; #t<br/>   (list-string&lt;? '(\"a\" \"a\")) =&gt; #f<br/>   (list-string&lt;? '(\"a\" \"b\" \"a\")) =&gt; #f<br/>   (list-string&lt;? '(\"a\" \"b\" \"c\")) =&gt; #t))</pre>"}, {"lang": "Red", "loc": 18, "block": "<pre class=\"text highlighted_source\">Red []<br/>\u00a0<br/>list1: [\"asdf\" \"Asdf\" \"asdf\"]<br/>list2: [\"asdf\" \"bsdf\" \"asdf\"]<br/>list3: [\"asdf\" \"asdf\" \"asdf\"]<br/>\u00a0<br/>all-equal?: func [list][   1 = length? unique/case list  ]<br/>sorted?: func [list][   list == sort/case copy list ] \u00a0;; sort without copy would modify list\u00a0!<br/>\u00a0<br/>print all-equal? list1<br/>print sorted? list1<br/>\u00a0<br/>print all-equal? list2<br/>print sorted? list2<br/>\u00a0<br/>print all-equal? list3<br/>print sorted? list3<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 28.06.2014 Walter Pachl<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Call</span> mklist <span class=\"st0\">'ABC'</span>,<span class=\"st0\">'AA'</span>,<span class=\"st0\">'BB'</span>,<span class=\"st0\">'CC'</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'ABC'</span><br/><span class=\"kw1\">Call</span> mklist <span class=\"st0\">'AAA'</span>,<span class=\"st0\">'AA'</span>,<span class=\"st0\">'AA'</span>,<span class=\"st0\">'AA'</span><br/><span class=\"kw1\">Call</span> mklist <span class=\"st0\">'ACB'</span>,<span class=\"st0\">'AA'</span>,<span class=\"st0\">'CC'</span>,<span class=\"st0\">'BB'</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'AAA'</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'ACB'</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>mklist:<br/>  list=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> list<span class=\"st0\">'.'</span>i,<span class=\"kw1\">arg</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Call</span> <span class=\"kw2\">value</span> list<span class=\"st0\">'.0'</span>,i-<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>test:<br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> list<br/>all_equal=<span class=\"nu0\">1</span><br/>increasing=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.0'</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> all_equal <span class=\"sy0\">|</span> increasing<br/>  i1=i+<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i1'</span><span class=\"br0\">)</span>==<span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i'</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> increasing=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i1'</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i'</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>                                                all_equal=<span class=\"nu0\">0</span><br/>                                                increasing=<span class=\"nu0\">0</span><br/>                                                <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i1'</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;&gt;</span><span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"st0\">'.i'</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> all_equal=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> all_equal <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"st0\">': all elements are equal'</span><br/>  <span class=\"kw3\">When</span> increasing <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"st0\">': elements are in increasing order'</span><br/>  <span class=\"kw3\">Otherwise</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'List'</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"st0\">': neither equal nor in increasing order'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cString1 = \"hello\"<br/>cString2 = \"hello\"<br/>compare(cString1,cString2)<br/>cString1 = \"abc\"<br/>cString2 = \"bcd\"<br/>compare(cString1,cString2)<br/>cString1 = \"bcd\"<br/>cString2 = \"abc\"<br/>compare(cString1,cString2)<br/>\u00a0<br/>func compare aString, bString<br/>     n = strcmp(aString,bString)<br/>     if n = 0 see aString + \" = \" + bString + nl<br/>     but n &lt; 0 see aString + \" &lt; \" + bString + nl<br/>     but n &gt; 0 see aString + \" &gt; \" + bString + nl ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">strings.<span class=\"me1\">uniq</span>.<span class=\"me1\">one</span>?                 <span class=\"co1\"># all equal?</span><br/>strings == strings.<span class=\"me1\">uniq</span>.<span class=\"me1\">sort</span>      <span class=\"co1\"># ascending?</span></pre>"}, {"lang": "Rust", "loc": 18, "block": "<pre class=\"text highlighted_source\">// Note that this solution uses the feature 'slice_patterns' which is available Rust nightly!<br/>#![feature(slice_patterns)]<br/>\u00a0<br/>fn strings_are_equal(seq: &amp;[&amp;str]) -&gt; bool {<br/>    match seq {<br/>        &amp;[] | &amp;[_] =&gt; true,<br/>        &amp;[x, y, ref tail..] if x == y =&gt; strings_are_equal(&amp;[&amp;[y], tail].concat()),<br/>        _ =&gt; false<br/>    }<br/>}<br/>\u00a0<br/>fn asc_strings(seq: &amp;[&amp;str]) -&gt; bool {<br/>    match seq {<br/>        &amp;[] | &amp;[_] =&gt; true,<br/>        &amp;[x, y, ref tail..] if x &lt; y =&gt; asc_strings(&amp;[&amp;[y], tail].concat()),<br/>        _ =&gt; false<br/>    }<br/>}</pre>"}, {"lang": "S-lang", "loc": 51, "block": "<pre class=\"text highlighted_source\">define equal_sl(sarr)<br/>{<br/>  variable n = length(sarr), a0, i;<br/>  if (n &lt; 2) return 1;  <br/>\u00a0<br/>  a0 = sarr[0];<br/>  _for i (1, length(sarr)-1, 1)<br/>    if (sarr[i]\u00a0!= a0) return 0;<br/>\u00a0<br/>  return 1;<br/>}<br/>define ascending_sl(sarr) {<br/>  variable n = length(sarr), a0, i;<br/>  if (n &lt; 2) return 1;  <br/>\u00a0<br/>  _for i (0, length(sarr)-2, 1)<br/>    if (sarr[i] &gt;= sarr[i+1]) return 0;<br/>\u00a0<br/>  return 1;<br/>}<br/>\u00a0<br/>\u00a0<br/>define equal_ai(sarr) {<br/>  if (length(sarr) &lt; 2) return 1;<br/>  variable s0 = sarr[0];<br/>  return all(sarr[[1:]] == s0);<br/>}<br/>\u00a0<br/>define ascending_ai(sarr) {<br/>  variable la = length(sarr);<br/>  if (la &lt; 2) return 1;  <br/>  return all(sarr[[0:la-2]] &lt; sarr[[1:la-1]]);<br/>}<br/>\u00a0<br/>define atest(a) {<br/>  () = printf(\"\\n\");<br/>  print(a);<br/>\u00a0<br/>  () = printf(\"equal_sl=%d, ascending_sl=%d\\n\",<br/>              equal_sl(a), ascending_sl(a));<br/>  () = printf(\"equal_ai=%d, ascending_ai=%d\\n\",<br/>              equal_ai(a), ascending_ai(a));<br/>}<br/>\u00a0<br/>atest([\"AA\",\"BB\",\"CC\"]);<br/>atest([\"AA\",\"AA\",\"AA\"]);<br/>atest([\"AA\",\"CC\",\"BB\"]);<br/>atest([\"AA\",\"ACB\",\"BB\",\"CC\"]);<br/>atest([\"single_element\"]);<br/>atest(NULL);<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 14, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> strings<span class=\"sy0\">_</span>are<span class=\"sy0\">_</span>equal<span class=\"br0\">(</span>seq<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Boolean <span class=\"sy0\">=</span> seq <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> s<span class=\"sy0\">::</span>Nil <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> el1 <span class=\"sy0\">::</span> el2 <span class=\"sy0\">::</span> tail <span class=\"sy0\">=&gt;</span> el1<span class=\"sy0\">==</span>el2 <span class=\"sy0\">&amp;&amp;</span> strings<span class=\"sy0\">_</span>are<span class=\"sy0\">_</span>equal<span class=\"br0\">(</span>el2<span class=\"sy0\">::</span>tail<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> asc<span class=\"sy0\">_</span>strings<span class=\"br0\">(</span>seq<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Boolean <span class=\"sy0\">=</span> seq <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> s<span class=\"sy0\">::</span>Nil <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> el1 <span class=\"sy0\">::</span> el2 <span class=\"sy0\">::</span> tail <span class=\"sy0\">=&gt;</span> el1.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>el2<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 13, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>compare<span class=\"sy0\">-</span>strings fn strs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> strs<span class=\"br0\">)</span>                             <span class=\"co1\">; returns #t on empty list</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> strs<span class=\"br0\">)</span><span class=\"br0\">)</span>                       <span class=\"co1\">; returns #t on list of size 1</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fst strs <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> fst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>snd <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> strs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> snd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> snd<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>fn <span class=\"br0\">(</span><span class=\"kw1\">car</span> fst<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> snd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">null?</span> snd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                       <span class=\"co1\">; returns #t if the snd list is empty, meaning all comparisons are exhausted</span><br/>\u00a0<br/><span class=\"br0\">(</span>compare<span class=\"sy0\">-</span>strings <span class=\"kw1\">string=?</span> strings<span class=\"br0\">)</span> <span class=\"co1\">; test for all equal</span><br/><span class=\"br0\">(</span>compare<span class=\"sy0\">-</span>strings string<span class=\"sy0\">&lt;</span>? strings<span class=\"br0\">)</span> <span class=\"co1\">; test for in ascending order</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"nu0\">1</span>..<span class=\"me1\">arr</span>.<span class=\"kw1\">end</span> <span class=\"sy0\">-&gt;</span> all<span class=\"br0\">{</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == arr<span class=\"br0\">[</span>_<span class=\"br0\">]</span> <span class=\"br0\">}</span>   <span class=\"co1\"># all equal</span><br/><span class=\"nu0\">1</span>..<span class=\"me1\">arr</span>.<span class=\"kw1\">end</span> <span class=\"sy0\">-&gt;</span> all<span class=\"br0\">{</span> arr<span class=\"br0\">[</span>_<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> arr<span class=\"br0\">[</span>_<span class=\"br0\">]</span> <span class=\"br0\">}</span>  <span class=\"co1\"># strictly ascending</span></pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\">tcl::<span class=\"me1\">mathop</span>::<span class=\"me1\">eq</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$strings</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\"># All values string-equal</span><br/>tcl::<span class=\"me1\">mathop</span>::<span class=\"sy0\">&lt;</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$strings</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\"># All values in strict order</span></pre>"}, {"lang": "VBA", "loc": 20, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> IsEqualOrAscending(myList) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> i&amp;, boolEqual <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, boolAsc <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">If</span> <span class=\"kw4\">UBound</span>(myList) &gt; 0 <span class=\"kw3\">Then</span><br/>        <span class=\"kw3\">If</span> Err.Number &gt; 0 <span class=\"kw3\">Then</span><br/>            IsEqualOrAscending = <span class=\"st0\">\"Error \"</span> &amp; Err.Number &amp; <span class=\"st0\">\"\u00a0: Empty array\"</span><br/>            <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>            <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">Else</span><br/>            <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(myList)<br/>                <span class=\"kw3\">If</span> myList(i) &lt;&gt; myList(i - 1) <span class=\"kw3\">Then</span> boolEqual = <span class=\"kw5\">True</span><br/>                <span class=\"kw3\">If</span> myList(i) &lt;= myList(i - 1) <span class=\"kw3\">Then</span> boolAsc = <span class=\"kw5\">True</span><br/>            <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    IsEqualOrAscending = <span class=\"st0\">\"List\u00a0: \"</span> &amp; Join(myList, <span class=\"st0\">\",\"</span>) &amp; <span class=\"st0\">\", IsEqual\u00a0: \"</span> &amp; (<span class=\"kw3\">Not</span> boolEqual) &amp; <span class=\"st0\">\", IsAscending\u00a0: \"</span> &amp; <span class=\"kw3\">Not</span> boolAsc<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 25, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> string_compare(arr)<br/>\tlexical = <span class=\"st0\">\"Pass\"</span><br/>\tascending = <span class=\"st0\">\"Pass\"</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\t<span class=\"kw3\">If</span> i+1 &lt;= <span class=\"kw4\">UBound</span>(arr) <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw3\">If</span> arr(i) &lt;&gt; arr(i+1) <span class=\"kw3\">Then</span><br/>\t\t\t\tlexical = <span class=\"st0\">\"Fail\"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">If</span> arr(i) &gt;= arr(i+1) <span class=\"kw3\">Then</span><br/>\t\t\t\tascending = <span class=\"st0\">\"Fail\"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span> <br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span>\t<br/>\t<span class=\"kw3\">Next</span><br/>\tstring_compare = <span class=\"st0\">\"List: \"</span> &amp; Join(arr,<span class=\"st0\">\",\"</span>) &amp; vbCrLf &amp;_<br/>\t\t\t\t\t <span class=\"st0\">\"Lexical Test: \"</span> &amp; lexical &amp; vbCrLf &amp;_<br/>\t\t\t\t\t <span class=\"st0\">\"Ascending Test: \"</span> &amp; ascending &amp; vbCrLf<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.WriteLine string_compare(Array(<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"BB\"</span>,<span class=\"st0\">\"CC\"</span>))<br/>WScript.StdOut.WriteLine string_compare(Array(<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"AA\"</span>))<br/>WScript.StdOut.WriteLine string_compare(Array(<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"CC\"</span>,<span class=\"st0\">\"BB\"</span>))<br/>WScript.StdOut.WriteLine string_compare(Array(<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"ACB\"</span>,<span class=\"st0\">\"BB\"</span>,<span class=\"st0\">\"CC\"</span>))<br/>WScript.StdOut.WriteLine string_compare(Array(<span class=\"st0\">\"FF\"</span>))<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn allEQ(strings){ (not strings.filter1('!=(strings[0]))) }<br/>fcn monoUp(strings){<br/>   strings.len()&lt;2 or<br/>   strings.reduce(fcn(a,b){ if(a&gt;=b) return(Void.Stop,False); b }).toBool() <br/>}</pre>"}, {"lang": "zonnon", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module CompareStrings;<br/>type<br/>\tVector = array * of string;<br/>var<br/>\tv,w: Vector;<br/>\ti: integer;<br/>\tall,ascending: boolean;<br/>begin<br/>\tv\u00a0:= new Vector(3);<br/>\tv[0]\u00a0:= \"uno\";<br/>\tv[1]\u00a0:= \"uno\";<br/>\tv[2]\u00a0:= \"uno\";<br/>\u00a0<br/>\tall\u00a0:= true;<br/>\tfor i\u00a0:= 1 to len(v) - 1 do<br/>\t\tall\u00a0:= all &amp; (v[i - 1] = v[i]);<br/>\tend;<br/>\u00a0<br/>\tw\u00a0:= new Vector(3);<br/>\tw[0]\u00a0:= \"abc\";<br/>\tw[1]\u00a0:= \"bcd\";<br/>\tw[2]\u00a0:= \"cde\";<br/>\tv\u00a0:= w;<br/>\tascending\u00a0:= true;<br/>\tfor i\u00a0:= 1 to len(v) - 1 do<br/>\t\tascending\u00a0:= ascending &amp; (v[i - 1] &lt;= v[i])<br/>\tend;<br/>\u00a0<br/>\twrite(\"all equals?: \");writeln(all);<br/>\twrite(\"ascending?: \");writeln(ascending)<br/>end CompareStrings.<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 20, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">160</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">200</span> <span class=\"kw4\">STEP</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">20</span> RESTORE j<br/><span class=\"nu0\">30</span> READ n<br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> test1=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> test2=<span class=\"nu0\">1</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">60</span> READ a$<br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> a$;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">110</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> p$&lt;&gt;a$ <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> test1=<span class=\"nu0\">0</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> p$&gt;=a$ <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> test2=<span class=\"nu0\">0</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">LET</span> p$=a$<br/><span class=\"nu0\">120</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">'test1'test2</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">150</span> STOP <br/><span class=\"nu0\">160</span> DATA <span class=\"nu0\">3</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"BB\"</span>,<span class=\"st0\">\"CC\"</span><br/><span class=\"nu0\">170</span> DATA <span class=\"nu0\">3</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"AA\"</span><br/><span class=\"nu0\">180</span> DATA <span class=\"nu0\">3</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"CC\"</span>,<span class=\"st0\">\"BB\"</span><br/><span class=\"nu0\">190</span> DATA <span class=\"nu0\">4</span>,<span class=\"st0\">\"AA\"</span>,<span class=\"st0\">\"ACB\"</span>,<span class=\"st0\">\"BB\"</span>,<span class=\"st0\">\"CC\"</span><br/><span class=\"nu0\">200</span> DATA <span class=\"nu0\">1</span>,<span class=\"st0\">\"single_element\"</span></pre>"}]}