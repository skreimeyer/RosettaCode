{"task": "Perfect_numbers", "blocks": [{"lang": "360 Assembly", "loc": 47, "block": "<pre class=\"text highlighted_source\">*        Perfect numbers           15/05/2016<br/>PERFECTN CSECT<br/>         USING  PERFECTN,R13       prolog<br/>SAVEAREA B      STM-SAVEAREA(R15)  \"<br/>         DC     17F'0'             \"<br/>STM      STM    R14,R12,12(R13)    \"<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \"<br/>         LR     R13,R15            \"<br/>         LA     R6,2               i=2<br/>LOOPI    C      R6,NN              do i=2 to nn<br/>         BH     ELOOPI<br/>         LR     R1,R6              i<br/>         BAL    R14,PERFECT<br/>         LTR    R0,R0              if perfect(i)<br/>         BZ     NOTPERF<br/>         XDECO  R6,PG              edit i<br/>         XPRNT  PG,L'PG            print i<br/>NOTPERF  LA     R6,1(R6)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>PERFECT  SR     R9,R9              function perfect(n); sum=0<br/>         LA     R7,1               j<br/>         LR     R8,R1              n<br/>         SRA    R8,1               n/2<br/>LOOPJ    CR     R7,R8              do j=1 to n/2<br/>         BH     ELOOPJ<br/>         LR     R4,R1              n<br/>         SRDA   R4,32<br/>         DR     R4,R7              n/j<br/>         LTR    R4,R4              if mod(n,j)=0<br/>         BNZ    NOTMOD<br/>         AR     R9,R7              sum=sum+j<br/>NOTMOD   LA     R7,1(R7)           j=j+1<br/>         B      LOOPJ<br/>ELOOPJ   SR     R0,R0              r0=false<br/>         CR     R9,R1              if sum=n<br/>         BNE    NOTEQ<br/>         BCTR   R0,0               r0=true<br/>NOTEQ    BR     R14                return(r0); end perfect<br/>NN       DC     F'10000'<br/>PG       DC     CL12' '            buffer<br/>         YREGS<br/>         END    PERFECTN</pre>"}, {"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Is_Perfect<span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   Sum\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">N</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> N <span class=\"kw2\">mod</span> I = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Sum\u00a0:= Sum + I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">return</span> Sum = N;<br/><span class=\"kw1\">end</span> Is_Perfect;</pre>"}, {"lang": "ALGOL 68", "loc": 21, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> is perfect <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> candidate<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span>1<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> f1 <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>1<span class=\"sy1\">+</span>2<span class=\"sy1\">*</span><span class=\"kw20\">small real</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">WHILE</span><br/>    <span class=\"kw2\">IF</span> candidate <span class=\"kw12\">MOD</span> f1 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>      sum <span class=\"sy1\">+:=</span> f1<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> f2 <span class=\"sy1\">=</span> candidate <span class=\"kw12\">OVER</span> f1<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> f2 <span class=\"sy1\">&gt;</span> f1 <span class=\"kw2\">THEN</span><br/>        sum <span class=\"sy1\">+:=</span> f2<br/>      <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> sum <span class=\"sy1\">&lt;=</span> candidate <span class=\"kw2\">DO</span> <br/>    <span class=\"kw7\">SKIP</span> <br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum<span class=\"sy1\">=</span>candidate<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> 33550336 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is perfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 108, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- PERFECT NUMBERS -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- perfect\u00a0:: integer -&gt; bool</span><br/><span class=\"kw3\">on</span> perfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- isFactor\u00a0:: integer -&gt; bool</span><br/>    <span class=\"kw3\">script</span> isFactor<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            n <span class=\"kw2\">mod</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- quotient\u00a0:: number -&gt; number</span><br/>    <span class=\"kw3\">script</span> quotient<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            n <span class=\"sy0\">/</span> x<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- sum\u00a0:: number -&gt; number -&gt; number</span><br/>    <span class=\"kw3\">script</span> sum<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- Integer factors of n below the square root</span><br/>    <span class=\"kw3\">set</span> lows <span class=\"kw3\">to</span> filter<span class=\"br0\">(</span>isFactor, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- low and high factors (quotients of low factors) tested for perfection</span><br/>    <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>foldl<span class=\"br0\">(</span>sum, <span class=\"nu0\">0</span>, <span class=\"br0\">(</span>lows <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>quotient, lows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> n<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> perfect<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    filter<span class=\"br0\">(</span>perfect, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {6, 28, 496, 8128}</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">30</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">If</span> isMersennePrime<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    res <span class=\"sy0\">.=</span> <span class=\"st0\">\"Perfect number: \"</span> perfectNum<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% res<br/>\u00a0<br/>perfectNum<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">Return</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>isMersennePrime<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Return</span> true<br/><span class=\"br0\">}</span><br/>\u00a0<br/>isPrime<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>N<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span> false<br/>  <span class=\"kw1\">Return</span> true<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\">$ awk 'func perf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span>s=<span class=\"nu0\">0</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;</span>n;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy3\">%</span>i<span class=\"sy2\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>s<span class=\"sy3\">+</span>=i;<span class=\"kw6\">return</span><span class=\"br0\">(</span>s<span class=\"sy2\">==</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;</span><span class=\"nu0\">10000</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>perf<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw5\">print</span> i<span class=\"br0\">}</span>'<br/><span class=\"nu0\">6</span><br/><span class=\"nu0\">28</span><br/><span class=\"nu0\">496</span><br/><span class=\"nu0\">8128</span></pre>"}, {"lang": "Axiom", "loc": 1, "block": "<pre class=\"text highlighted_source\">perfect?(n:Integer):Boolean == reduce(+,divisors n) = 2*n</pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> perf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\tsum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">IF</span> n <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t\tsum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> i<br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<span class=\"kw1\">NEXT</span> i<br/>\t<span class=\"kw1\">IF</span> sum <span class=\"sy0\">=</span> n <span class=\"kw1\">THEN</span><br/>\t\tperf <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t\tperf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      FOR n% = 2 TO 10000 STEP 2<br/>        IF FNperfect(n%) PRINT n%<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNperfect(N%)<br/>      LOCAL I%, S%<br/>      S% = 1<br/>      FOR I% = 2 TO SQR(N%)-1<br/>        IF N% MOD I% = 0 S% += I% + N% DIV I%<br/>      NEXT<br/>      IF I% = SQR(N%) S% += I%<br/>      = (N% = S%)</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( ( perf<br/>  =   sum i<br/>    .   0:?sum<br/>      &amp; 0:?i<br/>      &amp;   whl<br/>        ' (\u00a0!i+1:&lt;!arg:?i<br/>          &amp; ( mod$(!arg.!i):0&amp;!sum+!i:?sum<br/>            |<br/>            )<br/>          )<br/>      &amp;\u00a0!sum:!arg<br/>  )<br/>&amp; 0:?n<br/>&amp;   whl<br/>  ' (\u00a0!n+1:~&gt;10000:?n<br/>    &amp; (perf$!n&amp;out$!n|)<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include \"stdio.h\"</span><br/><span class=\"co2\">#include \"math.h\"</span><br/>\u00a0<br/><span class=\"kw4\">int</span> perfect<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> tot <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> max<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tot <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span><br/>                tot <span class=\"sy0\">+=</span> q<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> tot <span class=\"sy0\">==</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">33550337</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>perfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Perfect numbers from 1 to 33550337:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">33550337</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPerfect<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"st0\">\" is perfect.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPerfect<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> num<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tsum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">==</span> num <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> divisor_sum<span class=\"br0\">(</span> <span class=\"kw4\">int</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>   <span class=\"kw4\">int</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> <br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> number <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <br/>         sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> i <span class=\"sy4\">;</span> <br/>   <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>   <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Perfect numbers from 1 to 33550337:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> num <span class=\"sy1\">&lt;</span> <span class=\"nu0\">33550337</span> <span class=\"sy4\">;</span> num<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divisor_sum<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"sy1\">==</span> num<span class=\"br0\">)</span> <br/>         <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> num <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span>   <br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> <br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> proper<span class=\"sy0\">-</span>divisors <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>quot n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>rem n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> perfect? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>proper<span class=\"sy0\">-</span>divisors n<span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 49, "block": "<pre class=\"coffeescript highlighted_source\">is_perfect_number = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  do_factors_add_up_to n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<br/>\u00a0<br/>do_factors_add_up_to = <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> desired_sum<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># We mildly optimize here, by taking advantage of</span><br/>  <span class=\"co1\"># the fact that the sum_of_factors( (p^m) * x)</span><br/>  <span class=\"co1\"># is (1 + ... + p^m-1 + p^m) * sum_factors(x) when</span><br/>  <span class=\"co1\"># x is not itself a multiple of p.</span><br/>\u00a0<br/>  p = smallest_prime_factor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> p == n<br/>    <span class=\"kw1\">return</span> desired_sum == p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\"># ok, now sum up all powers of p that</span><br/>  <span class=\"co1\"># divide n</span><br/>  sum_powers = <span class=\"nu0\">1</span><br/>  curr_power = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> n <span class=\"sy0\">%</span> p == <span class=\"nu0\">0</span><br/>    curr_power <span class=\"sy0\">*</span>= p<br/>    sum_powers <span class=\"sy0\">+</span>= curr_power<br/>    n <span class=\"sy0\">/</span>= p<br/>\u00a0<br/>  <span class=\"co1\"># if desired_sum does not divide sum_powers, we</span><br/>  <span class=\"co1\"># can short circuit quickly</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">unless</span> desired_sum <span class=\"sy0\">%</span> sum_powers == <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"co1\"># otherwise, recurse</span><br/>  do_factors_add_up_to n<span class=\"sy0\">,</span> desired_sum <span class=\"sy0\">/</span> sum_powers<br/>\u00a0<br/>smallest_prime_factor = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> n <span class=\"kw1\">if</span> i<span class=\"sy0\">*</span>i <span class=\"sy0\">&gt;</span> n<br/>    <span class=\"kw1\">return</span> i <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\"># tests</span><br/>do <span class=\"sy0\">-&gt;</span> <br/>  <span class=\"co1\"># This is pretty fast...</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"nu0\">100000</span><span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span> n <span class=\"kw1\">if</span> is_perfect_number n<br/>\u00a0<br/>  <span class=\"co1\"># For big numbers, let's just sanity check the known ones.</span><br/>  known_perfects = <span class=\"br0\">[</span><br/>    <span class=\"nu0\">33550336</span><br/>    <span class=\"nu0\">8589869056</span><br/>    <span class=\"nu0\">137438691328</span><br/>  <span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> known_perfects<br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"fail\"</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> is_perfect_number<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"fail\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_perfect_number<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 24, "block": "<pre class=\"cobol highlighted_source\">      $set REPOSITORY <span class=\"st0\">\"UPDATE ON\"</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> perfect-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       REPOSITORY<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">FUNCTION</span> perfect<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  i                      <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>  <br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">2</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> <span class=\"nu0\">33550337</span> <span class=\"sy0\">=</span> i<br/>               <span class=\"kw1\">IF</span> <span class=\"kw3\">FUNCTION</span> perfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                   <span class=\"kw2\">DISPLAY</span> i<br/>               END-<span class=\"kw1\">IF</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> perfect-<span class=\"kw1\">main</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> perfectp <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> below n <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>mod n i<span class=\"br0\">)</span><span class=\"br0\">)</span> sum i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPerfectNumber1<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isPerfectNumber1.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"coMULTI\">/*<br/> * Function to test if a number is a perfect number<br/> * A number is a perfect number if it is equal to the sum of all its divisors<br/> * Input: Positive integer n<br/> * Output: true if n is a perfect number, false otherwise<br/> */</span><br/><span class=\"kw4\">bool</span> isPerfect<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"co1\">//Generate a list of integers in the range 1 to n-1\u00a0: [1, 2, ..., n-1]</span><br/>    List<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> range <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> List<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span>.<span class=\"me1\">generate</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Create a list that filters the divisors of n from range</span><br/>    List<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> divisors <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> List.<span class=\"me1\">from</span><span class=\"br0\">(</span>range.<span class=\"me1\">where</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> n<span class=\"sy0\">%</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//Sum the all the divisors</span><br/>    <span class=\"kw4\">int</span> sumOfDivisors <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> divisors.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        sumOfDivisors <span class=\"sy0\">=</span> sumOfDivisors <span class=\"sy0\">+</span> divisors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// A number is a perfect number if it is equal to the sum of its divisors</span><br/>    <span class=\"co1\">// We return the test if n is equal to sumOfDivisors</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> sumOfDivisors<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 9, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isPerfectNumber<span class=\"br0\">(</span>x <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> d <span class=\"sy0\">?</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> d <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"sy0\">!</span>x <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">+=</span> d<br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  return sum <span class=\"sy0\">&lt;=&gt;</span> x<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 43, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"  6 is perfect...<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_perfect_number <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\" 77 is perfect...<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_perfect_number <span class=\"br0\">(</span><span class=\"nu0\">77</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"128 is perfect...<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_perfect_number <span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"496 is perfect...<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_perfect_number <span class=\"br0\">(</span><span class=\"nu0\">496</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tis_perfect_number <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is 'n' a perfect number?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn_positive<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tsum<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> n \\\\ c.<span class=\"me1\">item</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tsum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> c.<span class=\"me1\">item</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> sum <span class=\"sy0\">=</span> n<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 20, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import system'math.<br/>import extensions.<br/>\u00a0<br/>extension extension<br/>{<br/>    isPerfect<br/>        = 1 till:self repeat(:n)( (self mod:n == 0) iif(n,0) ); summarize(Integer new) == self.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    1 till:10000 do(:n)<br/>    [<br/>        if(n isPerfect)<br/>            [ console printLine(n,\" is perfect\") ]<br/>    ].<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def is_perfect(1), do: false<br/>  def is_perfect(n) when n &gt; 1 do<br/>    Enum.sum(factor(n, 2, [1])) == n<br/>  end<br/>\u00a0<br/>  defp factor(n, i, factors) when n &lt;  i*i   , do: factors<br/>  defp factor(n, i, factors) when n == i*i   , do: [i | factors]<br/>  defp factor(n, i, factors) when rem(n,i)==0, do: factor(n, i+1, [i, div(n,i) | factors])<br/>  defp factor(n, i, factors)                 , do: factor(n, i+1, factors)<br/>end<br/>\u00a0<br/>IO.inspect (for i &lt;- 1..10000, RC.is_perfect(i), do: i)</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">is_perfect</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">X</span> <span class=\"sy3\">==</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"re5\">N</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 19, "block": "<pre class=\"text highlighted_source\">PROGRAM PERFECT<br/>\u00a0<br/>PROCEDURE PERFECT(N%-&gt;OK%)<br/>      LOCAL I%,S%<br/>      S%=1<br/>      FOR I%=2 TO SQR(N%)-1 DO<br/>        IF N% MOD I%=0 THEN S%+=I%+N% DIV I%<br/>      END FOR<br/>      IF I%=SQR(N%) THEN S%+=I%<br/>      OK%=(N%=S%)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)\u00a0! CLS<br/>    FOR N%=2 TO 10000 STEP 2 DO<br/>       PERFECT(N%-&gt;OK%)<br/>       IF OK% THEN PRINT(N%)<br/>    END FOR<br/>END PROGRAM</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> perf n <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10000</span> <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>perf i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> printfn <span class=\"st0\">\"%i is perfect\"</span> i</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">[0\\1[\\<a class=\"__cf_email__\" data-cfemail=\"6a4e2a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"597d1974\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>][\\<a class=\"__cf_email__\" data-cfemail=\"8bafcb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"614521\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"416501\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"466206\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/*=[@\\<a class=\"__cf_email__\" data-cfemail=\"260266\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"153e55\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@]?1+]#%=]p:<br/>45p;!.\" \"28p;!.   { 0 -1 }</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.primes.factors sequences\u00a0;<br/>IN: rosettacode.perfect-numbers<br/>\u00a0<br/>: perfect? ( n --\u00a0? )  [ divisors sum ] [ 2 * ] bi =\u00a0;</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: perfect? ( n --\u00a0? )<br/>  1<br/>  over 2/ 1+ 2\u00a0?do<br/>    over i mod 0= if i + then<br/>  loop<br/>  =\u00a0;</pre>"}, {"lang": "Fortran", "loc": 12, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">FUNCTION</span> isPerfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">LOGICAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">isPerfect</span><br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, factorsum<br/>\u00a0<br/>  isPerfect <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>  factorsum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">INT</span><span class=\"br0\">(</span><span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>n, i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> factorsum <span class=\"sy0\">=</span> factorsum <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>factorsum <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> isPerfect <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> isPerfect</pre>"}, {"lang": "FreeBASIC", "loc": 24, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPerfect<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>   <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span> <span class=\"co1\">'' we can assume odd numbers are not perfect</span><br/>   <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sum = <span class=\"nu0\">1</span>, q<br/>   <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>     <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>       sum += i<br/>       q = n \\ i<br/>       <span class=\"kw1\">If</span> q &gt; i <span class=\"kw1\">Then</span> sum += q<br/>     <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>   <span class=\"kw1\">Next</span> <br/>   <span class=\"kw1\">Return</span> n = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The first 5 perfect numbers are\u00a0: \"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">33550336</span><br/>  <span class=\"kw1\">If</span> isPerfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> i; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">def perfect( n ) = sum( d | d &lt;- 1..n if d|n ) == 2n<br/>\u00a0<br/>println( (1..500).filter(perfect) )</pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">Filtered([1 .. 10000], n -&gt; Sum(DivisorsInt(n)) = 2*n);<br/># [ 6, 28, 496, 8128 ]</pre>"}, {"lang": "Go", "loc": 38, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> computePerfect<span class=\"sy1\">(</span>n <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> sum <span class=\"kw4\">int64</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            sum <span class=\"sy2\">+=</span> <span class=\"nu2\">i</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> sum <span class=\"sy3\">==</span> n<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// following function satisfies the task, returning true for all</span><br/><span class=\"co1\">// perfect numbers representable in the argument type</span><br/><span class=\"kw4\">func</span> isPerfect<span class=\"sy1\">(</span>n <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> n <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">28</span><span class=\"sy1\">,</span> <span class=\"nu0\">496</span><span class=\"sy1\">,</span> <span class=\"nu0\">8128</span><span class=\"sy1\">,</span> <span class=\"nu0\">33550336</span><span class=\"sy1\">,</span> <span class=\"nu0\">8589869056</span><span class=\"sy1\">,</span><br/>        <span class=\"nu0\">137438691328</span><span class=\"sy1\">,</span> <span class=\"nu0\">2305843008139952128</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// validation</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">);</span> <span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> isPerfect<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> computePerfect<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"bug\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu1\">1e3</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"tested\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isPerfect <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span><br/>    n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> n <span class=\"sy0\">%</span> it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> factorSum, i <span class=\"sy0\">-&gt;</span> factorSum <span class=\"sy0\">+=</span> i <span class=\"sy0\">+</span> n/i <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\">perfect n <span class=\"sy0\">=</span><br/>    n <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span>i <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 12, "block": "<pre class=\"hicest highlighted_source\">   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> 1E4<br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span> perfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> i<br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span> <span class=\"co1\">! end of \"main\"</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> perfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">sum</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> n<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><br/>      <span class=\"kw1\">sum</span> <span class=\"sy1\">=</span> <span class=\"kw1\">sum</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> i<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>i <span class=\"sy1\">+</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">ENDDO</span><br/>   perfect <span class=\"sy1\">=</span> <span class=\"kw1\">sum</span> <span class=\"sy1\">==</span> n<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>limit <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"nu0\">100000</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Perfect numbers from 1 to \"</span><span class=\"sy1\">,</span>limit<span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>isperfect<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Done.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> isperfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span>         <span class=\"co1\">#: returns n if n is perfect</span><br/><span class=\"kw2\">local</span> sum<span class=\"sy1\">,</span>i <br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>sum <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span>n <span class=\"sy1\">~=</span> divisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> sum <span class=\"sy1\">=</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> factors</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">is_perfect=: +: = &gt;:@#.~/.~&amp;.q:@<span class=\"sy0\">(</span><span class=\"nu0\">6</span>&gt;.&lt;.<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> perf<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sum<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tsum<span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">==</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 21, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> is_perfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> sqrt<span class=\"sy0\">=</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> sqrt<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   sum <span class=\"sy0\">+=</span> i <span class=\"sy0\">+</span> n<span class=\"sy0\">/</span>i<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> sqrt <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  sum <span class=\"sy0\">+=</span> sqrt <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sqrt<span class=\"sy0\">*</span>sqrt <span class=\"sy0\">==</span> n <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> n<span class=\"sy0\">/</span>sqrt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">return</span> sum <span class=\"sy0\">===</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">var</span> i<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_perfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  print<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def is_perfect:<br/>  . as $in<br/>  | $in == reduce range(1;$in) as $i<br/>      (0; if ($in\u00a0% $i) == 0 then $i + . else . end);<br/>\u00a0<br/># Example:<br/>range(1;10001) | select( is_perfect )</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">isperfect(n::Integer) = n == sum([n\u00a0% i == 0\u00a0? i\u00a0: 0 for i = 1:(n - 1)])<br/>perfects(n::Integer) = filter(isperfect, 1:n)<br/>\u00a0<br/>@show perfects(10000)</pre>"}, {"lang": "K", "loc": 16, "block": "<pre class=\"text highlighted_source\">   perfect:{(x&gt;2)&amp;x=+/-1_{d:&amp;~x!'!1+_sqrt x;d,_ x%|d}x}<br/>   perfect 33550336<br/>1<br/>\u00a0<br/>   <a class=\"__cf_email__\" data-cfemail=\"87e6c7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;perfect'a:!10000<br/>6 28 496 8128<br/>\u00a0<br/>   m:3 10#!30<br/>(0 1 2 3 4 5 6 7 8 9<br/> 10 11 12 13 14 15 16 17 18 19<br/> 20 21 22 23 24 25 26 27 28 29)<br/>\u00a0<br/>   perfect'/: m<br/>(0 0 0 0 0 0 1 0 0 0<br/> 0 0 0 0 0 0 0 0 0 0<br/> 0 0 0 0 0 0 0 0 1 0)</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun isPerfect<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>      -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>  <span class=\"co1\">// there are no known odd perfect numbers</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>       -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tot <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q<span class=\"sy0\">:</span> Int<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> .. <span class=\"me1\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tot +<span class=\"sy0\">=</span> i<br/>                    q <span class=\"sy0\">=</span> n / i<br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;</span> i<span class=\"br0\">)</span> tot +<span class=\"sy0\">=</span> q<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            n <span class=\"sy0\">==</span> tot<br/>        <span class=\"br0\">}</span>  <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// expect a run time of about 6 minutes on a typical laptop </span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first five perfect numbers are:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> .. <span class=\"nu0\">33550336</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPerfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 15, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>define isPerfect(n::integer) =&gt; {<br/>  #n &lt; 2\u00a0? return false<br/>  return #n == (<br/>    with i in generateSeries(1, math_floor(math_sqrt(#n)) + 1)<br/>      where #n\u00a0% #i == 0<br/>      let q = #n / #i<br/>    sum (#q &gt; #i\u00a0? (#i == 1\u00a0? 1 | #q + #i) | 0)<br/>  )<br/>}<br/>\u00a0<br/>with x in generateSeries(1, 10000)<br/>  where isPerfect(#x)<br/>select #x</pre>"}, {"lang": "Lasso", "loc": 15, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>define isPerfect(n::integer) =&gt; {<br/>  #n &lt; 2\u00a0? return false<br/>  return #n == (<br/>    with i in generateSeries(1, math_floor(math_sqrt(#n)) + 1)<br/>      where #n\u00a0% #i == 0<br/>      let q = #n / #i<br/>    sum (#q &gt; #i\u00a0? (#i == 1\u00a0? 1 | #q + #i) | 0)<br/>  )<br/>}<br/>\u00a0<br/>with x in generateSeries(1, 10000)<br/>  where isPerfect(#x)<br/>select #x</pre>"}, {"lang": "Liberty BASIC", "loc": 19, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10000</span><br/>    <span class=\"kw1\">if</span> perfect<span class=\"br0\">(</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> n; <span class=\"st0\">\" is perfect.\"</span><br/><span class=\"kw1\">next</span> n<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> perfect<span class=\"br0\">(</span> n<span class=\"br0\">)</span><br/>    sum <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> n <span class=\"kw1\">mod</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            sum <span class=\"sy0\">=</span>sum <span class=\"sy0\">+</span>i<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> i<br/>    <span class=\"kw1\">if</span> sum <span class=\"sy0\">=</span>n <span class=\"kw1\">then</span><br/>        perfect<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        perfect <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 8, "block": "<pre class=\"text highlighted_source\">on isPercect (n)<br/>  sum = 1<br/>  cnt = n/2<br/>  repeat with i = 2 to cnt<br/>    if n mod i = 0 then sum = sum + i<br/>  end repeat<br/>  return sum=n<br/>end</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to perfect?\u00a0:n<br/>  output equal?\u00a0:n  apply \"sum  filter [equal? 0  modulo\u00a0:n\u00a0?]  iseq 1\u00a0:n/2<br/>end</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> isPerfect<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\tsum <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> sum <span class=\"sy0\">+</span> i <span class=\"kw2\">or</span> sum<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> sum <span class=\"sy0\">==</span> x<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 19, "block": "<pre class=\"text highlighted_source\">define(`for',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(eval($2&lt;=$3),1,<br/>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')dnl<br/>\u00a0<br/>define(`ispart',<br/>   `ifelse(eval($2*$2&lt;=$1),1,<br/>      `ifelse(eval($1%$2==0),1,<br/>         `ifelse(eval($2*$2==$1),1,<br/>            `ispart($1,incr($2),eval($3+$2))',<br/>            `ispart($1,incr($2),eval($3+$2+$1/$2))')',<br/>         `ispart($1,incr($2),$3)')',<br/>      $3)')<br/>define(`isperfect',<br/>   `eval(ispart($1,2,1)==$1)')<br/>\u00a0<br/>for(`x',`2',`33550336',<br/>   `ifelse(isperfect(x),1,`x<br/>')')</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">PerfectQ[i_Integer]\u00a0:= Total[Divisors[i]] == 2 i</pre>"}, {"lang": "MATLAB", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> perf = isPerfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    total = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:n-<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n, k<span class=\"br0\">)</span><br/>            total = total+k;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    perf = total == n;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 7, "block": "<pre class=\"text highlighted_source\">\"..\"(a, b)\u00a0:= makelist(i, i, a, b)$<br/>infix(\"..\")$<br/>\u00a0<br/>perfectp(n)\u00a0:= is(divsum(n) = 2*n)$<br/>\u00a0<br/>sublist(1 .. 10000, perfectp);<br/>/* [6, 28, 496, 8128] */</pre>"}, {"lang": "MAXScript", "loc": 12, "block": "<pre class=\"text highlighted_source\">fn isPerfect n =<br/>(<br/>    local sum = 0<br/>    for i in 1 to (n-1) do<br/>    (<br/>        if mod n i == 0 then<br/>        (<br/>            sum += i<br/>        )<br/>    )<br/>    sum == n<br/>)</pre>"}, {"lang": "Microsoft Small Basic", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>For n = 2 To 10000 Step 2<br/>  VerifyIfPerfect()<br/>  If isPerfect = 1 Then <br/>    TextWindow.WriteLine(n)<br/>  EndIf<br/>EndFor<br/>\u00a0<br/>Sub VerifyIfPerfect<br/>  s = 1<br/>  sqrN = Math.SquareRoot(n)<br/>  If Math.Remainder(n, 2) = 0 Then <br/>    s = s + 2 + Math.Floor(n / 2)<br/>  EndIf  <br/>  i = 3<br/>  while i &lt;= sqrN - 1<br/>    If Math.Remainder(n, i) = 0 Then <br/>      s = s + i + Math.Floor(n / i)<br/>    EndIf  <br/>    i = i + 1<br/>  EndWhile<br/>  If i * i = n Then <br/>    s = s + i<br/>  EndIf  <br/>  If n = s Then<br/>    isPerfect = 1<br/>  Else<br/>    isPerfect = 0<br/>  EndIf  <br/>EndSub<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 45, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> PerfectNumbers;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> SWholeIO <span class=\"kw1\">IMPORT</span><br/>  WriteCard;<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteLn;<br/><span class=\"kw1\">FROM</span> RealMath <span class=\"kw1\">IMPORT</span><br/>  sqrt;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  N<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsPerfect<span class=\"br0\">(</span>N<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>  S<span class=\"sy0\">,</span> I<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>  SqrtN<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  S <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  SqrtN <span class=\"sy0\">:=</span> sqrt<span class=\"br0\">(</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> N REM <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    S <span class=\"sy0\">:=</span> S <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> N <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  I <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>  <span class=\"kw1\">WHILE</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span> &lt;<span class=\"sy0\">=</span> SqrtN <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> N REM I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      S <span class=\"sy0\">:=</span> S <span class=\"sy0\">+</span> I <span class=\"sy0\">+</span> N <span class=\"sy0\">/</span> I;<br/>    <span class=\"kw1\">END</span>;<br/>    I <span class=\"sy0\">:=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">IF</span> I <span class=\"sy0\">*</span> I <span class=\"sy0\">=</span> N <span class=\"kw1\">THEN</span><br/>    S <span class=\"sy0\">:=</span> S <span class=\"sy0\">+</span> I;<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>N <span class=\"sy0\">=</span> S<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> IsPerfect;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> N <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10000</span> <span class=\"kw1\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> IsPerfect<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      WriteCard<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>      WriteLn;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> PerfectNumbers.<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc isPerfect(n: int): bool =<br/>    var sum: int = 1<br/>    for i in 2 .. &lt;(n.toFloat.sqrt+1).toInt:<br/>        if n mod i == 0:<br/>            sum += (i + n div i)<br/>    return (n == sum)<br/>\u00a0<br/>for i in 2..10_000:<br/>    if isPerfect(i):<br/>        echo(i)</pre>"}, {"lang": "Objeck", "loc": 23, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span>  <br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"Perfect numbers from 1 to 33550337:\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>num <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">;</span> num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">33550337</span><span class=\"sy0\">;</span> num <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>IsPerfect<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          num<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> IsPerfect<span class=\"br0\">(</span>number <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>      sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> <br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> number<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>          sum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span>   <br/>\u00a0<br/>      <span class=\"kw1\">return</span> sum <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> perf n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sum <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> n <span class=\"kw1\">mod</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        sum <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sum <span class=\"sy0\">+</span> i<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>sum <span class=\"sy0\">=</span> n</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: isPerfect(n)  | i | 0 n 2 / loop: i [ n i mod ifZero: [ i + ] ] n ==\u00a0; </pre>"}, {"lang": "ooRexx", "loc": 17, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"co1\">-- first perfect number over 10000 is 33550336...let's not be crazy</span><br/><span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> <span class=\"nu0\">10000</span><br/>    <span class=\"kw1\">if</span> perfectNumber<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> i <span class=\"st0\">\"is a perfect number\"</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/>::routine perfectNumber<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> n<br/>\u00a0<br/>  sum = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"co1\">-- the largest possible factor is n\u00a0% 2, so no point in</span><br/>  <span class=\"co1\">-- going higher than that</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> n\u00a0% <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">//</span> i == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> sum += i<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> sum = n</pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsPerfect</span> N<span class=\"br0\">}</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsNFactor</span> I<span class=\"br0\">}</span> N <span class=\"kw1\">mod</span> I <span class=\"sy0\">==</span> 0 <span class=\"kw1\">end</span><br/>     Factors = <span class=\"br0\">{</span>Filter <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 N<span class=\"sy0\">-</span>1 1<span class=\"br0\">}</span> IsNFactor<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Sum Factors<span class=\"br0\">}</span> <span class=\"sy0\">==</span> N<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Sum</span> Xs<span class=\"br0\">}</span> <span class=\"br0\">{</span>FoldL Xs Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Filter <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 10000 1<span class=\"br0\">}</span> IsPerfect<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>IsPerfect 33550336<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">isPerfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sigma</span><span class=\"br0\">(</span>n<span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">2</span></pre>"}, {"lang": "Pascal", "loc": 23, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> PerfectNumbers<span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">function</span> isPerfect<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> sum<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw1\">begin</span><br/>  sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> round<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"kw1\">mod</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>     sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum <span class=\"sy3\">+</span> i <span class=\"sy3\">+</span> <span class=\"br0\">(</span>number <span class=\"kw1\">div</span> i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  isPerfect <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>sum <span class=\"sy3\">=</span> number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> candidate<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Perfect numbers from 1 to 33550337:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">for</span> candidate <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">33550337</span> <span class=\"kw1\">do</span>       <br/>   <span class=\"kw1\">if</span> isPerfect<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>candidate<span class=\"sy1\">,</span> <span class=\"st0\">' is a perfect number.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> perf <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>perf<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">grep</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"sy0\">*,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># used as</span><br/>put <span class=\"br0\">(</span><span class=\"kw3\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>perf<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">Inf</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 7, "block": "<pre class=\"text highlighted_source\">function is_perfect(integer n)<br/>    return sum(factors(n,-1))=n<br/>end function<br/>\u00a0<br/>for i=2 to 100000 do<br/>    if is_perfect(i) then\u00a0?i end if<br/>end for</pre>"}, {"lang": "PHP", "loc": 17, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> is_perfect<span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">==</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Perfect numbers from 1 to 33550337:\"</span> <span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$num</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$num</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">33550337</span><span class=\"sy0\">;</span> <span class=\"re0\">$num</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>is_perfect<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">echo</span> <span class=\"re0\">$num</span> <span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de perfect (N)<br/>   (let C 0<br/>      (for I (/ N 2)<br/>         (and (=0 (% N I)) (inc 'C I)) )<br/>      (= C N) ) )</pre>"}, {"lang": "PL/I", "loc": 11, "block": "<pre class=\"text highlighted_source\">perfect: procedure (n) returns (bit(1));<br/>   declare n fixed;<br/>   declare sum fixed;<br/>   declare i fixed binary;<br/>\u00a0<br/>   sum = 0;<br/>   do i = 1 to n-1;<br/>      if mod(n, i) = 0 then sum = sum + i;<br/>   end;<br/>   return (sum=n);<br/>end perfect;</pre>"}, {"lang": "PowerShell", "loc": 14, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">Function</span> IsPerfect<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"re0\">$sum</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/> <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>;$i<span class=\"kw4\">-lt</span>$n;$i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><br/><span class=\"kw3\">return</span> <span class=\"re0\">$sum</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Returns <span class=\"st0\">\"True\"</span> <span class=\"kw3\">if</span> the given number is perfect and <span class=\"st0\">\"False\"</span> <span class=\"kw3\">if</span> it<span class=\"st0\">'s not.</span></pre>"}, {"lang": "Prolog", "loc": 14, "block": "<pre class=\"prolog highlighted_source\">tt_divisors<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> TT<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tQ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">/</span> N<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> N <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">(</span>Q <span class=\"sy6\">=</span> N <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> TT1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">+</span> TT<span class=\"sy4\">;</span> <br/>                             TT1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">+</span> Q <span class=\"sy3\">+</span> TT<span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>            TT <span class=\"sy6\">=</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy6\">&gt;</span> N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> tt_divisors<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    TT1 <span class=\"sy6\">=</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>perfect<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\ttt_divisors<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>perfect_numbers<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> LN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">include</span></a><span class=\"br0\">(</span>perfect<span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 13, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> is_Perfect_number<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> summa, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, result<span class=\"sy0\">=</span>#False<br/>  <span class=\"kw1\">Repeat</span>  <br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> n<span class=\"sy0\">%</span>i<br/>      summa<span class=\"sy0\">+</span>i<br/>    <span class=\"kw1\">EndIf</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Until</span> i<span class=\"sy0\">&gt;=</span>n<br/>  <span class=\"kw1\">If</span> summa<span class=\"sy0\">=</span>n<br/>    result<span class=\"sy0\">=</span>#True<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> perf<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> n\u00a0% i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span> <span class=\"sy0\">==</span> n</pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">is.perf &lt;- function(n){<br/>\tif (n==0|n==1) return(FALSE)<br/>\ts &lt;- seq (1,n-1)<br/>\tx &lt;- n\u00a0%% s<br/>\tm &lt;- data.frame(s,x)<br/>\tout &lt;- with(m, s[x==0])<br/>\treturn(sum(out)==n)\t<br/>}<br/># Usage - Warning High Memory Usage<br/>is.perf(28)<br/>sapply(c(6,28,496,8128,33550336),is.perf)</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math)<br/>\u00a0<br/>(define (perfect? n)<br/>  (= <br/>   (* n 2)<br/>   (sum (divisors n))))<br/>\u00a0<br/>; filtering to only even numbers for better performance<br/>(filter perfect? (filter even? (range 1e5)))<br/>;-&gt; '(0 6 28 496 8128)</pre>"}, {"lang": "REBOL", "loc": 9, "block": "<pre class=\"rebol highlighted_source\">perfect?:  <span class=\"kw2\">func</span> <span class=\"br0\">[</span>n <span class=\"br0\">[</span><span class=\"kw1\">integer!</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span>local sum<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    sum: <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">repeat</span> i <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><br/>        <span class=\"kw2\">if</span> <span class=\"kw3\">zero?</span> <span class=\"kw3\">remainder</span> n i <span class=\"br0\">[</span><br/>            sum: sum + i<br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>    sum = n<br/><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX version of the  ooRexx  program (the code was modified to run with Classic REXX).*/</span><br/>      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">10000</span>                                 <span class=\"coMULTI\">/*statement changed:  LOOP \u2500\u2500\u25ba DO*/</span><br/>      <span class=\"kw1\">if</span> perfectNumber<span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  i   <span class=\"st0\">\"is a perfect number\"</span><br/>      <span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>perfectNumber: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n                  <span class=\"coMULTI\">/*statements changed: ROUTINE,USE*/</span><br/>sum=<span class=\"nu0\">0</span><br/>             <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> n%2                            <span class=\"coMULTI\">/*statement changed:  LOOP \u2500\u2500\u25ba DO*/</span><br/>             <span class=\"kw1\">if</span> n<span class=\"sy0\">//</span>i==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> sum=sum+i                 <span class=\"coMULTI\">/*statement changed:  sum += i   */</span><br/>             <span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span> sum=n</pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = 1 to 10000<br/>    if perfect(i) see i + nl ok<br/>next<br/>\u00a0<br/>func perfect n<br/>     sum = 0<br/>     for i = 1 to n - 1<br/>         if n\u00a0% i = 0 sum = sum + i ok<br/>     next <br/>if sum = n return 1 else return 0 ok<br/>return sum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> perf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>...<span class=\"me1\">n</span><br/>    sum <span class=\"sy0\">+</span>= i  <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><br/>  sum == n<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">for i = 1 to 10000<br/> if perf(i) then print i;\" \";<br/>next i<br/>\u00a0<br/>FUNCTION perf(n)<br/>for i = 1 TO n - 1<br/>  IF n MOD i = 0 THEN sum = sum + i<br/>next i<br/>IF sum = n THEN perf = 1<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main ( ) {<br/>\tfn factor_sum(n: i32) -&gt; i32 {<br/>\t    let mut v = Vec::new(); //create new empty array<br/>\t    for  x in 1..n-1 {      //test vaules 1 to n-1<br/>\t    \tif n%x == 0 {   //if current x is a factor of n<br/>\t    \t\tv.push(x);      //add x to the array<br/>\t    \t}<br/>\t    }<br/>    let mut sum = v.iter().sum(); //iterate over array and sum it up <br/>    return sum;<br/>    }<br/>\u00a0<br/>    fn perfect_nums(n: i32) {<br/>    \tfor x in 2..n {       //test numbers from 1-n<br/>    \t\tif factor_sum(x) == x {//call factor_sum on each value of x, if return value is = x<br/>    \t\t\tprintln!(\"{} is a perfect number.\", x); //print value of x <br/>    \t\t}<br/>    \t}<br/>    }<br/>    perfect_nums(10000);<br/>}<br/>\u00a0</pre>"}, {"lang": "SASL", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>|| The function which takes a number and returns a list of its factors (including one but excluding itself) <br/>|| can be written<br/>factors n = { a &lt;- 1.. n/2; n rem a = 0 }<br/>|| If we define a perfect number as one which is equal to the sum of its factors (for example 6 = 3 + 2 + 1 is perfect) <br/>|| we can write the list of all perfect numbers as<br/>perfects = { n &lt;- 1...\u00a0; n = sum(factors n) }<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> perfectInt<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> to sqrt<span class=\"br0\">(</span>input<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> input <span class=\"sy0\">%</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> x + input / x<span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">==</span> input - <span class=\"nu0\">1</span></pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>perf n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>sum <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i n<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"sy0\">=</span> sum n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> sum i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>           <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isPerfect (in integer: n) is func<br/>  result<br/>    var boolean: isPerfect is FALSE;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: sum is 1;<br/>    var integer: q is 0;<br/>  begin<br/>    for i range 2 to sqrt(n) do<br/>      if n rem i = 0 then<br/>        sum +:= i;<br/>        q\u00a0:= n div i;<br/>        if q &gt; i then<br/>          sum +:= q;<br/>        end if;<br/>      end if;<br/>    end for;<br/>    isPerfect\u00a0:= sum = n;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: n is 0;<br/>  begin<br/>    for n range 2 to 33550336 do<br/>      if isPerfect(n) then<br/>        writeln(n);<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func is_perfect<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var sum = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> ..^ n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i.<span class=\"me1\">divides</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">+</span>= i<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    sum == n;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">10000</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    is_perfect<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> say i;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 5, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"365876\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Integer traits) isPerfect<br/>[<br/>  (((2 to: n // 2 + 1) select: [|\u00a0:m | (n rem: m) isZero])<br/>    inject: 1 into: #+ `er) = n<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 21, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Integer</span> extend <span class=\"br0\">[</span><br/>\u00a0<br/>  <span class=\"coMULTI\">\"Translation of the C version; this is faster...\"</span><br/>  isPerfectC <span class=\"br0\">[</span> |<span class=\"re3\">tot</span>| <span class=\"re6\">tot</span> <span class=\"sy0\">:=</span> <span class=\"re5\">1</span>.<br/>     <span class=\"br0\">(</span><span class=\"re5\">2</span> to: <span class=\"br0\">(</span><span class=\"kw1\">self</span> sqrt<span class=\"br0\">)</span> + <span class=\"re5\">1</span><span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>        <span class=\"br0\">(</span><span class=\"kw1\">self</span> rem: <span class=\"re5\">i</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re5\">0</span><br/>        ifTrue: <span class=\"br0\">[</span> |<span class=\"re3\">q</span>|<br/>                  <span class=\"re6\">tot</span> <span class=\"sy0\">:=</span> <span class=\"re5\">tot</span> + <span class=\"re5\">i</span>.<br/>                  <span class=\"re5\">q</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> // <span class=\"re5\">i</span>. <br/>                  <span class=\"re5\">q</span> &gt; i ifTrue: <span class=\"br0\">[</span> <span class=\"re5\">tot</span> <span class=\"sy0\">:=</span> <span class=\"re5\">tot</span> + <span class=\"re5\">q</span> <span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><br/>     <span class=\"br0\">]</span>.<br/>     ^ tot <span class=\"sy0\">=</span> <span class=\"kw1\">self</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"coMULTI\">\"... but this seems more idiomatic\"</span><br/>  isPerfect <span class=\"br0\">[</span><br/>     ^ <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re5\">2</span> to: <span class=\"kw1\">self</span> // <span class=\"re5\">2</span> + <span class=\"re5\">1</span><span class=\"br0\">)</span> select: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span> | <span class=\"br0\">(</span><span class=\"kw1\">self</span> rem: <span class=\"re5\">a</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>         inject: <span class=\"re5\">1</span> into: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> | a + <span class=\"re5\">b</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">self</span><br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "Swift", "loc": 15, "block": "<pre class=\"text highlighted_source\">func perfect(n:Int) -&gt; Bool {<br/>    var sum = 0<br/>    for i in 1..&lt;n {<br/>        if n\u00a0% i == 0 {<br/>            sum += i<br/>        }<br/>    }<br/>    return sum == n<br/>}<br/>\u00a0<br/>for i in 1..&lt;10000 {<br/>    if perfect(i) {<br/>        println(i)<br/>    }<br/>}</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> perfect n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> sum <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> == <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>is_perfect = ~&amp;itB&amp;&amp; ^(~&amp;,~&amp;t+ iota); ^E/~&amp;l sum:-0+ ~| not remainder</pre>"}, {"lang": "VBScript", "loc": 17, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> IsPerfect(n)<br/>\tIsPerfect = <span class=\"kw5\">False</span><br/>\ti = n - 1<br/>\tsum = 0<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> i &gt; 0<br/>\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\tsum = sum + i<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\ti = i - 1<br/>\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">If</span> sum = n <span class=\"kw3\">Then</span><br/>\t\tIsPerfect = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write IsPerfect(CInt(WScript.Arguments(0)))<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func Perfect(N);        \\Return 'true' if N is a perfect number<br/>int  N, S, I, Q;<br/>[S:= 1;<br/>for I:= 2 to sqrt(N) do<br/>        [Q:= N/I;<br/>        if rem(0)=0 then S:= S+I+Q;<br/>        ];<br/>return S=N &amp; N#1;<br/>];<br/>\u00a0<br/>int  A, N;<br/>[for A:= 1 to 16 do<br/>        [N:= (1&lt;&lt;A - 1) * 1&lt;&lt;(A-1);<br/>        if Perfect(N) then [IntOut(0, N);  CrLf(0)];<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn isPerfectNumber1(n)<br/>   { n == [1..n-1].filter('wrap(i){ n\u00a0% i == 0 }).sum(); }</pre>"}]}