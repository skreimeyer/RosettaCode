{"task": "Function_definition", "blocks": [{"lang": "360 Assembly", "loc": 38, "block": "<pre class=\"text highlighted_source\">DEFFUN   CSECT<br/>         USING  DEFFUN,R13<br/>SAVEAREA B      PROLOG-SAVEAREA(R15)<br/>         DC     17F'0'<br/>PROLOG   STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15            set base register<br/>BEGIN    L      R2,=F'13'<br/>         ST     R2,X               X=13<br/>         L      R2,=F'17'<br/>         ST     R2,Y               Y=17<br/>         LA     R1,PARMLIST        R1-&gt;PARMLIST<br/>         B      SKIPPARM<br/>PARMLIST DS     0F<br/>         DC     A(X)<br/>         DC     A(Y)<br/>SKIPPARM BAL    R14,MULTPLIC       call MULTPLIC<br/>         ST     R0,Z               Z=MULTPLIC(X,Y)<br/>RETURN   L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>*        <br/>MULTPLIC EQU    *                  function MULTPLIC(X,Y)<br/>         L      R2,0(R1)           R2=(A(X),A(Y))<br/>         XR     R4,R4              R4=0     <br/>         L      R5,0(R2)           R5=X    <br/>         L      R6,4(R2)           R6=Y    <br/>         MR     R4,R6              R4R5=R4R5*R6<br/>         LR     R0,R5              R0=X*Y   (R0 return value)<br/>         BR     R14                end function MULTPLIC<br/>*<br/>X        DS     F<br/>Y        DS     F<br/>Z        DS     F<br/>         YREGS  <br/>         END    DEFFUN</pre>"}, {"lang": "6502 Assembly", "loc": 8, "block": "<pre class=\"text highlighted_source\">MULTIPLY: STX   MULN     \u00a0; 6502 has no \"acc += xreg\" instruction,<br/>          TXA            \u00a0; so use a memory address<br/>MULLOOP:  DEY<br/>          CLC            \u00a0; remember to clear the carry flag before<br/>          ADC   MULN     \u00a0; doing addition or subtraction<br/>          CPY   #$01<br/>          BNE   MULLOOP<br/>          RTS</pre>"}, {"lang": "8051 Assembly", "loc": 12, "block": "<pre class=\"asm highlighted_source\">ORG RESET<br/><span class=\"kw1\">mov</span> a<span class=\"sy1\">,</span> #<span class=\"nu0\">100</span><br/><span class=\"kw1\">mov</span> b<span class=\"sy1\">,</span> #<span class=\"nu0\">10</span><br/><span class=\"kw1\">call</span> multiply<br/><span class=\"co1\">; at this point, the result of 100*10 = 1000 = 03e8h is stored in registers a and b</span><br/><span class=\"co1\">; a = e8 </span><br/><span class=\"co1\">; b = 03</span><br/><span class=\"kw1\">jmp</span> <span class=\"sy2\">$</span><br/>\u00a0<br/>multiply<span class=\"sy1\">:</span><br/><span class=\"kw1\">mul</span> ab<br/><span class=\"kw1\">ret</span></pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>* a b<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 3, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> multiply<span class=\"br0\">(</span>a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Multiply <span class=\"br0\">(</span>A, B\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float;</pre>"}, {"lang": "Aime", "loc": 5, "block": "<pre class=\"text highlighted_source\">real<br/>multiply(real a, real b)<br/>{<br/>    return a * b;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 4, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> multiply <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  a <span class=\"sy1\">*</span> b<br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL-M", "loc": 5, "block": "<pre class=\"text highlighted_source\">INTEGER FUNCTION MULTIPLY( A, B );<br/>INTEGER A, B;<br/>BEGIN<br/>    MULTIPLY\u00a0:= A * B;<br/>END;</pre>"}, {"lang": "ALGOL W", "loc": 4, "block": "<pre class=\"text highlighted_source\">long real procedure multiply( long real value a, b );<br/>begin<br/>    a * b<br/>end</pre>"}, {"lang": "AmigaE", "loc": 11, "block": "<pre class=\"text highlighted_source\">PROC my_molt(a,b)<br/>-&gt; other statements if needed... here they are not<br/>ENDPROC a*b    -&gt; return value<br/>\u00a0<br/>-&gt; or simplier<br/>\u00a0<br/>PROC molt(a,b) IS a*b<br/>\u00a0<br/>PROC main()<br/>  WriteF('\\d\\n', my_molt(10,20))<br/>ENDPROC</pre>"}, {"lang": "AntLang", "loc": 2, "block": "<pre class=\"text highlighted_source\">multiply: * /`*' is a normal function<br/>multiply: {x * y}</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre class=\"text highlighted_source\">       multiply  \u2190  \u00d7</pre>"}, {"lang": "AppleScript", "loc": 3, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">return</span> a <span class=\"sy0\">*</span> b<br/><span class=\"kw3\">end</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">10  DEF  FN MULTIPLY(P) =  P(P) * P(P+1)<br/>20  P(1) = 611\u00a0: P(2) = 78\u00a0: PRINT  FN MULTIPLY(1)</pre>"}, {"lang": "Argile", "loc": 2, "block": "<pre class=\"text highlighted_source\">use std<br/>.: multiply &lt;real a, real b&gt;\u00a0:. -&gt; real {a * b}</pre>"}, {"lang": "ARM Assembly", "loc": 139, "block": "<pre class=\"arm highlighted_source\">\u00a0<br/><span class=\"sy0\">/*</span> ARM assembly Raspberry PI  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>  program functMul<span class=\"sy0\">.</span>s   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> Constantes    <span class=\"sy0\">*/</span><br/><span class=\"sy0\">.</span>equ STDOUT<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/><span class=\"sy0\">.</span>equ WRITE<span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><br/><span class=\"sy0\">.</span>equ EXIT<span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"sy0\">/***********************/</span><br/><span class=\"sy0\">/*</span> Initialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***********************/</span><br/><span class=\"sy0\">.</span>data<br/>szRetourLigne<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/>szMessResult<span class=\"sy0\">:</span>  <span class=\"sy0\">.</span>ascii <span class=\"st0\">\"Resultat\u00a0: \"</span>      @ message result<br/>sMessValeur<span class=\"sy0\">:</span>   <span class=\"sy0\">.</span>fill <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><br/>                   <span class=\"sy0\">.</span>asciz <span class=\"st0\">\"\\n\"</span><br/><span class=\"sy0\">/***********************</span>   <br/><span class=\"sy0\">/*</span> No Initialized data <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***********************/</span><br/><span class=\"sy0\">.</span>bss<br/>\u00a0<br/><span class=\"sy0\">.</span>text<br/><span class=\"sy0\">.</span>global main <br/>main<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save  <span class=\"nu0\">2</span> registers <span class=\"sy0\">*/</span><br/>\u00a0<br/>    @ function multiply<br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">8</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">50</span><br/>\t<span class=\"kw7\">bl</span> multiply             @ call function<br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>iAdrsMessValeur                <br/>    <span class=\"kw7\">bl</span> conversion10S       @ call function with <span class=\"nu0\">2</span> parameter <span class=\"br0\">(</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">ldr</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>iAdrszMessResult<br/>    <span class=\"kw7\">bl</span> affichageMess            @ display message<br/>\u00a0<br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> #<span class=\"nu0\">0</span>                  @ return code<br/>\u00a0<br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span> <span class=\"sy0\">/*</span> end of  program <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #EXIT              @ request to exit program<br/>    swi <span class=\"nu0\">0</span>                       @ perform the system call<br/>iAdrsMessValeur<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int sMessValeur\t<br/>iAdrszMessResult<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>int szMessResult<br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>   Function multiply              <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains value <span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> contains value <span class=\"nu0\">2</span> <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> return r\u00e9sult   <span class=\"sy0\">*/</span><br/>multiply<span class=\"sy0\">:</span><br/>    <span class=\"kw1\">mul</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        <span class=\"sy0\">/*</span> return function <span class=\"sy0\">*/</span>\t<br/>\u00a0<br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span>     display text with size calculation                         <span class=\"sy0\">*/</span> <br/><span class=\"sy0\">/******************************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the address of the message <span class=\"sy0\">*/</span><br/>affichageMess<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t<span class=\"sy0\">/*</span> save  registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>    \t\t<span class=\"sy0\">/*</span> save others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>   \t\t\t\t<span class=\"sy0\">/*</span> counter length <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span>      \t<span class=\"sy0\">/*</span> loop length calculation <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">ldrb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"br0\">]</span>  \t\t\t<span class=\"sy0\">/*</span> read octet start position <span class=\"sy0\">+</span> index <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       \t\t\t<span class=\"sy0\">/*</span> if <span class=\"nu0\">0</span> its over <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">addne</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   \t\t\t<span class=\"sy0\">/*</span> else <span class=\"kw1\">add</span> <span class=\"nu0\">1</span> in the length <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1b</span>          \t\t\t<span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> loop <span class=\"sy0\">*/</span><br/>                                <span class=\"sy0\">/*</span> so here <span class=\"kw35\">r2</span> contains the length of the message <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>        \t\t\t<span class=\"sy0\">/*</span> address message in <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#STDOUT      \t\t<span class=\"sy0\">/*</span> code to write to the standard output Linux <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r7</span><span class=\"sy0\">,</span> #WRITE             <span class=\"sy0\">/*</span> code call system <span class=\"st0\">\"write\"</span> <span class=\"sy0\">*/</span><br/>    swi #<span class=\"nu0\">0</span>                      <span class=\"sy0\">/*</span> call systeme <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r7</span><span class=\"br0\">}</span>     \t\t<span class=\"sy0\">/*</span> restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    \t\t\t\t<span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registres <span class=\"sy0\">*/</span> <br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>\t        \t\t\t<span class=\"sy0\">/*</span> return  <span class=\"sy0\">*/</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span>   conversion register in string d\u00e9cimal signed  <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the register   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> contains address of conversion area <span class=\"sy0\">*/</span><br/>conversion10S<span class=\"sy0\">:</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>    <span class=\"sy0\">/*</span> save registers frame <span class=\"kw1\">and</span> return <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">-</span><span class=\"kw35\">r5</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> save other registers  <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r1</span>       <span class=\"sy0\">/*</span> early storage area <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span>#<span class=\"st0\">'+'</span>     <span class=\"sy0\">/*</span> default sign is <span class=\"sy0\">+</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>       <span class=\"sy0\">/*</span> n\u00e9gatif number\u00a0? <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">movlt</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span>#<span class=\"st0\">'-'</span>     <span class=\"sy0\">/*</span> yes sign is <span class=\"sy0\">-</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">mvnlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span>       <span class=\"sy0\">/*</span> <span class=\"kw1\">and</span> inverse in positive value <span class=\"sy0\">*/</span><br/>    <span class=\"kw2\">addlt</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">10</span>   <span class=\"sy0\">/*</span> area length <span class=\"sy0\">*/</span><br/><span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"sy0\">/*</span> conversion loop <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">bl</span> divisionpar10 <span class=\"sy0\">/*</span> division  <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">48</span>        <span class=\"sy0\">/*</span> <span class=\"kw1\">add</span> <span class=\"nu0\">48</span> at remainder for conversion ascii <span class=\"sy0\">*/</span>\t<br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store byte area <span class=\"kw35\">r5</span> <span class=\"sy0\">+</span> position <span class=\"kw35\">r4</span> <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">sub</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>      <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">cmp</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>     <br/>    <span class=\"kw8\">bne</span> <span class=\"nu0\">1b</span>\t       <span class=\"sy0\">/*</span> loop if quotient not equal z\u00e9ro <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r5</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store sign at current position  <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">subs</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">blt</span>  <span class=\"nu0\">100f</span>         <span class=\"sy0\">/*</span> if <span class=\"kw35\">r4</span> &lt; <span class=\"nu0\">0</span>  end  <span class=\"sy0\">*/</span><br/>    <span class=\"sy0\">/*</span> else complete area with space <span class=\"sy0\">*/</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span>#<span class=\"st0\">' '</span>   <span class=\"sy0\">/*</span> character space <span class=\"sy0\">*/</span>\t<br/><span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"kw3\">strb</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"br0\">]</span>  <span class=\"sy0\">/*</span> store  byte  <span class=\"sy0\">*/</span><br/>    <span class=\"kw5\">subs</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span>#<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> previous position <span class=\"sy0\">*/</span><br/>    <span class=\"kw8\">bge</span> 2b        <span class=\"sy0\">/*</span> loop if <span class=\"kw35\">r4</span> greather or equal zero <span class=\"sy0\">*/</span><br/><span class=\"nu0\">100</span><span class=\"sy0\">:</span>  <span class=\"sy0\">/*</span>  standard end of function  <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r0</span><span class=\"sy0\">-</span><span class=\"kw35\">r5</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span>restaur others registers <span class=\"sy0\">*/</span><br/>    <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">fp</span><span class=\"sy0\">,</span><span class=\"kw35\">lr</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> restaur des  <span class=\"nu0\">2</span> registers frame et return  <span class=\"sy0\">*/</span><br/>    <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>   <br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span>   division par <span class=\"nu0\">10</span>   sign\u00e9                       <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> Thanks to http<span class=\"sy0\">://</span>thinkingeek<span class=\"sy0\">.</span>com<span class=\"sy0\">/</span>arm<span class=\"sy0\">-</span>assembler<span class=\"sy0\">-</span>raspberry<span class=\"sy0\">-</span>pi<span class=\"sy0\">/*</span>  <br/><span class=\"sy0\">/*</span> <span class=\"kw1\">and</span>   http<span class=\"sy0\">://</span>www<span class=\"sy0\">.</span>hackersdelight<span class=\"sy0\">.</span>org<span class=\"sy0\">/</span>            <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/***************************************************/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contient le dividende   <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> retourne le quotient <span class=\"sy0\">*/</span>\t<br/><span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> retourne le reste  <span class=\"sy0\">*/</span><br/>divisionpar10<span class=\"sy0\">:</span>\t<br/>  <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> contains the argument to be divided by <span class=\"nu0\">10</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw3\">push</span> <span class=\"br0\">{</span><span class=\"kw35\">r2</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span>   <span class=\"sy0\">/*</span> save autres registres  <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span> <br/>   <span class=\"kw3\">ldr</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span>Ls_magic_number_10 <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> magic_number <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">smull</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r3</span><span class=\"sy0\">,</span> <span class=\"kw35\">r0</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> Lower32Bits<span class=\"br0\">(</span><span class=\"kw35\">r1</span><span class=\"sy0\">*</span><span class=\"kw35\">r0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> Upper32Bits<span class=\"br0\">(</span><span class=\"kw35\">r1</span><span class=\"sy0\">*</span><span class=\"kw35\">r0</span><span class=\"br0\">)</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw1\">ASR</span> #<span class=\"nu0\">2</span>     <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r2</span> &gt;&gt; <span class=\"nu0\">2</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw1\">LSR</span> #<span class=\"nu0\">31</span>    <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r0</span> &gt;&gt; <span class=\"nu0\">31</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">add</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw35\">r1</span>         <span class=\"sy0\">/*</span> <span class=\"kw35\">r0</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r2</span> <span class=\"sy0\">+</span> <span class=\"kw35\">r1</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">add</span> <span class=\"kw35\">r2</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span><span class=\"kw35\">r0</span><span class=\"sy0\">,</span> <span class=\"kw1\">lsl</span> #<span class=\"nu0\">2</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r2</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r0</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw1\">sub</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span><span class=\"kw35\">r4</span><span class=\"sy0\">,</span><span class=\"kw35\">r2</span><span class=\"sy0\">,</span> <span class=\"kw1\">lsl</span> #<span class=\"nu0\">1</span>   <span class=\"sy0\">/*</span> <span class=\"kw35\">r1</span> &lt;<span class=\"sy0\">-</span> <span class=\"kw35\">r4</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw35\">r2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  = <span class=\"kw35\">r4</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw35\">r0</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">*/</span><br/>   <span class=\"kw3\">pop</span> <span class=\"br0\">{</span><span class=\"kw35\">r2</span><span class=\"sy0\">-</span><span class=\"kw35\">r4</span><span class=\"br0\">}</span><br/>   <span class=\"kw7\">bx</span> <span class=\"kw35\">lr</span>                  <span class=\"sy0\">/*</span> leave function <span class=\"sy0\">*/</span><br/>   <span class=\"sy0\">.</span>align <span class=\"nu0\">4</span><br/><span class=\"sy0\">.</span>Ls_magic_number_10<span class=\"sy0\">:</span> <span class=\"sy0\">.</span>word <span class=\"nu0\">0x66666667</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% multiply<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>multiply<span class=\"br0\">(</span>multiplicand<span class=\"sy0\">,</span> multiplier<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">Return</span> <span class=\"br0\">(</span>multiplicand <span class=\"sy0\">*</span> multiplier<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 7, "block": "<pre class=\"autoit highlighted_source\">#AutoIt Version: 3<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<br/><span class=\"re0\">$I</span><span class=\"sy0\">=</span><span class=\"nu0\">11</span><br/><span class=\"re0\">$J</span><span class=\"sy0\">=</span><span class=\"nu0\">12</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Multiply\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$I</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\" * \"</span><span class=\"sy0\">&amp;</span> <span class=\"re0\">$J</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\" = \"</span> <span class=\"sy0\">&amp;</span> product<span class=\"br0\">(</span><span class=\"re0\">$I</span><span class=\"sy0\">,</span><span class=\"re0\">$J</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> product<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw6\">return</span> a<span class=\"sy3\">*</span>b<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">print</span> multiply<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 3, "block": "<pre class=\"text highlighted_source\">Lbl MULT<br/>r\u2081*r\u2082<br/>Return</pre>"}, {"lang": "BASIC", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> multiply% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> b <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> multiply% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> b <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    multiply <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 11, "block": "<pre class=\"text highlighted_source\">@ECHO OFF<br/>SET /A result = 0<br/>CALL\u00a0:multiply 2 3<br/>ECHO\u00a0%result%<br/>GOTO\u00a0:eof<br/>\u00a0<br/>:multiply<br/>    SET /A result =\u00a0%1 *\u00a0%2<br/>    GOTO\u00a0:eof<br/>\u00a0<br/>:eof</pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">PRINT FNmultiply(6,7)<br/>END<br/>\u00a0<br/>DEF FNmultiply(a,b) = a * b</pre>"}, {"lang": "bc", "loc": 3, "block": "<pre class=\"text highlighted_source\">define multiply(a, b) { return a*b }<br/>\u00a0<br/>print multiply(2, 3)</pre>"}, {"lang": "Boo", "loc": 4, "block": "<pre class=\"boo highlighted_source\"><span class=\"kw7\">def</span> multiply<span class=\"br0\">(</span>x <span class=\"kw8\">as</span> <span class=\"kw13\">int</span>, y <span class=\"kw8\">as</span> <span class=\"kw13\">int</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">return</span> x <span class=\"sy0\">*</span> y<br/>\u00a0<br/><span class=\"kw9\">print</span> multiply<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Bracmat", "loc": 2, "block": "<pre class=\"text highlighted_source\">multiply=a b.!arg:(?a.?b)&amp;!a*!b;<br/>out$multiply$(123456789.987654321); { writes 121932631112635269 to standard output }</pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">multiply = { x, y | x * y }<br/>\u00a0<br/>p multiply 3 14  #Prints 42</pre>"}, {"lang": "C", "loc": 4, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">double</span> multiply<span class=\"br0\">(</span><span class=\"kw4\">double</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 4, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">double</span> multiply<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ChucK", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun float multiply (float a, float b)<br/>{<br/>    return a * b;<br/>}<br/>// uncomment next line and change values to test<br/>//&lt;&lt;&lt; multiply(16,4) &gt;&gt;&gt;;<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 4, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> multiply<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> a<span class=\"sy2\">*</span>b<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clay", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply(x,y) = x * y;</pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn multiply <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>* x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>multiply <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 26, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> myTest<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  x   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  y   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  z   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">CALL</span> <span class=\"st0\">\"myMultiply\"</span> <span class=\"kw3\">USING</span> <br/>               <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> x<span class=\"sy0\">,</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> y<span class=\"sy0\">,</span> <br/>               <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> z<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> z<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> myTest<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> myMultiply<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  x   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  y   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  z   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">MULTIPLY</span> x <span class=\"kw3\">BY</span> y <span class=\"kw2\">GIVING</span> z<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">EXIT</span> <span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> myMultiply<span class=\"sy0\">.</span></pre>"}, {"lang": "Coco", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply = -&gt; @@0 * @@1</pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\">multiply = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b</pre>"}, {"lang": "ColdFusion", "loc": 5, "block": "<pre class=\"text highlighted_source\">&lt;cffunction name=\"multiply\" returntype=\"numeric\"&gt;<br/>\t&lt;cfargument name=\"a\" type=\"numeric\"&gt;<br/>\t&lt;cfargument name=\"b\" type=\"numeric\"&gt;<br/>\t&lt;cfreturn a * b&gt;<br/>&lt;/cffunction&gt;</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>multiply <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Creative Basic", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DECLARE Multiply(N1:INT,N2:INT)<br/>\u00a0<br/>DEF A,B:INT<br/>\u00a0<br/>A=2:B=2<br/>\u00a0<br/>OPENCONSOLE<br/>\u00a0<br/>PRINT Multiply(A,B)<br/>\u00a0<br/>PRINT:PRINT\"Press any key to close.\"<br/>\u00a0<br/>DO:UNTIL INKEY$&lt;&gt;\"\"<br/>\u00a0<br/>CLOSECONSOLE<br/>\u00a0<br/>END<br/>\u00a0<br/>SUB Multiply(N1:INT,N2:INT)<br/>\u00a0<br/>     DEF Product:INT<br/>\u00a0<br/>     Product=N1*N2<br/>\u00a0<br/>RETURN Product<br/>\u00a0<br/>'Can also be written with no code in the subroutine and just RETURN N1*N2.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"co1\">// A function:</span><br/><span class=\"kw4\">int</span> multiply1<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Functions like \"multiply1\" can be evaluated at compile time if</span><br/><span class=\"co1\">// they are called where a compile-time constant result is asked for:</span><br/><span class=\"kw4\">enum</span> result <span class=\"sy0\">=</span> multiply1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Evaluated at compile time.</span><br/><span class=\"kw4\">int</span><span class=\"br0\">[</span>multiply1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span> array<span class=\"sy0\">;</span>    <span class=\"co1\">// Evaluated at compile time.</span><br/>\u00a0<br/><span class=\"co1\">// A templated function:</span><br/>T multiply2<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T a<span class=\"sy0\">,</span> T b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Compile-time multiplication can also be done using templates:</span><br/><span class=\"kw4\">enum</span> multiply3<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">pragma</span><span class=\"br0\">(</span>msg<span class=\"sy0\">,</span> multiply3<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Prints \"6\" during compilation.</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"2 * 3 = \"</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">[*] sm</pre>"}, {"lang": "Delphi", "loc": 4, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a <span class=\"sy3\">*</span> b<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 2, "block": "<pre class=\"text highlighted_source\">multiply a b:<br/>    * a b</pre>"}, {"lang": "DWScript", "loc": 4, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a <span class=\"sy3\">*</span> b<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return a <span class=\"sy0\">*</span> b<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>multiply a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>* a b<span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 multiply <span class=\"co1\">;; (1)</span><br/><span class=\"br0\">(</span>multiply <span class=\"nu0\">1</span>/<span class=\"nu0\">3</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">222</span><br/>\u00a0<br/><span class=\"co1\">;; a function is a lambda definition\u00a0:</span><br/>multiply <br/>     \u2192 <span class=\"br0\">(</span>\u03bb <span class=\"br0\">(</span>_a _b<span class=\"br0\">)</span> <span class=\"br0\">(</span>#* _a _b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; The following is the same as (1)\u00a0:</span><br/><span class=\"br0\">(</span>define multiply <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>* a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>multiply<br/>    \u2192 <span class=\"br0\">(</span>\ud83d\udd12 \u03bb <span class=\"br0\">(</span>_a _b<span class=\"br0\">)</span> <span class=\"br0\">(</span>#* _a _b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; a closure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; a function may be compiled</span><br/><span class=\"br0\">(</span>lib 'compile<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>compile 'multiply <span class=\"st0\">\"-float-verbose\"</span><span class=\"br0\">)</span><br/>    \u2192 <br/>\ud83d\udca1 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>     compiling _\ud83d\udd36_multiply <span class=\"br0\">(</span><span class=\"br0\">(</span>#* _a _b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; object code (javascript)\u00a0:</span><br/>var ref<span class=\"sy0\">,</span>top <span class=\"sy0\">=</span> _blocks<span class=\"br0\">[</span>_topblock<span class=\"br0\">]</span><span class=\"co1\">;</span><br/>/* */<span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>/* */<span class=\"br0\">(</span>_stack<span class=\"br0\">[</span>top<span class=\"br0\">]</span> *_stack<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\"> + </span>top<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>/* */<span class=\"br0\">)</span><span class=\"co1\">;</span><br/>\u00a0<br/>multiply  \u2192 <span class=\"br0\">(</span>\u03bb <span class=\"br0\">(</span>_a _b<span class=\"br0\">)</span> <span class=\"br0\">(</span>#\ud83d\udd36_multiply<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; compiled function</span><br/>\u00a0</pre>"}, {"lang": "Efene", "loc": 8, "block": "<pre class=\"text highlighted_source\">multiply = fn (A, B) {<br/>    A * B<br/>}<br/>\u00a0<br/>@public <br/>run = fn () {<br/>    io.format(\"~p~n\", [multiply(2, 5)])<br/>}</pre>"}, {"lang": "Eiffel", "loc": 6, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>multiply<span class=\"br0\">(</span>a, b<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> a<span class=\"sy0\">*</span>b<br/>\t<span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply x y = x * y</pre>"}, {"lang": "Elena", "loc": 2, "block": "<pre class=\"text highlighted_source\">real multiply(RealNumber a, RealNumber b)<br/>        = a * b.</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">defmodule RosettaCode do<br/>  def multiply(x,y) do<br/>    x * y<br/>  end<br/>\u00a0<br/>  def task, do: IO.puts multiply(3,5)<br/>end<br/>\u00a0<br/>RosettaCode.task</pre>"}, {"lang": "Elm", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>--There are multiple ways to create a function in Elm<br/>\u00a0<br/>--This is a named function<br/>multiply x y = x*y<br/>\u00a0<br/>--This is an anonymous function<br/>\\x y -&gt; x*y<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 12, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>func_definition<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">K</span><span class=\"sy3\">=</span><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\tio\u00a0:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">case</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"kw1\">of</span> <br/>\t\t<span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">A</span> <span class=\"sy3\">*</span> <span class=\"re5\">B</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre>FUNCTION f(x,y,z,\u2026) \n   f=formula\nEND FUNCTION\n</pre>"}, {"lang": "Euphoria", "loc": 3, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span> <span class=\"kw2\">atom</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy1\">*</span> b<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> multiply x y <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y <span class=\"co1\">// integer</span><br/><span class=\"kw1\">let</span> fmultiply <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">float</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y\u00a0: <span class=\"kw4\">float</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">: multiply ( a b -- a*b ) *\u00a0;</pre>"}, {"lang": "Falcon", "loc": 3, "block": "<pre class=\"falcon highlighted_source\"><span class=\"kw1\">function</span> sayHiTo<span class=\"br0\">(</span> name <span class=\"br0\">)</span><br/> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Hi \"</span><span class=\"sy0\">,</span> name<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">[*]     {anonymous function to multiply the top two items on the stack}<br/>m:      {binding the function to one of the 26 available symbol names}<br/>2 3m;!  {executing the function, yielding 6}</pre>"}, {"lang": "Fantom", "loc": 8, "block": "<pre class=\"text highlighted_source\">class FunctionDefinition<br/>{<br/>  public static Void main () <br/>  {<br/>    multiply\u00a0:= |Int a, Int b -&gt; Int| { a * b }<br/>    echo (\"Multiply 2 and 4: ${multiply(2, 4)}\")<br/>  }<br/>}</pre>"}, {"lang": "Fexl", "loc": 1, "block": "<pre class=\"text highlighted_source\">\\multiply=(\\x\\y * x y)</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: fmultiply ( F: a b -- F: c )  F*\u00a0;<br/>: multiply ( a b -- c )  *\u00a0;</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">     XMULTF<span class=\"br0\">(</span>X,Y<span class=\"br0\">)</span><span class=\"sy0\">=</span>X<span class=\"sy0\">*</span>Y</pre>"}, {"lang": "FreeBASIC", "loc": 5, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> multiply<span class=\"br0\">(</span>d1 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, d2 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Return</span> d1 * d2<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply[x,y]\u00a0:= x*y</pre>"}, {"lang": "Futhark", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun multiply(x: int, y: int): int = x * y<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn multiply( a as long, b as long ) as long<br/>end fn = a * b<br/>\u00a0<br/>print fn multiply( 3, 9 )<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 11, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> Multiply<span class=\"br0\">(</span><span class=\"nu0\">56</span>, <span class=\"nu0\">4.66</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Multiply<span class=\"br0\">(</span>f1 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/float\"><span class=\"kw4\">Float</span></a>, f2 <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/float\"><span class=\"kw4\">Float</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/return\"><span class=\"kw1\">Return</span></a> f1 <span class=\"sy0\">*</span> f2<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 3, "block": "<pre class=\"text highlighted_source\">multiply\u00a0:= function(a, b)<br/>    return a*b;<br/>end;</pre>"}, {"lang": "GML", "loc": 4, "block": "<pre class=\"gml highlighted_source\">#define multiply<br/>a <span class=\"sy0\">=</span> argument0<br/>b <span class=\"sy0\">=</span> argument1<br/><span class=\"kw1\">return</span><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span></pre>"}, {"lang": "Gnuplot", "loc": 4, "block": "<pre class=\"gnuplot highlighted_source\">multiply<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw5\">x</span><span class=\"sy0\">*</span><span class=\"kw5\">y</span><br/>\u00a0<br/><span class=\"co1\"># then for example</span><br/><span class=\"kw1\">print</span> multiply<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"sy0\">,</span><span class=\"nu0\">456</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 3, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> multiply<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>   <span class=\"kw1\">return</span> a <span class=\"sy3\">*</span> b<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 1, "block": "<pre class=\"text highlighted_source\">{*}:multiply;</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> multiply <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x, y <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> y <span class=\"br0\">}</span></pre>"}, {"lang": "Halon", "loc": 4, "block": "<pre class=\"text highlighted_source\">function multiply( $a, $b )<br/>{<br/>    return $a * $b;<br/>}</pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">multiply x y <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y</pre>"}, {"lang": "Haxe", "loc": 3, "block": "<pre class=\"text highlighted_source\">function multiply(x:Float, y:Float):Float{<br/>   return x * y;<br/>}</pre>"}, {"lang": "HicEst", "loc": 3, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">FUNCTION</span> multiply<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><br/>   multiply <span class=\"sy1\">=</span> a <span class=\"sy1\">*</span> b<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "HolyC", "loc": 7, "block": "<pre class=\"text highlighted_source\">F64 Multiply(F64 a, F64 b) {<br/>  return a * b;<br/>}<br/>\u00a0<br/>F64 x;<br/>x = Multiply(42, 13.37);<br/>Print(\"%5.2f\\n\", x);</pre>"}, {"lang": "Hy", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> multiply <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "i", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>concept multiply(a, b) {<br/>\treturn a*b<br/>}<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> multiply<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> a <span class=\"sy1\">*</span> b<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">function multiply ,a,b<br/>  return, a<span class=\"sy0\">*</span> b<br/>end</pre>"}, {"lang": "Inform 6", "loc": 3, "block": "<pre class=\"text highlighted_source\">[ multiply a b;<br/>  return a * b;<br/>];</pre>"}, {"lang": "Inform 7", "loc": 2, "block": "<pre class=\"text highlighted_source\">To decide which number is (A - number) multiplied by (B - number):<br/>\tdecide on A * B.</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\">multiply\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>a,b,a<span class=\"sy0\">*</span>b<span class=\"br0\">)</span></pre>"}, {"lang": "IWBASIC", "loc": 99, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'1. Not Object Oriented Program<br/>\u00a0<br/>DECLARE Multiply(N1:INT,N2:INT),INT<br/>\u00a0<br/>DEF A,B:INT<br/>\u00a0<br/>A=2:B=2<br/>\u00a0<br/>OPENCONSOLE<br/>\u00a0<br/>PRINT Multiply(A,B)<br/>\u00a0<br/>PRINT<br/>\u00a0<br/>'When compiled as a console only program, a press any key to continue is automatic. <br/>CLOSECONSOLE<br/>\u00a0<br/>END<br/>\u00a0<br/>SUB Multiply(N1:INT,N2:INT),INT<br/>\u00a0<br/>     DEF Product:INT<br/>\u00a0<br/>     Product=N1*N2<br/>\u00a0<br/>RETURN Product<br/>ENDSUB<br/>\u00a0<br/>'Can also be written with no code in the subroutine and just RETURN N1*N2.<br/>\u00a0<br/>----<br/>\u00a0<br/>'2. Not Object Oriented Program Using A Macro<br/>\u00a0<br/>$MACRO Multiply (N1,N2) (N1*N2)<br/>\u00a0<br/>DEF A,B:INT<br/>\u00a0<br/>A=5:B=5<br/>\u00a0<br/>OPENCONSOLE<br/>\u00a0<br/>PRINT Multiply (A,B)<br/>\u00a0<br/>PRINT<br/>\u00a0<br/>'When compiled as a console only program, a press any key to continue is automatic.<br/>CLOSECONSOLE<br/>\u00a0<br/>END<br/>\u00a0<br/>----<br/>\u00a0<br/>'3. In An Object Oriented Program<br/>\u00a0<br/>CLASS Associate<br/>'functions/methods<br/>DECLARE Associate:'object constructor<br/>DECLARE _Associate:'object destructor<br/>'***Multiply declared***<br/>DECLARE Multiply(UnitsSold:UINT),UINT<br/>'members<br/>DEF m_Price:UINT<br/>DEF m_UnitsSold:UINT<br/>DEF m_SalesTotal:UINT<br/>ENDCLASS<br/>\u00a0<br/>DEF Emp:Associate<br/>\u00a0<br/>m_UnitsSold=10<br/>\u00a0<br/>Ass.Multiply(m_UnitsSold)<br/>\u00a0<br/>OPENCONSOLE<br/>\u00a0<br/>PRINT\"Sales total: \",:PRINT\"$\"+LTRIM$(STR$(Emp.m_SalesTotal))<br/>\u00a0<br/>PRINT <br/>\u00a0<br/>CLOSECONSOLE <br/>\u00a0<br/>END<br/>\u00a0<br/>'m_price is set in constructor<br/>SUB Associate::Multiply(UnitsSold:UINT),UINT<br/>     m_SalesTotal=m_Price*UnitsSold<br/>     RETURN m_SalesTotal<br/>ENDSUB<br/>\u00a0<br/>SUB Associate::Associate()<br/>     m_Price=10<br/>ENDSUB<br/>\u00a0<br/>SUB Associate::_Associate()<br/>'Nothing to cleanup<br/>ENDSUB<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">multiply=: *</pre>"}, {"lang": "Java", "loc": 5, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a><br/><span class=\"br0\">{</span><br/>     <span class=\"kw1\">public</span> <span class=\"kw1\">static</span>    <span class=\"kw4\">int</span> multiply<span class=\"br0\">(</span>   <span class=\"kw4\">int</span> a,    <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>     <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> multiply<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>  <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b<span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEFINE multiply == * .</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def multiply(a; b): a*b;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">function multiply(a::Number, b::Number)<br/>  return a * b<br/>end</pre>"}, {"lang": "Kaya", "loc": 11, "block": "<pre class=\"text highlighted_source\">program test;<br/>\u00a0<br/>// A function definition in Kaya:<br/>Int multiply(Int a, Int b) {<br/>    return a * b;<br/>}<br/>\u00a0<br/>// And calling a function:<br/>Void main() {<br/>    putStrLn(string( multiply(2, 3) ));<br/>}</pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"text highlighted_source\">// One-liner<br/>fun multiply(a: Int, b: Int) = a * b<br/>\u00a0<br/>// Proper function definition<br/>fun multiplyProper(a: Int, b: Int): Int {<br/>    return a * b<br/>}</pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">define multiply(a,b) =&gt; {<br/>\treturn #a * #b<br/>}</pre>"}, {"lang": "LFE", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mutiply <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 11, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'     define &amp; call a function</span><br/>\u00a0<br/><span class=\"kw1\">print</span> multiply<span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.23456</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span> m1<span class=\"sy0\">,</span> m2<span class=\"br0\">)</span><br/>    multiply <span class=\"sy0\">=</span>m1 <span class=\"sy0\">*</span>m2<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lily", "loc": 4, "block": "<pre class=\"text highlighted_source\">define multiply(a: Integer, b: Integer): Integer<br/>{<br/>  return a * b<br/>}</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">on multiply (a, b)<br/>  return a * b<br/>end</pre>"}, {"lang": "LiveCode", "loc": 5, "block": "<pre class=\"text highlighted_source\">function multiplyy n1 n2<br/>    return n1 * n2<br/>end multiplyy<br/>\u00a0<br/>put multiplyy(2,5) -- = 10</pre>"}, {"lang": "Locomotive Basic", "loc": 2, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DEF</span> FNmultiply<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>=x*y<br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> FNmultiply<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw2\">PI</span><span class=\"br0\">)</span></pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to multiply\u00a0:x\u00a0:y<br/>  output\u00a0:x *\u00a0:y<br/>end</pre>"}, {"lang": "LSE64", "loc": 2, "block": "<pre class=\"text highlighted_source\">multiply \u00a0: *<br/>multiply.\u00a0: *.  # floating point</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lucid", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply(x,y) = x * y</pre>"}, {"lang": "M2000 Interpreter", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Module Multiply (a, b) {<br/>            Push a*b<br/>      }<br/>      Multiply 10, 5<br/>      Print Number=50<br/>\u00a0<br/>      Module Multiply {<br/>            Push Number*Number<br/>      }<br/>\u00a0<br/>      Multiply 10, 5<br/>      Print Number=50<br/>      \\\\ push before call<br/>      Push 10, 5<br/>      Multiply<br/>      Read A<br/>      Print A=50<br/>      Push 10, 2,3\u00a0: Multiply\u00a0: Multiply: Print Number=60<br/>      Module Multiply {<br/>            If not match(\"NN\") Then Error \"I nead two numbers\"<br/>            Read a, b<br/>            Push a*b<br/>      }<br/>      Call Multiply 10, 5<br/>      Print Number=50<br/>      \\\\ now there are two values in stack 20 and 50<br/>      Multiply<br/>}<br/>Call Checkit, 20, 50<br/>Print Number=1000<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 3, "block": "<pre class=\"text highlighted_source\">define(`multiply',`eval($1*$2)')<br/>\u00a0<br/>multiply(2,3)</pre>"}, {"lang": "Make", "loc": 5, "block": "<pre class=\"make highlighted_source\">A<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>B<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/>multiply<span class=\"sy0\">:</span><br/>   <span class=\"sy0\">@</span>expr <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">A</span><span class=\"br0\">)</span> \\<span class=\"sy0\">*</span> <span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"re2\">B</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply:= (a, b) -&gt; a * b;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply[a_,b_]:=a*b</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">f(a, b):= a*b;</pre>"}, {"lang": "MAXScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">fn multiply a b =<br/>(<br/>    a * b<br/>)</pre>"}, {"lang": "Mercury", "loc": 3, "block": "<pre class=\"text highlighted_source\">% Module ceremony elided...<br/>:- func multiply(integer, integer) = integer.<br/>multiply(A, B) = A * B.</pre>"}, {"lang": "Metafont", "loc": 1, "block": "<pre class=\"text highlighted_source\">primarydef a mult b = a * b enddef;</pre>"}, {"lang": "\u041ciniZinc", "loc": 1, "block": "<pre>function var int:multiply(a: var int,b: var int) = \n    a*b;\n</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre>\u0418\u041f0 \u0418\u041f1 * \u0412/\u041e\n</pre>"}, {"lang": "Modula-2", "loc": 4, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">RETURN</span> a <span class=\"sy0\">*</span> b<br/><span class=\"kw1\">END</span> Multiply;</pre>"}, {"lang": "Modula-3", "loc": 4, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">RETURN</span> a <span class=\"sy0\">*</span> b;<br/><span class=\"kw1\">END</span> Multiply;</pre>"}, {"lang": "MUMPS", "loc": 2, "block": "<pre class=\"text highlighted_source\">MULTIPLY(A,B);Returns the product of A and B<br/> QUIT A*B</pre>"}, {"lang": "Neko", "loc": 5, "block": "<pre class=\"text highlighted_source\">var multiply = function(a, b) {<br/>    a * b<br/>}<br/>\u00a0<br/>$print(multiply(2, 3))</pre>"}, {"lang": "Nemerle", "loc": 5, "block": "<pre class=\"text highlighted_source\">public Multiply (a\u00a0: int, b\u00a0: int)\u00a0: int  // this is either a class or module method<br/>{<br/>    def multiply(a, b) { return a * b }   // this is a local function, can take advantage of type inference<br/>    return multiply(a, b)<br/>}</pre>"}, {"lang": "NESL", "loc": 1, "block": "<pre class=\"text highlighted_source\">function multiply(x, y) = x * y;</pre>"}, {"lang": "NetRexx", "loc": 23, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>pi      = <span class=\"nu0\">3.14159265358979323846264338327950</span><br/>radiusY = <span class=\"nu0\">10</span><br/>in2ft   = <span class=\"nu0\">12</span><br/>ft2yds  = <span class=\"nu0\">3</span><br/>in2mm   = <span class=\"nu0\">25.4</span><br/>mm2m    = <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><br/>radiusM = multiply<span class=\"br0\">(</span>multiply<span class=\"br0\">(</span>radiusY, multiply<span class=\"br0\">(</span>multiply<span class=\"br0\">(</span>ft2yds, in2ft<span class=\"br0\">)</span>, in2mm<span class=\"br0\">)</span><span class=\"br0\">)</span>, mm2m<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Area of a circle\"</span> radiusY <span class=\"st0\">\"yds radius: \"</span> multiply<span class=\"br0\">(</span>multiply<span class=\"br0\">(</span>radiusY, radiusY<span class=\"br0\">)</span>, pi<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"st0\">\"sq. yds\"</span><br/><span class=\"kw1\">say</span> radiusY <span class=\"st0\">\"yds =\"</span> radiusM.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"st0\">\"metres\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Area of a circle\"</span> radiusM.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">\"m radius:\"</span> multiply<span class=\"br0\">(</span>multiply<span class=\"br0\">(</span>radiusM, radiusM<span class=\"br0\">)</span>, pi<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">\"m**2\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Multiplication function<br/> */</span><br/>method multiply<span class=\"br0\">(</span>multiplicand, multiplier<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  product = multiplicand <span class=\"sy0\">*</span> multiplier<br/>  <span class=\"kw1\">return</span> product</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>my<span class=\"sy1\">-</span>multiply a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>my<span class=\"sy1\">-</span>multiply <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"nu0\">6</span></pre>"}, {"lang": "Nial", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply is operation a b {a * b}</pre>"}, {"lang": "Nim", "loc": 2, "block": "<pre class=\"text highlighted_source\">proc multiply(a, b: Int): Int =<br/>  result = a * b</pre>"}, {"lang": "OASYS", "loc": 3, "block": "<pre class=\"text highlighted_source\">method int multiply int x int y {<br/>  return x * y<br/>}</pre>"}, {"lang": "OASYS Assembler", "loc": 1, "block": "<pre class=\"text highlighted_source\">[&amp;MULTIPLY#,A#,B#],A#&lt;,B#&lt;MUL RF</pre>"}, {"lang": "Oberon-2", "loc": 4, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/> <span class=\"kw1\">BEGIN</span> <br/>    <span class=\"kw1\">RETURN</span> a <span class=\"sy0\">*</span> b;<br/> <span class=\"kw1\">END</span> Multiply;</pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Multiply<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~<span class=\"sy0\">,</span> <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> int_multiply x y <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y<br/><span class=\"kw1\">let</span> float_multiply x y <span class=\"sy0\">=</span> x <span class=\"sy0\">*.</span> y</pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> mult<span class=\"br0\">(</span>a<span class=\"sy5\">,</span> b<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> a <span class=\"sy2\">.*</span> b<span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: multiply  *\u00a0;</pre>"}, {"lang": "OOC", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>multiply: func (a: Double, b: Double) -&gt; Double {<br/>  a * b <br/>}<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 6, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">SAY</span> multiply<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EXIT</span><br/>multiply:<br/>    <span class=\"kw1\">PROCEDURE</span><br/>    <span class=\"kw1\">PARSE</span> <span class=\"kw1\">ARG</span> x, y<br/>    <span class=\"kw1\">RETURN</span> x<span class=\"sy0\">*</span>y</pre>"}, {"lang": "OpenEdge/Progress", "loc": 3, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">FUNCTION</span> multiply <span class=\"kw1\">RETURNS</span> <span class=\"kw4\">DEC</span> <span class=\"br0\">(</span>a <span class=\"kw3\">AS</span> <span class=\"kw4\">DEC</span> <span class=\"sy0\">,</span> b <span class=\"kw3\">AS</span> <span class=\"kw4\">DEC</span> <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>  <span class=\"kw3\">RETURN</span> a <span class=\"sy0\">*</span> b <span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 3, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Multiply</span> X Y<span class=\"br0\">}</span><br/>   X <span class=\"sy0\">*</span> Y<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>b<span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 4, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  multiply <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy3\">*</span>b<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> multiply <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> multiply <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"re0\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">function multiply(atom a, atom b)<br/>    return a*b<br/>end function</pre>"}, {"lang": "PHL", "loc": 3, "block": "<pre class=\"text highlighted_source\">@Integer multiply(@Integer a, @Integer b) [<br/>\treturn a * b;<br/>]</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> multiply<span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Picat", "loc": 2, "block": "<pre class=\"php highlighted_source\">multiply<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"sy0\">=</span> A<span class=\"sy0\">*</span>B<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de multiply (A B)<br/>   (* A B) )</pre>"}, {"lang": "Pike", "loc": 3, "block": "<pre class=\"pike highlighted_source\">int multiply<span class=\"br0\">(</span>int a, int b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 4, "block": "<pre class=\"pli highlighted_source\">PRODUCT<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">float</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a<span class=\"sy0\">*</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> PRODUCT<span class=\"sy0\">;</span></pre>"}, {"lang": "PL/SQL", "loc": 7, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> multiply<span class=\"br0\">(</span>p_arg1 <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">,</span> p_arg2 <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a> <br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  v_product <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  v_product <span class=\"sy0\">:=</span> p_arg1 <span class=\"sy0\">*</span> p_arg2<span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> v_product<span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 3, "block": "<pre class=\"text highlighted_source\">define multiply(a, b);<br/>    a * b<br/>enddefine;</pre>"}, {"lang": "PostScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">3 4 mul</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> multiply <span class=\"br0\">{</span><br/>    <span class=\"kw3\">return</span> <a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Processing", "loc": 4, "block": "<pre class=\"text highlighted_source\">float multiply(float x, float y)<br/>{<br/>    return x * y;<br/>}</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\">multiply<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> P <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A <span class=\"sy3\">*</span> B<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> multiply<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> a<span class=\"sy0\">*</span>b<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> a * b</pre>"}, {"lang": "Q", "loc": 1, "block": "<pre class=\"q highlighted_source\">multiply:<span class=\"br0\">{</span><span class=\"br0\">[</span>a;b<span class=\"br0\">]</span> a<span class=\"sy0\">*</span>b<span class=\"br0\">}</span></pre>"}, {"lang": "Quack", "loc": 3, "block": "<pre class=\"text highlighted_source\">fn multiply[ a; b ]<br/>  ^ a * b<br/>end</pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"rsplus highlighted_source\">mult <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> a<span class=\"sy0\">*</span>b</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (mutiply a b)<br/>  (* a b))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 2, "block": "<pre class=\"text highlighted_source\">define multiply use a, b<br/>    a b *</pre>"}, {"lang": "REALbasic", "loc": 5, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> Multiply(a <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, b <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  Return a * b<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">multiply</span>: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><span class=\"br0\">[</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">: multiply ( nn-n ) *\u00a0;</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre class=\"rexx highlighted_source\">multiply: <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*return the product of the two arguments.*/</span></pre>"}, {"lang": "RLaB", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;&gt; class(sin)<br/>function<br/>&gt;&gt; type(sin)<br/>builtin</pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>func multiply x,y return x*y<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">*</span> b<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 3, "block": "<pre class=\"text highlighted_source\">fn multiply(a: i32, b: i32) -&gt; i32 {<br/>    a * b<br/>}</pre>"}, {"lang": "Sather", "loc": 8, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  -- we cannot have \"functions\" (methods) outside classes<br/>  mult(a, b:FLT):FLT is return a*b; end;<br/>\u00a0<br/>  main is<br/>    #OUT + mult(5.2, 3.4) + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> multiply<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> multiply <span class=\"sy0\">*</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 2, "block": "<pre class=\"text highlighted_source\">const func float: multiply (in float: a, in float: b) is<br/>  return a * b;</pre>"}, {"lang": "SETL", "loc": 3, "block": "<pre class=\"text highlighted_source\">proc multiply( a, b );<br/>    return a * b;<br/>end proc;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">func multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">*</span> b;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 9, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    INTEGER PROCEDURE multiply(x, y);<br/>    INTEGER x, y;<br/>    BEGIN<br/>        multiply\u00a0:= x * y<br/>    END;<br/>    Outint(multiply(7,8), 2);<br/>    Outimage<br/>END</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">define: #multiply -&gt; [|\u00a0:a\u00a0:b | a * b].</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">mul</span>|<br/><span class=\"re6\">mul</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> | a * <span class=\"re5\">b</span> <span class=\"br0\">]</span>.</pre>"}, {"lang": "SNOBOL4", "loc": 7, "block": "<pre class=\"text highlighted_source\">          define('multiply(a,b)')\u00a0:(mul_end)<br/>multiply  multiply = a * b       \u00a0:(return)<br/>mul_end<br/>* Test<br/>          output = multiply(10.1,12.2)<br/>          output = multiply(10,12)<br/>end</pre>"}, {"lang": "SNUSP", "loc": 4, "block": "<pre class=\"text highlighted_source\">+1&gt;<a class=\"__cf_email__\" data-cfemail=\"cbe0e0f9f68b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\=&gt;<a class=\"__cf_email__\" data-cfemail=\"bf9494948c82ff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\<a class=\"__cf_email__\" data-cfemail=\"0f32324f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\=.=#  prints '6'<br/>        |        |   \\<a class=\"__cf_email__\" data-cfemail=\"86bbeff2e9e7bbc6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@<a class=\"__cf_email__\" data-cfemail=\"143f54\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+++++#<br/>        \\=======!\\==!/===?\\&lt;#<br/>                     \\&gt;+&lt;-/</pre>"}, {"lang": "SPARK", "loc": 5, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Functions <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Multiply <span class=\"br0\">(</span>A, B\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer;<br/>   <span class=\"co1\">--# pre A * B in Integer; -- See note below</span><br/>   <span class=\"co1\">--# return A * B; -- Implies commutativity on Multiply arguments</span><br/><span class=\"kw1\">end</span> Functions;</pre>"}, {"lang": "SPL", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply(a,b) &lt;= a*b</pre>"}, {"lang": "SSEM", "loc": 5, "block": "<pre class=\"text highlighted_source\">01000000000000100000000000000000   0. -2 to c<br/>00100000000000000000000000000000   1. 4 to CI<br/>01111111111111111111111111111111   2. -2<br/>00000000000001110000000000000000   3. Stop<br/>11100000000000000000000000000000   4. 7</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">val</span> multiply <span class=\"sy0\">=</span> op <span class=\"sy0\">*</span></pre>"}, {"lang": "Stata", "loc": 7, "block": "<pre class=\"text highlighted_source\">prog def multiply, return<br/>\targs a b<br/>\treturn sca product=`a'*`b'<br/>end<br/>\u00a0<br/>multiply 77 13<br/>di r(product)</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func multiply(a: Double, b: Double) -&gt; Double {<br/>   return a * b<br/>}</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> multiply <span class=\"br0\">{</span> arg1 arg2 <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$arg1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$arg2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">multiply(a, b)<br/>Func<br/>  Return a * b<br/>EndFunc</pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ ( ab-c ) * ] is multiply</pre>"}, {"lang": "TXR", "loc": 4, "block": "<pre class=\"text highlighted_source\">@(define multiply (a b out))<br/>@(bind out @(* a b))<br/>@(end)<br/>@(multiply 3 4 result)</pre>"}, {"lang": "uBasic/4tH", "loc": 5, "block": "<pre class=\"text highlighted_source\">PRINT FUNC (_Multiply (2,3))<br/>END<br/>\u00a0<br/>_Multiply PARAM (2)<br/>RETURN (<a class=\"__cf_email__\" data-cfemail=\"e283a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"086a48\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "UNIX Shell", "loc": 10, "block": "<pre class=\"bash highlighted_source\">multiply<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co0\"># There is never anything between the parentheses after the function name</span><br/>  <span class=\"co0\"># Arguments are obtained using the positional parameters $1, and $2</span><br/>  <span class=\"co0\"># The return is given as a parameter to the return command</span><br/>  <span class=\"kw3\">return</span> <span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"st0\">\"$1\"</span> \\<span class=\"sy0\">*</span> <span class=\"st0\">\"$2\"</span><span class=\"sy0\">`</span>    <span class=\"co0\"># The backslash is required to suppress interpolation</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># Call the function</span><br/>multiply <span class=\"nu0\">3</span> <span class=\"nu0\">4</span>    <span class=\"co0\"># The function is invoked in statement context</span><br/><span class=\"kw3\">echo</span> <span class=\"re4\">$?</span>        <span class=\"co0\"># The dollarhook special variable gives the return value</span></pre>"}, {"lang": "Ursa", "loc": 4, "block": "<pre class=\"text highlighted_source\"># multiply is a built-in in ursa, so the function is called mult instead<br/>def mult (int a, int b)<br/>\treturn (* a b)<br/>end</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">multiply = math..mul</pre>"}, {"lang": "V", "loc": 1, "block": "<pre class=\"text highlighted_source\">[multiply *].</pre>"}, {"lang": "VBA", "loc": 3, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Multiply(lngMcand <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, lngMplier <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    Multiply = lngMcand * lngMplier<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 3, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">function</span> multiply( multiplicand, multiplier )<br/>    multiply = multiplicand * multiplier<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Visual Basic", "loc": 5, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> multiply(a <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, b <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    multiply = a * b<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span> <br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 3, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Function</span> Multiply<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> a <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, <span class=\"kw1\">ByVal</span> b <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    <span class=\"kw1\">Return</span> a <span class=\"sy0\">*</span> b<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Wart", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>multiply a b<span class=\"br0\">)</span><br/>  a*b</pre>"}, {"lang": "X86 Assembly", "loc": 7, "block": "<pre class=\"asm highlighted_source\">        <span class=\"kw5\">.text</span><br/>        <span class=\"sy1\">.</span>globl  multiply<br/>        <span class=\"sy1\">.</span>type   multiply<span class=\"sy1\">,</span>@function<br/>multiply<span class=\"sy1\">:</span><br/>        movl    <span class=\"nu0\">4</span><span class=\"br0\">(</span><span class=\"sy1\">%</span><span class=\"kw4\">esp</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">%</span><span class=\"kw4\">eax</span><br/>        mull    <span class=\"nu0\">8</span><span class=\"br0\">(</span><span class=\"sy1\">%</span><span class=\"kw4\">esp</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ret</span></pre>"}, {"lang": "XLISP", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>* x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 8, "block": "<pre class=\"text highlighted_source\">func Multiply(A, B);    \\the characters in parentheses are only a comment<br/>int  A, B;              \\the arguments are actually declared here, as integers<br/>return A*B;            \\the default (undeclared) function type is integer<br/>                        \\no need to enclose a single statement in brackets<br/>\u00a0<br/>func real FloatMul(A, B); \\floating point version<br/>real A, B;              \\arguments are declared here as floating point (doubles)<br/>return A*B;</pre>"}, {"lang": "XSLT", "loc": 10, "block": "<pre class=\"text highlighted_source\">&lt;xsl:template name=\"product\"&gt;<br/>  &lt;xsl:param name=\"a\" select=\"2\"/&gt;<br/>  &lt;xsl:param name=\"b\" select=\"3\"/&gt;<br/>  &lt;fo:block&gt;product = &lt;xsl:value-of select=\"$a * $b\"/&gt;&lt;/fo:block&gt;<br/>&lt;/xsl:template&gt;<br/>\u00a0<br/>&lt;xsl:call-template name=\"product\"&gt;<br/>  &lt;xsl:with-param name=\"a\"&gt;4&lt;/xsl:with-param&gt;<br/>  &lt;xsl:with-param name=\"b\"&gt;5&lt;/xsl:with-param&gt;<br/>&lt;/xsl:call-template&gt;</pre>"}, {"lang": "Yorick", "loc": 3, "block": "<pre class=\"text highlighted_source\">func multiply(x, y) {<br/>    return x * y;<br/>}</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn multiply(x,y){x*y}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 3, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> FN m<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>: <span class=\"co3\">REM call our function to produce a value of 12</span><br/><span class=\"nu0\">20</span> STOP<br/><span class=\"nu0\">9950</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a*b</pre>"}]}