{"task": "CSV_to_HTML_translation", "blocks": [{"lang": "Ada", "loc": 40, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Templates_Parser;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Csv2Html <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> Templates_Parser.<span class=\"me1\">Vector_Tag</span>;<br/>\u00a0<br/>   Chars\u00a0: Templates_Parser.<span class=\"me1\">Vector_Tag</span>;<br/>   Speeches\u00a0: Templates_Parser.<span class=\"me1\">Vector_Tag</span>;<br/>\u00a0<br/>   CSV_File\u00a0: Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- read the csv data</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span> <span class=\"br0\">(</span>File =&gt; CSV_File,<br/>                     Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span>,<br/>                     Name =&gt; <span class=\"st0\">\"data.csv\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- fill the tags</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Of_File</span> <span class=\"br0\">(</span>CSV_File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         Whole_Line\u00a0: String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span> <span class=\"br0\">(</span>CSV_File<span class=\"br0\">)</span>;<br/>         Comma_Pos\u00a0: Natural\u00a0:= Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Index</span> <span class=\"br0\">(</span>Whole_Line, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         Chars\u00a0:= Chars &amp; Whole_Line <span class=\"br0\">(</span>Whole_Line'First .. <span class=\"me1\">Comma_Pos</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         Speeches\u00a0:= Speeches &amp; Whole_Line <span class=\"br0\">(</span>Comma_Pos + <span class=\"nu0\">1</span> .. <span class=\"me1\">Whole_Line</span>'Last<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Close</span> <span class=\"br0\">(</span>CSV_File<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- build translation table and output html</span><br/>   <span class=\"kw1\">declare</span><br/>      Translations\u00a0: <span class=\"kw3\">constant</span> Templates_Parser.<span class=\"me1\">Translate_Table</span>\u00a0:=<br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span> =&gt; Templates_Parser.<span class=\"me1\">Assoc</span> <span class=\"br0\">(</span><span class=\"st0\">\"CHAR\"</span>, Chars<span class=\"br0\">)</span>,<br/>         <span class=\"nu0\">2</span> =&gt; Templates_Parser.<span class=\"me1\">Assoc</span> <span class=\"br0\">(</span><span class=\"st0\">\"SPEECH\"</span>, Speeches<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>        <span class=\"br0\">(</span>Templates_Parser.<span class=\"me1\">Parse</span> <span class=\"br0\">(</span><span class=\"st0\">\"table.tmplt\"</span>, Translations<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Csv2Html;</pre>"}, {"lang": "ALGOL 68", "loc": 69, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"br0\">[</span>6<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> rows <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">\"Character,Speech\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"The multitude,Who are you?\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"Brians mother,I'm his mother; that's who!\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"kw20\">max abs char</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> encoded<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> encoded <span class=\"kw2\">DO</span> encoded<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:=</span><span class=\"kw8\">REPR</span> i <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># encoded[ABS\"\"\"\"]\u00a0:= \"&amp;quot;\"; optional #</span><br/>  encoded<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> <span class=\"st0\">\"&amp;\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"&amp;amp;\"</span><span class=\"sy1\">;</span><br/>  encoded<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> <span class=\"st0\">\"&lt;\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"&amp;lt;\"</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># encoded[ABS \"&gt;\"]\u00a0:= \"&amp;gt;\"; optional #</span> <br/>\u00a0<br/><span class=\"kw4\">OP</span> ENCODE <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> out <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> out<span class=\"sy1\">+:=</span> encoded<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> head <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> title<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>    $<span class=\"st0\">\"&lt;HEAD&gt;\"</span>l$<span class=\"sy1\">,</span><br/>      $<span class=\"st0\">\"&lt;TITLE&gt;\"</span>g<span class=\"st0\">\"&lt;/TITLE&gt;\"</span>l$<span class=\"sy1\">,</span> title<span class=\"sy1\">,</span><br/>      $<span class=\"st0\">\"&lt;STYLE type=\"</span><span class=\"st0\">\"text/css\"</span><span class=\"st0\">\"&gt;\"</span>l$<span class=\"sy1\">,</span><br/>        $<span class=\"st0\">\"TD {background-color:#ddddff; }\"</span>l$<span class=\"sy1\">,</span><br/>        $<span class=\"st0\">\"thead TD {background-color:#ddffdd; text-align:center; }\"</span>l$<span class=\"sy1\">,</span><br/>      $<span class=\"st0\">\"&lt;/STYLE&gt;\"</span>l$<span class=\"sy1\">,</span><br/>    $<span class=\"st0\">\"&lt;/HEAD&gt;\"</span>l$<br/>  <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># define HTML tags using Algol68's \"reverent\" block structuring #</span><br/><span class=\"kw4\">PROC</span> html <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;HTML&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       body <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;BODY&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         table <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;TABLE&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>           table row <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;TR&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             th <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"&lt;TH&gt;\"</span>g<span class=\"st0\">\"&lt;/TH&gt;\"</span>$<span class=\"sy1\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             td <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"&lt;TD&gt;\"</span>g<span class=\"st0\">\"&lt;/TD&gt;\"</span>$<span class=\"sy1\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>           elbat row <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TR&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         elbat <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TABLE&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       ydob <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/BODY&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     lmth <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/HTML&gt;\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw6\">FILE</span> row input<span class=\"sy1\">;</span> <span class=\"kw3\">STRING</span> row<span class=\"sy1\">;</span> <span class=\"kw3\">CHAR</span> ifs <span class=\"sy1\">=</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">associate</span><span class=\"br0\">(</span>row input<span class=\"sy1\">,</span> row<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">make term</span><span class=\"br0\">(</span>row input<span class=\"sy1\">,</span> ifs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>html<span class=\"sy1\">;</span><br/>  head<span class=\"br0\">(</span><span class=\"st0\">\"CSV to HTML translation - Extra Credit\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  body<span class=\"sy1\">;</span><br/>    table<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> nr <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> rows <span class=\"kw2\">DO</span><br/>        row <span class=\"sy1\">:=</span> rows<span class=\"br0\">[</span>nr<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        table row<span class=\"sy1\">;</span><br/>          <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span>row input<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> row input<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> row end<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw2\">FOR</span> nf <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">STRING</span> field<span class=\"sy1\">;</span> get<span class=\"br0\">(</span>row input<span class=\"sy1\">,</span>field<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"br0\">(</span>nr<span class=\"sy1\">=</span>1<span class=\"sy1\">|</span>th<span class=\"sy1\">|</span>td<span class=\"br0\">)</span><span class=\"br0\">(</span>ENCODE field<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            get<span class=\"br0\">(</span>row input<span class=\"sy1\">,</span> <span class=\"kw22\">space</span><span class=\"br0\">)</span><br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          row end<span class=\"sy1\">:</span> reset<span class=\"br0\">(</span>row input<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        elbat row<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    elbat<span class=\"sy1\">;</span><br/>  ydob<span class=\"sy1\">;</span><br/>lmth</pre>"}, {"lang": "AutoHotkey", "loc": 25, "block": "<pre class=\"autohotkey highlighted_source\">CSVData <span class=\"sy0\">=</span> <br/><span class=\"br0\">(</span><br/>Character<span class=\"sy0\">,</span>Speech<br/>The multitude<span class=\"sy0\">,</span>The messiah! <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a> us the messiah!<br/>Brians mother<span class=\"sy0\">,&lt;</span>angry<span class=\"sy0\">&gt;</span>Now you listen here! He's not the messiah<span class=\"co1\">; he's a very naughty boy! Now go away!&lt;/angry&gt;</span><br/>The multitude<span class=\"sy0\">,</span>Who are you?<br/>Brians mother<span class=\"sy0\">,</span>I'm his mother<span class=\"co1\">; that's who!</span><br/>The multitude<span class=\"sy0\">,</span>Behold his mother! Behold his mother!<br/><span class=\"br0\">)</span><br/>TableData <span class=\"sy0\">:=</span> <span class=\"st0\">\"&lt;table&gt;\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> CSVData<span class=\"sy0\">,</span>`n<br/><span class=\"br0\">{</span><br/>   TableData <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n  &lt;tr&gt;\"</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> CSV<br/>      TableData <span class=\"sy0\">.=</span> <span class=\"st0\">\"&lt;td&gt;\"</span> HTMLEncode<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><br/>   TableData <span class=\"sy0\">.=</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><br/><span class=\"br0\">}</span><br/>TableData <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n&lt;/table&gt;\"</span><br/>HTMLEncode<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   static rep <span class=\"sy0\">:=</span> <span class=\"st0\">\"&amp;amp;&lt;lt;&gt;gt;\"</span><span class=\"st0\">\"quot\"</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> rep<span class=\"sy0\">,</span><span class=\"co1\">;</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"&amp;\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\";\"</span><span class=\"sy0\">,</span> All<br/>   <span class=\"kw1\">return</span> str<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> TableData</pre>"}, {"lang": "AutoIt", "loc": 30, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$ascarray</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span><span class=\"nu0\">38</span><span class=\"sy0\">,</span><span class=\"nu0\">60</span><span class=\"sy0\">,</span><span class=\"nu0\">62</span><span class=\"br0\">]</span><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Character,Speech\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"The multitude,Who are you?\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"Brians mother,I'm his mother; that's who!\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$String</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$ascarray</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"re0\">$String</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">Stringreplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$String</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"re0\">$ascarray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;#\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$ascarray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\";\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;table&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$crlfsplit</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"br0\">(</span><span class=\"re0\">$String</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$crlfsplit</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;thead&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;tr&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t\t<span class=\"re0\">$komsplit</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"br0\">(</span><span class=\"re0\">$crlfsplit</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$komsplit</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;th&gt;\"</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$komsplit</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"&lt;/th&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$komsplit</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"&lt;/td&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;/thead&gt;\"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">'@@ Debug('</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@ScriptLineNumber</span></span></a> <span class=\"sy0\">&amp;</span> <span class=\"st0\">')\u00a0: $newstring = '</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$newstring</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@crlf</span></span></a> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'&gt;Error code: '</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@crlf</span></span></a><span class=\"br0\">)</span> <span class=\"co0\">;### Debug Console</span><br/>\u00a0</pre>"}, {"lang": "ANTLR", "loc": 11, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"co1\">//  Create an HTML Table from comma seperated values</span><br/><span class=\"co1\">//  Nigel Galloway - June 2nd., 2013</span><br/>grammar csv2html<span class=\"sy0\">;</span><br/>dialog <span class=\"sy0\">:</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;HTML&gt;&lt;Table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span>header body<span class=\"sy0\">+</span><span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/Table&gt;&lt;/HTML&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><br/>header <span class=\"sy0\">:</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;THEAD align=<span class=\"es0\">\\\"</span>center<span class=\"es0\">\\\"</span>&gt;&lt;TR bgcolor=<span class=\"es0\">\\\"</span>blue<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span>row<span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TR&gt;&lt;/THEAD\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>body   <span class=\"sy0\">:</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;TBODY&gt;&lt;TR&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span>row<span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TR&gt;&lt;/TBODY\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>row    <span class=\"sy0\">:</span> field <span class=\"st0\">','</span> field <span class=\"st0\">'<span class=\"es0\">\\r</span>'</span><span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><br/>field  <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afield+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Field</span></a><span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;TD&gt;\"</span> <span class=\"sy0\">+</span> $Field.<span class=\"me1\">text</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span>,<span class=\"st0\">\"&amp;lt;\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span>,<span class=\"st0\">\"&amp;gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;/TD&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afield+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Field</span></a>  <span class=\"sy0\">:</span> ~<span class=\"br0\">[</span>,\\n\\r<span class=\"br0\">]</span><span class=\"sy0\">+;</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 24, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">FS</span>=<span class=\"st0\">\",\"</span><br/>        <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;table&gt;\"</span><br/><span class=\"br0\">}</span>       <br/>\u00a0<br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"sy2\">&lt;</span><span class=\"sy3\">/</span>, <span class=\"st0\">\"<span class=\"es0\">\\\\</span>&amp;lt;\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">/</span>, <span class=\"st0\">\"<span class=\"es0\">\\\\</span>&amp;gt;\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>&amp;<span class=\"sy3\">/</span>, <span class=\"st0\">\"<span class=\"es0\">\\\\</span>&amp;gt;\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>&lt;tr&gt;\"</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>f = <span class=\"nu0\">1</span>; f <span class=\"sy2\">&lt;=</span> <span class=\"kw3\">NF</span>; f<span class=\"sy3\">++</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">NR</span> <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&amp;&amp;</span> header<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>&lt;th&gt;%s&lt;/th&gt;<span class=\"es0\">\\n</span>\"</span>, <span class=\"re0\">$f</span><br/>                <span class=\"br0\">}</span>       <br/>                <span class=\"kw1\">else</span> <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>&lt;td&gt;%s&lt;/td&gt;<span class=\"es0\">\\n</span>\"</span>, <span class=\"re0\">$f</span><br/>        <span class=\"br0\">}</span>       <br/>        <span class=\"kw5\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>&lt;/tr&gt;\"</span><br/><span class=\"br0\">}</span>       <br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">print</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 32, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::Batch Files are terrifying when it comes to string processing.</span><br/><span class=\"co2\">::But well, a decent implementation!</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co1\"><br/>REM Below is the CSV data to be converted.</span><br/><span class=\"co1\">REM Exactly three colons must be put before the actual line.</span><br/><span class=\"co2\"><br/>:::Character,Speech</span><br/><span class=\"co2\">:::The multitude,The messiah! Show us the messiah!</span><br/><span class=\"co2\">:::Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;</span><br/><span class=\"co2\">:::The multitude,Who are you?</span><br/><span class=\"co2\">:::Brians mother,I'm his mother; that's who!</span><br/><span class=\"co2\">:::The multitude,Behold his mother! Behold his mother!</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> disabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>table<span class=\"co3\">^&gt;</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"delims=\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'findstr \"<span class=\"co3\">^:</span>:<span class=\"re0\">:\"</span> \"<span class=\"sy0\">%</span><span class=\"re3\">~f0</span>\"'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>   <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">%%</span><span class=\"re3\">A</span>\"<br/>   <a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co1\">      REM The next command removes the three colons...</span><br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">!</span><span class=\"re2\">var:~3</span><span class=\"sy0\">!</span>\"<br/><span class=\"co1\"><br/>      REM The following commands to the substitions per line...</span><br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">!</span>var:<span class=\"sy0\">&amp;</span>=<span class=\"sy0\">&amp;</span>amp;<span class=\"sy0\">!</span>\"<br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">!</span>var:<span class=\"sy0\">&lt;</span>=<span class=\"sy0\">&amp;</span>lt;<span class=\"sy0\">!</span>\"<br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">!</span>var:<span class=\"sy0\">&gt;</span>=<span class=\"sy0\">&amp;</span>gt;<span class=\"sy0\">!</span>\"<br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"var=<span class=\"sy0\">!</span><span class=\"re2\">var:,=&lt;/td&gt;&lt;td&gt;</span><span class=\"sy0\">!</span>\"<br/>\u00a0<br/>      <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>tr<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>td<span class=\"co3\">^&gt;</span><span class=\"sy0\">!</span><span class=\"re2\">var</span><span class=\"sy0\">!</span><span class=\"co3\">^&lt;</span>/td<span class=\"co3\">^&gt;</span><span class=\"co3\">^&lt;</span>/tr<span class=\"co3\">^&gt;</span><br/>   <a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^&lt;</span>/table<span class=\"co3\">^&gt;</span></pre>"}, {"lang": "BBC BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\">      DATA \"Character,Speech\"<br/>      DATA \"The multitude,The messiah! Show us the messiah!\"<br/>      DATA \"Brian's mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"<br/>      DATA \"The multitude,Who are you?\"<br/>      DATA \"Brian's mother,I'm his mother; that's who!\"<br/>      DATA \"The multitude,Behold his mother! Behold his mother!\"<br/>      DATA \"***\"<br/>\u00a0<br/>      *SPOOL CSVtoHTML.htm<br/>      PRINT \"&lt;HTML&gt;\"<br/>      PRINT \"&lt;HEAD&gt;\"<br/>      PRINT \"&lt;/HEAD&gt;\"<br/>      PRINT \"&lt;BODY&gt;\"<br/>      PRINT \"&lt;table border=1 cellpadding =10 cellspacing=0&gt;\"<br/>\u00a0<br/>      header% = TRUE<br/>      REPEAT<br/>        READ csv$<br/>        IF csv$ = \"***\" THEN EXIT REPEAT<br/>\u00a0<br/>        IF header% PRINT \"&lt;tr&gt;&lt;th&gt;\"; ELSE PRINT \"&lt;tr&gt;&lt;td&gt;\";<br/>        FOR i% = 1 TO LEN(csv$)<br/>          c$ = MID$(csv$, i%, 1)<br/>          CASE c$ OF<br/>            WHEN \",\": IF header% PRINT \"&lt;/th&gt;&lt;th&gt;\"; ELSE PRINT \"&lt;/td&gt;&lt;td&gt;\";<br/>            WHEN \"&lt;\": PRINT \"&amp;lt;\";<br/>            WHEN \"&gt;\": PRINT \"&amp;gt;\";<br/>            WHEN \"&amp;\": PRINT \"&amp;amp;\";<br/>            OTHERWISE: PRINT c$;<br/>          ENDCASE<br/>        NEXT i%<br/>        IF header% PRINT \"&lt;/th&gt;&lt;/tr&gt;\" ELSE PRINT \"&lt;/td&gt;&lt;/tr&gt;\"<br/>\u00a0<br/>        header% = FALSE<br/>      UNTIL FALSE<br/>\u00a0<br/>      PRINT \"&lt;/table&gt;\"<br/>      PRINT \"&lt;/BODY&gt;\"<br/>      PRINT \"&lt;/HTML&gt;\"<br/>      *spool<br/>\u00a0<br/>      SYS \"ShellExecute\", @hwnd%, 0, \"CSVtoHTML.htm\", 0, 0, 1<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 32, "block": "<pre class=\"text highlighted_source\">( ( CSVtoHTML<br/>  =   p q Character Speech swor rows row<br/>    .   0:?p<br/>      &amp;\u00a0:?swor:?rows<br/>      &amp; ( @(\u00a0!arg<br/>          \u00a0:  \u00a0?<br/>               ( [!p\u00a0?Character \",\"\u00a0?Speech \\n [?q\u00a0?<br/>               &amp;\u00a0!q:?p<br/>               &amp;     (tr.,(td.,!Character) (td.,!Speech))<br/>                    \u00a0!swor<br/>                \u00a0:\u00a0?swor<br/>               &amp; ~<br/>               )<br/>           )<br/>        |     whl<br/>            ' (\u00a0!swor:%?row\u00a0%?swor<br/>              &amp;\u00a0!row \\n\u00a0!rows:?rows<br/>              )<br/>          &amp;   toML<br/>            $ (table.,(thead.,!swor) \\n (tbody.,!rows))<br/>        )<br/>  )<br/>&amp;   CSVtoHTML<br/>  $ \"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>\"<br/>)<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 9, "block": "<pre class=\"text highlighted_source\">&lt;v_&gt;#!,#:&lt;     \"&lt;table&gt;\"     \\0 +55<br/> v &gt;0&gt;::65*1+`\\\"~\"`!*#v_4-5v  &gt;<br/>v&gt;#^~^&lt;v\"&lt;tr&gt;&lt;td&gt;\" &lt;  \\v-1/&lt;&gt;\"&gt;elb\"<br/>&lt;^     &gt;:#,_$10    |!:&lt;&gt;\\#v_ vv\"ta\"<br/>v-\",\":\\-\"&amp;\":\\-\"&lt;\":\\&lt;&gt;5#05#&lt;v+ &gt;\"/\"v<br/>&gt;#v_$$$0\"&gt;dt&lt;&gt;dt/&lt;\"vv\"tr&gt;\"+&lt;5 v\"&lt;\"&lt;<br/>&gt;^&gt;\\#v_$$0\";pma&amp;\"  v&gt;\"/&lt;&gt;d\"v5 v , &lt;<br/>$    &gt; \\#v_$0\";tl&amp;\"v v\"&lt;/t\"&lt;0 &gt;\u00a0: |<br/>^_&gt;#!,#:&lt;&gt;#&lt;0#&lt;\\#&lt;&lt;&lt; &gt;:#,_$#^<a class=\"__cf_email__\" data-cfemail=\"eab59caa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> $&lt;</pre>"}, {"lang": "C", "loc": 29, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>input <span class=\"sy0\">=</span> <br/>\t<span class=\"st0\">\"Character,Speech<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \"</span><br/>\t\t<span class=\"st0\">\"he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"The multitude,Who are you?<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es1\">\\n</span>&lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> input<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span> s<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">:</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>&lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">','</span><span class=\"sy0\">:</span>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&lt;'</span><span class=\"sy0\">:</span>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&amp;lt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&gt;'</span><span class=\"sy0\">:</span>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&amp;gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">:</span>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&amp;amp;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>&lt;/table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 32, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;boost/regex.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> csvToHTML<span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> text <span class=\"sy1\">=</span> <span class=\"st0\">\"Character,Speech<span class=\"es1\">\\n</span>\"</span> <br/>                            <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es1\">\\n</span>\"</span> <br/>\t\t\t    <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es1\">\\n</span>\"</span> <br/>\t                    <span class=\"st0\">\"The multitude,Who are you?<span class=\"es1\">\\n</span>\"</span> <br/>\t\t            <span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es1\">\\n</span>\"</span> <br/>\t\t            <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> csvToHTML<span class=\"br0\">(</span> text <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> csvToHTML<span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> csvtext <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"co1\">//the order of the regexes and the replacements is decisive!</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> regexes<span class=\"br0\">[</span> <span class=\"nu0\">5</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"&lt;\"</span> , <span class=\"st0\">\"&gt;\"</span> , <span class=\"st0\">\"^(.+?)<span class=\"es1\">\\\\</span>b\"</span> , <span class=\"st0\">\",\"</span> , <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> replacements <span class=\"br0\">[</span> <span class=\"nu0\">5</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"&amp;lt;\"</span> , <span class=\"st0\">\"&amp;gt;\"</span> , <span class=\"st0\">\"    &lt;TR&gt;&lt;TD&gt;$1\"</span> , <span class=\"st0\">\"&lt;/TD&gt;&lt;TD&gt;\"</span>, <span class=\"st0\">\"&lt;/TD&gt;&lt;/TR&gt;<span class=\"es1\">\\n</span>\"</span>  <span class=\"br0\">}</span> <span class=\"sy4\">;</span>  <br/>   boost<span class=\"sy4\">::</span><span class=\"me2\">regex</span> e1<span class=\"br0\">(</span> regexes<span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> tabletext <span class=\"sy1\">=</span> boost<span class=\"sy4\">::</span><span class=\"me2\">regex_replace</span><span class=\"br0\">(</span> csvtext , e1 ,<br/>     replacements<span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span> , boost<span class=\"sy4\">::</span><span class=\"me2\">match_default</span> <span class=\"sy3\">|</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format_all</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      e1.<span class=\"me1\">assign</span><span class=\"br0\">(</span> regexes<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      tabletext <span class=\"sy1\">=</span> boost<span class=\"sy4\">::</span><span class=\"me2\">regex_replace</span><span class=\"br0\">(</span> tabletext , e1 , replacements<span class=\"br0\">[</span> i <span class=\"br0\">]</span> , boost<span class=\"sy4\">::</span><span class=\"me2\">match_default</span> <span class=\"sy3\">|</span> boost<span class=\"sy4\">::</span><span class=\"me2\">format_all</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   tabletext <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">(</span> <span class=\"st0\">\"&lt;TABLE&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> tabletext <span class=\"sy4\">;</span><br/>   tabletext.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"st0\">\"&lt;/TABLE&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> tabletext <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 34, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Linq</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Net</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">static</span> string ConvertCsvToHtmlTable<span class=\"br0\">(</span>string csvText<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">//split the CSV, assume no commas or line breaks in text</span><br/>            List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;&gt;</span> splitString <span class=\"sy0\">=</span> new List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> lineSplit <span class=\"sy0\">=</span> csvText.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            foreach <span class=\"br0\">(</span>string line in lineSplit<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                splitString.<span class=\"me1\">Add</span><span class=\"br0\">(</span>line.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">//encode text safely, and create table</span><br/>            string tableResult <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"sy0\">;</span><br/>            foreach<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>string<span class=\"sy0\">&gt;</span> splitLine in splitString<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                tableResult <span class=\"sy0\">+=</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"sy0\">;</span><br/>                foreach<span class=\"br0\">(</span>string splitText in splitLine<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    tableResult <span class=\"sy0\">+=</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">+</span> WebUtility.<span class=\"me1\">HtmlEncode</span><span class=\"br0\">(</span>splitText<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                tableResult <span class=\"sy0\">+=</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            tableResult <span class=\"sy0\">+=</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> tableResult<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 39, "block": "<pre class=\"coffeescript highlighted_source\">String<span class=\"sy0\">::</span>__defineGetter__ <span class=\"st0\">'escaped'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\t<span class=\"kw3\">this</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"sy0\">/&amp;/</span>g<span class=\"sy0\">,</span> <span class=\"st0\">'&amp;amp;'</span><span class=\"br0\">)</span><br/>\t    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"sy0\">/&lt;/</span>g<span class=\"sy0\">,</span> <span class=\"st0\">'&amp;lt;'</span><span class=\"br0\">)</span><br/>\t    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"sy0\">/&gt;/</span>g<span class=\"sy0\">,</span> <span class=\"st0\">'&amp;gt;'</span><span class=\"br0\">)</span><br/>\t    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"/g, '&amp;quot;') // rosettacode doesn't like \"</span><br/>\u00a0<br/>text = <span class=\"st0\">'''<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>'''</span><br/>\u00a0<br/>lines = <span class=\"br0\">(</span>line.<span class=\"me1\">split</span> <span class=\"st0\">','</span> <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> text.<span class=\"me1\">split</span> <span class=\"sy0\">/</span><span class=\"br0\">[</span>\\n\\r<span class=\"br0\">]</span><span class=\"sy0\">+/</span>g<span class=\"br0\">)</span><br/>\u00a0<br/>header = lines.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"\"\"<br/>&lt;table cellspacing=\"0\"&gt;<br/>\t&lt;thead&gt;<br/>\t\t&lt;th scope=\"col\"&gt;#{header[0]}&lt;/th&gt;<br/>\t\t&lt;th scope=\"col\"&gt;#{header[1]}&lt;/th&gt;<br/>\t&lt;/thead&gt;<br/>\t&lt;tbody&gt;<br/>\"\"\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> lines<br/>\t<span class=\"br0\">[</span>character<span class=\"sy0\">,</span> speech<span class=\"br0\">]</span> = line<br/>\tconsole.<span class=\"me1\">log</span> <span class=\"st0\">\"\"\"<br/>\t\t&lt;th scope=\"row\"&gt;#{character}&lt;/th&gt;<br/>\t\t&lt;td&gt;#{speech.escaped}&lt;/td&gt;<br/>\t\"\"\"</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"\"\"<br/>\t&lt;/tbody&gt;<br/>&lt;/table&gt;<br/>\t\"\"\"</span></pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 53, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *csv* <span class=\"st0\">\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split-string <span class=\"br0\">(</span>string delim-char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>start <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ end<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>end <span class=\"br0\">(</span>position delim-char string<span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span>position delim-char string <span class=\"sy0\">:</span><span class=\"me1\">start</span> start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> end<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>subseq string start<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>push <span class=\"br0\">(</span>subseq string start end<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; HTML escape code modified from:</span><br/><span class=\"co1\">;;; http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> escape-char <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">case</span> char<br/>    <span class=\"br0\">(</span>#\\<span class=\"sy0\">&amp;</span> <span class=\"st0\">\"&amp;amp;\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>#\\<span class=\"sy0\">&lt;</span> <span class=\"st0\">\"&amp;lt;\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>#\\<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;gt;\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>t <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"&amp;#~d;\"</span> <span class=\"br0\">(</span>char-code char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> escape <span class=\"br0\">(</span>in<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>to-escape <span class=\"st0\">\"&lt;&gt;&amp;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>needs-escape-p <span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"br0\">(</span>find char to-escape<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>with-output-to-string <span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop for start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ pos<span class=\"br0\">)</span><br/>\t   for pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>position-<span class=\"kw1\">if</span> #'needs-escape-p in <span class=\"sy0\">:</span><span class=\"me1\">start</span> start<span class=\"br0\">)</span><br/>\t   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-sequence in out <span class=\"sy0\">:</span><span class=\"me1\">start</span> start <span class=\"sy0\">:</span><span class=\"me1\">end</span> pos<span class=\"br0\">)</span><br/>\t   <span class=\"kw1\">when</span> pos <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-sequence <span class=\"br0\">(</span>escape-char <span class=\"br0\">(</span>char in pos<span class=\"br0\">)</span><span class=\"br0\">)</span> out<span class=\"br0\">)</span><br/>\t   while pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> html-row <span class=\"br0\">(</span>values headerp<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tag <span class=\"br0\">(</span><span class=\"kw1\">if</span> headerp <span class=\"st0\">\"th\"</span> <span class=\"st0\">\"td\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-output-to-string <span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>write-string <span class=\"st0\">\"&lt;tr&gt;\"</span> out<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>val values<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>format out <span class=\"st0\">\"&lt;~A&gt;~A&lt;/~A&gt;\"</span> tag <span class=\"br0\">(</span>escape val<span class=\"br0\">)</span> tag<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>write-string <span class=\"st0\">\"&lt;/tr&gt;\"</span> out<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> csv-<span class=\"sy0\">&gt;</span>html <span class=\"br0\">(</span>csv<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>lines <span class=\"br0\">(</span>split-string csv #\\Newline<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>cols  <span class=\"br0\">(</span>split-string <span class=\"br0\">(</span>first lines<span class=\"br0\">)</span> #\\<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>rows  <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">(</span>split-string row #\\<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rest lines<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-output-to-string <span class=\"br0\">(</span>html<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format html <span class=\"st0\">\"&lt;table&gt;~C\"</span> #\\Newline<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format html <span class=\"st0\">\"~C~A~C\"</span> #\\Tab <span class=\"br0\">(</span>html-row cols t<span class=\"br0\">)</span> #\\Newline<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>row rows<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>format html <span class=\"st0\">\"~C~A~C\"</span> #\\Tab <span class=\"br0\">(</span>html-row row <span class=\"kw1\">nil</span><span class=\"br0\">)</span> #\\Newline<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>write-string <span class=\"st0\">\"&lt;/table&gt;\"</span> html<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 37, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> input <span class=\"sy0\">=</span><br/>        <span class=\"st0\">\"Character,Speech<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>        <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>        <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \"</span> <span class=\"sy0\">~</span><br/>            <span class=\"st0\">\"he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>        <span class=\"st0\">\"The multitude,Who are you?<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>        <span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">~</span><br/>        <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"&lt;html&gt;<span class=\"es1\">\\n</span>&lt;head&gt;&lt;meta charset=<span class=\"es1\">\\\"</span>utf-8<span class=\"es1\">\\\"</span>&gt;&lt;/head&gt;<span class=\"es1\">\\n</span>&lt;body&gt;<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"&lt;table border=<span class=\"es1\">\\\"</span>1<span class=\"es1\">\\\"</span> cellpadding=<span class=\"es1\">\\\"</span>5<span class=\"es1\">\\\"</span> cellspacing=<span class=\"es1\">\\\"</span>0<span class=\"es1\">\\\"</span>&gt;<span class=\"es1\">\\n</span>&lt;thead&gt;<span class=\"es1\">\\n</span>  &lt;tr&gt;&lt;td&gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> theadDone <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>theadDone<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>  &lt;tr&gt;&lt;td&gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>&lt;/thead&gt;<span class=\"es1\">\\n</span>&lt;tbody&gt;<span class=\"es1\">\\n</span>  &lt;tr&gt;&lt;td&gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>                    theadDone <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">','</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'&lt;'</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"&amp;lt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span>      <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'&gt;'</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"&amp;gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span>      <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">:</span>  <span class=\"st0\">\"&amp;amp;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span>     <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span>   c.<span class=\"me1\">write</span><span class=\"sy0\">;</span>           <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>&lt;/tbody&gt;<span class=\"es1\">\\n</span>&lt;/table&gt;<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>&lt;/body&gt;&lt;/html&gt;\"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 173, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> csv2html<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span><br/>  Classes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  <span class=\"co1\">// Carriage Return/Line Feed</span><br/>  CRLF    <span class=\"sy3\">=</span> <span class=\"re1\">#13</span><span class=\"re1\">#10</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// The CSV data</span><br/>  csvData <span class=\"sy3\">=</span><br/>  <span class=\"st0\">'Character,Speech'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'The multitude,The messiah! Show us the messiah!'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'Brians mother,&lt;angry&gt;Now you listen here! He'</span><span class=\"st0\">'s not the messiah; he'</span><span class=\"st0\">'s a very naughty boy! Now go away!&lt;/angry&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'The multitude,Who are you?'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'Brians mother,I'</span><span class=\"st0\">'m his mother; that'</span><span class=\"st0\">'s who!'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'The multitude,Behold his mother! Behold his mother!'</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// HTML header</span><br/>  htmlHead <span class=\"sy3\">=</span><br/>  <span class=\"st0\">'&lt;!DOCTYPE html'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;head&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;title&gt;CSV-to-HTML Conversion&lt;/title&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;style type=\"text/css\"&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'body {font-family:verdana,helvetica,sans-serif;font-size:100%}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'table {width:70%;border:0;font-size:80%;margin:auto}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'th,td {padding:4px}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'th {text-align:left;background-color:#eee}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'th.c {width:15%}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'td.c {width:15%}'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;/style&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;/head&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;body&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// HTML footer</span><br/>  htmlFoot <span class=\"sy3\">=</span><br/>  <span class=\"st0\">'&lt;/body&gt;'</span><span class=\"sy3\">+</span>CRLF<span class=\"sy3\">+</span><br/>  <span class=\"st0\">'&lt;/html&gt;'</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Function to split a string into a list using a given delimiter }</span><br/><span class=\"kw1\">procedure</span> SplitString<span class=\"br0\">(</span>S<span class=\"sy1\">,</span> Delim<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> Rslt<span class=\"sy1\">:</span> TStrings<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  fld<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  fld <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> S<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> Delim <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          Rslt<span class=\"sy1\">.</span><span class=\"kw3\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>fld<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          fld <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">else</span><br/>         fld <span class=\"sy1\">:</span><span class=\"sy3\">=</span> S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">+</span>fld<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fld &lt;&gt; <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Rslt<span class=\"sy1\">.</span><span class=\"kw3\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>fld<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Simple CSV parser with option to specify that the first row is a header row }</span><br/><span class=\"kw1\">procedure</span> ParseCSV<span class=\"br0\">(</span><span class=\"kw1\">const</span> csvIn<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> htmlOut<span class=\"sy1\">:</span> TStrings<span class=\"sy1\">;</span> FirstRowIsHeader<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span> <span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  rowstart      <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;tr&gt;&lt;td class=\"c\"&gt;'</span><span class=\"sy1\">;</span><br/>  rowend        <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;/td&gt;&lt;/tr&gt;'</span><span class=\"sy1\">;</span><br/>  cellendstart  <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;/td&gt;&lt;td class=\"s\"&gt;'</span><span class=\"sy1\">;</span><br/>  hcellendstart <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;/th&gt;&lt;th class=\"s\"&gt;'</span><span class=\"sy1\">;</span><br/>  hrowstart     <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;tr&gt;&lt;th class=\"c\"&gt;'</span><span class=\"sy1\">;</span><br/>  hrowend       <span class=\"sy3\">=</span> <span class=\"st0\">'&lt;/th&gt;&lt;/tr&gt;'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  tmp<span class=\"sy1\">,</span>pieces<span class=\"sy1\">:</span> TStrings<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// HTML header</span><br/>  htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> htmlHead <span class=\"sy3\">+</span> CRLF <span class=\"sy3\">+</span> CRLF<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Start the HTML table</span><br/>  htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy3\">+</span> <span class=\"st0\">'&lt;table summary=\"csv2table conversion\"&gt;'</span>  <span class=\"sy3\">+</span> CRLF<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create stringlist</span><br/>  tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"co1\">// Assign CSV data to stringlist and fix occurences of '&lt;' and '&gt;'</span><br/>    tmp<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">StringReplace</span><span class=\"br0\">(</span>csvIn<span class=\"sy1\">,</span><span class=\"st0\">'&lt;'</span><span class=\"sy1\">,</span><span class=\"st0\">'&amp;lt;'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>rfReplaceAll<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    tmp<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">StringReplace</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"sy1\">,</span><span class=\"st0\">'&gt;'</span><span class=\"sy1\">,</span><span class=\"st0\">'&amp;gt;'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>rfReplaceAll<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Create stringlist to hold the parts of the split data</span><br/>    pieces <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">try</span><br/>\u00a0<br/>      <span class=\"co1\">// Loop through the CSV rows</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Pred</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">begin</span><br/>          <span class=\"co1\">// Split the current row</span><br/>          SplitString<span class=\"br0\">(</span>tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"sy1\">,</span>pieces<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>          <span class=\"co1\">// Check if first row and FirstRowIsHeader flag set</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> FirstRowIsHeader <span class=\"kw1\">then</span><br/>\u00a0<br/>            <span class=\"co1\">// Render HTML</span><br/>            htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy3\">+</span> hrowstart <span class=\"sy3\">+</span> pieces<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> hcellendstart <span class=\"sy3\">+</span> pieces<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> hrowend <span class=\"sy3\">+</span> CRLF<br/>            <span class=\"kw1\">else</span><br/>            htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy3\">+</span> rowstart <span class=\"sy3\">+</span> pieces<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> cellendstart <span class=\"sy3\">+</span> pieces<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> rowend <span class=\"sy3\">+</span> CRLF<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// Finish the HTML table and end the HTML page</span><br/>      htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> htmlOut<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy3\">+</span> <span class=\"st0\">'&lt;/table&gt;'</span> <span class=\"sy3\">+</span> CRLF <span class=\"sy3\">+</span> htmlFoot<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">finally</span><br/>      pieces<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">finally</span><br/>    tmp<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  HTML<span class=\"sy1\">:</span> TStrings<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Create stringlist to hold HTML output</span><br/>  HTML <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Basic:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Load and parse the CSV data</span><br/>    ParseCSV<span class=\"br0\">(</span>csvData<span class=\"sy1\">,</span>HTML<span class=\"sy1\">,</span><span class=\"kw2\">False</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Output the HTML to the console</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>HTML<span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Save the HTML to a file (in application's folder)</span><br/>    HTML<span class=\"sy1\">.</span><span class=\"me1\">SaveToFile</span><span class=\"br0\">(</span><span class=\"st0\">'csv2html_basic.html'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'====================================='</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    HTML<span class=\"sy1\">.</span><span class=\"me1\">Clear</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Extra Credit:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Load and parse the CSV data</span><br/>    ParseCSV<span class=\"br0\">(</span>csvData<span class=\"sy1\">,</span>HTML<span class=\"sy1\">,</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Output the HTML to the console</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>HTML<span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Save the HTML to a file (in application's folder)</span><br/>    HTML<span class=\"sy1\">.</span><span class=\"me1\">SaveToFile</span><span class=\"br0\">(</span><span class=\"st0\">'csv2html_extra.html'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'====================================='</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">finally</span><br/>    HTML<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Keep console window open</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "EchoLisp", "loc": 32, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; CSV -&gt; LISTS</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>row line<span class=\"br0\">)</span>  <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split line <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>csv<span class=\"sy0\">-&gt;</span>table csv<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span>  csv<span class=\"sy0\">-&gt;</span>row <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split csv <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; LISTS-&gt;HTML</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> html 'html<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span>  <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag tag  html<span class=\"sy0\">-</span>proc content <span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>style tag<span class=\"br0\">)</span><br/>\t\t \t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;%s style='%a'&gt;\"</span> tag <span class=\"br0\">(</span>style tag<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t \t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;%s&gt;\"</span> tag <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>html<span class=\"sy0\">-</span>proc content<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"&lt;/%s&gt; \"</span> tag <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; html procs\u00a0: 1 tag, 1 proc</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>raw content<span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>push html <span class=\"br0\">(</span>format <span class=\"st0\">\"%s\"</span> content<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>header headers<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>h headers<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'th h<span class=\"sy0\">-</span>raw h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>row row<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>item row<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'td h<span class=\"sy0\">-</span>raw item<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>table table <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'tr h<span class=\"sy0\">-</span>header <span class=\"br0\">(</span>first table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>row <span class=\"br0\">(</span>rest table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>emit<span class=\"sy0\">-</span>tag 'tr h<span class=\"sy0\">-</span>row row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>html<span class=\"sy0\">-</span>dump<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join <span class=\"br0\">(</span>stack<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> html<span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; STYLES</span><br/><span class=\"br0\">(</span>style 'td <span class=\"st0\">\"text-align:left\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>style 'table <span class=\"st0\">\"border-spacing: 10px;border:28px ridge orange\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; special biblical border</span><br/><span class=\"br0\">(</span>style 'th <span class=\"st0\">\"color:blue;\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 22, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> csv_to_html <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>table_translation<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">table_translation</span><span class=\"br0\">(</span> <span class=\"re5\">CSV</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Headers</span> | <span class=\"re5\">Contents</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span> <span class=\"re5\">CSV</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Table</span> <span class=\"sy3\">=</span> create_html_table:<span class=\"re3\">html_table</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>border<span class=\"sy1\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>cellpadding<span class=\"sy1\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Headers</span><span class=\"sy1\">,</span> <span class=\"re5\">Contents</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\tcreate_html_table:<span class=\"re3\">external_format</span><span class=\"br0\">(</span> <span class=\"re5\">Table</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">table_translation</span><span class=\"br0\">(</span> <span class=\"re3\">csv</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">csv</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/><span class=\"st0\">\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> input <span class=\"sy1\">=</span> <span class=\"st0\">\"Character,Speech<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">&amp;</span><br/>    <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">&amp;</span><br/>    <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \"</span> <span class=\"sy1\">&amp;</span><br/>        <span class=\"st0\">\"he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">&amp;</span><br/>    <span class=\"st0\">\"The multitude,Who are you?<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">&amp;</span><br/>    <span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">&amp;</span><br/>    <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>&lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    switch input<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        case <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> <span class=\"kw1\">then</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es0\">\\n</span>&lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><br/>        case <span class=\"st0\">','</span>  <span class=\"kw1\">then</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><br/>        case <span class=\"st0\">'&lt;'</span>  <span class=\"kw1\">then</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&amp;lt;\"</span><span class=\"br0\">)</span><br/>        case <span class=\"st0\">'&gt;'</span>  <span class=\"kw1\">then</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&amp;gt;\"</span><span class=\"br0\">)</span><br/>        case <span class=\"st0\">'&amp;'</span>  <span class=\"kw1\">then</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&amp;amp;\"</span><span class=\"br0\">)</span><br/>        case <span class=\"kw1\">else</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> switch<br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es0\">\\n</span>&lt;/table&gt;\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 54, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Xml</span><br/>\u00a0<br/><span class=\"kw1\">let</span> data <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> csv <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>line\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> line.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>data.<span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"br0\">[</span>|<span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><span class=\"st0\">'<span class=\"es0\">\\r</span>'</span>|<span class=\"br0\">]</span>,StringSplitOptions.<span class=\"me1\">RemoveEmptyEntries</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> style <span class=\"sy0\">=</span> argv.<span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> &amp;&amp; argv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"-h\"</span><br/>    Console.<span class=\"me1\">OutputEncoding</span> <span class=\"sy0\">&lt;-</span> UTF8Encoding<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> xs <span class=\"sy0\">=</span> XmlWriterSettings<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    xs.<span class=\"me1\">Indent</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">true</span>   <span class=\"co1\">// be friendly to humans</span><br/>    <span class=\"kw1\">use</span> x <span class=\"sy0\">=</span> XmlWriter.<span class=\"me1\">Create</span><span class=\"br0\">(</span>Console.<span class=\"me1\">Out</span>, xs<span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteStartDocument</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteDocType</span><span class=\"br0\">(</span><span class=\"st0\">\"HTML\"</span>, <span class=\"kw1\">null</span>, <span class=\"kw1\">null</span>, <span class=\"kw1\">null</span><span class=\"br0\">)</span>    <span class=\"co1\">// HTML5</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"html\"</span><span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"head\"</span><span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteElementString</span><span class=\"br0\">(</span><span class=\"st0\">\"title\"</span>, <span class=\"st0\">\"Rosettacode - CSV to HTML translation\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> style <span class=\"kw1\">then</span><br/>        x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"style\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> x.<span class=\"me1\">WriteAttributeString</span><span class=\"br0\">(</span><span class=\"st0\">\"type\"</span>, <span class=\"st0\">\"text/css\"</span><span class=\"br0\">)</span><br/>        x.<span class=\"me1\">WriteString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<br/>            table { border-collapse: collapse; }<br/>            td, th { border: 1px solid black; padding: .25em}<br/>            th { background-color: #EEE; }<br/>            tbody th { font-weight: normal; font-size: 85%; }<br/>        \"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>        <br/>        x.<span class=\"me1\">WriteEndElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// style</span><br/>    x.<span class=\"me1\">WriteEndElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// head</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"body\"</span><span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"table\"</span><span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"thead\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"tr\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> part <span class=\"kw1\">in</span> csv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> x.<span class=\"me1\">WriteElementString</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, part<span class=\"br0\">)</span><br/>    x.<span class=\"me1\">WriteEndElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> x.<span class=\"me1\">WriteEndElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// tr thead</span><br/>    x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"tbody\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> csv.<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        x.<span class=\"me1\">WriteStartElement</span><span class=\"br0\">(</span><span class=\"st0\">\"tr\"</span><span class=\"br0\">)</span><br/>        x.<span class=\"me1\">WriteElementString</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, line.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        x.<span class=\"me1\">WriteElementString</span><span class=\"br0\">(</span><span class=\"st0\">\"td\"</span>, line.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        x.<span class=\"me1\">WriteEndElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// tr</span><br/>    x.<span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 31, "block": "<pre class=\"text highlighted_source\">USING: combinators csv io kernel sequences strings\u00a0;<br/>IN: rosetta-code.csv-to-html<br/>\u00a0<br/>CONSTANT: input<br/>\u00a0<br/>\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"<br/>\u00a0<br/>: escape-chars ( seq -- seq' )<br/>    [<br/>        {<br/>            { CHAR: &amp; [ \"&amp;amp;\"  ] }<br/>            { CHAR: ' [ \"&amp;apos;\" ] }<br/>            { CHAR: &lt; [ \"&amp;lt;\"   ] }<br/>            { CHAR: &gt; [ \"&amp;gt;\"   ] }<br/>            [ 1string ]<br/>        } case<br/>    ] { } map-as concat\u00a0;<br/>\u00a0<br/>: tag ( str tag -- &lt;tag&gt;str&lt;/tag&gt; )<br/>    [ \"&lt;\" \"&gt;\" surround ] [ \"&lt;/\" \"&gt;\" surround ] bi surround\u00a0;<br/>\u00a0<br/>: csv&gt;table ( seq -- str )<br/>    [ [ \"td\" tag ] map concat \"tr\" tag \"  \" prepend ] map<br/>    { \"&lt;table&gt;\" } prepend { \"&lt;/table&gt;\" } append \"\\n\" join\u00a0;<br/>\u00a0<br/>input escape-chars string&gt;csv csv&gt;table print</pre>"}, {"lang": "Forth", "loc": 22, "block": "<pre class=\"text highlighted_source\">: BEGIN-COLUMN .\" &lt;td&gt;\"\u00a0;<br/>: END-COLUMN   .\" &lt;/td&gt;\"\u00a0;<br/>\u00a0<br/>: BEGIN-ROW .\" &lt;tr&gt;\" BEGIN-COLUMN\u00a0;<br/>: END-ROW END-COLUMN .\" &lt;/tr&gt;\" CR\u00a0;<br/>\u00a0<br/>: CSV2HTML<br/>\t.\" &lt;table&gt;\" CR BEGIN-ROW<br/>\tBEGIN KEY DUP #EOF &lt;&gt; WHILE<br/>\t\tCASE<br/>\t\t\t      10 OF END-ROW BEGIN-ROW ENDOF<br/>\t\t\t[CHAR] , OF END-COLUMN BEGIN-COLUMN ENDOF<br/>\t                [CHAR] &lt; OF .\" &amp;lt;\" ENDOF<br/>\t\t\t[CHAR] &gt; OF .\" &amp;gt;\" ENDOF<br/>\t\t\t[CHAR] &amp; OF .\" &amp;amp;\" ENDOF<br/>\t\t\tDUP EMIT<br/>\t\tENDCASE<br/>\tREPEAT<br/>\tEND-ROW .\" &lt;/table&gt;\" CR<br/>;<br/>\u00a0<br/>CSV2HTML BYE</pre>"}, {"lang": "Fortran", "loc": 73, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> CSVTEXT2HTML<span class=\"br0\">(</span>FNAME,HEADED<span class=\"br0\">)</span>\t<span class=\"co1\">!Does not recognise quoted strings.</span><br/><span class=\"co1\">Converts without checking field counts, or noting special characters.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> FNAME\t<span class=\"co1\">!Names the input file.</span><br/>       <span class=\"kw3\">LOGICAL</span> HEADED\t\t<span class=\"co1\">!Perhaps its first line is to be a heading.</span><br/>       <span class=\"kw3\">INTEGER</span> MANY\t\t<span class=\"co1\">!How long is a piece of string?</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>MANY<span class=\"sy0\">=</span><span class=\"nu0\">666</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This should suffice.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>MANY<span class=\"br0\">)</span> ALINE\t<span class=\"co1\">!A scratchpad for the input.</span><br/>       <span class=\"kw3\">INTEGER</span> MARK<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>MANY <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Fingers the commas on a line.</span><br/>       <span class=\"kw3\">INTEGER</span> I,L,N\t\t<span class=\"co1\">!Assistants.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> WOT<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!I don't see why a \"table datum\" could not be for either.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>WOT <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"th\"</span>,<span class=\"st0\">\"td\"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!A table heding or a table datum</span><br/>       <span class=\"kw3\">INTEGER</span> IT\t\t<span class=\"co1\">!But, one must select appropriately.</span><br/>       <span class=\"kw3\">INTEGER</span> KBD,MSG,<span class=\"kw3\">IN</span>\t\t<span class=\"co1\">!A selection.</span><br/>       <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IOUNITS<span class=\"sy0\">/</span> KBD,MSG,<span class=\"kw3\">IN</span>\t<span class=\"co1\">!The caller thus avoids collisions.</span><br/>        OPEN<span class=\"br0\">(</span><span class=\"kw3\">IN</span>,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span>FNAME,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READ\"</span>,<span class=\"kw1\">ERR</span><span class=\"sy0\">=</span><span class=\"nu0\">661</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Go for the file.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Start the blather.</span><br/>    <span class=\"nu0\">1</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"&lt;Table border=1&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!By stating that a table follows.</span><br/>        MARK<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Syncopation for the comma fingers.</span><br/>        N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t<span class=\"co1\">!No records read.</span><br/>\u00a0<br/>   <span class=\"nu0\">10</span>   READ <span class=\"br0\">(</span><span class=\"kw3\">IN</span>,<span class=\"nu0\">11</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> L,ALINE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">MIN</span><span class=\"br0\">(</span>L,MANY<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Carefully acquire some text.</span><br/>   <span class=\"nu0\">11</span>   FORMAT <span class=\"br0\">(</span>Q,A<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Q = number of characters yet to read, A = characters.</span><br/>        N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!So, a record has been read.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.<span class=\"me1\">MANY</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Perhaps it is rather long?</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">12</span><span class=\"br0\">)</span> N,L,MANY\t<span class=\"co1\">!Alas!</span><br/>   <span class=\"nu0\">12</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Line \"</span>,I0,<span class=\"st0\">\" has length \"</span>,I0,<span class=\"st0\">\"! My limit is \"</span>,I0<span class=\"br0\">)</span>\t<span class=\"co1\">!Squawk/</span><br/>          L <span class=\"sy0\">=</span> MANY\t\t\t<span class=\"co1\">!The limit actually read.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for paranoia.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">EQ</span>.1 <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> HEADED<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Is the first line to be treated specially?</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;tHead&gt;\"</span>\t<span class=\"co1\">!Yep. Nominate a heading.</span><br/>          IT <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!And select \"th\" rather than \"td\".</span><br/>         <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!But mostly,</span><br/>          IT <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\t\t\t<span class=\"co1\">!Just another row for the table.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for the first line.</span><br/>        NCOLS <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No commas have been seen.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,L\t\t<span class=\"co1\">!So scan the text for them.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>ALINE<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Here?</span><br/>            NCOLS <span class=\"sy0\">=</span> NCOLS <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Yes!</span><br/>            MARK<span class=\"br0\">(</span>NCOLS<span class=\"br0\">)</span> <span class=\"sy0\">=</span> I\t\t<span class=\"co1\">!The texts are between commas.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for that character.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next.</span><br/>        NCOLS <span class=\"sy0\">=</span> NCOLS <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!This is why the + 1 for the size of MARK.</span><br/>        MARK<span class=\"br0\">(</span>NCOLS<span class=\"br0\">)</span> <span class=\"sy0\">=</span> L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!End-of-line is as if a comma was one further along.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">13</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Now roll all the texts.</span><br/>     <span class=\"nu0\">1</span>   <span class=\"br0\">(</span>WOT<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>,\t\t\t\t<span class=\"co1\">!This starting a cell,</span><br/>     <span class=\"nu0\">2</span>    ALINE<span class=\"br0\">(</span>MARK<span class=\"br0\">(</span>I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>MARK<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>,\t<span class=\"co1\">!This being the text between the commas,</span><br/>     <span class=\"nu0\">3</span>    WOT<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>,\t\t\t\t<span class=\"co1\">!And this ending each cell.</span><br/>     <span class=\"nu0\">4</span>    I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,NCOLS<span class=\"br0\">)</span>,\t\t\t<span class=\"co1\">!For this number of columns.</span><br/>     <span class=\"nu0\">5</span>   <span class=\"st0\">\"/tr\"</span>\t\t\t<span class=\"co1\">!And this ends the row.</span><br/>   <span class=\"nu0\">13</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\" &lt;tr&gt;\"</span>,<span class=\"nu0\">666</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span>,A,<span class=\"st0\">\"&gt;\"</span>,A,<span class=\"st0\">\"&lt;/\"</span>,A,<span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!How long is a piece of string?</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">EQ</span>.1 <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> HEADED<span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;/tHead&gt;\"</span>\t<span class=\"co1\">!Finish the possible header.</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">!And try for another record.</span><br/>\u00a0<br/>   <span class=\"nu0\">20</span>   CLOSE <span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Finished with input.</span><br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">21</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!And finished with output.</span><br/>   <span class=\"nu0\">21</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"&lt;/Table&gt;\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This writes starting at column one.</span><br/>       <span class=\"kw1\">RETURN</span>\t\t\t<span class=\"co1\">!Done!</span><br/><span class=\"co1\">Confusions.</span><br/>  <span class=\"nu0\">661</span>   WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Can't open file \"</span>,FNAME\t<span class=\"co1\">!Alas.</span><br/>      <span class=\"kw1\">END</span>\t\t\t<span class=\"co1\">!So much for the conversion.</span><br/>\u00a0<br/>      <span class=\"kw3\">INTEGER</span> KBD,MSG,<span class=\"kw3\">IN</span><br/>      <span class=\"kw3\">COMMON</span> <span class=\"sy0\">/</span>IOUNITS<span class=\"sy0\">/</span> KBD,MSG,<span class=\"kw3\">IN</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t<span class=\"co1\">!Standard output.</span><br/>      <span class=\"kw3\">IN</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Some unspecial number.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> CSVTEXT2HTML<span class=\"br0\">(</span><span class=\"st0\">\"Text.csv\"</span>,<span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The first line is not special.</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> CSVTEXT2HTML<span class=\"br0\">(</span><span class=\"st0\">\"Text.csv\"</span>,<span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The first line is a heading.</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"encoding/csv\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"html/template\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> c <span class=\"sy2\">=</span> <span class=\"co2\">`Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!`</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> h<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> csvToHtml<span class=\"sy1\">(</span>c<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>h<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> csvToHtml<span class=\"sy1\">(</span>c <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    data<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> csv<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>bytes<span class=\"sy3\">.</span>NewBufferString<span class=\"sy1\">(</span>c<span class=\"sy1\">))</span><span class=\"sy3\">.</span>ReadAll<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> err<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> b strings<span class=\"sy3\">.</span>Builder<br/>    err <span class=\"sy2\">=</span> template<span class=\"sy3\">.</span>Must<span class=\"sy1\">(</span>template<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">Parse</span><span class=\"sy1\">(</span><span class=\"co2\">`&lt;table&gt;<br/>{{range .}}    &lt;tr&gt;{{range .}}&lt;td&gt;{{.}}&lt;/td&gt;{{end}}&lt;/tr&gt;<br/>{{end}}&lt;/table&gt;<br/>`</span><span class=\"sy1\">))</span><span class=\"sy3\">.</span>Execute<span class=\"sy1\">(</span>&amp;b<span class=\"sy1\">,</span> data<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>String<span class=\"sy1\">(),</span> err<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 38, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> formatCell <span class=\"sy0\">=</span> <span class=\"br0\">{</span> cell <span class=\"sy0\">-&gt;</span><br/>    <span class=\"st0\">\"&lt;td&gt;${cell.replaceAll('&amp;','&amp;amp;').replaceAll('&lt;','&amp;lt;')}&lt;/td&gt;\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> formatRow <span class=\"sy0\">=</span> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span><br/>    <span class=\"st0\">\"\"\"&lt;tr&gt;${row.split(',').collect { cell -&gt; formatCell(cell) }.join('')}&lt;/tr&gt;<br/>\"\"\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> formatTable <span class=\"sy0\">=</span> <span class=\"br0\">{</span> csv, header<span class=\"sy0\">=</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rows <span class=\"sy0\">=</span> csv.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span> formatRow<span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    header \\<br/>        <span class=\"sy0\">?</span> <span class=\"st0\">\"\"\"<br/>&lt;table&gt;<br/>&lt;thead&gt;<br/>${rows[0]}&lt;/thead&gt;<br/>&lt;tbody&gt;<br/>${rows[1..-1].join('')}&lt;/tbody&gt;<br/>&lt;/table&gt;<br/>\"\"\"</span> \\<br/>       \u00a0: <span class=\"st0\">\"\"\"<br/>&lt;table&gt;<br/>${rows.join('')}&lt;/table&gt;<br/>\"\"\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> formatPage <span class=\"sy0\">=</span> <span class=\"br0\">{</span> title, csv, header<span class=\"sy0\">=</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a> <span class=\"sy0\">-&gt;</span><br/><span class=\"st0\">\"\"\"&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;title&gt;${title}&lt;/title&gt;<br/>&lt;style type=\"text/css\"&gt;<br/>td {background-color:#ddddff; }<br/>thead td {background-color:#ddffdd; text-align:center; }<br/>&lt;/style&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;${formatTable(csv, header)}&lt;/body&gt;<br/>&lt;/html&gt;\"\"\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">--import Data.List.Split (splitOn)    -- if the import is available</span><br/>splitOn <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"co1\">-- otherwise</span><br/>splitOn delim <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span>\\x rest <span class=\"sy0\">-&gt;</span><br/>                        <span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> delim <span class=\"kw1\">then</span> <span class=\"st0\">\"\"</span>\u00a0: rest<br/>                        <span class=\"kw1\">else</span> <span class=\"br0\">(</span>x:<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> rest<span class=\"br0\">)</span>:<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> rest<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>htmlEscape <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>htmlEscape <span class=\"sy0\">=</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> escapeChar<br/>              <span class=\"kw1\">where</span> escapeChar <span class=\"st0\">'&lt;'</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&amp;lt;\"</span><br/>                    escapeChar <span class=\"st0\">'&gt;'</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&amp;gt;\"</span><br/>                    escapeChar <span class=\"st0\">'&amp;'</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&amp;amp;\"</span><br/>                    escapeChar <span class=\"st0\">'\"'</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&amp;quot;\"</span> <span class=\"co1\">--\"</span><br/>                    escapeChar c   <span class=\"sy0\">=</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>\u00a0<br/>toHtmlRow <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>toHtmlRow <span class=\"br0\">[</span><span class=\"br0\">]</span>   <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;tr&gt;&lt;/tr&gt;\"</span><br/>toHtmlRow cols <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> htmlColumns <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> toHtmlCol cols<br/>                  <span class=\"kw1\">in</span> <span class=\"st0\">\"&lt;tr&gt;<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span> htmlColumns  <span class=\"sy0\">++</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><br/>               <span class=\"kw1\">where</span> toHtmlCol x <span class=\"sy0\">=</span> <span class=\"st0\">\"  &lt;td&gt;\"</span> <span class=\"sy0\">++</span> htmlEscape x <span class=\"sy0\">++</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>csvToTable <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>csvToTable csv <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> rows <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>splitOn <span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> csv<br/>                     html <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toHtmlRow rows<br/>                  <span class=\"kw1\">in</span> <span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span> html <span class=\"sy0\">++</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:interact\"><span class=\"kw3\">interact</span></a> csvToTable</pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>    pchar <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">letters</span> <span class=\"sy1\">++</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span> <span class=\"sy1\">++</span> <span class=\"st0\">'!?;. '</span>  <span class=\"co1\"># printable chars</span><br/>\u00a0<br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;TABLE&gt;\"</span><span class=\"br0\">)</span><br/>    firstHead <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>arglist <span class=\"sy1\">==</span> <span class=\"st0\">\"-heading\"</span><span class=\"br0\">)</span><br/>    tHead <span class=\"sy1\">:=</span> <span class=\"kw4\">write</span><br/>    <span class=\"kw1\">while</span> row <span class=\"sy1\">:=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>       <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>firstHead <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   &lt;THEAD&gt;\"</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> tHead<span class=\"br0\">(</span><span class=\"st0\">\"   &lt;TBODY&gt;\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"       &lt;TR&gt;&lt;TD&gt;\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">while</span> <span class=\"sy1\">*</span>row <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>         row <span class=\"sy1\">?:=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\",\"</span><span class=\"sy1\">,</span><span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TD&gt;&lt;TD&gt;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>                         <span class=\"kw4\">writes</span><span class=\"br0\">(</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>pchar<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>                         <span class=\"br0\">(</span><span class=\"st0\">\"&amp;#\"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">ord</span><span class=\"br0\">(</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TD&gt;&lt;/TR&gt;\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">\\</span>firstHead<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"    &lt;/THEAD&gt;<span class=\"es0\">\\n</span>    &lt;TBODY&gt;\"</span><span class=\"br0\">)</span><br/>       tHead <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>       <span class=\"br0\">}</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   &lt;/TBODY&gt;\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/TABLE&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 22, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'strings tables/csv'</span><br/>encodeHTML=: <span class=\"sy0\">(</span><span class=\"st_h\">'&amp;'</span>;<span class=\"st_h\">'&amp;amp;'</span>;<span class=\"st_h\">'&lt;'</span>;<span class=\"st_h\">'&amp;lt;'</span>;<span class=\"st_h\">'&gt;'</span>;<span class=\"st_h\">'&amp;gt;'</span><span class=\"sy0\">)</span>&amp;stringreplace<br/>\u00a0<br/>tag=: adverb define<br/>  <span class=\"st_h\">'starttag endtag'</span>=.<span class=\"kw2\">m</span><br/>  <span class=\"sy0\">(</span>,&amp;.&gt;/<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> <span class=\"sy0\">(</span>starttag , ,&amp;endtag<span class=\"sy0\">)</span> L:<span class=\"nu0\">0</span> <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>markupCells=:    <span class=\"sy0\">(</span><span class=\"st_h\">'&lt;td&gt;'</span>;<span class=\"st_h\">'&lt;/td&gt;'</span><span class=\"sy0\">)</span> tag<br/>markupHdrCells=: <span class=\"sy0\">(</span><span class=\"st_h\">'&lt;th&gt;'</span>;<span class=\"st_h\">'&lt;/th&gt;'</span><span class=\"sy0\">)</span> tag<br/>markupRows=:     <span class=\"sy0\">(</span><span class=\"st_h\">'&lt;tr&gt;'</span>;<span class=\"st_h\">'&lt;/tr&gt;'</span>,LF<span class=\"sy0\">)</span> tag<br/>markupTable=:    <span class=\"sy0\">((</span><span class=\"st_h\">'&lt;table&gt;'</span>,LF<span class=\"sy0\">)</span>;<span class=\"st_h\">'&lt;/table&gt;'</span><span class=\"sy0\">)</span> tag<br/>\u00a0<br/>makeHTMLtablefromCSV=: verb define<br/>  <span class=\"nu0\">0</span> makeHTMLtablefromCSV <span class=\"kw2\">y</span>             <span class=\"co1\">NB. default left arg is 0 (no header row)</span><br/>:<br/>  t=. fixcsv encodeHTML <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">if.</span> <span class=\"kw2\">x</span> <span class=\"kw1\">do.</span> t=. <span class=\"sy0\">(</span>ma<a class=\"__cf_email__\" data-cfemail=\"94e6ffe1e4dcf0e6d7f1f8f8e7d4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{. , <a class=\"__cf_email__\" data-cfemail=\"442925362f3134072128283704\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}.<span class=\"sy0\">)</span> t<br/>      <span class=\"kw1\">else.</span> t=. markupCells t<br/>  <span class=\"kw1\">end.</span><br/> \u00a0;markupTable markupRows t<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 87, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.InputStreamReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.PrintStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Csv2Html <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> escapeChars<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> lineIn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tStringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> lineLength <span class=\"sy0\">=</span> lineIn.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> lineLength<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> lineIn.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'\"'</span><span class=\"sy0\">:</span> <br/>\t\t\t\t\tsb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&amp;quot;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&amp;amp;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'<span class=\"es0\">\\'</span>'</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&amp;apos;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&lt;'</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&amp;lt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'&gt;'</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&amp;gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> tableHeader<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a> ps, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> columns<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> columns.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span>columns<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/th&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tps.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> tableRow<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a> ps, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> columns<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> columns.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span>columns<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tps.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tps.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">boolean</span> withTableHeader <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a> isr <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> br <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span>isr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a> stdout <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;!DOCTYPE html PUBLIC <span class=\"es0\">\\\"</span>-//W3C//DTD XHTML 1.0 Strict//EN<span class=\"es0\">\\\"</span> <span class=\"es0\">\\\"</span>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;html xmlns=<span class=\"es0\">\\\"</span>http://www.w3.org/1999/xhtml<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;head&gt;&lt;meta http-equiv=<span class=\"es0\">\\\"</span>Content-type<span class=\"es0\">\\\"</span> content=<span class=\"es0\">\\\"</span>text/html;charset=UTF-8<span class=\"es0\">\\\"</span>/&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;title&gt;Csv2Html&lt;/title&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;style type=<span class=\"es0\">\\\"</span>text/css<span class=\"es0\">\\\"</span>&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"body{background-color:#FFF;color:#000;font-family:OpenSans,sans-serif;font-size:10px;}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"table{border:0.2em solid #2F6FAB;border-collapse:collapse;}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"th{border:0.15em solid #2F6FAB;padding:0.5em;background-color:#E9E9E9;}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"td{border:0.1em solid #2F6FAB;padding:0.5em;background-color:#F9F9F9;}&lt;/style&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Csv2Html&lt;/h1&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> stdinLine<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">boolean</span> firstLine <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>stdinLine <span class=\"sy0\">=</span> br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> columns <span class=\"sy0\">=</span> escapeChars<span class=\"br0\">(</span>stdinLine<span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>withTableHeader <span class=\"sy0\">==</span> <span class=\"kw2\">true</span> <span class=\"sy0\">&amp;&amp;</span> firstLine <span class=\"sy0\">==</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\ttableHeader<span class=\"br0\">(</span>stdout, columns<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tfirstLine <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\ttableRow<span class=\"br0\">(</span>stdout, columns<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tstdout.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> csv <span class=\"sy0\">=</span> <span class=\"st0\">\"Character,Speech<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>\t   <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>\t   <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>\t   <span class=\"st0\">\"The multitude,Who are you?<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>\t   <span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>\t   <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> lines <span class=\"sy0\">=</span> csv.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/&amp;/g</span><span class=\"sy0\">,</span> <span class=\"st0\">'&amp;amp;'</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;/g</span><span class=\"sy0\">,</span> <span class=\"st0\">'&amp;lt;'</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/&gt;/g</span><span class=\"sy0\">,</span> <span class=\"st0\">'&amp;gt;'</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\"/g</span><span class=\"sy0\">,</span> <span class=\"st0\">'&amp;quot;'</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"co2\">/[\\n\\r]/</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> line.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>&lt;tr&gt;&lt;td&gt;'</span> <span class=\"sy0\">+</span> row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">'&lt;/td&gt;&lt;td&gt;'</span> <span class=\"sy0\">+</span> row<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">'&lt;/td&gt;&lt;/tr&gt;'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;table&gt;<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>&lt;thead&gt;<span class=\"es0\">\\n</span>'</span>      <span class=\"sy0\">+</span> lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>&lt;/thead&gt;<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>&lt;tbody&gt;<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> lines.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\t</span>&lt;/tbody&gt;<span class=\"es0\">\\n</span>&lt;/table&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">jq -R . csv2html.csv | jq -r -s -f csv2html.jq  <br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 54, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> csv <span class=\"sy0\">=</span> <br/>    <span class=\"st0\">\"Character,Speech<span class=\"es1\">\\n</span>\"</span> +<br/>    <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!<span class=\"es1\">\\n</span>\"</span> +<br/>    <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \"</span> +<br/>    <span class=\"st0\">\"he's a very naughty boy! Now go away!&lt;/angry&gt;<span class=\"es1\">\\n</span>\"</span> +<br/>    <span class=\"st0\">\"The multitude,Who are you?<span class=\"es1\">\\n</span>\"</span> +<br/>    <span class=\"st0\">\"Brians mother,I'm his mother; that's who!<span class=\"es1\">\\n</span>\"</span> +<br/>    <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> <span class=\"st0\">\"   \"</span>  <span class=\"co1\">// indent</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es1\">\\n</span>$i&lt;tr&gt;<span class=\"es1\">\\n</span>$i$i&lt;td&gt;\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in csv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span> when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i&lt;/tr&gt;<span class=\"es1\">\\n</span>$i&lt;tr&gt;<span class=\"es1\">\\n</span>$i$i&lt;td&gt;\"</span><br/>            <span class=\"st0\">','</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i&lt;td&gt;\"</span><br/>            <span class=\"st0\">'&amp;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;amp;\"</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\'</span>'</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;apos;\"</span> <br/>            <span class=\"st0\">'&lt;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;lt;\"</span><br/>            <span class=\"st0\">'&gt;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;gt;\"</span>           <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> c.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i&lt;/tr&gt;<span class=\"es1\">\\n</span>&lt;/table&gt;\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// now using first row as a table header</span><br/>    sb.<span class=\"me1\">setLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;<span class=\"es1\">\\n</span>$i&lt;thead&gt;<span class=\"es1\">\\n</span>$i$i&lt;tr&gt;<span class=\"es1\">\\n</span>$i$i$i&lt;td&gt;\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hLength <span class=\"sy0\">=</span> csv.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>  <span class=\"co1\">// find length of first row including CR</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in csv.<span class=\"me1\">take</span><span class=\"br0\">(</span>hLength<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span> when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i&lt;/tr&gt;<span class=\"es1\">\\n</span>$i&lt;/thead&gt;<span class=\"es1\">\\n</span>$i&lt;tbody&gt;<span class=\"es1\">\\n</span>$i$i&lt;tr&gt;<span class=\"es1\">\\n</span>$i$i$i&lt;td&gt;\"</span><br/>            <span class=\"st0\">','</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i$i&lt;td&gt;\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> c.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in csv.<span class=\"me1\">drop</span><span class=\"br0\">(</span>hLength<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span> when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i&lt;/tr&gt;<span class=\"es1\">\\n</span>$i$i&lt;tr&gt;<span class=\"es1\">\\n</span>$i$i$i&lt;td&gt;\"</span><br/>            <span class=\"st0\">','</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i$i&lt;td&gt;\"</span><br/>            <span class=\"st0\">'&amp;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;amp;\"</span><br/>            <span class=\"st0\">'<span class=\"es0\">\\'</span>'</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;apos;\"</span> <br/>            <span class=\"st0\">'&lt;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;lt;\"</span><br/>            <span class=\"st0\">'&gt;'</span>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"&amp;gt;\"</span>           <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> c.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;<span class=\"es1\">\\n</span>$i$i&lt;/tr&gt;<span class=\"es1\">\\n</span>$i&lt;/tbody&gt;<span class=\"es1\">\\n</span>&lt;/table&gt;\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 38, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    newline$ <span class=\"sy0\">=</span><span class=\"st0\">\"|\"</span><br/>    <span class=\"co1\">'   No escape behaviour, so can't refer to '/n'.</span><br/>    <span class=\"co1\">'   Generally imported csv would have separator CR LF; easily converted first if needed</span><br/>\u00a0<br/>    csv$ <span class=\"sy0\">=</span><span class=\"st0\">\"Character,Speech\"</span>                                                                                        <span class=\"sy0\">+</span>newline$<span class=\"sy0\">+</span>_<br/>    <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!\"</span>                                                               <span class=\"sy0\">+</span>newline$<span class=\"sy0\">+</span>_<br/>    <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"</span> <span class=\"sy0\">+</span>newline$<span class=\"sy0\">+</span>_<br/>    <span class=\"st0\">\"The multitude,Who are you?\"</span>                                                                                    <span class=\"sy0\">+</span>newline$<span class=\"sy0\">+</span>_<br/>    <span class=\"st0\">\"Brians mother,I'm his mother; that's who!\"</span>                                                                     <span class=\"sy0\">+</span>newline$<span class=\"sy0\">+</span>_<br/>    <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;HTML&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;HEAD&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/HEAD&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;BODY&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;center&gt;&lt;H1&gt;CSV to HTML translation &lt;/H1&gt;&lt;/center&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;table border=1 cellpadding =10&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> csv$<span class=\"br0\">)</span><br/>        c$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> csv$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> c$<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\",\"</span><span class=\"sy0\">:</span>  <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span>;<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">:</span>  <span class=\"kw1\">print</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"lt;\"</span>;<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">:</span>  <span class=\"kw1\">print</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"gt;\"</span>;<br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">:</span>  <span class=\"kw1\">print</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">+</span><span class=\"st0\">\"amp;\"</span>;<br/>        <span class=\"kw1\">case</span> <span class=\"kw1\">else</span><span class=\"sy0\">:</span>   <span class=\"kw1\">print</span> c$;<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/BODY&gt;\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"&lt;/HTML&gt;\"</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 66, "block": "<pre class=\"text highlighted_source\">function csv2html(fname::ASCIIString; header::Bool=false)<br/>    csv = readcsv(fname)<br/>    @assert(length(csv) &gt; 0)<br/>    str = \"\"\"<br/>&lt;html&gt;<br/>\u00a0<br/>&lt;head&gt;<br/>    &lt;style type=\"text/css\"&gt;<br/>        body {<br/>            margin: 2em;<br/>        }<br/>        h1 {<br/>            text-align: center;<br/>        }<br/>        table {<br/>            border-spacing: 0;<br/>            box-shadow: 0 0 0.25em #888;<br/>            margin: auto;<br/>        }<br/>        table,<br/>        tr,<br/>        th,<br/>        td {<br/>            border-collapse: collapse;<br/>        }<br/>        th {<br/>            color: white;<br/>            background-color: rgb(43, 53, 59);<br/>        }<br/>        th,<br/>        td {<br/>            padding: 0.5em;<br/>        }<br/>        table tr:nth-child(even) td {<br/>            background-color: rgba(218, 224, 229, 0.850);<br/>        }<br/>    &lt;/style&gt;<br/>&lt;/head&gt;<br/>\u00a0<br/>&lt;body&gt;<br/>    &lt;h1&gt;csv2html Example&lt;/h1&gt;<br/>    &lt;table&gt;<br/>        &lt;tr&gt;<br/>\"\"\"<br/>    tags = header\u00a0? (\"&lt;th&gt;\", \"&lt;/th&gt;\")\u00a0: (\"&lt;td&gt;\", \"&lt;/td&gt;\")<br/>\u00a0<br/>    for i=1:size(csv, 2)<br/>        str *= \"            \" * tags[1] * csv[1, i] * tags[2] * \"\\n\"<br/>    end<br/>\u00a0<br/>    str *= \" \"^8 * \"&lt;/tr&gt;\\n\"<br/>\u00a0<br/>    for i=2:size(csv, 1)<br/>        str *= \"        &lt;tr&gt;\\n\"<br/>\u00a0<br/>        for j=1:size(csv, 2)<br/>            str *= \"            \" * \"&lt;td&gt;\" * csv[i, j] * \"&lt;/td&gt;\\n\"<br/>        end<br/>\u00a0<br/>        str *= \"        &lt;/tr&gt;\\n\"<br/>    end<br/>\u00a0<br/>    str * \"    &lt;/table&gt;\\n&lt;/body&gt;\\n\\n&lt;/html&gt;\\n\"<br/>end<br/>\u00a0<br/>print(csv2html(\"input.csv\", header=true))</pre>"}, {"lang": "Lua", "loc": 28, "block": "<pre class=\"lua highlighted_source\">FS <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span>            <span class=\"co1\">-- field separator</span><br/>\u00a0<br/>csv <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/>Character<span class=\"sy0\">,</span>Speech<br/>The multitude<span class=\"sy0\">,</span>The messiah! Show us the messiah!<br/>Brians mother<span class=\"sy0\">,&lt;</span>angry<span class=\"sy0\">&gt;</span>Now you listen here! He<span class=\"st0\">'s not the messiah; he'</span>s a very naughty boy! Now go away!<span class=\"sy0\">&lt;/</span>angry<span class=\"sy0\">&gt;</span><br/>The multitude<span class=\"sy0\">,</span>Who are you?<br/>Brians mother<span class=\"sy0\">,</span>I<span class=\"st0\">'m his mother; that'</span>s who!<br/>The multitude<span class=\"sy0\">,</span>Behold his mother! Behold his mother!<br/><span class=\"br0\">]</span><span class=\"br0\">]</span>    <br/>\u00a0<br/>csv <span class=\"sy0\">=</span> csv<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;lt;\"</span> <span class=\"br0\">)</span><br/>csv <span class=\"sy0\">=</span> csv<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;gr;\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>html <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"&lt;table&gt;\"</span> <span class=\"br0\">}</span> <br/><span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>gmatch<span class=\"br0\">(</span> csv<span class=\"sy0\">,</span> <span class=\"st0\">\"(.-<span class=\"es1\">\\n</span>)\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    str <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;tr&gt;\"</span><br/>    <span class=\"kw1\">for</span> field <span class=\"kw2\">in</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>gmatch<span class=\"br0\">(</span> line<span class=\"sy0\">,</span> <span class=\"st0\">\"(.-)[\"</span><span class=\"sy0\">..</span>FS<span class=\"sy0\">..</span><span class=\"st0\">\"?<span class=\"es1\">\\n</span>?]\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;td&gt;\"</span> <span class=\"sy0\">..</span> field <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/td&gt;\"</span>    <br/>    <span class=\"kw1\">end</span><br/>    str <span class=\"sy0\">=</span> str <span class=\"sy0\">..</span> <span class=\"st0\">\"&lt;/tr&gt;\"</span><br/>    html<span class=\"br0\">[</span><span class=\"sy0\">#</span>html<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> str<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><br/>html<span class=\"br0\">[</span><span class=\"sy0\">#</span>html<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> line <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>html<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 29, "block": "<pre class=\"text highlighted_source\"> #A translation of the C code posted<br/>html_table\u00a0:= proc(str)<br/>\tlocal char;<br/>     printf(\"&lt;table&gt;\\n&lt;tr&gt;&lt;td&gt;\");  <br/>     for char in str do<br/>         if char = \"\\n\" then<br/>         \tprintf(\"&lt;/td&gt;&lt;/tr&gt;\\n&lt;tr&gt;&lt;td&gt;\")<br/>         elif char = \",\" then<br/>          printf(\"&lt;/td&gt;&lt;td&gt;\")<br/>         elif char = \"&lt;\" then<br/>          printf(\"&amp;lt;\")<br/>         elif char = \"&gt;\" then<br/>          printf(\"&amp;gt;\")<br/>         elif char = \"&amp;\" then<br/>         \tprintf(\"&amp;amp;\")<br/>         else <br/>          printf(char)<br/>         end if;                                   <br/>    end do;<br/>    printf(\"&lt;/td&gt;&lt;/tr&gt;\\n&lt;/table&gt;\");<br/>end proc;<br/>\u00a0<br/>html_table(\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\");<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 17, "block": "<pre class=\"text highlighted_source\">a=\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah;he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother;that's who!<br/>The multitude,Behold his mother! Behold his mother!\";<br/>(*Naive*)<br/>StringJoin[\"&lt;table&gt;\\n\",Map[StringJoin[\"&lt;tr&gt;&lt;td&gt;\",#,\"&lt;/td&gt;&lt;/tr&gt;\\n\"]&amp;,<br/>StringSplit[StringReplace[a,{\",\"-&gt;\"&lt;/td&gt;&lt;td&gt;\",\"&lt;\"-&gt;\"&amp;lt;\",\"&gt;\"-&gt;\"&amp;gt;\"}],\"\\n\"]]<br/>,\"&lt;/table&gt;\"]<br/>(*Extra*)<br/>StringJoin[\"&lt;table&gt;\\n\",StringJoin[\"&lt;tr&gt;&lt;th&gt;\",#,\"&lt;/th&gt;&lt;/tr&gt;\\n\"]&amp;[<br/>StringSplit[StringReplace[a,{\",\"-&gt;\"&lt;/td&gt;&lt;td&gt;\",\"&lt;\"-&gt;\"&amp;lt;\",\"&gt;\"-&gt;\"&amp;gt;\"}],\"\\n\"]//First]<br/>,Map[StringJoin[\"&lt;tr&gt;&lt;td&gt;\",#,\"&lt;/td&gt;&lt;/tr&gt;\\n\"]&amp;,<br/>StringSplit[StringReplace[a,{\",\"-&gt;\"&lt;/td&gt;&lt;td&gt;\",\"&lt;\"-&gt;\"&amp;lt;\",\"&gt;\"-&gt;\"&amp;gt;\"}],\"\\n\"]//Rest]<br/>,\"&lt;/table&gt;\"] <br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 17, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>inputString = fileread<span class=\"br0\">(</span>csvFileName<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">% using multiple regular expressions to clear up special chars</span><br/>htmlFriendly = regexprep<span class=\"br0\">(</span>regexprep<span class=\"br0\">(</span>regexprep<span class=\"br0\">(</span>regexprep<span class=\"br0\">(</span>inputString,<span class=\"sy0\">...</span><br/>      <span class=\"co2\">'&amp;'</span>,<span class=\"co2\">'&amp;amp;'</span><span class=\"br0\">)</span>,<span class=\"sy0\">...</span><br/>      <span class=\"co2\">'\"'</span>,<span class=\"co2\">'&amp;quot;'</span><span class=\"br0\">)</span>,<span class=\"sy0\">...</span><br/>      <span class=\"co2\">'&lt;'</span>,<span class=\"co2\">'&amp;lt;'</span><span class=\"br0\">)</span>,<span class=\"sy0\">...</span><br/>      <span class=\"co2\">'&gt;'</span>,<span class=\"co2\">'&amp;gt;'</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">% split string into cell array</span><br/>tableValues = regexp<span class=\"br0\">(</span>regexp<span class=\"br0\">(</span>htmlFriendly,<span class=\"co2\">'(\\r\\n|\\r|\\n)'</span>,<span class=\"co2\">'split'</span><span class=\"br0\">)</span>',<span class=\"co2\">','</span>,<span class=\"co2\">'split'</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">%%% print in html format\u00a0%%%</span><br/>   <span class=\"co1\">% &lt;Extra Credit&gt; first line gets treated as header</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"br0\">[</span><span class=\"co2\">'&lt;table&gt;\\n\\t&lt;tr&gt;'</span>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n\\t\\t&lt;th&gt;%s&lt;/th&gt;'</span>,tableValues<span class=\"br0\">{</span><span class=\"nu0\">1</span>,:<span class=\"br0\">}</span><span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">% print remaining lines of csv as html table (rows 2:end in cell array of csv values)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cellfun.html\"><span class=\"kw2\">cellfun</span></a><span class=\"br0\">(</span>@<span class=\"br0\">(</span>x<span class=\"br0\">)</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"br0\">[</span><span class=\"co2\">'\\n\\t&lt;tr&gt;'</span>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n\\t\\t&lt;td&gt;%s&lt;/td&gt;'</span>,x<span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"co2\">'\\n\\t&lt;/tr&gt;'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,tableValues<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"co2\">'\\n&lt;/table&gt;'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 21, "block": "<pre class=\"text highlighted_source\">infile: \"input.csv\";<br/>outfile: \"table.html\";<br/>instream: openr(infile);<br/>outstream: openw(outfile);<br/>\u00a0<br/>printf(outstream, \"&lt;TABLE border=\\\"1\\\"&gt;~%\");<br/>nr: 0;<br/>while (line: readline(instream))#false do (<br/>  nr: nr + 1,<br/>  line: ssubst(\"&amp;lt;\", \"&lt;\", line),<br/>  line: ssubst(\"&amp;gt;\", \"&gt;\", line),<br/>  value_list: map(lambda([f], strim(\" \", f)), split(line, \",\")),<br/>  if nr=1 then printf(outstream, \"  &lt;THEAD bgcolor=\\\"yellow\\\"&gt;\") else  printf(outstream, \"  &lt;TBODY bgcolor=\\\"orange\\\"&gt;\"),<br/>  printf(outstream, \"&lt;TR&gt;\"),<br/>  for value in value_list do printf(outstream, \"&lt;TD&gt;~a&lt;/TD&gt;\", value),<br/>  printf(outstream, \"&lt;/TR&gt;\"),<br/>  if nr=1 then printf(outstream, \"&lt;/THEAD&gt;~%\") else  printf(outstream, \"&lt;/TBODY&gt;~%\"));<br/>printf(outstream, \"&lt;/TABLE&gt;~%\");<br/>\u00a0<br/>close(instream);<br/>close(outstream);</pre>"}, {"lang": "ML/I", "loc": 54, "block": "<pre class=\"text highlighted_source\">MCSKIP \"WITH\" NL<br/>\"\" CSV to HTML<br/>\"\" assumes macros on input stream 1, terminal on stream 2<br/>MCSKIP MT,[]<br/>MCSKIP SL WITH ~<br/>MCINS\u00a0%.<br/>\"\" C1=th before header output, td afterwards<br/>MCCVAR 1,2<br/>MCSET C1=[th]<br/>\"\" HTML escapes<br/>MCDEF &lt; AS [[&amp;lt;]]<br/>MCDEF &gt; AS [[&amp;gt;]]<br/>MCDEF &amp; AS [[&amp;amp;]]<br/>\"\" Main line processing<br/>MCDEF SL N1 OPT , N1 OR NL ALL<br/>AS [[   &lt;tr&gt;]<br/>MCSET T2=1<br/>%L1.MCGO L2 IF T2 GR T1<br/>      [&lt;]%C1.[&gt;]%AT2.[&lt;/]%C1.[&gt;]<br/>MCSET T2=T2+1<br/>MCGO L1<br/>%L2.[   &lt;/tr&gt;]<br/>MCSET C1=[td]<br/>]<br/>[&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;title&gt;HTML converted from CSV&lt;/title&gt;<br/>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;<br/>&lt;style type=\"text/css\"&gt;&lt;!--<br/>th {<br/>        font-weight:bold;<br/>        text-align:left<br/>}<br/>table,td,th {<br/>        border:1px solid;<br/>        border-collapse:collapse<br/>}<br/>td,th {<br/>        padding:10px<br/>}<br/>//--&gt;<br/>&lt;/style&gt;<br/>&lt;/head&gt;<br/>\u00a0<br/>&lt;body&gt;<br/>&lt;table&gt;]<br/>MCSET S1=1<br/>~MCSET S10=2<br/>~MCSET S1=0<br/>[&lt;/table&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/>]</pre>"}, {"lang": "NetRexx", "loc": 121, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">parse</span> arg inFileName .<br/><span class=\"kw1\">if</span> inFileName = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> inFileName = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> inFileName = <span class=\"st0\">'./data/Brian.csv'</span><br/>csv = RREadFileLineByLine01.<span class=\"me0\">scanFile</span><span class=\"br0\">(</span>inFileName<span class=\"br0\">)</span><br/>\u00a0<br/>header = htmlHeader<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>pre    = htmlCsvText<span class=\"br0\">(</span>csv, inFileName<span class=\"br0\">)</span><br/>table  = htmlCsvTable<span class=\"br0\">(</span>csv, inFileName<span class=\"br0\">)</span><br/>footer = htmlFooter<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> header<br/><span class=\"kw1\">say</span> pre<br/><span class=\"kw1\">say</span> table<br/><span class=\"kw1\">say</span> footer<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method htmlHeader<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\" xml:lang=\"en-US\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;head&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"/&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;title&gt;RCsv2Html&lt;/title&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;style type=\"text/css\"&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;!--\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'/* &lt;![DATA[ */\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'body {\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  font-family: \"Verdana\", \"Geneva\", \"Helvetica Neue\", \"Helvetica\", \"DejaVu Sans\", \"Arial\", sans-serif;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'table, th, td {\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  border: 1px solid black;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  border-collapse: collapse;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  padding: 0.25em;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  font-size: 85%;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'th {\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  color: white;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  background-color: green;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'p.classname {\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'  font-size: inherit;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'}\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'/* ]] */\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'//--&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/style&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/head&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;body&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;h1&gt;Rosetta Code &amp;ndash; NetRexx Sample Output&lt;/h2&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;h2&gt;&lt;a href=\"http://rosettacode.org/wiki/CSV_to_HTML_translation\"&gt;CSV to HTML translation&lt;/a&gt;&lt;/h2&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/>method htmlFooter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;/body&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/html&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/>method htmlCsvText<span class=\"br0\">(</span>csv, fileName = <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;h3&gt;Contents of CSV &lt;code&gt;'</span>fileName<span class=\"st0\">'&lt;/code&gt;&lt;/h3&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;pre&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> row = <span class=\"nu0\">1</span> to csv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    html = html <span class=\"sy0\">||</span> csv<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"st0\">'\\n'</span><br/>    <span class=\"kw3\">end</span> row<br/>  html = html -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/pre&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/>method htmlCsvTable<span class=\"br0\">(</span>csv, fileName = <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  html = <span class=\"st0\">'&lt;table&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;caption&gt;Translation of CSV &lt;code&gt;'</span>fileName<span class=\"st0\">'&lt;/code&gt;&lt;/caption&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;thead&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  html = html -<br/>      <span class=\"sy0\">||</span> htmlCsvTableRow<span class=\"br0\">(</span>csv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"st0\">'th'</span><span class=\"br0\">)</span><span class=\"st0\">'\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/thead&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;tbody&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> r_ = <span class=\"nu0\">2</span> to csv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    html = html -<br/>        <span class=\"sy0\">||</span> htmlCsvTableRow<span class=\"br0\">(</span>csv<span class=\"br0\">[</span>r_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"st0\">'\\n'</span> -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">end</span> r_<br/>  html = html -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/tbody&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/table&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0<br/>method htmlCsvTableRow<span class=\"br0\">(</span>row, tag = <span class=\"st0\">'td'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  row = row.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'t'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;'</span>, <span class=\"st0\">'&amp;amp;'</span><span class=\"br0\">)</span> <span class=\"co1\">-- need to do this one first to avoid double translation</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'\"'</span>, <span class=\"st0\">'&amp;quot;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">\"'\"</span>, <span class=\"st0\">'&amp;apos;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>, <span class=\"st0\">'&amp;lt;'</span><span class=\"br0\">)</span><br/>  row = row.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span>, <span class=\"st0\">'&amp;gt;'</span><span class=\"br0\">)</span><br/>  elmts = <span class=\"st0\">''</span><br/>  elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>  e_ = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> while row.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">parse</span> row elmt <span class=\"st0\">','</span> row<br/>    e_ = e_ + <span class=\"nu0\">1</span>; elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = e_; elmts<span class=\"br0\">[</span>e_<span class=\"br0\">]</span> = elmt<br/>    <span class=\"kw3\">end</span><br/>  html = <span class=\"st0\">'&lt;tr&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> e_ = <span class=\"nu0\">1</span> to elmts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    html = html -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;'</span>tag<span class=\"st0\">'&gt;'</span>elmts<span class=\"br0\">[</span>e_<span class=\"br0\">]</span><span class=\"st0\">'&lt;/'</span>tag<span class=\"st0\">'&gt;\\n'</span> -<br/>        <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">end</span> e_<br/>  html = html -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">'&lt;/tr&gt;\\n'</span> -<br/>      <span class=\"sy0\">||</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">return</span> html<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 23, "block": "<pre class=\"text highlighted_source\">import cgi, strutils<br/>\u00a0<br/>const csvtext = \"\"\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"\"\"<br/>\u00a0<br/>proc row2tr(row): string =<br/>  result = \"&lt;tr&gt;\"<br/>  let cols = xmlEncode(row).split(\",\")<br/>  for col in cols:<br/>    result.add \"&lt;td&gt;\"&amp;col&amp;\"&lt;/td&gt;\"<br/>  result.add \"&lt;/tr&gt;\"<br/>\u00a0<br/>proc csv2html(txt): string =<br/>  result = \"&lt;table summary=\\\"csv2html program output\\\"&gt;\\n\"<br/>  for row in txt.splitLines():<br/>    result.add \"  &lt;tbody&gt;\"&amp;row2tr(row)&amp;\"&lt;/tbody&gt;\\n\"<br/>  result.add \"&lt;/table&gt;\"<br/>\u00a0<br/>echo csv2html(csvtext)</pre>"}, {"lang": "Oberon-2", "loc": 74, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CSV2HTML;<br/><span class=\"kw1\">IMPORT</span> <br/>  Object<span class=\"sy0\">,</span><br/>  IO<span class=\"sy0\">,</span><br/>  IO<span class=\"sy0\">:</span>FileChannel<span class=\"sy0\">,</span><br/>  IO<span class=\"sy0\">:</span>TextRider<span class=\"sy0\">,</span><br/>  SB <span class=\"sy0\">:=</span> ADT<span class=\"sy0\">:</span>StringBuffer<span class=\"sy0\">,</span><br/>  NPCT<span class=\"sy0\">:</span>Tools<span class=\"sy0\">,</span><br/>  NPCT<span class=\"sy0\">:</span>CGI<span class=\"sy0\">:</span>Utils<span class=\"sy0\">,</span><br/>  Ex <span class=\"sy0\">:=</span> Exception<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  fileChannel<span class=\"sy0\">:</span> FileChannel.<span class=\"me1\">Channel</span>;<br/>  rd<span class=\"sy0\">:</span> TextRider.<span class=\"me1\">Reader</span>;<br/>  line<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">1024</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>  table<span class=\"sy0\">:</span> SB.<span class=\"me1\">StringBuffer</span>;<br/>  parts<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">2</span> <span class=\"kw1\">OF</span> STRING;  <br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> DoTableHeader<span class=\"br0\">(</span>sb<span class=\"sy0\">:</span> SB.<span class=\"me1\">StringBuffer</span>;parts<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> STRING<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    sb.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;\"</span><span class=\"sy0\">+</span>Utils.<span class=\"me1\">EscapeHTML</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/th&gt;&lt;th&gt;\"</span><span class=\"sy0\">+</span>Utils.<span class=\"me1\">EscapeHTML</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/th&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span>;<br/>    sb.<span class=\"me1\">AppendLn</span><br/>  <span class=\"kw1\">END</span> DoTableHeader;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> DoTableRow<span class=\"br0\">(</span>sb<span class=\"sy0\">:</span> SB.<span class=\"me1\">StringBuffer</span>;parts<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> STRING<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    sb.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span><span class=\"sy0\">+</span>Utils.<span class=\"me1\">EscapeHTML</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span><span class=\"sy0\">+</span>Utils.<span class=\"me1\">EscapeHTML</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span>;<br/>    sb.<span class=\"me1\">AppendLn</span><br/>  <span class=\"kw1\">END</span> DoTableRow;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> DoTable<span class=\"br0\">(</span>sb<span class=\"sy0\">:</span> SB.<span class=\"me1\">StringBuffer</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> STRING;<br/>  <span class=\"kw1\">VAR</span><br/>    aux<span class=\"sy0\">:</span> SB.<span class=\"me1\">StringBuffer</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>     aux <span class=\"sy0\">:=</span> SB.<span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table&gt;\"</span><span class=\"br0\">)</span>;aux.<span class=\"me1\">AppendLn</span>;<br/>     <span class=\"kw1\">RETURN</span> aux.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sb.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;/table&gt;\"</span>;<br/>  <span class=\"kw1\">END</span> DoTable;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  TRY<br/>    fileChannel <span class=\"sy0\">:=</span> FileChannel.<span class=\"me1\">OpenUnbuffered</span><span class=\"br0\">(</span><span class=\"st0\">\"script.csv\"</span><span class=\"sy0\">,</span><span class=\"br0\">{</span>FileChannel.<span class=\"me1\">read</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>  CATCH Ex.<span class=\"me1\">Exception</span><span class=\"br0\">(</span>ex<span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>    Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>ex.<span class=\"me1\">GetMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>  rd <span class=\"sy0\">:=</span> TextRider.<span class=\"me1\">ConnectReader</span><span class=\"br0\">(</span>fileChannel<span class=\"br0\">)</span>;<br/>  <span class=\"coMULTI\">(* Extract headers *)</span><br/>  TRY<br/>    rd.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span>;<br/>    table <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>SB.<span class=\"me1\">StringBuffer</span><span class=\"sy0\">,</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span>;<br/>    Tools.<span class=\"me1\">Split</span><span class=\"br0\">(</span>Object.<span class=\"me1\">NewLatin1</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>parts<span class=\"br0\">)</span>;<br/>    DoTableHeader<span class=\"br0\">(</span>table<span class=\"sy0\">,</span>parts<span class=\"br0\">)</span>;<br/>  CATCH IO.<span class=\"me1\">Error</span><span class=\"br0\">(</span>ex<span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>    Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>ex.<span class=\"me1\">Name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> ex.<span class=\"me1\">GetMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Extract data *)</span><br/>  <span class=\"kw1\">LOOP</span><br/>    TRY<br/>      rd.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0X<span class=\"br0\">)</span><span class=\"kw1\">THEN</span> <span class=\"coMULTI\">(* skip empty lines *)</span><br/>        Tools.<span class=\"me1\">Split</span><span class=\"br0\">(</span>Object.<span class=\"me1\">NewLatin1</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>parts<span class=\"br0\">)</span>;<br/>        DoTableRow<span class=\"br0\">(</span>table<span class=\"sy0\">,</span>parts<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span><br/>    CATCH IO.<span class=\"me1\">Error</span><span class=\"br0\">(</span>ex<span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">EXIT</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>DoTable<span class=\"br0\">(</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  fileChannel.<span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> CSV2HTML.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 35, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> csv_data <span class=\"sy0\">=</span> <span class=\"st0\">\"\\<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \\<br/>              he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"</span><br/>\u00a0<br/><span class=\"co1\">(* General HTML escape *)</span><br/><span class=\"kw1\">let</span> escape <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> html_escapes <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span><span class=\"kw1\">regexp</span> <span class=\"st0\">\"\\\\([^A-Za-z0-9\u00a0;!?'/]\\\\)\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> esc s <span class=\"sy0\">=</span> sprintf <span class=\"st0\">\"&amp;#%04d;\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>code s<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>group_beginning <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>global_substitute html_escapes esc<br/>\u00a0<br/><span class=\"kw1\">let</span> nl <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span><span class=\"kw1\">regexp</span> <span class=\"st0\">\"\\n\\r?\"</span><br/><span class=\"kw1\">let</span> coma <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span><span class=\"kw1\">regexp</span> <span class=\"st0\">\",\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> list_of_csv csv <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> l <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split coma l<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split nl csv<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_html_table segments <span class=\"sy0\">=</span><br/>  printf <span class=\"st0\">\"&lt;table&gt;\\n\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> line <span class=\"sy0\">-&gt;</span><br/>    printf <span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> printf <span class=\"st0\">\"&lt;td&gt;%s&lt;/td&gt;\"</span> <span class=\"br0\">(</span>escape c<span class=\"br0\">)</span><span class=\"br0\">)</span> line<span class=\"sy0\">;</span><br/>    printf <span class=\"st0\">\"&lt;/tr&gt;\\n\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span> segments<span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"&lt;/table&gt;\\n\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  print_html_table <span class=\"br0\">(</span>list_of_csv csv_data<span class=\"br0\">)</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 51, "block": "<pre class=\"progress highlighted_source\">\u00a0<br/><span class=\"kw1\">FUNCTION</span> csvToHtml <span class=\"kw1\">RETURNS</span> <span class=\"kw4\">CHARACTER</span> <span class=\"br0\">(</span><br/>   i_lhas_header  <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span><span class=\"sy0\">,</span><br/>   i_cinput       <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> coutput <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> irow    <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> icolumn <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> crow    <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> ccell   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   coutput <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;html&gt;~n~t&lt;table&gt;\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> irow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> i_cinput<span class=\"sy0\">,</span> <span class=\"st0\">\"~n\"</span><span class=\"sy0\">:</span><span class=\"me0\">U</span> <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>      <span class=\"me0\">coutput</span> <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"st0\">\"~n~t~t&lt;tr&gt;\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      crow <span class=\"sy0\">=</span> <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> irow<span class=\"sy0\">,</span> i_cinput<span class=\"sy0\">,</span> <span class=\"st0\">\"~n\"</span><span class=\"sy0\">:</span><span class=\"me0\">U</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      <span class=\"kw1\">DO</span> icolumn <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> crow <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>         <span class=\"me0\">ccell</span> <span class=\"sy0\">=</span> <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> icolumn<span class=\"sy0\">,</span> crow <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>         coutput <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"st0\">\"~n~t~t~t\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">IF</span> i_lhas_header <span class=\"kw1\">AND</span> irow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"st0\">\"&lt;th&gt;\"</span> <span class=\"kw1\">ELSE</span> <span class=\"st0\">\"&lt;td&gt;\"</span><span class=\"sy0\">.</span><br/>         coutput <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"kw2\">REPLACE</span><span class=\"br0\">(</span> <span class=\"kw2\">REPLACE</span><span class=\"br0\">(</span> <span class=\"kw2\">REPLACE</span><span class=\"br0\">(</span> ccell<span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;amp;\"</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;lt;\"</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&amp;gt;\"</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>         coutput <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"kw1\">IF</span> i_lhas_header <span class=\"kw1\">AND</span> irow <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"st0\">\"&lt;/th&gt;\"</span> <span class=\"kw1\">ELSE</span> <span class=\"st0\">\"&lt;/td&gt;\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      coutput <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"st0\">\"~n~t~t&lt;/tr&gt;\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   coutput <span class=\"sy0\">=</span> coutput <span class=\"sy0\">+</span> <span class=\"st0\">\"~n~t&lt;/table&gt;~n&lt;/html&gt;\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw3\">RETURN</span> coutput<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* csvToHtml */</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span><br/>   csvToHtml<span class=\"br0\">(</span> <br/>      <span class=\"kw2\">TRUE</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"Character,Speech\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"~n\"</span> <span class=\"sy0\">+</span><br/>      <span class=\"st0\">\"The multitude,The messiah! Show us the messiah!\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"~n\"</span> <span class=\"sy0\">+</span><br/>      <span class=\"st0\">\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"~n\"</span> <span class=\"sy0\">+</span><br/>      <span class=\"st0\">\"The multitude,Who are you?\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"~n\"</span> <span class=\"sy0\">+</span><br/>      <span class=\"st0\">\"Brians mother,I'm his mother; that's who!\"</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"~n\"</span> <span class=\"sy0\">+</span><br/>      <span class=\"st0\">\"The multitude,Behold his mother! Behold his mother!\"</span><br/>   <span class=\"br0\">)</span><br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Perl", "loc": 15, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> HTML<span class=\"sy0\">::</span><span class=\"me2\">Entities</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> row <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$elem</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@cells</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><span class=\"st0\">\"&lt;$elem&gt;$_&lt;/$elem&gt;\"</span><span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">','</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'&lt;tr&gt;'</span><span class=\"sy0\">,</span> <span class=\"re0\">@cells</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;/tr&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$first</span><span class=\"sy0\">,</span> <span class=\"re0\">@rest</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><br/>    <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a> <span class=\"re0\">$x</span><span class=\"sy0\">;</span> encode_entities <span class=\"re0\">$x</span><span class=\"br0\">}</span><br/>    <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"&lt;table&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>row <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'th'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'td'</span><span class=\"sy0\">,</span> <span class=\"re0\">$first</span><span class=\"sy0\">;</span><br/>row <span class=\"st_h\">'td'</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@rest</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"&lt;/table&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># comment the next line out, if you want to read from standard input instead of the hard-coded $str above</span><br/><span class=\"co1\"># my $str = $*IN.slurp;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;escape</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span>\u00ab\u00a0<span class=\"sy0\">&amp;</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span>\u00a0\u00bb <span class=\"sy0\">=&gt;</span> \u00ab\u00a0<span class=\"re0\">&amp;amp</span><span class=\"sy0\">;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">lt</span><span class=\"sy0\">;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">gt</span><span class=\"sy0\">;</span>\u00a0\u00bb<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># a function with one argument that escapes the entities</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;tag</span>    <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"&lt;$^tag&gt;\"</span><span class=\"sy0\">~</span><span class=\"re0\">$^what</span><span class=\"sy0\">~</span><span class=\"st0\">\"&lt;/$^tag&gt;\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">printf</span><br/><span class=\"st_h\">'&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;&lt;title&gt;Some Text&lt;/title&gt;&lt;/head&gt;<br/>&lt;body&gt;&lt;table&gt;<br/>%s<br/>&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<br/>'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span>                                <span class=\"co1\"># concatenation reduction ('a', 'b', 'c') \u2192 'abc'</span><br/><span class=\"br0\">(</span>escape<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"co2\">/\\n/</span><span class=\"br0\">)</span>             <span class=\"co1\"># escape the string and split at newline</span><br/>  <span class=\"sy0\">==&gt;</span> <span class=\"kw3\">map</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span>tag <span class=\"st_h\">'tr'</span><span class=\"sy0\">,</span>         <span class=\"co1\"># feed that into a map, that map function will tag as 'tr, and has an argument called $line</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"co2\">/','/</span><span class=\"br0\">)</span>\\          <span class=\"co1\"># split $line at ',', </span><br/>                                      <span class=\"co1\"># that / at the end is just an unspace, you can omit it, but then you have to delete</span><br/>                                      <span class=\"co1\"># all whitespace  and comments between split(\u2026) and .map</span><br/>      <span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span>tag <span class=\"st_h\">'td'</span><span class=\"sy0\">,</span> <span class=\"re0\">$^cell</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span>\\    <span class=\"co1\"># map those cells as td</span><br/>\t\t       <span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\"># append a newline for nicer output</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">constant input = \"Character,Speech\\n\" &amp;<br/>    \"The multitude,The messiah! Show us the messiah!\\n\" &amp;<br/>    \"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; \" &amp;<br/>        \"he's a very naughty boy! Now go away!&lt;/angry&gt;\\n\" &amp;<br/>    \"The multitude,Who are you?\\n\" &amp;<br/>    \"Brians mother,I'm his mother; that's who!\\n\" &amp;<br/>    \"The multitude,Behold his mother! Behold his mother!\"<br/>\u00a0<br/>puts(1,\"&lt;table&gt;\\n&lt;tr&gt;&lt;td&gt;\")<br/>for i = 1 to length(input) do<br/>    switch input[i] do<br/>        case '\\n' then puts(1,\"&lt;/td&gt;&lt;/tr&gt;\\n&lt;tr&gt;&lt;td&gt;\")<br/>        case ','  then puts(1,\"&lt;/td&gt;&lt;td&gt;\")<br/>        case '&lt;'  then puts(1,\"&amp;lt;\")<br/>        case '&gt;'  then puts(1,\"&amp;gt;\")<br/>        case '&amp;'  then puts(1,\"&amp;amp;\")<br/>        case else puts(1,input[i])<br/>    end switch<br/>end for<br/>puts(1,\"&lt;/td&gt;&lt;/tr&gt;\\n&lt;/table&gt;\")</pre>"}, {"lang": "PHP", "loc": 25, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$csv</span> <span class=\"sy0\">=</span> <span class=\"co3\">&lt;&lt;&lt;EOT<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>EOT</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> convert<span class=\"br0\">(</span><span class=\"re0\">$csv</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.php.net/array_map\"><span class=\"kw3\">array_map</span></a><span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$ln</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$out</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$ln</span>    <span class=\"sy0\">=</span> <a href=\"http://www.php.net/htmlentities\"><span class=\"kw3\">htmlentities</span></a><span class=\"br0\">(</span><span class=\"re0\">$ln</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$out</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>       \u00a0? <span class=\"st_h\">'&lt;thead&gt;&lt;tr&gt;&lt;th&gt;'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'&lt;/th&gt;&lt;th&gt;'</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span><span class=\"re0\">$ln</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;<span class=\"es1\">\\n</span>\"</span><br/>        <span class=\"sy0\">:</span> <span class=\"st_h\">'&lt;tr&gt;&lt;td&gt;'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'&lt;/td&gt;&lt;td&gt;'</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span><span class=\"re0\">$ln</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><span class=\"re0\">$csv</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"st_h\">'&lt;table&gt;'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span><span class=\"re0\">$out</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st_h\">'&lt;/table&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> convert<span class=\"br0\">(</span><span class=\"re0\">$csv</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(load \"@lib/http.l\")<br/>\u00a0<br/>(in \"text.csv\"<br/>   (&lt;table&gt; 'myStyle NIL NIL<br/>      (prinl)<br/>      (while (split (line) \",\")<br/>         (&lt;row&gt; NIL (ht:Prin (pack (car @))) (ht:Prin (pack (cadr @))))<br/>         (prinl) ) ) )</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw1\">Import-Csv</span> <span class=\"kw5\">-Path</span> .\\csv_html_test.csv <span class=\"sy0\">|</span> <span class=\"kw1\">ConvertTo-Html</span> <span class=\"sy0\">-</span>Fragment <span class=\"sy0\">|</span> <span class=\"kw1\">Out<span class=\"kw4\">-File</span></span> .\\csv_html_test.html<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 54, "block": "<pre class=\"prolog highlighted_source\">csv_html <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> \"Character<span class=\"sy4\">,</span>Speech<br/>The multitude<span class=\"sy4\">,</span>The messiah<span class=\"sy5\">!</span> Show us the messiah<span class=\"sy5\">!</span><br/>Brians mother<span class=\"sy4\">,</span><span class=\"sy6\">&lt;</span>angry<span class=\"sy6\">&gt;</span>Now you listen here<span class=\"sy5\">!</span> He<span class=\"st_h\">'s not the messiah; he'</span>s a very naughty boy<span class=\"sy5\">!</span> Now go away<span class=\"sy5\">!</span><span class=\"sy6\">&lt;</span><span class=\"sy3\">/</span>angry<span class=\"sy6\">&gt;</span><br/>The multitude<span class=\"sy4\">,</span>Who are you?<br/>Brians mother<span class=\"sy4\">,</span>I<span class=\"st_h\">'m his mother; that'</span>s who<span class=\"sy5\">!</span><br/>The multitude<span class=\"sy4\">,</span>Behold his mother<span class=\"sy5\">!</span> Behold his mother<span class=\"sy5\">!</span>\"<span class=\"sy4\">,</span><br/>\u00a0<br/>\tcsv_html<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Out<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstring_to_list<span class=\"br0\">(</span>Str<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">% simple HTML</span><br/><span class=\"co1\">%</span><br/>csv_html<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy6\">&lt;</span>TABLE<span class=\"sy6\">&gt;</span>\\n\"<span class=\"sy4\">,</span><br/>\tcsv_tr<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\"<span class=\"sy6\">&lt;</span><span class=\"sy3\">/</span>TABLE<span class=\"sy6\">&gt;</span>\"<span class=\"sy4\">.</span><br/>\u00a0<br/>csv_tr<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_tr<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy6\">&lt;</span>TR<span class=\"sy6\">&gt;</span>\\n\"<span class=\"sy4\">,</span><br/>\tcsv_td<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\"\\n<span class=\"sy6\">&lt;</span><span class=\"sy3\">/</span>TR<span class=\"sy6\">&gt;</span>\\n\"<span class=\"sy4\">,</span><br/>\tcsv_tr<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy6\">&lt;</span>TD<span class=\"sy6\">&gt;</span>\"<span class=\"sy4\">,</span><br/>\tcsv_td_in<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\"<span class=\"sy6\">&lt;</span><span class=\"sy3\">/</span>TD<span class=\"sy6\">&gt;</span>\"<span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">44</span><span class=\"sy5\">|</span>L<span class=\"br0\">]</span><span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy6\">&lt;</span><span class=\"sy3\">/</span>TD<span class=\"sy6\">&gt;&lt;</span>TD<span class=\"sy6\">&gt;</span>\"<span class=\"sy4\">,</span><br/>\tcsv_td_in<span class=\"br0\">(</span>L<span class=\"sy4\">,</span>S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">60</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy5\">&amp;</span>lt<span class=\"sy4\">;</span>\"<span class=\"sy4\">,</span><br/>\tcsv_td_in<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">62</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t\"<span class=\"sy5\">&amp;</span>gt<span class=\"sy4\">;</span>\"<span class=\"sy4\">,</span><br/>\tcsv_td_in<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>csv_td_in<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"br0\">[</span>H<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tcsv_td_in<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\">csvtxt <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<span class=\"es0\">\\</span><br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">cgi</span> <span class=\"kw1\">import</span> escape<br/>\u00a0<br/><span class=\"kw1\">def</span> _row2tr<span class=\"br0\">(</span>row<span class=\"sy0\">,</span> attr<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:<br/>    cols <span class=\"sy0\">=</span> escape<span class=\"br0\">(</span>row<span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'&lt;TR&gt;'</span><br/>            + <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;TD&gt;%s&lt;/TD&gt;'</span>\u00a0% data <span class=\"kw1\">for</span> data <span class=\"kw1\">in</span> cols<span class=\"br0\">)</span><br/>            + <span class=\"st0\">'&lt;/TR&gt;'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> csv2html<span class=\"br0\">(</span>txt<span class=\"br0\">)</span>:<br/>    htmltxt <span class=\"sy0\">=</span> <span class=\"st0\">'&lt;TABLE summary=\"csv2html program output\"&gt;<span class=\"es0\">\\n</span>'</span><br/>    <span class=\"kw1\">for</span> rownum<span class=\"sy0\">,</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>txt.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        htmlrow <span class=\"sy0\">=</span> _row2tr<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>        htmlrow <span class=\"sy0\">=</span> <span class=\"st0\">'  &lt;TBODY&gt;%s&lt;/TBODY&gt;<span class=\"es0\">\\n</span>'</span>\u00a0% htmlrow<br/>        htmltxt +<span class=\"sy0\">=</span> htmlrow<br/>    htmltxt +<span class=\"sy0\">=</span> <span class=\"st0\">'&lt;/TABLE&gt;<span class=\"es0\">\\n</span>'</span><br/>    <span class=\"kw1\">return</span> htmltxt<br/>\u00a0<br/>htmltxt <span class=\"sy0\">=</span> csv2html<span class=\"br0\">(</span>csvtxt<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>htmltxt<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define e.g.-CSV<br/>  (string-join<br/>   '(\"Character,Speech\"<br/>     \"The multitude,The messiah! Show us the messiah!\"<br/>     \"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\"<br/>     \"The multitude,Who are you?\"<br/>     \"Brians mother,I'm his mother; that's who!\"<br/>     \"The multitude,Behold his mother! Behold his mother!\")<br/>   \"\\n\"))<br/>\u00a0<br/>(define (CSV-lines-&gt;HTML-table csv)<br/>  (define csv-rows<br/>    (regexp-split \"\\n\" csv))<br/>  (define csv-row-cells<br/>    (map (lambda (row) (regexp-split \",\" row)) csv-rows))<br/>  (define (cell-data-&gt;HTML-data data)<br/>    `(td () ,data))  <br/>  (define (row-data-&gt;HTML-row CSV-row)<br/>    `(tr () ,@(map cell-data-&gt;HTML-data CSV-row) \"\\n\"))<br/>  `(table<br/>    (thead<br/>     ,(row-data-&gt;HTML-row (car csv-row-cells)))<br/>    (tbody ,@(map row-data-&gt;HTML-row (cdr csv-row-cells)))))<br/>\u00a0<br/>(require xml)<br/>(display (xexpr-&gt;string (CSV-lines-&gt;HTML-table e.g.-CSV)))</pre>"}, {"lang": "Red", "loc": 40, "block": "<pre class=\"text highlighted_source\">Red []<br/>\u00a0<br/>csv: {Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!} <br/>\u00a0<br/>add2html: func [ bl ] [append html rejoin bl ] \u00a0;; helper function to add block data to html string<br/>\u00a0<br/>;;----------------------------------------------------------------------<br/>csv2html: func [\"function to generate string with html table from csv data file\"<br/>;;----------------------------------------------------------------------<br/>    s [string!] \"input .csv data\"<br/>][<br/>arr: split s newline   \u00a0;; generate array (series) from string <br/>html: copy \"&lt;table border=1&gt;^/\"\u00a0;; init html string<br/>\u00a0<br/>forall arr  [ \u00a0;; i use forall here so that i can test for head? of series ...<br/>  either head? arr [ append html \"&lt;tr bgcolor=wheat&gt;\"]<br/>                      [ append html \"&lt;tr&gt;\"]<br/>  replace/all first arr \"&lt;\" \"&amp;lt;\"   \u00a0;; escape \"&lt;\" and \"&gt;\" characters<br/>  replace/all first arr \"&gt;\" \"&amp;gt;\"    <br/>  foreach col split first arr \",\" [<br/>      either head? arr [<br/>        add2html ['&lt;th&gt; col '&lt;/th&gt;]<br/>      ][   <br/>        add2html ['&lt;td&gt; col '&lt;/td&gt;]   <br/>      ]<br/>  ]<br/>  add2html ['&lt;/tr&gt; newline]<br/>]<br/>return add2html ['&lt;/table&gt;]<br/>]<br/>;;----------------------------------------------------------------------<br/>\u00a0<br/>print csv2html csv                \u00a0;; call function<br/>write\u00a0%data.html csv2html csv  \u00a0;; write to file<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 23, "block": "<pre class=\"text highlighted_source\">remapping off<br/>\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\" remapping on <br/>keepString constant CSV<br/>\u00a0<br/>: display  ( c- )<br/>  [ ', = ] [ drop \"&lt;/td&gt;&lt;td&gt;\" puts ] when<br/>  [ 10 = ] [ drop \"&lt;/td&gt;&lt;/tr&gt;\\n&lt;tr&gt;&lt;td&gt;\" puts ] when<br/>  [ '&lt; = ] [ drop \"&amp;lt;\"  puts ] when<br/>  [ '&gt; = ] [ drop \"&amp;gt;\"  puts ] when<br/>  [ '&amp; = ] [ drop \"&amp;amp;\" puts ] when<br/>  putc\u00a0;<br/>\u00a0<br/>: displayHTML  ( $- )<br/>  \"&lt;table&gt;\\n&lt;tr&gt;&lt;td&gt;\" puts<br/>  [ @ display ] ^types'STRING <a class=\"__cf_email__\" data-cfemail=\"a8cdc9cbc0e8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  \"&lt;/td&gt;&lt;/tr&gt;\\n&lt;/table&gt;\" puts\u00a0;<br/>\u00a0<br/>CSV displayHTML</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program converts   CSV  \u2500\u2500\u2500\u25ba  HTML  table   representing  the  CSV  data.        */</span><br/><span class=\"kw1\">arg</span> header_ <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain an uppercase version of args. */</span><br/>wantsHdr= <span class=\"br0\">(</span>header_==<span class=\"st0\">'HEADER'</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*is the arg (low/upp/mix case)=HEADER?*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  determine if user wants a hdr. */</span><br/>                  iFID= <span class=\"st0\">'CSV_HTML.TXT'</span>           <span class=\"coMULTI\">/*the   input  fileID  to be used.     */</span><br/><span class=\"kw1\">if</span> wantsHdr  <span class=\"kw3\">then</span> oFID= <span class=\"st0\">'OUTPUTH.HTML'</span>           <span class=\"coMULTI\">/*the  output  fileID  with     header.*/</span><br/>             <span class=\"kw3\">else</span> oFID= <span class=\"st0\">'OUTPUT.HTML'</span>            <span class=\"coMULTI\">/* \"      \"      \"     without     \"   */</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> rows=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span>  <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*read the rows from a (text/txt) file.*/</span><br/>    row<span class=\"sy0\">.</span>rows= <span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*rows*/</span><br/>\u00a0<br/>convFrom= <span class=\"st0\">'&amp;      &lt;     &gt;     \"'</span>                 <span class=\"coMULTI\">/*special characters to be converted.  */</span><br/>convTo  = <span class=\"st0\">'&amp;amp;  &amp;lt;  &amp;gt;  &amp;quot;'</span>            <span class=\"coMULTI\">/*display what they are converted into.*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> write , <span class=\"st0\">'&lt;html&gt;'</span><br/><span class=\"kw1\">call</span> write , <span class=\"st0\">'&lt;table border=4 cellpadding=9 cellspacing=1&gt;'</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span> <span class=\"kw2\">for</span> rows;    <span class=\"kw1\">call</span> write <span class=\"nu0\">5</span>, <span class=\"st0\">'&lt;tr&gt;'</span><br/>                           tx= <span class=\"st0\">'td'</span><br/>  <span class=\"kw1\">if</span> wantsHdr <span class=\"sy0\">&amp;</span> j==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> tx= <span class=\"st0\">'th'</span>              <span class=\"coMULTI\">/*if user wants a header, then oblige. */</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  row<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>;          <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> row<span class=\"sy0\">.</span>j yyy <span class=\"st0\">\",\"</span> row<span class=\"sy0\">.</span>j<br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>convFrom<span class=\"br0\">)</span><br/>           yyy=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> convFrom, k<span class=\"br0\">)</span>, yyy, <span class=\"kw6\">word</span><span class=\"br0\">(</span> convTo, k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>       <span class=\"kw1\">call</span> write <span class=\"nu0\">10</span>, <span class=\"st0\">'&lt;'</span>tx<span class=\"st0\">\"&gt;\"</span>yyy<span class=\"st0\">'&lt;/'</span>tx<span class=\"st0\">\"&gt;\"</span><br/>       <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*forever*/</span><br/>  <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> write <span class=\"nu0\">5</span>, <span class=\"st0\">'&lt;tr&gt;'</span><br/><span class=\"kw1\">call</span> write  , <span class=\"st0\">'&lt;/table&gt;'</span><br/><span class=\"kw1\">call</span> write  , <span class=\"st0\">'&lt;/html&gt;'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>write:   <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span>  oFID,  <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;                         <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre> ruby csv2html.rb header\n</pre>"}, {"lang": "Run BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">csv$ = \"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"<br/>\u00a0<br/>k\t= instr(csv$,\",\")                                 ' 2 exra lines to get heading<br/>csv$  = left$(csv$,k - 1) + \"&lt;/th&gt;&lt;th&gt; + mid$(csv$,k + 1)<br/>\u00a0<br/>csv$ = strRep$(csv$,\",\",\"&lt;/td&gt;&lt;td&gt;\")<br/>html \"&lt;table border=1&gt;&lt;TR bgcolor=wheat align=center&gt;&lt;th&gt;\";strRep$(csv$,chr$(13),\"&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\");\"&lt;/td&gt;&lt;/tr&gt;&lt;/table\"<br/>wait<br/>' --------------------------------<br/>' string replace rep str with<br/>' --------------------------------<br/>FUNCTION strRep$(strRep$,rep$,with$)<br/>ln\t= len(rep$)<br/>k\t= instr(strRep$,rep$)<br/>while k<br/>\tstrRep$\t= left$(strRep$,k - 1) + with$ + mid$(strRep$,k + ln)<br/>\tk\t= instr(strRep$,rep$)<br/>WEND<br/>END FUNCTION</pre>"}, {"lang": "Scala", "loc": 42, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CsvToHTML <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> header <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>title<span class=\"sy0\">&gt;</span>CsvToHTML<span class=\"sy0\">&lt;</span>/title<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>style <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a><span class=\"sy0\">=</span><span class=\"st0\">\"text/css\"</span><span class=\"sy0\">&gt;</span><br/>      td <span class=\"br0\">{</span><span class=\"br0\">{</span>background-color<span class=\"sy0\">:#</span>ddddff<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">}</span> thead td <span class=\"br0\">{</span><span class=\"br0\">{</span>background-color<span class=\"sy0\">:#</span>ddffdd<span class=\"sy0\">;</span> text-align<span class=\"sy0\">:</span>center<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;</span>/style<span class=\"sy0\">&gt;</span><br/>  <span class=\"sy0\">&lt;</span>/head<span class=\"sy0\">&gt;</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> csv <span class=\"sy0\">=</span><br/>    <span class=\"st0\">\"\"</span><span class=\"st0\">\"Character,Speech<br/>      |The multitude,The messiah! Show us the messiah!<br/>      |Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>      |The multitude,Who are you?<br/>      |Brians mother,I'm his mother; that's who!<br/>      |The multitude,Behold his mother! Behold his mother!\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">stripMargin</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> csv2html<span class=\"br0\">(</span>csv<span class=\"sy0\">:</span> String, withHead<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> processRow<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>tr<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">{</span>text.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">&lt;</span>td<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span>s<span class=\"br0\">}</span><br/>      <span class=\"sy0\">&lt;</span>/td<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;</span>/tr<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>first <span class=\"sy0\">::</span> rest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> csv.<span class=\"me1\">lines</span>.<span class=\"me1\">toList</span> <span class=\"co1\">// Separate the header and the rest</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tableHead <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>withHead<span class=\"br0\">)</span><br/>      <span class=\"sy0\">&lt;</span>thead<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span>processRow<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"sy0\">&lt;</span>/thead<span class=\"sy0\">&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> processRow<span class=\"br0\">(</span>first<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">{</span>header<span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>      <span class=\"sy0\">&lt;</span>table<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span>tableHead<span class=\"br0\">}</span><span class=\"br0\">{</span>rest.<span class=\"me1\">map</span><span class=\"br0\">(</span>processRow<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"sy0\">&lt;</span>/table<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>/body<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>/html<span class=\"sy0\">&gt;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>csv2html<span class=\"br0\">(</span>csv, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sed", "loc": 9, "block": "<pre class=\"text highlighted_source\">#!/bin/sed -f<br/>\u00a0<br/>s|&lt;|\\&amp;lt;|g<br/>s|&gt;|\\&amp;gt;|g<br/>s|^| &lt;tr&gt;\\n  &lt;td&gt;|<br/>s|,|&lt;/td&gt;\\n  &lt;td&gt;|<br/>s|$|&lt;/td&gt;\\n &lt;/tr&gt;|<br/>1s|^|&lt;table&gt;\\n|<br/>$s|$|\\n&lt;/table&gt;|</pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"html_ent.s7i\";<br/>\u00a0<br/>const string: csvData is \"\\<br/>    \\Character,Speech\\n\\<br/>    \\The multitude,The messiah! Show us the messiah!\\n\\<br/>    \\Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\\n\\<br/>    \\The multitude,Who are you?\\n\\<br/>    \\Brians mother,I'm his mother; that's who!\\n\\<br/>    \\The multitude,Behold his mother! Behold his mother!\\n\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: line is \"\";<br/>    var string: column is \"\";<br/>    const array [boolean] string: columnStartTag is [boolean] (\"&lt;td&gt;\", \"&lt;th&gt;\");<br/>    const array [boolean] string: columnEndTag is [boolean] (\"&lt;/td&gt;\", \"&lt;/th&gt;\");<br/>    var boolean: firstLine is TRUE;<br/>  begin<br/>    writeln(\"&lt;table&gt;\");<br/>    for line range split(csvData, '\\n') do<br/>      write(\"&lt;tr&gt;\");<br/>      for column range split(line, ',') do<br/>        write(columnStartTag[firstLine] &lt;&amp; encodeHtmlContent(column) &lt;&amp; columnEndTag[firstLine]);<br/>      end for;<br/>      writeln(\"&lt;/tr&gt;\");<br/>      firstLine\u00a0:= FALSE;<br/>    end for;<br/>    writeln(\"&lt;/table&gt;\");<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 30, "block": "<pre class=\"ruby highlighted_source\">func escape<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span> str.<span class=\"me1\">trans</span><span class=\"br0\">(</span>\u00ab\u00a0<span class=\"sy0\">&amp;</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span>\u00a0\u00bb, \u00ab\u00a0<span class=\"sy0\">&amp;</span>amp; <span class=\"sy0\">&amp;</span>lt; <span class=\"sy0\">&amp;</span>gt;\u00a0\u00bb<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func tag<span class=\"br0\">(</span>t, d<span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"st0\">\"&lt;#{t}&gt;#{d}&lt;/#{t}&gt;\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>func csv2html<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var template = <span class=\"sy0\">&lt;&lt;-</span><span class=\"st0\">'EOT'</span><br/>    <span class=\"sy0\">&lt;</span>!DOCTYPE html<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;&lt;</span>title<span class=\"sy0\">&gt;</span>Some Text<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;&lt;/</span>head<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;&lt;</span>table<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">%</span>s<br/>    <span class=\"sy0\">&lt;/</span>table<span class=\"sy0\">&gt;&lt;/</span>body<span class=\"sy0\">&gt;&lt;/</span>html<span class=\"sy0\">&gt;</span><br/>    EOT<br/>\u00a0<br/>    template.<span class=\"kw3\">sprintf</span><span class=\"br0\">(</span>escape<span class=\"br0\">(</span>str<span class=\"br0\">)</span>.<span class=\"me1\">lines</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>            tag<span class=\"br0\">(</span><span class=\"st0\">'tr'</span>, line.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>cell<span class=\"sy0\">|</span> tag<span class=\"br0\">(</span><span class=\"st0\">'td'</span>, cell<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var str = <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">'EOT'</span>;<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,<span class=\"sy0\">&lt;</span>angry<span class=\"sy0\">&gt;</span>Now you listen here! He<span class=\"st0\">'s not the messiah; he'</span>s a very naughty boy! Now go away!<span class=\"sy0\">&lt;/</span>angry<span class=\"sy0\">&gt;</span><br/>The multitude,Who are you?<br/>Brians mother,I<span class=\"st0\">'m his mother; that'</span>s who!<br/>The multitude,Behold his mother! Behold his mother!<br/>EOT<br/>\u00a0<br/><span class=\"kw3\">print</span> csv2html<span class=\"br0\">(</span>str<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require csv<br/><span class=\"kw2\">package</span> require html<br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">queue</span><br/>\u00a0<br/><span class=\"kw1\">set</span> csvData <span class=\"st0\">\"Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!\"</span><br/>\u00a0<br/>struct::<span class=\"me1\">queue</span> rows<br/><span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$csvData</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    csv::<span class=\"me1\">split2queue</span> rows <span class=\"re0\">$line</span><br/><span class=\"br0\">}</span><br/>html::<span class=\"me1\">init</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">subst</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>html::<span class=\"me1\">openTag</span> table <span class=\"br0\">{</span>summary=<span class=\"st0\">\"csv2html program output\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>html::<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>rows size<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">[</span>html::<span class=\"me1\">row</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>html::<span class=\"me1\">quoteFormValue</span> <span class=\"br0\">[</span>rows get<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>html::<span class=\"me1\">closeTag</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TUSCRIPT", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>MODE DATA<br/>$$ csv=*<br/>Character,Speech<br/>The multitude,The messiah! Show us the messiah!<br/>Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;<br/>The multitude,Who are you?<br/>Brians mother,I'm his mother; that's who!<br/>The multitude,Behold his mother! Behold his mother!<br/>$$ htmlhead=*<br/>&lt;!DOCTYPE html system&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;title&gt;Life of Brian&lt;/title&gt;<br/>&lt;style type=\"text/css\"&gt;<br/>th {background-color:orange}<br/>td {background-color:yellow}<br/>&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;<br/>$$ BUILD X_TABLE txt2html=*<br/> &lt;&lt; &amp;lt;<br/> &gt;&gt; &amp;gt;<br/>$$ MODE TUSCRIPT<br/>file=\"brian.html\"<br/>ERROR/STOP CREATE (file,FDF-o,-std-)<br/>csv=EXCHANGE (csv,txt2html)<br/>x=SPLIT (csv,\":,:\",row1,row2)<br/>ACCESS html: WRITE/ERASE/RECORDS/UTF8 $file s,html<br/>WRITE html htmlhead<br/>LOOP n,td1=row1,td2=row2<br/>IF (n==1) THEN<br/>row=CONCAT (\"&lt;tr&gt;&lt;th&gt;\",td1,\"&lt;/th&gt;&lt;th&gt;\",td2,\"&lt;/th&gt;&lt;/tr&gt;\")<br/>ELSE<br/>row=CONCAT (\"&lt;tr&gt;&lt;td&gt;\",td1,\"&lt;/td&gt;&lt;td&gt;\",td2,\"&lt;/td&gt;&lt;/tr&gt;\")<br/>ENDIF<br/>WRITE html row<br/>ENDLOOP<br/>WRITE html \"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\"<br/>ENDACCESS/PRINT html<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 13, "block": "<pre class=\"text highlighted_source\">@(collect)<br/>@char,@speech<br/>@(end)<br/>@(output\u00a0:filter\u00a0:to_html)<br/>&lt;table&gt;<br/>@  (repeat)<br/>  &lt;tr&gt;<br/>     &lt;td&gt;@char&lt;/td&gt; <br/>     &lt;td&gt;@speech&lt;/td&gt; <br/>  &lt;/tr&gt;<br/>@  (end)<br/>&lt;/table&gt;<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 42, "block": "<pre class=\"bash highlighted_source\">csv2html<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re2\">IFS</span>=,<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;table&gt;\"</span><br/>\u00a0<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;thead&gt;\"</span><br/>    <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> speaker text<br/>    htmlrow <span class=\"st0\">\"<span class=\"es2\">$speaker</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$text</span>\"</span> th<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;/thead&gt;\"</span><br/>\u00a0<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;tbody&gt;\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> speaker text; <span class=\"kw1\">do</span><br/>        htmlrow <span class=\"st0\">\"<span class=\"es2\">$speaker</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$text</span>\"</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;/tbody&gt;\"</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"&lt;/table&gt;\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>htmlrow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re2\">cell</span>=<span class=\"co1\">${3:-td}</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"&lt;tr&gt;&lt;%s&gt;%s&lt;/%s&gt;&lt;%s&gt;%s&lt;/%s&gt;&lt;/tr&gt;<span class=\"es1\">\\n</span>\"</span> \\<br/>        <span class=\"st0\">\"<span class=\"es2\">$cell</span>\"</span> <span class=\"st0\">\"<span class=\"es4\">$(escape_html \"$1\")</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$cell</span>\"</span> \\<br/>        <span class=\"st0\">\"<span class=\"es2\">$cell</span>\"</span> <span class=\"st0\">\"<span class=\"es4\">$(escape_html \"$2\")</span>\"</span> <span class=\"st0\">\"<span class=\"es2\">$cell</span>\"</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>escape_html<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re2\">str</span>=<span class=\"co1\">${1//\\&amp;/&amp;amp;}</span><br/>    <span class=\"re2\">str</span>=<span class=\"co1\">${str//&lt;/&amp;lt;}</span><br/>    <span class=\"re2\">str</span>=<span class=\"co1\">${str//&gt;/&amp;gt;}</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$str</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">html</span>=$<span class=\"br0\">(</span> <br/>    csv2html <span class=\"sy0\">&lt;&lt;</span>-END<br/>\tCharacter,Speech<br/>\tThe multitude,The messiah<span class=\"sy0\">!</span> Show us the messiah<span class=\"sy0\">!</span><br/>\tBrians mother,<span class=\"sy0\">&lt;</span>angry<span class=\"sy0\">&gt;</span>Now you listen here<span class=\"sy0\">!</span> He<span class=\"st_h\">'s not the messiah; he'</span>s a very naughty boy<span class=\"sy0\">!</span> Now go away<span class=\"sy0\">!&lt;/</span>angry<span class=\"sy0\">&gt;</span><br/>\tThe multitude,Who are you?<br/>\tBrians mother,I<span class=\"st_h\">'m his mother; that'</span>s <span class=\"kw2\">who</span><span class=\"sy0\">!</span><br/>\tThe multitude,Behold his mother<span class=\"sy0\">!</span> Behold his mother<span class=\"sy0\">!</span><br/>\tEND<br/><span class=\"br0\">)</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$html</span>\"</span></pre>"}, {"lang": "VBScript", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Set</span> objfso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>\u00a0<br/>parent_folder = objfso.GetParentFolderName(WScript.ScriptFullName) &amp; <span class=\"st0\">\"\\\"</span><br/>\u00a0<br/><span class=\"kw4\">Set</span> objcsv = objfso.OpenTextFile(parent_folder &amp; <span class=\"st0\">\"in.csv\"</span>,1,<span class=\"kw5\">False</span>)<br/><span class=\"kw4\">Set</span> objhtml = objfso.OpenTextFile(paren_folder &amp; <span class=\"st0\">\"out.html\"</span>,2,<span class=\"kw5\">True</span>)<br/>\u00a0<br/>objhtml.Write(csv_to_html(objcsv.ReadAll))<br/>\u00a0<br/>objcsv.<span class=\"kw3\">Close</span><br/>objhtml.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objfso = <span class=\"kw5\">Nothing</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> csv_to_html(s)<br/>\trow = Split(s,vbCrLf)<br/>\t<span class=\"co1\">'write the header<br/></span>\ttmp = <span class=\"st0\">\"&lt;html&gt;&lt;head&gt;&lt;head/&gt;&lt;body&gt;&lt;table border=1 cellpadding=10 cellspacing=0&gt;\"</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(row)<br/>\t\tfield = Split(row(i),<span class=\"st0\">\",\"</span>)<br/>\t\t<span class=\"kw3\">If</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\ttmp = tmp &amp; <span class=\"st0\">\"&lt;tr&gt;&lt;th&gt;\"</span> &amp; replace_chars(field(0)) &amp; <span class=\"st0\">\"&lt;/th&gt;&lt;th&gt;\"</span> &amp; replace_chars(field(1)) &amp; <span class=\"st0\">\"&lt;/th&gt;&lt;tr&gt;\"</span>\t\t<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\ttmp = tmp &amp; <span class=\"st0\">\"&lt;tr&gt;&lt;td&gt;\"</span> &amp; replace_chars(field(0)) &amp; <span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span> &amp; replace_chars(field(1)) &amp; <span class=\"st0\">\"&lt;/td&gt;&lt;tr&gt;\"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"co1\">'write the footer<br/></span>\ttmp = tmp &amp; <span class=\"st0\">\"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\"</span><br/>\tcsv_to_html = tmp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> replace_chars(s)<br/>\treplace_chars = Replace(Replace(s,<span class=\"st0\">\"&lt;\"</span>,<span class=\"st0\">\"&amp;lt;\"</span>),<span class=\"st0\">\"&gt;\"</span>,<span class=\"st0\">\"&amp;gt;\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 27, "block": "<pre class=\"vedit highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span>BB <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>           <span class=\"co1\">// block not set</span><br/>    BB<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>               <span class=\"co1\">// convert entire file</span><br/>    BE<span class=\"br0\">(</span>File_Size<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Convert special characters into entities</span><br/>Replace_Block<span class=\"br0\">(</span><span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"&amp;amp;\"</span><span class=\"sy0\">,</span> BB<span class=\"sy0\">,</span> BE<span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>Replace_Block<span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"&amp;lt;\"</span><span class=\"sy0\">,</span> BB<span class=\"sy0\">,</span> BE<span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>Replace_Block<span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"&amp;gt;\"</span><span class=\"sy0\">,</span> BB<span class=\"sy0\">,</span> BE<span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Convert CSV into HTML table</span><br/>Goto_Pos<span class=\"br0\">(</span>BB<span class=\"br0\">)</span><br/>IT<span class=\"br0\">(</span><span class=\"st0\">'&lt;table&gt;'</span><span class=\"br0\">)</span> IN <br/>#<span class=\"nu0\">80</span> <span class=\"sy0\">=</span> Cur_Pos<br/>Goto_Pos<span class=\"br0\">(</span>BE<span class=\"br0\">)</span><br/>IT<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><br/>#<span class=\"nu0\">81</span> <span class=\"sy0\">=</span> Cur_Line<br/>IN<br/>Goto_Pos<span class=\"br0\">(</span>#<span class=\"nu0\">80</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>Cur_Line <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    IT<span class=\"br0\">(</span><span class=\"st0\">\"    &lt;tr&gt;&lt;td&gt;\"</span><span class=\"br0\">)</span><br/>    Replace_Block<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"&lt;/td&gt;&lt;td&gt;\"</span><span class=\"sy0\">,</span>Cur_Pos<span class=\"sy0\">,</span>EOL_Pos<span class=\"sy0\">,</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><br/>    EOL<br/>    IT<span class=\"br0\">(</span><span class=\"st0\">\"&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"br0\">)</span><br/>    Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>BB<span class=\"br0\">(</span>Clear<span class=\"br0\">)</span></pre>"}, {"lang": "XSLT 2.0", "loc": 54, "block": "<pre class=\"text highlighted_source\">&lt;xsl:stylesheet <br/>   xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" <br/>   xmlns:xcsvt=\"http://www.seanbdurkin.id.au/xslt/csv-to-xml.xslt\" <br/>   xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" <br/>   xmlns:xcsv=\"http://www.seanbdurkin.id.au/xslt/xcsv.xsd\"<br/>   version=\"2.0\"<br/>   exclude-result-prefixes=\"xsl xs xcsvt xcsv\"&gt;<br/> &lt;xsl:import href=\"csv-to-xml.xslt\" /&gt;<br/> &lt;xsl:output indent=\"yes\" encoding=\"UTF-8\" method=\"html\" doctype-system=\"about:legacy-compat\" /&gt;<br/> &lt;xsl:import-schema schema-location=\"http://www.seanbdurkin.id.au/xslt/xcsv.xsd\"<br/>                    use-when=\"system-property('xsl:is-schema-aware')='yes'\" /&gt;<br/> &lt;xsl:param name=\"url-of-csv\" as=\"xs:string\" select=\"'roseta.csv'\" /&gt;<br/>\u00a0<br/>\u00a0<br/> &lt;xsl:variable name=\"phase-1-result\"&gt;<br/>   &lt;xsl:call-template name=\"xcsvt:main\" /&gt;<br/> &lt;/xsl:variable&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"/\"&gt;<br/>   &lt;html lang=\"en\"&gt;<br/>     &lt;head&gt;&lt;title&gt;CSV to HTML translation - Extra Credit&lt;/title&gt;&lt;/head&gt;<br/>     &lt;body&gt;<br/>       &lt;xsl:apply-templates select=\"$phase-1-result\" mode=\"phase-2\" /&gt;<br/>     &lt;/body&gt;<br/>   &lt;/html&gt;<br/> &lt;/xsl:template&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"xcsv:comma-separated-single-line-values\" mode=\"phase-2\"&gt;<br/>  &lt;table&gt;<br/>    &lt;xsl:apply-templates mode=\"phase-2\" /&gt;<br/>  &lt;/table&gt;<br/> &lt;/xsl:template&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"xcsv:row[1]\" mode=\"phase-2\"&gt;<br/>  &lt;th&gt;<br/>    &lt;xsl:apply-templates mode=\"phase-2\" /&gt;<br/>  &lt;/th&gt;<br/> &lt;/xsl:template&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"xcsv:row\" mode=\"phase-2\"&gt;<br/>  &lt;tr&gt;<br/>    &lt;xsl:apply-templates mode=\"phase-2\" /&gt;<br/>  &lt;/tr&gt;<br/> &lt;/xsl:template&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"xcsv:value\" mode=\"phase-2\"&gt;<br/>  &lt;td&gt;<br/>    &lt;xsl:apply-templates mode=\"phase-2\" /&gt;<br/>  &lt;/td&gt;<br/> &lt;/xsl:template&gt;<br/>\u00a0<br/> &lt;xsl:template match=\"xcsv:notice\" mode=\"phase-2\" /&gt;<br/>\u00a0<br/> &lt;/xsl:stylesheet&gt;</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">csvData:=Data(0,Int,\"Character,Speech\\n\"<br/>\"The multitude,The messiah! Show us the messiah!\\n\"<br/>\"Brians mother,&lt;angry&gt;Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!&lt;/angry&gt;\\n\"<br/>\"The multitude,Who are you\\n\"<br/>\"Brians mother,I'm his mother; that's who!\\n\"<br/>\"The multitude,Behold his mother! Behold his mother!\");<br/>\u00a0<br/>html:=csvData.pump(\"&lt;table&gt;\\n\",fcn(line){<br/>   line.replace(\"&amp;\",\"&amp;amp;\").replace(\"&lt;\",\"&amp;lt;\") // &lt;angry/&gt; --&gt; &amp;lt;angry/&gt;<br/>   .split(\",\")<br/>   .pump(\"&lt;tr&gt;\\n\",\"strip\",String.fpM(\"101\",\"  &lt;td&gt;\",\"&lt;/td&gt;\\n\"))+\"&lt;/tr&gt;\\n\"<br/>}) + \"&lt;/table&gt;\";<br/>html.println();</pre>"}]}