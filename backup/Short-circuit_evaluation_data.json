{"task": "Short-circuit_evaluation", "blocks": [{"lang": "Ada", "loc": 27, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Short_Circuit <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> A <span class=\"br0\">(</span>Value\u00a0: Boolean<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\" A=\"</span> &amp; Boolean'Image <span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Value;<br/>   <span class=\"kw1\">end</span> A;<br/>   <span class=\"kw3\">function</span> B <span class=\"br0\">(</span>Value\u00a0: Boolean<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put <span class=\"br0\">(</span><span class=\"st0\">\" B=\"</span> &amp; Boolean'Image <span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Value;<br/>   <span class=\"kw1\">end</span> B;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Boolean'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Boolean'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Put <span class=\"br0\">(</span><span class=\"st0\">\" (A and then B)=\"</span> &amp; Boolean'Image <span class=\"br0\">(</span>A <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> B <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Boolean'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Boolean'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Put <span class=\"br0\">(</span><span class=\"st0\">\" (A or else B)=\"</span> &amp; Boolean'Image <span class=\"br0\">(</span>A <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> B <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Test_Short_Circuit;</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PRIO</span> <span class=\"kw19\">ORELSE</span> <span class=\"sy1\">=</span> 2<span class=\"sy1\">,</span> <span class=\"kw19\">ANDTHEN</span> <span class=\"sy1\">=</span> 3<span class=\"sy1\">;</span> <span class=\"coMULTI\"># user defined operators #</span><br/><span class=\"kw4\">OP</span> <span class=\"kw19\">ORELSE</span> <span class=\"sy1\">=</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">BOOL</span> b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> a <span class=\"sy1\">|</span> a <span class=\"sy1\">|</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <span class=\"kw19\">ANDTHEN</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">BOOL</span> b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> a <span class=\"sy1\">|</span> b <span class=\"sy1\">|</span> a <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># user defined Short-circuit_evaluation procedures #</span><br/><span class=\"kw4\">PROC</span> or else <span class=\"sy1\">=</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">BOOL</span> b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> a <span class=\"sy1\">|</span> a <span class=\"sy1\">|</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     and then <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">BOOL</span> b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> a <span class=\"sy1\">|</span> b <span class=\"sy1\">|</span> a <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> a <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> a<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"a=\"</span><span class=\"sy1\">,</span>a<span class=\"sy1\">,</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> a<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       b <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span> b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"b=\"</span><span class=\"sy1\">,</span>b<span class=\"sy1\">,</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>CO <br/><span class=\"coMULTI\"># Valid for Algol 68 Rev0: using \"user defined\" operators #</span><br/><span class=\"coMULTI\"># Note: here BOOL is being automatically \"procedured\" to PROC BOOL #</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"T ORELSE F = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw19\">ORELSE</span> b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"F ANDTHEN T = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw19\">ANDTHEN</span> b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"or else(T, F) = \"</span><span class=\"sy1\">,</span> or else<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"and then(F, T) = \"</span><span class=\"sy1\">,</span> and then<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">END</span> CO<br/>\u00a0<br/><span class=\"coMULTI\"># Valid for Algol68 Rev1: using \"user defined\" operators #</span><br/><span class=\"coMULTI\"># Note: BOOL must be manually \"procedured\" to PROC BOOL #</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"T ORELSE F = \"</span><span class=\"sy1\">,</span>  a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw19\">ORELSE</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"T ORELSE T = \"</span><span class=\"sy1\">,</span>  a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw19\">ORELSE</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"F ANDTHEN F = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw19\">ANDTHEN</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"F ANDTHEN T = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw19\">ANDTHEN</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"F ORELSE F = \"</span><span class=\"sy1\">,</span>  a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw19\">ORELSE</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"F ORELSE T = \"</span><span class=\"sy1\">,</span>  a<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw19\">ORELSE</span>  <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"T ANDTHEN F = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw19\">ANDTHEN</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">FALSE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"T ANDTHEN T = \"</span><span class=\"sy1\">,</span> a<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw19\">ANDTHEN</span> <span class=\"br0\">(</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>b<span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 15, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>    logical procedure a( logical value v )\u00a0; begin write( \"a: \", v ); v end\u00a0;<br/>    logical procedure b( logical value v )\u00a0; begin write( \"b: \", v ); v end\u00a0;<br/>\u00a0<br/>    write( \"and: \", a( true  ) and b( true ) );<br/>    write( \"---\" );<br/>    write( \"or:  \", a( true  ) or  b( true ) );<br/>    write( \"---\" );<br/>    write( \"and: \", a( false ) and b( true ) );<br/>    write( \"---\" );<br/>    write( \"or:  \", a( false ) or  b( true ) );<br/>    write( \"---\" );<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 54, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>test, <span class=\"br0\">{</span>|<span class=\"kw2\">and</span>|, |<span class=\"kw2\">or</span>|<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- test\u00a0:: ((Bool, Bool) -&gt; Bool) -&gt; (Bool, Bool, Bool, Bool)</span><br/><span class=\"kw3\">on</span> test<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    map<span class=\"br0\">(</span>f, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">true</span>, <span class=\"kw1\">true</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"kw1\">true</span>, <span class=\"kw1\">false</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"kw1\">false</span>, <span class=\"kw1\">true</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"kw1\">false</span>, <span class=\"kw1\">false</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> test<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- |and|\u00a0:: (Bool, Bool) -&gt; Bool</span><br/><span class=\"kw3\">on</span> |<span class=\"kw2\">and</span>|<span class=\"br0\">(</span>tuple<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span> <span class=\"kw3\">to</span> tuple<br/>\u00a0<br/>    a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">and</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> |<span class=\"kw2\">and</span>|<br/>\u00a0<br/><span class=\"co1\">-- |or|\u00a0:: (Bool, Bool) -&gt; Bool</span><br/><span class=\"kw3\">on</span> |<span class=\"kw2\">or</span>|<span class=\"br0\">(</span>tuple<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span> <span class=\"kw3\">to</span> tuple<br/>\u00a0<br/>    a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">or</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> |<span class=\"kw2\">or</span>|<br/>\u00a0<br/><span class=\"co1\">-- a\u00a0:: Bool -&gt; Bool</span><br/><span class=\"kw3\">on</span> a<span class=\"br0\">(</span>bool<span class=\"br0\">)</span><br/>    log <span class=\"st0\">\"a\"</span><br/>    <span class=\"kw3\">return</span> bool<br/><span class=\"kw3\">end</span> a<br/>\u00a0<br/><span class=\"co1\">-- b\u00a0:: Bool -&gt; Bool</span><br/><span class=\"kw3\">on</span> b<span class=\"br0\">(</span>bool<span class=\"br0\">)</span><br/>    log <span class=\"st0\">\"b\"</span><br/>    <span class=\"kw3\">return</span> bool<br/><span class=\"kw3\">end</span> b<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> mf<br/>        <span class=\"kw3\">property</span> lambda\u00a0: f<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> mf<span class=\"co2\">'</span>s lambda<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>x <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>y <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\u00a0<br/>a<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> was called with the parameter <span class=\"st0\">\"%p%\"</span><span class=\"sy0\">.</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> p<br/><span class=\"br0\">}</span><br/>\u00a0<br/>b<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> was called with the parameter <span class=\"st0\">\"%p%\"</span><span class=\"sy0\">.</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> p<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f </span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw6\">function</span> a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"  x:\"</span>x<br/>\t<span class=\"kw6\">return</span> x<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"  y:\"</span>y<br/>\t<span class=\"kw6\">return</span> y<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 22, "block": "<pre class=\"text highlighted_source\">TEST(0,0)<br/>TEST(0,1)<br/>TEST(1,0)<br/>TEST(1,1)<br/>Return<br/>\u00a0<br/>Lbl TEST<br/>r\u2081\u2192X<br/>r\u2082\u2192Y<br/>Disp X\u25b6Hex+3,\" and \",Y\u25b6Hex+3,\" = \",(A(X)?B(Y))\u25b6Hex+3,i<br/>Disp X\u25b6Hex+3,\" or  \",Y\u25b6Hex+3,\" = \",(A(X)??B(Y))\u25b6Hex+3,i<br/>.Wait for keypress<br/>getKey\u02b3<br/>Return<br/>\u00a0<br/>Lbl A<br/>r\u2081<br/>Return<br/>\u00a0<br/>Lbl B<br/>r\u2081<br/>Return</pre>"}, {"lang": "BaCon", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Short-circuit evaluation</span><br/><span class=\"kw1\">FUNCTION</span> a<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"FUNCTION a\"</span><br/>    <span class=\"kw1\">RETURN</span> f<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> b<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"FUNCTION b\"</span><br/>    <span class=\"kw1\">RETURN</span> f<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"FALSE and TRUE\"</span><br/>x = a<span class=\"br0\">(</span><span class=\"kw1\">FALSE</span><span class=\"br0\">)</span> AND b<span class=\"br0\">(</span><span class=\"kw1\">TRUE</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> x<br/>\u00a0<br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"TRUE and TRUE\"</span><br/>x = a<span class=\"br0\">(</span><span class=\"kw1\">TRUE</span><span class=\"br0\">)</span> AND b<span class=\"br0\">(</span><span class=\"kw1\">TRUE</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> x<br/>\u00a0<br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"FALSE or FALSE\"</span><br/>y = a<span class=\"br0\">(</span><span class=\"kw1\">FALSE</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> b<span class=\"br0\">(</span><span class=\"kw1\">FALSE</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> y<br/>\u00a0<br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"TRUE or FALSE\"</span><br/>y = a<span class=\"br0\">(</span><span class=\"kw1\">TRUE</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> b<span class=\"br0\">(</span><span class=\"kw1\">FALSE</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> y</pre>"}, {"lang": "Batch File", "loc": 47, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">%</span><span class=\"re3\">=== Batch Files have no booleans. ===</span><span class=\"sy0\">%</span><br/><span class=\"sy0\">%</span><span class=\"re3\">=== I will instead use 1 as true and 0 as false. ===</span><span class=\"sy0\">%</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> AND<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.a<span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"co3\">^)</span> AND b<span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">j</span><span class=\"co3\">^)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">a</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">!</span><span class=\"re2\">bool_a</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">res</span><span class=\"sy0\">!</span>==0 <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">b</span> <span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">!</span><span class=\"re2\">bool_b</span><span class=\"sy0\">!</span><br/>\t\t<span class=\"sy0\">)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.=<span class=\"co3\">^&gt;</span>\t<span class=\"sy0\">!</span><span class=\"re2\">res</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> ---------------------------------<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> OR<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> a<span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"co3\">^)</span> OR b<span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">j</span><span class=\"co3\">^)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">a</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">!</span><span class=\"re2\">bool_a</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">res</span><span class=\"sy0\">!</span>==0 <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">b</span> <span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">!</span><span class=\"re2\">bool_b</span><span class=\"sy0\">!</span><br/>\t\t<span class=\"sy0\">)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.=<span class=\"co3\">^&gt;</span>\t<span class=\"sy0\">!</span><span class=\"re2\">res</span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/><span class=\"co2\"><br/>\u00a0<br/>::----------------------------------------</span><br/>:<span class=\"re0\">a</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.\tcalls func a<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> bool_a=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>:<span class=\"re0\">b</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.\tcalls func b<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> bool_b=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 28, "block": "<pre class=\"text highlighted_source\">      REM TRUE is represented as -1, FALSE as 0<br/>      FOR i% = TRUE TO FALSE<br/>        FOR j% = TRUE TO FALSE<br/>          PRINT \"For x=a(\";FNboolstring(i%);\") AND b(\";FNboolstring(j%);\")\"<br/>          x% = FALSE<br/>          REM Short-circuit AND can be simulated by cascaded IFs:<br/>          IF FNa(i%) IF FNb(j%) THEN x%=TRUE<br/>          PRINT \"x is \";FNboolstring(x%)<br/>          PRINT<br/>          PRINT \"For y=a(\";FNboolstring(i%);\") OR b(\";FNboolstring(j%);\")\"<br/>          y% = FALSE<br/>          REM Short-circuit OR can be simulated by De Morgan's laws:<br/>          IF NOTFNa(i%) IF NOTFNb(j%) ELSE y%=TRUE\u00a0: REM Note ELSE without THEN<br/>          PRINT \"y is \";FNboolstring(y%)<br/>          PRINT<br/>        NEXT:NEXT<br/>      END<br/>\u00a0<br/>      DEFFNa(bool%)<br/>      PRINT \"Function A used; \";<br/>      =bool%<br/>\u00a0<br/>      DEFFNb(bool%)<br/>      PRINT \"Function B used; \";<br/>      =bool%<br/>\u00a0<br/>      DEFFNboolstring(bool%)<br/>      IF bool%=0 THEN =\"FALSE\" ELSE=\"TRUE\"</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">( (a=.out$\"I'm a\"&amp;!!arg)<br/>&amp; (b=.out$\"I'm b\"&amp;!!arg)<br/>&amp; (false==~)<br/>&amp; (true==)<br/>&amp;\u00a0!false\u00a0!true:?outer<br/>&amp;   whl<br/>  ' (\u00a0!outer:%?x\u00a0?outer<br/>    &amp;\u00a0!false\u00a0!true:?inner<br/>    &amp;   whl<br/>      ' (\u00a0!inner:%?y\u00a0?inner<br/>        &amp;   out<br/>          $ ( Testing<br/>              (!!x&amp;true|false)<br/>              AND<br/>              (!!y&amp;true|false)<br/>            )<br/>        &amp; `(a$!x&amp;b$!y)<br/>        &amp;   out<br/>          $ ( Testing<br/>              (!!x&amp;true|false)<br/>              OR<br/>              (!!y&amp;true|false)<br/>            )<br/>        &amp; `(a$!x|b$!y)<br/>        )<br/>    )<br/>&amp; done<br/>);<br/>\u00a0</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/>\u00a0<br/>bool a<span class=\"br0\">(</span>bool in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"I am a<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> in<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool b<span class=\"br0\">(</span>bool in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"I am b<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> in<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define TEST(X,Y,O)\t\t\t\t\t\t\\<br/>  do {\t\t\t\t\t\t\t\t\\<br/>    x = a(X) O b(Y);\t\t\t\t\t\t\\<br/>    printf(#X \" \" #O \" \" #Y \" =\u00a0%s\\n\\n\", x\u00a0? \"true\"\u00a0: \"false\");\t\\<br/>  } while(false);</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  bool x<span class=\"sy0\">;</span><br/>\u00a0<br/>  TEST<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// b is not evaluated</span><br/>  TEST<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"sy0\">||</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// b is not evaluated</span><br/>  TEST<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// b is evaluated</span><br/>  TEST<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"sy0\">||</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// b is evaluated </span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 27, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> a<span class=\"br0\">(</span><span class=\"kw4\">bool</span> in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"a\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> in<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> b<span class=\"br0\">(</span><span class=\"kw4\">bool</span> in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"b\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> in<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw4\">bool</span> i, <span class=\"kw4\">bool</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and \"</span> <span class=\"sy1\">&lt;&lt;</span> j <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" or \"</span> <span class=\"sy1\">&lt;&lt;</span> j <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy3\">||</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    test<span class=\"br0\">(</span><span class=\"kw2\">false</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"kw2\">false</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"kw2\">true</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 30, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> a<span class=\"br0\">(</span><span class=\"kw4\">bool</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> b<span class=\"br0\">(</span><span class=\"kw4\">bool</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"kw1\">false</span>, <span class=\"kw1\">true</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"kw1\">false</span>, <span class=\"kw1\">true</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} and {1} = {2}\"</span>, i, j, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} or {1} = {2}\"</span>, i, j, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a <span class=\"br0\">[</span>bool<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"(a)\"</span><span class=\"br0\">)</span> bool<span class=\"br0\">)</span>   <br/>        <span class=\"br0\">(</span>b <span class=\"br0\">[</span>bool<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"(b)\"</span><span class=\"br0\">)</span> bool<span class=\"br0\">)</span><span class=\"br0\">]</span>  <br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>i <span class=\"br0\">[</span>true false<span class=\"br0\">]</span> j <span class=\"br0\">[</span>true false<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> i <span class=\"st0\">\"OR\"</span> j <span class=\"st0\">\"= \"</span><span class=\"br0\">)</span>               <br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>a i<span class=\"br0\">)</span> <span class=\"br0\">(</span>b j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>          <br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> i <span class=\"st0\">\"AND\"</span> j <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span>             <br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>a i<span class=\"br0\">)</span> <span class=\"br0\">(</span>b j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> a <span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'a<span class=\"br0\">)</span><br/>     F <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> b <span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'b<span class=\"br0\">)</span><br/>     F <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>x '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">nil</span> T<span class=\"br0\">)</span> <span class=\"br0\">(</span>T T<span class=\"br0\">)</span> <span class=\"br0\">(</span>T <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%(and ~S)\"</span> x<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">car</span><span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%(or ~S)\"</span> x<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">car</span><span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T a<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T answer<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"  # Called function a(%s) -&gt;\u00a0%s\"</span><span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> answer<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T b<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T answer<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"  # Called function b(%s) -&gt;\u00a0%s\"</span><span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> answer<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span><br/>             <span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">]</span>.<span class=\"me1\">cartesianProduct</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Calculating: r1 = a(x) &amp;&amp; b(y)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> r1 <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Calculating: r2 = a(x) || b(y)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> r2 <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 32, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> ShortCircuitEvaluation<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> A<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> B<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'b'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%s and\u00a0%s =\u00a0%s'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>j<span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> B<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Writeln<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%s or\u00a0%s =\u00a0%s'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>j<span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">BoolToStr</span><span class=\"br0\">(</span>A<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span> B<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Writeln<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> a<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> return v <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> b<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> return v <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> x <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> y <span class=\"sy0\">:=</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 21, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>symbol a = (:x)[ console writeLine:\"a\". ^ x. ].<br/>\u00a0<br/>symbol b = (:x)[ console writeLine:\"b\". ^ x. ].<br/>\u00a0<br/>program =<br/>[<br/>    (false, true) forEach(:i)<br/>    [<br/>        (false, true) forEach(:j)<br/>        [<br/>            console printLine(i,\" and \",j,\" = \",a(i) &amp;&amp; $(b(j))).<br/>\u00a0<br/>            console writeLine.<br/>            console printLine(i,\" or \",j,\" = \",a(i) || $(b(j))).<br/>            console writeLine.<br/>        ].<br/>    ].<br/>].</pre>"}, {"lang": "Elixir", "loc": 22, "block": "<pre class=\"text highlighted_source\">defmodule Short_circuit do<br/>  defp a(bool) do<br/>    IO.puts \"a( #{bool} ) called\"<br/>    bool<br/>  end<br/>\u00a0<br/>  defp b(bool) do<br/>    IO.puts \"b( #{bool} ) called\"<br/>    bool<br/>  end<br/>\u00a0<br/>  def task do<br/>    Enum.each([true, false], fn i -&gt;<br/>      Enum.each([true, false], fn j -&gt;<br/>        IO.puts \"a( #{i} ) and b( #{j} ) is #{a(i) and b(j)}.\\n\"<br/>        IO.puts \"a( #{i} ) or b( #{j} ) is #{a(i)  or b(j)}.\\n\"<br/>      end)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Short_circuit.task</pre>"}, {"lang": "Erlang", "loc": 24, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> short_circuit_evaluation <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">task_helper</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span>true<span class=\"sy1\">,</span> false<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span>true<span class=\"sy1\">,</span> false<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">a</span><span class=\"br0\">(</span> <span class=\"re5\">Boolean</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\" a ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Boolean</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Boolean</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">b</span><span class=\"br0\">(</span> <span class=\"re5\">Boolean</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\" b ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Boolean</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Boolean</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task_helper</span><span class=\"br0\">(</span> <span class=\"re5\">Boolean1</span><span class=\"sy1\">,</span> <span class=\"re5\">Boolean2</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p andalso ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Boolean1</span><span class=\"sy1\">,</span> <span class=\"re5\">Boolean2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"=&gt; ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">a</span><span class=\"br0\">(</span><span class=\"re5\">Boolean1</span><span class=\"br0\">)</span> <span class=\"kw1\">andalso</span> <span class=\"re3\">b</span><span class=\"br0\">(</span><span class=\"re5\">Boolean2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p orelse ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Boolean1</span><span class=\"sy1\">,</span> <span class=\"re5\">Boolean2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"=&gt; ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">a</span><span class=\"br0\">(</span><span class=\"re5\">Boolean1</span><span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">b</span><span class=\"br0\">(</span><span class=\"re5\">Boolean2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 7, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> a <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">bool</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printf <span class=\"st0\">\"(a)\"</span><span class=\"sy0\">;</span> x<br/><span class=\"kw1\">let</span> b <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">bool</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printf <span class=\"st0\">\"(b)\"</span><span class=\"sy0\">;</span> x<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span>true<span class=\"sy0\">;</span> <span class=\"kw1\">false</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">[</span>true<span class=\"sy0\">;</span> <span class=\"kw1\">false</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    printfn <span class=\"st0\">\"%b AND\u00a0%b =\u00a0%b\"</span> x y <span class=\"br0\">(</span><span class=\"br0\">(</span>a x<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>b y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"%b OR\u00a0%b =\u00a0%b\"</span> x y <span class=\"br0\">(</span><span class=\"br0\">(</span>a x<span class=\"br0\">)</span> || <span class=\"br0\">(</span>b y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">USING: combinators.short-circuit.smart io prettyprint\u00a0;<br/>IN: rosetta-code.short-circuit<br/>\u00a0<br/>: a (\u00a0? --\u00a0? ) \"(a)\" write\u00a0;<br/>: b (\u00a0? --\u00a0? ) \"(b)\" write\u00a0;<br/>\u00a0<br/>\"f &amp;&amp; f = \" write { [ f a ] [ f b ] } &amp;&amp; .<br/>\"f || f = \" write { [ f a ] [ f b ] } || .<br/>\"f &amp;&amp; t = \" write { [ f a ] [ t b ] } &amp;&amp; .<br/>\"f || t = \" write { [ f a ] [ t b ] } || .<br/>\"t &amp;&amp; f = \" write { [ t a ] [ f b ] } &amp;&amp; .<br/>\"t || f = \" write { [ t a ] [ f b ] } || .<br/>\"t &amp;&amp; t = \" write { [ t a ] [ t b ] } &amp;&amp; .<br/>\"t || t = \" write { [ t a ] [ t b ] } || .</pre>"}, {"lang": "Fantom", "loc": 28, "block": "<pre class=\"text highlighted_source\">class Main<br/>{<br/>  static Bool a (Bool value)<br/>  {<br/>    echo (\"in a\")<br/>    return value<br/>  }<br/>\u00a0<br/>  static Bool b (Bool value)<br/>  {<br/>    echo (\"in b\")<br/>    return value<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    [false,true].each |i|<br/>    {<br/>      [false,true].each |j|<br/>      {<br/>        Bool result\u00a0:= a(i) &amp;&amp; b(j)<br/>        echo (\"a($i) &amp;&amp; b($j): \" + result)<br/>        result = a(i) || b(j)<br/>        echo (\"a($i) || b($j): \" + result)<br/>      }<br/>    }<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 28, "block": "<pre class=\"text highlighted_source\">\\ Short-circuit evaluation definitions from Wil Baden, with minor name changes<br/>:  ENDIF  postpone THEN\u00a0; immediate<br/>\u00a0<br/>:   COND  0\u00a0; immediate<br/>: ENDIFS  BEGIN DUP WHILE postpone ENDIF REPEAT DROP\u00a0; immediate<br/>: ORELSE  s\"\u00a0?DUP 0= IF\"  evaluate\u00a0; immediate<br/>:  ANDIF  s\" DUP IF DROP\" evaluate\u00a0; immediate<br/>\u00a0<br/>: .bool IF .\" true  \" ELSE .\" false \" THEN\u00a0;<br/>: A  .\" A=\" DUP .bool\u00a0;<br/>: B  .\" B=\" DUP .bool\u00a0;<br/>\u00a0<br/>: test<br/>  CR<br/>  1 -1 DO 1 -1 DO<br/>    COND I A ANDIF  J B ENDIFS .\" ANDIF=\"  .bool CR<br/>    COND I A ORELSE J B ENDIFS .\" ORELSE=\" .bool CR<br/>  LOOP LOOP\u00a0;<br/>\u00a0<br/>\\ An alternative based on explicitly short-circuiting conditionals, Dave Keenan<br/>: END-PRIOR-IF  1 CS-ROLL postpone ENDIF\u00a0; immediate<br/>\u00a0<br/>: test<br/>  CR<br/>  1 -1 DO 1 -1 DO<br/>    I A    IF J B IF 1 ELSE END-PRIOR-IF 0 ENDIF .\" ANDIF=\"  .bool CR<br/>    I A 0= IF J B IF END-PRIOR-IF 1 ELSE 0 ENDIF .\" ORELSE=\" .bool CR<br/>  LOOP LOOP\u00a0;</pre>"}, {"lang": "Fortran", "loc": 51, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Short_Circuit_Eval<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>, y<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">l</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span>, <span class=\"kw2\">.<span class=\"me1\">true</span>.</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1,a,l1,a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Calculating x = a(\"</span>, l<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\") and b(\"</span>, l<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, <span class=\"st0\">\")\"</span>   <br/>      <span class=\"co1\">! a AND b</span><br/>      x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>l<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        x <span class=\"sy0\">=</span> b<span class=\"br0\">(</span>l<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"x = \"</span>, x<br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"x = \"</span>, x<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1,a,l1,a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Calculating y = a(\"</span>, l<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\") or b(\"</span>, l<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, <span class=\"st0\">\")\"</span>   <br/>      <span class=\"co1\">! a OR b</span><br/>      y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>l<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"y = \"</span>, y<br/>      <span class=\"kw1\">else</span><br/>        y <span class=\"sy0\">=</span> b<span class=\"br0\">(</span>l<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"y = \"</span>, y<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> a<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> value<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1,a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Called function a(\"</span>, value, <span class=\"st0\">\")\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> b<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>\u00a0<br/>  b <span class=\"sy0\">=</span> value<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,l1,a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Called function b(\"</span>, value, <span class=\"st0\">\")\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 29, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> a<span class=\"br0\">(</span>p <span class=\"kw1\">As</span> Boolean<span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"a() called\"</span><br/>  <span class=\"kw1\">Return</span> p<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> b<span class=\"br0\">(</span>p <span class=\"kw1\">As</span> Boolean<span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"b() called\"</span><br/>  <span class=\"kw1\">Return</span> p<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Boolean i, j, x, y<br/>i = <span class=\"kw1\">False</span><br/>j = <span class=\"kw1\">True</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Without short-circuit evaluation\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>x = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> And b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>y = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"x = \"</span>; x; <span class=\"st0\">\" y = \"</span>; y<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"With short-circuit evaluation\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>x = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> AndAlso b<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"co1\">'' b(j) not called as a(i) = false and so x must be false</span><br/>y = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> OrElse b<span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"co1\">'' b(j) still called as can't determine y unless it is</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"x = \"</span>; x; <span class=\"st0\">\" y = \"</span>; y<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 32, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> a<span class=\"sy1\">(</span>v <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> v<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> b<span class=\"sy1\">(</span>v <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"b\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> v<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> test<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Testing a(%t) &amp;&amp; b(%t)<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"Trace:  \"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Result:\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">(</span>i<span class=\"sy1\">)</span> <span class=\"sy3\">&amp;&amp;</span> b<span class=\"sy1\">(</span>j<span class=\"sy1\">))</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Testing a(%t) || b(%t)<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"Trace:  \"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Result:\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">(</span>i<span class=\"sy1\">)</span> <span class=\"sy3\">||</span> b<span class=\"sy1\">(</span>j<span class=\"sy1\">))</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    test<span class=\"sy1\">(</span><span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 15, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> f <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'  AHA!'</span><span class=\"sy0\">;</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">{</span> printf <span class=\"br0\">(</span><span class=\"st0\">'%5d '</span>, it<span class=\"br0\">)</span><span class=\"sy0\">;</span> it <span class=\"sy0\">&gt;</span> <span class=\"nu0\">50</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'bitwise'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>g<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'''<br/>logical'''</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>g<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> g<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> f<span class=\"br0\">(</span><span class=\"st0\">'sss'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> ShortCircuit <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">||</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Debug<span class=\"sy0\">.</span>Trace<br/>\u00a0<br/>False <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">_</span>     <span class=\"sy0\">=</span> False<br/>True  <span class=\"sy0\">&amp;&amp;</span> False <span class=\"sy0\">=</span> False<br/><span class=\"sy0\">_</span>     <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">_</span>     <span class=\"sy0\">=</span> True<br/>\u00a0<br/>True  <span class=\"sy0\">||</span> <span class=\"sy0\">_</span>     <span class=\"sy0\">=</span> True<br/>False <span class=\"sy0\">||</span> True  <span class=\"sy0\">=</span> True<br/><span class=\"sy0\">_</span>     <span class=\"sy0\">||</span> <span class=\"sy0\">_</span>     <span class=\"sy0\">=</span> False<br/>\u00a0<br/>a p <span class=\"sy0\">=</span> trace <span class=\"br0\">(</span><span class=\"st0\">\"&lt;a \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> p <span class=\"sy0\">++</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> p<br/>b p <span class=\"sy0\">=</span> trace <span class=\"br0\">(</span><span class=\"st0\">\"&lt;b \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> p <span class=\"sy0\">++</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> p<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>    <span class=\"br0\">[</span> a p <span class=\"sy0\">||</span> b q <span class=\"sy0\">|</span> p <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>False<span class=\"sy0\">,</span> True<span class=\"br0\">]</span><span class=\"sy0\">,</span> q <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>False<span class=\"sy0\">,</span> True<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>                     <span class=\"sy0\">++</span> <span class=\"br0\">[</span> a p <span class=\"sy0\">&amp;&amp;</span> b q <span class=\"sy0\">|</span> p <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>False<span class=\"sy0\">,</span> True<span class=\"br0\">]</span><span class=\"sy0\">,</span> q <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>False<span class=\"sy0\">,</span> True<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 19, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">trace</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"co1\"># ensures functions print their names</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>i <span class=\"sy1\">:=</span> false <span class=\"sy1\">|</span> true <span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> j <span class=\"sy1\">:=</span> false <span class=\"sy1\">|</span> true<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"i,j\u00a0:= \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\", \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"i &amp; j:\"</span><span class=\"br0\">)</span><br/>  x <span class=\"sy1\">:=</span> i<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> j<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\"># invoke true/false</span><br/>  <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"i | j:\"</span><span class=\"br0\">)</span><br/>  y <span class=\"sy1\">:=</span> i<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> j<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\"># invoke true/false</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> true<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\">#: succeeds always (returning null)</span><br/><span class=\"kw1\">return</span>  <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> false<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">#: fails always</span><br/><span class=\"kw1\">fail</span>    <span class=\"co1\"># for clarity but not needed as running into end has the same effect</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 19, "block": "<pre class=\"io highlighted_source\">a\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>bool,<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"a(#{bool}) called.\"</span> interpolate<span class=\"br0\">)</span><br/>    bool<br/><span class=\"br0\">)</span><br/>b\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>bool,<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"b(#{bool}) called.\"</span> interpolate<span class=\"br0\">)</span><br/>    bool<br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">list</span><span class=\"br0\">(</span>true,false<span class=\"br0\">)</span> <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>avalue,<br/>    <span class=\"kw2\">list</span><span class=\"br0\">(</span>true,false<span class=\"br0\">)</span> <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>bvalue,<br/>        x\u00a0:= a<span class=\"br0\">(</span>avalue<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>bvalue<span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"x = a(#{avalue}) and b(#{bvalue}) is #{x}\"</span> interpolate<span class=\"br0\">)</span><br/>        writeln<br/>        y\u00a0:= a<span class=\"br0\">(</span>avalue<span class=\"br0\">)</span> <span class=\"kw1\">or</span> b<span class=\"br0\">(</span>bvalue<span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"y = a(#{avalue}) or b(#{bvalue}) is #{y}\"</span> interpolate<span class=\"br0\">)</span><br/>        writeln<br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">labeled=:<span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'[ <a class=\"__cf_email__\" data-cfemail=\"5e2d33312b2a2e2b2a1e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,&amp;\":~&amp;m'</span><br/>A=: <span class=\"st_h\">'A '</span> labeled<br/>B=: <span class=\"st_h\">'B '</span> labeled<br/>and=: ^:<br/>or=: <span class=\"nu0\">2</span>\u00a0:<span class=\"st_h\">'u^:(<a class=\"__cf_email__\" data-cfemail=\"bd9093fdcb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)'</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ShortCirc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"F and F = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"F or F = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"F and T = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"F or T = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"T and F = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"T or F = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"T and T = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"T or T = \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> a<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> b<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 22, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> a<span class=\"br0\">(</span>bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'a --&gt;'</span><span class=\"sy0\">,</span> bool<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> bool<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> b<span class=\"br0\">(</span>bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'b --&gt;'</span><span class=\"sy0\">,</span> bool<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> bool<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        z <span class=\"sy0\">=</span> <span class=\"kw2\">true</span> <span class=\"sy0\">?</span> a<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> b<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">def a(x): \"  a(\\(x))\" | stderr | x;<br/>\u00a0<br/>def b(y): \"  b(\\(y))\" | stderr | y;<br/>\u00a0<br/>\"and:\", (a(true) and b(true)),<br/>\"or:\",  (a(true) or b(true)),<br/>\"and:\", (a(false) and b(true)),<br/>\"or:\",  (a(false) or b(true))</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">a(x) = (println(\"\\t# Called a($x)\"); return x)<br/>b(x) = (println(\"\\t# Called b($x)\"); return x)<br/>\u00a0<br/>for i in [true,false], j in [true, false]<br/>    println(\"\\nCalculating: x = a($i) &amp;&amp; b($j)\"); x = a(i) &amp;&amp; b(j)<br/>    println(\"\\tResult: x = $x\")<br/>    println(\"\\nCalculating: y = a($i) || b($j)\"); y = a(i) || b(j)<br/>    println(\"\\tResult: y = $y\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun a<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'a' called\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> v<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun b<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'b' called\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> v<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pairs <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>Pair<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>, Pair<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>, Pair<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>, Pair<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>pair in pairs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>pair.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>pair.<span class=\"me1\">second</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${pair.first} &amp;&amp; ${pair.second} = $x\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>pair.<span class=\"me1\">first</span><span class=\"br0\">)</span> || b<span class=\"br0\">(</span>pair.<span class=\"me1\">second</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${pair.first} || ${pair.second} = $y\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 35, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">\"AND\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"a(\"</span>; i; <span class=\"st0\">\") AND b( \"</span>; j; <span class=\"st0\">\")\"</span><br/>        res <span class=\"sy0\">=</span>a<span class=\"br0\">(</span> i<span class=\"br0\">)</span>    <span class=\"co1\">'call always</span><br/>        <span class=\"kw1\">if</span> res <span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span>  <span class=\"co1\">'short circuit if 0</span><br/>            res <span class=\"sy0\">=</span> b<span class=\"br0\">(</span> j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"=&gt;\"</span><span class=\"sy0\">,</span>res<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"---------------------------------\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"OR\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"a(\"</span>; i; <span class=\"st0\">\") OR b(\"</span>; j; <span class=\"st0\">\")\"</span><br/>        res <span class=\"sy0\">=</span>a<span class=\"br0\">(</span> i<span class=\"br0\">)</span>    <span class=\"co1\">'call always</span><br/>        <span class=\"kw1\">if</span> res <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span>  <span class=\"co1\">'short circuit if &lt;&gt;0</span><br/>            res <span class=\"sy0\">=</span> b<span class=\"br0\">(</span> j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"=&gt;\"</span><span class=\"sy0\">,</span> res<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"co1\">'----------------------------------------</span><br/><span class=\"kw1\">function</span> a<span class=\"br0\">(</span> t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"sy0\">,</span><span class=\"st0\">\"calls func a\"</span><br/>    a <span class=\"sy0\">=</span> t<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> b<span class=\"br0\">(</span> t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"sy0\">,</span><span class=\"st0\">\"calls func b\"</span><br/>    b <span class=\"sy0\">=</span> t<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> </pre>"}, {"lang": "LiveCode", "loc": 24, "block": "<pre class=\"text highlighted_source\">global outcome<br/>function a bool<br/>    put \"a called with\" &amp;&amp; bool &amp; cr after outcome<br/>    return bool<br/>end a<br/>function b bool<br/>    put \"b called with\" &amp;&amp; bool &amp; cr after outcome<br/>    return bool<br/>end b<br/>\u00a0<br/>on mouseUp<br/>    local tExp<br/>    put empty into outcome<br/>    repeat for each item op in \"and,or\"<br/>        repeat for each item x in \"true,false\"<br/>            put merge(\"a([[x]]) [[op]] b([[x]])\") into tExp<br/>            put merge(tExp &amp;&amp; \"is [[\" &amp; tExp &amp; \"]]\") &amp; cr after outcome<br/>            put merge(\"a([[x]]) [[op]] b([[not x]])\") into tExp<br/>            put merge(tExp &amp;&amp; \"is [[\" &amp; tExp &amp; \"]]\") &amp; cr after outcome<br/>        end repeat<br/>        put cr after outcome<br/>    end repeat<br/>    put outcome<br/>end mouseUp</pre>"}, {"lang": "Logo", "loc": 2, "block": "<pre class=\"text highlighted_source\">and [notequal?\u00a0:x 0] [1/:x &gt; 3]<br/>(or [:x &lt; 0] [:y &lt; 0] [sqrt\u00a0:x + sqrt\u00a0:y &lt;  3])</pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"Function a(i) called.\"</span><br/>    <span class=\"kw1\">return</span> i<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"Function b(i) called.\"</span><br/>    <span class=\"kw1\">return</span> i<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>i <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">and</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">or</span>  b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>i <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">and</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">or</span>  b<span class=\"br0\">(</span>i<span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 16, "block": "<pre class=\"text highlighted_source\">a\u00a0:= proc(bool)<br/>\tprintf(\"a is called-&gt;%s\\n\", bool):<br/>\treturn bool:<br/>end proc:<br/>b\u00a0:= proc(bool)<br/>\tprintf(\"b is called-&gt;%s\\n\", bool):<br/>\treturn bool:<br/>end proc:<br/>for i in [true, false] do<br/>\tfor j in [true, false] do<br/>\t\tprintf(\"calculating\tx\u00a0:= a(i) and b(j)\\n\"):<br/>\t\tx\u00a0:= a(i) and b(j):<br/>\t\tprintf(\"calculating\tx\u00a0:= a(i) or b(j)\\n\"):<br/>\t\ty\u00a0:= a(i) or  b(j):<br/>\tod:<br/>od:</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">a[in_]\u00a0:= (Print[\"a\"]; in)<br/>b[in_]\u00a0:= (Print[\"b\"]; in)<br/>\u00a0<br/>a[False] &amp;&amp; b[True]<br/>a[True] || b[False]</pre>"}, {"lang": "MATLAB / Octave", "loc": 11, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> x=a<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    printf<span class=\"br0\">(</span><span class=\"co2\">'a:\u00a0%i\\n'</span>,x<span class=\"br0\">)</span>;\t<br/>  <span class=\"kw1\">end</span>; <br/>  <span class=\"kw1\">function</span> x=b<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    printf<span class=\"br0\">(</span><span class=\"co2\">'b:\u00a0%i\\n'</span>,x<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span>; <br/>\u00a0<br/>  a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp;&amp; b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> &amp;&amp; b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> || b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> || b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Modula-2", "loc": 42, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> ShortCircuit;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> a<span class=\"br0\">(</span>v <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"    # Called function a(%b)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> v<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">RETURN</span> v<br/><span class=\"kw1\">END</span> a;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> b<span class=\"br0\">(</span>v <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"    # Called function b(%b)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> v<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">RETURN</span> v<br/><span class=\"kw1\">END</span> b;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">VAR</span> temp <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"a(%b) AND b(%b)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    temp <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span>;<br/>\u00a0<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"a(%b) OR b(%b)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    temp <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> b<span class=\"br0\">(</span>y<span class=\"br0\">)</span>;<br/>\u00a0<br/>    WriteLn;<br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Print<span class=\"br0\">(</span><span class=\"kw2\">FALSE</span><span class=\"sy0\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"kw2\">FALSE</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"kw2\">TRUE</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"kw2\">TRUE</span><span class=\"sy0\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>    ReadChar<br/><span class=\"kw1\">END</span> ShortCircuit.</pre>"}, {"lang": "MUMPS", "loc": 22, "block": "<pre class=\"text highlighted_source\">SSEVAL1(IN)<br/> WRITE\u00a0!,?10,$STACK($STACK,\"PLACE\")<br/> QUIT IN<br/>SSEVAL2(IN)<br/> WRITE\u00a0!,?10,$STACK($STACK,\"PLACE\")<br/> QUIT IN<br/>SSEVAL3<br/> NEW Z<br/> WRITE \"1 AND 1\"<br/> SET Z=$$SSEVAL1(1) SET:Z Z=Z&amp;$$SSEVAL2(1)<br/> WRITE\u00a0!,$SELECT(Z:\"TRUE\",1:\"FALSE\")<br/> WRITE\u00a0!!,\"0 AND 1\"<br/> SET Z=$$SSEVAL1(0) SET:Z Z=Z&amp;$$SSEVAL2(1)<br/> WRITE\u00a0!,$SELECT(Z:\"TRUE\",1:\"FALSE\")<br/> WRITE\u00a0!!,\"1 OR 1\"<br/> SET Z=$$SSEVAL1(1) SET:'Z Z=Z!$$SSEVAL2(1)<br/> WRITE\u00a0!,$SELECT(Z:\"TRUE\",1:\"FALSE\")<br/> WRITE\u00a0!!,\"0 OR 1\"<br/> SET Z=$$SSEVAL1(0) SET:'Z Z=Z!$$SSEVAL2(1)<br/> WRITE\u00a0!,$SELECT(Z:\"TRUE\",1:\"FALSE\")<br/> KILL Z<br/> QUIT</pre>"}, {"lang": "Nemerle", "loc": 31, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>\u00a0<br/>class ShortCircuit<br/>{<br/>    public static a(x\u00a0: bool)\u00a0: bool<br/>    {<br/>        WriteLine(\"a\");<br/>        x<br/>    }<br/>\u00a0<br/>    public static b(x\u00a0: bool)\u00a0: bool<br/>    {<br/>        WriteLine(\"b\");<br/>        x<br/>    }<br/>\u00a0<br/>    public static Main()\u00a0: void<br/>    {<br/>        def t = true;<br/>        def f = false;<br/>\u00a0<br/>        WriteLine(\"True  &amp;&amp; True\u00a0: {0}\", a(t) &amp;&amp; b(t));<br/>        WriteLine(\"True  &amp;&amp; False: {0}\", a(t) &amp;&amp; b(f));<br/>        WriteLine(\"False &amp;&amp; True\u00a0: {0}\", a(f) &amp;&amp; b(t));<br/>        WriteLine(\"False &amp;&amp; False: {0}\", a(f) &amp;&amp; b(f));<br/>        WriteLine(\"True  || True\u00a0: {0}\", a(t) || b(t)); <br/>        WriteLine(\"True  || False: {0}\", a(t) || b(f));<br/>        WriteLine(\"False || True\u00a0: {0}\", a(f) || b(t));<br/>        WriteLine(\"False || False: {0}\", a(f) || b(f));   <br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 30, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Version</span> v<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Version='</span>v<br/>\u00a0<br/><span class=\"kw1\">If</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'a and b are true'</span><br/><span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'Surprise'</span><br/><span class=\"kw3\">Else</span>               <span class=\"kw1\">Say</span> <span class=\"st0\">'ok'</span><br/>\u00a0<br/><span class=\"kw1\">If</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span>,  b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'a is true'</span><br/><span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'Surprise'</span><br/><span class=\"kw3\">Else</span>              <span class=\"kw1\">Say</span> <span class=\"st0\">'ok: \\\\a() is false'</span><br/>\u00a0<br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'Surprise'</span><br/>  <span class=\"kw3\">Otherwise</span>           <span class=\"kw1\">Say</span> <span class=\"st0\">'ok: \\\\a() is false (Select)'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>method a <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  state = Boolean.<span class=\"me0\">TRUE</span>.<span class=\"me0\">booleanValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'--a returns'</span> state<br/>  <span class=\"kw1\">Return</span> state<br/>\u00a0<br/>method b <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  state = Boolean.<span class=\"me0\">TRUE</span>.<span class=\"me0\">booleanValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'--b returns'</span> state<br/>  <span class=\"kw1\">Return</span> state<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">proc a(x): bool =<br/>  echo \"a called\"<br/>  result = x<br/>proc b(x): bool =<br/>  echo \"b called\"<br/>  result = x<br/>\u00a0<br/>let x = a(false) and b(true) # echoes \"a called\"<br/>\u00a0<br/>let y = a(true) or b(true) # echoes \"a called\"</pre>"}, {"lang": "Objeck", "loc": 33, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> ShortCircuit <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> a<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Bool</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"a\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> b<span class=\"br0\">(</span>b <span class=\"sy0\">:</span> <span class=\"kw2\">Bool</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"b\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> b<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"F and F = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"F or F = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> b<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"F and T = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"F or T = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> b<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"T and F = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"kw3\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"T or F = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> b<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"T and T = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result <span class=\"sy0\">:=</span> a<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"T or T = {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 24, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> a r <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\" &gt; function a called\"</span><span class=\"sy0\">;</span> r<br/><span class=\"kw1\">let</span> b r <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\" &gt; function b called\"</span><span class=\"sy0\">;</span> r<br/>\u00a0<br/><span class=\"kw1\">let</span> test_and b1 b2 <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"# testing (%b &amp;&amp;\u00a0%b)\\n\"</span> b1 b2<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span>a b1 <span class=\"sy0\">&amp;&amp;</span> b b2<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> test_or b1 b2 <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"# testing (%b ||\u00a0%b)\\n\"</span> b1 b2<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span>a b1 <span class=\"sy0\">||</span> b b2<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> test_this test <span class=\"sy0\">=</span><br/>  test <span class=\"kw1\">true</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>  test <span class=\"kw1\">true</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>  test <span class=\"kw1\">false</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>  test <span class=\"kw1\">false</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"==== Testing and ====\"</span><span class=\"sy0\">;</span><br/>  test_this test_and<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"==== Testing or ====\"</span><span class=\"sy0\">;</span><br/>  test_this test_or<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 16, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">Parse</span> <span class=\"kw2\">Version</span> v<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Version='</span>v<br/><span class=\"kw1\">If</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'a and b are true'</span><br/><span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span>  <span class=\"st0\">'Surprise'</span><br/>              <span class=\"kw3\">Else</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'ok'</span><br/><span class=\"kw1\">If</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'a is true'</span><br/><span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span>  <span class=\"st0\">'Surprise'</span><br/>             <span class=\"kw3\">Else</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'ok: \\a() is false'</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">'Surprise'</span><br/>  <span class=\"kw3\">Otherwise</span>           <span class=\"kw1\">Say</span> <span class=\"st0\">'ok: \\a() is false (Select)'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>a: <span class=\"kw1\">Say</span> <span class=\"st0\">'a returns .true'</span>; <span class=\"kw1\">Return</span> <span class=\"sy0\">.</span>true<br/>b: <span class=\"kw1\">Say</span> <span class=\"st0\">'b returns 1'</span>; <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 25, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">A</span> Answer<span class=\"br0\">}</span><br/>     AnswerS = <span class=\"br0\">{</span>Value<span class=\"sy0\">.</span>toVirtualString Answer 1 1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\" \u00a0% Called function {A \"</span><span class=\"sy0\">#</span>AnswerS<span class=\"sy0\">#</span><span class=\"st0\">\"} -&gt; \"</span><span class=\"sy0\">#</span>AnswerS<span class=\"br0\">}</span><br/>     Answer<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">B</span> Answer<span class=\"br0\">}</span><br/>     AnswerS = <span class=\"br0\">{</span>Value<span class=\"sy0\">.</span>toVirtualString Answer 1 1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\" \u00a0% Called function {B \"</span><span class=\"sy0\">#</span>AnswerS<span class=\"sy0\">#</span><span class=\"st0\">\"} -&gt; \"</span><span class=\"sy0\">#</span>AnswerS<span class=\"br0\">}</span><br/>     Answer<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw1\">false</span> <span class=\"kw1\">true</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">for</span> J <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw1\">false</span> <span class=\"kw1\">true</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        X Y<br/>     <span class=\"kw1\">in</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"<span class=\"es0\">\\n</span>Calculating: X = {A I} andthen {B J}\"</span><span class=\"br0\">}</span><br/>        X = <span class=\"br0\">{</span>A I<span class=\"br0\">}</span> <span class=\"kw1\">andthen</span> <span class=\"br0\">{</span>B J<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Calculating: Y = {A I} orelse {B J}\"</span><span class=\"br0\">}</span><br/>        Y = <span class=\"br0\">{</span>A I<span class=\"br0\">}</span> <span class=\"kw1\">orelse</span> <span class=\"br0\">{</span>B J<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span>a<span class=\"st0\">\"(\"</span>n<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  a<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"b(\"</span>n<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>or<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  a<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>and<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  a<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 41, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> shortcircuit<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> a<span class=\"br0\">(</span>value<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'a('</span><span class=\"sy1\">,</span> value<span class=\"sy1\">,</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> b<span class=\"br0\">(</span>value<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'b('</span><span class=\"sy1\">,</span> value<span class=\"sy1\">,</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> scandor<span class=\"br0\">(</span>value1<span class=\"sy1\">,</span> value2<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  result<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"coMULTI\">{and}</span><br/>  <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>value1<span class=\"br0\">)</span><br/>   <span class=\"kw1\">then</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"br0\">(</span>value2<span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>value1<span class=\"sy1\">,</span> <span class=\"st0\">' and '</span><span class=\"sy1\">,</span> value2<span class=\"sy1\">,</span> <span class=\"st0\">' = '</span><span class=\"sy1\">,</span> result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{or}</span><br/>  <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>value1<span class=\"br0\">)</span><br/>   <span class=\"kw1\">then</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>   <span class=\"kw1\">else</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"br0\">(</span>value2<span class=\"br0\">)</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>value1<span class=\"sy1\">,</span> <span class=\"st0\">' or '</span><span class=\"sy1\">,</span> value2<span class=\"sy1\">,</span> <span class=\"st0\">' = '</span><span class=\"sy1\">,</span> result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> scandor<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> scandor<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> scandor<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> scandor<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> a <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'A'</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> b <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'B'</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test-driver</span><br/><span class=\"kw2\">sub</span> test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$op</span> <span class=\"br0\">(</span><span class=\"st_h\">'&amp;&amp;'</span><span class=\"sy0\">,</span><span class=\"st_h\">'||'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co2\">/(.),(.)/</span><span class=\"sy0\">;</span><br/>           <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"a($x) $op b($y)\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">': '</span><span class=\"sy0\">;</span><br/>           <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span>    <br/>\u00a0<br/><span class=\"co1\"># Test and display</span><br/>test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> a <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">;</span> <span class=\"re0\">$p</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> b <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st_h\">'b'</span><span class=\"sy0\">;</span> <span class=\"re0\">$p</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">X</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$q</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"st_h\">'&amp;&amp;'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'||'</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$op</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"a($p) $op b($q)\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"$s: \"</span><span class=\"sy0\">;</span><br/>        EVAL <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function a(integer i)<br/>    printf(1,\"a \")<br/>    return i<br/>end function<br/>\u00a0<br/>function b(integer i)<br/>    printf(1,\"b \")<br/>    return i<br/>end function<br/>\u00a0<br/>for z=0 to 1 do<br/>    for i=0 to 1 do<br/>        for j=0 to 1 do<br/>            if z then<br/>                printf(1,\"a(%d) and b(%d) \",{i,j})<br/>                printf(1,\" =&gt;\u00a0%d\\n\",a(i) and b(j))<br/>            else<br/>                printf(1,\"a(%d) or b(%d) \",{i,j})<br/>                printf(1,\" =&gt;\u00a0%d\\n\",a(i) or b(j))<br/>            end if<br/>        end for<br/>    end for<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 14, "block": "<pre class=\"text highlighted_source\">(de a (F)<br/>   (msg 'a)<br/>   F )<br/>\u00a0<br/>(de b (F)<br/>   (msg 'b)<br/>   F )<br/>\u00a0<br/>(mapc<br/>   '((I J)<br/>      (for Op '(and or)<br/>         (println I Op J '-&gt; (Op (a I) (b J))) ) )<br/>   '(NIL NIL T T)<br/>   '(NIL T NIL T) )</pre>"}, {"lang": "Pike", "loc": 20, "block": "<pre class=\"pike highlighted_source\">int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span>int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\" a<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> b<span class=\"br0\">(</span>int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\" b<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> false, false <span class=\"br0\">}</span><span class=\"br0\">)</span>,  <span class=\"br0\">(</span><span class=\"br0\">{</span> false, true <span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span> true, true <span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span> true, false <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span> array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d &amp;&amp;\u00a0%d<span class=\"es0\">\\n</span>\"</span>, @args<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    a<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d ||\u00a0%d<span class=\"es0\">\\n</span>\"</span>, @args<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    a<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> b<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 35, "block": "<pre class=\"pli highlighted_source\">short_circuit_evaluation<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>true <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> false <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>a<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>bv<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> bv <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">'Procedure '</span> <span class=\"sy0\">||</span> <span class=\"kw1\">procedurename</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">' called.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>bv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> a<span class=\"sy0\">;</span><br/>b<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>bv<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> bv <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"br0\">(</span><span class=\"st0\">'Procedure '</span> <span class=\"sy0\">||</span> <span class=\"kw1\">procedurename</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">' called.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>bv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> b<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> true<span class=\"sy0\">,</span> false<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> true<span class=\"sy0\">,</span> false<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Evaluating x with &lt;a&gt; with '</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">||</span> <span class=\"st0\">' and &lt;b&gt; with '</span> <span class=\"sy0\">||</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            x <span class=\"sy0\">=</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">else</span><br/>             x <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">data</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Evaluating y with &lt;a&gt; with '</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">||</span> <span class=\"st0\">' and &lt;b&gt; with '</span> <span class=\"sy0\">||</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            y <span class=\"sy0\">=</span> true<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">else</span><br/>            y <span class=\"sy0\">=</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">data</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> short_circuit_evaluation<span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 33, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">#  Simulated fast function</span><br/><span class=\"kw3\">function</span> a <span class=\"br0\">(</span> <span class=\"br0\">[</span>boolean<span class=\"br0\">]</span><span class=\"re0\">$J</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$J</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Simulated slow function</span><br/><span class=\"kw3\">function</span> b <span class=\"br0\">(</span> <span class=\"br0\">[</span>boolean<span class=\"br0\">]</span><span class=\"re0\">$J</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">Sleep</span> <span class=\"kw5\">-Seconds</span> <span class=\"nu0\">2</span>; <span class=\"kw3\">return</span> <span class=\"re0\">$J</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  These all short-circuit and do not evaluate the right hand function</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#  Measure of execution time</span><br/><span class=\"kw1\">Measure-Command</span> <span class=\"br0\">{</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> TotalMilliseconds<br/>\u00a0<br/><span class=\"co1\">#  These all appropriately do evaluate the right hand function</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#  Measure of execution time</span><br/><span class=\"kw1\">Measure-Command</span> <span class=\"br0\">{</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$False</span> <span class=\"br0\">)</span> <span class=\"kw4\">-or</span>  <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$False</span> <span class=\"br0\">)</span><br/><span class=\"br0\">(</span> a <span class=\"re0\">$True</span>  <span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span> b <span class=\"re0\">$True</span>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> TotalMilliseconds</pre>"}, {"lang": "Prolog", "loc": 26, "block": "<pre class=\"prolog highlighted_source\">short_circuit <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   a_or_b<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_or_b<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> false<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt;  true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_or_b<span class=\"br0\">(</span>false<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_or_b<span class=\"br0\">(</span>false<span class=\"sy4\">,</span> false<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_and_b<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_and_b<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> false<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt;  true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_and_b<span class=\"br0\">(</span>false<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt;  true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a_and_b<span class=\"br0\">(</span>false<span class=\"sy4\">,</span> false<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt;  true'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> writeln<span class=\"br0\">(</span><span class=\"st_h\">'==&gt; false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>a_and_b<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'a(~w) and b(~w)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> b<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>a_or_b<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'a(~w) or b(~w)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   a<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">;</span> b<span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>a<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'a(~w)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX<span class=\"sy4\">.</span><br/>\u00a0<br/>b<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'b(~w)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX<span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> a<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"  # Called function a(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> arg<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> b<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"  # Called function b(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> arg<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> a<span class=\"sy0\">=</span>#False <span class=\"kw1\">To</span> #True<br/>  <span class=\"kw1\">For</span> b<span class=\"sy0\">=</span>#False <span class=\"kw1\">To</span> #True<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Calculating: x = a(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\") And b(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    x<span class=\"sy0\">=</span> a<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">And</span> b<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Calculating: x = a(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\") Or b(\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    y<span class=\"sy0\">=</span> a<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">Or</span> b<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 40, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> a<span class=\"br0\">(</span>answer<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  # Called function a(%r) -&gt;\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> answer<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> b<span class=\"br0\">(</span>answer<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  # Called function b(%r) -&gt;\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> answer<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Calculating: x = a(i) and b(j)\"</span><span class=\"br0\">)</span><br/>\t\tx <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Calculating: y = a(i) or  b(j)\"</span><span class=\"br0\">)</span><br/>\t\ty <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>Calculating: x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(False) -&gt; False</span><br/>Calculating: y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(False) -&gt; False</span><br/>  <span class=\"co1\"># Called function b(False) -&gt; False</span><br/>\u00a0<br/>Calculating: x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(False) -&gt; False</span><br/>Calculating: y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(False) -&gt; False</span><br/>  <span class=\"co1\"># Called function b(True) -&gt; True</span><br/>\u00a0<br/>Calculating: x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(True) -&gt; True</span><br/>  <span class=\"co1\"># Called function b(False) -&gt; False</span><br/>Calculating: y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(True) -&gt; True</span><br/>\u00a0<br/>Calculating: x <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">and</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(True) -&gt; True</span><br/>  <span class=\"co1\"># Called function b(True) -&gt; True</span><br/>Calculating: y <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">or</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Called function a(True) -&gt; True</span></pre>"}, {"lang": "R", "loc": 9, "block": "<pre class=\"text highlighted_source\">a &lt;- function(x) {cat(\"a called\\n\"); x}<br/>b &lt;- function(x) {cat(\"b called\\n\"); x}<br/>\u00a0<br/>tests &lt;- expand.grid(op=list(quote(`||`), quote(`&amp;&amp;`)), x=c(1,0), y=c(1,0))<br/>\u00a0<br/>invisible(apply(tests, 1, function(row) {<br/>  call &lt;- substitute(op(a(x),b(y)), row)<br/>  cat(deparse(call), \"-&gt;\", eval(call), \"\\n\\n\")<br/>}))</pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (a x)<br/>  (display (~a \"a:\" x \" \"))<br/>  x)<br/>\u00a0<br/>(define (b x)<br/>  (display (~a \"b:\" x \" \"))<br/>  x)<br/>\u00a0<br/>(for* ([x '(#t #f)]<br/>       [y '(#t #f)])<br/>  (displayln `(and (a ,x) (b ,y)))<br/>  (and (a x) (b y)) <br/>  (newline)<br/>\u00a0<br/>  (displayln `(or (a ,x) (b ,y)))<br/>  (or (a x) (b y))<br/>  (newline))</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX programs demonstrates short-circuit evaluation testing  (in an   IF   statement).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional arguments from he CL.*/</span><br/><span class=\"kw1\">if</span> LO==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> LO==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> LO= -<span class=\"nu0\">2</span>                 <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> HI==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> HI==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> HI=  <span class=\"nu0\">2</span>                 <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI                          <span class=\"coMULTI\">/*process from the  low  to  the  high.*/</span><br/>         x=a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"sy0\">&amp;</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*compute  function A  and  function B */</span><br/>         y=a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"sy0\">|</span>  b<span class=\"br0\">(</span>j<span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*   \"         \"    \"   or      \"    \" */</span><br/>         <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>y  <span class=\"kw3\">then</span> y=b<span class=\"br0\">(</span>j<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*   \"         \"    B   (for negation).*/</span><br/>         <span class=\"kw1\">say</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>        <span class=\"st0\">'  x='</span> <span class=\"sy0\">||</span> x            <span class=\"st0\">'  y='</span>y                <span class=\"st0\">'  j='</span>j<br/>         <span class=\"kw1\">say</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>a: <span class=\"kw1\">say</span> <span class=\"st0\">'      A  entered with:'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*1=odd, 0=even  */</span><br/>b: <span class=\"kw1\">say</span> <span class=\"st0\">'      B  entered with:'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>          <span class=\"coMULTI\">/*1=neg, 0=if not*/</span></pre>"}, {"lang": "Ring", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Short-circuit evaluation<br/>\u00a0<br/>for k = 1 to 2<br/>      word = [\"AND\",\"OR\"]<br/>      see \"========= \" + word[k] + \" ==============\" + nl<br/>      for i = 0 to 1<br/>           for j = 0 to 1<br/>                see \"a(\" + i + \") \" + word[k] +\" b(\" + j + \")\" + nl<br/>                res =a(i)    <br/>                if word[k] = \"AND\" and res\u00a0!= 0<br/>                   res = b(j)<br/>                ok<br/>                if word[k] = \"OR\"  and res = 0 <br/>                   res = b(j)<br/>                ok<br/>           next<br/>      next<br/>next<br/>\u00a0<br/>func a(t)<br/>        see char(9) + \"calls func a\" + nl<br/>        a = t<br/>        return a<br/>\u00a0<br/>func b(t)<br/>        see char(9) + \"calls func b\" + nl<br/>        b = t<br/>        return b<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> a<span class=\"br0\">(</span> bool <span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"a( #{bool} ) called\"</span><br/>  bool<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> b<span class=\"br0\">(</span> bool <span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"b( #{bool} ) called\"</span><br/>  bool<br/><span class=\"kw1\">end</span><br/>\u00a0<br/> <span class=\"br0\">[</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a_val<span class=\"sy0\">|</span><br/>   <span class=\"br0\">[</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>b_val<span class=\"sy0\">|</span><br/>     <span class=\"kw3\">puts</span> <span class=\"st0\">\"a( #{a_val} ) and b( #{b_val} ) is #{a( a_val ) and b( b_val )}.\"</span><br/>     <span class=\"kw3\">puts</span><br/>     <span class=\"kw3\">puts</span> <span class=\"st0\">\"a( #{a_val} ) or b( #{b_val} ) is #{a( a_val)  or b( b_val )}.\"</span><br/>     <span class=\"kw3\">puts</span><br/>   <span class=\"kw1\">end</span><br/> <span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">for k = 1 to 2<br/>ao$ = word$(\"AND,OR\",k,\",\")<br/>print \"========= \";ao$;\" ==============\"<br/>for i = 0 to 1<br/>    for j = 0 to 1<br/>        print \"a(\"; i; \") \";ao$;\" b(\"; j; \")\"<br/>        res =a(i)    'call always<br/>'print res;\"&lt;====\"<br/>if ao$ = \"AND\" and res &lt;&gt; 0 then res = b(j)<br/>if ao$ = \"OR\"  and res =  0 then res = b(j)<br/>    next<br/>next<br/>next k<br/>end <br/>\u00a0<br/>function a( t)<br/>    print chr$(9);\"calls func a\"<br/>    a = t<br/>end function<br/>\u00a0<br/>function b( t)<br/>    print chr$(9);\"calls func b\"<br/>    b = t<br/>end function</pre>"}, {"lang": "Rust", "loc": 19, "block": "<pre class=\"text highlighted_source\">fn a(foo: bool) -&gt; bool {<br/>    println!(\"a\");<br/>    foo<br/>}<br/>\u00a0<br/>fn b(foo: bool) -&gt; bool {<br/>    println!(\"b\");<br/>    foo<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in vec![true, false] {<br/>        for j in vec![true, false] {<br/>            println!(\"{} and {} == {}\", i, j, a(i) &amp;&amp; b(j));<br/>            println!(\"{} or {} == {}\", i, j, a(i) || b(j));<br/>            println!();<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Sather", "loc": 26, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  a(v:BOOL):BOOL is <br/>    #OUT + \"executing a\\n\";<br/>    return v; <br/>  end;<br/>  b(v:BOOL):BOOL is<br/>    #OUT + \"executing b\\n\";<br/>    return v;<br/>  end;<br/>\u00a0<br/>  main is<br/>    x:BOOL;<br/>\u00a0<br/>    x\u00a0:= a(false) and b(true);<br/>    #OUT + \"F and T = \" + x + \"\\n\\n\";<br/>\u00a0<br/>    x\u00a0:= a(true) or b(true);<br/>    #OUT + \"T or T = \" + x + \"\\n\\n\";<br/>\u00a0<br/>    x\u00a0:= a(true) and b(false);<br/>    #OUT + \"T and T = \" + x + \"\\n\\n\";<br/>\u00a0<br/>    x\u00a0:= a(false) or b(true);<br/>    #OUT + \"F or T = \" + x + \"\\n\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ShortCircuit <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> a<span class=\"br0\">(</span>b<span class=\"sy0\">:</span>Boolean<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span>print<span class=\"br0\">(</span><span class=\"st0\">\"Called A=%5b\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>b<span class=\"br0\">}</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> b<span class=\"br0\">(</span>b<span class=\"sy0\">:</span>Boolean<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span>print<span class=\"br0\">(</span><span class=\"st0\">\" -&gt; B=%5b\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>b<span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> boolVals<span class=\"sy0\">=</span>List<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>,<a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>aa<span class=\"sy0\">&lt;</span>-boolVals<span class=\"sy0\">;</span> bb<span class=\"sy0\">&lt;</span>-boolVals<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Testing A=%5b AND B=%5b   -&gt; \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>aa, bb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         a<span class=\"br0\">(</span>aa<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span>bb<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>aa<span class=\"sy0\">&lt;</span>-boolVals<span class=\"sy0\">;</span> bb<span class=\"sy0\">&lt;</span>-boolVals<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Testing A=%5b  OR B=%5b   -&gt; \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>aa, bb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         a<span class=\"br0\">(</span>aa<span class=\"br0\">)</span> || b<span class=\"br0\">(</span>bb<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      println<br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 35, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>a x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"a<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   x<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>b x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"b<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   x<span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">display</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" and \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>a i<span class=\"br0\">)</span> <span class=\"br0\">(</span>b j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">display</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" or \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>a i<span class=\"br0\">)</span> <span class=\"br0\">(</span>b j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span> '<span class=\"br0\">(</span>#t #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> '<span class=\"br0\">(</span>#t #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>#t <span class=\"kw1\">and</span> #t<br/>a<br/>b<br/>#t <span class=\"kw1\">or</span> #t<br/>a<br/>#t <span class=\"kw1\">and</span> #f<br/>a<br/>b<br/>#t <span class=\"kw1\">or</span> #f<br/>a<br/>#f <span class=\"kw1\">and</span> #t<br/>a<br/>#f <span class=\"kw1\">or</span> #t<br/>a<br/>b<br/>#f <span class=\"kw1\">and</span> #f<br/>a<br/>#f <span class=\"kw1\">or</span> #f<br/>a<br/>b<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: a (in boolean: aBool) is func<br/>  result<br/>    var boolean: result is FALSE;<br/>  begin<br/>    writeln(\"a\");<br/>    result\u00a0:= aBool;<br/>  end func;<br/>\u00a0<br/>const func boolean: b (in boolean: aBool) is func<br/>  result<br/>    var boolean: result is FALSE;<br/>  begin<br/>    writeln(\"b\");<br/>    result\u00a0:= aBool;<br/>  end func;<br/>\u00a0<br/>const proc: test (in boolean: param1, in boolean: param2) is func<br/>  begin<br/>    writeln(param1 &lt;&amp; \" and \" &lt;&amp; param2 &lt;&amp; \" = \" &lt;&amp; a(param1) and b(param2));<br/>    writeln(param1 &lt;&amp; \" or \" &lt;&amp; param2 &lt;&amp; \" = \" &lt;&amp; a(param1) or b(param2));<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    test(FALSE, FALSE);<br/>    test(FALSE, TRUE);<br/>    test(TRUE, FALSE);<br/>    test(TRUE, TRUE);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func a<span class=\"br0\">(</span>bool<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st0\">'A'</span>; <span class=\"kw2\">return</span> bool <span class=\"br0\">}</span><br/>func b<span class=\"br0\">(</span>bool<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st0\">'B'</span>; <span class=\"kw2\">return</span> bool <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test-driver</span><br/>func test<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> op <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">'&amp;&amp;'</span>, <span class=\"st0\">'||'</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> x,y <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"a(%s)\u00a0%s b(%s): \"</span>.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>x, op, y<span class=\"br0\">)</span><br/>            <span class=\"kw3\">eval</span> <span class=\"st0\">\"a(Bool(x)) #{op} b(Bool(y))\"</span><br/>            <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test and display</span><br/>test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Simula", "loc": 53, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    BOOLEAN PROCEDURE A(BOOL); BOOLEAN BOOL;<br/>    BEGIN OUTCHAR('A'); A\u00a0:= BOOL;<br/>    END A;<br/>\u00a0<br/>    BOOLEAN PROCEDURE B(BOOL); BOOLEAN BOOL;<br/>    BEGIN OUTCHAR('B'); B\u00a0:= BOOL;<br/>    END B;<br/>\u00a0<br/>    PROCEDURE OUTBOOL(BOOL); BOOLEAN BOOL;<br/>        OUTCHAR(IF BOOL THEN 'T' ELSE 'F');<br/>\u00a0<br/>    PROCEDURE TEST;<br/>    BEGIN<br/>        PROCEDURE ANDTEST;<br/>        BEGIN<br/>            BOOLEAN X, Y, Z;<br/>            FOR X\u00a0:= TRUE, FALSE DO<br/>                FOR Y\u00a0:= TRUE, FALSE DO<br/>                BEGIN<br/>                    OUTTEXT(\"A(\"); OUTBOOL(X);<br/>                    OUTTEXT(\") AND \");<br/>                    OUTTEXT(\"B(\"); OUTBOOL(Y);<br/>                    OUTTEXT(\"): \");<br/>                    Z\u00a0:= A(X) AND THEN B(Y);<br/>                    OUTIMAGE;<br/>                END;<br/>        END ANDTEST;<br/>\u00a0<br/>        PROCEDURE ORTEST;<br/>        BEGIN<br/>            BOOLEAN X, Y, Z;<br/>            FOR X\u00a0:= TRUE, FALSE DO<br/>                FOR Y\u00a0:= TRUE, FALSE DO<br/>                BEGIN<br/>                    OUTTEXT(\"A(\"); OUTBOOL(X);<br/>                    OUTTEXT(\") OR \");<br/>                    OUTTEXT(\"B(\"); OUTBOOL(Y);<br/>                    OUTTEXT(\"): \");<br/>                    Z\u00a0:= A(X) OR ELSE B(Y);<br/>                    OUTIMAGE;<br/>                END;<br/>        END ORTEST;<br/>\u00a0<br/>        ANDTEST;<br/>        ORTEST;<br/>\u00a0<br/>    END TEST;<br/>\u00a0<br/>    TEST;<br/>END.<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 21, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Smalltalk</span> at: <span class=\"re1\">#a</span> put: <span class=\"kw1\">nil</span>.<br/><span class=\"re0\">Smalltalk</span> at: <span class=\"re1\">#b</span> put: <span class=\"kw1\">nil</span>.<br/>\u00a0<br/><span class=\"re5\">a</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">x</span>| <span class=\"st0\">'executing a'</span> displayNl. <span class=\"re5\">x</span><span class=\"br0\">]</span>.<br/><span class=\"re5\">b</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">x</span>| <span class=\"st0\">'executing b'</span> displayNl. <span class=\"re5\">x</span><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"st0\">'false and false =\u00a0%1'</span>\u00a0% <br/>  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> value: <span class=\"kw1\">false</span><span class=\"br0\">)</span> and: <span class=\"br0\">[</span> <span class=\"re5\">b</span> value: <span class=\"kw1\">false</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    displayNl.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"st0\">'true or false =\u00a0%1'</span>\u00a0% <br/>  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> value: <span class=\"kw1\">true</span><span class=\"br0\">)</span> or: <span class=\"br0\">[</span> <span class=\"re5\">b</span> value: <span class=\"kw1\">false</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    displayNl.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"st0\">'false or true =\u00a0%1'</span>\u00a0% <br/>  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> value: <span class=\"kw1\">false</span><span class=\"br0\">)</span> or: <span class=\"br0\">[</span> <span class=\"re5\">b</span> value: <span class=\"kw1\">true</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    displayNl.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"st0\">'true and false =\u00a0%1'</span>\u00a0% <br/>  <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> value: <span class=\"kw1\">true</span><span class=\"br0\">)</span> and: <span class=\"br0\">[</span> <span class=\"re5\">b</span> value: <span class=\"kw1\">false</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    displayNl.</pre>"}, {"lang": "SNOBOL4", "loc": 26, "block": "<pre class=\"text highlighted_source\">        define('a(val)')\u00a0:(a_end)<br/>a       out = 'A '<br/>        eq(val,1)\u00a0:s(return)f(freturn)<br/>a_end<br/>\u00a0<br/>        define('b(val)')\u00a0:(b_end)<br/>b       out = 'B '<br/>        eq(val,1)\u00a0:s(return)f(freturn)<br/>b_end<br/>\u00a0<br/>*       # Test and display<br/>        &amp;fullscan = 1<br/>        output(.out,1,'-[-r1]')\u00a0;* Macro Spitbol<br/>*       output(.out,1,'B','-') \u00a0;* CSnobol <br/>        define('nl()'):(nlx);nl output =\u00a0:(return);nlx<br/>\u00a0<br/>        out = 'T and T: '; null\u00a0? *a(1) *b(1); nl()<br/>        out = 'T and F: '; null\u00a0? *a(1) *b(0); nl() <br/>        out = 'F and T: '; null\u00a0? *a(0) *b(1); nl() <br/>        out = 'F and F: '; null\u00a0? *a(0) *b(0); nl() <br/>        output = <br/>        out = 'T or T: '; null\u00a0? *a(1) | *b(1); nl() <br/>        out = 'T or F: '; null\u00a0? *a(1) | *b(0); nl() <br/>        out = 'F or T: '; null\u00a0? *a(0) | *b(1); nl() <br/>        out = 'F or F: '; null\u00a0? *a(0) | *b(0); nl() <br/>end</pre>"}, {"lang": "Standard ML", "loc": 22, "block": "<pre class=\"text highlighted_source\">fun a r = ( print \" &gt; function a called\\n\"; r )<br/>fun b r = ( print \" &gt; function b called\\n\"; r )<br/>\u00a0<br/>fun test_and b1 b2 = (<br/>  print (\"# testing (\" ^ Bool.toString b1 ^ \" andalso \" ^ Bool.toString b2 ^ \")\\n\");<br/>  ignore (a b1 andalso b b2) )<br/>\u00a0<br/>fun test_or b1 b2 = (<br/>  print (\"# testing (\" ^ Bool.toString b1 ^ \" orelse \" ^ Bool.toString b2 ^ \")\\n\");<br/>  ignore (a b1 orelse b b2) )<br/>\u00a0<br/>fun test_this test = (<br/>  test true true;<br/>  test true false;<br/>  test false true;<br/>  test false false )<br/>;<br/>\u00a0<br/>print \"==== Testing and ====\\n\";<br/>test_this test_and;<br/>print \"==== Testing or ====\\n\";<br/>test_this test_or;</pre>"}, {"lang": "Stata", "loc": 24, "block": "<pre class=\"text highlighted_source\">function a(x) {<br/>\tprintf(\" a\")<br/>\treturn(x)<br/>}<br/>\u00a0<br/>function b(x) {<br/>\tprintf(\" b\")<br/>\treturn(x)<br/>}<br/>\u00a0<br/>function call(i, j) {<br/>\tprintf(\"and:\")<br/>\tx = a(i)<br/>\tif (x) {<br/>\t\tx = b(j)<br/>\t}<br/>\tprintf(\"\\nor:\")<br/>\ty = a(i)<br/>\tif (!y) {<br/>\t\ty = b(j)<br/>\t}<br/>\tprintf(\"\\n\")<br/>\treturn((x,y))<br/>}</pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">func a(v: Bool) -&gt; Bool {<br/>  print(\"a\")<br/>  return v<br/>}<br/>\u00a0<br/>func b(v: Bool) -&gt; Bool {<br/>  print(\"b\")<br/>  return v<br/>}<br/>\u00a0<br/>func test(i: Bool, j: Bool) {<br/>  println(\"Testing a(\\(i)) &amp;&amp; b(\\(j))\")<br/>  print(\"Trace:  \")<br/>  println(\"\\nResult: \\(a(i) &amp;&amp; b(j))\")<br/>\u00a0<br/>  println(\"Testing a(\\(i)) || b(\\(j))\")<br/>  print(\"Trace:  \")<br/>  println(\"\\nResult: \\(a(i) || b(j))\")<br/>\u00a0<br/>  println()<br/>}<br/>\u00a0<br/>test(false, false)<br/>test(false, true)<br/>test(true, false)<br/>test(true, true)</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">a</span> boolean <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"a($boolean) called\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$boolean</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">b</span> boolean <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"b($boolean) called\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$boolean</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> i <span class=\"br0\">{</span>false true<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> j <span class=\"br0\">{</span>false true<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>a<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"x = a($i) &amp;&amp; b($j) = $x\"</span><br/>        <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>a<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> || b<span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"y = a($i) || b($j) = $y\"</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># Blank line for clarity</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 35, "block": "<pre class=\"text highlighted_source\">@(define a (x out))<br/>@  (output)<br/>  a (@x) called<br/>@  (end)<br/>@  (bind out x)<br/>@(end)<br/>@(define b (x out))<br/>@  (output)<br/>  b (@x) called<br/>@  (end)<br/>@  (bind out x)<br/>@(end)<br/>@(define short_circuit_demo (i j))<br/>@  (output)<br/>a(@i) and b(@j):<br/>@  (end)<br/>@  (maybe)<br/>@    (a i \"1\")<br/>@    (b j \"1\")<br/>@  (end)<br/>@  (output)<br/>a(@i) or b(@j):<br/>@  (end)<br/>@  (cases)<br/>@    (a i \"1\")<br/>@  (or)<br/>@    (b j \"1\")<br/>@  (or)<br/>@    (accept)<br/>@  (end)<br/>@(end)<br/>@(short_circuit_demo \"0\" \"0\")<br/>@(short_circuit_demo \"0\" \"1\")<br/>@(short_circuit_demo \"1\" \"0\")<br/>@(short_circuit_demo \"1\" \"1\")</pre>"}, {"lang": "UNIX Shell", "loc": 19, "block": "<pre class=\"bash highlighted_source\">a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"Called a $1\"</span><br/>\t<span class=\"st0\">\"$1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"Called b $1\"</span><br/>\t<span class=\"st0\">\"$1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">false</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">false</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span><br/>\t\ta <span class=\"re1\">$i</span> <span class=\"sy0\">&amp;&amp;</span> b <span class=\"re1\">$j</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">x</span>=<span class=\"kw2\">true</span> <span class=\"sy0\">||</span> <span class=\"re2\">x</span>=<span class=\"kw2\">false</span><br/>\t\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"  <span class=\"es2\">$i</span> &amp;&amp; <span class=\"es2\">$j</span> is <span class=\"es2\">$x</span>\"</span><br/>\u00a0<br/>\t\ta <span class=\"re1\">$i</span> <span class=\"sy0\">||</span> b <span class=\"re1\">$j</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">y</span>=<span class=\"kw2\">true</span> <span class=\"sy0\">||</span> <span class=\"re2\">y</span>=<span class=\"kw2\">false</span><br/>\t\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"  <span class=\"es2\">$i</span> || <span class=\"es2\">$j</span> is <span class=\"es2\">$y</span>\"</span><br/>\t<span class=\"kw1\">done</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Visual FoxPro", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>*!* Visual FoxPro natively supports short circuit evaluation<br/>CLEAR<br/>CREATE CURSOR funceval(arg1 L, arg2 L, operation V(3), result L, calls V(10))<br/>*!* Conjunction<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.F., .F., \"AND\")<br/>REPLACE result WITH (a(arg1) AND b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.F., .T., \"AND\")<br/>REPLACE result WITH (a(arg1) AND b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.T., .F., \"AND\")<br/>REPLACE result WITH (a(arg1) AND b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.T., .T., \"AND\")<br/>REPLACE result WITH (a(arg1) AND b(arg2))<br/>*!* Disjunction<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.F., .F., \"OR\")<br/>REPLACE result WITH (a(arg1) OR b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.F., .T., \"OR\")<br/>REPLACE result WITH (a(arg1) OR b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.T., .F., \"OR\")<br/>REPLACE result WITH (a(arg1) OR b(arg2))<br/>INSERT INTO funceval (arg1, arg2, operation) VALUES (.T., .T., \"OR\")<br/>REPLACE result WITH (a(arg1) OR b(arg2))<br/>GO TOP<br/>\u00a0<br/>_VFP.DataToClip(\"funceval\", 8, 3)<br/>\u00a0<br/>FUNCTION a(v As Boolean) As Boolean<br/>REPLACE calls WITH \"a()\"<br/>RETURN v<br/>ENDFUNC<br/>\u00a0<br/>FUNCTION b(v As Boolean) As Boolean<br/>REPLACE calls WITH calls + \", b()\"<br/>RETURN v<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn a(b){self.fcn.println(b); b}<br/>fcn b(b){self.fcn.println(b); b}</pre>"}]}