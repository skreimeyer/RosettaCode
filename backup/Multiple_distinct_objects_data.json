{"task": "Multiple_distinct_objects", "blocks": [{"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\">A\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">N</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> T;</pre>"}, {"lang": "Aime", "loc": 58, "block": "<pre class=\"text highlighted_source\">void<br/>show_sublist(list l)<br/>{<br/>    integer i, v;<br/>\u00a0<br/>    for (i, v in l) {<br/>        o_space(sign(i));<br/>        o_integer(v);<br/>    }<br/>}<br/>\u00a0<br/>void<br/>show_list(list l)<br/>{<br/>    integer i;<br/>    list v;<br/>\u00a0<br/>    for (i, v in l) {<br/>        o_text(\" [\");<br/>        show_sublist(v);<br/>        o_text(\"]\");<br/>    }<br/>\u00a0<br/>    o_byte('\\n');<br/>}<br/>\u00a0<br/>list<br/>multiple_distinct(integer n, object o)<br/>{<br/>    list l;<br/>\u00a0<br/>    call_n(n, l_append, l, o);<br/>\u00a0<br/>    return l;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list l, z;<br/>\u00a0<br/>    # create a list of integers - `3' will serve as initializer<br/>    l = multiple_distinct(8, 3);<br/>\u00a0<br/>    l_clear(l);<br/>\u00a0<br/>    # create a list of distinct lists - `z' will serve as initializer<br/>    l_append(z, 4);<br/>    l = multiple_distinct(8, z);<br/>\u00a0<br/>    # modify one of the sublists<br/>    l_q_list(l, 3)[0] = 7;<br/>\u00a0<br/>    # display the list of lists<br/>    show_list(l);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 8, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> FOO <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> u<span class=\"sy1\">,</span>l<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> n <span class=\"sy1\">:=</span> 26<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span>n<span class=\"br0\">]</span>FOO f<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Additionally each item can be initialised #</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> f <span class=\"kw2\">DO</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy1\">-</span>1<span class=\"sy1\">+</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy1\">-</span>1<span class=\"sy1\">+</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 60, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- MULTIPLE DISTINCT OBJECTS -------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- nObjects Constructor -&gt; Int -&gt; [Object]</span><br/><span class=\"kw3\">on</span> nObjects<span class=\"br0\">(</span>f, n<span class=\"br0\">)</span><br/>    map<span class=\"br0\">(</span>f, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> nObjects<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- someConstructor\u00a0:: a -&gt; Int -&gt; b</span><br/>    <span class=\"kw3\">script</span> someConstructor<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, i<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><span class=\"kw2\">index</span>:i<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    nObjects<span class=\"br0\">(</span>someConstructor, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{index:1}, {index:2}, {index:3}, {index:4}, {index:5}, {index:6}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%n%</span><br/>   a<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> new Foo<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      REM Determine object count at runtime:<br/>      n% = RND(1000)<br/>\u00a0<br/>      REM Declare an array of structures; all members are initialised to zero:<br/>      DIM objects{(n%) a%, b$}<br/>\u00a0<br/>      REM Initialise the objects to distinct values:<br/>      FOR i% = 0 TO DIM(objects{()},1)<br/>        objects{(i%)}.a% = i%<br/>        objects{(i%)}.b$ = STR$(i%)<br/>      NEXT<br/>\u00a0<br/>      REM This is how to create an array of pointers to the same object:<br/>      DIM objects%(n%), object{a%, b$}<br/>      FOR i% = 0 TO DIM(objects%(),1)<br/>        objects%(i%) = object{}<br/>      NEXT</pre>"}, {"lang": "Brat", "loc": 1, "block": "<pre class=\"text highlighted_source\">n.of foo.new</pre>"}, {"lang": "C", "loc": 3, "block": "<pre class=\"c highlighted_source\">foo <span class=\"sy0\">*</span>foos <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>foos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  init_foo<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>foos<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// this assumes T is a default-constructible type (all built-in types are)</span><br/>T<span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> T<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"co1\">// if T is POD, the objects are uninitialized, otherwise they are default-initialized</span><br/>\u00a0<br/><span class=\"co1\">//If default initialisation is not what you want, or if T is a POD type which will be uninitialized</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>   p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> make_a_T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//or some other expression of type T</span><br/>\u00a0<br/><span class=\"co1\">// when you don't need the objects any more, get rid of them</span><br/><span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 5, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/>List<span class=\"sy0\">&lt;</span>Foo<span class=\"sy0\">&gt;</span> foos <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\">user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"br0\">(</span>rand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; repeating the same random number three times</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0.2787011365537204</span> <span class=\"nu0\">0.2787011365537204</span> <span class=\"nu0\">0.2787011365537204</span><span class=\"br0\">)</span><br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> rand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; creating three different random number</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0.8334795669220695</span> <span class=\"nu0\">0.08405601245793926</span> <span class=\"nu0\">0.5795448744634744</span><span class=\"br0\">)</span><br/>user<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">make-list</span> n <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"br0\">(</span>make-the-distinct-thing<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> n <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"br0\">(</span>make-the-distinct-thing<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 4, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">auto</span> fooArray <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Foo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> item<span class=\"sy0\">;</span> fooArray<span class=\"br0\">)</span><br/>    item <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 10, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  lObject<span class=\"sy1\">:</span> TMyObject<span class=\"sy1\">;</span><br/>  lList<span class=\"sy1\">:</span> TObjectList&lt;TMyObject&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TObjectList&lt;TMyObject&gt;<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  lObject <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TMyObject<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    lList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>lObject<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">// ...</span></pre>"}, {"lang": "E", "loc": 4, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>...<br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span> <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span>makeWhatever<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 17, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; wrong - make-vector is evaluated one time - same vector</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">L</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">L</span>    \u2192 <span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"br0\">(</span>first <span class=\"kw1\">L</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span> '\ud83d\udd34<span class=\"br0\">)</span> <span class=\"co1\">;; sets the 'first' vector</span><br/>\u00a0<br/><span class=\"kw1\">L</span>   \u2192 <span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"nu0\">0</span> \ud83d\udd34 <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> \ud83d\udd34 <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> \ud83d\udd34 <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; right - three different vectors</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">L</span><span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">make-vector</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">L</span>    \u2192 <span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"br0\">(</span>first <span class=\"kw1\">L</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span> '\ud83d\udd35<span class=\"br0\">)</span> <span class=\"co1\">;; sets the first vector</span><br/>\u00a0<br/><span class=\"kw1\">L</span>   \u2192 <span class=\"br0\">(</span>#<span class=\"br0\">(</span><span class=\"nu0\">0</span> \ud83d\udd35 <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; OK</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre class=\"text highlighted_source\">randoms = for _ &lt;- 1..10, do:\u00a0:rand.uniform(1000)</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>Randoms = [random:uniform(1000) || _ &lt;- lists:seq(1,10)].\n</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">1000 [ { 1 } clone ] replicate</pre>"}, {"lang": "Forth", "loc": 24, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>\u00a0<br/>\\ create a list of VAR objects the right way<br/>\\ each: returns a unique object reference<br/>o{ 0 0 0 } dup p:   o{ 0 0 0 } <br/>dup each: drop . 10774016  <br/>dup each: drop . 10786896 <br/>dup each: drop . 10786912 <br/>\u00a0<br/>\u00a0<br/>\\ create a list of VAR objects the wrong way<br/>\\ each: returns the same object reference<br/>var x <br/>object-list2 list<br/>x list add:<br/>x list add:<br/>x list add:<br/>list p: o{ 0 0 0 } <br/>list each: drop . 1301600 <br/>list each: drop . 1301600<br/>list each: drop . 1301600<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 44, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> multiple<br/>  <span class=\"co1\">! Define a simple type</span><br/>  <span class=\"kw3\">type</span> T<br/>     <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> T<br/>\u00a0<br/>  <span class=\"co1\">! Define a type containing a pointer</span><br/>  <span class=\"kw3\">type</span> S<br/>     <span class=\"kw3\">integer</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> S<br/>\u00a0<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">T_array</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">S_same</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>              <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">target</span>      <span class=\"sy0\">::</span> <span class=\"me2\">v</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>   <span class=\"sy0\">::</span> <span class=\"me2\">N</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>  <span class=\"co1\">! Create 10 </span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>T_array<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">! Set the fifth one to b something different</span><br/>  T_array<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"co1\">! Print them out to show they are distinct</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(10i2)'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>T_array<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">! Create 10 references to the same object</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>S_same<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  v <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, N<br/>     <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>S_same<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>a<span class=\"br0\">)</span><br/>     S_same<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>a <span class=\"sy0\">=</span>&gt; v<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"co1\">! Print them out - should all be 5</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(10i2)'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>S_same<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>a,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">! Change the referenced object and reprint - should all be 3</span><br/>  v <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(10i2)'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>S_same<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>a,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> multiple<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">replicate</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span>System.<span class=\"me1\">Guid</span>.<span class=\"me1\">NewGuid</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">val</span> it\u00a0: Guid list <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span>485632d7<span class=\"sy0\">-</span>1fd6<span class=\"sy0\">-</span>4d9e<span class=\"sy0\">-</span>8910<span class=\"sy0\">-</span>7949d7b2b485<span class=\"sy0\">;</span> 485632d7<span class=\"sy0\">-</span>1fd6<span class=\"sy0\">-</span>4d9e<span class=\"sy0\">-</span>8910<span class=\"sy0\">-</span>7949d7b2b485<span class=\"sy0\">;</span><br/>   485632d7<span class=\"sy0\">-</span>1fd6<span class=\"sy0\">-</span>4d9e<span class=\"sy0\">-</span>8910<span class=\"sy0\">-</span>7949d7b2b485<span class=\"br0\">]</span></pre>"}, {"lang": "Go", "loc": 7, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> nxm<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> m <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    d2 <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d2 <span class=\"sy1\">{</span><br/>        d2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> d2<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> createFoos1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">replicateM n makeTheDistinctThing</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/>  items_wrong <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># prints '0' for size of each item</span><br/>  <span class=\"kw1\">every</span> item <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>items_wrong <span class=\"kw1\">do</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span>item<span class=\"br0\">)</span><br/>  <span class=\"co1\"># after trying to add an item to one of the lists</span><br/>  <span class=\"kw4\">push</span> <span class=\"br0\">(</span>items_wrong<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># now prints '1' for size of each item</span><br/>  <span class=\"kw1\">every</span> item <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>items_wrong <span class=\"kw1\">do</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span>item<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">i.</pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\">Foo<span class=\"br0\">[</span><span class=\"br0\">]</span> foos <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// all elements initialized to null</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> foos.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    foos<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// incorrect version:</span><br/>Foo<span class=\"br0\">[</span><span class=\"br0\">]</span> foos_WRONG <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>foos, <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// new Foo() only evaluated once</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>foo() = rand()             # repeated calls change the result with each call<br/>repeat([foo()], outer=5)   # but this only calls foo() once, clones that first value<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def Array(atype; n):<br/>  if   atype == \"number\" then [ range(0;n) ]<br/>  elif atype == \"object\" then [ range(0;n)| {\"value\": . } ]<br/>  elif atype == \"array\"  then [ range(0;n)| [.] ]<br/>  elif atype == \"string\" then [ range(0;n)| tostring ]<br/>  elif atype == \"boolean\" then<br/>    if n == 0 then [] elif n == 1 then [false] elif n==2 then [false, true]<br/>    else error(\"there are only two boolean values\")<br/>    end<br/>  elif atype == \"null\" then<br/>    if n == 0 then [] elif n == 1 then [null]<br/>    else error(\"there is only one null value\")<br/>    end<br/>  else error(\"\\(atype) is not a jq type\")<br/>  end; <br/>\u00a0<br/># Example:<br/>\u00a0<br/> Array(\"object\"; 4)</pre>"}, {"lang": "Kotlin", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Foo <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> id<span class=\"sy0\">:</span> Int<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>       id <span class=\"sy0\">=</span> ++numCreated <span class=\"co1\">// creates a distict id for each object</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> numCreated <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>  <span class=\"co1\">// say</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* correct approach - creates references to distinct objects */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fooList <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>foo in fooList<span class=\"br0\">)</span> println<span class=\"br0\">(</span>foo.<span class=\"me1\">id</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* incorrect approach - creates references to same object */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fooList2 <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> f <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>foo in fooList2<span class=\"br0\">)</span> println<span class=\"br0\">(</span>foo.<span class=\"me1\">id</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 10, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/>| <span class=\"sy1\">?-</span> <span class=\"kw4\">create_protocol</span>(statep, [], [public(state<span class=\"sy1\">/</span><span class=\"nu0\">1</span>)]),<br/>     <span class=\"kw4\">findall</span>(<br/>         <span class=\"re0\">Id</span>,<br/>         (integer<span class=\"sy1\">::</span>between(<span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"re0\">N</span>),<br/>          <span class=\"kw4\">create_object</span>(<span class=\"re0\">Id</span>, [<span class=\"kw3\">implements</span>(statep)], [], [state(<span class=\"re0\">N</span>)])),<br/>         <span class=\"re0\">Ids</span><br/>     ).<br/><span class=\"re0\">Ids</span> <span class=\"sy1\">=</span> [o1, o2, o3, o4, o5, o6, o7, o8, o9, o10].<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- This concept is relevant to tables in Lua</span><br/><span class=\"kw1\">local</span> table1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- The following will create a table of references to table1</span><br/><span class=\"kw1\">local</span> refTab <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> refTab<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> table1 <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Instead, tables should be copied using a function like this\t</span><br/><span class=\"kw1\">function</span> copy <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> new <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> new<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> new<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Now we can create a table of independent copies of table1</span><br/><span class=\"kw1\">local</span> copyTab <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> copyTab<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> copy<span class=\"br0\">(</span>table1<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Form 60, 40<br/>      Foo=Lambda Id=1 (m)-&gt;{<br/>            class Alfa {<br/>                  x, id<br/>                  Class:<br/>                  Module Alfa(.x, .id) {}<br/>            }<br/>            =Alfa(m, id)<br/>            id++<br/>      }<br/>\u00a0<br/>      Dim A(10)&lt;&lt;Foo(20)<br/>      \\\\ for each arrayitem call Foo(20)<br/>      TestThis()<br/>\u00a0<br/>\u00a0<br/>      \\\\  call once foo(20) and result copy to each array item<br/>      Dim A(10)=Foo(20)<br/>      TestThis()<br/>\u00a0<br/>      Bar=Lambda Foo (m)-&gt;{<br/>            -&gt;Foo(m)<br/>      }<br/>      \\\\ Not only the same id, but the same group<br/>      \\\\ each item is pointer to group<br/>      Dim A(10)=Bar(20)<br/>      TestThis()<br/>\u00a0<br/>      Sub TestThis()<br/>            Local i<br/>            For i=0 to 9 {<br/>                  For A(i){<br/>                        .x++<br/>                         Print .id , .x<br/>                  }<br/>            }<br/>            Print<br/>      End Sub<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">{x, x, x, x} /. x -&gt; Random[]</pre>"}, {"lang": "Maxima", "loc": 9, "block": "<pre class=\"text highlighted_source\">a: [1, 2]$<br/>\u00a0<br/>b: makelist(copy(a), 3);<br/>[[1,2],[1,2],[1,2]]<br/>\u00a0<br/>b[1][2]: 1000$<br/>\u00a0<br/>b;<br/>[[1,1000],[1,2],[1,2]]</pre>"}, {"lang": "Modula-3", "loc": 1, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">VAR</span> a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> T</pre>"}, {"lang": "NGS", "loc": 1, "block": "<pre class=\"text highlighted_source\">{ [foo()] * n }</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">proc foo(): string =<br/>  echo \"Foo()\"<br/>  \"mystring\"<br/>\u00a0<br/>let n = 100<br/>var ws = newSeq[string](n)<br/>for i in 0 .. &lt;n: ws[i] = foo()</pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make n <span class=\"br0\">(</span><span class=\"kw1\">new</span> foo<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* here (new foo) can be any expression that returns a new object,<br/>   record, array, or string *)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">ListBuffer init(10, #[ Float rand ]) println</pre>"}, {"lang": "ooRexx", "loc": 21, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">-- get an array of directory objects</span><br/>array = fillArrayWith<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"sy0\">.</span><span class=\"kw6\">directory</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"each object will have a different identityHash\"</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">loop</span> d <span class=\"kw2\">over</span> array<br/>    <span class=\"kw1\">say</span> d~identityHash<br/><span class=\"kw3\">end</span><br/>\u00a0<br/>::routine fillArrayWith<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> size, class<br/>\u00a0<br/>  array = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> size<br/>      <span class=\"co1\">-- Note, this assumes this object class can be created with</span><br/>      <span class=\"co1\">-- no arguments</span><br/>      array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = class~new<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span> array<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Xs = <span class=\"br0\">{</span>MakeList 5<span class=\"br0\">}</span> <span class=\"co1\">%% a list of 5 unbound variables</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll Xs OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"co1\">%% fill it with random numbers (CORRECT)</span><br/>  <span class=\"br0\">{</span>Show Xs<span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">(</span>Foo<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">)</span> x <span class=\"re0\">$n</span> <br/><span class=\"co1\"># here Foo-&gt;new can be any expression that returns a reference representing</span><br/><span class=\"co1\"># a new object</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">(</span>Foo<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">)</span> x <span class=\"re0\">$n</span> <br/><span class=\"co1\"># here Foo-&gt;new can be any expression that returns a reference representing</span><br/><span class=\"co1\"># a new object</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> Foo<span class=\"sy0\">.</span><span class=\"kw2\">new</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">sequence s = repeat(\"x\",3*rand(3))<br/>?s<br/>    s[rand(length(s))] = 5<br/>?s<br/>    s[rand(length(s))] &amp;= 'y'<br/>?s<br/>    s[rand(length(s))] = s<br/>?s</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (make (do 5 (link (new))))<br/>-&gt; ($384717187 $384717189 $384717191 $384717193 $384717195)</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Get-Date</span> <span class=\"kw5\">-Hour</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.AddDays<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">|</span><br/>       <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-Unique</span> <span class=\"sy0\">|</span><br/>       <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 25, "block": "<pre class=\"purebasic highlighted_source\">n<span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">25</span><br/><span class=\"kw1\">Dim</span> A.i<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <br/><span class=\"co1\">; Creates a Array of n [25-75] elements depending on the outcome of Random().</span><br/><span class=\"co1\">; Each element will be initiated to zero.</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  A<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<br/><span class=\"kw1\">Next</span> i<br/><span class=\"co1\">; Set each individual element at a wanted (here 2*i) value and </span><br/><span class=\"co1\">; automatically adjust accordingly to the unknown length of the Array.</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> <span class=\"sy0\">*</span>PointersToA<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>PointersToA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>PointersToA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>@A<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"co1\">; Create a linked list of the same length as A() above.</span><br/><span class=\"co1\">; Each element is then set to point to the Array element</span><br/><span class=\"co1\">; of the same order.</span><br/>\u00a0<br/><span class=\"kw1\">ForEach</span> <span class=\"sy0\">*</span>PointersToA<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Debug</span> PeekI<span class=\"br0\">(</span><span class=\"sy0\">*</span>PointersToA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"co1\">; Verify by sending each value of A() via *PointersToA()</span><br/><span class=\"co1\">; to the debugger's output.</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"br0\">[</span>Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> * n <span class=\"co1\"># here Foo() can be any expression that returns a new object</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">rep(foo(), n)        # foo() is any code returning a value</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; a list of 10 references to the same vector<br/>(make-list 10 (make-vector 10 0))<br/>\u00a0<br/>;; a list of 10 distinct vectors<br/>(build-list 10 (\u03bb (n) (make-vector 10 0)))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span>Foo.<span class=\"me1\">new</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> n         <span class=\"co1\"># here Foo.new can be any expression that returns a new object</span><br/><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n, Foo.<span class=\"me1\">new</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> until n<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre>sash[r7rs]&gt; (define-record-type &lt;a&gt; (make-a x) a? (x get-x))\n#&lt;unspecified&gt;\nsash[r7rs]&gt; (define l1 (make-list 5 (make-a 3)))\n#&lt;unspecified&gt;\nsash[r7rs]&gt; (eq? (list-ref l1 0) (list-ref l1 1))\n#t\n</pre>"}, {"lang": "Seed7", "loc": 20, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array file: openFiles (in array string: fileNames) is func<br/>  result<br/>    var array file: fileArray is 0 times STD_NULL;  # Define array variable<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    fileArray\u00a0:= length(fileNames) times STD_NULL;  # Array size computed at run-time<br/>    for key i range fileArray do<br/>      fileArray[i]\u00a0:= open(fileNames[i], \"r\");      # Assign multiple distinct objects<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array file: files is 0 times STD_NULL;<br/>  begin<br/>    files\u00a0:= openFiles([] (\"abc.txt\", \"def.txt\", \"ghi.txt\", \"jkl.txt\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span>Foo.<span class=\"me1\">new</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> n;      <span class=\"co1\"># incorrect (only one distinct object is created)</span></pre>"}, {"lang": "Smalltalk", "loc": 13, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">c</span>|<br/><span class=\"coMULTI\">\"Create an ordered collection that will grow while we add elements\"</span><br/><span class=\"re6\">c</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/><span class=\"coMULTI\">\"fill the collection with 9 arrays of 10 elements; elements (objects)<br/> are initialized to the nil object, which is a well-defined 'state'\"</span><br/><span class=\"nu0\">1</span> to: <span class=\"re5\">9</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | c add: <span class=\"br0\">(</span><span class=\"re0\">Array</span> new: <span class=\"re5\">10</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>.<br/><span class=\"coMULTI\">\"However, let us show a way of filling the arrays with object number 0\"</span><br/><span class=\"re6\">c</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/><span class=\"re5\">1</span> to: <span class=\"re5\">9</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | c add: <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">Array</span> new: <span class=\"re5\">10</span><span class=\"br0\">)</span> copyReplacing: <span class=\"kw1\">nil</span> withObject: <span class=\"re5\">0</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>.<br/><span class=\"coMULTI\">\"demonstrate that the arrays are distinct: modify the fourth of each\"</span><br/><span class=\"nu0\">1</span> to: <span class=\"re5\">9</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | <span class=\"br0\">(</span><span class=\"re5\">c</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> at: <span class=\"re5\">4</span> put: <span class=\"re5\">i</span> <span class=\"br0\">]</span>.<br/><span class=\"coMULTI\">\"show it\"</span><br/>c do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">e</span> | e printNl <span class=\"br0\">]</span>.</pre>"}, {"lang": "Swift", "loc": 9, "block": "<pre class=\"text highlighted_source\">class Foo { }<br/>\u00a0<br/>var foos = [Foo]()<br/>for i in 0..&lt;n {<br/>    foos.append(Foo())<br/>}<br/>\u00a0<br/>// incorrect version:<br/>var foos_WRONG = [Foo](count: n, repeatedValue: Foo())  // Foo() only evaluated once</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/>\u00a0<br/><span class=\"co1\"># The class that we want to make unique instances of</span><br/><span class=\"kw1\">set</span> theClass Foo<br/>\u00a0<br/><span class=\"co1\"># Wrong version; only a single object created</span><br/><span class=\"kw1\">set</span> theList <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"re0\">$theClass</span> new<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Right version; objects distinct</span><br/><span class=\"kw1\">set</span> theList <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> theList <span class=\"br0\">[</span><span class=\"re0\">$theClass</span> new<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XPL0", "loc": 7, "block": "<pre class=\"text highlighted_source\">code Reserve=3, IntIn=10;<br/>char A;  int  N, I;  <br/>[N:= IntIn(8);                  \\get number of items from command line<br/>A:= Reserve(N);                 \\create array of N bytes<br/>for I:= 0 to N-1 do A(I):= I*3; \\initialize items with different values<br/>for I:= 0 to N-1 do A:= I*3;    \\error: \"references to the same mutable object\"<br/>]</pre>"}, {"lang": "Yabasic", "loc": 20, "block": "<pre class=\"text highlighted_source\">sub test()<br/>\tprint \"Random number: \" + str$(ran(100))<br/>end sub<br/>\u00a0<br/>sub repL$(e$, n)<br/>\tlocal i, r$<br/>\u00a0<br/>\tfor i = 1 to n<br/>\t\tr$ = r$ + \",\" + e$<br/>\tnext<br/>\treturn r$<br/>end sub<br/>\u00a0<br/>dim func$(1)<br/>\u00a0<br/>n = token(repL$(\"test\", 5), func$(), \",\")<br/>\u00a0<br/>for i = 1 to n<br/>\texecute(func$(i))<br/>next i</pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">n:=3;<br/>n.pump(List) //--&gt;L(0,1,2)<br/>\u00a0<br/>n.pump(List,List) //--&gt;L(0,1,2), not expected<br/>  because the second list can be used to describe a calculation<br/>n.pump(List,List(Void,List)) //--&gt; L(L(),L(),L()) all same<br/>   List(Void,List) means returns List, which is a \"known\" value<br/>n.pump(List,List.fpM(\"-\")) //--&gt; L(L(),L(),L()) all distinct<br/>   fpM is partial application: call List.create()<br/>\u00a0<br/>n.pump(List,(0.0).random.fp(1)) //--&gt; 3 [0,1) randoms<br/>L(0.902645,0.799657,0.0753809)<br/>\u00a0<br/>n.pump(String) //--&gt;\"012\", default action is id function<br/>\u00a0<br/>class C{ var n; fcn init(x){n=x} }<br/>n.pump(List,C) //--&gt; L(C,C,C)<br/>n.pump(List,C).apply(\"n\") //--&gt;L(0,1,2) ie all classes distinct</pre>"}]}