{"task": "Execute_Brain****", "blocks": [{"lang": "68000 Assembly", "loc": 332, "block": "<pre class=\"_68000devpac highlighted_source\"><span class=\"co1\">;</span><br/><span class=\"co1\">; Brainfuck interpreter by Thorham</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">; 68000+ AmigaOs2+</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">; Cell size is a byte</span><br/><span class=\"co1\">;</span><br/>    incdir  <span class=\"st0\">\"asminc:\"</span><br/>\u00a0<br/>    <span class=\"kw1\">include</span> <span class=\"st0\">\"dos/dosextens.i\"</span><br/>    <span class=\"kw1\">include</span> <span class=\"st0\">\"lvo/lvos.i\"</span><br/>\u00a0<br/><span class=\"re0\">execBase </span><span class=\"kw1\">equ</span> <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"re0\">start<br/></span><br/><span class=\"co1\">; parse command line parameter</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a0</span>,fileName<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"br0\">(</span><span class=\"kw4\">a0</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,<span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">beq</span>     exit <span class=\"co1\">; no parameter</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">'\"'</span>,<span class=\"kw4\">d0</span> <span class=\"co1\">; filter out double quotes</span><br/>    <span class=\"kw2\">bne</span>     .loop<br/>\u00a0<br/>    <span class=\"kw2\">addq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,fileName<br/>\u00a0<br/><span class=\"re0\">.loop<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"br0\">(</span><span class=\"kw4\">a0</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,<span class=\"kw4\">d0</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">'\"'</span>,<span class=\"kw4\">d0</span> <span class=\"co1\">; filter out double quotes</span><br/>    <span class=\"kw2\">beq</span>     .done<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"nu0\">32</span>,<span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">bge</span>     .loop<br/>\u00a0<br/><span class=\"re0\">.done<br/></span>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">b</span>   <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">a0</span><span class=\"br0\">)</span> <span class=\"co1\">; end of string</span><br/>\u00a0<br/><span class=\"co1\">; open dos library</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  execBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">lea</span>     dosName,<span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">moveq</span>   #<span class=\"nu0\">36</span>,<span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">jsr</span>     _LVOOpenLibrary<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">d0</span>,dosBase<br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/><span class=\"co1\">; get stdin and stdout handles</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  dosBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">jsr</span>     _LVOInput<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">d0</span>,stdIn<br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/>    <span class=\"kw2\">jsr</span>     _LVOOutput<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">d0</span>,stdOut<br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  stdIn,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">jsr</span>     _LVOFlush<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; open file</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fileName,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  #MODE_OLDFILE,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">jsr</span>     _LVOOpen<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">d0</span>,fileHandle<br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/><span class=\"co1\">; examine file</span><br/>\u00a0<br/>    <span class=\"kw2\">lea</span>     fileInfoBlock,<span class=\"kw4\">a4</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fileHandle,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a4</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">jsr</span>     _LVOExamineFH<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">w</span>   <span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/><span class=\"co1\">; exit if the file is a folder</span><br/>\u00a0<br/>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">l</span>   fib_DirEntryType<span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">bge</span>     exit<br/>\u00a0<br/><span class=\"co1\">; allocate file memory</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  execBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fib_Size<span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span>,<span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">beq</span>     exit <span class=\"co1\">; exit if file is empty</span><br/>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">jsr</span>     _LVOAllocVec<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">d0</span>,program<br/>    <span class=\"kw2\">beq</span>     exit<br/>\u00a0<br/><span class=\"co1\">; read file</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  dosBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fileHandle,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  program,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fib_Size<span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span>,<span class=\"kw4\">d3</span><br/>    <span class=\"kw2\">jsr</span>     _LVORead<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">tst</span>     <span class=\"kw4\">d0</span><br/>    <span class=\"kw2\">ble</span>     exit <span class=\"co1\">; exit if read didn't succeed</span><br/>\u00a0<br/><span class=\"co1\">; close file</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fileHandle,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">jsr</span>     _LVOClose<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">l</span>   fileHandle<br/>\u00a0<br/><span class=\"co1\">; clear tape (bss section is allocated by os but not cleared)</span><br/>\u00a0<br/>    <span class=\"kw2\">lea</span>     tape,<span class=\"kw4\">a0</span><br/>    <span class=\"kw2\">lea</span>     tapeEnd,<span class=\"kw4\">a1</span><br/>\u00a0<br/><span class=\"re0\">.loopClear<br/></span>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">b</span>   <span class=\"br0\">(</span><span class=\"kw4\">a0</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">a0</span>,<span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">bne</span>     .loopClear<br/>\u00a0<br/><span class=\"co1\">; interpreter</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  program,<span class=\"kw4\">a2</span><br/>    <span class=\"kw2\">lea</span>     tape,<span class=\"kw4\">a3</span><br/>\u00a0<br/>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d2</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a2</span>,<span class=\"kw4\">d6</span> <span class=\"co1\">; start of program</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a2</span>,<span class=\"kw4\">d7</span> <span class=\"co1\">; end of program</span><br/>    <span class=\"kw2\">add</span>.<span class=\"kw3\">l</span>   fib_Size<span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span>,<span class=\"kw4\">d7</span><br/>\u00a0<br/><span class=\"re0\">loop<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"br0\">(</span><span class=\"kw4\">a2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,<span class=\"kw4\">d2</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"&gt;\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .incPtr<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"&lt;\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .decPtr<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"+\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .incMem<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"-\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .decMem<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\".\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .outMem<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\",\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .inMem<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"[\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .jmpForward<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"]\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">beq</span>     .jmpBack<br/>\u00a0<br/><span class=\"co1\">; next command</span><br/>\u00a0<br/><span class=\"re0\">.next<br/></span>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d7</span>,<span class=\"kw4\">a2</span> <span class=\"co1\">; test end of program</span><br/>    <span class=\"kw2\">blt</span>     loop<br/>\u00a0<br/><span class=\"co1\">; end of program reached</span><br/>\u00a0<br/>    <span class=\"kw2\">bra</span>     exit<br/>\u00a0<br/><span class=\"co1\">; command implementations</span><br/>\u00a0<br/><span class=\"re0\">.incPtr<br/></span>    <span class=\"kw2\">addq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">a3</span><br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   #tapeEnd,<span class=\"kw4\">a3</span> <span class=\"co1\">; test end of tape</span><br/>    <span class=\"kw2\">bge</span>     exit<br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.decPtr<br/></span>    <span class=\"kw2\">subq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">a3</span><br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   #tape,<span class=\"kw4\">a3</span> <span class=\"co1\">; test start of tape</span><br/>    <span class=\"kw2\">blt</span>     exit<br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.incMem<br/></span>    <span class=\"kw2\">addq</span>.<span class=\"kw3\">b</span>  #<span class=\"nu0\">1</span>,<span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.decMem<br/></span>    <span class=\"kw2\">subq</span>.<span class=\"kw3\">b</span>  #<span class=\"nu0\">1</span>,<span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.outMem<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  stdOut,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">jsr</span>     _LVOFPutC<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.inMem<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  stdIn,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">jsr</span>     _LVOFGetC<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"nu0\">27</span>,<span class=\"kw4\">d0</span> <span class=\"co1\">; convert escape to 0</span><br/>    <span class=\"kw2\">bne</span>     .notEscape<br/>    <span class=\"kw2\">moveq</span>   #<span class=\"nu0\">0</span>,<span class=\"kw4\">d0</span><br/><span class=\"re0\">.notEscape<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"kw4\">d0</span>,<span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.jmpForward<br/></span>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">b</span>   <span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">bne</span>     .next<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a2</span>,<span class=\"kw4\">a4</span><br/>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d3</span><br/>\u00a0<br/><span class=\"re0\">.loopf<br/></span>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d7</span>,<span class=\"kw4\">a4</span> <span class=\"co1\">; test end of program</span><br/>    <span class=\"kw2\">bge</span>     exit<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,<span class=\"kw4\">d2</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"[\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">bne</span>     .lf<br/>\u00a0<br/>    <span class=\"kw2\">addq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">d3</span><br/>    <span class=\"kw2\">bra</span>     .loopf<br/><span class=\"re0\">.lf<br/></span>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"]\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">bne</span>     .loopf<br/>\u00a0<br/>    <span class=\"kw2\">subq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">d3</span><br/>    <span class=\"kw2\">bge</span>     .loopf<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a4</span>,<span class=\"kw4\">a2</span><br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"re0\">.jmpBack<br/></span>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">b</span>   <span class=\"br0\">(</span><span class=\"kw4\">a3</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">beq</span>     .next<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a2</span>,<span class=\"kw4\">a4</span><br/>    <span class=\"kw2\">clr</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d3</span><br/>\u00a0<br/><span class=\"re0\">.loopb<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">b</span>  <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">a4</span><span class=\"br0\">)</span>,<span class=\"kw4\">d2</span><br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">d6</span>,<span class=\"kw4\">a4</span> <span class=\"co1\">; test start of program</span><br/>    <span class=\"kw2\">blt</span>     exit<br/>\u00a0<br/>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"]\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">bne</span>     .lb<br/>\u00a0<br/>    <span class=\"kw2\">addq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">d3</span><br/>    <span class=\"kw2\">bra</span>     .loopb<br/><span class=\"re0\">.lb<br/></span>    <span class=\"kw2\">cmp</span>.<span class=\"kw3\">b</span>   #<span class=\"st0\">\"[\"</span>,<span class=\"kw4\">d2</span><br/>    <span class=\"kw2\">bne</span>     .loopb<br/>\u00a0<br/>    <span class=\"kw2\">subq</span>.<span class=\"kw3\">l</span>  #<span class=\"nu0\">1</span>,<span class=\"kw4\">d3</span><br/>    <span class=\"kw2\">bgt</span>     .loopb<br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  <span class=\"kw4\">a4</span>,<span class=\"kw4\">a2</span><br/>    <span class=\"kw2\">bra</span>     .next<br/>\u00a0<br/><span class=\"co1\">; cleanup and exit</span><br/>\u00a0<br/><span class=\"re0\">exit<br/></span>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  dosBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  fileHandle,<span class=\"kw4\">d1</span><br/>    <span class=\"kw2\">beq</span>     .noFile<br/>    <span class=\"kw2\">jsr</span>     _LVOClose<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/><span class=\"re0\">.noFile<br/></span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  execBase,<span class=\"kw4\">a6</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  program,<span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">beq</span>     .noMem<br/>    <span class=\"kw2\">jsr</span>     _LVOFreeVec<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/><span class=\"re0\">.noMem<br/></span><br/>    <span class=\"kw2\">move</span>.<span class=\"kw3\">l</span>  dosBase,<span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">tst</span>.<span class=\"kw3\">l</span>   <span class=\"kw4\">a1</span><br/>    <span class=\"kw2\">beq</span>     .noLib<br/>    <span class=\"kw2\">jsr</span>     _LVOCloseLibrary<span class=\"br0\">(</span><span class=\"kw4\">a6</span><span class=\"br0\">)</span><br/><span class=\"re0\">.noLib<br/></span><br/>    <span class=\"kw2\">rts</span><br/>\u00a0<br/><span class=\"co1\">; data</span><br/>\u00a0<br/>    <span class=\"kw1\">section</span> <span class=\"kw1\">data</span>,data_p<br/>\u00a0<br/><span class=\"re0\">dosBase<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">fileName<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">fileHandle<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">fileInfoBlock<br/></span>    <span class=\"kw1\">dcb.b</span>   fib_SIZEOF<br/>\u00a0<br/><span class=\"re0\">stdIn<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">stdOut<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">program<br/></span>    <span class=\"kw1\">dc.l</span>    <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">dosName<br/></span>    <span class=\"kw1\">dc.b</span>    <span class=\"st0\">\"dos.library\"</span>,<span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">; tape memory</span><br/>\u00a0<br/>    <span class=\"kw1\">section</span> mem,bss_p<br/>\u00a0<br/><span class=\"re0\">tape<br/></span>    <span class=\"kw1\">ds.b</span>    <span class=\"nu0\">1024</span><span class=\"sy0\">*</span><span class=\"nu0\">64</span><br/><span class=\"re0\">tapeEnd<br/></span></pre>"}, {"lang": "Agena", "loc": 89, "block": "<pre class=\"text highlighted_source\"># Brain**** interpreter<br/>\u00a0<br/># execute the Brain**** program in the code string<br/>bf\u00a0:= proc( code\u00a0:: string ) is<br/>    local address      \u00a0:= 1;  # current data address<br/>    local pc           \u00a0:= 1;  # current position in code<br/>    local data         \u00a0:= []; # data - initially empty<br/>    local input        \u00a0:= \"\"; # user input - initially empty<br/>    local bfOperations \u00a0:=     # table of operations and their implemntations<br/>          [ \"&gt;\" ~ proc() is inc address, 1 end<br/>          , \"&lt;\" ~ proc() is dec address, 1 end<br/>          , \"+\" ~ proc() is inc data[ address ], 1 end<br/>          , \"-\" ~ proc() is dec data[ address ], 1 end<br/>          , \".\" ~ proc() is io.write( char( data[ address ] ) ) end<br/>          , \",\" ~ proc() is<br/>                      # get next input character, converted to an integer<br/>                      while input = \"\"<br/>                      do<br/>                          # no input left - get the next line<br/>                          input\u00a0:= io.read()<br/>                      od;<br/>                      data[ address ]\u00a0:= abs( input[ 1 ] );<br/>                      # remove the latest character from the input<br/>                      if size input &lt; 2<br/>                      then<br/>                          input\u00a0:= \"\"<br/>                      else<br/>                          input\u00a0:= input[ 2 to -1 ]<br/>                      fi<br/>                  end<br/>          , \"[\" ~ proc() is<br/>                      if data[ address ] = 0<br/>                      then<br/>                          # skip to the end of the loop<br/>                          local depth\u00a0:= 0;<br/>                          do<br/>                              inc pc, 1;<br/>                              if code[ pc ] = \"[\"<br/>                              then<br/>                                  inc depth, 1<br/>                              elif code[ pc ] = \"]\"<br/>                              then<br/>                                  dec depth, 1<br/>                              fi<br/>                          until depth &lt; 0<br/>                      fi<br/>                  end<br/>          , \"]\" ~ proc() is<br/>                      if data[ address ] &lt;&gt; 0<br/>                      then<br/>                          # skip to the start of the loop<br/>                          local depth\u00a0:= 0;<br/>                          do<br/>                              dec pc, 1;<br/>                              if code[ pc ] = \"[\"<br/>                              then<br/>                                  dec depth, 1<br/>                              elif code[ pc ] = \"]\"<br/>                              then<br/>                                  inc depth, 1<br/>                              fi<br/>                          until depth &lt; 0<br/>                      fi<br/>                  end<br/>          ];<br/>    # execute the operations - ignore anything invalid<br/>    while pc &lt;= size code<br/>    do<br/>        if  data[ address ] = null<br/>        then<br/>            data[ address ]\u00a0:= 0<br/>        fi;<br/>        if  bfOperations[ code[ pc ] ] &lt;&gt; null<br/>        then<br/>            bfOperations[ code[ pc ] ]()<br/>        fi;<br/>        inc pc, 1<br/>    od<br/>end;<br/>\u00a0<br/># prompt for Brain**** code and execute it, repeating until an empty code string is entered<br/>scope<br/>    local code;<br/>    do<br/>        io.write( \"BF&gt; \" );<br/>        code\u00a0:= io.read();<br/>        bf( code )<br/>    until code = \"\"<br/>epocs;</pre>"}, {"lang": "ALGOL 68", "loc": 127, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/><span class=\"kw3\">set</span> codeString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter BF code:\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> inputString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter input string\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw3\">set</span> thePath <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">path to</span> <span class=\"kw1\">desktop</span> <span class=\"kw2\">as</span> Unicode <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"log.txt\"</span><br/><span class=\"kw3\">set</span> debug <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">open</span> for access <span class=\"kw1\">file</span> thePath <span class=\"kw3\">with</span> write permission<span class=\"br0\">)</span><br/>\u00a0<br/>write <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): (The program contains \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" instructions.)<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw3\">on</span> betterMod<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"co1\">-- so -2 mod 256 is 254 instead of -2</span><br/>\t<span class=\"kw3\">local</span> x<br/>\t<span class=\"kw3\">local</span> y<br/>\t<span class=\"kw3\">try</span><br/>\t\t<span class=\"kw3\">return</span> <span class=\"sy0\">-</span>y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>round <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span> rounding down<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>\t<span class=\"kw3\">on</span> <span class=\"kw3\">error</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t\t<span class=\"kw3\">error</span> <span class=\"st0\">\"Can't call betterMod() on \"</span> <span class=\"sy0\">&amp;</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> betterMod<br/>\u00a0<br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> codePointer \u2264 length <span class=\"kw3\">of</span> codeString<br/>\t<span class=\"kw3\">set</span> theChar <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw3\">get</span> character codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> loopPosns <span class=\"sy0\">&amp;</span> codePointer<br/>\t\t\twrite <span class=\"st0\">\" ** Loop nesting level: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\".<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\twrite <span class=\"st0\">\"<br/>\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Not entering a loop but skipping to instruction number \"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> matchLoops \u2260 <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t\twrite <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | looping back to \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | output '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> output <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>inputPointer &gt; length <span class=\"kw3\">of</span> inputString<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> <span class=\"kw1\">id</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> inputPointer <span class=\"kw3\">of</span> inputString<br/>\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> inputPointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | read in \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> step <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"kw3\">set</span> strout <span class=\"kw3\">to</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> output<br/><span class=\"kw1\">display dialog</span> strout<br/><span class=\"kw1\">close</span> access debug<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 127, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/><span class=\"kw3\">set</span> codeString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter BF code:\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> inputString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter input string\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw3\">set</span> thePath <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">path to</span> <span class=\"kw1\">desktop</span> <span class=\"kw2\">as</span> Unicode <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"log.txt\"</span><br/><span class=\"kw3\">set</span> debug <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">open</span> for access <span class=\"kw1\">file</span> thePath <span class=\"kw3\">with</span> write permission<span class=\"br0\">)</span><br/>\u00a0<br/>write <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): (The program contains \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" instructions.)<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw3\">on</span> betterMod<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"co1\">-- so -2 mod 256 is 254 instead of -2</span><br/>\t<span class=\"kw3\">local</span> x<br/>\t<span class=\"kw3\">local</span> y<br/>\t<span class=\"kw3\">try</span><br/>\t\t<span class=\"kw3\">return</span> <span class=\"sy0\">-</span>y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>round <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span> rounding down<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>\t<span class=\"kw3\">on</span> <span class=\"kw3\">error</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t\t<span class=\"kw3\">error</span> <span class=\"st0\">\"Can't call betterMod() on \"</span> <span class=\"sy0\">&amp;</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> betterMod<br/>\u00a0<br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> codePointer \u2264 length <span class=\"kw3\">of</span> codeString<br/>\t<span class=\"kw3\">set</span> theChar <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw3\">get</span> character codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> loopPosns <span class=\"sy0\">&amp;</span> codePointer<br/>\t\t\twrite <span class=\"st0\">\" ** Loop nesting level: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\".<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\twrite <span class=\"st0\">\"<br/>\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Not entering a loop but skipping to instruction number \"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> matchLoops \u2260 <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t\twrite <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | looping back to \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | output '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> output <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>inputPointer &gt; length <span class=\"kw3\">of</span> inputString<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> <span class=\"kw1\">id</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> inputPointer <span class=\"kw3\">of</span> inputString<br/>\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> inputPointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | read in \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> step <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"kw3\">set</span> strout <span class=\"kw3\">to</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> output<br/><span class=\"kw1\">display dialog</span> strout<br/><span class=\"kw1\">close</span> access debug<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 127, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/><span class=\"kw3\">set</span> codeString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter BF code:\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> inputString <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter input string\"</span> <span class=\"kw1\">buttons</span> <span class=\"st0\">\"OK\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw3\">set</span> thePath <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">path to</span> <span class=\"kw1\">desktop</span> <span class=\"kw2\">as</span> Unicode <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"log.txt\"</span><br/><span class=\"kw3\">set</span> debug <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">open</span> for access <span class=\"kw1\">file</span> thePath <span class=\"kw3\">with</span> write permission<span class=\"br0\">)</span><br/>\u00a0<br/>write <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): (The program contains \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" instructions.)<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/><span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw3\">on</span> betterMod<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"co1\">-- so -2 mod 256 is 254 instead of -2</span><br/>\t<span class=\"kw3\">local</span> x<br/>\t<span class=\"kw3\">local</span> y<br/>\t<span class=\"kw3\">try</span><br/>\t\t<span class=\"kw3\">return</span> <span class=\"sy0\">-</span>y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>round <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span> rounding down<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>\t<span class=\"kw3\">on</span> <span class=\"kw3\">error</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t\t<span class=\"kw3\">error</span> <span class=\"st0\">\"Can't call betterMod() on \"</span> <span class=\"sy0\">&amp;</span> eMsg <span class=\"kw1\">number</span> eNum<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> betterMod<br/>\u00a0<br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> codePointer \u2264 length <span class=\"kw3\">of</span> codeString<br/>\t<span class=\"kw3\">set</span> theChar <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw3\">get</span> character codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> betterMod<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">get</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | a[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]= \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">set</span> tapePointer <span class=\"kw3\">to</span> tapePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | array pos. now \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> loopPosns <span class=\"sy0\">&amp;</span> codePointer<br/>\t\t\twrite <span class=\"st0\">\" ** Loop nesting level: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\".<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\twrite <span class=\"st0\">\"<br/>\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Not entering a loop but skipping to instruction number \"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> matchLoops \u2260 <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">set</span> matchLoops <span class=\"kw3\">to</span> matchLoops <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t\twrite <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | Array[\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tapePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] is '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"'<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape \u2260 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | looping back to \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>length <span class=\"kw3\">of</span> loopPosns<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> loopPosns<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\t<span class=\"kw3\">set</span> loopPosns <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | output '\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t\t<span class=\"kw3\">set</span> output <span class=\"kw3\">to</span> output <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<br/>\u00a0<br/>\t<span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>theChar <span class=\"sy0\">=</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> tape <span class=\"sy0\">&lt;</span> tapePointer<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">set</span> tape <span class=\"kw3\">to</span> tape <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>inputPointer &gt; length <span class=\"kw3\">of</span> inputString<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">set</span> <span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape <span class=\"kw3\">to</span> <span class=\"kw1\">id</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> inputPointer <span class=\"kw3\">of</span> inputString<br/>\t\t<span class=\"kw3\">set</span> inputPointer <span class=\"kw3\">to</span> inputPointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\twrite <span class=\"br0\">(</span>step <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>codePointer <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"): \"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> codePointer <span class=\"kw3\">of</span> codeString<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" | read in \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> tapePointer <span class=\"kw3\">of</span> tape<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")<br/>\"</span> <span class=\"kw3\">to</span> debug<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>\t<span class=\"kw3\">set</span> codePointer <span class=\"kw3\">to</span> codePointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw3\">set</span> step <span class=\"kw3\">to</span> step <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"kw3\">set</span> strout <span class=\"kw3\">to</span> <span class=\"kw1\">string</span> <span class=\"kw1\">id</span> output<br/><span class=\"kw1\">display dialog</span> strout<br/><span class=\"kw1\">close</span> access debug<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 134, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">; AutoFucck</span><br/><span class=\"co0\">; A AutoIt Brainfuck Interpreter</span><br/><span class=\"co0\">; by minx </span><br/><span class=\"co0\">; AutoIt Version: 3.3.8.x</span><br/>\u00a0<br/><span class=\"co0\">; Commands:</span><br/><span class=\"co0\">; - \tDEC</span><br/><span class=\"co0\">; +\t\tINC</span><br/><span class=\"co0\">; [\t\tLOOP START</span><br/><span class=\"co0\">; ]\t\tLOOP END</span><br/><span class=\"co0\">; .\t\tOutput cell value as ASCII Chr</span><br/><span class=\"co0\">; ,\t\tInput a ASCII char (cell value = ASCII code)</span><br/><span class=\"co0\">;\u00a0:\t\tOuput cell value as integer</span><br/><span class=\"co0\">;\u00a0;\t\tInput a Integer</span><br/><span class=\"co0\">; _\t\tOutput a single whitespace</span><br/><span class=\"co0\">; / \tOutput an Carriage Return and Line Feed</span><br/>\u00a0<br/><span class=\"co0\">; You can load &amp; save .atf Files.</span><br/>\u00a0<br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;WindowsConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;EditConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;GUIConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;StaticCOnstants.au3&gt;</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/HotKeySet.htm\"><span class=\"kw3\">HotKeySet</span></a><span class=\"br0\">(</span><span class=\"st0\">\"{F5}\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"_Runn\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$hMain</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICreate.htm\"><span class=\"kw3\">GUICreate</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Autofuck - Real Brainfuck Interpreter\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">600</span><span class=\"sy0\">,</span> <span class=\"nu0\">525</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mMain</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"File\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$mCode</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Code\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mInfo</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Info\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mCredits</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Credits\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mInfo</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_New</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"New\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_Open</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Open\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_Save</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Save\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$mCode_Run</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Run [F5]\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mCode</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$lStatus</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateLabel.htm\"><span class=\"kw3\">GUICtrlCreateLabel</span></a><span class=\"br0\">(</span><span class=\"st0\">\"++ Autofuck started...\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">480</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"re0\">$SS_SUNKEN</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$eCode</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateEdit.htm\"><span class=\"kw3\">GUICtrlCreateEdit</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$eConsole</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateEdit.htm\"><span class=\"kw3\">GUICtrlCreateEdit</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">360</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">115</span><span class=\"sy0\">,</span> <span class=\"re0\">$ES_WANTRETURN</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUISetState.htm\"><span class=\"kw3\">GUISetState</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"nu0\">1</span><br/>\t<span class=\"re0\">$nMsg</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUIGetMsg.htm\"><span class=\"kw3\">GUIGetMsg</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <span class=\"re0\">$nMsg</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_New</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_Open</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileOpenDialog.htm\"><span class=\"kw3\">FileOpenDialog</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Open Autofuck script\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@DesktopDir</span></span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck (*.atf)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_Save</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileWrite.htm\"><span class=\"kw3\">FileWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileOpen.htm\"><span class=\"kw3\">FileOpen</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileSaveDialog.htm\"><span class=\"kw3\">FileSaveDialog</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Save Autofuck script\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@DesktopDir</span></span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck (*.atf)\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\".atf\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\".atf\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$GUI_EVENT_CLOSE</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Exit</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mCredits</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Copyright by: \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"minx (autoit.de)\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"crashdemons (autoitscript.com)\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _Runn<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Timer</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/TimerInit.htm\"><span class=\"kw3\">TimerInit</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$lStatus</span><span class=\"sy0\">,</span> <span class=\"st0\">\"++ Program started\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$tData</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructCreate.htm\"><span class=\"kw3\">DllStructCreate</span></a><span class=\"br0\">(</span><span class=\"st0\">'BYTE[65536]'</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$aError</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span><span class=\"st0\">'Unmatched closing bracket during search'</span><span class=\"sy0\">,</span><span class=\"st0\">'Unmatched opening bracket during search'</span><span class=\"sy0\">,</span><span class=\"st0\">'Unexpected closing bracket'</span><span class=\"sy0\">,</span><span class=\"st0\">'Data pointer passed left boundary'</span><span class=\"sy0\">,</span><span class=\"st0\">'Data pointer passed right boundary'</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$sError</span><span class=\"sy0\">=</span><span class=\"st0\">''</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$i</span><span class=\"sy0\">=</span>_Run<span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">And</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">6</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$sError</span><span class=\"sy0\">=</span><span class=\"re0\">$aError</span><span class=\"br0\">[</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"br0\">]</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$sError</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <span class=\"st0\">'ERROR: '</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$sError</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'.'</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'Ending Instruction Pointer: '</span><span class=\"sy0\">&amp;</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'Current Data Pointer: '</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$pData</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$lStatus</span><span class=\"sy0\">,</span> <span class=\"st0\">\"++ Program terminated. Runtime: \"</span><span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Round.htm\"><span class=\"kw3\">Round</span></a><span class=\"br0\">(</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/TimerDiff.htm\"><span class=\"kw3\">TimerDiff</span></a><span class=\"br0\">(</span><span class=\"re0\">$Timer</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\"s\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _Run<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStart</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iStart</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">to</span></a> <span class=\"re0\">$iEnd</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"&gt;\"</span><br/>                <span class=\"re0\">$pData</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">=</span><span class=\"nu0\">65536</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"&lt;\"</span><br/>                <span class=\"re0\">$pData</span><span class=\"sy0\">-=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"+\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"-\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\":\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\".\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\";\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$cIn</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">'Autofuck'</span><span class=\"sy0\">,</span><span class=\"st0\">'Enter Number'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Number.htm\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span><span class=\"re0\">$cIn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\",\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$cIn</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">'Autofuck'</span><span class=\"sy0\">,</span><span class=\"st0\">'Enter one ASCII character'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Asc.htm\"><span class=\"kw3\">Asc</span></a><span class=\"br0\">(</span><span class=\"re0\">$cIn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"[\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iStartSub</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iEndSub</span><span class=\"sy0\">=</span>_MatchBracket<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$iEndSub</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><br/>                    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iRet</span><span class=\"sy0\">=</span>_Run<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStartSub</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEndSub</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$iRet</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>                <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"re0\">$iEndSub</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">']'</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"_\"</span><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"/\"</span><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _MatchBracket<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStart</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"re0\">$iStart</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$iEnd</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">'['</span><br/>                <span class=\"re0\">$Open</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">']'</span><br/>                <span class=\"re0\">$Open</span><span class=\"sy0\">-=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$i</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AutoIt", "loc": 134, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">; AutoFucck</span><br/><span class=\"co0\">; A AutoIt Brainfuck Interpreter</span><br/><span class=\"co0\">; by minx </span><br/><span class=\"co0\">; AutoIt Version: 3.3.8.x</span><br/>\u00a0<br/><span class=\"co0\">; Commands:</span><br/><span class=\"co0\">; - \tDEC</span><br/><span class=\"co0\">; +\t\tINC</span><br/><span class=\"co0\">; [\t\tLOOP START</span><br/><span class=\"co0\">; ]\t\tLOOP END</span><br/><span class=\"co0\">; .\t\tOutput cell value as ASCII Chr</span><br/><span class=\"co0\">; ,\t\tInput a ASCII char (cell value = ASCII code)</span><br/><span class=\"co0\">;\u00a0:\t\tOuput cell value as integer</span><br/><span class=\"co0\">;\u00a0;\t\tInput a Integer</span><br/><span class=\"co0\">; _\t\tOutput a single whitespace</span><br/><span class=\"co0\">; / \tOutput an Carriage Return and Line Feed</span><br/>\u00a0<br/><span class=\"co0\">; You can load &amp; save .atf Files.</span><br/>\u00a0<br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;WindowsConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;EditConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;GUIConstants.au3&gt;</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;StaticCOnstants.au3&gt;</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/HotKeySet.htm\"><span class=\"kw3\">HotKeySet</span></a><span class=\"br0\">(</span><span class=\"st0\">\"{F5}\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"_Runn\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$hMain</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICreate.htm\"><span class=\"kw3\">GUICreate</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Autofuck - Real Brainfuck Interpreter\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">600</span><span class=\"sy0\">,</span> <span class=\"nu0\">525</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mMain</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"File\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$mCode</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Code\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mInfo</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenu.htm\"><span class=\"kw3\">GUICtrlCreateMenu</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Info\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mCredits</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Credits\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mInfo</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_New</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"New\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_Open</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Open\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><span class=\"re0\">$mFile_Save</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Save\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mMain</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$mCode_Run</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateMenuItem.htm\"><span class=\"kw3\">GUICtrlCreateMenuItem</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Run [F5]\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$mCode</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$lStatus</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateLabel.htm\"><span class=\"kw3\">GUICtrlCreateLabel</span></a><span class=\"br0\">(</span><span class=\"st0\">\"++ Autofuck started...\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">480</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"re0\">$SS_SUNKEN</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$eCode</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateEdit.htm\"><span class=\"kw3\">GUICtrlCreateEdit</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">350</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><span class=\"re0\">$eConsole</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlCreateEdit.htm\"><span class=\"kw3\">GUICtrlCreateEdit</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">360</span><span class=\"sy0\">,</span> <span class=\"nu0\">590</span><span class=\"sy0\">,</span> <span class=\"nu0\">115</span><span class=\"sy0\">,</span> <span class=\"re0\">$ES_WANTRETURN</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetFont.htm\"><span class=\"kw3\">GUICtrlSetFont</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Default</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Courier New\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUISetState.htm\"><span class=\"kw3\">GUISetState</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"nu0\">1</span><br/>\t<span class=\"re0\">$nMsg</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUIGetMsg.htm\"><span class=\"kw3\">GUIGetMsg</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <span class=\"re0\">$nMsg</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_New</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_Open</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileOpenDialog.htm\"><span class=\"kw3\">FileOpenDialog</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Open Autofuck script\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@DesktopDir</span></span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck (*.atf)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mFile_Save</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileWrite.htm\"><span class=\"kw3\">FileWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileOpen.htm\"><span class=\"kw3\">FileOpen</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/FileSaveDialog.htm\"><span class=\"kw3\">FileSaveDialog</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Save Autofuck script\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@DesktopDir</span></span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck (*.atf)\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\".atf\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\".atf\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$GUI_EVENT_CLOSE</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Exit</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"re0\">$mCredits</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Autofuck\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Copyright by: \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"minx (autoit.de)\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"crashdemons (autoitscript.com)\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _Runn<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Timer</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/TimerInit.htm\"><span class=\"kw3\">TimerInit</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$lStatus</span><span class=\"sy0\">,</span> <span class=\"st0\">\"++ Program started\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$tData</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructCreate.htm\"><span class=\"kw3\">DllStructCreate</span></a><span class=\"br0\">(</span><span class=\"st0\">'BYTE[65536]'</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$aError</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"sy0\">,</span><span class=\"st0\">'Unmatched closing bracket during search'</span><span class=\"sy0\">,</span><span class=\"st0\">'Unmatched opening bracket during search'</span><span class=\"sy0\">,</span><span class=\"st0\">'Unexpected closing bracket'</span><span class=\"sy0\">,</span><span class=\"st0\">'Data pointer passed left boundary'</span><span class=\"sy0\">,</span><span class=\"st0\">'Data pointer passed right boundary'</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$sError</span><span class=\"sy0\">=</span><span class=\"st0\">''</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$i</span><span class=\"sy0\">=</span>_Run<span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eCode</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">And</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">6</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$sError</span><span class=\"sy0\">=</span><span class=\"re0\">$aError</span><span class=\"br0\">[</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"br0\">]</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$sError</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <span class=\"st0\">'ERROR: '</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$sError</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'.'</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'Ending Instruction Pointer: '</span><span class=\"sy0\">&amp;</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"re0\">@CRLF</span><span class=\"sy0\">&amp;</span><span class=\"st0\">'Current Data Pointer: '</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$pData</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$lStatus</span><span class=\"sy0\">,</span> <span class=\"st0\">\"++ Program terminated. Runtime: \"</span><span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Round.htm\"><span class=\"kw3\">Round</span></a><span class=\"br0\">(</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/TimerDiff.htm\"><span class=\"kw3\">TimerDiff</span></a><span class=\"br0\">(</span><span class=\"re0\">$Timer</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\"s\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _Run<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStart</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iStart</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">to</span></a> <span class=\"re0\">$iEnd</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"&gt;\"</span><br/>                <span class=\"re0\">$pData</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">=</span><span class=\"nu0\">65536</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"&lt;\"</span><br/>                <span class=\"re0\">$pData</span><span class=\"sy0\">-=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$pData</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"+\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"-\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\":\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\".\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\";\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$cIn</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">'Autofuck'</span><span class=\"sy0\">,</span><span class=\"st0\">'Enter Number'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Number.htm\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span><span class=\"re0\">$cIn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\",\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$cIn</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">'Autofuck'</span><span class=\"sy0\">,</span><span class=\"st0\">'Enter one ASCII character'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructSetData.htm\"><span class=\"kw3\">DllStructSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Asc.htm\"><span class=\"kw3\">Asc</span></a><span class=\"br0\">(</span><span class=\"re0\">$cIn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"[\"</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iStartSub</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iEndSub</span><span class=\"sy0\">=</span>_MatchBracket<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$iEndSub</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/DllStructGetData.htm\"><span class=\"kw3\">DllStructGetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$tData</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$pData</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><br/>                    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iRet</span><span class=\"sy0\">=</span>_Run<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStartSub</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEndSub</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">@error</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$iRet</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>                <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"re0\">$iEndSub</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">']'</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"_\"</span><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">\"/\"</span><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlSetData.htm\"><span class=\"kw3\">GUICtrlSetData</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/GUICtrlRead.htm\"><span class=\"kw3\">GUICtrlRead</span></a><span class=\"br0\">(</span><span class=\"re0\">$eConsole</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _MatchBracket<span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$iStart</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$iEnd</span><span class=\"sy0\">=</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"re0\">$iStart</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$iEnd</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Switch</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$Code</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">'['</span><br/>                <span class=\"re0\">$Open</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><br/>            <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Case</span></a> <span class=\"st0\">']'</span><br/>                <span class=\"re0\">$Open</span><span class=\"sy0\">-=</span><span class=\"nu0\">1</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$i</span><br/>                <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndSwitch</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Open</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/SetError.htm\"><span class=\"kw3\">SetError</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 82, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tbf=<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>; <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">\"\"</span><br/>\tcompile<span class=\"br0\">(</span>bf<span class=\"br0\">)</span><br/>\texecute<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Strips non-instructions, builds the jump table.</span><br/><span class=\"kw6\">function</span> compile<span class=\"br0\">(</span>s,   i,j,k,f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tc = <span class=\"kw4\">split</span><span class=\"br0\">(</span>s, src, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\tj = <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> c; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>src<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span>\\<span class=\"sy3\">-</span>\\<span class=\"sy3\">+</span>\\<span class=\"br0\">[</span>\\<span class=\"br0\">]</span>\\<span class=\"sy2\">&lt;</span>\\<span class=\"sy2\">&gt;</span>,\\.<span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span><br/>\t\t\tcode<span class=\"br0\">[</span>j<span class=\"sy3\">++</span><span class=\"br0\">]</span> = src<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>src<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tmarks<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>src<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tf = <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>k = j; k <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span>; k<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>k <span class=\"kw1\">in</span> marks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tjump<span class=\"br0\">[</span>k<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tjump<span class=\"br0\">[</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = k <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\tf = <span class=\"nu0\">1</span><br/>\t\t\t\t\tdelete marks<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw5\">print</span> <span class=\"st0\">\"Unmatched ]\"</span><br/>\t\t\t\texit <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> execute<span class=\"br0\">(</span>   pc,p,i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tpc = p = <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>pc <span class=\"kw1\">in</span> code<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ti = code<span class=\"br0\">[</span>pc<span class=\"br0\">]</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><br/>\t\t\tarena<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><br/>\t\t\tarena<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"sy3\">--</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><br/>\t\t\tp<span class=\"sy3\">--</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/>\t\t\tp<span class=\"sy3\">++</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>, arena<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>goteof<span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>gotline<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tgotline = <span class=\"kw5\">getline</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>gotline<span class=\"br0\">)</span> goteof = <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>goteof<span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\t\t\t\t\tline = <span class=\"re0\">$0</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tgotline=<span class=\"nu0\">0</span><br/>\t\t\t\t\tm<span class=\"br0\">[</span>p<span class=\"br0\">]</span>=<span class=\"nu0\">10</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>genord<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;</span><span class=\"nu0\">256</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tord<span class=\"br0\">[</span><span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>,i<span class=\"br0\">)</span><span class=\"br0\">]</span> = i<br/>\t\t\t\t\tgenord=<span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tc = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tline=<span class=\"kw4\">substr</span><span class=\"br0\">(</span>line, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t\tarena<span class=\"br0\">[</span>p<span class=\"br0\">]</span> = ord<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">break</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"[\"</span> <span class=\"sy1\">&amp;&amp;</span> arena<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span><br/>\t\t          <span class=\"br0\">(</span>i <span class=\"sy2\">==</span> <span class=\"st0\">\"]\"</span> <span class=\"sy1\">&amp;&amp;</span> arena<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tpc = jump<span class=\"br0\">[</span>pc<span class=\"br0\">]</span><br/>\t\tpc<span class=\"sy3\">++</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Axe", "loc": 57, "block": "<pre class=\"text highlighted_source\">Lbl BF<br/>r\u2081\u2192P<br/>r\u2082\u2192I<br/>L\u2081\u2192D<br/>Fill(D,768,0)<br/>\u00a0<br/>While {P}<br/> {P}\u2192C<br/> If C='+'<br/>  {D}++<br/> ElseIf C='-'<br/>  {D}--<br/> ElseIf C='&gt;'<br/>  D++<br/> ElseIf C='&lt;'<br/>  D--<br/> ElseIf C='.'<br/>  Disp {D}\u25b6Char<br/> ElseIf C=','<br/>  {I}\u2192{D}<br/>  I++<br/> ElseIf C='['?{D}=0<br/>  NEXT(P)\u2192P<br/> ElseIf C=']'<br/>  PREV(P)\u2192P<br/> End<br/> P++<br/>End<br/>Return<br/>\u00a0<br/>Lbl NEXT<br/>r\u2081++<br/>1\u2192S<br/>While S<br/> If {r\u2081}='['<br/>  S++<br/> ElseIf {r\u2081}=']'<br/>  S--<br/> End<br/> r\u2081++<br/>End<br/>r\u2081<br/>Return<br/>\u00a0<br/>Lbl PREV<br/>r\u2081--<br/>1\u2192S<br/>While S<br/> If {r\u2081}=']'<br/>  S++<br/> ElseIf {r\u2081}='['<br/>  S--<br/> End<br/> r\u2081--<br/>End<br/>r\u2081<br/>Return</pre>"}, {"lang": "BASIC", "loc": 41, "block": "<pre class=\"text highlighted_source\">0 ON NOT T GOTO 20\u00a0: FOR A = T TO L\u00a0: B = PEEK(S + P)\u00a0: ON C%(ASC(MID$(C$, A, T))) GOSUB 1, 2, 3, 4, 5, 8, 6, 7\u00a0: NEXT A\u00a0: END<br/>1 P = P + T\u00a0: ON P &lt; E GOTO 11\u00a0: O = 1E99<br/>2 P = P - T\u00a0: ON P &gt; M GOTO 11\u00a0: O = 1E99<br/>3 B = B + T\u00a0: B = B - (B &gt; U) * B\u00a0: GOTO 9<br/>4 B = B - T\u00a0: B = B - (B &lt; 0) * (B - U)\u00a0: GOTO 9<br/>5 PRINT CHR$(B);\u00a0: RETURN<br/>6 D = T\u00a0: ON NOT B GOTO 10\u00a0: RETURN<br/>7 D = M\u00a0: ON NOT NOT B GOTO 10\u00a0: RETURN<br/>8 GET B$\u00a0: B = LEN(B$)\u00a0: IF B THEN B = ASC(B$)<br/>9 POKE S + P, B\u00a0: RETURN<br/>10 FOR K = D TO 0 STEP 0\u00a0: A = A + D\u00a0: K = K + D%(ASC(MID$(C$, A, T)))\u00a0: NEXT K\u00a0: RETURN<br/>11 RETURN<br/>20 HIMEM: 38401<br/>21 LOMEM: 8185<br/>22 DIM C%(14999)\u00a0: CLEAR<br/>23 POKE 105, PEEK(175)<br/>24 POKE 106, PEEK(176)<br/>25 POKE 107, PEEK(175)<br/>26 POKE 108, PEEK(176)<br/>27 POKE 109, PEEK(175)<br/>28 POKE 110, PEEK(176)<br/>29 HIMEM: 8192<br/>30 T = 1<br/>31 M = -1<br/>32 S = 8192<br/>33 E = 30000<br/>34 U = 255<br/>35 DIM C%(255), D%(255)<br/>43 C%(ASC(\"+\")) = 3<br/>44 C%(ASC(\",\")) = 6<br/>45 C%(ASC(\"-\")) = 4<br/>46 C%(ASC(\".\")) = 5<br/>60 C%(ASC(\"&lt;\")) = 2<br/>62 C%(ASC(\"&gt;\")) = 1<br/>91 C%(ASC(\"[\")) = 7<br/>92 D%(ASC(\"[\")) = 1<br/>93 C%(ASC(\"]\")) = 8<br/>94 D%(ASC(\"]\")) = -1<br/>95 C$ = \"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;---.+++++++..+++.&gt;.&lt;&lt;-.&gt;.+++.------.--------.&gt;+.&gt;++.+++.\"<br/>98 L = LEN(C$)<br/>99 GOTO</pre>"}, {"lang": "BBC BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\">      bf$ = \"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;\" + \\<br/>      \\     \"&gt;---.+++++++..+++.&gt;.&lt;&lt;-.&gt;.+++.------.--------.&gt;+.&gt;++.+++.\"<br/>      PROCbrainfuck(bf$)<br/>      END<br/>\u00a0<br/>      DEF PROCbrainfuck(b$)<br/>      LOCAL B%, K%, M%, P%<br/>      DIM M% LOCAL 65535<br/>      B% = 1\u00a0: REM pointer to string<br/>      K% = 0\u00a0: REM bracket counter<br/>      P% = 0\u00a0: REM pointer to memory<br/>      FOR B% = 1 TO LEN(b$)<br/>        CASE MID$(b$,B%,1) OF<br/>          WHEN \"+\": M%?P% += 1<br/>          WHEN \"-\": M%?P% -= 1<br/>          WHEN \"&gt;\": P% += 1<br/>          WHEN \"&lt;\": P% -= 1<br/>          WHEN \".\": VDU M%?P%<br/>          WHEN \",\": M%?P% = GET<br/>          WHEN \"[\":<br/>            IF M%?P% = 0 THEN<br/>              K% = 1<br/>              B% += 1<br/>              WHILE K%<br/>                IF MID$(b$,B%,1) = \"[\" THEN K% += 1<br/>                IF MID$(b$,B%,1) = \"]\" THEN K% -= 1<br/>                B% += 1<br/>              ENDWHILE<br/>            ENDIF<br/>          WHEN \"]\":<br/>            IF M%?P% &lt;&gt; 0 THEN<br/>              K% = -1<br/>              B% -= 1<br/>              WHILE K%<br/>                IF MID$(b$,B%,1) = \"[\" THEN K% += 1<br/>                IF MID$(b$,B%,1) = \"]\" THEN K% -= 1<br/>                B% -= 1<br/>              ENDWHILE<br/>            ENDIF<br/>        ENDCASE<br/>      NEXT<br/>      ENDPROC<br/>\u00a0</pre>"}, {"lang": "Brat", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\".\"\"X\"r~\"-\"\"\\/^^{vvvv}c!!!-.256.%{vvvv}c!sa\\/\"r~\"+\"\"\\/^^{vvvv}c!!!+.<br/>256.%{vvvv}c!sa\\/\"r~\"[\"\"{\"r~\"]\"\"}{\\/^^{vvvv}c!!!}w!\"r~\"&gt;\"\"+.\"r~\"&lt;\"\"<br/>-.\"r~\"X\"\"\\/^^{vvvv}c!!!L[+]\\/+]\\/+]^^3\\/.+1RAp^\\/+]\\/[-1RA^^-]\\/[-\\/<br/>\"r~\"\\'\\'1 <a class=\"__cf_email__\" data-cfemail=\"c3f2f1fbb183\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{vv0}m[0\"\\/.+pse!vvvv&lt;-sh<br/>\u00a0</pre>"}, {"lang": "Burlesque", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\".\"\"X\"r~\"-\"\"\\/^^{vvvv}c!!!-.256.%{vvvv}c!sa\\/\"r~\"+\"\"\\/^^{vvvv}c!!!+.<br/>256.%{vvvv}c!sa\\/\"r~\"[\"\"{\"r~\"]\"\"}{\\/^^{vvvv}c!!!}w!\"r~\"&gt;\"\"+.\"r~\"&lt;\"\"<br/>-.\"r~\"X\"\"\\/^^{vvvv}c!!!L[+]\\/+]\\/+]^^3\\/.+1RAp^\\/+]\\/[-1RA^^-]\\/[-\\/<br/>\"r~\"\\'\\'1 <a class=\"__cf_email__\" data-cfemail=\"c3f2f1fbb183\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{vv0}m[0\"\\/.+pse!vvvv&lt;-sh<br/>\u00a0</pre>"}, {"lang": "C", "loc": 76, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> brainfuck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Data <span class=\"br0\">[</span>ptr cells<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">inc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">dec</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">dec</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> output<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> data<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> input<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>input <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">]</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd loop<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>d data<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> d<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  d<br/>                  <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>cmd d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> terminate <span class=\"br0\">[</span>data<span class=\"br0\">]</span> data<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> split<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span>cmds<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>split <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing ]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>case cmd<br/>                       \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>c l<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> c <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds <span class=\"st0\">\"[\"</span> l <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       \\<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">recur</span> rest<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds cmd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>split cmds <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span><br/>    terminate<br/>    <span class=\"br0\">(</span>case cmd<br/>          \\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">+</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">-</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">.</span> <span class=\"br0\">(</span>output<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\, <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span>if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing [\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>run <span class=\"br0\">[</span>cmds input<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">binding</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> input <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>println <span class=\"br0\">(</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>Data<span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 76, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> brainfuck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Data <span class=\"br0\">[</span>ptr cells<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">inc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">dec</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">dec</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> output<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> data<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> input<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>input <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">]</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd loop<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>d data<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> d<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  d<br/>                  <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>cmd d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> terminate <span class=\"br0\">[</span>data<span class=\"br0\">]</span> data<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> split<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span>cmds<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>split <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing ]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>case cmd<br/>                       \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>c l<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> c <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds <span class=\"st0\">\"[\"</span> l <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       \\<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">recur</span> rest<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds cmd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>split cmds <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span><br/>    terminate<br/>    <span class=\"br0\">(</span>case cmd<br/>          \\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">+</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">-</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">.</span> <span class=\"br0\">(</span>output<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\, <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span>if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing [\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>run <span class=\"br0\">[</span>cmds input<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">binding</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> input <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>println <span class=\"br0\">(</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>Data<span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 76, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> brainfuck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Data <span class=\"br0\">[</span>ptr cells<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">inc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">dec</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">dec</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> output<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> data<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> input<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>input <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">]</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd loop<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>d data<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> d<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  d<br/>                  <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>cmd d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> terminate <span class=\"br0\">[</span>data<span class=\"br0\">]</span> data<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> split<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span>cmds<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>split <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing ]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>case cmd<br/>                       \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>c l<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> c <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds <span class=\"st0\">\"[\"</span> l <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       \\<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">recur</span> rest<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds cmd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>split cmds <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span><br/>    terminate<br/>    <span class=\"br0\">(</span>case cmd<br/>          \\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">+</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">-</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">.</span> <span class=\"br0\">(</span>output<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\, <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span>if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing [\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>run <span class=\"br0\">[</span>cmds input<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">binding</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> input <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>println <span class=\"br0\">(</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>Data<span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 76, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> brainfuck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defrecord Data <span class=\"br0\">[</span>ptr cells<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">inc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">ptr</span><span class=\"br0\">]</span> <span class=\"kw1\">dec</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inc<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dec<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil <span class=\"kw1\">dec</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> output<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> data<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> input<span class=\"sy0\">-</span>cell <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>input <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">]</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> rest<span class=\"sy0\">-</span>input<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> data <span class=\"br0\">[</span>:<span class=\"me1\">cells</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>next<span class=\"sy0\">-</span>cmd loop<span class=\"sy0\">-</span>cmd<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>data<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>cmd <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>d data<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>get <span class=\"br0\">(</span>:<span class=\"me1\">cells</span> d<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">ptr</span> d<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  d<br/>                  <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>loop<span class=\"sy0\">-</span>cmd d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> terminate <span class=\"br0\">[</span>data<span class=\"br0\">]</span> data<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> split<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span>cmds<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>split <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing ]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>case cmd<br/>                       \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>c l<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> c <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds <span class=\"st0\">\"[\"</span> l <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       \\<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span> loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">recur</span> rest<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span><span class=\"kw1\">str</span> loop<span class=\"sy0\">-</span>cmds cmd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>split cmds <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>cmds <span class=\"br0\">[</span><span class=\"br0\">[</span>cmd <span class=\"sy0\">&amp;</span> rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> cmd<span class=\"br0\">)</span><br/>    terminate<br/>    <span class=\"br0\">(</span>case cmd<br/>          \\<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>ptr <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">+</span> <span class=\"br0\">(</span>inc<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">-</span> <span class=\"br0\">(</span>dec<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"sy0\">.</span> <span class=\"br0\">(</span>output<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\, <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>cell <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">]</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span>if<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span> <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds loop<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          \\<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"invalid commands: missing [\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds rest<span class=\"sy0\">-</span>cmds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compile<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>run <span class=\"br0\">[</span>cmds input<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">binding</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span>input<span class=\"sy0\">*</span> input <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>compile<span class=\"sy0\">-</span>cmds cmds<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>println <span class=\"br0\">(</span>compiled<span class=\"sy0\">-</span>cmds <span class=\"br0\">(</span>Data<span class=\"sy0\">.</span> <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"sy0\">*</span>output<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 183, "block": "<pre class=\"text highlighted_source\">pointer_alpha = 1/0<br/>pointer_numeric = 1/0<br/>tape_behind = ''<br/>tape_ahead = 1/0<br/>tape_pos = 0 # only for debugging<br/>array_behind = 1/0<br/>array_ahead = ''<br/>set_tape_ahead = array_ahead<br/>array_ahead = 1/0<br/>#<br/>shift<br/>  comefrom if array_ahead is array_ahead<br/>  cdr = 1/0<br/>  cdr = array_ahead<br/>  shift_tail = cdr<br/>  new_cell<br/>    comefrom shift if shift_tail is ''<br/>    itoa = 0<br/>    shift_tail = itoa<br/>  car = 1/0<br/>  car = array_ahead<br/>  array_behind = car array_behind<br/>  done = shift_tail<br/>  array_ahead = shift_tail<br/>  comefrom shift if array_ahead is done<br/>\u00a0<br/>set_pointer_alpha = 1/0<br/>set_pointer_alpha<br/>  comefrom if set_pointer_alpha<br/>  atoi = set_pointer_alpha<br/>  cdr = tape_ahead<br/>  set_tape_ahead = set_pointer_alpha cdr<br/>  set_pointer_alpha = 1/0<br/>\u00a0<br/>set_tape_ahead = 1/0<br/>set_pointer_vals<br/>  comefrom if set_tape_ahead<br/>  tape_ahead = set_tape_ahead<br/>  car = tape_ahead<br/>  pointer_alpha = car<br/>  atoi = pointer_alpha<br/>  pointer_numeric = atoi<br/>  set_tape_ahead = 1/0<br/>\u00a0<br/>pointer_change = 1/0<br/>change_pointer_val<br/>  comefrom if pointer_change<br/>  car = tape_ahead<br/>  cdr = tape_ahead<br/>  itoa = pointer_numeric + pointer_change<br/>  set_tape_ahead = itoa cdr<br/>  pointer_change = 1/0<br/>\u00a0<br/>file = 0 # initialize to something other than undefined so jump from file works when read fails<br/>read_path = argv<br/>error_reading_program<br/>  comefrom file if file + 0 is 0<br/>  'Error: cannot read Brainfuck program at \"' read_path '\"'<br/>  ''<br/>\u00a0<br/>program_loaded<br/>  comefrom file if file is file<br/>  program_behind = ''<br/>  program_ahead = file<br/>\u00a0<br/>  run<br/>    comefrom program_loaded<br/>    opcode = 1/0<br/>    opcode_numeric = 1/0<br/>    in_buffer = '' # cf0x10 stdin is line-buffered<br/>    jumping = 0<br/>    moving = 1<br/>    comefrom run<br/>\u00a0<br/>    comefrom execute if opcode_numeric is 0<br/>    ''<br/>    execute<br/>      comefrom run if moving<br/>      # can be useful for debugging:<br/>      #program_ahead moving ':' jumping '@' tape_pos ':' pointer_numeric<br/>      car = program_ahead<br/>      atoi = car<br/>      opcode_numeric = atoi<br/>      opcode = car<br/>      opcode = 1/0<br/>\u00a0<br/>      #<br/>\u00a0<br/>    program_forward<br/>      comefrom execute if moving &gt; 0<br/>      array_behind = program_behind<br/>      array_ahead = 1/0<br/>      array_ahead = program_ahead<br/>      program_behind = array_behind<br/>      program_ahead = array_ahead<br/>\u00a0<br/>      forward_jump<br/>        comefrom execute if opcode is '['<br/>\u00a0<br/>        jump<br/>          comefrom forward_jump if pointer_numeric is 0<br/>          jumping = jumping + 1<br/>          moving = 1<br/>        match_brace<br/>          comefrom forward_jump if jumping &lt; 0<br/>          jumping = jumping + 1<br/>          stop_jump<br/>            comefrom match_brace if jumping is 0<br/>            moving = 1<br/>\u00a0<br/>    program_backward<br/>      comefrom execute if moving &lt; 0<br/>      array_behind = program_ahead<br/>      array_ahead = 1/0<br/>      array_ahead = program_behind<br/>      program_behind = array_ahead<br/>      program_ahead = array_behind<br/>\u00a0<br/>      backward_jump<br/>        comefrom execute if opcode is ']'<br/>\u00a0<br/>        jump<br/>          comefrom backward_jump if pointer_numeric &gt; 0<br/>          jumping = jumping - 1<br/>          moving = -1<br/>        match_brace<br/>          comefrom backward_jump if jumping &gt; 0<br/>          jumping = jumping - 1<br/>          stop_jump<br/>            comefrom match_brace if jumping is 0<br/>            moving = 1<br/>\u00a0<br/>    op<br/>      comefrom execute if opcode<br/>\u00a0<br/>      moving = 1<br/>      do_op = opcode<br/>      comefrom op if jumping<br/>      #<br/>      forward<br/>        comefrom op if do_op is '&gt;'<br/>        tape_pos = tape_pos + 1<br/>        array_ahead = 1/0<br/>        array_behind = tape_behind<br/>        array_ahead = tape_ahead<br/>        tape_behind = array_behind<br/>        set_tape_ahead = array_ahead<br/>      backward<br/>        comefrom op if do_op is '&lt;'<br/>        tape_pos = tape_pos - 1<br/>        array_ahead = 1/0<br/>        array_behind = tape_ahead<br/>        array_ahead = tape_behind<br/>        tape_behind = array_ahead<br/>        set_tape_ahead = array_behind<br/>\u00a0<br/>      increment<br/>        comefrom op if do_op is '+'<br/>        pointer_change = 1<br/>      decrement<br/>        comefrom op if do_op is '-'<br/>        pointer_change = -1<br/>\u00a0<br/>      print<br/>        comefrom op if do_op is '.'<br/>        pointer_alpha...<br/>      read<br/>        comefrom op if do_op is ','<br/>        #<br/>        cdr = 1/0<br/>        cdr = in_buffer<br/>        car = in_buffer<br/>        set_pointer_alpha = car<br/>        cdr = in_buffer<br/>        in_buffer = cdr<br/>        comefrom stdin if stdin + 0 is 0<br/>        #<br/>        block_for_input<br/>          comefrom read if cdr is ''<br/>          stdin = ''<br/>          in_buffer = stdin<br/>          cdr = in_buffer<br/>          comefrom stdin if stdin + 0 is 0</pre>"}, {"lang": "Comefrom0x10", "loc": 183, "block": "<pre class=\"text highlighted_source\">pointer_alpha = 1/0<br/>pointer_numeric = 1/0<br/>tape_behind = ''<br/>tape_ahead = 1/0<br/>tape_pos = 0 # only for debugging<br/>array_behind = 1/0<br/>array_ahead = ''<br/>set_tape_ahead = array_ahead<br/>array_ahead = 1/0<br/>#<br/>shift<br/>  comefrom if array_ahead is array_ahead<br/>  cdr = 1/0<br/>  cdr = array_ahead<br/>  shift_tail = cdr<br/>  new_cell<br/>    comefrom shift if shift_tail is ''<br/>    itoa = 0<br/>    shift_tail = itoa<br/>  car = 1/0<br/>  car = array_ahead<br/>  array_behind = car array_behind<br/>  done = shift_tail<br/>  array_ahead = shift_tail<br/>  comefrom shift if array_ahead is done<br/>\u00a0<br/>set_pointer_alpha = 1/0<br/>set_pointer_alpha<br/>  comefrom if set_pointer_alpha<br/>  atoi = set_pointer_alpha<br/>  cdr = tape_ahead<br/>  set_tape_ahead = set_pointer_alpha cdr<br/>  set_pointer_alpha = 1/0<br/>\u00a0<br/>set_tape_ahead = 1/0<br/>set_pointer_vals<br/>  comefrom if set_tape_ahead<br/>  tape_ahead = set_tape_ahead<br/>  car = tape_ahead<br/>  pointer_alpha = car<br/>  atoi = pointer_alpha<br/>  pointer_numeric = atoi<br/>  set_tape_ahead = 1/0<br/>\u00a0<br/>pointer_change = 1/0<br/>change_pointer_val<br/>  comefrom if pointer_change<br/>  car = tape_ahead<br/>  cdr = tape_ahead<br/>  itoa = pointer_numeric + pointer_change<br/>  set_tape_ahead = itoa cdr<br/>  pointer_change = 1/0<br/>\u00a0<br/>file = 0 # initialize to something other than undefined so jump from file works when read fails<br/>read_path = argv<br/>error_reading_program<br/>  comefrom file if file + 0 is 0<br/>  'Error: cannot read Brainfuck program at \"' read_path '\"'<br/>  ''<br/>\u00a0<br/>program_loaded<br/>  comefrom file if file is file<br/>  program_behind = ''<br/>  program_ahead = file<br/>\u00a0<br/>  run<br/>    comefrom program_loaded<br/>    opcode = 1/0<br/>    opcode_numeric = 1/0<br/>    in_buffer = '' # cf0x10 stdin is line-buffered<br/>    jumping = 0<br/>    moving = 1<br/>    comefrom run<br/>\u00a0<br/>    comefrom execute if opcode_numeric is 0<br/>    ''<br/>    execute<br/>      comefrom run if moving<br/>      # can be useful for debugging:<br/>      #program_ahead moving ':' jumping '@' tape_pos ':' pointer_numeric<br/>      car = program_ahead<br/>      atoi = car<br/>      opcode_numeric = atoi<br/>      opcode = car<br/>      opcode = 1/0<br/>\u00a0<br/>      #<br/>\u00a0<br/>    program_forward<br/>      comefrom execute if moving &gt; 0<br/>      array_behind = program_behind<br/>      array_ahead = 1/0<br/>      array_ahead = program_ahead<br/>      program_behind = array_behind<br/>      program_ahead = array_ahead<br/>\u00a0<br/>      forward_jump<br/>        comefrom execute if opcode is '['<br/>\u00a0<br/>        jump<br/>          comefrom forward_jump if pointer_numeric is 0<br/>          jumping = jumping + 1<br/>          moving = 1<br/>        match_brace<br/>          comefrom forward_jump if jumping &lt; 0<br/>          jumping = jumping + 1<br/>          stop_jump<br/>            comefrom match_brace if jumping is 0<br/>            moving = 1<br/>\u00a0<br/>    program_backward<br/>      comefrom execute if moving &lt; 0<br/>      array_behind = program_ahead<br/>      array_ahead = 1/0<br/>      array_ahead = program_behind<br/>      program_behind = array_ahead<br/>      program_ahead = array_behind<br/>\u00a0<br/>      backward_jump<br/>        comefrom execute if opcode is ']'<br/>\u00a0<br/>        jump<br/>          comefrom backward_jump if pointer_numeric &gt; 0<br/>          jumping = jumping - 1<br/>          moving = -1<br/>        match_brace<br/>          comefrom backward_jump if jumping &gt; 0<br/>          jumping = jumping - 1<br/>          stop_jump<br/>            comefrom match_brace if jumping is 0<br/>            moving = 1<br/>\u00a0<br/>    op<br/>      comefrom execute if opcode<br/>\u00a0<br/>      moving = 1<br/>      do_op = opcode<br/>      comefrom op if jumping<br/>      #<br/>      forward<br/>        comefrom op if do_op is '&gt;'<br/>        tape_pos = tape_pos + 1<br/>        array_ahead = 1/0<br/>        array_behind = tape_behind<br/>        array_ahead = tape_ahead<br/>        tape_behind = array_behind<br/>        set_tape_ahead = array_ahead<br/>      backward<br/>        comefrom op if do_op is '&lt;'<br/>        tape_pos = tape_pos - 1<br/>        array_ahead = 1/0<br/>        array_behind = tape_ahead<br/>        array_ahead = tape_behind<br/>        tape_behind = array_ahead<br/>        set_tape_ahead = array_behind<br/>\u00a0<br/>      increment<br/>        comefrom op if do_op is '+'<br/>        pointer_change = 1<br/>      decrement<br/>        comefrom op if do_op is '-'<br/>        pointer_change = -1<br/>\u00a0<br/>      print<br/>        comefrom op if do_op is '.'<br/>        pointer_alpha...<br/>      read<br/>        comefrom op if do_op is ','<br/>        #<br/>        cdr = 1/0<br/>        cdr = in_buffer<br/>        car = in_buffer<br/>        set_pointer_alpha = car<br/>        cdr = in_buffer<br/>        in_buffer = cdr<br/>        comefrom stdin if stdin + 0 is 0<br/>        #<br/>        block_for_input<br/>          comefrom read if cdr is ''<br/>          stdin = ''<br/>          in_buffer = stdin<br/>          cdr = in_buffer<br/>          comefrom stdin if stdin + 0 is 0</pre>"}, {"lang": "Common Lisp", "loc": 243, "block": "<pre class=\"text highlighted_source\">#Import some functions<br/>clojure('count', 1) -&gt; size<br/>clojure('nth', 2) -&gt; charAt<br/>clojure('inc', 1) -&gt; inc<br/>clojure('dec', 1) -&gt; dec<br/>clojure('char', 1) -&gt; char<br/>clojure('int', 1) -&gt; int<br/>clojure('read-line', 0) -&gt; readLine<br/>\u00a0<br/>#The characters we will need<br/>charAt(\"\\n\", 0) -&gt; newLine<br/>charAt(\"@\", 0) -&gt; exitCommand<br/>charAt(\"+\", 0) -&gt; incrCommand<br/>charAt(\"-\", 0) -&gt; decrCommand<br/>charAt(\"&lt;\", 0) -&gt; shlCommand<br/>charAt(\"&gt;\", 0) -&gt; shrCommand<br/>charAt(\".\", 0) -&gt; printCommand<br/>charAt(\",\", 0) -&gt; inputCommand<br/>charAt(\"[\", 0) -&gt; repeatCommand<br/>charAt(\"]\", 0) -&gt; endCommand<br/>\u00a0<br/>#Read a character from a line of input.<br/>fun readChar -&gt; return<br/>(<br/>\treadLine() -&gt; line<br/>\tsize(line) -&gt; length<br/>\u00a0<br/>\t#Return the ith character and a continuation<br/>\tfun nextFromLine -&gt; i, return<br/>\t(<br/>\t\t'='(i, length) -&gt; eol<br/>\t\tif (eol) -&gt;<br/>\t\t(<br/>\t\t\treturn(newLine, readChar)\t#end of line<br/>\t\t)<br/>\t\t|<br/>\t\t\tcharAt(line, i) -&gt; value<br/>\t\t\tinc(i) -&gt; i<br/>\t\t\tfun next (-&gt; return) nextFromLine(i, return) | next<br/>\t\t\treturn(value, next)<br/>\t)<br/>\t| nextFromLine<br/>\u00a0<br/>\tnextFromLine(0, return)\t#first character (position 0)<br/>)<br/>| readChar<br/>\u00a0<br/>#Define a buffer as a value and a left and right stack<br/>fun empty (-&gt; return, throw) throw(\"Error: out of bounds\") | empty<br/>fun fill (-&gt; return, throw) return(0, fill) | fill<br/>\u00a0<br/>fun makeBuffer -&gt; value, left, right, return<br/>(<br/>\tfun buffer (-&gt; return) return(value, left, right) | buffer<br/>\treturn(buffer)<br/>)<br/>| makeBuffer<br/>\u00a0<br/>fun push -&gt; value, stack, return<br/>(<br/>\tfun newStack (-&gt; return, throw) return(value, stack) | newStack<br/>\treturn(newStack)<br/>)<br/>| push<br/>\u00a0<br/>#Brainf*** operations<br/>fun noop -&gt; buffer, input, return<br/>(<br/>\treturn(buffer, input)<br/>)<br/>| noop<br/>\u00a0<br/>fun selectOp -&gt; command, return<br/>(<br/>\t'='(command, incrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun increment -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tinc(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| increment<br/>\t\treturn(increment)<br/>\t)<br/>\t|<br/>\t'='(command, decrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun decrement -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tdec(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| decrement<br/>\t\treturn(decrement)<br/>\t)<br/>\t|<br/>\t'='(command, shlCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftLeft -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, right) -&gt; right<br/>\t\t\tleft() -&gt; value, left<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftLeft<br/>\t\treturn(shiftLeft)<br/>\t)<br/>\t|<br/>\t'='(command, shrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftRight -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, left) -&gt; left<br/>\t\t\tright() -&gt; value, right<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftRight<br/>\t\treturn(shiftRight)<br/>\t)<br/>\t|<br/>\t'='(command, printCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun putChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tchar(value) -&gt; value<br/>\t\t\t'print'(value) -&gt; dummy<br/>\t\t\t'flush'() -&gt; dummy<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| putChar<br/>\t\treturn(putChar)<br/>\t)<br/>\t|<br/>\t'='(command, inputCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun getChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tinput() -&gt; letter, input<br/>\t\t\tint(letter) -&gt; letter<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tmakeBuffer(letter, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| getChar<br/>\t\treturn(getChar)<br/>\t)<br/>\t|<br/>\treturn(noop)<br/>)<br/>| selectOp<br/>\u00a0<br/>#Repeat until zero operation<br/>fun whileLoop -&gt; buffer, input, continue, break<br/>(<br/>\tbuffer() -&gt; value, left, right<br/>\t'='(value, 0) -&gt; zero<br/>\tif (zero) -&gt;<br/>\t(<br/>\t\tbreak(buffer, input)<br/>\t)<br/>\t|<br/>\t\tcontinue(buffer, input) -&gt; buffer, input<br/>\t\twhileLoop(buffer, input, continue, break)<br/>)<br/>| whileLoop<br/>\u00a0<br/>#Convert the Brainf*** program into dodo0 instructions<br/>fun compile -&gt; input, endmark, return<br/>(<br/>\tinput() -&gt; command, input<br/>\u00a0<br/>\t'='(command, endmark) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\treturn(noop, input)\t#the end, stop compiling<br/>\t)<br/>\t|<br/>\t\t#Put in sequence the current operation and the rest of the program<br/>\t\tfun chainOp -&gt; op, input, return<br/>\t\t(<br/>\t\t\tcompile(input, endmark) -&gt; program, input<br/>\t\t\tfun exec -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\top(buffer, input) -&gt; buffer, input<br/>\t\t\t\tprogram(buffer, input, return)<br/>\t\t\t)<br/>\t\t\t| exec<br/>\t\t\treturn(exec, input)<br/>\t\t)<br/>\t\t| chainOp<br/>\u00a0<br/>\t\t'='(command, repeatCommand) -&gt; eq<br/>\t\tif (eq) -&gt;<br/>\t\t(<br/>\t\t\tcompile(input, endCommand) -&gt; body, input\t#compile until \"]\"<br/>\u00a0<br/>\t\t\t#Repeat the loop body until zero<br/>\t\t\tfun repeat -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\twhileLoop(buffer, input, body, return)<br/>\t\t\t)<br/>\t\t\t| repeat<br/>\t\t\tchainOp(repeat, input, return)<br/>\t\t)<br/>\t\t|<br/>\t\t\tselectOp(command) -&gt; op<br/>\t\t\tchainOp(op, input, return)<br/>)<br/>| compile<br/>\u00a0<br/>#Main program<br/>compile(readChar, exitCommand) -&gt; program, input<br/>makeBuffer(0, empty, fill) -&gt; buffer<br/>input() -&gt; nl, input\t#consume newline from input<br/>\u00a0<br/>#Execute the program instructions<br/>program(buffer, input) -&gt; buffer, input<br/>exit()</pre>"}, {"lang": "D", "loc": 243, "block": "<pre class=\"text highlighted_source\">#Import some functions<br/>clojure('count', 1) -&gt; size<br/>clojure('nth', 2) -&gt; charAt<br/>clojure('inc', 1) -&gt; inc<br/>clojure('dec', 1) -&gt; dec<br/>clojure('char', 1) -&gt; char<br/>clojure('int', 1) -&gt; int<br/>clojure('read-line', 0) -&gt; readLine<br/>\u00a0<br/>#The characters we will need<br/>charAt(\"\\n\", 0) -&gt; newLine<br/>charAt(\"@\", 0) -&gt; exitCommand<br/>charAt(\"+\", 0) -&gt; incrCommand<br/>charAt(\"-\", 0) -&gt; decrCommand<br/>charAt(\"&lt;\", 0) -&gt; shlCommand<br/>charAt(\"&gt;\", 0) -&gt; shrCommand<br/>charAt(\".\", 0) -&gt; printCommand<br/>charAt(\",\", 0) -&gt; inputCommand<br/>charAt(\"[\", 0) -&gt; repeatCommand<br/>charAt(\"]\", 0) -&gt; endCommand<br/>\u00a0<br/>#Read a character from a line of input.<br/>fun readChar -&gt; return<br/>(<br/>\treadLine() -&gt; line<br/>\tsize(line) -&gt; length<br/>\u00a0<br/>\t#Return the ith character and a continuation<br/>\tfun nextFromLine -&gt; i, return<br/>\t(<br/>\t\t'='(i, length) -&gt; eol<br/>\t\tif (eol) -&gt;<br/>\t\t(<br/>\t\t\treturn(newLine, readChar)\t#end of line<br/>\t\t)<br/>\t\t|<br/>\t\t\tcharAt(line, i) -&gt; value<br/>\t\t\tinc(i) -&gt; i<br/>\t\t\tfun next (-&gt; return) nextFromLine(i, return) | next<br/>\t\t\treturn(value, next)<br/>\t)<br/>\t| nextFromLine<br/>\u00a0<br/>\tnextFromLine(0, return)\t#first character (position 0)<br/>)<br/>| readChar<br/>\u00a0<br/>#Define a buffer as a value and a left and right stack<br/>fun empty (-&gt; return, throw) throw(\"Error: out of bounds\") | empty<br/>fun fill (-&gt; return, throw) return(0, fill) | fill<br/>\u00a0<br/>fun makeBuffer -&gt; value, left, right, return<br/>(<br/>\tfun buffer (-&gt; return) return(value, left, right) | buffer<br/>\treturn(buffer)<br/>)<br/>| makeBuffer<br/>\u00a0<br/>fun push -&gt; value, stack, return<br/>(<br/>\tfun newStack (-&gt; return, throw) return(value, stack) | newStack<br/>\treturn(newStack)<br/>)<br/>| push<br/>\u00a0<br/>#Brainf*** operations<br/>fun noop -&gt; buffer, input, return<br/>(<br/>\treturn(buffer, input)<br/>)<br/>| noop<br/>\u00a0<br/>fun selectOp -&gt; command, return<br/>(<br/>\t'='(command, incrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun increment -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tinc(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| increment<br/>\t\treturn(increment)<br/>\t)<br/>\t|<br/>\t'='(command, decrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun decrement -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tdec(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| decrement<br/>\t\treturn(decrement)<br/>\t)<br/>\t|<br/>\t'='(command, shlCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftLeft -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, right) -&gt; right<br/>\t\t\tleft() -&gt; value, left<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftLeft<br/>\t\treturn(shiftLeft)<br/>\t)<br/>\t|<br/>\t'='(command, shrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftRight -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, left) -&gt; left<br/>\t\t\tright() -&gt; value, right<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftRight<br/>\t\treturn(shiftRight)<br/>\t)<br/>\t|<br/>\t'='(command, printCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun putChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tchar(value) -&gt; value<br/>\t\t\t'print'(value) -&gt; dummy<br/>\t\t\t'flush'() -&gt; dummy<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| putChar<br/>\t\treturn(putChar)<br/>\t)<br/>\t|<br/>\t'='(command, inputCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun getChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tinput() -&gt; letter, input<br/>\t\t\tint(letter) -&gt; letter<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tmakeBuffer(letter, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| getChar<br/>\t\treturn(getChar)<br/>\t)<br/>\t|<br/>\treturn(noop)<br/>)<br/>| selectOp<br/>\u00a0<br/>#Repeat until zero operation<br/>fun whileLoop -&gt; buffer, input, continue, break<br/>(<br/>\tbuffer() -&gt; value, left, right<br/>\t'='(value, 0) -&gt; zero<br/>\tif (zero) -&gt;<br/>\t(<br/>\t\tbreak(buffer, input)<br/>\t)<br/>\t|<br/>\t\tcontinue(buffer, input) -&gt; buffer, input<br/>\t\twhileLoop(buffer, input, continue, break)<br/>)<br/>| whileLoop<br/>\u00a0<br/>#Convert the Brainf*** program into dodo0 instructions<br/>fun compile -&gt; input, endmark, return<br/>(<br/>\tinput() -&gt; command, input<br/>\u00a0<br/>\t'='(command, endmark) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\treturn(noop, input)\t#the end, stop compiling<br/>\t)<br/>\t|<br/>\t\t#Put in sequence the current operation and the rest of the program<br/>\t\tfun chainOp -&gt; op, input, return<br/>\t\t(<br/>\t\t\tcompile(input, endmark) -&gt; program, input<br/>\t\t\tfun exec -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\top(buffer, input) -&gt; buffer, input<br/>\t\t\t\tprogram(buffer, input, return)<br/>\t\t\t)<br/>\t\t\t| exec<br/>\t\t\treturn(exec, input)<br/>\t\t)<br/>\t\t| chainOp<br/>\u00a0<br/>\t\t'='(command, repeatCommand) -&gt; eq<br/>\t\tif (eq) -&gt;<br/>\t\t(<br/>\t\t\tcompile(input, endCommand) -&gt; body, input\t#compile until \"]\"<br/>\u00a0<br/>\t\t\t#Repeat the loop body until zero<br/>\t\t\tfun repeat -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\twhileLoop(buffer, input, body, return)<br/>\t\t\t)<br/>\t\t\t| repeat<br/>\t\t\tchainOp(repeat, input, return)<br/>\t\t)<br/>\t\t|<br/>\t\t\tselectOp(command) -&gt; op<br/>\t\t\tchainOp(op, input, return)<br/>)<br/>| compile<br/>\u00a0<br/>#Main program<br/>compile(readChar, exitCommand) -&gt; program, input<br/>makeBuffer(0, empty, fill) -&gt; buffer<br/>input() -&gt; nl, input\t#consume newline from input<br/>\u00a0<br/>#Execute the program instructions<br/>program(buffer, input) -&gt; buffer, input<br/>exit()</pre>"}, {"lang": "dodo0", "loc": 243, "block": "<pre class=\"text highlighted_source\">#Import some functions<br/>clojure('count', 1) -&gt; size<br/>clojure('nth', 2) -&gt; charAt<br/>clojure('inc', 1) -&gt; inc<br/>clojure('dec', 1) -&gt; dec<br/>clojure('char', 1) -&gt; char<br/>clojure('int', 1) -&gt; int<br/>clojure('read-line', 0) -&gt; readLine<br/>\u00a0<br/>#The characters we will need<br/>charAt(\"\\n\", 0) -&gt; newLine<br/>charAt(\"@\", 0) -&gt; exitCommand<br/>charAt(\"+\", 0) -&gt; incrCommand<br/>charAt(\"-\", 0) -&gt; decrCommand<br/>charAt(\"&lt;\", 0) -&gt; shlCommand<br/>charAt(\"&gt;\", 0) -&gt; shrCommand<br/>charAt(\".\", 0) -&gt; printCommand<br/>charAt(\",\", 0) -&gt; inputCommand<br/>charAt(\"[\", 0) -&gt; repeatCommand<br/>charAt(\"]\", 0) -&gt; endCommand<br/>\u00a0<br/>#Read a character from a line of input.<br/>fun readChar -&gt; return<br/>(<br/>\treadLine() -&gt; line<br/>\tsize(line) -&gt; length<br/>\u00a0<br/>\t#Return the ith character and a continuation<br/>\tfun nextFromLine -&gt; i, return<br/>\t(<br/>\t\t'='(i, length) -&gt; eol<br/>\t\tif (eol) -&gt;<br/>\t\t(<br/>\t\t\treturn(newLine, readChar)\t#end of line<br/>\t\t)<br/>\t\t|<br/>\t\t\tcharAt(line, i) -&gt; value<br/>\t\t\tinc(i) -&gt; i<br/>\t\t\tfun next (-&gt; return) nextFromLine(i, return) | next<br/>\t\t\treturn(value, next)<br/>\t)<br/>\t| nextFromLine<br/>\u00a0<br/>\tnextFromLine(0, return)\t#first character (position 0)<br/>)<br/>| readChar<br/>\u00a0<br/>#Define a buffer as a value and a left and right stack<br/>fun empty (-&gt; return, throw) throw(\"Error: out of bounds\") | empty<br/>fun fill (-&gt; return, throw) return(0, fill) | fill<br/>\u00a0<br/>fun makeBuffer -&gt; value, left, right, return<br/>(<br/>\tfun buffer (-&gt; return) return(value, left, right) | buffer<br/>\treturn(buffer)<br/>)<br/>| makeBuffer<br/>\u00a0<br/>fun push -&gt; value, stack, return<br/>(<br/>\tfun newStack (-&gt; return, throw) return(value, stack) | newStack<br/>\treturn(newStack)<br/>)<br/>| push<br/>\u00a0<br/>#Brainf*** operations<br/>fun noop -&gt; buffer, input, return<br/>(<br/>\treturn(buffer, input)<br/>)<br/>| noop<br/>\u00a0<br/>fun selectOp -&gt; command, return<br/>(<br/>\t'='(command, incrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun increment -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tinc(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| increment<br/>\t\treturn(increment)<br/>\t)<br/>\t|<br/>\t'='(command, decrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun decrement -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tdec(value) -&gt; value<br/>\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| decrement<br/>\t\treturn(decrement)<br/>\t)<br/>\t|<br/>\t'='(command, shlCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftLeft -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, right) -&gt; right<br/>\t\t\tleft() -&gt; value, left<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftLeft<br/>\t\treturn(shiftLeft)<br/>\t)<br/>\t|<br/>\t'='(command, shrCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun shiftRight -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tpush(value, left) -&gt; left<br/>\t\t\tright() -&gt; value, right<br/>\t\t\t(<br/>\t\t\t\tmakeBuffer(value, left, right) -&gt; buffer<br/>\t\t\t\treturn(buffer, input)<br/>\t\t\t)<br/>\t\t\t| message<br/>\t\t\t\tprintln(message) -&gt;<br/>\t\t\t\texit()<br/>\t\t)<br/>\t\t| shiftRight<br/>\t\treturn(shiftRight)<br/>\t)<br/>\t|<br/>\t'='(command, printCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun putChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tchar(value) -&gt; value<br/>\t\t\t'print'(value) -&gt; dummy<br/>\t\t\t'flush'() -&gt; dummy<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| putChar<br/>\t\treturn(putChar)<br/>\t)<br/>\t|<br/>\t'='(command, inputCommand) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\tfun getChar -&gt; buffer, input, return<br/>\t\t(<br/>\t\t\tinput() -&gt; letter, input<br/>\t\t\tint(letter) -&gt; letter<br/>\t\t\tbuffer() -&gt; value, left, right<br/>\t\t\tmakeBuffer(letter, left, right) -&gt; buffer<br/>\t\t\treturn(buffer, input)<br/>\t\t)<br/>\t\t| getChar<br/>\t\treturn(getChar)<br/>\t)<br/>\t|<br/>\treturn(noop)<br/>)<br/>| selectOp<br/>\u00a0<br/>#Repeat until zero operation<br/>fun whileLoop -&gt; buffer, input, continue, break<br/>(<br/>\tbuffer() -&gt; value, left, right<br/>\t'='(value, 0) -&gt; zero<br/>\tif (zero) -&gt;<br/>\t(<br/>\t\tbreak(buffer, input)<br/>\t)<br/>\t|<br/>\t\tcontinue(buffer, input) -&gt; buffer, input<br/>\t\twhileLoop(buffer, input, continue, break)<br/>)<br/>| whileLoop<br/>\u00a0<br/>#Convert the Brainf*** program into dodo0 instructions<br/>fun compile -&gt; input, endmark, return<br/>(<br/>\tinput() -&gt; command, input<br/>\u00a0<br/>\t'='(command, endmark) -&gt; eq<br/>\tif (eq) -&gt;<br/>\t(<br/>\t\treturn(noop, input)\t#the end, stop compiling<br/>\t)<br/>\t|<br/>\t\t#Put in sequence the current operation and the rest of the program<br/>\t\tfun chainOp -&gt; op, input, return<br/>\t\t(<br/>\t\t\tcompile(input, endmark) -&gt; program, input<br/>\t\t\tfun exec -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\top(buffer, input) -&gt; buffer, input<br/>\t\t\t\tprogram(buffer, input, return)<br/>\t\t\t)<br/>\t\t\t| exec<br/>\t\t\treturn(exec, input)<br/>\t\t)<br/>\t\t| chainOp<br/>\u00a0<br/>\t\t'='(command, repeatCommand) -&gt; eq<br/>\t\tif (eq) -&gt;<br/>\t\t(<br/>\t\t\tcompile(input, endCommand) -&gt; body, input\t#compile until \"]\"<br/>\u00a0<br/>\t\t\t#Repeat the loop body until zero<br/>\t\t\tfun repeat -&gt; buffer, input, return<br/>\t\t\t(<br/>\t\t\t\twhileLoop(buffer, input, body, return)<br/>\t\t\t)<br/>\t\t\t| repeat<br/>\t\t\tchainOp(repeat, input, return)<br/>\t\t)<br/>\t\t|<br/>\t\t\tselectOp(command) -&gt; op<br/>\t\t\tchainOp(op, input, return)<br/>)<br/>| compile<br/>\u00a0<br/>#Main program<br/>compile(readChar, exitCommand) -&gt; program, input<br/>makeBuffer(0, empty, fill) -&gt; buffer<br/>input() -&gt; nl, input\t#consume newline from input<br/>\u00a0<br/>#Execute the program instructions<br/>program(buffer, input) -&gt; buffer, input<br/>exit()</pre>"}, {"lang": "E", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!It will suffer.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!A twisted interpreter.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> RUN<span class=\"br0\">(</span>PROG,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Code and data are separate!</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> PROG\t<span class=\"co1\">!So, this is the code.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And this a work area.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t\t<span class=\"co1\">!The code of the moment.</span><br/>         <span class=\"kw3\">INTEGER</span> I,D\t\t<span class=\"co1\">!Fingers to an instruction, and to data.</span><br/>          D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the store.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the prog.</span><br/>\u00a0<br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Off the end yet?</span><br/>            C <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Load the opcode fingered by I.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one. The classic.</span><br/>            <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Now decode the instruction.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place right.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place left.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Add one to the fingered datum.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Subtract one.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Write a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>; READ <span class=\"br0\">(</span>KBD,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Read a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, surge forward.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, retreat.</span><br/>             <span class=\"kw1\">CASE</span> <span class=\"kw1\">DEFAULT</span>\t\t\t\t<span class=\"co1\">!For all others,</span><br/>\t\t  \t\t\t\t\t\t<span class=\"co1\">!Do nothing.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">SELECT</span>\t\t\t\t<span class=\"co1\">!That was simple.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!See what comes next.</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A1,$<span class=\"br0\">)</span>\t<span class=\"co1\">!One character, no advance to the next line.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Now for an assistant.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> SEEK<span class=\"br0\">(</span>WAY<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for the BA that matches the AB.</span><br/>           <span class=\"kw3\">INTEGER</span> WAY\t\t<span class=\"co1\">!Which direction: \u00b11.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> AB,BA\t<span class=\"co1\">!The dancers.</span><br/>           <span class=\"kw3\">INTEGER</span> INDEEP\t<span class=\"co1\">!Nested brackets are allowed.</span><br/>            INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None have been counted.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Back to where C came from PROG.</span><br/>            AB <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The starter.</span><br/>            BA <span class=\"sy0\">=</span> <span class=\"st0\">\"[ ]\"</span><span class=\"br0\">(</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stopper.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Out of code!\"</span>\t<span class=\"co1\">!Perhaps not!</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">AB</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A starter? (Even if backwards)</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">BA</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A stopper?</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!A case statement requires constants.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we out of it yet?</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> WAY\t\t\t<span class=\"co1\">!No. Move.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Back to 0!\"</span>\t\t\t<span class=\"co1\">!Perhaps not.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But if we are out of the nest,</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance to the following instruction, either WAY.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SEEK\t<span class=\"co1\">!Seek, and one shall surely find.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> RUN\t<span class=\"co1\">!So much for that.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!Simple in itself.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!A tester.</span><br/>      <span class=\"kw3\">USE</span> BRAIN\t\t<span class=\"co1\">!In a rather bad way.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> STORE<span class=\"br0\">(</span><span class=\"nu0\">30000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Probably rather more than is needed.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HELLOWORLD\t<span class=\"co1\">!Believe it or not...</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HELLOWORLD <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\"</span><br/>     <span class=\"nu0\">1</span> <span class=\"sy0\">//</span><span class=\"st0\">\" &gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------\"</span><br/>     <span class=\"nu0\">2</span> <span class=\"sy0\">//</span><span class=\"st0\">\".--------.&gt;&gt;+.&gt;++.\"</span><span class=\"br0\">)</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      STORE <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Scrub.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> RUN<span class=\"br0\">(</span>HELLOWORLD,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Have a go.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Enough.</span></pre>"}, {"lang": "Elena", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!It will suffer.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!A twisted interpreter.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> RUN<span class=\"br0\">(</span>PROG,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Code and data are separate!</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> PROG\t<span class=\"co1\">!So, this is the code.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And this a work area.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t\t<span class=\"co1\">!The code of the moment.</span><br/>         <span class=\"kw3\">INTEGER</span> I,D\t\t<span class=\"co1\">!Fingers to an instruction, and to data.</span><br/>          D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the store.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the prog.</span><br/>\u00a0<br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Off the end yet?</span><br/>            C <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Load the opcode fingered by I.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one. The classic.</span><br/>            <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Now decode the instruction.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place right.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place left.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Add one to the fingered datum.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Subtract one.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Write a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>; READ <span class=\"br0\">(</span>KBD,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Read a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, surge forward.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, retreat.</span><br/>             <span class=\"kw1\">CASE</span> <span class=\"kw1\">DEFAULT</span>\t\t\t\t<span class=\"co1\">!For all others,</span><br/>\t\t  \t\t\t\t\t\t<span class=\"co1\">!Do nothing.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">SELECT</span>\t\t\t\t<span class=\"co1\">!That was simple.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!See what comes next.</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A1,$<span class=\"br0\">)</span>\t<span class=\"co1\">!One character, no advance to the next line.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Now for an assistant.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> SEEK<span class=\"br0\">(</span>WAY<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for the BA that matches the AB.</span><br/>           <span class=\"kw3\">INTEGER</span> WAY\t\t<span class=\"co1\">!Which direction: \u00b11.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> AB,BA\t<span class=\"co1\">!The dancers.</span><br/>           <span class=\"kw3\">INTEGER</span> INDEEP\t<span class=\"co1\">!Nested brackets are allowed.</span><br/>            INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None have been counted.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Back to where C came from PROG.</span><br/>            AB <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The starter.</span><br/>            BA <span class=\"sy0\">=</span> <span class=\"st0\">\"[ ]\"</span><span class=\"br0\">(</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stopper.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Out of code!\"</span>\t<span class=\"co1\">!Perhaps not!</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">AB</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A starter? (Even if backwards)</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">BA</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A stopper?</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!A case statement requires constants.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we out of it yet?</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> WAY\t\t\t<span class=\"co1\">!No. Move.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Back to 0!\"</span>\t\t\t<span class=\"co1\">!Perhaps not.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But if we are out of the nest,</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance to the following instruction, either WAY.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SEEK\t<span class=\"co1\">!Seek, and one shall surely find.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> RUN\t<span class=\"co1\">!So much for that.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!Simple in itself.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!A tester.</span><br/>      <span class=\"kw3\">USE</span> BRAIN\t\t<span class=\"co1\">!In a rather bad way.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> STORE<span class=\"br0\">(</span><span class=\"nu0\">30000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Probably rather more than is needed.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HELLOWORLD\t<span class=\"co1\">!Believe it or not...</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HELLOWORLD <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\"</span><br/>     <span class=\"nu0\">1</span> <span class=\"sy0\">//</span><span class=\"st0\">\" &gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------\"</span><br/>     <span class=\"nu0\">2</span> <span class=\"sy0\">//</span><span class=\"st0\">\".--------.&gt;&gt;+.&gt;++.\"</span><span class=\"br0\">)</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      STORE <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Scrub.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> RUN<span class=\"br0\">(</span>HELLOWORLD,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Have a go.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Enough.</span></pre>"}, {"lang": "Erlang", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!It will suffer.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!A twisted interpreter.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> RUN<span class=\"br0\">(</span>PROG,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Code and data are separate!</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> PROG\t<span class=\"co1\">!So, this is the code.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And this a work area.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t\t<span class=\"co1\">!The code of the moment.</span><br/>         <span class=\"kw3\">INTEGER</span> I,D\t\t<span class=\"co1\">!Fingers to an instruction, and to data.</span><br/>          D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the store.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the prog.</span><br/>\u00a0<br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Off the end yet?</span><br/>            C <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Load the opcode fingered by I.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one. The classic.</span><br/>            <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Now decode the instruction.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place right.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place left.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Add one to the fingered datum.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Subtract one.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Write a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>; READ <span class=\"br0\">(</span>KBD,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Read a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, surge forward.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, retreat.</span><br/>             <span class=\"kw1\">CASE</span> <span class=\"kw1\">DEFAULT</span>\t\t\t\t<span class=\"co1\">!For all others,</span><br/>\t\t  \t\t\t\t\t\t<span class=\"co1\">!Do nothing.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">SELECT</span>\t\t\t\t<span class=\"co1\">!That was simple.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!See what comes next.</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A1,$<span class=\"br0\">)</span>\t<span class=\"co1\">!One character, no advance to the next line.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Now for an assistant.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> SEEK<span class=\"br0\">(</span>WAY<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for the BA that matches the AB.</span><br/>           <span class=\"kw3\">INTEGER</span> WAY\t\t<span class=\"co1\">!Which direction: \u00b11.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> AB,BA\t<span class=\"co1\">!The dancers.</span><br/>           <span class=\"kw3\">INTEGER</span> INDEEP\t<span class=\"co1\">!Nested brackets are allowed.</span><br/>            INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None have been counted.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Back to where C came from PROG.</span><br/>            AB <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The starter.</span><br/>            BA <span class=\"sy0\">=</span> <span class=\"st0\">\"[ ]\"</span><span class=\"br0\">(</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stopper.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Out of code!\"</span>\t<span class=\"co1\">!Perhaps not!</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">AB</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A starter? (Even if backwards)</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">BA</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A stopper?</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!A case statement requires constants.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we out of it yet?</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> WAY\t\t\t<span class=\"co1\">!No. Move.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Back to 0!\"</span>\t\t\t<span class=\"co1\">!Perhaps not.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But if we are out of the nest,</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance to the following instruction, either WAY.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SEEK\t<span class=\"co1\">!Seek, and one shall surely find.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> RUN\t<span class=\"co1\">!So much for that.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!Simple in itself.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!A tester.</span><br/>      <span class=\"kw3\">USE</span> BRAIN\t\t<span class=\"co1\">!In a rather bad way.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> STORE<span class=\"br0\">(</span><span class=\"nu0\">30000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Probably rather more than is needed.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HELLOWORLD\t<span class=\"co1\">!Believe it or not...</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HELLOWORLD <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\"</span><br/>     <span class=\"nu0\">1</span> <span class=\"sy0\">//</span><span class=\"st0\">\" &gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------\"</span><br/>     <span class=\"nu0\">2</span> <span class=\"sy0\">//</span><span class=\"st0\">\".--------.&gt;&gt;+.&gt;++.\"</span><span class=\"br0\">)</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      STORE <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Scrub.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> RUN<span class=\"br0\">(</span>HELLOWORLD,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Have a go.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Enough.</span></pre>"}, {"lang": "Forth", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!It will suffer.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!A twisted interpreter.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> RUN<span class=\"br0\">(</span>PROG,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Code and data are separate!</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> PROG\t<span class=\"co1\">!So, this is the code.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And this a work area.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t\t<span class=\"co1\">!The code of the moment.</span><br/>         <span class=\"kw3\">INTEGER</span> I,D\t\t<span class=\"co1\">!Fingers to an instruction, and to data.</span><br/>          D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the store.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the prog.</span><br/>\u00a0<br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Off the end yet?</span><br/>            C <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Load the opcode fingered by I.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one. The classic.</span><br/>            <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Now decode the instruction.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place right.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place left.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Add one to the fingered datum.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Subtract one.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Write a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>; READ <span class=\"br0\">(</span>KBD,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Read a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, surge forward.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, retreat.</span><br/>             <span class=\"kw1\">CASE</span> <span class=\"kw1\">DEFAULT</span>\t\t\t\t<span class=\"co1\">!For all others,</span><br/>\t\t  \t\t\t\t\t\t<span class=\"co1\">!Do nothing.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">SELECT</span>\t\t\t\t<span class=\"co1\">!That was simple.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!See what comes next.</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A1,$<span class=\"br0\">)</span>\t<span class=\"co1\">!One character, no advance to the next line.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Now for an assistant.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> SEEK<span class=\"br0\">(</span>WAY<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for the BA that matches the AB.</span><br/>           <span class=\"kw3\">INTEGER</span> WAY\t\t<span class=\"co1\">!Which direction: \u00b11.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> AB,BA\t<span class=\"co1\">!The dancers.</span><br/>           <span class=\"kw3\">INTEGER</span> INDEEP\t<span class=\"co1\">!Nested brackets are allowed.</span><br/>            INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None have been counted.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Back to where C came from PROG.</span><br/>            AB <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The starter.</span><br/>            BA <span class=\"sy0\">=</span> <span class=\"st0\">\"[ ]\"</span><span class=\"br0\">(</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stopper.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Out of code!\"</span>\t<span class=\"co1\">!Perhaps not!</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">AB</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A starter? (Even if backwards)</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">BA</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A stopper?</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!A case statement requires constants.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we out of it yet?</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> WAY\t\t\t<span class=\"co1\">!No. Move.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Back to 0!\"</span>\t\t\t<span class=\"co1\">!Perhaps not.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But if we are out of the nest,</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance to the following instruction, either WAY.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SEEK\t<span class=\"co1\">!Seek, and one shall surely find.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> RUN\t<span class=\"co1\">!So much for that.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!Simple in itself.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!A tester.</span><br/>      <span class=\"kw3\">USE</span> BRAIN\t\t<span class=\"co1\">!In a rather bad way.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> STORE<span class=\"br0\">(</span><span class=\"nu0\">30000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Probably rather more than is needed.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HELLOWORLD\t<span class=\"co1\">!Believe it or not...</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HELLOWORLD <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\"</span><br/>     <span class=\"nu0\">1</span> <span class=\"sy0\">//</span><span class=\"st0\">\" &gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------\"</span><br/>     <span class=\"nu0\">2</span> <span class=\"sy0\">//</span><span class=\"st0\">\".--------.&gt;&gt;+.&gt;++.\"</span><span class=\"br0\">)</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      STORE <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Scrub.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> RUN<span class=\"br0\">(</span>HELLOWORLD,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Have a go.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Enough.</span></pre>"}, {"lang": "Fortran", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!It will suffer.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG,KBD<br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!A twisted interpreter.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> RUN<span class=\"br0\">(</span>PROG,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Code and data are separate!</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> PROG\t<span class=\"co1\">!So, this is the code.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And this a work area.</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t\t<span class=\"co1\">!The code of the moment.</span><br/>         <span class=\"kw3\">INTEGER</span> I,D\t\t<span class=\"co1\">!Fingers to an instruction, and to data.</span><br/>          D <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the store.</span><br/>          I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!First element of the prog.</span><br/>\u00a0<br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Off the end yet?</span><br/>            C <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Load the opcode fingered by I.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Advance one. The classic.</span><br/>            <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Now decode the instruction.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place right.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span>; D <span class=\"sy0\">=</span> D <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!Move the data finger one place left.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Add one to the fingered datum.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>; STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Subtract one.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Write a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>; READ <span class=\"br0\">(</span>KBD,<span class=\"nu0\">1</span><span class=\"br0\">)</span> STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Read a character.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, surge forward.</span><br/>             <span class=\"kw1\">CASE</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span>STORE<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">NE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> SEEK<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Conditionally, retreat.</span><br/>             <span class=\"kw1\">CASE</span> <span class=\"kw1\">DEFAULT</span>\t\t\t\t<span class=\"co1\">!For all others,</span><br/>\t\t  \t\t\t\t\t\t<span class=\"co1\">!Do nothing.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">SELECT</span>\t\t\t\t<span class=\"co1\">!That was simple.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!See what comes next.</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A1,$<span class=\"br0\">)</span>\t<span class=\"co1\">!One character, no advance to the next line.</span><br/>         <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Now for an assistant.</span><br/>          <span class=\"kw1\">SUBROUTINE</span> SEEK<span class=\"br0\">(</span>WAY<span class=\"br0\">)</span>\t<span class=\"co1\">!Look for the BA that matches the AB.</span><br/>           <span class=\"kw3\">INTEGER</span> WAY\t\t<span class=\"co1\">!Which direction: \u00b11.</span><br/>           <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> AB,BA\t<span class=\"co1\">!The dancers.</span><br/>           <span class=\"kw3\">INTEGER</span> INDEEP\t<span class=\"co1\">!Nested brackets are allowed.</span><br/>            INDEEP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None have been counted.</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Back to where C came from PROG.</span><br/>            AB <span class=\"sy0\">=</span> PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!The starter.</span><br/>            BA <span class=\"sy0\">=</span> <span class=\"st0\">\"[ ]\"</span><span class=\"br0\">(</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>WAY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stopper.</span><br/>    <span class=\"nu0\">1</span>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>PROG<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Out of code!\"</span>\t<span class=\"co1\">!Perhaps not!</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">AB</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!A starter? (Even if backwards)</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROG<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">BA</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A stopper?</span><br/>              INDEEP <span class=\"sy0\">=</span> INDEEP <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yep.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t\t<span class=\"co1\">!A case statement requires constants.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>INDEEP.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we out of it yet?</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> WAY\t\t\t<span class=\"co1\">!No. Move.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!And try again.</span><br/>              <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Back to 0!\"</span>\t\t\t<span class=\"co1\">!Perhaps not.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!But if we are out of the nest,</span><br/>            I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance to the following instruction, either WAY.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SEEK\t<span class=\"co1\">!Seek, and one shall surely find.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> RUN\t<span class=\"co1\">!So much for that.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BRAIN\t<span class=\"co1\">!Simple in itself.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!A tester.</span><br/>      <span class=\"kw3\">USE</span> BRAIN\t\t<span class=\"co1\">!In a rather bad way.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> STORE<span class=\"br0\">(</span><span class=\"nu0\">30000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Probably rather more than is needed.</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> HELLOWORLD\t<span class=\"co1\">!Believe it or not...</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>HELLOWORLD <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\"</span><br/>     <span class=\"nu0\">1</span> <span class=\"sy0\">//</span><span class=\"st0\">\" &gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------\"</span><br/>     <span class=\"nu0\">2</span> <span class=\"sy0\">//</span><span class=\"st0\">\".--------.&gt;&gt;+.&gt;++.\"</span><span class=\"br0\">)</span><br/>      KBD <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>\t\t<span class=\"co1\">!Standard input.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>      STORE <span class=\"sy0\">=</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Scrub.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> RUN<span class=\"br0\">(</span>HELLOWORLD,STORE<span class=\"br0\">)</span>\t<span class=\"co1\">!Have a go.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Enough.</span></pre>"}, {"lang": "F#", "loc": 102, "block": "<pre class=\"text highlighted_source\"># Here . and , print and read an integer, not a character<br/>Brainfuck\u00a0:= function(prog)<br/>  local pointer, stack, leftcells, rightcells, instr, stackptr, len,<br/>    output, input, jump, i, j, set, get;<br/>  input\u00a0:= InputTextUser();<br/>  output\u00a0:= OutputTextUser();<br/>  instr\u00a0:= 1;<br/>  pointer\u00a0:= 0;<br/>  leftcells\u00a0:= [ ];<br/>  rightcells\u00a0:= [ ];<br/>  stack\u00a0:= [ ];<br/>  stackptr\u00a0:= 0;<br/>  len\u00a0:= Length(prog);<br/>  jump\u00a0:= [ ];<br/>\u00a0<br/>  get\u00a0:= function()<br/>    local p;<br/>    if pointer &gt;= 0 then<br/>      p\u00a0:= pointer + 1;<br/>      if IsBound(rightcells[p]) then<br/>        return rightcells[p];<br/>      else<br/>        return 0;<br/>      fi;<br/>    else<br/>      p\u00a0:= -pointer;<br/>      if IsBound(leftcells[p]) then<br/>        return leftcells[p];<br/>      else<br/>        return 0;<br/>      fi;<br/>    fi;<br/>  end;<br/>\u00a0<br/>  set\u00a0:= function(value)<br/>    local p;<br/>    if pointer &gt;= 0 then<br/>      p\u00a0:= pointer + 1;<br/>      if value = 0 then<br/>        Unbind(rightcells[p]);<br/>      else<br/>        rightcells[p]\u00a0:= value;<br/>      fi;<br/>    else<br/>      p\u00a0:= -pointer;<br/>      if value = 0 then<br/>        Unbind(leftcells[p]);<br/>      else<br/>        leftcells[p]\u00a0:= value;<br/>      fi;<br/>    fi;<br/>  end;<br/>\u00a0<br/>  # find jumps for faster execution<br/>  for i in [1 .. len] do<br/>    if prog[i] = '[' then<br/>      stackptr\u00a0:= stackptr + 1;<br/>      stack[stackptr]\u00a0:= i;<br/>    elif prog[i] = ']' then<br/>      j\u00a0:= stack[stackptr];<br/>      stackptr\u00a0:= stackptr - 1;<br/>      jump[i]\u00a0:= j;<br/>      jump[j]\u00a0:= i;<br/>    fi;<br/>  od;<br/>\u00a0<br/>  while instr &lt;= len do<br/>    c\u00a0:= prog[instr];<br/>    if c = '&lt;' then<br/>      pointer\u00a0:= pointer - 1;<br/>    elif c = '&gt;' then<br/>      pointer\u00a0:= pointer + 1;<br/>    elif c = '+' then<br/>      set(get() + 1);<br/>    elif c = '-' then<br/>      set(get() - 1);<br/>    elif c = '.' then<br/>      WriteLine(output, String(get()));<br/>    elif c = ',' then<br/>      set(Int(Chomp(ReadLine(input))));<br/>    elif c = '[' then<br/>      if get() = 0 then<br/>        instr\u00a0:= jump[instr];<br/>      fi;<br/>    elif c = ']' then<br/>      if get() &lt;&gt; 0 then<br/>        instr\u00a0:= jump[instr];<br/>      fi;<br/>    fi;<br/>    instr\u00a0:= instr + 1;<br/>  od;<br/>  CloseStream(input);<br/>  CloseStream(output);<br/>  # for debugging purposes, return last state<br/>  return [leftcells, rightcells, pointer];<br/>end;<br/>\u00a0<br/># An addition<br/>Brainfuck(\"+++.&lt;+++++.[-&gt;+&lt;]&gt;.\"); <br/># 3<br/># 5<br/># 8</pre>"}, {"lang": "GAP", "loc": 102, "block": "<pre class=\"text highlighted_source\"># Here . and , print and read an integer, not a character<br/>Brainfuck\u00a0:= function(prog)<br/>  local pointer, stack, leftcells, rightcells, instr, stackptr, len,<br/>    output, input, jump, i, j, set, get;<br/>  input\u00a0:= InputTextUser();<br/>  output\u00a0:= OutputTextUser();<br/>  instr\u00a0:= 1;<br/>  pointer\u00a0:= 0;<br/>  leftcells\u00a0:= [ ];<br/>  rightcells\u00a0:= [ ];<br/>  stack\u00a0:= [ ];<br/>  stackptr\u00a0:= 0;<br/>  len\u00a0:= Length(prog);<br/>  jump\u00a0:= [ ];<br/>\u00a0<br/>  get\u00a0:= function()<br/>    local p;<br/>    if pointer &gt;= 0 then<br/>      p\u00a0:= pointer + 1;<br/>      if IsBound(rightcells[p]) then<br/>        return rightcells[p];<br/>      else<br/>        return 0;<br/>      fi;<br/>    else<br/>      p\u00a0:= -pointer;<br/>      if IsBound(leftcells[p]) then<br/>        return leftcells[p];<br/>      else<br/>        return 0;<br/>      fi;<br/>    fi;<br/>  end;<br/>\u00a0<br/>  set\u00a0:= function(value)<br/>    local p;<br/>    if pointer &gt;= 0 then<br/>      p\u00a0:= pointer + 1;<br/>      if value = 0 then<br/>        Unbind(rightcells[p]);<br/>      else<br/>        rightcells[p]\u00a0:= value;<br/>      fi;<br/>    else<br/>      p\u00a0:= -pointer;<br/>      if value = 0 then<br/>        Unbind(leftcells[p]);<br/>      else<br/>        leftcells[p]\u00a0:= value;<br/>      fi;<br/>    fi;<br/>  end;<br/>\u00a0<br/>  # find jumps for faster execution<br/>  for i in [1 .. len] do<br/>    if prog[i] = '[' then<br/>      stackptr\u00a0:= stackptr + 1;<br/>      stack[stackptr]\u00a0:= i;<br/>    elif prog[i] = ']' then<br/>      j\u00a0:= stack[stackptr];<br/>      stackptr\u00a0:= stackptr - 1;<br/>      jump[i]\u00a0:= j;<br/>      jump[j]\u00a0:= i;<br/>    fi;<br/>  od;<br/>\u00a0<br/>  while instr &lt;= len do<br/>    c\u00a0:= prog[instr];<br/>    if c = '&lt;' then<br/>      pointer\u00a0:= pointer - 1;<br/>    elif c = '&gt;' then<br/>      pointer\u00a0:= pointer + 1;<br/>    elif c = '+' then<br/>      set(get() + 1);<br/>    elif c = '-' then<br/>      set(get() - 1);<br/>    elif c = '.' then<br/>      WriteLine(output, String(get()));<br/>    elif c = ',' then<br/>      set(Int(Chomp(ReadLine(input))));<br/>    elif c = '[' then<br/>      if get() = 0 then<br/>        instr\u00a0:= jump[instr];<br/>      fi;<br/>    elif c = ']' then<br/>      if get() &lt;&gt; 0 then<br/>        instr\u00a0:= jump[instr];<br/>      fi;<br/>    fi;<br/>    instr\u00a0:= instr + 1;<br/>  od;<br/>  CloseStream(input);<br/>  CloseStream(output);<br/>  # for debugging purposes, return last state<br/>  return [leftcells, rightcells, pointer];<br/>end;<br/>\u00a0<br/># An addition<br/>Brainfuck(\"+++.&lt;+++++.[-&gt;+&lt;]&gt;.\"); <br/># 3<br/># 5<br/># 8</pre>"}, {"lang": "Go", "loc": 55, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// example program is current Brain**** solution to</span><br/>    <span class=\"co1\">// Hello world/Text task.  only requires 10 bytes of data store!</span><br/>    bf<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"co2\">`++++++++++[&gt;+&gt;+++&gt;++++&gt;+++++++&gt;++++++++&gt;+++++++++&gt;++<br/>++++++++&gt;+++++++++++&gt;++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+.&gt;&gt;&gt;<br/>&gt;+..&lt;.&lt;++++++++.&gt;&gt;&gt;+.&lt;&lt;+.&lt;&lt;&lt;&lt;++++.&lt;++.&gt;&gt;&gt;+++++++.&gt;&gt;&gt;.+++.<br/>&lt;+++++++.--------.&lt;&lt;&lt;&lt;&lt;+.&lt;+++.---.`</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> bf<span class=\"sy1\">(</span>dLen <span class=\"kw4\">int</span><span class=\"sy1\">,</span> is <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    ds <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> dLen<span class=\"sy1\">)</span> <span class=\"co1\">// data store</span><br/>    <span class=\"kw1\">var</span> dp <span class=\"kw4\">int</span>               <span class=\"co1\">// data pointer</span><br/>    <span class=\"kw1\">for</span> ip <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> ip &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>is<span class=\"sy1\">);</span> ip<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> is<span class=\"sy1\">[</span>ip<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'&gt;'</span><span class=\"sy1\">:</span><br/>            dp<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'&lt;'</span><span class=\"sy1\">:</span><br/>            dp<span class=\"sy2\">--</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy1\">:</span><br/>            ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy1\">:</span><br/>            ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">]</span><span class=\"sy2\">--</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'.'</span><span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy1\">,</span> ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">])</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">','</span><span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Scanf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy1\">,</span> &amp;ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">])</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'['</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> nc <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> nc &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>                    ip<span class=\"sy2\">++</span><br/>                    <span class=\"kw1\">if</span> is<span class=\"sy1\">[</span>ip<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'['</span> <span class=\"sy1\">{</span><br/>                        nc<span class=\"sy2\">++</span><br/>                    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> is<span class=\"sy1\">[</span>ip<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">']'</span> <span class=\"sy1\">{</span><br/>                        nc<span class=\"sy2\">--</span><br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">']'</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">if</span> ds<span class=\"sy1\">[</span>dp<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> nc <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> nc &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>                    ip<span class=\"sy2\">--</span><br/>                    <span class=\"kw1\">if</span> is<span class=\"sy1\">[</span>ip<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">']'</span> <span class=\"sy1\">{</span><br/>                        nc<span class=\"sy2\">++</span><br/>                    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> is<span class=\"sy1\">[</span>ip<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'['</span> <span class=\"sy1\">{</span><br/>                        nc<span class=\"sy2\">--</span><br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 44, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> BrainfuckProgram <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> program <span class=\"sy0\">=</span> <span class=\"st0\">''</span>, memory <span class=\"sy0\">=</span> <span class=\"br0\">[</span>:<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> instructionPointer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, dataPointer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20execute\"><span class=\"kw9\">execute</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>instructionPointer <span class=\"sy0\">&lt;</span> program.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a><span class=\"br0\">(</span>program<span class=\"br0\">[</span>instructionPointer<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'&gt;'</span>: dataPointer<span class=\"sy0\">++;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'&lt;'</span>: dataPointer<span class=\"sy0\">--;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'+'</span>: memory<span class=\"br0\">[</span>dataPointer<span class=\"br0\">]</span> <span class=\"sy0\">=</span> memoryValue <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'-'</span>: memory<span class=\"br0\">[</span>dataPointer<span class=\"br0\">]</span> <span class=\"sy0\">=</span> memoryValue <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">','</span>: memory<span class=\"br0\">[</span>dataPointer<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'.'</span>: <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Character&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">toChars</span><span class=\"br0\">(</span>memoryValue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'['</span>: handleLoopStart<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">']'</span>: handleLoopEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> getMemoryValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> memory<span class=\"br0\">[</span>dataPointer<span class=\"br0\">]</span> <span class=\"sy0\">?</span>: <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> handleLoopStart<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>memoryValue<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> depth <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>instructionPointer <span class=\"sy0\">&lt;</span> program.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a><span class=\"br0\">(</span>program<span class=\"br0\">[</span>instructionPointer<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'['</span>: depth<span class=\"sy0\">++;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">']'</span>: <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>depth<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>            <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=IllegalStateException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">IllegalStateException</span></a><span class=\"br0\">(</span><span class=\"st0\">'Could not find matching end bracket'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> handleLoopEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> depth <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>instructionPointer <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a><span class=\"br0\">(</span>program<span class=\"br0\">[</span><span class=\"sy0\">--</span>instructionPointer<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">']'</span>: depth<span class=\"sy0\">++;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'['</span>: <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>depth<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=IllegalStateException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">IllegalStateException</span></a><span class=\"br0\">(</span><span class=\"st0\">'Could not find matching start bracket'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "Icon and Unicon", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "J", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "Java", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "JavaScript", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "Julia", "loc": 38, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function execute(src)<br/>    pointers = Dict{Int,Int}()<br/>    stack    = Int[]<br/>    for (ptr, opcode) in enumerate(src)<br/>        if opcode == '[' push!(stack, ptr) end<br/>        if opcode == ']'<br/>            if isempty(stack)<br/>                src = src[1:ptr]<br/>                break<br/>            end<br/>            sptr = pop!(stack)<br/>            pointers[ptr], pointers[sptr] = sptr, ptr<br/>        end<br/>    end<br/>    if\u00a0! isempty(stack) error(\"unclosed loops at $stack\") end<br/>    tape = DefaultDict{Int,Int}(0)<br/>    cell, ptr = 0, 1<br/>    while ptr \u2264 length(src)<br/>        opcode = src[ptr]<br/>        if     opcode == '&gt;' cell += 1<br/>        elseif opcode == '&lt;' cell -= 1<br/>        elseif opcode == '+' tape[cell] += 1<br/>        elseif opcode == '-' tape[cell] -= 1<br/>        elseif opcode == ',' tape[cell] = Int(read(STDIN, 1))<br/>        elseif opcode == '.' print(STDOUT, Char(tape[cell]))<br/>        elseif (opcode == '[' &amp;&amp; tape[cell] == 0) ||<br/>               (opcode == ']' &amp;&amp; tape[cell]\u00a0!= 0) ptr = pointers[ptr]<br/>        end<br/>        ptr += 1<br/>    end<br/>end<br/>\u00a0<br/>const src = \"\"\"\\<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"\"\"<br/>execute(src)</pre>"}, {"lang": "Kotlin", "loc": 51, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Brainf<span class=\"sy0\">__</span>k<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prog<span class=\"sy0\">:</span> String, memSize<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mem <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>memSize<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ip <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> memVal get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> mem.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span>dp<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    fun execute<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>ip <span class=\"sy0\">&lt;</span> prog.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>prog<span class=\"br0\">[</span>ip++<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">'&gt;'</span> -<span class=\"sy0\">&gt;</span> dp++<br/>                <span class=\"st0\">'&lt;'</span> -<span class=\"sy0\">&gt;</span> dp--<br/>                <span class=\"st0\">'+'</span> -<span class=\"sy0\">&gt;</span> mem<span class=\"br0\">[</span>dp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> memVal + <span class=\"nu0\">1</span><br/>                <span class=\"st0\">'-'</span> -<span class=\"sy0\">&gt;</span> mem<span class=\"br0\">[</span>dp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> memVal - <span class=\"nu0\">1</span><br/>                <span class=\"st0\">','</span> -<span class=\"sy0\">&gt;</span> mem<span class=\"br0\">[</span>dp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> System.`in`.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">'.'</span> -<span class=\"sy0\">&gt;</span> print<span class=\"br0\">(</span>memVal.<span class=\"me1\">toChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">'['</span> -<span class=\"sy0\">&gt;</span> handleLoopStart<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">']'</span> -<span class=\"sy0\">&gt;</span> handleLoopEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun handleLoopStart<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>memVal <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> depth <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>ip <span class=\"sy0\">&lt;</span> prog.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>prog<span class=\"br0\">[</span>ip++<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">'['</span> -<span class=\"sy0\">&gt;</span> depth++<br/>                <span class=\"st0\">']'</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>--depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalStateException<span class=\"br0\">(</span><span class=\"st0\">\"Could not find matching end bracket\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun handleLoopEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> depth <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>ip <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>prog<span class=\"br0\">[</span>--ip<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">']'</span> -<span class=\"sy0\">&gt;</span> depth++<br/>                <span class=\"st0\">'['</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>--depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalStateException<span class=\"br0\">(</span><span class=\"st0\">\"Could not find matching start bracket\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prog <span class=\"sy0\">=</span> <span class=\"st0\">\"++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.\"</span><br/>    Brainf<span class=\"sy0\">__</span>k<span class=\"br0\">(</span>prog, <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">execute</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Limbo", "loc": 103, "block": "<pre class=\"text highlighted_source\">implement Bf;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>include \"draw.m\";<br/>\u00a0<br/>Bf: module {<br/>\tinit: fn(nil: ref Draw-&gt;Context, args: list of string);<br/>\tARENASZ: con 1024 * 1024;<br/>\tEXIT, INC, DEC, JZ, JNZ, INCP, DECP, READ, WRITE: con iota;<br/>};<br/>\u00a0<br/>init(nil: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\targs = tl args;<br/>\tif(args == nil || len args\u00a0!= 1) {<br/>\t\tsys-&gt;fprint(sys-&gt;fildes(2), \"usage: bf program\");<br/>\t\traise \"fail:usage\";<br/>\t}<br/>\tcode\u00a0:= compile(hd args);<br/>\texecute(code, array[ARENASZ] of { * =&gt; byte 0 });<br/>}<br/>\u00a0<br/>compile(p: string): array of int<br/>{<br/>\tmarks: list of int = nil;<br/>\tcode\u00a0:= array[len p * 2 + 1] of { * =&gt; EXIT };<br/>\tpc\u00a0:= 0;<br/>\tfor(i\u00a0:= 0; i &lt; len p; i++) {<br/>\t\tcase p[i] {<br/>\t\t'-' =&gt; code[pc++] = DEC;<br/>\t\t'+' =&gt; code[pc++] = INC;<br/>\t\t'&lt;' =&gt; code[pc++] = DECP;<br/>\t\t'&gt;' =&gt; code[pc++] = INCP;<br/>\t\t',' =&gt; code[pc++] = READ;<br/>\t\t'.' =&gt; code[pc++] = WRITE;<br/>\t\t'[' =&gt;<br/>\t\t\tcode[pc++] = JZ;<br/>\t\t\tmarks = pc++\u00a0:: marks;<br/>\t\t']' =&gt;<br/>\t\t\tif(marks == nil) {<br/>\t\t\t\tsys-&gt;fprint(sys-&gt;fildes(2), \"bf: unmatched ']' at character\u00a0%d.\", pc);<br/>\t\t\t\traise \"fail:errors\";<br/>\t\t\t}<br/>\t\t\tc\u00a0:= hd marks;<br/>\t\t\tmarks = tl marks;<br/>\t\t\tcode[pc++] = JNZ;<br/>\t\t\tcode[c] = pc;<br/>\t\t\tcode[pc++] = c;<br/>\t\t}<br/>\t}<br/>\tif(marks\u00a0!= nil) {<br/>\t\tsys-&gt;fprint(sys-&gt;fildes(2), \"bf: unmatched '['.\");<br/>\t\traise \"fail:errors\";<br/>\t}<br/>\treturn code;<br/>}<br/>\u00a0<br/>execute(code: array of int, arena: array of byte)<br/>{<br/>\tpc\u00a0:= 0;<br/>\tp\u00a0:= 0;<br/>\tbuf\u00a0:= array[1] of byte;<br/>\tstopreading\u00a0:= 0;<br/>\tfor(;;) {<br/>\t\tcase code[pc] {<br/>\t\tDEC =&gt; arena[p]--;<br/>\t\tINC =&gt; arena[p]++;<br/>\t\tDECP =&gt;<br/>\t\t\tp--;<br/>\t\t\tif(p &lt; 0)<br/>\t\t\t\tp = len arena - 1;<br/>\t\tINCP =&gt;<br/>\t\t\tp = (p + 1)\u00a0% len arena;<br/>\t\tREAD =&gt;<br/>\t\t\tif(!stopreading) {<br/>\t\t\t\tn\u00a0:= sys-&gt;read(sys-&gt;fildes(0), buf, 1);<br/>\t\t\t\tif(n &lt; 1) {<br/>\t\t\t\t\tarena[p] = byte 0;<br/>\t\t\t\t\tstopreading = 1;<br/>\t\t\t\t} else {<br/>\t\t\t\t\tarena[p] = buf[0];<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\tWRITE =&gt;<br/>\t\t\tbuf[0] = arena[p];<br/>\t\t\tsys-&gt;write(sys-&gt;fildes(1), buf, 1);<br/>\t\tJNZ =&gt;<br/>\t\t\tif(arena[p]\u00a0!= byte 0)<br/>\t\t\t\tpc = code[pc + 1];<br/>\t\t\telse<br/>\t\t\t\tpc++;<br/>\t\tJZ =&gt;<br/>\t\t\tif(arena[p] == byte 0)<br/>\t\t\t\tpc = code[pc + 1];<br/>\t\t\telse<br/>\t\t\t\tpc++;<br/>\t\tEXIT =&gt; return;<br/>\t\t}<br/>\t\tpc++;<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 21, "block": "<pre class=\"text highlighted_source\">bf[program_, input_]\u00a0:=<br/>  Module[{p = Characters[program], pp = 0, m, mp = 0, bc = 0,<br/>      instr = StringToStream[input]},<br/>    m[_] = 0;<br/>    While[pp &lt; <a class=\"__cf_email__\" data-cfemail=\"a5e9c0cbc2d1cde5d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<br/>      pp++;<br/>      Switch[p[[pp]],<br/>        \"&gt;\", mp++,<br/>        \"&lt;\", mp--,<br/>        \"+\", m[mp]++,<br/>        \"-\", m[mp]--,<br/>        \".\", BinaryWrite[\"stdout\", m[mp]],<br/>        \",\", m[mp] = BinaryRead[instr],<br/>        \"[\", If[m[mp] == 0,<br/>          bc = 1; <br/>          While[bc &gt; 0, pp++; Switch[p[[pp]], \"[\", bc++, \"]\", bc--]]],<br/>        \"]\", If[m[mp]\u00a0!= 0,<br/>          bc = -1; <br/>          While[bc &lt; 0, pp--; Switch[p[[pp]], \"[\", bc++, \"]\", bc--]]]]];<br/>    Close[instr];];<br/>bf[program_]\u00a0:= bf[program, \"\"]</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 21, "block": "<pre class=\"text highlighted_source\">bf[program_, input_]\u00a0:=<br/>  Module[{p = Characters[program], pp = 0, m, mp = 0, bc = 0,<br/>      instr = StringToStream[input]},<br/>    m[_] = 0;<br/>    While[pp &lt; <a class=\"__cf_email__\" data-cfemail=\"a5e9c0cbc2d1cde5d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<br/>      pp++;<br/>      Switch[p[[pp]],<br/>        \"&gt;\", mp++,<br/>        \"&lt;\", mp--,<br/>        \"+\", m[mp]++,<br/>        \"-\", m[mp]--,<br/>        \".\", BinaryWrite[\"stdout\", m[mp]],<br/>        \",\", m[mp] = BinaryRead[instr],<br/>        \"[\", If[m[mp] == 0,<br/>          bc = 1; <br/>          While[bc &gt; 0, pp++; Switch[p[[pp]], \"[\", bc++, \"]\", bc--]]],<br/>        \"]\", If[m[mp]\u00a0!= 0,<br/>          bc = -1; <br/>          While[bc &lt; 0, pp--; Switch[p[[pp]], \"[\", bc++, \"]\", bc--]]]]];<br/>    Close[instr];];<br/>bf[program_]\u00a0:= bf[program, \"\"]</pre>"}, {"lang": "Modula-3", "loc": 32, "block": "<pre class=\"text highlighted_source\">import os<br/>\u00a0<br/>var<br/>  code = if paramCount() &gt; 0: readFile paramStr 1<br/>         else: readAll stdin<br/>  tape = newSeq[char]()<br/>  d    = 0<br/>  i    = 0<br/>\u00a0<br/>proc run(skip = false): bool =<br/>  while d &gt;= 0 and i &lt; code.len:<br/>    if d &gt;= tape.len: tape.add '\\0'<br/>\u00a0<br/>    if code[i] == '[':<br/>      inc i<br/>      let p = i<br/>      while run(tape[d] == '\\0'): i = p<br/>    elif code[i] == ']':<br/>      return tape[d]\u00a0!= '\\0'<br/>    elif not skip:<br/>      case code[i]<br/>      of '+': inc tape[d]<br/>      of '-': dec tape[d]<br/>      of '&gt;': inc d<br/>      of '&lt;': dec d<br/>      of '.': stdout.write tape[d]<br/>      of ',': tape[d] = stdin.readChar<br/>      else: discard<br/>\u00a0<br/>    inc i<br/>\u00a0<br/>discard run()</pre>"}, {"lang": "Nim", "loc": 32, "block": "<pre class=\"text highlighted_source\">import os<br/>\u00a0<br/>var<br/>  code = if paramCount() &gt; 0: readFile paramStr 1<br/>         else: readAll stdin<br/>  tape = newSeq[char]()<br/>  d    = 0<br/>  i    = 0<br/>\u00a0<br/>proc run(skip = false): bool =<br/>  while d &gt;= 0 and i &lt; code.len:<br/>    if d &gt;= tape.len: tape.add '\\0'<br/>\u00a0<br/>    if code[i] == '[':<br/>      inc i<br/>      let p = i<br/>      while run(tape[d] == '\\0'): i = p<br/>    elif code[i] == ']':<br/>      return tape[d]\u00a0!= '\\0'<br/>    elif not skip:<br/>      case code[i]<br/>      of '+': inc tape[d]<br/>      of '-': dec tape[d]<br/>      of '&gt;': inc d<br/>      of '&lt;': dec d<br/>      of '.': stdout.write tape[d]<br/>      of ',': tape[d] = stdin.readChar<br/>      else: discard<br/>\u00a0<br/>    inc i<br/>\u00a0<br/>discard run()</pre>"}, {"lang": "Objeck", "loc": 70, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Brainfu_k <span class=\"br0\">{</span><br/>  @program <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">;</span> @mem <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  @ip <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span>  @dp <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>program <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> size <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @program <span class=\"sy0\">:=</span> program<span class=\"sy0\">;</span><br/>    @mem <span class=\"sy0\">:=</span> <span class=\"kw2\">Int</span> \u2192 New<span class=\"br0\">[</span>size<span class=\"br0\">]</span><span class=\"sy0\">;</span>  <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>args \u2192 Size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Brainfu_k \u2192 New<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> \u2192 ToInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 Execute<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> Execute<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>@ip <span class=\"sy0\">&lt;</span> @program \u2192 Size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      instr <span class=\"sy0\">:=</span> @program \u2192 Get<span class=\"br0\">(</span>@ip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">select</span><span class=\"br0\">(</span>instr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">label</span> '<span class=\"sy0\">&gt;</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> @dp <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '<span class=\"sy0\">&lt;</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> @dp <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '<span class=\"sy0\">+</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '<span class=\"sy0\">-</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '.'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> value <span class=\"sy0\">:=</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> \u2192 As<span class=\"br0\">(</span><span class=\"kw2\">Char</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> value \u2192 Print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>        <br/>        <span class=\"kw1\">label</span> '<span class=\"sy0\">,</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> @mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Read<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '<span class=\"br0\">[</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> JumpForward<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">label</span> '<span class=\"br0\">]</span>'<span class=\"sy0\">:</span> <span class=\"br0\">{</span> JumpBack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      @ip <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> JumpForward<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span>  <br/>    depth <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>@mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>@ip <span class=\"sy0\">&lt;</span> @program \u2192 Size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        instr <span class=\"sy0\">:=</span> @program \u2192 Get<span class=\"br0\">(</span>@ip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>instr <span class=\"sy0\">=</span> '<span class=\"br0\">]</span>'<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          depth <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>depth <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><span class=\"sy0\">;</span>  <br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>instr <span class=\"sy0\">=</span> '<span class=\"br0\">[</span>'<span class=\"br0\">)</span> <span class=\"br0\">{</span> depth <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        @ip <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"*** Unbalanced jump ***\"</span> \u2192 ErrorLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Runtime \u2192 Exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> JumpBack<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span>    <br/>    depth <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>@mem<span class=\"br0\">[</span>@dp<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>@ip <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        @ip <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        instr <span class=\"sy0\">:=</span> @program \u2192 Get<span class=\"br0\">(</span>@ip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>instr <span class=\"sy0\">=</span> '<span class=\"br0\">[</span>'<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          depth <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>depth <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>instr <span class=\"sy0\">=</span> '<span class=\"br0\">]</span>'<span class=\"br0\">)</span> <span class=\"br0\">{</span> depth <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"*** Unbalanced jump ***\"</span> \u2192 ErrorLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Runtime \u2192 Exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> Read<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span>    <br/>    in <span class=\"sy0\">:=</span> IO.Console \u2192 ReadString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>in \u2192 Size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> in \u2192 ToInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (bf program stack-length)<br/>   (let ((program (string-append program \"]\"))<br/>         (program-counter 0)<br/>         (stack (make-vector stack-length 0))<br/>         (stack-pointer 0))<br/>      (letrec ((skip (lambda (PC sp)<br/>                        (let loop ((pc PC) (sp sp))<br/>                           (let ((ch (string-ref program pc))<br/>                                 (pc (+ pc 1)))<br/>                              (case ch<br/>                                 (#\\]  (list pc sp))<br/>                                 (#\\[  (apply loop (skip pc sp)))<br/>                                 (else<br/>                                    (loop pc sp)))))))<br/>               (step (lambda (PC SP)<br/>                        (let loop ((pc PC) (sp SP))<br/>                           (let ((ch (string-ref program pc))<br/>                                 (pc (+ pc 1)))<br/>                              (case ch<br/>                                 (#\\]  (list (- PC 1) sp))<br/>                                 (#\\[  (if (eq? (vector-ref stack sp) 0)<br/>                                          (apply loop (skip pc sp))<br/>                                          (apply loop (step pc sp))))<br/>                                 (#\\+  (set-ref! stack sp (+ (vector-ref stack sp) 1))<br/>                                       (loop pc sp))<br/>                                 (#\\-  (set-ref! stack sp (- (vector-ref stack sp) 1))<br/>                                       (loop pc sp))<br/>                                 (#\\&gt;  (loop pc (+ sp 1)))<br/>                                 (#\\&lt;  (loop pc (- sp 1)))<br/>                                 (#\\.  (display (make-string 1 (vector-ref stack sp)))<br/>                                       (loop pc sp))<br/>                                 (else<br/>                                    (loop pc sp))))))))<br/>         (step 0 0))))<br/>\u00a0<br/>; testing:<br/>; (bf \",++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.\" 30000)<br/>; ==&gt; Hello World!<br/>; (bf \"&gt;&gt;++++[&lt;++++[&lt;++++&gt;-]&gt;-]&lt;&lt;.[-]++++++++++.\" 30000)<br/>; ==&gt; @<br/>\u00a0</pre>"}, {"lang": "Ol", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (bf program stack-length)<br/>   (let ((program (string-append program \"]\"))<br/>         (program-counter 0)<br/>         (stack (make-vector stack-length 0))<br/>         (stack-pointer 0))<br/>      (letrec ((skip (lambda (PC sp)<br/>                        (let loop ((pc PC) (sp sp))<br/>                           (let ((ch (string-ref program pc))<br/>                                 (pc (+ pc 1)))<br/>                              (case ch<br/>                                 (#\\]  (list pc sp))<br/>                                 (#\\[  (apply loop (skip pc sp)))<br/>                                 (else<br/>                                    (loop pc sp)))))))<br/>               (step (lambda (PC SP)<br/>                        (let loop ((pc PC) (sp SP))<br/>                           (let ((ch (string-ref program pc))<br/>                                 (pc (+ pc 1)))<br/>                              (case ch<br/>                                 (#\\]  (list (- PC 1) sp))<br/>                                 (#\\[  (if (eq? (vector-ref stack sp) 0)<br/>                                          (apply loop (skip pc sp))<br/>                                          (apply loop (step pc sp))))<br/>                                 (#\\+  (set-ref! stack sp (+ (vector-ref stack sp) 1))<br/>                                       (loop pc sp))<br/>                                 (#\\-  (set-ref! stack sp (- (vector-ref stack sp) 1))<br/>                                       (loop pc sp))<br/>                                 (#\\&gt;  (loop pc (+ sp 1)))<br/>                                 (#\\&lt;  (loop pc (- sp 1)))<br/>                                 (#\\.  (display (make-string 1 (vector-ref stack sp)))<br/>                                       (loop pc sp))<br/>                                 (else<br/>                                    (loop pc sp))))))))<br/>         (step 0 0))))<br/>\u00a0<br/>; testing:<br/>; (bf \",++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.\" 30000)<br/>; ==&gt; Hello World!<br/>; (bf \"&gt;&gt;++++[&lt;++++[&lt;++++&gt;-]&gt;-]&lt;&lt;.[-]++++++++++.\" 30000)<br/>; ==&gt; @<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 43, "block": "<pre class=\"parigp highlighted_source\">BF<span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tprog<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>prog<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmy<span class=\"br0\">(</span>codeptr<span class=\"sy0\">,</span>ptr<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>codeptr<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;=</span> #prog<span class=\"sy0\">,</span><br/>\t\tt<span class=\"sy0\">=</span>prog<span class=\"br0\">[</span>codeptr<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span><br/>\t\t\tv<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"sy0\">++</span><br/>\t\t<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span><br/>\t\t\t\tv<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"sy0\">--</span><br/>\t\t\t<span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"&gt;\"</span><span class=\"sy0\">,</span><br/>\t\t\t\t\tptr<span class=\"sy0\">++</span><br/>\t\t\t\t<span class=\"sy0\">,</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\tptr<span class=\"sy0\">--</span><br/>\t\t\t\t\t<span class=\"sy0\">,</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"[\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>v<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\tt<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>prog<span class=\"br0\">[</span>codeptr<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"[\"</span><span class=\"sy0\">,</span>t<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>prog<span class=\"br0\">[</span>codeptr<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"]\"</span><span class=\"sy0\">,</span>t<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\"]\"</span><span class=\"sy0\">&amp;&amp;</span>v<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\tt<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>prog<span class=\"br0\">[</span>codeptr<span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"[\"</span><span class=\"sy0\">,</span>t<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>prog<span class=\"br0\">[</span>codeptr<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"]\"</span><span class=\"sy0\">,</span>t<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\".\"</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\tv<span class=\"br0\">[</span>ptr<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><br/>\t\t\t\t\t\t<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 99, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> rcExceuteBrainF<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>     Crt<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Const</span><br/>  DataSize<span class=\"sy3\">=</span> <span class=\"nu0\">1024</span><span class=\"sy1\">;</span>                           <span class=\"co1\">// Size of Data segment</span><br/>  MaxNest<span class=\"sy3\">=</span>  <span class=\"nu0\">1000</span><span class=\"sy1\">;</span>                           <span class=\"co1\">// Maximum nesting depth of []</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ExecuteBF<span class=\"br0\">(</span>Source<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Dp<span class=\"sy1\">:</span>       pByte<span class=\"sy1\">;</span>                          <span class=\"co1\">// Used as the Data Pointer</span><br/>  DataSeg<span class=\"sy1\">:</span>  <span class=\"kw4\">Pointer</span><span class=\"sy1\">;</span>                        <span class=\"co1\">// Start of the DataSegment (Cell 0)</span><br/>  Ip<span class=\"sy1\">:</span>       pChar<span class=\"sy1\">;</span>                          <span class=\"co1\">// Used as instruction Pointer</span><br/>  LastIp<span class=\"sy1\">:</span>   <span class=\"kw4\">Pointer</span><span class=\"sy1\">;</span>                        <span class=\"co1\">// Last adr of code.</span><br/>  JmpStack<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">MaxNest</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> pChar<span class=\"sy1\">;</span>   <span class=\"co1\">// Stack to Keep track of active \"[\" locations</span><br/>  JmpPnt<span class=\"sy1\">:</span>   <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span>                        <span class=\"co1\">// Stack pointer ^^</span><br/>  JmpCnt<span class=\"sy1\">:</span>   <span class=\"kw4\">Word</span><span class=\"sy1\">;</span>                           <span class=\"co1\">// Used to count brackets when skipping forward.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>  <span class=\"co1\">// Set up then data segment</span><br/>  getmem<span class=\"br0\">(</span>DataSeg<span class=\"sy1\">,</span>dataSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  dp<span class=\"sy1\">:</span><span class=\"sy3\">=</span>DataSeg<span class=\"sy1\">;</span><br/>  fillbyte<span class=\"br0\">(</span>dp<span class=\"sy2\">^</span><span class=\"sy1\">,</span>dataSize<span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Set up the JmpStack</span><br/>  JmpPnt<span class=\"sy1\">:</span><span class=\"sy3\">=-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Set up Instruction Pointer</span><br/>  Ip<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"sy2\">@</span>Source<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  LastIp<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"sy2\">@</span>Source<span class=\"br0\">[</span>length<span class=\"br0\">(</span>source<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> Ip<span class=\"sy3\">=</span><span class=\"kw2\">nil</span> <span class=\"kw1\">then</span> exit<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Main Execution loop</span><br/>  <span class=\"kw1\">repeat</span> <span class=\"coMULTI\">{ until Ip &gt; LastIp }</span><br/>    <span class=\"kw1\">Case</span> Ip<span class=\"sy2\">^</span> <span class=\"kw1\">of</span><br/>      <span class=\"st0\">'&lt;'</span><span class=\"sy1\">:</span> dec<span class=\"br0\">(</span>dp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">'&gt;'</span><span class=\"sy1\">:</span> inc<span class=\"br0\">(</span>dp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">'+'</span><span class=\"sy1\">:</span> inc<span class=\"br0\">(</span>dp<span class=\"sy2\">^</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">'-'</span><span class=\"sy1\">:</span> dec<span class=\"br0\">(</span>dp<span class=\"sy2\">^</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">'.'</span><span class=\"sy1\">:</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>stdout<span class=\"sy1\">,</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span>dp<span class=\"sy2\">^</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">','</span><span class=\"sy1\">:</span> dp<span class=\"sy2\">^</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>readkey<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">'['</span><span class=\"sy1\">:</span> <span class=\"kw1\">if</span> dp<span class=\"sy2\">^</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>           <span class=\"kw1\">begin</span><br/>             <span class=\"co1\">// skip forward until matching bracket;</span><br/>             JmpCnt<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>             <span class=\"kw1\">while</span> <span class=\"br0\">(</span>JmpCnt&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>ip&lt;<span class=\"sy3\">=</span>lastip<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>             <span class=\"kw1\">begin</span><br/>               inc<span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>               <span class=\"kw1\">Case</span> ip<span class=\"sy2\">^</span> <span class=\"kw1\">of</span><br/>                 <span class=\"st0\">'['</span><span class=\"sy1\">:</span> inc<span class=\"br0\">(</span>JmpCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                 <span class=\"st0\">']'</span><span class=\"sy1\">:</span> dec<span class=\"br0\">(</span>JmpCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                 <span class=\"re1\">#0</span><span class=\"sy1\">:</span>  <span class=\"kw1\">begin</span><br/>                        <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>StdErr<span class=\"sy1\">,</span><span class=\"st0\">'Error brackets don'</span><span class=\"st0\">'t match'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                        halt<span class=\"sy1\">;</span><br/>                      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>                <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>             <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>           <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>             <span class=\"co1\">// Add location to Jump stack</span><br/>             inc<span class=\"br0\">(</span>JmpPnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             JmpStack<span class=\"br0\">[</span>jmpPnt<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>ip<span class=\"sy1\">;</span><br/>           <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"st0\">']'</span><span class=\"sy1\">:</span> <span class=\"kw1\">if</span> dp<span class=\"sy2\">^</span>&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>             <span class=\"co1\">// Jump Back to matching [</span><br/>             ip<span class=\"sy1\">:</span><span class=\"sy3\">=</span>JmpStack<span class=\"br0\">[</span>jmpPnt<span class=\"br0\">]</span><br/>           <span class=\"kw1\">else</span><br/>             <span class=\"co1\">// Remove Jump from stack</span><br/>             dec<span class=\"br0\">(</span>jmpPnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> Ip&gt;lastIp<span class=\"sy1\">;</span><br/>  freemem<span class=\"br0\">(</span>DataSeg<span class=\"sy1\">,</span>dataSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Const</span><br/>  HelloWorldWiki <span class=\"sy3\">=</span> <span class=\"st0\">'++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.'</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  pressESCtoCont <span class=\"sy3\">=</span> <span class=\"st0\">'&gt;[-]+++++++[&lt;++++++++++&gt;-]&lt;-&gt;&gt;[-]+++++++[&lt;+++++++++++'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'+&gt;-]&lt;-&gt;&gt;[-]++++[&lt;++++++++&gt;-]+&gt;[-]++++++++++[&lt;++++++++'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'++&gt;-]&gt;[-]++++++++[&lt;++++++++++++++&gt;-]&lt;.++.+&lt;.&gt;..&lt;&lt;.&lt;&lt;.'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'--&gt;.&lt;.&gt;&gt;.&gt;&gt;+.-----.&lt;&lt;.[&lt;&lt;+&gt;&gt;-]&lt;&lt;.&gt;&gt;&gt;&gt;.-.++++++.&lt;++++.'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'+++++.&gt;+.&lt;&lt;&lt;&lt;++.&gt;+[&gt;+&lt;--]&gt;++++...'</span><span class=\"sy1\">;</span><br/>  waitForEsc     <span class=\"sy3\">=</span> <span class=\"st0\">'[-]&gt;[-]++++[&lt;+++++++&gt;-]&lt;-&gt;[-]&gt;+[[-]&lt;&lt;[&gt;+&gt;+&lt;&lt;-]'</span><span class=\"sy3\">+</span><span class=\"st0\">'&gt;&gt;[&lt;'</span><span class=\"sy3\">+</span><br/>                   <span class=\"st0\">'&lt;+&gt;&gt;-],&lt;[-&gt;-&lt;]&gt;]'</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Execute \"Hello World\" example from Wikipedia</span><br/>  ExecuteBF<span class=\"br0\">(</span>HelloWorldWiki<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Print text \"press ESC to continue.....\" and wait for ESC to be pressed</span><br/>  ExecuteBF<span class=\"br0\">(</span>pressESCtoCont<span class=\"sy3\">+</span>waitForEsc<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 52, "block": "<pre class=\"text highlighted_source\">procedure bfi(string pgm)<br/>sequence jumptable = repeat(0,length(pgm)),<br/>         loopstack = {},<br/>         data = repeat(0,10)    -- size??<br/>integer skip = 0, ch, loopstart, pc, dp<br/>    --<br/>    -- compile (pack/strip comments and link jumps)<br/>    --<br/>    for i=1 to length(pgm) do<br/>        ch = pgm[i]<br/>        switch ch do<br/>            case '[': loopstack = append(loopstack,i-skip); <br/>                      pgm[i-skip] = ch;<br/>            case ']': loopstart = loopstack[$]; <br/>                      loopstack = loopstack[1..-2]; <br/>                      jumptable[i-skip] = loopstart; <br/>                      jumptable[loopstart] = i-skip; <br/>                      fallthrough<br/>            case '+','-','&lt;','&gt;',',','.': pgm[i-skip] = ch;<br/>            default: skip += 1<br/>        end switch<br/>    end for<br/>    if length(loopstack) then\u00a0?9/0 end if<br/>    pgm = pgm[1..-1-skip]<br/>\u00a0<br/>    --<br/>    -- main execution loop<br/>    --<br/>    pc = 1<br/>    dp = 1<br/>    while pc&lt;=length(pgm) do<br/>        ch = pgm[pc]<br/>        switch ch do<br/>            case '&gt;': dp += 1 if dp&gt;length(data) then dp = 1 end if<br/>            case '&lt;': dp -= 1 if dp&lt;1 then dp = length(data) end if<br/>            case '+': data[dp] += 1<br/>            case '-': data[dp] -= 1<br/>            case ',': data[dp] = getc(0)<br/>            case '.': puts(1,data[dp])<br/>            case '[': if data[dp]=0 then pc = jumptable[pc] end if<br/>            case ']': if data[dp]!=0 then pc = jumptable[pc] end if<br/>            default:\u00a0?9/0<br/>        end switch<br/>        pc += 1<br/>    end while<br/>end procedure<br/>\u00a0<br/>constant bf=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;++.&gt;---------.&gt;------.&lt;----.++++++++.&gt;&gt;+.&gt;++.+++.\"<br/>constant fb=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;+++.&gt;---.&gt;------.++++++++.&lt;--.&gt;&gt;+.&gt;++.+++.,\"<br/>\u00a0<br/>bfi(bf)<br/>bfi(fb)</pre>"}, {"lang": "Perl 6", "loc": 52, "block": "<pre class=\"text highlighted_source\">procedure bfi(string pgm)<br/>sequence jumptable = repeat(0,length(pgm)),<br/>         loopstack = {},<br/>         data = repeat(0,10)    -- size??<br/>integer skip = 0, ch, loopstart, pc, dp<br/>    --<br/>    -- compile (pack/strip comments and link jumps)<br/>    --<br/>    for i=1 to length(pgm) do<br/>        ch = pgm[i]<br/>        switch ch do<br/>            case '[': loopstack = append(loopstack,i-skip); <br/>                      pgm[i-skip] = ch;<br/>            case ']': loopstart = loopstack[$]; <br/>                      loopstack = loopstack[1..-2]; <br/>                      jumptable[i-skip] = loopstart; <br/>                      jumptable[loopstart] = i-skip; <br/>                      fallthrough<br/>            case '+','-','&lt;','&gt;',',','.': pgm[i-skip] = ch;<br/>            default: skip += 1<br/>        end switch<br/>    end for<br/>    if length(loopstack) then\u00a0?9/0 end if<br/>    pgm = pgm[1..-1-skip]<br/>\u00a0<br/>    --<br/>    -- main execution loop<br/>    --<br/>    pc = 1<br/>    dp = 1<br/>    while pc&lt;=length(pgm) do<br/>        ch = pgm[pc]<br/>        switch ch do<br/>            case '&gt;': dp += 1 if dp&gt;length(data) then dp = 1 end if<br/>            case '&lt;': dp -= 1 if dp&lt;1 then dp = length(data) end if<br/>            case '+': data[dp] += 1<br/>            case '-': data[dp] -= 1<br/>            case ',': data[dp] = getc(0)<br/>            case '.': puts(1,data[dp])<br/>            case '[': if data[dp]=0 then pc = jumptable[pc] end if<br/>            case ']': if data[dp]!=0 then pc = jumptable[pc] end if<br/>            default:\u00a0?9/0<br/>        end switch<br/>        pc += 1<br/>    end while<br/>end procedure<br/>\u00a0<br/>constant bf=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;++.&gt;---------.&gt;------.&lt;----.++++++++.&gt;&gt;+.&gt;++.+++.\"<br/>constant fb=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;+++.&gt;---.&gt;------.++++++++.&lt;--.&gt;&gt;+.&gt;++.+++.,\"<br/>\u00a0<br/>bfi(bf)<br/>bfi(fb)</pre>"}, {"lang": "Phix", "loc": 52, "block": "<pre class=\"text highlighted_source\">procedure bfi(string pgm)<br/>sequence jumptable = repeat(0,length(pgm)),<br/>         loopstack = {},<br/>         data = repeat(0,10)    -- size??<br/>integer skip = 0, ch, loopstart, pc, dp<br/>    --<br/>    -- compile (pack/strip comments and link jumps)<br/>    --<br/>    for i=1 to length(pgm) do<br/>        ch = pgm[i]<br/>        switch ch do<br/>            case '[': loopstack = append(loopstack,i-skip); <br/>                      pgm[i-skip] = ch;<br/>            case ']': loopstart = loopstack[$]; <br/>                      loopstack = loopstack[1..-2]; <br/>                      jumptable[i-skip] = loopstart; <br/>                      jumptable[loopstart] = i-skip; <br/>                      fallthrough<br/>            case '+','-','&lt;','&gt;',',','.': pgm[i-skip] = ch;<br/>            default: skip += 1<br/>        end switch<br/>    end for<br/>    if length(loopstack) then\u00a0?9/0 end if<br/>    pgm = pgm[1..-1-skip]<br/>\u00a0<br/>    --<br/>    -- main execution loop<br/>    --<br/>    pc = 1<br/>    dp = 1<br/>    while pc&lt;=length(pgm) do<br/>        ch = pgm[pc]<br/>        switch ch do<br/>            case '&gt;': dp += 1 if dp&gt;length(data) then dp = 1 end if<br/>            case '&lt;': dp -= 1 if dp&lt;1 then dp = length(data) end if<br/>            case '+': data[dp] += 1<br/>            case '-': data[dp] -= 1<br/>            case ',': data[dp] = getc(0)<br/>            case '.': puts(1,data[dp])<br/>            case '[': if data[dp]=0 then pc = jumptable[pc] end if<br/>            case ']': if data[dp]!=0 then pc = jumptable[pc] end if<br/>            default:\u00a0?9/0<br/>        end switch<br/>        pc += 1<br/>    end while<br/>end procedure<br/>\u00a0<br/>constant bf=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;++.&gt;---------.&gt;------.&lt;----.++++++++.&gt;&gt;+.&gt;++.+++.\"<br/>constant fb=\"++++++++[&gt;++++[&gt;++&gt;++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++&gt;-&gt;+&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;&gt;.+.&lt;.&gt;&gt;.&lt;&lt;&lt;+++.&gt;---.&gt;------.++++++++.&lt;--.&gt;&gt;+.&gt;++.+++.,\"<br/>\u00a0<br/>bfi(bf)<br/>bfi(fb)</pre>"}, {"lang": "PHP", "loc": 53, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> brainfuck_interpret<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$_s</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$_d</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$_i</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$o</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>     <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$_s</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'+'</span><span class=\"sy0\">:</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'-'</span><span class=\"sy0\">:</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'&gt;'</span><span class=\"sy0\">:</span> <span class=\"re0\">$_d</span><span class=\"sy0\">++;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'&lt;'</span><span class=\"sy0\">:</span> <span class=\"re0\">$_d</span><span class=\"sy0\">--;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">:</span> <span class=\"re0\">$o</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">','</span><span class=\"sy0\">:</span> <span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_i</span><span class=\"sy0\">==</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span>\u00a0? <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"re0\">$i</span><span class=\"br0\">[</span><span class=\"re0\">$_i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">'['</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <span class=\"re0\">$brackets</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$brackets</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$_s</span><span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$_s</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st_h\">'['</span><span class=\"br0\">)</span><br/>               <span class=\"re0\">$brackets</span><span class=\"sy0\">++;</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$_s</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st_h\">']'</span><span class=\"br0\">)</span><br/>               <span class=\"re0\">$brackets</span><span class=\"sy0\">--;</span><br/>           <span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span><br/>         <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>             <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_s</span><span class=\"sy0\">++-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">if</span><span class=\"br0\">(</span>brainfuck_interpret<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$_d</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$_i</span><span class=\"sy0\">,</span> <span class=\"re0\">$o</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"re0\">$_s</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pos</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>         <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">case</span> <span class=\"st_h\">']'</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span><a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">[</span><span class=\"re0\">$_d</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"re0\">$_s</span> <span class=\"sy0\">&lt;</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> brainfuck<span class=\"br0\">(</span><span class=\"re0\">$source</span><span class=\"sy0\">,</span> <span class=\"re0\">$input</span><span class=\"sy0\">=</span><span class=\"st_h\">''</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$data</span>         <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>      <span class=\"sy0\">=</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$data_index</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$source_index</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$input_index</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$output</span>       <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  brainfuck_interpret<span class=\"br0\">(</span><span class=\"re0\">$source</span><span class=\"sy0\">,</span> <span class=\"re0\">$source_index</span><span class=\"sy0\">,</span><br/>                      <span class=\"re0\">$data</span><span class=\"sy0\">,</span>   <span class=\"re0\">$data_index</span><span class=\"sy0\">,</span><br/>                      <span class=\"re0\">$input</span><span class=\"sy0\">,</span>  <span class=\"re0\">$input_index</span><span class=\"sy0\">,</span><br/>                      <span class=\"re0\">$output</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$output</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<br/>    &gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;<br/>    &gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.<br/>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$inp</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'123'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span> brainfuck<span class=\"br0\">(</span> <span class=\"re0\">$code</span><span class=\"sy0\">,</span> <span class=\"re0\">$inp</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 48, "block": "<pre class=\"text highlighted_source\">(off \"Program\")<br/>\u00a0<br/>(de compile (File)<br/>   (let Stack NIL<br/>      (setq \"Program\"<br/>         (make<br/>            (in File<br/>               (while (char)<br/>                  (case @<br/>                     (\"&gt;\"<br/>                        (link<br/>                           '(setq Data<br/>                              (or<br/>                                 (cddr Data)<br/>                                 (con (cdr Data) (cons 0 (cons Data))) ) ) ) )<br/>                     (\"&lt;\"<br/>                        (link<br/>                           '(setq Data<br/>                              (or<br/>                                 (cadr Data)<br/>                                 (set (cdr Data) (cons 0 (cons NIL Data))) ) ) ) )<br/>                     (\"+\" (link '(inc Data)))<br/>                     (\"-\" (link '(dec Data)))<br/>                     (\".\" (link '(prin (char (car Data)))))<br/>                     (\",\" (link '(set Data (char (read)))))<br/>                     (\"[\"<br/>                        (link<br/>                           '(setq Code<br/>                              ((if (=0 (car Data)) cdar cdr) Code) ) )<br/>                        (push 'Stack (chain (cons))) )<br/>                     (\"]\"<br/>                        (unless Stack<br/>                           (quit \"Unbalanced ']'\") )<br/>                        (link<br/>                           '(setq Code<br/>                              ((if (n0 (car Data)) cdar cdr) Code) ) )<br/>                        (let (There (pop 'Stack)  Here (cons There))<br/>                           (chain (set There Here)) ) ) ) ) ) ) )<br/>      (when Stack<br/>         (quit \"Unbalanced '['\") ) ) )<br/>\u00a0<br/>(de execute ()<br/>   (let Data (cons 0 (cons))              # Create initial cell<br/>      (for (Code \"Program\"  Code)         # Run program<br/>         (eval (pop 'Code)) )<br/>      (while (cadr Data)                  # Find beginning of data<br/>         (setq Data @) )<br/>      (filter prog Data '(T NIL .)) ) )   # Return data space</pre>"}, {"lang": "Potion", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt;++++++++[-&lt;+++++++++&gt;]&lt;.&gt;[][&lt;-]&gt;+&gt;-[+]++&gt;++&gt;+++[&gt;[-&gt;+++&lt;&lt;+++&gt;]&lt;&lt;]&gt;-----.<br/>&gt;-&gt;+++..+++.&gt;-.&lt;&lt;+[&gt;[+&gt;+]&gt;&gt;]&lt;--------------.&gt;&gt;.+++.------.--------.&gt;+.&gt;+.</pre>"}, {"lang": "Prolog", "loc": 97, "block": "<pre class=\"prolog highlighted_source\"><span class=\"coMULTI\">/******************************************<br/> Starting point, call with program in atom.<br/>*******************************************/</span><br/>brain<span class=\"br0\">(</span>Program<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>Program<span class=\"sy4\">,</span> Instructions<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprocess_bf_chars<span class=\"br0\">(</span>Instructions<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>brain_from_file<span class=\"br0\">(</span>File<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"co1\">% or from file...</span><br/>\tread_file_to_codes<span class=\"br0\">(</span>File<span class=\"sy4\">,</span> Codes<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">char_code</span></a><span class=\"sy4\">,</span> Instructions<span class=\"sy4\">,</span> Codes<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tprocess_bf_chars<span class=\"br0\">(</span>Instructions<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>process_bf_chars<span class=\"br0\">(</span>Instructions<span class=\"br0\">)</span>\t<span class=\"sy1\">:-</span><br/>\tphrase<span class=\"br0\">(</span>bf_to_pl<span class=\"br0\">(</span>Code<span class=\"br0\">)</span><span class=\"sy4\">,</span> Instructions<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tCode <span class=\"sy6\">=</span> <span class=\"br0\">[</span>C<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tinstruction<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/********************************************<br/> DCG to parse the bf program into prolog form<br/>*********************************************/</span><br/>bf_to_pl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_to_pl<span class=\"br0\">(</span><span class=\"br0\">[</span>loop<span class=\"br0\">(</span>Ins<span class=\"br0\">)</span><span class=\"sy5\">|</span>Next<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> loop_start<span class=\"sy4\">,</span> bf_to_pl<span class=\"br0\">(</span>Ins<span class=\"br0\">)</span><span class=\"sy4\">,</span> loop_end<span class=\"sy4\">,</span> bf_to_pl<span class=\"br0\">(</span>Next<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>bf_to_pl<span class=\"br0\">(</span><span class=\"br0\">[</span>Ins<span class=\"sy5\">|</span>Next<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> bf_code<span class=\"br0\">(</span>Ins<span class=\"br0\">)</span><span class=\"sy4\">,</span> bf_to_pl<span class=\"br0\">(</span>Next<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>bf_to_pl<span class=\"br0\">(</span>Ins<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span> <span class=\"sy2\">\\+</span> member<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'['</span><span class=\"sy4\">,</span><span class=\"st_h\">']'</span><span class=\"sy4\">,</span><span class=\"sy6\">&gt;</span><span class=\"sy4\">,</span><span class=\"sy6\">&lt;</span><span class=\"sy4\">,</span><span class=\"sy3\">+</span><span class=\"sy4\">,</span><span class=\"sy3\">-</span><span class=\"sy4\">,</span><span class=\"st_h\">'.'</span><span class=\"sy4\">,</span><span class=\"st_h\">','</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">,</span> bf_to_pl<span class=\"br0\">(</span>Ins<span class=\"br0\">)</span><span class=\"sy4\">.</span> <span class=\"co1\">% skip non bf characters</span><br/>\u00a0<br/>loop_start <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'['</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>loop_end <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">']'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>bf_code<span class=\"br0\">(</span>next_addr<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'&gt;'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_code<span class=\"br0\">(</span>prev_addr<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'&lt;'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_code<span class=\"br0\">(</span>inc_caddr<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'+'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_code<span class=\"br0\">(</span>dec_caddr<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'-'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_code<span class=\"br0\">(</span>out_caddr<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'.'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bf_code<span class=\"br0\">(</span>in_caddr<span class=\"br0\">)</span>  <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">','</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/**********************<br/>  Instruction Processor<br/>***********************/</span><br/>instruction<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>instruction<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmem_instruction<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> Mem<span class=\"sy4\">,</span> UpdatedMem<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnext_instruction<span class=\"br0\">(</span>Code<span class=\"sy4\">,</span> NextI<span class=\"sy4\">,</span> NextCode<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span> <span class=\"co1\">% cuts are to force tail recursion, so big programs will run</span><br/>\tinstruction<span class=\"br0\">(</span>NextI<span class=\"sy4\">,</span> NextCode<span class=\"sy4\">,</span> UpdatedMem<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% to loop, add the loop code to the start of the program then execute</span><br/><span class=\"co1\">% when the loop has finished it will reach itself again then can retest for zero</span><br/>instruction<span class=\"br0\">(</span>loop<span class=\"br0\">(</span>LoopCode<span class=\"br0\">)</span><span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcaddr<span class=\"br0\">(</span>Mem<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdif<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>LoopCode<span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> <span class=\"br0\">[</span>NextI<span class=\"sy5\">|</span>NextLoopCode<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tinstruction<span class=\"br0\">(</span>NextI<span class=\"sy4\">,</span> <span class=\"br0\">[</span>NextI<span class=\"sy5\">|</span>NextLoopCode<span class=\"br0\">]</span><span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>instruction<span class=\"br0\">(</span>loop<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcaddr<span class=\"br0\">(</span>Mem<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnext_instruction<span class=\"br0\">(</span>Code<span class=\"sy4\">,</span> NextI<span class=\"sy4\">,</span> NextCode<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tinstruction<span class=\"br0\">(</span>NextI<span class=\"sy4\">,</span> NextCode<span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% memory is stored in two parts: </span><br/><span class=\"co1\">%   1. a list with the current address and everything after it</span><br/><span class=\"co1\">%   2. a list with the previous memory in reverse order</span><br/>mem_instruction<span class=\"br0\">(</span>next_addr<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span>Mb<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> mem<span class=\"br0\">(</span><span class=\"br0\">[</span>Caddr<span class=\"sy5\">|</span>Mb<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>next_addr<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span>Mb<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"sy4\">,</span>NextAddr<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> mem<span class=\"br0\">(</span><span class=\"br0\">[</span>Caddr<span class=\"sy5\">|</span>Mb<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>NextAddr<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>prev_addr<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span><span class=\"br0\">[</span>PrevAddr<span class=\"sy5\">|</span>RestOfPrev<span class=\"br0\">]</span><span class=\"sy4\">,</span> Caddrs<span class=\"br0\">)</span><span class=\"sy4\">,</span> mem<span class=\"br0\">(</span>RestOfPrev<span class=\"sy4\">,</span> <span class=\"br0\">[</span>PrevAddr<span class=\"sy5\">|</span>Caddrs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% wrap instructions at the byte boundaries as this is what most programmers expect to happen</span><br/>mem_instruction<span class=\"br0\">(</span>inc_caddr<span class=\"sy4\">,</span> MemIn<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> update_caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>inc_caddr<span class=\"sy4\">,</span> MemIn<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span> succ<span class=\"br0\">(</span>Val<span class=\"sy4\">,</span> IncVal<span class=\"br0\">)</span><span class=\"sy4\">,</span> update_caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> IncVal<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>dec_caddr<span class=\"sy4\">,</span> MemIn<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> update_caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> <span class=\"nu0\">255</span><span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>dec_caddr<span class=\"sy4\">,</span> MemIn<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span> succ<span class=\"br0\">(</span>DecVal<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span> update_caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> DecVal<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% input and output</span><br/>mem_instruction<span class=\"br0\">(</span>out_caddr<span class=\"sy4\">,</span> Mem<span class=\"sy4\">,</span> Mem<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> caddr<span class=\"br0\">(</span>Mem<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">char_code</span></a><span class=\"br0\">(</span>Char<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mem_instruction<span class=\"br0\">(</span>in_caddr<span class=\"sy4\">,</span> MemIn<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tget_single_char<span class=\"br0\">(</span>Code<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">char_code</span></a><span class=\"br0\">(</span>Char<span class=\"sy4\">,</span> Code<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmap_input_code<span class=\"br0\">(</span>Code<span class=\"sy4\">,</span>MappedCode<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tupdate_caddr<span class=\"br0\">(</span>MemIn<span class=\"sy4\">,</span> MappedCode<span class=\"sy4\">,</span> MemOut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% need to map the newline if it is not a proper newline character (system dependent).</span><br/>map_input_code<span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy4\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>map_input_code<span class=\"br0\">(</span>C<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% The value at the current address</span><br/>caddr<span class=\"br0\">(</span>mem<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Caddr<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>caddr<span class=\"br0\">(</span>mem<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"sy4\">,</span>_<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Caddr<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% The updated value at the current address</span><br/>update_caddr<span class=\"br0\">(</span>mem<span class=\"br0\">(</span>BackMem<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Caddr<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span>BackMem<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>update_caddr<span class=\"br0\">(</span>mem<span class=\"br0\">(</span>BackMem<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>M<span class=\"sy5\">|</span>Mem<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Caddr<span class=\"sy4\">,</span> mem<span class=\"br0\">(</span>BackMem<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Caddr<span class=\"sy4\">,</span>M<span class=\"sy5\">|</span>Mem<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% The next instruction, and remaining code</span><br/>next_instruction<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>next_instruction<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"sy4\">,</span>NextI<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span> NextI<span class=\"sy4\">,</span> <span class=\"br0\">[</span>NextI<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang planet dyoo/bf<br/>++++++[&gt;++++++++++++&lt;-]&gt;.<br/>&gt;++++++++++[&gt;++++++++++&lt;-]&gt;+.<br/>+++++++..+++.&gt;++++[&gt;+++++++++++&lt;-]&gt;.<br/>&lt;+++[&gt;----&lt;-]&gt;.&lt;&lt;&lt;&lt;&lt;+++[&gt;+++++&lt;-]&gt;.<br/>&gt;&gt;.+++.------.--------.&gt;&gt;+.<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang planet dyoo/bf<br/>++++++[&gt;++++++++++++&lt;-]&gt;.<br/>&gt;++++++++++[&gt;++++++++++&lt;-]&gt;+.<br/>+++++++..+++.&gt;++++[&gt;+++++++++++&lt;-]&gt;.<br/>&lt;+++[&gt;----&lt;-]&gt;.&lt;&lt;&lt;&lt;&lt;+++[&gt;+++++&lt;-]&gt;.<br/>&gt;&gt;.+++.------.--------.&gt;&gt;+.<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang planet dyoo/bf<br/>++++++[&gt;++++++++++++&lt;-]&gt;.<br/>&gt;++++++++++[&gt;++++++++++&lt;-]&gt;+.<br/>+++++++..+++.&gt;++++[&gt;+++++++++++&lt;-]&gt;.<br/>&lt;+++[&gt;----&lt;-]&gt;.&lt;&lt;&lt;&lt;&lt;+++[&gt;+++++&lt;-]&gt;.<br/>&gt;&gt;.+++.------.--------.&gt;&gt;+.<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 55, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements the   Brainf*ck   (self\u2500censored)  language.                  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*initialize the infinite  \"tape\".     */</span><br/>p =<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*the  \"tape\"  cell  pointer.          */</span><br/>! =<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*\u00a0!   is the instruction pointer (IP).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $                                      <span class=\"coMULTI\">/*allow user to specify a BrainF*ck pgm*/</span><br/>                                                 <span class=\"coMULTI\">/* \u250c\u2500\u2500\u25c4\u2500\u2500 No program? Then use default;*/</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> $=,                                <span class=\"coMULTI\">/* \u2193      it displays:  Hello, World!  */</span><br/>  <span class=\"st0\">\"++++++++++             initialize cell #0  to 10;   then loop:         \"</span>,<br/>  <span class=\"st0\">\"[   &gt; +++++++              add  7 to cell #1;  final result:  70       \"</span>,<br/>  <span class=\"st0\">\"    &gt; ++++++++++           add 10 to cell #2;  final result: 100       \"</span>,<br/>  <span class=\"st0\">\"    &gt; +++                  add  3 to cell #3;  final result   30       \"</span>,<br/>  <span class=\"st0\">\"    &gt; +                    add  1 to cell #4;  final result   10       \"</span>,<br/>  <span class=\"st0\">\"    &lt;&lt;&lt;&lt; -      ]      decrement  cell #0                              \"</span>,<br/>  <span class=\"st0\">\"&gt; ++ .                 display 'H'    which is  ASCII  72 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; + .                  display 'e'    which is  ASCII 101 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"+++++++ ..             display 'll'   which is  ASCII 108 (decimal) {2}\"</span>,<br/>  <span class=\"st0\">\"+++ .                  display 'o'    which is  ASCII 111 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; ++ .                 display ' '    which is  ASCII  32 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&lt;&lt; +++++++++++++++ .   display 'W'    which is  ASCII  87 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; .                    display 'o'    which is  ASCII 111 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"+++ .                  display 'r'    which is  ASCII 114 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"------ .               display 'l'    which is  ASCII 108 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"-------- .             display 'd'    which is  ASCII 100 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; + .                  display '!'    which is  ASCII  33 (decimal)    \"</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]   note the  Brainf*ck  comments.*/</span><br/>     <span class=\"kw1\">do</span>\u00a0!=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> \u00a0!<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"sy0\">&amp;</span> \u00a0!<span class=\"sy0\">&lt;</span>=<span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*keep executing  BF  as long as IP \u00ac 0*/</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  $  =<span class=\"br0\">(</span>!<span class=\"br0\">)</span>  x  +<span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*obtain a  Brainf*ck instruction  (x),*/</span><br/>                                                 <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7it's the same as  x=substr($,!,1) */</span><br/>       <span class=\"kw1\">select</span>                                    <span class=\"coMULTI\">/*examine the current instruction.     */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'+'</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"a5d598e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>p + <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*increment the   \"tape\" cell    by  1 */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'-'</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"40307d00\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>p - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*decrement  \"       \"     \"      \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'&gt;'</span>  <span class=\"kw3\">then</span>   p=  p + <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*increment  \"  instruction ptr   \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'&lt;'</span>  <span class=\"kw3\">then</span>   p=  p - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*decrement  \"       \"       \"    \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span>\u00a0!= <span class=\"kw1\">forward</span><span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*go  forward to   ]+1   if  @.P = 0.  */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span>\u00a0!=backward<span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* \" backward  \"   [+1    \"   \"  \u00ac \"   */</span><br/>       <span class=\"kw3\">when</span> x== <span class=\"sy0\">.</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">charout</span> , <span class=\"kw6\">d2c</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>p<span class=\"br0\">)</span> <span class=\"coMULTI\">/*display a  \"tape\"  cell to terminal. */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'input a value:'</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> @<span class=\"sy0\">.</span>p;  <span class=\"kw3\">end</span><br/>       <span class=\"kw3\">otherwise</span>    <span class=\"kw1\">iterate</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*forever*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">forward</span>:  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!;  c=<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*C: \u25c4\u2500\u2500\u2500  is the   [   nested counter.*/</span><br/>                         <span class=\"kw1\">do</span> k=!+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;       \u00a0?=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c+<span class=\"nu0\">1</span>;     <span class=\"kw1\">iterate</span>;                   <span class=\"kw3\">end</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c-<span class=\"nu0\">1</span>;     <span class=\"kw1\">if</span> c==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;       <span class=\"kw3\">end</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">return</span> k<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>backward: <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!;  c=<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*C: \u25c4\u2500\u2500\u2500  is the   ]   nested counter.*/</span><br/>                         <span class=\"kw1\">do</span> k=!-<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;        \u00a0?=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c+<span class=\"nu0\">1</span>;     <span class=\"kw1\">iterate</span>;                   <span class=\"kw3\">end</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c-<span class=\"nu0\">1</span>;     <span class=\"kw1\">if</span> c==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> k+<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">return</span> k</pre>"}, {"lang": "REXX", "loc": 55, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements the   Brainf*ck   (self\u2500censored)  language.                  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*initialize the infinite  \"tape\".     */</span><br/>p =<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*the  \"tape\"  cell  pointer.          */</span><br/>! =<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*\u00a0!   is the instruction pointer (IP).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $                                      <span class=\"coMULTI\">/*allow user to specify a BrainF*ck pgm*/</span><br/>                                                 <span class=\"coMULTI\">/* \u250c\u2500\u2500\u25c4\u2500\u2500 No program? Then use default;*/</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> $=,                                <span class=\"coMULTI\">/* \u2193      it displays:  Hello, World!  */</span><br/>  <span class=\"st0\">\"++++++++++             initialize cell #0  to 10;   then loop:         \"</span>,<br/>  <span class=\"st0\">\"[   &gt; +++++++              add  7 to cell #1;  final result:  70       \"</span>,<br/>  <span class=\"st0\">\"    &gt; ++++++++++           add 10 to cell #2;  final result: 100       \"</span>,<br/>  <span class=\"st0\">\"    &gt; +++                  add  3 to cell #3;  final result   30       \"</span>,<br/>  <span class=\"st0\">\"    &gt; +                    add  1 to cell #4;  final result   10       \"</span>,<br/>  <span class=\"st0\">\"    &lt;&lt;&lt;&lt; -      ]      decrement  cell #0                              \"</span>,<br/>  <span class=\"st0\">\"&gt; ++ .                 display 'H'    which is  ASCII  72 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; + .                  display 'e'    which is  ASCII 101 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"+++++++ ..             display 'll'   which is  ASCII 108 (decimal) {2}\"</span>,<br/>  <span class=\"st0\">\"+++ .                  display 'o'    which is  ASCII 111 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; ++ .                 display ' '    which is  ASCII  32 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&lt;&lt; +++++++++++++++ .   display 'W'    which is  ASCII  87 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; .                    display 'o'    which is  ASCII 111 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"+++ .                  display 'r'    which is  ASCII 114 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"------ .               display 'l'    which is  ASCII 108 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"-------- .             display 'd'    which is  ASCII 100 (decimal)    \"</span>,<br/>  <span class=\"st0\">\"&gt; + .                  display '!'    which is  ASCII  33 (decimal)    \"</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]   note the  Brainf*ck  comments.*/</span><br/>     <span class=\"kw1\">do</span>\u00a0!=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> \u00a0!<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"sy0\">&amp;</span> \u00a0!<span class=\"sy0\">&lt;</span>=<span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*keep executing  BF  as long as IP \u00ac 0*/</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  $  =<span class=\"br0\">(</span>!<span class=\"br0\">)</span>  x  +<span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*obtain a  Brainf*ck instruction  (x),*/</span><br/>                                                 <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7it's the same as  x=substr($,!,1) */</span><br/>       <span class=\"kw1\">select</span>                                    <span class=\"coMULTI\">/*examine the current instruction.     */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'+'</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"a5d598e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>p + <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*increment the   \"tape\" cell    by  1 */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'-'</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"40307d00\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>p - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*decrement  \"       \"     \"      \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'&gt;'</span>  <span class=\"kw3\">then</span>   p=  p + <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*increment  \"  instruction ptr   \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'&lt;'</span>  <span class=\"kw3\">then</span>   p=  p - <span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*decrement  \"       \"       \"    \"  \" */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span>\u00a0!= <span class=\"kw1\">forward</span><span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*go  forward to   ]+1   if  @.P = 0.  */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span>\u00a0!=backward<span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* \" backward  \"   [+1    \"   \"  \u00ac \"   */</span><br/>       <span class=\"kw3\">when</span> x== <span class=\"sy0\">.</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">charout</span> , <span class=\"kw6\">d2c</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>p<span class=\"br0\">)</span> <span class=\"coMULTI\">/*display a  \"tape\"  cell to terminal. */</span><br/>       <span class=\"kw3\">when</span> x==<span class=\"st0\">','</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'input a value:'</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> @<span class=\"sy0\">.</span>p;  <span class=\"kw3\">end</span><br/>       <span class=\"kw3\">otherwise</span>    <span class=\"kw1\">iterate</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*forever*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">forward</span>:  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!;  c=<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*C: \u25c4\u2500\u2500\u2500  is the   [   nested counter.*/</span><br/>                         <span class=\"kw1\">do</span> k=!+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;       \u00a0?=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c+<span class=\"nu0\">1</span>;     <span class=\"kw1\">iterate</span>;                   <span class=\"kw3\">end</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c-<span class=\"nu0\">1</span>;     <span class=\"kw1\">if</span> c==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;       <span class=\"kw3\">end</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">return</span> k<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>backward: <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>p==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!;  c=<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*C: \u25c4\u2500\u2500\u2500  is the   ]   nested counter.*/</span><br/>                         <span class=\"kw1\">do</span> k=!-<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;        \u00a0?=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">']'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c+<span class=\"nu0\">1</span>;     <span class=\"kw1\">iterate</span>;                   <span class=\"kw3\">end</span><br/>                         <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'['</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; c=c-<span class=\"nu0\">1</span>;     <span class=\"kw1\">if</span> c==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> k+<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>          <span class=\"kw1\">return</span> k</pre>"}, {"lang": "Ruby", "loc": 99, "block": "<pre class=\"text highlighted_source\">use std::collections::HashMap;<br/>use std::env;<br/>use std::fs::File;<br/>use std::io::prelude::*;<br/>use std::io::stdin;<br/>use std::num::Wrapping;<br/>\u00a0<br/>fn main() {<br/>    let args: Vec&lt;_&gt; = env::args().collect();<br/>    if args.len() &lt; 2 {<br/>        println!(\"Usage: {} [path] (--debug)\", args[0]);<br/>        return;<br/>    }<br/>\u00a0<br/>    let src: Vec&lt;char&gt; = {<br/>        let mut buf = String::new();<br/>        match File::open(&amp;args[1])<br/>        {<br/>            Ok(mut f) =&gt; { f.read_to_string(&amp;mut buf).unwrap(); }<br/>            Err(e)    =&gt; {<br/>                println!(\"Error opening '{}': {}\", args[1], e);<br/>                return;<br/>            }<br/>        }<br/>\u00a0<br/>        buf.chars().collect()<br/>    };<br/>\u00a0<br/>    // Launch options<br/>    let debug = args.contains(&amp;\"--debug\".to_owned());<br/>\u00a0<br/>    // One pass to find bracket pairs.<br/>    let brackets: HashMap&lt;usize, usize&gt; = {<br/>        let mut m = HashMap::new();<br/>        let mut scope_stack = Vec::new();<br/>        for (idx, ch) in src.iter().enumerate() {<br/>            match ch {<br/>                &amp;'[' =&gt; { scope_stack.push(idx); }<br/>                &amp;']' =&gt; { m.insert(scope_stack.pop().unwrap(), idx); }<br/>                _    =&gt; { /* ignore */ }<br/>            }<br/>        }<br/>\u00a0<br/>        m<br/>    };<br/>\u00a0<br/>    let mut pc: usize = 0;                                  // Program counter<br/>    let mut mem: [Wrapping&lt;u8&gt;;5000] = [Wrapping(0);5000];  // Program cemory<br/>    let mut ptr: usize = 0;                                 // Pointer<br/>    let mut stack: Vec&lt;usize&gt; = Vec::new();                 // Bracket stack<br/>\u00a0<br/>    let stdin_ = stdin();<br/>    let mut reader = stdin_.lock().bytes();<br/>    while pc &lt; src.len() {<br/>        let Wrapping(val) = mem[ptr];<br/>\u00a0<br/>        if debug {<br/>            println!(\"(BFDB) PC: {:04} \\tPTR: {:04} \\t$PTR: {:03} \\tSTACK_DEPTH: {} \\tSYMBOL: {}\", pc, ptr, val, stack.len(), src[pc]);<br/>        }<br/>\u00a0<br/>        const ONE: Wrapping&lt;u8&gt; = Wrapping(1);<br/>        match src[pc] {<br/>            '&gt;' =&gt; { ptr += 1; }<br/>            '&lt;' =&gt; { ptr -= 1; }<br/>\u00a0<br/>            '+' =&gt; { mem[ptr] = mem[ptr] + ONE; }<br/>            '-' =&gt; { mem[ptr] = mem[ptr] - ONE; }<br/>\u00a0<br/>            '[' =&gt; {<br/>                if val == 0 {<br/>                    pc = brackets[&amp;pc];<br/>                } else {<br/>                    stack.push(pc);<br/>                }<br/>            }<br/>            ']' =&gt; {<br/>                let matching_bracket = stack.pop().unwrap();<br/>                if val\u00a0!= 0 {<br/>                    pc = matching_bracket - 1;<br/>                }<br/>            }<br/>\u00a0<br/>            '.' =&gt; {<br/>                if debug {<br/>                    println!(\"(BFDB) STDOUT: '{}'\", val as char);  // Intercept output<br/>                } else {<br/>                    print!(\"{}\", val as char);<br/>                }<br/>            }<br/>            ',' =&gt; {<br/>                mem[ptr] = Wrapping(reader.next().unwrap().unwrap());<br/>            }<br/>\u00a0<br/>            _   =&gt; { /* ignore */ }<br/>        }<br/>\u00a0<br/>        pc += 1;<br/>    }<br/>}</pre>"}, {"lang": "Rust", "loc": 99, "block": "<pre class=\"text highlighted_source\">use std::collections::HashMap;<br/>use std::env;<br/>use std::fs::File;<br/>use std::io::prelude::*;<br/>use std::io::stdin;<br/>use std::num::Wrapping;<br/>\u00a0<br/>fn main() {<br/>    let args: Vec&lt;_&gt; = env::args().collect();<br/>    if args.len() &lt; 2 {<br/>        println!(\"Usage: {} [path] (--debug)\", args[0]);<br/>        return;<br/>    }<br/>\u00a0<br/>    let src: Vec&lt;char&gt; = {<br/>        let mut buf = String::new();<br/>        match File::open(&amp;args[1])<br/>        {<br/>            Ok(mut f) =&gt; { f.read_to_string(&amp;mut buf).unwrap(); }<br/>            Err(e)    =&gt; {<br/>                println!(\"Error opening '{}': {}\", args[1], e);<br/>                return;<br/>            }<br/>        }<br/>\u00a0<br/>        buf.chars().collect()<br/>    };<br/>\u00a0<br/>    // Launch options<br/>    let debug = args.contains(&amp;\"--debug\".to_owned());<br/>\u00a0<br/>    // One pass to find bracket pairs.<br/>    let brackets: HashMap&lt;usize, usize&gt; = {<br/>        let mut m = HashMap::new();<br/>        let mut scope_stack = Vec::new();<br/>        for (idx, ch) in src.iter().enumerate() {<br/>            match ch {<br/>                &amp;'[' =&gt; { scope_stack.push(idx); }<br/>                &amp;']' =&gt; { m.insert(scope_stack.pop().unwrap(), idx); }<br/>                _    =&gt; { /* ignore */ }<br/>            }<br/>        }<br/>\u00a0<br/>        m<br/>    };<br/>\u00a0<br/>    let mut pc: usize = 0;                                  // Program counter<br/>    let mut mem: [Wrapping&lt;u8&gt;;5000] = [Wrapping(0);5000];  // Program cemory<br/>    let mut ptr: usize = 0;                                 // Pointer<br/>    let mut stack: Vec&lt;usize&gt; = Vec::new();                 // Bracket stack<br/>\u00a0<br/>    let stdin_ = stdin();<br/>    let mut reader = stdin_.lock().bytes();<br/>    while pc &lt; src.len() {<br/>        let Wrapping(val) = mem[ptr];<br/>\u00a0<br/>        if debug {<br/>            println!(\"(BFDB) PC: {:04} \\tPTR: {:04} \\t$PTR: {:03} \\tSTACK_DEPTH: {} \\tSYMBOL: {}\", pc, ptr, val, stack.len(), src[pc]);<br/>        }<br/>\u00a0<br/>        const ONE: Wrapping&lt;u8&gt; = Wrapping(1);<br/>        match src[pc] {<br/>            '&gt;' =&gt; { ptr += 1; }<br/>            '&lt;' =&gt; { ptr -= 1; }<br/>\u00a0<br/>            '+' =&gt; { mem[ptr] = mem[ptr] + ONE; }<br/>            '-' =&gt; { mem[ptr] = mem[ptr] - ONE; }<br/>\u00a0<br/>            '[' =&gt; {<br/>                if val == 0 {<br/>                    pc = brackets[&amp;pc];<br/>                } else {<br/>                    stack.push(pc);<br/>                }<br/>            }<br/>            ']' =&gt; {<br/>                let matching_bracket = stack.pop().unwrap();<br/>                if val\u00a0!= 0 {<br/>                    pc = matching_bracket - 1;<br/>                }<br/>            }<br/>\u00a0<br/>            '.' =&gt; {<br/>                if debug {<br/>                    println!(\"(BFDB) STDOUT: '{}'\", val as char);  // Intercept output<br/>                } else {<br/>                    print!(\"{}\", val as char);<br/>                }<br/>            }<br/>            ',' =&gt; {<br/>                mem[ptr] = Wrapping(reader.next().unwrap().unwrap());<br/>            }<br/>\u00a0<br/>            _   =&gt; { /* ignore */ }<br/>        }<br/>\u00a0<br/>        pc += 1;<br/>    }<br/>}</pre>"}, {"lang": "Scheme", "loc": 53, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: brainF (in string: source, inout file: input, inout file: output) is func<br/>  local<br/>    var array char: memory is 100000 times '\\0;';<br/>    var integer: dataPointer is 50000;<br/>    var integer: instructionPointer is 1;<br/>    var integer: nestingLevel is 0;<br/>  begin<br/>    while instructionPointer &lt;= length(source) do<br/>      case source[instructionPointer] of<br/>        when {'&gt;'}: incr(dataPointer);<br/>        when {'&lt;'}: decr(dataPointer);<br/>        when {'+'}: incr(memory[dataPointer]);<br/>        when {'-'}: decr(memory[dataPointer]);<br/>        when {'.'}: write(output, memory[dataPointer]);<br/>        when {','}: memory[dataPointer]\u00a0:= getc(input);<br/>        when {'['}: # Forward if zero at dataPointer<br/>          if memory[dataPointer] = '\\0;' then<br/>            nestingLevel\u00a0:= 1;<br/>            repeat<br/>              incr(instructionPointer);<br/>              case source[instructionPointer] of<br/>                when {'['}: incr(nestingLevel);<br/>                when {']'}: decr(nestingLevel);<br/>              end case;<br/>            until nestingLevel = 0;<br/>          end if;<br/>        when {']'}: # Backward if non-zero at dataPointer<br/>          if memory[dataPointer] &lt;&gt; '\\0;' then<br/>            nestingLevel\u00a0:= 1;<br/>            repeat<br/>              decr(instructionPointer);<br/>              case source[instructionPointer] of<br/>                when {'['}: decr(nestingLevel);<br/>                when {']'}: incr(nestingLevel);<br/>              end case;<br/>            until nestingLevel = 0;<br/>          end if;<br/>      end case;<br/>      incr(instructionPointer);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: brainF (in string: source) is func<br/>  begin<br/>    brainF(source, IN, OUT);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    brainF(\"++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.\");<br/>  end func;</pre>"}, {"lang": "Seed7", "loc": 53, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: brainF (in string: source, inout file: input, inout file: output) is func<br/>  local<br/>    var array char: memory is 100000 times '\\0;';<br/>    var integer: dataPointer is 50000;<br/>    var integer: instructionPointer is 1;<br/>    var integer: nestingLevel is 0;<br/>  begin<br/>    while instructionPointer &lt;= length(source) do<br/>      case source[instructionPointer] of<br/>        when {'&gt;'}: incr(dataPointer);<br/>        when {'&lt;'}: decr(dataPointer);<br/>        when {'+'}: incr(memory[dataPointer]);<br/>        when {'-'}: decr(memory[dataPointer]);<br/>        when {'.'}: write(output, memory[dataPointer]);<br/>        when {','}: memory[dataPointer]\u00a0:= getc(input);<br/>        when {'['}: # Forward if zero at dataPointer<br/>          if memory[dataPointer] = '\\0;' then<br/>            nestingLevel\u00a0:= 1;<br/>            repeat<br/>              incr(instructionPointer);<br/>              case source[instructionPointer] of<br/>                when {'['}: incr(nestingLevel);<br/>                when {']'}: decr(nestingLevel);<br/>              end case;<br/>            until nestingLevel = 0;<br/>          end if;<br/>        when {']'}: # Backward if non-zero at dataPointer<br/>          if memory[dataPointer] &lt;&gt; '\\0;' then<br/>            nestingLevel\u00a0:= 1;<br/>            repeat<br/>              decr(instructionPointer);<br/>              case source[instructionPointer] of<br/>                when {'['}: decr(nestingLevel);<br/>                when {']'}: incr(nestingLevel);<br/>              end case;<br/>            until nestingLevel = 0;<br/>          end if;<br/>      end case;<br/>      incr(instructionPointer);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: brainF (in string: source) is func<br/>  begin<br/>    brainF(source, IN, OUT);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    brainF(\"++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.\");<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 48, "block": "<pre class=\"ruby highlighted_source\">define tape_length = <span class=\"nu0\">50</span>_000;<br/>define eof_val = <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<br/>define unbalanced_exit_code = <span class=\"nu0\">1</span>;<br/>\u00a0<br/>var cmd = <span class=\"nu0\">0</span>;<br/>var cell = <span class=\"nu0\">0</span>;<br/>var code = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>var loops = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>var tape = tape_length.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>func get_input <span class=\"br0\">{</span><br/>    static input_buffer = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>    input_buffer.<span class=\"me1\">len</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>input_buffer = <span class=\"br0\">(</span><span class=\"br0\">(</span>STDIN.<span class=\"kw3\">readline</span> \\\\ <span class=\"kw2\">return</span> eof_val<span class=\"br0\">)</span>.<span class=\"kw3\">chomp</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">ord</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    input_buffer.<span class=\"me1\">shift</span> \\\\ eof_val;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func jump <span class=\"br0\">{</span><br/>    var depth = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">++</span>cmd <span class=\"sy0\">&lt;</span> code.<span class=\"me1\">len</span> <span class=\"sy0\">||</span> Sys.<span class=\"kw3\">exit</span><span class=\"br0\">(</span>unbalanced_exit_code<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>cmd<span class=\"br0\">]</span> == <span class=\"st0\">'['</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span>depth;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>cmd<span class=\"br0\">]</span> == <span class=\"st0\">']'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">--</span>depth;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var commands = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">'&gt;'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span>cell <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'&lt;'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> <span class=\"sy0\">--</span>cell <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'+'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> <span class=\"sy0\">++</span>tape<span class=\"br0\">[</span>cell<span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'-'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> <span class=\"sy0\">--</span>tape<span class=\"br0\">[</span>cell<span class=\"br0\">]</span> <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'.'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> tape<span class=\"br0\">[</span>cell<span class=\"br0\">]</span>.<span class=\"me1\">chr</span>.<span class=\"kw3\">print</span> <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">','</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> tape<span class=\"br0\">[</span>cell<span class=\"br0\">]</span> = get_input<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">'['</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> tape<span class=\"br0\">[</span>cell<span class=\"br0\">]</span>\u00a0? loops.<span class=\"me1\">append</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span>\u00a0: jump<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>    <span class=\"st0\">']'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> cmd = <span class=\"br0\">(</span>loops.<span class=\"me1\">pop</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/><span class=\"br0\">)</span>;<br/>\u00a0<br/>STDOUT.<span class=\"me1\">autoflush</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>code = ARGF.<span class=\"me1\">slurp</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> commands.<span class=\"me1\">exists</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">}</span>;<br/>var code_len = code.<span class=\"me1\">len</span>;<br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>cmd <span class=\"sy0\">&lt;</span> code_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    commands<span class=\"br0\">{</span>code<span class=\"br0\">[</span>cmd<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">run</span>;<br/>    cmd<span class=\"sy0\">++</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 129, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let valids = [\"&gt;\", \"&lt;\", \"+\", \"-\", \".\", \",\", \"[\", \"]\"] as Set&lt;Character&gt;<br/>var ip = 0<br/>var dp = 0<br/>var data = [UInt8](count: 30_000, repeatedValue: 0)<br/>\u00a0<br/>let input = Process.arguments<br/>\u00a0<br/>if input.count\u00a0!= 2 {<br/>    fatalError(\"Need one input file\")<br/>}<br/>\u00a0<br/>let infile: String!<br/>\u00a0<br/>do {<br/>    infile = try String(contentsOfFile: input[1], encoding: NSUTF8StringEncoding)\u00a0?? \"\"<br/>} catch let err {<br/>    infile = \"\"<br/>}<br/>\u00a0<br/>var program = \"\"<br/>\u00a0<br/>// remove invalid chars<br/>for c in infile.characters {<br/>    if valids.contains(c) {<br/>        program += String(c)<br/>    }<br/>}<br/>\u00a0<br/>let numChars = program.characters.count<br/>\u00a0<br/>if numChars == 0 {<br/>    fatalError(\"Error reading file\")<br/>}<br/>\u00a0<br/>func increaseInstructionPointer() {<br/>    ip += 1<br/>}<br/>\u00a0<br/>func executeInstruction(ins: Character) {<br/>    switch ins {<br/>    case \"&gt;\":<br/>        dp += 1<br/>        increaseInstructionPointer()<br/>    case \"&lt;\":<br/>        dp -= 1<br/>        increaseInstructionPointer()<br/>    case \"+\":<br/>        data[dp] = data[dp] &amp;+ 1<br/>        increaseInstructionPointer()<br/>    case \"-\":<br/>        data[dp] = data[dp] &amp;- 1<br/>        increaseInstructionPointer()<br/>    case \".\":<br/>        print(Character(UnicodeScalar(data[dp])), terminator: \"\")<br/>        increaseInstructionPointer()<br/>    case \",\":<br/>        handleIn()<br/>        increaseInstructionPointer()<br/>    case \"[\":<br/>        handleOpenBracket()<br/>    case \"]\":<br/>        handleClosedBracket()<br/>    default:<br/>        fatalError(\"What\")<br/>    }<br/>}<br/>\u00a0<br/>func handleIn() {<br/>    let input = NSFileHandle.fileHandleWithStandardInput()<br/>    let bytes = input.availableData.bytes<br/>    let buf = unsafeBitCast(UnsafeBufferPointer(start: bytes, count: 1),<br/>        UnsafeBufferPointer&lt;UInt8&gt;.self)<br/>\u00a0<br/>    data[dp] = buf[0]<br/>}<br/>\u00a0<br/>func handleOpenBracket() {<br/>    if data[dp] == 0 {<br/>        var i = 1<br/>\u00a0<br/>        while i &gt; 0 {<br/>            ip += 1<br/>            let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>            if ins == \"[\" {<br/>                i += 1<br/>            } else if ins == \"]\" {<br/>                i -= 1<br/>            }<br/>        }<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>func handleClosedBracket() {<br/>    if data[dp]\u00a0!= 0 {<br/>        var i = 1<br/>\u00a0<br/>        while i &gt; 0 {<br/>            ip -= 1<br/>            let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>            if ins == \"[\" {<br/>                i -= 1<br/>            } else if ins == \"]\" {<br/>                i += 1<br/>            }<br/>        }<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>func tick() {<br/>    let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>    if valids.contains(ins) {<br/>        executeInstruction(ins)<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>while ip\u00a0!= numChars {<br/>    tick()<br/>}</pre>"}, {"lang": "Swift", "loc": 129, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let valids = [\"&gt;\", \"&lt;\", \"+\", \"-\", \".\", \",\", \"[\", \"]\"] as Set&lt;Character&gt;<br/>var ip = 0<br/>var dp = 0<br/>var data = [UInt8](count: 30_000, repeatedValue: 0)<br/>\u00a0<br/>let input = Process.arguments<br/>\u00a0<br/>if input.count\u00a0!= 2 {<br/>    fatalError(\"Need one input file\")<br/>}<br/>\u00a0<br/>let infile: String!<br/>\u00a0<br/>do {<br/>    infile = try String(contentsOfFile: input[1], encoding: NSUTF8StringEncoding)\u00a0?? \"\"<br/>} catch let err {<br/>    infile = \"\"<br/>}<br/>\u00a0<br/>var program = \"\"<br/>\u00a0<br/>// remove invalid chars<br/>for c in infile.characters {<br/>    if valids.contains(c) {<br/>        program += String(c)<br/>    }<br/>}<br/>\u00a0<br/>let numChars = program.characters.count<br/>\u00a0<br/>if numChars == 0 {<br/>    fatalError(\"Error reading file\")<br/>}<br/>\u00a0<br/>func increaseInstructionPointer() {<br/>    ip += 1<br/>}<br/>\u00a0<br/>func executeInstruction(ins: Character) {<br/>    switch ins {<br/>    case \"&gt;\":<br/>        dp += 1<br/>        increaseInstructionPointer()<br/>    case \"&lt;\":<br/>        dp -= 1<br/>        increaseInstructionPointer()<br/>    case \"+\":<br/>        data[dp] = data[dp] &amp;+ 1<br/>        increaseInstructionPointer()<br/>    case \"-\":<br/>        data[dp] = data[dp] &amp;- 1<br/>        increaseInstructionPointer()<br/>    case \".\":<br/>        print(Character(UnicodeScalar(data[dp])), terminator: \"\")<br/>        increaseInstructionPointer()<br/>    case \",\":<br/>        handleIn()<br/>        increaseInstructionPointer()<br/>    case \"[\":<br/>        handleOpenBracket()<br/>    case \"]\":<br/>        handleClosedBracket()<br/>    default:<br/>        fatalError(\"What\")<br/>    }<br/>}<br/>\u00a0<br/>func handleIn() {<br/>    let input = NSFileHandle.fileHandleWithStandardInput()<br/>    let bytes = input.availableData.bytes<br/>    let buf = unsafeBitCast(UnsafeBufferPointer(start: bytes, count: 1),<br/>        UnsafeBufferPointer&lt;UInt8&gt;.self)<br/>\u00a0<br/>    data[dp] = buf[0]<br/>}<br/>\u00a0<br/>func handleOpenBracket() {<br/>    if data[dp] == 0 {<br/>        var i = 1<br/>\u00a0<br/>        while i &gt; 0 {<br/>            ip += 1<br/>            let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>            if ins == \"[\" {<br/>                i += 1<br/>            } else if ins == \"]\" {<br/>                i -= 1<br/>            }<br/>        }<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>func handleClosedBracket() {<br/>    if data[dp]\u00a0!= 0 {<br/>        var i = 1<br/>\u00a0<br/>        while i &gt; 0 {<br/>            ip -= 1<br/>            let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>            if ins == \"[\" {<br/>                i -= 1<br/>            } else if ins == \"]\" {<br/>                i += 1<br/>            }<br/>        }<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>func tick() {<br/>    let ins = program[program.startIndex.advancedBy(ip)]<br/>\u00a0<br/>    if valids.contains(ins) {<br/>        executeInstruction(ins)<br/>    } else {<br/>        increaseInstructionPointer()<br/>    }<br/>}<br/>\u00a0<br/>while ip\u00a0!= numChars {<br/>    tick()<br/>}</pre>"}, {"lang": "TI-83 BASIC", "loc": 76, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Execute BrainFuck<br/></span><span class=\"co1\">'VBScript Implementation<br/></span><br/><span class=\"co1\">'The Main Interpreter<br/></span><span class=\"kw2\">Function</span> BFInpt(s, sp, d, dp, i, ip, o)<br/>    <span class=\"kw3\">While</span> sp &lt; Len(s)<br/>        <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Mid(s, sp + 1, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"+\"</span><br/>                newd = Asc(d(dp)) + 1<br/>                <span class=\"kw3\">If</span> newd &gt; 255 <span class=\"kw3\">Then</span> newd = newd <span class=\"kw4\">Mod</span> 256    <span class=\"co1\">'To take account of values over 255<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"-\"</span><br/>                newd = Asc(d(dp)) - 1<br/>                <span class=\"kw3\">If</span> newd &lt; 0 <span class=\"kw3\">Then</span> newd = (newd <span class=\"kw4\">Mod</span> 256) + 256    <span class=\"co1\">'To take account of negative values<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&gt;\"</span><br/>                dp = dp + 1<br/>                <span class=\"kw3\">If</span> dp &gt; <span class=\"kw4\">UBound</span>(d) <span class=\"kw3\">Then</span><br/>                    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> d(<span class=\"kw4\">UBound</span>(d) + 1)<br/>                    d(dp) = Chr(0)<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&lt;\"</span><br/>                dp = dp - 1<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\".\"</span><br/>                o = o &amp; d(dp)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"kw3\">If</span> ip = Len(i) <span class=\"kw3\">Then</span> d(dp) = Chr(0) <span class=\"kw3\">Else</span> ip = ip + 1\u00a0: d(dp) = Mid(i, ip, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"[\"</span><br/>                <span class=\"kw3\">If</span> Asc(d(dp)) = 0 <span class=\"kw3\">Then</span><br/>                    bracket = 1<br/>                    <span class=\"kw3\">While</span> bracket <span class=\"kw3\">And</span> sp &lt; Len(s)<br/>                        sp = sp + 1<br/>                        <span class=\"kw3\">If</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"[\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket + 1<br/>                        <span class=\"kw3\">ElseIf</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"]\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket - 1<br/>                        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>                    WEnd<br/>                <span class=\"kw3\">Else</span><br/>                    pos = sp - 1<br/>                    sp = sp + 1<br/>                    <span class=\"kw3\">If</span> BFInpt(s, sp, d, dp, i, ip, o) <span class=\"kw3\">Then</span> sp = pos<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"]\"</span><br/>                BFInpt = Asc(d(dp)) &lt;&gt; 0<br/>                <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        sp = sp + 1<br/>    WEnd<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'This Prepares the Intepreter<br/></span><span class=\"kw2\">Function</span> BFuck(source, <span class=\"kw4\">input</span>)<br/>    <span class=\"kw4\">Dim</span> data()\u00a0: <span class=\"kw4\">ReDim</span> data(0)<br/>    data(0)  = Chr(0)<br/>    DataPtr  = 0<br/>    SrcPtr   = 0<br/>    InputPtr = 0<br/>    <span class=\"kw4\">output</span>   = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    BFInpt source , SrcPtr   , _<br/>           data   , DataPtr  , _<br/>           <span class=\"kw4\">input</span>  , InputPtr , _<br/>           <span class=\"kw4\">output</span><br/>    BFuck = <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">'Sample Run<br/></span><span class=\"co1\">'The input is a string. The first character will be scanned by the first comma<br/></span><span class=\"co1\">'in the code, the next character will be scanned by the next comma, and so on.<br/></span><br/>code   = <span class=\"st0\">\"&gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;\"</span> &amp; _<br/>         <span class=\"st0\">\"&gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"</span><br/>inpstr = <span class=\"st0\">\"\"</span><br/>WScript.StdOut.Write BFuck(code, inpstr)</pre>"}, {"lang": "TI-89 BASIC", "loc": 76, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Execute BrainFuck<br/></span><span class=\"co1\">'VBScript Implementation<br/></span><br/><span class=\"co1\">'The Main Interpreter<br/></span><span class=\"kw2\">Function</span> BFInpt(s, sp, d, dp, i, ip, o)<br/>    <span class=\"kw3\">While</span> sp &lt; Len(s)<br/>        <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Mid(s, sp + 1, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"+\"</span><br/>                newd = Asc(d(dp)) + 1<br/>                <span class=\"kw3\">If</span> newd &gt; 255 <span class=\"kw3\">Then</span> newd = newd <span class=\"kw4\">Mod</span> 256    <span class=\"co1\">'To take account of values over 255<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"-\"</span><br/>                newd = Asc(d(dp)) - 1<br/>                <span class=\"kw3\">If</span> newd &lt; 0 <span class=\"kw3\">Then</span> newd = (newd <span class=\"kw4\">Mod</span> 256) + 256    <span class=\"co1\">'To take account of negative values<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&gt;\"</span><br/>                dp = dp + 1<br/>                <span class=\"kw3\">If</span> dp &gt; <span class=\"kw4\">UBound</span>(d) <span class=\"kw3\">Then</span><br/>                    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> d(<span class=\"kw4\">UBound</span>(d) + 1)<br/>                    d(dp) = Chr(0)<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&lt;\"</span><br/>                dp = dp - 1<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\".\"</span><br/>                o = o &amp; d(dp)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"kw3\">If</span> ip = Len(i) <span class=\"kw3\">Then</span> d(dp) = Chr(0) <span class=\"kw3\">Else</span> ip = ip + 1\u00a0: d(dp) = Mid(i, ip, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"[\"</span><br/>                <span class=\"kw3\">If</span> Asc(d(dp)) = 0 <span class=\"kw3\">Then</span><br/>                    bracket = 1<br/>                    <span class=\"kw3\">While</span> bracket <span class=\"kw3\">And</span> sp &lt; Len(s)<br/>                        sp = sp + 1<br/>                        <span class=\"kw3\">If</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"[\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket + 1<br/>                        <span class=\"kw3\">ElseIf</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"]\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket - 1<br/>                        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>                    WEnd<br/>                <span class=\"kw3\">Else</span><br/>                    pos = sp - 1<br/>                    sp = sp + 1<br/>                    <span class=\"kw3\">If</span> BFInpt(s, sp, d, dp, i, ip, o) <span class=\"kw3\">Then</span> sp = pos<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"]\"</span><br/>                BFInpt = Asc(d(dp)) &lt;&gt; 0<br/>                <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        sp = sp + 1<br/>    WEnd<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'This Prepares the Intepreter<br/></span><span class=\"kw2\">Function</span> BFuck(source, <span class=\"kw4\">input</span>)<br/>    <span class=\"kw4\">Dim</span> data()\u00a0: <span class=\"kw4\">ReDim</span> data(0)<br/>    data(0)  = Chr(0)<br/>    DataPtr  = 0<br/>    SrcPtr   = 0<br/>    InputPtr = 0<br/>    <span class=\"kw4\">output</span>   = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    BFInpt source , SrcPtr   , _<br/>           data   , DataPtr  , _<br/>           <span class=\"kw4\">input</span>  , InputPtr , _<br/>           <span class=\"kw4\">output</span><br/>    BFuck = <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">'Sample Run<br/></span><span class=\"co1\">'The input is a string. The first character will be scanned by the first comma<br/></span><span class=\"co1\">'in the code, the next character will be scanned by the next comma, and so on.<br/></span><br/>code   = <span class=\"st0\">\"&gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;\"</span> &amp; _<br/>         <span class=\"st0\">\"&gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"</span><br/>inpstr = <span class=\"st0\">\"\"</span><br/>WScript.StdOut.Write BFuck(code, inpstr)</pre>"}, {"lang": "Tcl", "loc": 76, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Execute BrainFuck<br/></span><span class=\"co1\">'VBScript Implementation<br/></span><br/><span class=\"co1\">'The Main Interpreter<br/></span><span class=\"kw2\">Function</span> BFInpt(s, sp, d, dp, i, ip, o)<br/>    <span class=\"kw3\">While</span> sp &lt; Len(s)<br/>        <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Mid(s, sp + 1, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"+\"</span><br/>                newd = Asc(d(dp)) + 1<br/>                <span class=\"kw3\">If</span> newd &gt; 255 <span class=\"kw3\">Then</span> newd = newd <span class=\"kw4\">Mod</span> 256    <span class=\"co1\">'To take account of values over 255<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"-\"</span><br/>                newd = Asc(d(dp)) - 1<br/>                <span class=\"kw3\">If</span> newd &lt; 0 <span class=\"kw3\">Then</span> newd = (newd <span class=\"kw4\">Mod</span> 256) + 256    <span class=\"co1\">'To take account of negative values<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&gt;\"</span><br/>                dp = dp + 1<br/>                <span class=\"kw3\">If</span> dp &gt; <span class=\"kw4\">UBound</span>(d) <span class=\"kw3\">Then</span><br/>                    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> d(<span class=\"kw4\">UBound</span>(d) + 1)<br/>                    d(dp) = Chr(0)<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&lt;\"</span><br/>                dp = dp - 1<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\".\"</span><br/>                o = o &amp; d(dp)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"kw3\">If</span> ip = Len(i) <span class=\"kw3\">Then</span> d(dp) = Chr(0) <span class=\"kw3\">Else</span> ip = ip + 1\u00a0: d(dp) = Mid(i, ip, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"[\"</span><br/>                <span class=\"kw3\">If</span> Asc(d(dp)) = 0 <span class=\"kw3\">Then</span><br/>                    bracket = 1<br/>                    <span class=\"kw3\">While</span> bracket <span class=\"kw3\">And</span> sp &lt; Len(s)<br/>                        sp = sp + 1<br/>                        <span class=\"kw3\">If</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"[\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket + 1<br/>                        <span class=\"kw3\">ElseIf</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"]\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket - 1<br/>                        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>                    WEnd<br/>                <span class=\"kw3\">Else</span><br/>                    pos = sp - 1<br/>                    sp = sp + 1<br/>                    <span class=\"kw3\">If</span> BFInpt(s, sp, d, dp, i, ip, o) <span class=\"kw3\">Then</span> sp = pos<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"]\"</span><br/>                BFInpt = Asc(d(dp)) &lt;&gt; 0<br/>                <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        sp = sp + 1<br/>    WEnd<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'This Prepares the Intepreter<br/></span><span class=\"kw2\">Function</span> BFuck(source, <span class=\"kw4\">input</span>)<br/>    <span class=\"kw4\">Dim</span> data()\u00a0: <span class=\"kw4\">ReDim</span> data(0)<br/>    data(0)  = Chr(0)<br/>    DataPtr  = 0<br/>    SrcPtr   = 0<br/>    InputPtr = 0<br/>    <span class=\"kw4\">output</span>   = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    BFInpt source , SrcPtr   , _<br/>           data   , DataPtr  , _<br/>           <span class=\"kw4\">input</span>  , InputPtr , _<br/>           <span class=\"kw4\">output</span><br/>    BFuck = <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">'Sample Run<br/></span><span class=\"co1\">'The input is a string. The first character will be scanned by the first comma<br/></span><span class=\"co1\">'in the code, the next character will be scanned by the next comma, and so on.<br/></span><br/>code   = <span class=\"st0\">\"&gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;\"</span> &amp; _<br/>         <span class=\"st0\">\"&gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"</span><br/>inpstr = <span class=\"st0\">\"\"</span><br/>WScript.StdOut.Write BFuck(code, inpstr)</pre>"}, {"lang": "VBScript", "loc": 76, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Execute BrainFuck<br/></span><span class=\"co1\">'VBScript Implementation<br/></span><br/><span class=\"co1\">'The Main Interpreter<br/></span><span class=\"kw2\">Function</span> BFInpt(s, sp, d, dp, i, ip, o)<br/>    <span class=\"kw3\">While</span> sp &lt; Len(s)<br/>        <span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> Mid(s, sp + 1, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"+\"</span><br/>                newd = Asc(d(dp)) + 1<br/>                <span class=\"kw3\">If</span> newd &gt; 255 <span class=\"kw3\">Then</span> newd = newd <span class=\"kw4\">Mod</span> 256    <span class=\"co1\">'To take account of values over 255<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"-\"</span><br/>                newd = Asc(d(dp)) - 1<br/>                <span class=\"kw3\">If</span> newd &lt; 0 <span class=\"kw3\">Then</span> newd = (newd <span class=\"kw4\">Mod</span> 256) + 256    <span class=\"co1\">'To take account of negative values<br/></span>                d(dp) = Chr(newd)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&gt;\"</span><br/>                dp = dp + 1<br/>                <span class=\"kw3\">If</span> dp &gt; <span class=\"kw4\">UBound</span>(d) <span class=\"kw3\">Then</span><br/>                    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> d(<span class=\"kw4\">UBound</span>(d) + 1)<br/>                    d(dp) = Chr(0)<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"&lt;\"</span><br/>                dp = dp - 1<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\".\"</span><br/>                o = o &amp; d(dp)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\",\"</span><br/>                <span class=\"kw3\">If</span> ip = Len(i) <span class=\"kw3\">Then</span> d(dp) = Chr(0) <span class=\"kw3\">Else</span> ip = ip + 1\u00a0: d(dp) = Mid(i, ip, 1)<br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"[\"</span><br/>                <span class=\"kw3\">If</span> Asc(d(dp)) = 0 <span class=\"kw3\">Then</span><br/>                    bracket = 1<br/>                    <span class=\"kw3\">While</span> bracket <span class=\"kw3\">And</span> sp &lt; Len(s)<br/>                        sp = sp + 1<br/>                        <span class=\"kw3\">If</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"[\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket + 1<br/>                        <span class=\"kw3\">ElseIf</span> Mid(s, sp + 1, 1) = <span class=\"st0\">\"]\"</span> <span class=\"kw3\">Then</span><br/>                            bracket = bracket - 1<br/>                        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>                    WEnd<br/>                <span class=\"kw3\">Else</span><br/>                    pos = sp - 1<br/>                    sp = sp + 1<br/>                    <span class=\"kw3\">If</span> BFInpt(s, sp, d, dp, i, ip, o) <span class=\"kw3\">Then</span> sp = pos<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">Case</span> <span class=\"st0\">\"]\"</span><br/>                BFInpt = Asc(d(dp)) &lt;&gt; 0<br/>                <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>        sp = sp + 1<br/>    WEnd<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'This Prepares the Intepreter<br/></span><span class=\"kw2\">Function</span> BFuck(source, <span class=\"kw4\">input</span>)<br/>    <span class=\"kw4\">Dim</span> data()\u00a0: <span class=\"kw4\">ReDim</span> data(0)<br/>    data(0)  = Chr(0)<br/>    DataPtr  = 0<br/>    SrcPtr   = 0<br/>    InputPtr = 0<br/>    <span class=\"kw4\">output</span>   = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    BFInpt source , SrcPtr   , _<br/>           data   , DataPtr  , _<br/>           <span class=\"kw4\">input</span>  , InputPtr , _<br/>           <span class=\"kw4\">output</span><br/>    BFuck = <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">'Sample Run<br/></span><span class=\"co1\">'The input is a string. The first character will be scanned by the first comma<br/></span><span class=\"co1\">'in the code, the next character will be scanned by the next comma, and so on.<br/></span><br/>code   = <span class=\"st0\">\"&gt;++++++++[&lt;+++++++++&gt;-]&lt;.&gt;&gt;+&gt;+&gt;++&gt;[-]+&lt;[&gt;[-&gt;+&lt;&lt;++++&gt;]&lt;&lt;]&gt;.+++++++..+++.&gt;\"</span> &amp; _<br/>         <span class=\"st0\">\"&gt;+++++++.&lt;&lt;&lt;[[-]&lt;[-]&gt;]&lt;+++++++++++++++.&gt;&gt;.+++.------.--------.&gt;&gt;+.&gt;++++.\"</span><br/>inpstr = <span class=\"st0\">\"\"</span><br/>WScript.StdOut.Write BFuck(code, inpstr)</pre>"}, {"lang": "x86 Assembly", "loc": 29, "block": "<pre class=\"text highlighted_source\">fcn bf(pgm,input=\"\"){ pgm=pgm.text;  // handle both String and Data<br/>   const CELLS=0d30_000;<br/>   if(Void==pgm.span(\"[\",\"]\")){ println(\"Mismatched brackets\"); return(); }<br/>   fcn(code,z,jmpTable){ // build jump table (for [ &amp; ])<br/>      if(span:=code.span(\"[\",\"]\")){<br/>\t a,b:=span; b+=a-1; jmpTable[a+z]=b+z; jmpTable[b+z]=a+z;<br/>\t self.fcn(code[a+1,b-a-1],z+a+1,jmpTable);<br/>\t self.fcn(code[b+1,*],z+b+1,jmpTable);<br/>      }<br/>   }(pgm,0,jmpTable:=Dictionary());<br/>\u00a0<br/>   tape:=CELLS.pump(Data(CELLS,Int),0);<br/>   ip:=dp:=0; input=input.walker();<br/>   try{<br/>      while(1){<br/>\t switch(pgm[ip]){<br/>\t    case(\"&gt;\"){ dp+=1 }<br/>\t    case(\"&lt;\"){ dp-=1 }<br/>\t    case(\"+\"){ tape[dp]=tape[dp]+1 }<br/>\t    case(\"-\"){ tape[dp]=tape[dp]-1 }<br/>\t    case(\".\"){ tape[dp].toChar().print() }<br/>\t    case(\",\"){ c:=input._next(); tape[dp]=(c and input.value or 0); }<br/>\t    case(\"[\"){ if(0==tape[dp]){ ip=jmpTable[ip] }}<br/>\t    case(\"]\"){ if(tape[dp])   { ip=jmpTable[ip] }}<br/>\t }<br/>\t ip+=1;<br/>      } // while<br/>   }catch(IndexError){}  // read past end of tape == end of program<br/>}</pre>"}, {"lang": "zkl", "loc": 29, "block": "<pre class=\"text highlighted_source\">fcn bf(pgm,input=\"\"){ pgm=pgm.text;  // handle both String and Data<br/>   const CELLS=0d30_000;<br/>   if(Void==pgm.span(\"[\",\"]\")){ println(\"Mismatched brackets\"); return(); }<br/>   fcn(code,z,jmpTable){ // build jump table (for [ &amp; ])<br/>      if(span:=code.span(\"[\",\"]\")){<br/>\t a,b:=span; b+=a-1; jmpTable[a+z]=b+z; jmpTable[b+z]=a+z;<br/>\t self.fcn(code[a+1,b-a-1],z+a+1,jmpTable);<br/>\t self.fcn(code[b+1,*],z+b+1,jmpTable);<br/>      }<br/>   }(pgm,0,jmpTable:=Dictionary());<br/>\u00a0<br/>   tape:=CELLS.pump(Data(CELLS,Int),0);<br/>   ip:=dp:=0; input=input.walker();<br/>   try{<br/>      while(1){<br/>\t switch(pgm[ip]){<br/>\t    case(\"&gt;\"){ dp+=1 }<br/>\t    case(\"&lt;\"){ dp-=1 }<br/>\t    case(\"+\"){ tape[dp]=tape[dp]+1 }<br/>\t    case(\"-\"){ tape[dp]=tape[dp]-1 }<br/>\t    case(\".\"){ tape[dp].toChar().print() }<br/>\t    case(\",\"){ c:=input._next(); tape[dp]=(c and input.value or 0); }<br/>\t    case(\"[\"){ if(0==tape[dp]){ ip=jmpTable[ip] }}<br/>\t    case(\"]\"){ if(tape[dp])   { ip=jmpTable[ip] }}<br/>\t }<br/>\t ip+=1;<br/>      } // while<br/>   }catch(IndexError){}  // read past end of tape == end of program<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 34, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> e=<span class=\"kw3\">LEN</span> p$<br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> a$=p$<span class=\"br0\">(</span>ip<span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"&gt;\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> dp=dp+<span class=\"nu0\">1</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"&lt;\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> dp=dp-<span class=\"nu0\">1</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"+\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>=d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"-\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>=d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\".\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">CHR</span>$ d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>;<br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\",\"</span> <span class=\"kw1\">THEN</span> INPUT d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"[\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">500</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> a$=<span class=\"st0\">\"]\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> bp=bp-<span class=\"nu0\">1</span>: <span class=\"kw1\">IF</span> d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> ip=b<span class=\"br0\">(</span>bp<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">LET</span> ip=ip+<span class=\"nu0\">1</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">IF</span> ip&gt;e <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"eof\"</span>: STOP<br/><span class=\"nu0\">140</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">30</span><br/>\u00a0<br/><span class=\"nu0\">499</span> <span class=\"co3\">REM match close</span><br/><span class=\"nu0\">500</span> <span class=\"kw1\">LET</span> bc=<span class=\"nu0\">1</span>: <span class=\"co3\">REM bracket counter</span><br/><span class=\"nu0\">510</span> <span class=\"kw1\">FOR</span> x=ip+<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> e<br/><span class=\"nu0\">520</span> <span class=\"kw1\">IF</span> p$<span class=\"br0\">(</span>x<span class=\"br0\">)</span>=<span class=\"st0\">\"[\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> bc=bc+<span class=\"nu0\">1</span><br/><span class=\"nu0\">530</span> <span class=\"kw1\">IF</span> p$<span class=\"br0\">(</span>x<span class=\"br0\">)</span>=<span class=\"st0\">\"]\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> bc=bc-<span class=\"nu0\">1</span><br/><span class=\"nu0\">540</span> <span class=\"kw1\">IF</span> bc=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> b<span class=\"br0\">(</span>bp<span class=\"br0\">)</span>=ip: <span class=\"kw1\">LET</span> be=x: <span class=\"kw1\">LET</span> x=e: <span class=\"co3\">REM bc will be 0 once all the subnests have been counted over</span><br/><span class=\"nu0\">550</span> <span class=\"kw1\">IF</span> bc=<span class=\"nu0\">0</span> <span class=\"kw4\">AND</span> d<span class=\"br0\">(</span>dp<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> ip=be: <span class=\"kw1\">LET</span> bp=bp-<span class=\"nu0\">1</span><br/><span class=\"nu0\">560</span> <span class=\"kw1\">NEXT</span> x<br/><span class=\"nu0\">570</span> <span class=\"kw1\">LET</span> bp=bp+<span class=\"nu0\">1</span><br/><span class=\"nu0\">580</span> <span class=\"kw1\">RETURN</span><br/>\u00a0<br/><span class=\"nu0\">999</span> <span class=\"co3\">REM initialisation</span><br/><span class=\"nu0\">1000</span> <span class=\"kw1\">DIM</span> d<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>: <span class=\"co3\">REM data stack</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> dp=<span class=\"nu0\">1</span>: <span class=\"co3\">REM data pointer</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> ip=<span class=\"nu0\">1</span>: <span class=\"co3\">REM instruction pointer</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">DIM</span> b<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>: <span class=\"co3\">REM bracket stack</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> bp=<span class=\"nu0\">1</span>: <span class=\"co3\">REM bracket pointer</span><br/><span class=\"nu0\">1050</span> <span class=\"kw1\">LET</span> p$=<span class=\"st0\">\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;+++++.\"</span>: <span class=\"co3\">REM program, marginally modified from Wikipedia; outputs CHR$ 13 at the end instead of CHR$ 10 as ZX Spectrum Basic handles the carriage return better than the line feed</span><br/><span class=\"nu0\">1060</span> <span class=\"kw1\">RETURN</span></pre>"}]}