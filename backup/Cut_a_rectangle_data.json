{"task": "Cut_a_rectangle", "blocks": [{"lang": "C", "loc": 80, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> byte<span class=\"sy0\">;</span><br/>byte <span class=\"sy0\">*</span>grid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> cnt<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> next<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dir<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> walk<span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>y <span class=\"sy0\">||</span> y <span class=\"sy0\">==</span> h <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>x <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tcnt <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tt <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>\tgrid<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">++,</span> grid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>grid<span class=\"br0\">[</span>t <span class=\"sy0\">+</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\twalk<span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tgrid<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">--,</span> grid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> hh<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> ww<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> recur<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> t<span class=\"sy0\">,</span> cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>\th <span class=\"sy0\">=</span> hh<span class=\"sy0\">,</span> w <span class=\"sy0\">=</span> ww<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> t <span class=\"sy0\">=</span> w<span class=\"sy0\">,</span> w <span class=\"sy0\">=</span> h<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> h<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/>\tcy <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cx <span class=\"sy0\">=</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlen <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgrid <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>grid<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>grid<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> len<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tnext<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tnext<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>w <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tnext<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tnext<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>recur<span class=\"br0\">)</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> cx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> w<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt <span class=\"sy0\">=</span> cy <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>\t\tgrid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tgrid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\twalk<span class=\"br0\">(</span>cy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tcnt<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> w<span class=\"br0\">)</span><br/>\t\tcnt <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>w <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> recur<span class=\"br0\">)</span><br/>\t\tsolve<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> cnt<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> y<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>y <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d x\u00a0%d:\u00a0%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> solve<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 43, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cut-it <span class=\"br0\">(</span>w h <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>recur t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> <span class=\"br0\">(</span>* w h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from cut-it <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> h<span class=\"br0\">)</span> <span class=\"br0\">(</span>rotatef w h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> w <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from cut-it <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cnt <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>m <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'bit<br/>\t\t       <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>cy <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> h <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>cx <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> w <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m cy cx<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> w<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m cy <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>labels<br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>walk <span class=\"br0\">(</span>y x turned<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> y <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> y h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span>incf cnt <span class=\"br0\">(</span><span class=\"kw1\">if</span> turned <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span>return-from walk<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m y x<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m <span class=\"br0\">(</span>- h y<span class=\"br0\">)</span> <span class=\"br0\">(</span>- w x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span><br/>\t\t   for <span class=\"br0\">(</span>dy dx<span class=\"br0\">)</span> in '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   while <span class=\"br0\">(</span><span class=\"kw1\">or</span> turned <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y2 <span class=\"br0\">(</span>+ y dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>x2 <span class=\"br0\">(</span>+ x dx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m y2 x2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"br0\">(</span>walk y2 x2 <span class=\"br0\">(</span><span class=\"kw1\">or</span> turned <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m <span class=\"br0\">(</span>- h y<span class=\"br0\">)</span> <span class=\"br0\">(</span>- w x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> m y x<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"br0\">(</span>walk cy <span class=\"br0\">(</span><span class=\"nu0\">1</span>- cx<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> h w<span class=\"br0\">)</span> <span class=\"br0\">(</span>incf cnt cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">oddp</span> w<span class=\"br0\">)</span> <span class=\"br0\">(</span>walk <span class=\"br0\">(</span><span class=\"nu0\">1</span>- cy<span class=\"br0\">)</span> cx t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>incf cnt <span class=\"br0\">(</span>cut-it h w <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for w from <span class=\"nu0\">1</span> to <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>loop for h from <span class=\"nu0\">1</span> to w <span class=\"kw1\">do</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> <span class=\"br0\">(</span>* w h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~d x ~d: ~d~%\"</span> w h <span class=\"br0\">(</span>cut-it w h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 77, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdlib</span><span class=\"sy0\">,</span> core.<span class=\"me1\">stdc</span>.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> dir <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">__gshared</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/><span class=\"kw4\">__gshared</span> <span class=\"kw4\">uint</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/><span class=\"kw4\">__gshared</span> <span class=\"kw4\">ulong</span> cnt<span class=\"sy0\">;</span><br/><span class=\"kw4\">__gshared</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> next<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> walk<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>y <span class=\"sy0\">||</span> y <span class=\"sy0\">==</span> h <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>x <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cnt <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> t <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>    grid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> staticIota<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>grid<span class=\"br0\">[</span>t <span class=\"sy0\">+</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            walk<span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/>    grid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">ulong</span> solve<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> hh<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> ww<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> recur<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hh <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> ww <span class=\"sy0\">:</span> hh<span class=\"sy0\">;</span><br/>    w <span class=\"sy0\">=</span> <span class=\"br0\">(</span>hh <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> hh <span class=\"sy0\">:</span> ww<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> h<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> cy <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> cx <span class=\"sy0\">=</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    len <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// grid.length = len; // Slower.</span><br/>        <span class=\"kw2\">alias</span> T <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> ptr <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>T<span class=\"sy0\">*</span><span class=\"br0\">)</span>alloca<span class=\"br0\">(</span>len <span class=\"sy0\">*</span> T.<span class=\"me1\">sizeof</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ptr <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>            exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        grid <span class=\"sy0\">=</span> ptr<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    grid<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    len<span class=\"sy0\">--;</span><br/>\u00a0<br/>    next <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>w <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>recur<span class=\"br0\">)</span><br/>        cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> cx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">w</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> t <span class=\"sy0\">=</span> cy <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        grid<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        walk<span class=\"br0\">(</span>cy <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    cnt<span class=\"sy0\">++;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> w<span class=\"br0\">)</span><br/>        cnt <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>w <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> recur<span class=\"br0\">)</span><br/>        solve<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> cnt<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>y <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                printf<span class=\"br0\">(</span><span class=\"st0\">\"%d x\u00a0%d:\u00a0%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> solve<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 38, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Finds solution for cut a rectangle up to 10 x 10.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, j, n<span class=\"sy0\">:</span> Integer<br/>\t\t\tr<span class=\"sy0\">:</span> GRID<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tn <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> n<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\tj <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\tj <span class=\"sy0\">&gt;</span> i<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> i.<span class=\"me1\">bit_and</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> j.<span class=\"me1\">bit_and</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw2\">create</span> r.<span class=\"me1\">make</span> <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>\t\t\t\t\t\tr.<span class=\"me1\">print_solution</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\tj <span class=\"sy0\">:=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 41, "block": "<pre class=\"text highlighted_source\">import  Integer<br/>\u00a0<br/>defmodule Rectangle do<br/>  def cut_it(h, w) when is_odd(h) and is_odd(w), do: 0<br/>  def cut_it(h, w) when is_odd(h), do: cut_it(w, h)<br/>  def cut_it(_, 1), do: 1<br/>  def cut_it(h, 2), do: h<br/>  def cut_it(2, w), do: w<br/>  def cut_it(h, w) do<br/>    grid = List.duplicate(false, (h + 1) * (w + 1))<br/>    t = div(h, 2) * (w + 1) + div(w, 2)<br/>    if is_odd(w) do<br/>      grid = grid |&gt; List.replace_at(t, true) |&gt; List.replace_at(t+1, true)<br/>      walk(h, w, div(h, 2), div(w, 2) - 1, grid) + walk(h, w, div(h, 2) - 1, div(w, 2), grid) * 2<br/>    else<br/>      grid = grid |&gt; List.replace_at(t, true)<br/>      count = walk(h, w, div(h, 2), div(w, 2) - 1, grid)<br/>      if h == w, do: count * 2,<br/>               else: count + walk(h, w, div(h, 2) - 1, div(w, 2), grid)<br/>    end<br/>  end<br/>\u00a0<br/>  defp walk(h, w, y, x, grid, count\\\\0)<br/>  defp walk(h, w, y, x,_grid, count) when y in [0,h] or x in [0,w], do: count+1<br/>  defp walk(h, w, y, x, grid, count) do<br/>    blen = (h + 1) * (w + 1) - 1<br/>    t = y * (w + 1) + x<br/>    grid = grid |&gt; List.replace_at(t, true) |&gt; List.replace_at(blen-t, true)<br/>    Enum.reduce(next(w), count, fn {nt, dy, dx}, cnt -&gt;<br/>      if Enum.at(grid, t+nt), do: cnt, else: cnt + walk(h, w, y+dy, x+dx, grid)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp next(w), do: [{w+1, 1, 0}, {-w-1, -1, 0}, {-1, 0, -1}, {1, 0, 1}]  # {next,dy,dx}<br/>end<br/>\u00a0<br/>Enum.each(1..9, fn w -&gt;<br/>  Enum.each(1..w, fn h -&gt;<br/>    if is_even(w * h), do: IO.puts \"#{w} x #{h}: #{Rectangle.cut_it(w, h)}\"<br/>  end)<br/>end)</pre>"}, {"lang": "Go", "loc": 82, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> grid <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/><span class=\"kw1\">var</span> w<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> last <span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> cnt <span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> next <span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> dir <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> walk<span class=\"sy1\">(</span>y<span class=\"sy1\">,</span> x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> y <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> y <span class=\"sy3\">==</span> h <span class=\"sy3\">||</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> x <span class=\"sy3\">==</span> w <span class=\"sy1\">{</span><br/>        cnt <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    t <span class=\"sy2\">:=</span> y<span class=\"sy3\">*</span><span class=\"sy1\">(</span>w<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> x<br/>    grid<span class=\"sy1\">[</span>t<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    grid<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span>t<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dir <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> grid<span class=\"sy1\">[</span>t<span class=\"sy3\">+</span>next<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            walk<span class=\"sy1\">(</span>y<span class=\"sy3\">+</span>d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> x<span class=\"sy3\">+</span>d<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    grid<span class=\"sy1\">[</span>t<span class=\"sy1\">]</span><span class=\"sy2\">--</span><br/>    grid<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span>t<span class=\"sy1\">]</span><span class=\"sy2\">--</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>hh<span class=\"sy1\">,</span> ww<span class=\"sy1\">,</span> recur <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">=</span> hh<br/>    w <span class=\"sy2\">=</span> ww<br/>\u00a0<br/>    <span class=\"kw1\">if</span> h&amp;<span class=\"nu0\">1</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        h<span class=\"sy1\">,</span> w <span class=\"sy2\">=</span> w<span class=\"sy1\">,</span> h<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> h&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">case</span> w <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">case</span> w <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> h<br/>    <span class=\"kw1\">case</span> h <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> w<br/>    <span class=\"sy1\">}</span><br/>    cy <span class=\"sy2\">:=</span> h <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>    cx <span class=\"sy2\">:=</span> w <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    grid <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>h<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"sy1\">(</span>w<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    last <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>grid<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    next<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    next<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span>w <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    next<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    next<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> w <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> recur <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        cnt <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> cx <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> x &lt; w<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        t <span class=\"sy2\">:=</span> cy<span class=\"sy3\">*</span><span class=\"sy1\">(</span>w<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> x<br/>        grid<span class=\"sy1\">[</span>t<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        grid<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span>t<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        walk<span class=\"sy1\">(</span>cy<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    cnt<span class=\"sy2\">++</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> h <span class=\"sy3\">==</span> w <span class=\"sy1\">{</span><br/>        cnt <span class=\"sy2\">*=</span> <span class=\"nu0\">2</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> w&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; recur <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        solve<span class=\"sy1\">(</span>w<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> cnt<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> y &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> x &lt;<span class=\"sy2\">=</span> y<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> x&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> y&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d x\u00a0%d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> solve<span class=\"sy1\">(</span>y<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 81, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Vector<span class=\"sy0\">.</span>Unboxed<span class=\"sy0\">.</span>Mutable <span class=\"kw1\">as</span> V<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>STRef<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_,</span> when<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/>\u00a0<br/>dir <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>dir <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Env <span class=\"sy0\">=</span> Env <span class=\"br0\">{</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> ret <span class=\"sy0\">::</span> <span class=\"sy0\">!</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> next <span class=\"sy0\">::</span> <span class=\"sy0\">!</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>cutIt <span class=\"sy0\">::</span> STRef s Env <span class=\"sy0\">-&gt;</span> ST s <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>cutIt env <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    e <span class=\"sy0\">&lt;-</span> readSTRef env<br/>    when <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">$</span> h e<span class=\"br0\">)</span> <span class=\"sy0\">$</span> modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> h <span class=\"sy0\">=</span> w e<span class=\"sy0\">,</span><br/>        w <span class=\"sy0\">=</span> h e <span class=\"br0\">}</span><br/>    e <span class=\"sy0\">&lt;-</span> readSTRef env<br/>    <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"br0\">(</span>h e<span class=\"br0\">)</span><br/>        <span class=\"kw1\">then</span> modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">if</span> w e <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">then</span> modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">let</span> blen <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                    t <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>w e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> len <span class=\"sy0\">=</span> blen<span class=\"sy0\">,</span><br/>                    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                    next <span class=\"sy0\">=</span> <span class=\"br0\">[</span> w e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> <span class=\"sy0\">$</span> w e<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>                grid <span class=\"sy0\">&lt;-</span> V<span class=\"sy0\">.</span>replicate <span class=\"br0\">(</span>blen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> False<br/>                <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"br0\">(</span>w e<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                    True <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                        V<span class=\"sy0\">.</span>write grid t True<br/>                        V<span class=\"sy0\">.</span>write grid <span class=\"br0\">(</span>t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> True<br/>                        walk grid <span class=\"br0\">(</span>h e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>w e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        e1 <span class=\"sy0\">&lt;-</span> readSTRef env<br/>                        <span class=\"kw1\">let</span> res1 <span class=\"sy0\">=</span> count e1<br/>                        modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>                        walk grid <span class=\"br0\">(</span>h e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>w e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                        modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> ret <span class=\"sy0\">=</span> res1 <span class=\"sy0\">+</span><br/>                            <span class=\"br0\">(</span>count en <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                    False <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                        V<span class=\"sy0\">.</span>write grid t True<br/>                        walk grid <span class=\"br0\">(</span>h e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>w e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        e2 <span class=\"sy0\">&lt;-</span> readSTRef env<br/>                        <span class=\"kw1\">let</span> count2 <span class=\"sy0\">=</span> count e2<br/>                        <span class=\"kw1\">if</span> h e <span class=\"sy0\">==</span> w e<br/>                            <span class=\"kw1\">then</span> modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> ret <span class=\"sy0\">=</span><br/>                                count2 <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>                            <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>                                walk grid <span class=\"br0\">(</span>h e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span>w e `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                                modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> ret <span class=\"sy0\">=</span><br/>                                    count en <span class=\"br0\">}</span><br/>    <span class=\"kw1\">where</span><br/>        walk grid y x <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>            e <span class=\"sy0\">&lt;-</span> readSTRef env<br/>            <span class=\"kw1\">if</span> y <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> y <span class=\"sy0\">&gt;=</span> h e <span class=\"sy0\">||</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">&gt;=</span> w e<br/>                <span class=\"kw1\">then</span> modifySTRef env <span class=\"sy0\">$</span> \\en <span class=\"sy0\">-&gt;</span> en <span class=\"br0\">{</span> count <span class=\"sy0\">=</span> count en <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>                    <span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w e <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>                    V<span class=\"sy0\">.</span>write grid t True<br/>                    V<span class=\"sy0\">.</span>write grid <span class=\"br0\">(</span>len e <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> True<br/>                    forM<span class=\"sy0\">_</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span>next e<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                        g <span class=\"sy0\">&lt;-</span> V<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> grid <span class=\"br0\">(</span>t <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>                        when <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> g<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>                            walk grid <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"br0\">(</span>dir <span class=\"sy0\">!!</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"br0\">(</span>dir <span class=\"sy0\">!!</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    V<span class=\"sy0\">.</span>write grid t False<br/>                    V<span class=\"sy0\">.</span>write grid <span class=\"br0\">(</span>len e <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> False<br/>\u00a0<br/>cut <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>cut <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> runST <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>    env <span class=\"sy0\">&lt;-</span> newSTRef <span class=\"sy0\">$</span> Env <span class=\"br0\">{</span> w <span class=\"sy0\">=</span> y<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> x<span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> next <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    cutIt env<br/>    result <span class=\"sy0\">&lt;-</span> readSTRef env<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> ret result<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> when <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\" x \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>cut <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>x<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">init=: - {. 1:               <span class=\"co1\">NB. initial state: 1 square choosen</span><br/>prop=: &lt; {:,~<span class=\"nu0\">2</span> ~:/\\ ]        <span class=\"co1\">NB. propagate: neighboring squares (vertically)</span><br/>poss=: <a class=\"__cf_email__\" data-cfemail=\"dd94f39d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,@<span class=\"sy0\">(</span>prop +. prop\"<span class=\"nu0\">1</span> +. prop&amp;.|. +. prop&amp;.|.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span><br/>keep=: poss -. &lt;:@#@, - <a class=\"__cf_email__\" data-cfemail=\"df96f19f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <span class=\"co1\">NB. symmetrically valid possibilities</span><br/>N=: &lt;:@-:@#@,                <span class=\"co1\">NB. how many neighbors to add</span><br/>step=: [: <a class=\"__cf_email__\" data-cfemail=\"4d33630d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;  &lt;@<span class=\"sy0\">(((</span>= <a class=\"__cf_email__\" data-cfemail=\"a9c087e9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$<span class=\"sy0\">)</span> +. ]<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> <span class=\"nu0\">_</span>~ keep<span class=\"sy0\">)</span>\"<span class=\"nu0\">2</span><br/>all=: step^:<a class=\"__cf_email__\" data-cfemail=\"0b454b6265627f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 66, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CutRectangle <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dirs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cutRectangle<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        cutRectangle<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> cutRectangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> h <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span><span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        Stack<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> stack <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> half <span class=\"sy0\">=</span> <span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> bits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, half<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> bits <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> bits <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> half<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> w<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> i <span class=\"sy0\">%</span> w<span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>h <span class=\"sy0\">-</span> r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>w <span class=\"sy0\">-</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>stack.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <span class=\"kw4\">int</span> pos <span class=\"sy0\">=</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> pos <span class=\"sy0\">/</span> w<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dir <span class=\"sy0\">:</span> dirs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> nextR <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> nextC <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> dir<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nextR <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextR <span class=\"sy0\">&lt;</span> h <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&lt;</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>nextR<span class=\"br0\">]</span><span class=\"br0\">[</span>nextC<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>nextR <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> nextC<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            grid<span class=\"br0\">[</span>nextR<span class=\"br0\">]</span><span class=\"br0\">[</span>nextC<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                            count<span class=\"sy0\">++;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> half<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                printResult<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">:</span> arr<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 76, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RectangleCutter <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> w<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> h<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> len<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cnt<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> grid<span class=\"sy0\">:</span> ByteArray<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> next <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dir <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun walk<span class=\"br0\">(</span>y<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || y <span class=\"sy0\">==</span> h || x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || x <span class=\"sy0\">==</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            cnt +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + x<br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span>++<br/>        grid<span class=\"br0\">[</span>len - t<span class=\"br0\">]</span>++<br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> grid<span class=\"br0\">[</span>t + next<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            .<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> walk<span class=\"br0\">(</span>y + dir<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, x + dir<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span>--<br/>        grid<span class=\"br0\">[</span>len - t<span class=\"br0\">]</span>--<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun solve<span class=\"br0\">(</span>hh<span class=\"sy0\">:</span> Int, ww<span class=\"sy0\">:</span> Int, recur<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t<span class=\"sy0\">:</span> Int<br/>        h <span class=\"sy0\">=</span> hh<br/>        w <span class=\"sy0\">=</span> ww<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>h and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            t <span class=\"sy0\">=</span> w<br/>            w <span class=\"sy0\">=</span> h<br/>            h <span class=\"sy0\">=</span> t<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>h and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> 1L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>w <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> h.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> w.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cy <span class=\"sy0\">=</span> h / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cx <span class=\"sy0\">=</span> w / <span class=\"nu0\">2</span><br/>        len <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        grid <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span>len<span class=\"br0\">)</span><br/>        len--<br/>        next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>        next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> -w - <span class=\"nu0\">1</span><br/>        next<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        next<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>recur<span class=\"br0\">)</span> cnt <span class=\"sy0\">=</span> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in cx + <span class=\"nu0\">1</span> until w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            t <span class=\"sy0\">=</span> cy <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + x<br/>            grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            grid<span class=\"br0\">[</span>len - t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            walk<span class=\"br0\">(</span>cy - <span class=\"nu0\">1</span>, x<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        cnt++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span> w<span class=\"br0\">)</span> cnt <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>w and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> recur<span class=\"br0\">)</span> solve<span class=\"br0\">(</span>w, h, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> cnt<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">1</span>..<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || <span class=\"br0\">(</span>y and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(y)} x ${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(x)}: ${RectangleCutter.solve(y, x, true)}\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 82, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> walk <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$y</span> <span class=\"sy0\">||</span> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$h</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"re0\">$x</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$cnt</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span> <span class=\"sy0\">+</span> <span class=\"re0\">$next</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    walk<span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dir</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dir</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">--</span> <span class=\"kw1\">for</span> <span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$hh</span><span class=\"sy0\">,</span> <span class=\"re0\">$ww</span><span class=\"sy0\">,</span> <span class=\"re0\">$recur</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$cx</span><span class=\"sy0\">,</span> <span class=\"re0\">$cy</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$hh</span><span class=\"sy0\">,</span> <span class=\"re0\">$ww</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$h</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$w</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">use</span> integer<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$cy</span><span class=\"sy0\">,</span> <span class=\"re0\">$cx</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"co2\">/ 2, $w /</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$grid</span><span class=\"br0\">[</span><span class=\"re0\">$len</span><span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"re0\">$w</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$recur</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cx</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cy</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\twalk<span class=\"br0\">(</span><span class=\"re0\">$cy</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$cnt</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">==</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$cnt</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$recur</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tsolve<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$cnt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"ok<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d x\u00a0%d:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> solve<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>MAIN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 73, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">subset</span> Byte <span class=\"kw1\">of</span> Int <span class=\"kw1\">where</span> <span class=\"sy0\">^</span><span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@grid</span> <span class=\"kw1\">of</span> Byte <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Int <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> Int <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> walk<span class=\"br0\">(</span>Int <span class=\"re0\">$y</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">$y</span> <span class=\"sy0\">||</span> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$h</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"re0\">$x</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$w</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$cnt</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">++,</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            walk<span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">@dir</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">@dir</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">--,</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve<span class=\"br0\">(</span>Int <span class=\"re0\">$hh</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$ww</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$recur</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> Int <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">,</span> <span class=\"re0\">$cx</span><span class=\"sy0\">,</span> <span class=\"re0\">$cy</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"re0\">$hh</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ww</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$h</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$h</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$w</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"re0\">$h</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$h</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$cy</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$cx</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$len</span><span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$w</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$recur</span> <span class=\"br0\">{</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cx</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cy</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$t</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        walk<span class=\"br0\">(</span><span class=\"re0\">$cy</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$cnt</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$h</span> <span class=\"sy0\">==</span> <span class=\"re0\">$w</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$cnt</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$recur</span> <span class=\"br0\">{</span><br/>        solve<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$cnt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d x\u00a0%d:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> solve<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 53, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> cut_it<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> w<span class=\"br0\">)</span>:<br/>    dirs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> h &amp; <span class=\"nu0\">1</span>: h<span class=\"sy0\">,</span> w <span class=\"sy0\">=</span> w<span class=\"sy0\">,</span> h<br/>    <span class=\"kw1\">if</span> h &amp; <span class=\"nu0\">1</span>: <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> w <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    next <span class=\"sy0\">=</span> <span class=\"br0\">[</span>w + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> -w - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    blen <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h + <span class=\"nu0\">1</span><span class=\"br0\">)</span> * <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    grid <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>blen + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> walk<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> count<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> y <span class=\"kw1\">or</span> y <span class=\"sy0\">==</span> h <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> x <span class=\"kw1\">or</span> x <span class=\"sy0\">==</span> w:<br/>            <span class=\"kw1\">return</span> count + <span class=\"nu0\">1</span><br/>\u00a0<br/>        t <span class=\"sy0\">=</span> y * <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + x<br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>blen - t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> grid<span class=\"br0\">[</span>t + next<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>:<br/>            count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>y + dirs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x + dirs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> grid<span class=\"br0\">[</span>t + next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>:<br/>            count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>y + dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x + dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> grid<span class=\"br0\">[</span>t + next<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span>:<br/>            count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>y + dirs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x + dirs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> grid<span class=\"br0\">[</span>t + next<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span>:<br/>            count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>y + dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x + dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>blen - t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>        <span class=\"kw1\">return</span> count<br/>\u00a0<br/>    t <span class=\"sy0\">=</span> h // <span class=\"nu0\">2</span> * <span class=\"br0\">(</span>w + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + w // <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> w &amp; <span class=\"nu0\">1</span>:<br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>t + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>        count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>h // <span class=\"nu0\">2</span><span class=\"sy0\">,</span> w // <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        res <span class=\"sy0\">=</span> count<br/>        count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>h // <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w // <span class=\"nu0\">2</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> res + count * <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">else</span>:<br/>        grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>        count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>h // <span class=\"nu0\">2</span><span class=\"sy0\">,</span> w // <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> h <span class=\"sy0\">==</span> w:<br/>            <span class=\"kw1\">return</span> count * <span class=\"nu0\">2</span><br/>        count <span class=\"sy0\">=</span> walk<span class=\"br0\">(</span>h // <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"sy0\">,</span> w // <span class=\"nu0\">2</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> count<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> w <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> h <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> w + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span><span class=\"br0\">(</span>w * h<span class=\"br0\">)</span> &amp; <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">print</span> <span class=\"st0\">\"%d x\u00a0%d:\u00a0%d\"</span>\u00a0% <span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> cut_it<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (cuts W H [count 0])\u00a0; count = #f =&gt; visualize instead<br/>  (define W1 (add1 W)) (define H1 (add1 H))<br/>  (define B (make-vector (* W1 H1) #f))<br/>  (define (fD d) (cadr (assq d '([U D] [D U] [L R] [R L] [#f #f] [#t #t]))))<br/>  (define (fP p) (- (* W1 H1) p 1))<br/>  (define (Bset! p d) (vector-set! B p d) (vector-set! B (fP p) (fD d)))<br/>  (define center (/ (fP 0) 2))<br/>  (when (integer? center) (Bset! center #t))<br/>  (define (run c* d)<br/>    (define p (- center c*))<br/>    (Bset! p d)<br/>    (let loop ([p p])<br/>      (define-values [q r] (quotient/remainder p W1))<br/>      (if (and (&lt; 0 r W) (&lt; 0 q H))<br/>        (for ([d '(U D L R)])<br/>          (define n (+ p (case d [(U) (- W1)] [(D) W1] [(L) -1] [(R) 1])))<br/>          (unless (vector-ref B n) (Bset! n (fD d)) (loop n) (Bset! n #f)))<br/>        (if count (set! count (add1 count)) (visualize B W H))))<br/>    (Bset! p #f))<br/>  (when (even? W) (run (if (odd? H) (/ W1 2) W1) 'D))<br/>  (when (even? H) (run (if (odd? W) 1/2 1)       'R))<br/>  (or count (void)))<br/>\u00a0<br/>(define (visualize B W H)<br/>  (define W2 (+ 2 (* W 2))) (define H2 (+ 1 (* H 2)))<br/>  (define str (make-string (* H2 W2) #\\space))<br/>  (define (Sset! i c) (string-set! str i c))<br/>  (for ([i (in-range (- W2 1) (* W2 H2) W2)]) (Sset! i #\\newline))<br/>  (for ([i (in-range 0 (- W2 1))]) (Sset! i #\\#) (Sset! (+ i (* W2 H 2)) #\\#))<br/>  (for ([i (in-range 0 (* W2 H2) W2)]) (Sset! i #\\#) (Sset! (+ i W2 -2) #\\#))<br/>  (for* ([i (add1 W)] [j (add1 H)])<br/>    (define p (* 2 (+ i (* j W2))))<br/>    (define b (vector-ref B (+ i (* j (+ W 1)))))<br/>    (cond [b (Sset! p #\\#)<br/>             (define d (case b [(U) (- W2)] [(D) W2] [(R) 1] [(L) -1]))<br/>             (when (integer? d) (Sset! (+ p d) #\\#))]<br/>          [(equal? #\\space (string-ref str p)) (Sset! p #\\.)]))<br/>  (display str) (newline))<br/>\u00a0<br/>(printf \"Counts:\\n\")<br/>(for* ([W (in-range 1 10)] [H (in-range 1 (add1 W))]<br/>       #:unless (and (odd? W) (odd? H)))<br/>  (printf \"~s x ~s: ~s\\n\" W H (cuts W H)))<br/>\u00a0<br/>(newline)<br/>(cuts 4 3 #f)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program cuts rectangles into two symmetric pieces,  the rectangles are cut along */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 unit dimensions and may be rotated.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*be able to handle some big integers. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>;    <span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">10</span>   <span class=\"coMULTI\">/*N  not specified?   Then use default.*/</span><br/>dir<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;   dir<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1=-<span class=\"nu0\">1</span>;   dir<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>0=-<span class=\"nu0\">1</span>;   dir<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>;   dir<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>      <span class=\"coMULTI\">/*the four directions.*/</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span>   y=<span class=\"nu0\">2</span>   <span class=\"kw2\">to</span> N;   <span class=\"kw1\">say</span>                      <span class=\"coMULTI\">/*calculate rectangles up to size  NxN.*/</span><br/>       <span class=\"kw1\">do</span> x=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> y;   <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span> <span class=\"sy0\">&amp;</span> y<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>              <span class=\"coMULTI\">/*not if both X&amp;Y odd.*/</span><br/>       z=solve<span class=\"br0\">(</span>y,x,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; _=comma<span class=\"br0\">(</span>z<span class=\"br0\">)</span>; _=<span class=\"kw6\">right</span><span class=\"br0\">(</span>_, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">14</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*align the output.   */</span><br/>       <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>y,<span class=\"nu0\">9</span><span class=\"br0\">)</span>     <span class=\"st0\">\"x\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span><span class=\"br0\">)</span>     <span class=\"st0\">'rectangle can be cut'</span>    _     <span class=\"st0\">\"way\"</span>s<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*x*/</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*y*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>comma: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> _;  <span class=\"kw1\">do</span> k=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>-<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">3</span>; _=<span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">','</span>,_,k<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> _<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:     <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;   <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">'s'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*pluralizer.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>solve: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> # dir<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> h len next<span class=\"sy0\">.</span> w; @<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>      <span class=\"coMULTI\">/*zero rectangle co\u00f6rdinates.*/</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> h,w,recur                                 <span class=\"coMULTI\">/*get values for some args.  */</span><br/>       <span class=\"kw1\">if</span> h<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;    t=w;  w=h;  h=t;   <span class=\"kw1\">if</span> h<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                     <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">if</span> w==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> w==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> h<br/>       <span class=\"kw1\">if</span> h==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> w                    <span class=\"coMULTI\">/* [\u2193]  \u00a0%  is REXX's integer division.*/</span><br/>       cy=h\u00a0% <span class=\"nu0\">2</span>;     cx=w\u00a0% <span class=\"nu0\">2</span>;        wp=w + <span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*cut the  [XY]  rectangle in half.    */</span><br/>       len=<span class=\"br0\">(</span>h+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> wp - <span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*extend the area of the rectangle.    */</span><br/>       next<span class=\"sy0\">.</span>0=-<span class=\"nu0\">1</span>;     next<span class=\"sy0\">.</span>1=-wp;     next<span class=\"sy0\">.</span>2=<span class=\"nu0\">1</span>;     next<span class=\"sy0\">.</span>3=wp    <span class=\"coMULTI\">/*direction &amp; distance.*/</span><br/>       <span class=\"kw1\">if</span> recur  <span class=\"kw3\">then</span> #=<span class=\"nu0\">0</span><br/>              <span class=\"kw1\">do</span> x=cx+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span>  w-<span class=\"nu0\">1</span>;     t=x + cy<span class=\"sy0\">*</span>wp;      @<span class=\"sy0\">.</span>t=<span class=\"nu0\">1</span>;      _=len - t;       @<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span><br/>              <span class=\"kw1\">call</span> walk cy-<span class=\"nu0\">1</span>, x<br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*x*/</span><br/>       #=#+<span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> h==w  <span class=\"kw3\">then</span> #=# + #                     <span class=\"coMULTI\">/*double the count of rectangle cuts.  */</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> w<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> recur  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> solve w, h, <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">return</span> #<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>walk:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> # dir<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> h len next<span class=\"sy0\">.</span> w wp;       <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y,x<br/>       <span class=\"kw1\">if</span> y==h <span class=\"sy0\">|</span> x==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x==w <span class=\"sy0\">|</span> y==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   #= #+<span class=\"nu0\">2</span>;   <span class=\"kw1\">return</span>;   <span class=\"kw3\">end</span><br/>       t=x + y<span class=\"sy0\">*</span>wp;      @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"c7b3fa87\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>t + <span class=\"nu0\">1</span>;      _=len - t<br/>       @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"d788ea97\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>_+<span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>;        _=t + next<span class=\"sy0\">.</span>j    <span class=\"coMULTI\">/*try each of four directions.*/</span><br/>                    <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>_==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> walk  y + dir<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0,   x + dir<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>1<br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>       @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"ccb8f18c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>t - <span class=\"nu0\">1</span><br/>       _=len - t;       @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"39660479\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>_ - <span class=\"nu0\">1</span>;      <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 40, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> cut_it<span class=\"br0\">(</span>h, w<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> h.<span class=\"me1\">odd</span>?<br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span>  <span class=\"kw1\">if</span> w.<span class=\"me1\">odd</span>?<br/>    h, w = w, h<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw2\">return</span> <span class=\"nu0\">1</span>  <span class=\"kw1\">if</span> w == <span class=\"nu0\">1</span><br/>\u00a0<br/>  nxt = <span class=\"br0\">[</span><span class=\"br0\">[</span>w<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span>w<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>  <span class=\"co1\"># [next,dy,dx]</span><br/>  blen = <span class=\"br0\">(</span>h <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  grid = <span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>blen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  walk = <span class=\"kw3\">lambda</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y, x, count=<span class=\"nu0\">0</span><span class=\"sy0\">|</span><br/>    <span class=\"kw2\">return</span> count<span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <span class=\"kw1\">if</span> y==<span class=\"nu0\">0</span> <span class=\"kw1\">or</span> y==h <span class=\"kw1\">or</span> x==<span class=\"nu0\">0</span> <span class=\"kw1\">or</span> x==w<br/>    t = y <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> = grid<span class=\"br0\">[</span>blen <span class=\"sy0\">-</span> t<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>    nxt.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>nt, dy, dx<span class=\"sy0\">|</span><br/>      count <span class=\"sy0\">+</span>= walk<span class=\"br0\">[</span>y <span class=\"sy0\">+</span> dy, x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span>  <span class=\"kw1\">unless</span> grid<span class=\"br0\">[</span>t <span class=\"sy0\">+</span> nt<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> = grid<span class=\"br0\">[</span>blen <span class=\"sy0\">-</span> t<span class=\"br0\">]</span> = <span class=\"kw2\">false</span><br/>    count<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  t = h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>w <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">if</span> w.<span class=\"me1\">odd</span>?<br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> = grid<span class=\"br0\">[</span>t <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>    count = walk<span class=\"br0\">[</span>h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    count <span class=\"sy0\">+</span> walk<span class=\"br0\">[</span>h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">else</span><br/>    grid<span class=\"br0\">[</span>t<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>    count = walk<span class=\"br0\">[</span>h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">return</span> count <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>  <span class=\"kw1\">if</span> h == w<br/>    count <span class=\"sy0\">+</span> walk<span class=\"br0\">[</span>h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, w <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> w <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><br/>  <span class=\"kw1\">for</span> h <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">w</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"%d x\u00a0%d:\u00a0%d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>w, h, cut_it<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span>.<span class=\"me1\">even</span>?<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 75, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn cwalk(mut vis: &amp;mut Vec&lt;Vec&lt;bool&gt;&gt;, count: &amp;mut isize, w: usize, h: usize, y: usize, x: usize, d: usize) {<br/>    if x == 0 || y == 0 || x == w || y == h {<br/>        *count += 1;<br/>        return;<br/>    }<br/>\u00a0<br/>    vis[y][x] = true;<br/>    vis[h - y][w - x] = true;<br/>\u00a0<br/>    if x\u00a0!= 0 &amp;&amp;\u00a0! vis[y][x - 1] {<br/>        cwalk(&amp;mut vis, count, w, h, y, x - 1, d | 1);<br/>    }<br/>    if d &amp; 1\u00a0!= 0 &amp;&amp; x &lt; w &amp;&amp;\u00a0! vis[y][x+1] {<br/>        cwalk(&amp;mut vis, count, w, h, y, x + 1, d | 1);<br/>    }<br/>    if y\u00a0!= 0 &amp;&amp;\u00a0! vis[y - 1][x] {<br/>        cwalk(&amp;mut vis, count, w, h, y - 1, x, d | 2);<br/>    }<br/>    if d &amp; 2\u00a0!= 0 &amp;&amp; y &lt; h &amp;&amp;\u00a0! vis[y + 1][x] {<br/>        cwalk(&amp;mut vis, count, w, h, y + 1, x, d | 2);<br/>    }<br/>\u00a0<br/>    vis[y][x] = false;<br/>    vis[h - y][w - x] = false;<br/>}<br/>\u00a0<br/>fn count_only(x: usize, y: usize) -&gt; isize {<br/>    let mut count = 0;<br/>    let mut w = x;<br/>    let mut h = y;<br/>\u00a0<br/>    if (h * w) &amp; 1\u00a0!= 0 {<br/>        return count;<br/>    }<br/>    if h &amp; 1\u00a0!= 0 {<br/>        std::mem::swap(&amp;mut w, &amp;mut h);<br/>    }<br/>\u00a0<br/>    let mut vis = vec![vec![false; w + 1]; h + 1];<br/>    vis[h / 2][w / 2] = true;<br/>\u00a0<br/>    if w &amp; 1\u00a0!= 0 {<br/>        vis[h / 2][w / 2 + 1] = true;<br/>    }<br/>    let mut res;<br/>    if w &gt; 1 {<br/>        cwalk(&amp;mut vis, &amp;mut count, w, h, h / 2, w / 2 - 1, 1);<br/>        res = 2 * count - 1;<br/>        count = 0;<br/>        if w\u00a0!= h {<br/>            cwalk(&amp;mut vis, &amp;mut count, w, h, h / 2 + 1, w / 2, if w &amp; 1\u00a0!= 0 { 3 } else { 2 });<br/>        } <br/>        res += 2 * count - if w &amp; 1 == 0 { 1 } else { 0 };<br/>    }<br/>    else {<br/>        res = 1;<br/>    }<br/>\u00a0<br/>    if w == h {<br/>        res = 2 * res + 2;<br/>    }<br/>    res<br/>}<br/>\u00a0<br/>fn main() {<br/>    for y in 1..10 {<br/>        for x in 1..y + 1 {<br/>            if x &amp; 1 == 0 || y &amp; 1 == 0 {<br/>                println!(\"{} x {}: {}\", y, x, count_only(x, y));<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 82, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> walk <span class=\"br0\">{</span>y x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> w ww h cnt grid len<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$y</span> || <span class=\"re0\">$y</span>==<span class=\"re0\">$h</span> || <span class=\"sy0\">!</span><span class=\"re0\">$x</span> || <span class=\"re0\">$x</span>==<span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> cnt <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span> + <span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$len</span> - <span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> grid <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> grid <span class=\"re0\">$m</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span> + <span class=\"re0\">$x</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\twalk <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span> + <span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\twalk <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span> + <span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\twalk <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span> + <span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\twalk <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">lset</span> grid <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> grid <span class=\"re0\">$m</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Factored out core of [solve]</span><br/><span class=\"kw1\">proc</span> SolveCore <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> w ww h cnt grid len<br/>    <span class=\"kw1\">set</span> ww <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$w</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cy <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$w</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$h</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$ww</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> grid <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$len</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">incr</span> len -<span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"re0\">$cx</span><span class=\"sy0\">;</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cy</span><span class=\"sy0\">*</span><span class=\"re0\">$ww</span>+<span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> grid <span class=\"re0\">$t</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw2\">lset</span> grid <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$len</span> - <span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><br/>\twalk <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cy</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">incr</span> cnt<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> solve <span class=\"br0\">{</span>H W<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> w h cnt<br/>    <span class=\"kw1\">set</span> h <span class=\"re0\">$H</span><br/>    <span class=\"kw1\">set</span> w <span class=\"re0\">$W</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> h <span class=\"re0\">$W</span><br/>\t<span class=\"kw1\">set</span> w <span class=\"re0\">$H</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$w</span>==<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$w</span>==<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$h</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span>==<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$w</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> cnt <span class=\"nu0\">0</span><br/>    SolveCore<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$h</span>==<span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> cnt <span class=\"re0\">$cnt</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$w</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$w</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span> h w<br/>\tSolveCore<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$cnt</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>apply <span class=\"br0\">{</span><span class=\"br0\">{</span>limit<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> yy <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$yy</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> yy<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> xx <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$xx</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$yy</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> xx<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$xx</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$yy</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%d x\u00a0%d:\u00a0%ld\"</span> <span class=\"re0\">$yy</span> <span class=\"re0\">$xx</span> <span class=\"br0\">[</span>solve <span class=\"re0\">$yy</span> <span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "zkl", "loc": 34, "block": "<pre class=\"text highlighted_source\">fcn cut_it(h,w){<br/>   if(h.isOdd){<br/>      if(w.isOdd) return(0);<br/>      t,h,w=h,w,t;  // swap w,h: a,b=c,d --&gt; a=c; b=d; so need a tmp<br/>   }<br/>   if(w==1) return(1);<br/>\u00a0<br/>   nxt\u00a0:=T(T(w+1, 1,0), T(-w-1, -1,0), T(-1, 0,-1), T(1, 0,1)); #[next, dy,dx]<br/>   blen:=(h + 1)*(w + 1) - 1;<br/>   grid:=(blen + 1).pump(List(),False); //--&gt;L(False,False...)<br/>\u00a0<br/>   walk:='wrap(y,x){ // lambda closure<br/>      if(y==0 or y==h or x==0 or x==w) return(1);<br/>      count,t:=0,y*(w + 1) + x;<br/>      grid[t]=grid[blen - t]=True;<br/>      foreach nt,dy,dx in (nxt){<br/>         if(not grid[t + nt]) count+=self.fcn(y + dy, x + dx,vm.pasteArgs(2));<br/>      }<br/>      grid[t]=grid[blen - t]=False;<br/>      count<br/>   };<br/>\u00a0<br/>   t:=h/2*(w + 1) + w/2;<br/>   if(w.isOdd){<br/>      grid[t]=grid[t + 1]=True;<br/>      count:=walk(h/2, w/2 - 1);<br/>      count + walk(h/2 - 1, w/2)*2;<br/>   }else{<br/>      grid[t]=True;<br/>      count:=walk(h/2, w/2 - 1);<br/>      if(h==w) return(count*2);<br/>      count + walk(h/2 - 1, w/2);<br/>   }<br/>}</pre>"}]}