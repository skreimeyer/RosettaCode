{"task": "Zhang-Suen_thinning_algorithm", "blocks": [{"lang": "AutoHotkey", "loc": 79, "block": "<pre class=\"autohotkey highlighted_source\">FileIn  <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptDir\"><span class=\"kw2\">A_ScriptDir</span></a> <span class=\"st0\">\"\\Zhang-Suen.txt\"</span><br/>FileOut <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptDir\"><span class=\"kw2\">A_ScriptDir</span></a> <span class=\"st0\">\"\\NewFile.txt\"</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">FileExist</span></a><span class=\"br0\">(</span>FileIn<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> File Not Found<span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"File \"</span><span class=\"st0\">\"\"</span> FileIn <span class=\"st0\">\"\"</span><span class=\"st0\">\" not found.\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"br0\">}</span><br/>S <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>N <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Read<span class=\"sy0\">,</span>\u00a0% FileIn<br/><span class=\"br0\">{</span><br/>\tLineNum <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopReadLine\"><span class=\"kw2\">A_LoopReadLine</span></a><br/>\t\tS<span class=\"br0\">[</span>LineNum<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"br0\">{</span><br/>\tFlipCount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>\t\tNoted <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\tfor LineNum<span class=\"sy0\">,</span> Line in S <span class=\"br0\">{</span><br/>\t\t\tfor PixNum<span class=\"sy0\">,</span> Pix in Line <span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">; (0)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> || <span class=\"br0\">(</span>P <span class=\"sy0\">:=</span> GetNeighbors<span class=\"br0\">(</span>LineNum<span class=\"sy0\">,</span> PixNum<span class=\"sy0\">,</span> S<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\t\t\t<span class=\"co1\">; (1)\t</span><br/>\t\t\t\tBP <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\tfor j<span class=\"sy0\">,</span> Val in P<br/>\t\t\t\t\tBP <span class=\"sy0\">+=</span> Val<br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>BP <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> || BP <span class=\"sy0\">&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\t\t\t<span class=\"co1\">; (2)</span><br/>\t\t\t\tAP <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>P<span class=\"br0\">[</span>N<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">&amp;&amp;</span> P<span class=\"br0\">[</span>N<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tAP<span class=\"sy0\">++</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>AP\u00a0!<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\t\t\t<span class=\"co1\">; (3 and 4)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>P<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> || P<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>P<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> || P<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> P<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\u00a0<br/>\t\t\t\tNoted<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"br0\">[</span>LineNum<span class=\"sy0\">,</span> PixNum<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tFlipCount<span class=\"sy0\">++</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tfor j<span class=\"sy0\">,</span> Coords in Noted<br/>\t\t\tS<span class=\"br0\">[</span>Coords<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Coords<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!FlipCount<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>for LineNum<span class=\"sy0\">,</span> Line in S <span class=\"br0\">{</span><br/>\tfor PixNum<span class=\"sy0\">,</span> Pix in Line<br/>\t\tOut <span class=\"sy0\">.=</span> Pix\u00a0? <span class=\"st0\">\"#\"</span>\u00a0: <span class=\"st0\">\" \"</span><br/>\tOut <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% Out<span class=\"sy0\">,</span>\u00a0% FileOut<br/>\u00a0<br/>GetNeighbors<span class=\"br0\">(</span>Y<span class=\"sy0\">,</span> X<span class=\"sy0\">,</span> S<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tNeighbors <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Neighbors<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> S<span class=\"br0\">[</span>Y<span class=\"sy0\">,</span> X <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Neighbors<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> S<span class=\"br0\">[</span>Y<span class=\"sy0\">,</span> X <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Neighbors<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">9</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> S<span class=\"br0\">[</span>Y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> X <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Neighbors<span class=\"br0\">[</span><span class=\"nu0\">8</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> S<span class=\"br0\">[</span>Y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> X <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> Neighbors<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 1, "block": "<pre>&lt;Rows&gt; &lt;Columns&gt;\n&lt;Blank pixel character&gt; &lt;Image Pixel character&gt;\n&lt;Image of specified rows and columns made up of the two pixel types specified in the second line.&gt;\n</pre>"}, {"lang": "C++", "loc": 242, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;valarray&gt;</span><br/><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input <span class=\"br0\">{</span><br/><span class=\"st0\">\"................................\"</span><br/><span class=\"st0\">\".#########.......########.......\"</span><br/><span class=\"st0\">\".###...####.....####..####......\"</span><br/><span class=\"st0\">\".###....###.....###....###......\"</span><br/><span class=\"st0\">\".###...####.....###.............\"</span><br/><span class=\"st0\">\".#########......###.............\"</span><br/><span class=\"st0\">\".###.####.......###....###......\"</span><br/><span class=\"st0\">\".###..####..###.####..####.###..\"</span><br/><span class=\"st0\">\".###...####.###..########..###..\"</span><br/><span class=\"st0\">\"................................\"</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input2 <span class=\"br0\">{</span><br/><span class=\"st0\">\"..........................................................\"</span><br/><span class=\"st0\">\".#################...................#############........\"</span><br/><span class=\"st0\">\".##################...............################........\"</span><br/><span class=\"st0\">\".###################............##################........\"</span><br/><span class=\"st0\">\".########.....#######..........###################........\"</span><br/><span class=\"st0\">\"...######.....#######.........#######.......######........\"</span><br/><span class=\"st0\">\"...######.....#######........#######......................\"</span><br/><span class=\"st0\">\"...#################.........#######......................\"</span><br/><span class=\"st0\">\"...################..........#######......................\"</span><br/><span class=\"st0\">\"...#################.........#######......................\"</span><br/><span class=\"st0\">\"...######.....#######........#######......................\"</span><br/><span class=\"st0\">\"...######.....#######........#######......................\"</span><br/><span class=\"st0\">\"...######.....#######.........#######.......######........\"</span><br/><span class=\"st0\">\".########.....#######..........###################........\"</span><br/><span class=\"st0\">\".########.....#######.######....##################.######.\"</span><br/><span class=\"st0\">\".########.....#######.######......################.######.\"</span><br/><span class=\"st0\">\".########.....#######.######.........#############.######.\"</span><br/><span class=\"st0\">\"..........................................................\"</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> ZhangSuen<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Image <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">friend</span> <span class=\"kw2\">class</span> ZhangSuen<span class=\"sy4\">;</span><br/>    <span class=\"kw2\">using</span> pixel_t <span class=\"sy1\">=</span> <span class=\"kw4\">char</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> pixel_t BLACK_PIX<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> pixel_t WHITE_PIX<span class=\"sy4\">;</span><br/>\u00a0<br/>    Image<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> width <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">unsigned</span> height <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>    <span class=\"sy4\">:</span> width_<span class=\"br0\">{</span>width<span class=\"br0\">}</span>, height_<span class=\"br0\">{</span>height<span class=\"br0\">}</span>, data_<span class=\"br0\">(</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span>, width_ <span class=\"sy2\">*</span> height_<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Image<span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> i<span class=\"br0\">)</span> <span class=\"sy4\">:</span> width_<span class=\"br0\">{</span> i.<span class=\"me1\">width_</span><span class=\"br0\">}</span>, height_<span class=\"br0\">{</span>i.<span class=\"me1\">height_</span><span class=\"br0\">}</span>, data_<span class=\"br0\">{</span>i.<span class=\"me1\">data_</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Image<span class=\"br0\">(</span>Image<span class=\"sy3\">&amp;&amp;</span> i<span class=\"br0\">)</span> <span class=\"sy4\">:</span> width_<span class=\"br0\">{</span> i.<span class=\"me1\">width_</span><span class=\"br0\">}</span>, height_<span class=\"br0\">{</span>i.<span class=\"me1\">height_</span><span class=\"br0\">}</span>, data_<span class=\"br0\">{</span>std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>i.<span class=\"me1\">data_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~Image<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"kw1\">default</span><span class=\"sy4\">;</span><br/>    Image<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            width_ <span class=\"sy1\">=</span> i.<span class=\"me1\">width_</span><span class=\"sy4\">;</span><br/>            height_ <span class=\"sy1\">=</span> i.<span class=\"me1\">height_</span><span class=\"sy4\">;</span><br/>            data_ <span class=\"sy1\">=</span> i.<span class=\"me1\">data_</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    Image<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span>Image<span class=\"sy3\">&amp;&amp;</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            width_ <span class=\"sy1\">=</span> i.<span class=\"me1\">width_</span><span class=\"sy4\">;</span><br/>            height_ <span class=\"sy1\">=</span> i.<span class=\"me1\">height_</span><span class=\"sy4\">;</span><br/>            data_ <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>i.<span class=\"me1\">data_</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">size_t</span> idx<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x, <span class=\"kw4\">unsigned</span> y<span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y <span class=\"sy2\">*</span> width_ <span class=\"sy2\">+</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x, <span class=\"kw4\">unsigned</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> data_<span class=\"br0\">[</span>idx<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">friend</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> o, <span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        o <span class=\"sy1\">&lt;&lt;</span> i.<span class=\"me1\">width_</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" x \"</span> <span class=\"sy1\">&lt;&lt;</span> i.<span class=\"me1\">height_</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">size_t</span> px <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> e <span class=\"sy4\">:</span> i.<span class=\"me1\">data_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            o <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>e<span class=\"sy4\">?</span>Image<span class=\"sy4\">::</span><span class=\"me2\">BLACK_PIX</span><span class=\"sy4\">:</span>Image<span class=\"sy4\">::</span><span class=\"me2\">WHITE_PIX</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">++</span>px <span class=\"sy2\">%</span> i.<span class=\"me1\">width_</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                o <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> o <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">friend</span> std<span class=\"sy4\">::</span><span class=\"me2\">istream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&gt;&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istream</span><span class=\"sy3\">&amp;</span> in, Image<span class=\"sy3\">&amp;</span> img<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>img.<span class=\"me1\">data_</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> end <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>img.<span class=\"me1\">data_</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span> tmp<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>in <span class=\"sy3\">&amp;&amp;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            in <span class=\"sy1\">&gt;&gt;</span> tmp<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp <span class=\"sy3\">!</span><span class=\"sy1\">=</span> Image<span class=\"sy4\">::</span><span class=\"me2\">BLACK_PIX</span> <span class=\"sy3\">&amp;&amp;</span> tmp <span class=\"sy3\">!</span><span class=\"sy1\">=</span> Image<span class=\"sy4\">::</span><span class=\"me2\">WHITE_PIX</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">throw</span> <span class=\"st0\">\"Bad character found in image\"</span><span class=\"sy4\">;</span><br/>            <span class=\"sy2\">*</span>it <span class=\"sy1\">=</span> <span class=\"br0\">(</span>tmp <span class=\"sy1\">==</span> Image<span class=\"sy4\">::</span><span class=\"me2\">BLACK_PIX</span><span class=\"br0\">)</span><span class=\"sy4\">?</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            <span class=\"sy2\">++</span>it<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> in<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">unsigned</span> width<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width_<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">unsigned</span> height<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height_<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">struct</span> Neighbours <span class=\"br0\">{</span><br/>        <span class=\"co1\">// 9 2 3</span><br/>        <span class=\"co1\">// 8 1 4</span><br/>        <span class=\"co1\">// 7 6 5</span><br/>        Neighbours<span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> img, <span class=\"kw4\">unsigned</span> p1_x, <span class=\"kw4\">unsigned</span> p1_y<span class=\"br0\">)</span><br/>        <span class=\"sy4\">:</span> img_<span class=\"br0\">{</span>img<span class=\"br0\">}</span><br/>        , p1_<span class=\"br0\">{</span>img.<span class=\"me1\">idx</span><span class=\"br0\">(</span>p1_x, p1_y<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        , p2_<span class=\"br0\">{</span>p1_ <span class=\"sy2\">-</span> img.<span class=\"me1\">width</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        , p3_<span class=\"br0\">{</span>p2_ <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        , p4_<span class=\"br0\">{</span>p1_ <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        , p5_<span class=\"br0\">{</span>p4_ <span class=\"sy2\">+</span> img.<span class=\"me1\">width</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        , p6_<span class=\"br0\">{</span>p5_ <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        , p7_<span class=\"br0\">{</span>p6_ <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        , p8_<span class=\"br0\">{</span>p1_ <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        , p9_<span class=\"br0\">{</span>p2_ <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> img_<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p1_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p2_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p3<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p3_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p4<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p4_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p5_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p6<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p6_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p7_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p8<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p8_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span><span class=\"sy3\">&amp;</span> p9<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> noexcept <span class=\"br0\">{</span> <span class=\"kw1\">return</span> img_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>p9_<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> p1_, p2_, p3_, p4_, p5_, p6_, p7_, p8_, p9_<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    Neighbours neighbours<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> x, <span class=\"kw4\">unsigned</span> y<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Neighbours<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span>, x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">unsigned</span> height_ <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> width_ <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">valarray</span><span class=\"sy1\">&lt;</span>pixel_t<span class=\"sy1\">&gt;</span> data_<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>constexpr <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span> Image<span class=\"sy4\">::</span><span class=\"me2\">BLACK_PIX</span> <span class=\"sy1\">=</span> <span class=\"st0\">'#'</span><span class=\"sy4\">;</span><br/>constexpr <span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">pixel_t</span> Image<span class=\"sy4\">::</span><span class=\"me2\">WHITE_PIX</span> <span class=\"sy1\">=</span> <span class=\"st0\">'.'</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> ZhangSuen <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\u00a0<br/>    <span class=\"co1\">// the number of transitions from white to black, (0 -&gt; 1) in the sequence P2,P3,P4,P5,P6,P7,P8,P9,P2</span><br/>    <span class=\"kw4\">unsigned</span> transitions_white_black<span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">Neighbours</span><span class=\"sy3\">&amp;</span> a<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p9</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p3</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p3</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p9</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p5</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p7</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p7</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>a.<span class=\"me1\">p5</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> a.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// The number of black pixel neighbours of P1. ( = sum(P2 .. P9) )</span><br/>    <span class=\"kw4\">unsigned</span> black_pixels<span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy4\">::</span><span class=\"me2\">Neighbours</span><span class=\"sy3\">&amp;</span> a<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p9</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p3</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p7</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a.<span class=\"me1\">p5</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Image<span class=\"sy3\">&amp;</span> img<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp_a_ <span class=\"sy1\">=</span> img<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">size_t</span> changed_pixels <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            changed_pixels <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            <span class=\"co1\">// Step 1</span><br/>            tmp_b_ <span class=\"sy1\">=</span> tmp_a_<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> tmp_a_.<span class=\"me1\">height</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> tmp_a_.<span class=\"me1\">width</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp_a_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>tmp_a_.<span class=\"me1\">idx</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw4\">auto</span> n <span class=\"sy1\">=</span> tmp_a_.<span class=\"me1\">neighbours</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        <span class=\"kw4\">auto</span> bp <span class=\"sy1\">=</span> black_pixels<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bp <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">&amp;&amp;</span> bp <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw4\">auto</span> tr <span class=\"sy1\">=</span> transitions_white_black<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>    tr <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <br/>                                <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>n.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>n.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                tmp_b_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>n.<span class=\"me1\">p1_</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>                                <span class=\"sy2\">++</span>changed_pixels<span class=\"sy4\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"co1\">// Step 2</span><br/>            tmp_a_ <span class=\"sy1\">=</span> tmp_b_<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> tmp_b_.<span class=\"me1\">height</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> tmp_b_.<span class=\"me1\">width</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp_b_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>tmp_b_.<span class=\"me1\">idx</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw4\">auto</span> n <span class=\"sy1\">=</span> tmp_b_.<span class=\"me1\">neighbours</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        <span class=\"kw4\">auto</span> bp <span class=\"sy1\">=</span> black_pixels<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bp <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">&amp;&amp;</span> bp <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw4\">auto</span> tr <span class=\"sy1\">=</span> transitions_white_black<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>    tr <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <br/>                                <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>n.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p4</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>n.<span class=\"me1\">p2</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p6</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> n.<span class=\"me1\">p8</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                tmp_a_.<span class=\"me1\">data_</span><span class=\"br0\">[</span>n.<span class=\"me1\">p1_</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>                                <span class=\"sy2\">++</span>changed_pixels<span class=\"sy4\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>changed_pixels <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> tmp_a_<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    Image tmp_a_<span class=\"sy4\">;</span><br/>    Image tmp_b_<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>    Image img<span class=\"br0\">(</span><span class=\"nu0\">32</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    istringstream iss<span class=\"br0\">{</span>input<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    iss <span class=\"sy1\">&gt;&gt;</span> img<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> img<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ZhangSuen\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    ZhangSuen zs<span class=\"sy4\">;</span><br/>    Image res <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>zs<span class=\"br0\">(</span>img<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> res <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    Image img2<span class=\"br0\">(</span><span class=\"nu0\">58</span>,<span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    istringstream iss2<span class=\"br0\">{</span>input2<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    iss2 <span class=\"sy1\">&gt;&gt;</span> img2<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> img2<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ZhangSuen with big image\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    Image res2 <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>zs<span class=\"br0\">(</span>img2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> res2 <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 128, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">,</span> bitmap<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> BlackWhite <span class=\"br0\">{</span><br/>    <span class=\"kw4\">ubyte</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> c <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> black <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     white <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> Neighbours <span class=\"sy0\">=</span> BlackWhite<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> Img <span class=\"sy0\">=</span> Image<span class=\"sy0\">!</span>BlackWhite<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Zhang-Suen thinning algorithm.</span><br/>Img zhangSuen<span class=\"br0\">(</span>Img image1<span class=\"sy0\">,</span> Img image2<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc<br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>image1.<span class=\"me1\">image</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">==</span> Img.<span class=\"me1\">black</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> Img.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>image1.<span class=\"me1\">nx</span> <span class=\"sy0\">==</span> image2.<span class=\"me1\">nx</span> <span class=\"sy0\">&amp;&amp;</span> image1.<span class=\"me1\">ny</span> <span class=\"sy0\">==</span> image2.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">nx</span> <span class=\"sy0\">==</span> image1.<span class=\"me1\">nx</span> <span class=\"sy0\">&amp;&amp;</span> result.<span class=\"me1\">ny</span> <span class=\"sy0\">==</span> image1.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">image</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">==</span> Img.<span class=\"me1\">black</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> Img.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"co2\">/// True if inf &lt;= x &lt;= sup.</span><br/>    <span class=\"kw4\">static</span> inInterval<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T inf<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T sup<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">&gt;=</span> inf <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> sup<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co2\">/// Return 8-neighbours+1 of point (x,y) of given image, in order.</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> neighbours<span class=\"br0\">(</span><span class=\"kw2\">in</span> Img I<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> y<span class=\"sy0\">,</span><br/>                           <span class=\"kw2\">out</span> Neighbours n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">=</span> <span class=\"br0\">[</span>I<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// P2,P3,P4,P5</span><br/>             I<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span> I<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\">// P6,P7,P8,P9</span><br/>             I<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>image1.<span class=\"me1\">nx</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> image1.<span class=\"me1\">ny</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        image2.<span class=\"me1\">image</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> image1.<span class=\"me1\">image</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> image2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">static</span> zeroOne <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//**</span><br/>    Neighbours n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> hasChanged<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> ab<span class=\"sy0\">;</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>tuple<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> tuple<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">image1</span>.<span class=\"me1\">ny</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">image1</span>.<span class=\"me1\">nx</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    neighbours<span class=\"br0\">(</span>image1<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>image1<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>                    <span class=\"co1\">// Cond. 0</span><br/>                        <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">[</span>ab<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>n<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>n<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>   <span class=\"co1\">// Cond. 4</span><br/>                        <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>n<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>n<span class=\"br0\">[</span>ab<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span>   <span class=\"co1\">// Cond. 3</span><br/>                        <span class=\"co1\">//n[].count([0, 1]) == 1 &amp;&amp;</span><br/>                        n<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span>zeroOne<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span>         <span class=\"co1\">// Cond. 2</span><br/>                        <span class=\"co1\">// n[0 .. 8].sum in iota(2, 7)) {</span><br/>                        inInterval<span class=\"br0\">(</span>n<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Cond. 1</span><br/>                        hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                        image2<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Img.<span class=\"me1\">black</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                        image2<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> image1<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            image1.<span class=\"me1\">swap</span><span class=\"br0\">(</span>image2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>hasChanged<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> image1<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> before_txt <span class=\"sy0\">=</span> <span class=\"st0\">\"<br/>    ##..###<br/>    ##..###<br/>    ##..###<br/>    ##..###<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ##..##.<br/>    ######.<br/>    .......\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> small_rc <span class=\"sy0\">=</span> <span class=\"st0\">\"<br/>    ................................<br/>    .#########.......########.......<br/>    .###...####.....####..####......<br/>    .###....###.....###....###......<br/>    .###...####.....###.............<br/>    .#########......###.............<br/>    .###.####.......###....###......<br/>    .###..####..###.####..####.###..<br/>    .###...####.###..########..###..<br/>    ................................\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> rc <span class=\"sy0\">=</span> <span class=\"st0\">\"<br/>    ...........................................................<br/>    .#################...................#############.........<br/>    .##################...............################.........<br/>    .###################............##################.........<br/>    .########.....#######..........###################.........<br/>    ...######.....#######.........#######.......######.........<br/>    ...######.....#######........#######.......................<br/>    ...#################.........#######.......................<br/>    ...################..........#######.......................<br/>    ...#################.........#######.......................<br/>    ...######.....#######........#######.......................<br/>    ...######.....#######........#######.......................<br/>    ...######.....#######.........#######.......######.........<br/>    .########.....#######..........###################.........<br/>    .########.....#######.######....##################.######..<br/>    .########.....#######.######......################.######..<br/>    .########.....#######.######.........#############.######..<br/>    ...........................................................\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> txt<span class=\"sy0\">;</span> <span class=\"br0\">[</span>before_txt<span class=\"sy0\">,</span> small_rc<span class=\"sy0\">,</span> rc<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> img <span class=\"sy0\">=</span> Img.<span class=\"me1\">fromText</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"From:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        img.<span class=\"me1\">textualShow</span><span class=\"br0\">(</span><span class=\"coMULTI\">/*bl=*/</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"coMULTI\">/*wh=*/</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"<span class=\"es1\">\\n</span>To thinned:\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>        img.<span class=\"me1\">zhangSuen</span><span class=\"br0\">(</span>img.<span class=\"me1\">dup</span><span class=\"br0\">)</span>.<span class=\"me1\">textualShow</span><span class=\"br0\">(</span><span class=\"coMULTI\">/*bl=*/</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"coMULTI\">/*wh=*/</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 164, "block": "<pre class=\"text highlighted_source\">import system'collections.<br/>import system'routines.<br/>import extensions.<br/>import extensions'routines.<br/>\u00a0<br/>type charmatrix = matrix&lt;CharValue&gt;.<br/>\u00a0<br/>const image = (<br/>        \"                                                          \",<br/>        \" #################                   #############        \",<br/>        \" ##################               ################        \",<br/>        \" ###################            ##################        \",<br/>        \" ########     #######          ###################        \",<br/>        \"   ######     #######         #######       ######        \",<br/>        \"   ######     #######        #######                      \",<br/>        \"   #################         #######                      \",<br/>        \"   ################          #######                      \",<br/>        \"   #################         #######                      \",<br/>        \"   ######     #######        #######                      \",<br/>        \"   ######     #######        #######                      \",<br/>        \"   ######     #######         #######       ######        \",<br/>        \" ########     #######          ###################        \",<br/>        \" ########     ####### ######    ################## ###### \",<br/>        \" ########     ####### ######      ################ ###### \",<br/>        \" ########     ####### ######         ############# ###### \",<br/>        \"                                                          \").<br/>\u00a0<br/>nbrs = ((0, -1), (1, -1), (1, 0), (1, 1), (0, 1),<br/>        (-1, 1), (-1, 0), (-1, -1), (0, -1)).<br/>\u00a0<br/>nbrGroups = (((0, 2, 4), (2, 4, 6)), ((0, 2, 6),<br/>        (0, 4, 6))).<br/>\u00a0<br/>charmatrix extension zhangsuenOp<br/>{<br/>    $proceed\u00a0: r\u00a0: c\u00a0: toWhite\u00a0: firstStep<br/>    [<br/>        if (self[r][c]\u00a0!= $35)<br/>            [ ^ false ].<br/>\u00a0<br/>        int nn\u00a0:= self numNeighbors(r,c).<br/>\u00a0<br/>        if ((nn &lt; 2) || (nn &gt; 6))<br/>            [ ^ false ].<br/>\u00a0<br/>        if(self numTransitions(r,c)\u00a0!= 1)<br/>            [ ^ false ].<br/>\u00a0<br/>        ifnot (self atLeastOneIsWhite(r,c,firstStep iif(0,1)))<br/>            [ ^ false ].<br/>\u00a0<br/>        toWhite append:{ x = c. y = r. }.<br/>\u00a0<br/>        ^ true.      <br/>    ]<br/>\u00a0<br/>    numNeighbors\u00a0:r\u00a0: c<br/>    [<br/>        int count\u00a0:= 0.<br/>\u00a0<br/>        0 till(nbrs length - 1) do(:i)<br/>        [<br/>            if (self[r + nbrs[i][1]][c + nbrs[i][0]] == $35)<br/>                [ count\u00a0:= count + 1. ].<br/>        ].<br/>\u00a0<br/>        ^ count.<br/>    ]<br/>\u00a0<br/>    numTransitions\u00a0: r\u00a0: c<br/>    [<br/>        int count\u00a0:= 0.<br/>\u00a0<br/>        0 till(nbrs length - 1) do(:i)<br/>        [<br/>            if (self[r + nbrs[i][1]][c + nbrs[i][0]] == $32)<br/>            [<br/>                if (self[r + nbrs[i + 1][1]][c + nbrs[i + 1][0]] == $35)<br/>                [<br/>                    count\u00a0:= count + 1.<br/>                ].<br/>            ].<br/>        ].<br/>\u00a0<br/>        ^ count.<br/>    ]  <br/>\u00a0<br/>    atLeastOneIsWhite\u00a0: r\u00a0: c\u00a0: step<br/>    [<br/>        int count\u00a0:= 0.<br/>        var group\u00a0:= nbrGroups[step].<br/>        0 till:2 do(:i)<br/>        [            <br/>            0 till(group[i] length) seek(:j)<br/>            [<br/>                var nbr\u00a0:= nbrs[group[i][j]].<br/>\u00a0<br/>                if (self[r + nbr[1]][c + nbr[0]] == $32)<br/>                    [ count\u00a0:= count + 1. ^ true ].<br/>\u00a0<br/>                ^ false.                    <br/>            ].<br/>        ].<br/>\u00a0<br/>        ^ count &gt; 1.<br/>    ]    <br/>\u00a0<br/>    thinImage<br/>    [<br/>        bool firstStep\u00a0:= false.<br/>        bool hasChanged\u00a0:= true.<br/>        var toWhite\u00a0:= List new.<br/>\u00a0<br/>        while (hasChanged || firstStep)<br/>        [<br/>            hasChanged\u00a0:= false.<br/>            firstStep\u00a0:= firstStep not.<br/>\u00a0<br/>            1 till(self rows - 1) do(:r) <br/>            [<br/>                1 till(self columns - 1) do(:c)<br/>                [<br/>                    if(self~zhangsuenOp $proceed(r,c,toWhite,firstStep))<br/>                        [ hasChanged\u00a0:= true ].<br/>                ].<br/>            ].<br/>\u00a0<br/>            toWhite forEach(:p)[ self[p y][p x]\u00a0:= $32. ].                <br/>            toWhite clear.<br/>        ].<br/>    ]<br/>\u00a0<br/>    print<br/>    [<br/>        var it\u00a0:= self enumerator.<br/>\u00a0<br/>        it forEach(:ch) [ console print(ch,\" \") ].<br/>        while (it next)<br/>        [<br/>            console writeLine.<br/>\u00a0<br/>            it forEach(:ch) [ console print(ch,\" \") ].<br/>        ].<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    charmatrix grid\u00a0:= MatrixSpace::<br/>    {<br/>        rows = image length.<br/>\u00a0<br/>        columns = image[0] length.<br/>\u00a0<br/>        getAt int:i int:j<br/>            = image[i][j].<br/>    }.<br/>\u00a0<br/>    grid thinImage.<br/>\u00a0<br/>    grid print.<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 90, "block": "<pre class=\"text highlighted_source\">defmodule ZhangSuen do<br/>  @neighbours  [{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1}]  # 8 neighbours<br/>\u00a0<br/>  def thinning(str, black \\\\\u00a0?#) do<br/>    s0 = for {line, i} &lt;- (String.split(str, \"\\n\") |&gt; Enum.with_index),<br/>             {c, j}    &lt;- (to_char_list(line) |&gt; Enum.with_index),<br/>             into: Map.new,<br/>             do: {{i,j}, (if c==black, do: 1, else: 0)}<br/>    {xrange, yrange} = range(s0)<br/>    print(s0, xrange, yrange)<br/>    s1 = thinning_loop(s0, xrange, yrange)<br/>    print(s1, xrange, yrange)<br/>  end<br/>\u00a0<br/>  defp thinning_loop(s0, xrange, yrange) do<br/>    s1 = step(s0, xrange, yrange, 1)            # Step 1<br/>    s2 = step(s1, xrange, yrange, 0)            # Step 2<br/>    if Map.equal?(s0, s2), do: s2, else: thinning_loop(s2, xrange, yrange)<br/>  end<br/>\u00a0<br/>  defp step(s, xrange, yrange, g) do<br/>    for x &lt;- xrange, y &lt;- yrange, into: Map.new, do: {{x,y}, s[{x,y}] - zs(s,x,y,g)}<br/>  end<br/>\u00a0<br/>  defp zs(s, x, y, g) do<br/>    if get(s,x,y) == 0 or                                       # P1<br/>      (get(s,x-1,y) + get(s,x,y+1) + get(s,x+g,y-1+g)) == 3 or  # P2, P4, P6/P8<br/>      (get(s,x-1+g,y+g) + get(s,x+1,y) + get(s,x,y-1)) == 3 do  # P4/P2, P6, P8<br/>      0<br/>    else<br/>      next = for {i,j} &lt;- @neighbours, do: get(s, x+i, y+j)<br/>      bp1 = Enum.sum(next)                                      # B(P1)<br/>      if bp1 in 2..6 do<br/>        ap1 = (next++[hd(next)]) |&gt; Enum.chunk(2,1) |&gt; Enum.count(fn [a,b] -&gt; a&lt;b end)  # A(P1)<br/>        if ap1 == 1, do: 1, else: 0<br/>      else<br/>        0<br/>      end<br/>    end<br/>  end<br/>\u00a0<br/>  defp get(map, x, y), do: Map.get(map, {x,y}, 0)<br/>\u00a0<br/>  defp range(map), do: range(Map.keys(map), 0, 0)<br/>  defp range([], xmax, ymax), do: {0 .. xmax, 0 .. ymax}<br/>  defp range([{x,y} | t], xmax, ymax), do: range(t, max(x,xmax), max(y,ymax))<br/>\u00a0<br/>  @display \u00a0%{0 =&gt; \" \", 1 =&gt; \"#\"}<br/>  defp print(map, xrange, yrange) do<br/>    Enum.each(xrange, fn x -&gt;<br/>      IO.puts (for y &lt;- yrange, do: @display[map[{x,y}]])<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>str = \"\"\"<br/>...........................................................<br/>.#################...................#############.........<br/>.##################...............################.........<br/>.###################............##################.........<br/>.########.....#######..........###################.........<br/>...######.....#######.........#######.......######.........<br/>...######.....#######........#######.......................<br/>...#################.........#######.......................<br/>...###############...........#######.......................<br/>...#################.........#######.......................<br/>...######....########........#######.......................<br/>...######.....#######........#######.......................<br/>...######.....#######.........#######.......######.........<br/>.########.....#######..........###################.........<br/>.########.....#######..#####....##################.######..<br/>.########.....#######..#####......################.######..<br/>.########.....#######..#####.........#############.######..<br/>...........................................................<br/>\"\"\"<br/>ZhangSuen.thinning(str)<br/>\u00a0<br/>str = \"\"\"<br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<br/>\"\"\"<br/>ZhangSuen.thinning(str,\u00a0?1)</pre>"}, {"lang": "FreeBASIC", "loc": 135, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 08-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"00000000000000000000000000000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01111111110000000111111110000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110001111000001111001111000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110000111000001110000111000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110001111000001110000000000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01111111110000001110000000000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110111100000001110000111000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110011110011101111001111011100\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"01110001111011100111111110011100\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"00000000000000000000000000000000\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"END\"</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, y, m, n<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> input_str<br/>\u00a0<br/><span class=\"kw1\">Do</span>        <span class=\"co1\">' find out how big it is</span><br/>  <span class=\"kw1\">Read</span> input_str<br/>  <span class=\"kw1\">If</span> input_str = <span class=\"st0\">\"END\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">If</span> x &lt; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>input_str<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> x = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>input_str<span class=\"br0\">)</span><br/>  y = y + <span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/>m = x -<span class=\"nu0\">1</span>\u00a0: n = y -<span class=\"nu0\">1</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> old<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span>, new_<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>\u00a0<br/>y = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Restore</span>   <span class=\"co1\">' restore data pointer</span><br/><span class=\"kw1\">Do</span>        <span class=\"co1\">' put data in array</span><br/>  <span class=\"kw1\">Read</span> input_str<br/>  <span class=\"kw1\">If</span> input_str=<span class=\"st0\">\"END\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>input_str<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>    old<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = input_str<span class=\"br0\">[</span>x<span class=\"br0\">]</span> - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">' print image</span><br/>    <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\".\"</span>; <span class=\"kw1\">Else</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"#\"</span>;<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span><br/>  y = y + <span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"co1\">'corners and sides do not change</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m<br/>  new_<span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span> = old<span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  new_<span class=\"br0\">(</span>x, n<span class=\"br0\">)</span> = old<span class=\"br0\">(</span>x, n<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>  new_<span class=\"br0\">(</span><span class=\"nu0\">0</span>, y<span class=\"br0\">)</span> = old<span class=\"br0\">(</span><span class=\"nu0\">0</span>, y<span class=\"br0\">)</span><br/>  new_<span class=\"br0\">(</span>m, y<span class=\"br0\">)</span> = old<span class=\"br0\">(</span>m, y<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> tmp, change, stage = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span><br/>  change = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m -<span class=\"nu0\">1</span><br/>      <span class=\"co1\">' -1-</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"co1\">' first condition, p1 must be black</span><br/>        new_<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"co1\">' -2-</span><br/>      tmp = old<span class=\"br0\">(</span>x, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      tmp = tmp + old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      tmp = tmp + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> tmp &lt; <span class=\"nu0\">2</span> OrElse tmp &gt; <span class=\"nu0\">6</span> <span class=\"kw1\">Then</span> <span class=\"co1\">' 2 &lt;= B(p1) &lt;= 6</span><br/>        new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"co1\">' -3-</span><br/>      tmp = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x   , y   <span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x   , y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p1 &gt; p2</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x   , y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p2 &gt; p3</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y   <span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p3 &gt; p4</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y   <span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p4 &gt; p5</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x   , y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p5 &gt; p6</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x   , y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p6 &gt; p7</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y   <span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p7 &gt; p8</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y   <span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p8 &gt; p9</span><br/>      <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> And old<span class=\"br0\">(</span>x   , y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> tmp += <span class=\"nu0\">1</span>  <span class=\"co1\">' p9 &gt; p2</span><br/>      <span class=\"co1\">' tmp = 1 ==&gt; A(P1) = 1</span><br/>      <span class=\"kw1\">If</span> tmp &lt;&gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>stage And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        <span class=\"co1\">' step 1 -4- -5-</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>old<span class=\"br0\">(</span>x, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span> OrElse _<br/>           <span class=\"br0\">(</span>old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span> <span class=\"kw1\">Then</span><br/>          new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"co1\">' step 2 -4- -5-</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>old<span class=\"br0\">(</span>x, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x +<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span> OrElse _<br/>           <span class=\"br0\">(</span>old<span class=\"br0\">(</span>x, y -<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x, y +<span class=\"nu0\">1</span><span class=\"br0\">)</span> + old<span class=\"br0\">(</span>x -<span class=\"nu0\">1</span>, y<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"nu0\">3</span> <span class=\"kw1\">Then</span><br/>          new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"co1\">' all condition are met, make p1 white (0)</span><br/>      new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>      change = <span class=\"nu0\">1</span> <span class=\"co1\">' flag change</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">' copy new_() into old()</span><br/>  <span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m<br/>      old<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = new_<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  stage += <span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> change = <span class=\"nu0\">0</span> <span class=\"co1\">' stop when there are no changes made</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"co1\">' print result</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"End result\"</span><br/><span class=\"kw1\">For</span> y = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<br/>  <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> m<br/>    <span class=\"kw1\">If</span> old<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\".\"</span>; <span class=\"kw1\">Else</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"#\"</span>;<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"text highlighted_source\">FOR ALL (i = 2:n - 1) A(i) = (A(i - 1) + A(i) + A(i + 1))/3</pre>"}, {"lang": "Go", "loc": 189, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> in <span class=\"sy2\">=</span> <span class=\"co2\">`<br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000`</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    b <span class=\"sy2\">:=</span> wbFromString<span class=\"sy1\">(</span>in<span class=\"sy1\">,</span> <span class=\"st0\">'1'</span><span class=\"sy1\">)</span><br/>    b<span class=\"sy3\">.</span>zhangSuen<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    white <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    black <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> wbArray <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span> <span class=\"co1\">// elements are white or black.</span><br/>\u00a0<br/><span class=\"co1\">// parameter blk is character to read as black.  otherwise kinda rigid,</span><br/><span class=\"co1\">// expects ascii, leading newline, no trailing newline,</span><br/><span class=\"co1\">// takes color from low bit of character.</span><br/><span class=\"kw4\">func</span> wbFromString<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">,</span> blk <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> wbArray <span class=\"sy1\">{</span><br/>    lines <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>    b <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>wbArray<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>lines<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> sl <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lines <span class=\"sy1\">{</span><br/>        bl <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sl<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sl<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            bl<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sl<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> &amp; <span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> bl<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// rigid again, hard coded to output space for white, # for black,</span><br/><span class=\"co1\">// no leading or trailing newline.</span><br/><span class=\"kw1\">var</span> sym <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><br/>    white<span class=\"sy1\">:</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span><br/>    black<span class=\"sy1\">:</span> <span class=\"st0\">'#'</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b wbArray<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    b2 <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">})</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> b1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b2 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> b1 &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        b2<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sym<span class=\"sy1\">[</span>b1<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b2<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// neighbor offsets</span><br/><span class=\"kw1\">var</span> nb <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><br/>    <span class=\"nu0\">2</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"co1\">// p2 offsets</span><br/>    <span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"co1\">// ...</span><br/>    <span class=\"nu0\">4</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"nu0\">5</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"nu0\">6</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>    <span class=\"nu0\">7</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"nu0\">8</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"nu0\">9</span><span class=\"sy1\">:</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"co1\">// p9 offsets</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b wbArray<span class=\"sy1\">)</span> reset<span class=\"sy1\">(</span>en <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>rs <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> r<span class=\"sy1\">,</span> c <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> p <span class=\"sy1\">[</span><span class=\"nu0\">10</span><span class=\"sy1\">]</span><span class=\"kw4\">byte</span><br/>\u00a0<br/>    readP <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> nx <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> nx &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> nx<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            n <span class=\"sy2\">:=</span> nb<span class=\"sy1\">[</span>nx<span class=\"sy1\">]</span><br/>            p<span class=\"sy1\">[</span>nx<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]][</span>c<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    shiftRead <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">:=</span> nb<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><br/>        p<span class=\"sy1\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]][</span>c<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span><br/>        n <span class=\"sy2\">=</span> nb<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span><br/>        p<span class=\"sy1\">[</span><span class=\"nu0\">8</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]][</span>c<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span><br/>        n <span class=\"sy2\">=</span> nb<span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">]</span><br/>        p<span class=\"sy1\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]][</span>c<span class=\"sy3\">+</span>n<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// returns \"A\", count of white-&gt;black transitions in circuit of neighbors</span><br/>    <span class=\"co1\">// of an interior pixel b[r][c]</span><br/>    countA <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>ct <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        bit <span class=\"sy2\">:=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> nx <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> nx &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> nx<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            last <span class=\"sy2\">:=</span> bit<br/>            bit <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>nx<span class=\"sy1\">]</span><br/>            <span class=\"kw1\">if</span> last <span class=\"sy3\">==</span> white <span class=\"sy1\">{</span><br/>                ct <span class=\"sy2\">+=</span> bit<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> ct<br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// returns \"B\", count of black pixels neighboring interior pixel b[r][c].</span><br/>    countB <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>ct <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> nx <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> nx &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> nx<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            ct <span class=\"sy2\">+=</span> p<span class=\"sy1\">[</span>nx<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> ct<br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    lastRow <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    lastCol <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    mark <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> lastRow<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">=</span> <span class=\"kw1\">range</span> mark <span class=\"sy1\">{</span><br/>        mark<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> lastCol<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> r &lt; lastRow<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        readP<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span> <span class=\"co1\">// column loop</span><br/>            m <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>            <span class=\"co1\">// test for failure of any of the five conditions,</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span>p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> black<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">goto</span> markDone<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> b1 <span class=\"sy2\">:=</span> countB<span class=\"sy1\">();</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span><span class=\"nu0\">2</span> &lt;<span class=\"sy2\">=</span> b1 &amp;&amp; b1 &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">6</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">goto</span> markDone<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span>countA<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">goto</span> markDone<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">{</span><br/>                e1<span class=\"sy1\">,</span> e2 <span class=\"sy2\">:=</span> p<span class=\"sy1\">[</span>en<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]],</span> p<span class=\"sy1\">[</span>en<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]]</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span>p<span class=\"sy1\">[</span>en<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]]</span>&amp;e1&amp;e2 <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">goto</span> markDone<br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"sy1\">(</span>e1&amp;e2&amp;p<span class=\"sy1\">[</span>en<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">goto</span> markDone<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// no conditions failed, mark this pixel for reset</span><br/>            m <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            rs <span class=\"sy2\">=</span> <span class=\"kw2\">true</span> <span class=\"co1\">// and mark that image changes</span><br/>        markDone<span class=\"sy1\">:</span><br/>            mark<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> m<br/>            c<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> lastCol <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            shiftRead<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> rs <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> r <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> r &lt; lastRow<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> c <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt; lastCol<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> mark<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    b<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> white<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> rs<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> step1 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">}</span><br/><span class=\"kw1\">var</span> step2 <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b wbArray<span class=\"sy1\">)</span> zhangSuen<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        rs1 <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>reset<span class=\"sy1\">(</span>step1<span class=\"sy1\">)</span><br/>        rs2 <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>reset<span class=\"sy1\">(</span>step2<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>rs1 &amp;&amp; <span class=\"sy3\">!</span>rs2 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 25, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> zhangSuen<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> image <span class=\"sy0\">=</span> text.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> line <span class=\"sy0\">-&gt;</span> line.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> p2, p3, p4, p5, p6, p7, p8, p9<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> step1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">*</span> p4 <span class=\"sy0\">*</span> p6 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p4 <span class=\"sy0\">*</span> p6 <span class=\"sy0\">*</span> p8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> step2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">*</span> p4 <span class=\"sy0\">*</span> p8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">*</span> p6 <span class=\"sy0\">*</span> p8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> reduce <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a> <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> toWhite <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        image.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a><span class=\"br0\">{</span> line, y <span class=\"sy0\">-&gt;</span><br/>            line.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a><span class=\"br0\">{</span> pixel, x <span class=\"sy0\">-&gt;</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>pixel<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>                <span class=\"br0\">(</span>p2, p3, p4, p5, p6, p7, p8, p9<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>image<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, image<span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>p2,p3<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p3,p4<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p4,p5<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p5,p6<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p6,p7<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p7,p8<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p8,p9<span class=\"br0\">]</span>,<span class=\"br0\">[</span>p9,p2<span class=\"br0\">]</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> a1, a2 <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> a2 <span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span>p2, p3, p4, p5, p6, p7, p8, p9<span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>\u00a0<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call\"><span class=\"kw9\">call</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> toWhite <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>y,x<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        toWhite.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> y, x <span class=\"sy0\">-&gt;</span> image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"sy0\">!</span>toWhite.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>reduce<span class=\"br0\">(</span>step1<span class=\"br0\">)</span> <span class=\"sy0\">|</span> reduce<span class=\"br0\">(</span>step2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    image.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> line <span class=\"sy0\">-&gt;</span> line.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <span class=\"sy0\">?</span> <span class=\"st0\">'#'</span>\u00a0: <span class=\"st0\">'.'</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 122, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>List <span class=\"kw1\">as</span> List<br/>\u00a0<br/><span class=\"kw1\">data</span> BW <span class=\"sy0\">=</span> Black <span class=\"sy0\">|</span> White<br/>        <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Index <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> BWArray <span class=\"sy0\">=</span> Array Index BW<br/>\u00a0<br/>toBW <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> BW<br/>toBW <span class=\"st0\">'0'</span> <span class=\"sy0\">=</span> White<br/>toBW <span class=\"st0\">'1'</span> <span class=\"sy0\">=</span> Black<br/>toBW <span class=\"st0\">' '</span> <span class=\"sy0\">=</span> White<br/>toBW <span class=\"st0\">'#'</span> <span class=\"sy0\">=</span> Black<br/>toBW <span class=\"sy0\">_</span>   <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"toBW: illegal char\"</span><br/>\u00a0<br/>toBWArray <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> BWArray<br/>toBWArray strings <span class=\"sy0\">=</span> arr<br/>  <span class=\"kw1\">where</span><br/>    height <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> strings<br/>    width  <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minimum\"><span class=\"kw3\">minimum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> strings<br/>    arr    <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toBW <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> List<span class=\"sy0\">.</span>transpose <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> width<span class=\"br0\">)</span> strings<br/>\u00a0<br/>toChar <span class=\"sy0\">::</span> BW <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>toChar White <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>toChar Black <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span><br/>\u00a0<br/>chunksOf <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>chunksOf <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>chunksOf n xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n xs\u00a0: <span class=\"br0\">(</span>chunksOf n <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> n xs<span class=\"br0\">)</span><br/>\u00a0<br/>showBWArray <span class=\"sy0\">::</span> BWArray <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showBWArray arr <span class=\"sy0\">=</span><br/>  List<span class=\"sy0\">.</span>intercalate <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">.</span> List<span class=\"sy0\">.</span>transpose<br/>  <span class=\"sy0\">.</span> chunksOf <span class=\"br0\">(</span>height <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toChar <span class=\"sy0\">$</span> elems arr<br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"br0\">(</span><span class=\"sy0\">_,</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds arr<br/>\u00a0<br/>add <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>add <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><br/>\u00a0<br/>within <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>within <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  a <span class=\"sy0\">&lt;=</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> c <span class=\"sy0\">&amp;&amp;</span><br/>  b <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">&lt;=</span> d<br/>\u00a0<br/>p2<span class=\"sy0\">,</span> p3<span class=\"sy0\">,</span> p4<span class=\"sy0\">,</span> p5<span class=\"sy0\">,</span> p6<span class=\"sy0\">,</span> p7<span class=\"sy0\">,</span> p8<span class=\"sy0\">,</span> p9 <span class=\"sy0\">::</span> Index<br/>p2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p4 <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>p5 <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p6 <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p7 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>p8 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>p9 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>ixamap <span class=\"sy0\">::</span> Ix i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Array i a <span class=\"sy0\">-&gt;</span> Array i b<br/>ixamap f a <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span>bounds a<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> f <span class=\"sy0\">$</span> assocs a<br/>\u00a0<br/>thin <span class=\"sy0\">::</span> BWArray <span class=\"sy0\">-&gt;</span> BWArray<br/>thin arr <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> pass2 <span class=\"sy0\">==</span> arr <span class=\"kw1\">then</span> pass2 <span class=\"kw1\">else</span> thin pass2<br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>low<span class=\"sy0\">,</span> high<span class=\"br0\">)</span>     <span class=\"sy0\">=</span> bounds arr<br/>    lowB            <span class=\"sy0\">=</span> low `add` <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    highB           <span class=\"sy0\">=</span> high `add` <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    isInner         <span class=\"sy0\">=</span> within <span class=\"br0\">(</span>lowB<span class=\"sy0\">,</span> highB<span class=\"br0\">)</span><br/>    offs p          <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>add p<span class=\"br0\">)</span> <span class=\"br0\">[</span>p2<span class=\"sy0\">,</span> p3<span class=\"sy0\">,</span> p4<span class=\"sy0\">,</span> p5<span class=\"sy0\">,</span> p6<span class=\"sy0\">,</span> p7<span class=\"sy0\">,</span> p8<span class=\"sy0\">,</span> p9<span class=\"br0\">]</span><br/>    trans c <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">==</span> White <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">==</span> Black <span class=\"kw1\">then</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> c<br/>    zipshift xs     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> xs <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span> xs <span class=\"sy0\">++</span> xs<span class=\"br0\">)</span><br/>    transitions a   <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> trans <span class=\"nu0\">0</span> <span class=\"sy0\">.</span> zipshift <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> offs<br/>    within2to6 n    <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><br/>    blacks a p      <span class=\"sy0\">=</span> within2to6 <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Black<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>a <span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> offs p<br/>    oneWhite xs a p <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> White<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>a <span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> add p<span class=\"br0\">)</span> xs<br/>    oneRight        <span class=\"sy0\">=</span> oneWhite <span class=\"br0\">[</span>p2<span class=\"sy0\">,</span> p4<span class=\"sy0\">,</span> p6<span class=\"br0\">]</span><br/>    oneDown         <span class=\"sy0\">=</span> oneWhite <span class=\"br0\">[</span>p4<span class=\"sy0\">,</span> p6<span class=\"sy0\">,</span> p8<span class=\"br0\">]</span><br/>    oneUp           <span class=\"sy0\">=</span> oneWhite <span class=\"br0\">[</span>p2<span class=\"sy0\">,</span> p4<span class=\"sy0\">,</span> p8<span class=\"br0\">]</span><br/>    oneLeft         <span class=\"sy0\">=</span> oneWhite <span class=\"br0\">[</span>p2<span class=\"sy0\">,</span> p6<span class=\"sy0\">,</span> p8<span class=\"br0\">]</span><br/>    precond a p     <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">!</span> p <span class=\"sy0\">==</span> Black<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isInner p <span class=\"sy0\">&amp;&amp;</span> blacks a p <span class=\"sy0\">&amp;&amp;</span> transitions a p<br/>    stage1 a p      <span class=\"sy0\">=</span> precond a p <span class=\"sy0\">&amp;&amp;</span> oneRight a p <span class=\"sy0\">&amp;&amp;</span> oneDown a p<br/>    stage2 a p      <span class=\"sy0\">=</span> precond a p <span class=\"sy0\">&amp;&amp;</span> oneUp a p <span class=\"sy0\">&amp;&amp;</span> oneLeft a p<br/>    stager f <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> f p <span class=\"kw1\">then</span> White <span class=\"kw1\">else</span> d<br/>    pass1           <span class=\"sy0\">=</span> ixamap <span class=\"br0\">(</span>stager <span class=\"sy0\">$</span> stage1 arr<span class=\"br0\">)</span> arr<br/>    pass2           <span class=\"sy0\">=</span> ixamap <span class=\"br0\">(</span>stager <span class=\"sy0\">$</span> stage2 pass1<span class=\"br0\">)</span> pass1<br/>\u00a0<br/>sampleExA <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>sampleExA <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"00000000000000000000000000000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01111111110000000111111110000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110001111000001111001111000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110000111000001110000111000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110001111000001110000000000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01111111110000001110000000000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110111100000001110000111000000\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110011110011101111001111011100\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"01110001111011100111111110011100\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"00000000000000000000000000000000\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>sampleExB <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>sampleExB <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"                                                          \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" #################                   #############        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ##################               ################        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ###################            ##################        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ########     #######          ###################        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ######     #######         #######       ######        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ######     #######        #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   #################         #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ################          #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   #################         #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ######     #######        #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ######     #######        #######                      \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"   ######     #######         #######       ######        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ########     #######          ###################        \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ########     ####### ######    ################## ###### \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ########     ####### ######      ################ ###### \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\" ########     ####### ######         ############# ###### \"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"                                                          \"</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> showBWArray <span class=\"sy0\">.</span> thin <span class=\"sy0\">.</span> toBWArray<span class=\"br0\">)</span> <span class=\"br0\">[</span>sampleExA<span class=\"sy0\">,</span> sampleExB<span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 27, "block": "<pre class=\"j highlighted_source\">isBlackPx=: <span class=\"st_h\">'1'</span>&amp;=;.<span class=\"nu0\">_2</span>             <span class=\"co1\">NB. boolean array of black pixels</span><br/>toImage=: [: , LF ,.~ <span class=\"st_h\">'01'</span> {~ ]   <span class=\"co1\">NB. convert to original representation</span><br/>frameImg=: <span class=\"nu0\">0</span> ,. <span class=\"nu0\">0</span> , &gt;:@$ {. ]     <span class=\"co1\">NB. adds border of 0's to image</span><br/>\u00a0<br/>neighbrs=: adverb define          <span class=\"co1\">NB. applies verb u to neighbourhoods</span><br/>  <span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> ,: <span class=\"nu0\">3</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span> <span class=\"kw2\">u</span>;.<span class=\"nu0\">_3</span> <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Bdry=: <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>          <span class=\"co1\">NB. map pixel index to neighbour order </span><br/>getPx=: { ,                       <span class=\"co1\">NB. get desired pixels from neighbourhood</span><br/>Ap1=: [: +/ <span class=\"nu0\">2</span> &lt;/\\ Bdry&amp;getPx      <span class=\"co1\">NB. count 0-&gt;1 transitions</span><br/>Bp1=: [: +/ [: }. Bdry&amp;getPx      <span class=\"co1\">NB. count black neighbours</span><br/>\u00a0<br/>c11=: <span class=\"sy0\">(</span><span class=\"nu0\">2</span>&amp;&lt;: *. &lt;:&amp;<span class=\"nu0\">6</span><span class=\"sy0\">)</span>@Bp1          <span class=\"co1\">NB. step 1, condition 1</span><br/>c12=: <span class=\"nu0\">1</span> = Ap1                     <span class=\"co1\">NB. ...</span><br/>c13=: <span class=\"nu0\">0</span> e. <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span>&amp;getPx<br/>c14=: <span class=\"nu0\">0</span> e. <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">3</span>&amp;getPx<br/>c23=: <span class=\"nu0\">0</span> e. <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">3</span>&amp;getPx            <span class=\"co1\">NB. step2, condition 3</span><br/>c24=: <span class=\"nu0\">0</span> e. <span class=\"nu0\">1</span> <span class=\"nu0\">7</span> <span class=\"nu0\">3</span>&amp;getPx<br/>\u00a0<br/>cond1=: c11 *. c12 *. c13 *. c14  <span class=\"co1\">NB. step1 conditions</span><br/>cond2=: c11 *. c12 *. c23 *. c24  <span class=\"co1\">NB. step2 conditions</span><br/>whiten=: [ * <a class=\"__cf_email__\" data-cfemail=\"0e23204e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:*.               <span class=\"co1\">NB. make black pixels white</span><br/>step1=: whiten <a class=\"__cf_email__\" data-cfemail=\"fa9c889b979fb3979dba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>cond1 neighbrs<span class=\"sy0\">)</span><br/>step2=: whiten <a class=\"__cf_email__\" data-cfemail=\"9dfbeffcf0f8d4f0fadd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>cond2 neighbrs<span class=\"sy0\">)</span><br/>\u00a0<br/>zhangSuen=: [: toImage [: <a class=\"__cf_email__\" data-cfemail=\"5f2c2b3a2f6d1f2c2b3a2f6e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^:<span class=\"nu0\">_</span> isBlackPx</pre>"}, {"lang": "Java", "loc": 117, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Point</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ZhangSuen <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> image <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"                                                          \"</span>,<br/>        <span class=\"st0\">\" #################                   #############        \"</span>,<br/>        <span class=\"st0\">\" ##################               ################        \"</span>,<br/>        <span class=\"st0\">\" ###################            ##################        \"</span>,<br/>        <span class=\"st0\">\" ########     #######          ###################        \"</span>,<br/>        <span class=\"st0\">\"   ######     #######         #######       ######        \"</span>,<br/>        <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>        <span class=\"st0\">\"   #################         #######                      \"</span>,<br/>        <span class=\"st0\">\"   ################          #######                      \"</span>,<br/>        <span class=\"st0\">\"   #################         #######                      \"</span>,<br/>        <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>        <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>        <span class=\"st0\">\"   ######     #######         #######       ######        \"</span>,<br/>        <span class=\"st0\">\" ########     #######          ###################        \"</span>,<br/>        <span class=\"st0\">\" ########     ####### ######    ################## ###### \"</span>,<br/>        <span class=\"st0\">\" ########     ####### ######      ################ ###### \"</span>,<br/>        <span class=\"st0\">\" ########     ####### ######         ############# ###### \"</span>,<br/>        <span class=\"st0\">\"                                                          \"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nbrs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nbrGroups <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> toWhite <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>image.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> image.<span class=\"me1\">length</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> image<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        thinImage<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> thinImage<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span> firstStep <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span> hasChanged<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            firstStep <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>firstStep<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> grid.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> nn <span class=\"sy0\">=</span> numNeighbors<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numTransitions<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>atLeastOneIsWhite<span class=\"br0\">(</span>r, c, firstStep <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    toWhite.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>c, r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p <span class=\"sy0\">:</span> toWhite<span class=\"br0\">)</span><br/>                grid<span class=\"br0\">[</span>p.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>p.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>            toWhite.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>firstStep <span class=\"sy0\">||</span> hasChanged<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> numNeighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nbrs.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> numTransitions<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nbrs.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> nbrs<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                    count<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> atLeastOneIsWhite<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> step<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> group <span class=\"sy0\">=</span> nbrGroups<span class=\"br0\">[</span>step<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> group<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nbr <span class=\"sy0\">=</span> nbrs<span class=\"br0\">[</span>group<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> nbr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> nbr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    count<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> grid<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 106, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Point<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">var</span> ZhangSuen <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> ZhangSuen<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/>    ZhangSuen.<span class=\"me1\">image</span> <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"st0\">\"                                                          \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" #################                   #############        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ##################               ################        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ###################            ##################        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ########     #######          ###################        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ######     #######         #######       ######        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ######     #######        #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   #################         #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ################          #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   #################         #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ######     #######        #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ######     #######        #######                      \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"   ######     #######         #######       ######        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ########     #######          ###################        \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ########     ####### ######    ################## ###### \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ########     ####### ######      ################ ###### \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\" ########     ####### ######         ############# ###### \"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"                                                          \"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ZhangSuen.<span class=\"me1\">nbrs</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ZhangSuen.<span class=\"me1\">nbrGroups</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ZhangSuen.<span class=\"me1\">toWhite</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">main</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ZhangSuen.<span class=\"me1\">grid</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">image</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">image</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">image</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ZhangSuen.<span class=\"me1\">thinImage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">thinImage</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> firstStep <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> hasChanged<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            firstStep <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>firstStep<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">grid</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">var</span> nn <span class=\"sy0\">=</span> ZhangSuen.<span class=\"me1\">numNeighbors</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">numTransitions</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ZhangSuen.<span class=\"me1\">atLeastOneIsWhite</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> firstStep <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                    ZhangSuen.<span class=\"me1\">toWhite</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Point<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    hasChanged <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">toWhite</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> ZhangSuen.<span class=\"me1\">toWhite</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>p.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>p.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            ZhangSuen.<span class=\"me1\">toWhite</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> while <span class=\"br0\">(</span><span class=\"br0\">(</span>firstStep <span class=\"sy0\">||</span> hasChanged<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ZhangSuen.<span class=\"me1\">printResult</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">numNeighbors</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">nbrs</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">numTransitions</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">nbrs</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>                    count<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">atLeastOneIsWhite</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> step<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> group <span class=\"sy0\">=</span> ZhangSuen.<span class=\"me1\">nbrGroups</span><span class=\"br0\">[</span>step<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> group<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> nbr <span class=\"sy0\">=</span> ZhangSuen.<span class=\"me1\">nbrs</span><span class=\"br0\">[</span>group<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>r <span class=\"sy0\">+</span> nbr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> nbr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    count<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    ZhangSuen.<span class=\"me1\">printResult</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ZhangSuen.<span class=\"me1\">grid</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> row <span class=\"sy0\">=</span> ZhangSuen.<span class=\"me1\">grid</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            console.<span class=\"me1\">log</span><span class=\"br0\">(</span>row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> ZhangSuen<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ZhangSuen.<span class=\"me1\">main</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const pixelstring =<br/>\"00000000000000000000000000000000\" *<br/>\"01111111110000000111111110000000\" *<br/>\"01110001111000001111001111000000\" *<br/>\"01110000111000001110000111000000\" *<br/>\"01110001111000001110000000000000\" *<br/>\"01111111110000001110000000000000\" *<br/>\"01110111100000001110000111000000\" *<br/>\"01110011110011101111001111011100\" *<br/>\"01110001111011100111111110011100\" *<br/>\"00000000000000000000000000000000\"<br/>const pixels = reshape([UInt8(c- 48) for c in pixelstring], (32,10))'<br/>\u00a0<br/>\u00a0<br/>function surroundtesting(px, i, j, step)<br/>    if px[i,j] == 0<br/>        return false<br/>    end<br/>    isize, jsize = size(px)<br/>    if i &lt; 1 || j &lt; 1 || i == isize || j == jsize                         # criteria 0.both    <br/>        return false<br/>    end<br/>    s = Array{Int,1}(9)<br/>    s[1] = s[9] = px[i-1,j]; s[2] = px[i-1,j+1]; s[3] = px[i,j+1]; s[4] = px[i+1,j+1]<br/>    s[5] = px[i+1,j]; s[6] = px[i+1,j-1]; s[7] = px[i,j-1]; s[8] = px[i-1,j-1]<br/>    b = sum(s[1:8])<br/>    if b &lt; 2 || b &gt; 6                                                     # criteria 1.both<br/>        return false<br/>    end<br/>    if sum([(s[i] == 0 &amp;&amp; s[i+1] == 1) for i in 1:length(s)-1])\u00a0!= 1      # criteria 2.both<br/>        return false<br/>    end<br/>    if step == 1<br/>        rightwhite = s[1] == 0 || s[3] == 0 || s[5] == 0                  # 1.3<br/>        downwhite = s[3] == 0 || s[5] == 0 || s[7] == 0                   # 1.4<br/>        return rightwhite &amp;&amp; downwhite<br/>    end<br/>    upwhite = s[1] == 0 || s[3] == 0 || s[7] == 0                         # 2.3<br/>    leftwhite = s[1] == 0 || s[5] == 0 || s[7] == 0                       # 2.4<br/>    return upwhite &amp;&amp; leftwhite<br/>end<br/>\u00a0<br/>\u00a0<br/>function zsthinning(mat)<br/>    retmat = copy(mat)<br/>    testmat = zeros(Int, size(mat))<br/>    isize, jsize = size(testmat)<br/>    needredo = true<br/>    loops = 0<br/>    while(needredo)<br/>        loops += 1<br/>        println(\"loop number $loops\")<br/>        needredo = false<br/>        for n in 1:2<br/>            for i in 1:isize, j in 1:jsize<br/>                testmat[i,j] = surroundtesting(retmat, i, j, n)\u00a0? 1\u00a0: 0<br/>            end<br/>            for i in 1:isize, j in 1:jsize<br/>                if testmat[i,j] == 1<br/>                    retmat[i,j] = 0<br/>                    needredo = true<br/>                end<br/>            end<br/>        end<br/>    end<br/>    retmat<br/>end<br/>\u00a0<br/>\u00a0<br/>function asciiprint(mat)<br/>    for i in 1:size(mat)[1]<br/>        println(join(map(i -&gt; i == 1\u00a0? '#'\u00a0: ' ', mat[i,:])))<br/>    end<br/>end<br/>\u00a0<br/>\u00a0<br/>asciiprint(zsthinning(pixels))</pre>"}, {"lang": "Kotlin", "loc": 100, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Point<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"                                                          \"</span>,<br/>    <span class=\"st0\">\" #################                   #############        \"</span>,<br/>    <span class=\"st0\">\" ##################               ################        \"</span>,<br/>    <span class=\"st0\">\" ###################            ##################        \"</span>,<br/>    <span class=\"st0\">\" ########     #######          ###################        \"</span>,<br/>    <span class=\"st0\">\"   ######     #######         #######       ######        \"</span>,<br/>    <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>    <span class=\"st0\">\"   #################         #######                      \"</span>,<br/>    <span class=\"st0\">\"   ################          #######                      \"</span>,<br/>    <span class=\"st0\">\"   #################         #######                      \"</span>,<br/>    <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>    <span class=\"st0\">\"   ######     #######        #######                      \"</span>,<br/>    <span class=\"st0\">\"   ######     #######         #######       ######        \"</span>,<br/>    <span class=\"st0\">\" ########     #######          ###################        \"</span>,<br/>    <span class=\"st0\">\" ########     ####### ######    ################## ###### \"</span>,<br/>    <span class=\"st0\">\" ########     ####### ######      ################ ###### \"</span>,<br/>    <span class=\"st0\">\" ########     ####### ######         ############# ###### \"</span>,<br/>    <span class=\"st0\">\"                                                          \"</span> <br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbrs <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>    intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <br/>    intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <br/>    intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbrGroups <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>    arrayOf<span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    arrayOf<span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>, intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toWhite <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> grid <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>image.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> image<span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun thinImage<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> firstStep <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hasChanged<span class=\"sy0\">:</span> Boolean<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        hasChanged <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        firstStep <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>firstStep<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">1</span> until grid.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">1</span> until grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> continue<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn <span class=\"sy0\">=</span> numNeighbors<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">!</span>in <span class=\"nu0\">2</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> continue <br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numTransitions<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> continue<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> step <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>firstStep<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>atLeastOneIsWhite<span class=\"br0\">(</span>r, c, step<span class=\"br0\">)</span><span class=\"br0\">)</span> continue<br/>                toWhite.<span class=\"me1\">add</span><span class=\"br0\">(</span>Point<span class=\"br0\">(</span>c, r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                hasChanged <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in toWhite<span class=\"br0\">)</span> grid<span class=\"br0\">[</span>p.<span class=\"me1\">y</span><span class=\"br0\">]</span><span class=\"br0\">[</span>p.<span class=\"me1\">x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>        toWhite.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>firstStep || hasChanged<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in grid<span class=\"br0\">)</span> println<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun numNeighbors<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until nbrs.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> count++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun numTransitions<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until nbrs.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + nbrs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + nbrs<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + nbrs<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> count++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun atLeastOneIsWhite<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, step<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> group <span class=\"sy0\">=</span> nbrGroups<span class=\"br0\">[</span>step<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until group<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbr <span class=\"sy0\">=</span> nbrs<span class=\"br0\">[</span>group<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + nbr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + nbr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                count++<br/>                break<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    thinImage<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 141, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> zhangSuenThin<span class=\"br0\">(</span>img<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> dirs<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> black<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">local</span> white<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> A<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">local</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">local</span> current<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">,#</span>dirs <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">local</span> to_compare<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> current<span class=\"sy0\">==</span>white <span class=\"kw2\">and</span> to_compare<span class=\"sy0\">==</span>black <span class=\"kw1\">then</span><br/>                c<span class=\"sy0\">=</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>            current<span class=\"sy0\">=</span>to_compare<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> c<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> B<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">local</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">,#</span>dirs <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">local</span> value<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> value<span class=\"sy0\">==</span>black <span class=\"kw1\">then</span><br/>                c<span class=\"sy0\">=</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> c<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> common_step<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> img<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">~=</span>black <span class=\"kw2\">or</span> x<span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span> <span class=\"kw2\">or</span> x<span class=\"sy0\">&gt;=#</span>img<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"kw2\">or</span> y<span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span> <span class=\"kw2\">or</span> y<span class=\"sy0\">&gt;=#</span>img <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">local</span> b_value<span class=\"sy0\">=</span>B<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> b_value<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw2\">or</span> b_value<span class=\"sy0\">&gt;</span><span class=\"nu0\">6</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">local</span> a_value<span class=\"sy0\">=</span>A<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a_value<span class=\"sy0\">~=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> step_one<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> common_step<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">local</span> p2<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p4<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p6<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p8<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> p4<span class=\"sy0\">==</span>white <span class=\"kw2\">or</span> p6<span class=\"sy0\">==</span>white <span class=\"kw2\">or</span> p2<span class=\"sy0\">==</span>white <span class=\"kw2\">and</span> p8<span class=\"sy0\">==</span>white <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> step_two<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> common_step<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">local</span> p2<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p4<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p6<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">local</span> p8<span class=\"sy0\">=</span>img<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>dirs<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> p2<span class=\"sy0\">==</span>white <span class=\"kw2\">or</span> p8<span class=\"sy0\">==</span>white <span class=\"kw2\">or</span> p4<span class=\"sy0\">==</span>white <span class=\"kw2\">and</span> p6<span class=\"sy0\">==</span>white <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> convert<span class=\"br0\">(</span>to_do<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>to_do<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            img<span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>white<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> do_step_on_all<span class=\"br0\">(</span>step<span class=\"br0\">)</span><br/>        <span class=\"kw1\">local</span> to_convert<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> y<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>img <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>img<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> step<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>to_convert<span class=\"sy0\">,</span> <span class=\"br0\">{</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        convert<span class=\"br0\">(</span>to_convert<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">#</span>to_convert<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> continue<span class=\"sy0\">=</span><span class=\"kw4\">true</span><br/>    <span class=\"kw1\">while</span> continue <span class=\"kw1\">do</span><br/>        continue<span class=\"sy0\">=</span><span class=\"kw4\">false</span><br/>        <span class=\"kw1\">if</span> do_step_on_all<span class=\"br0\">(</span>step_one<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            continue<span class=\"sy0\">=</span><span class=\"kw4\">true</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> do_step_on_all<span class=\"br0\">(</span>step_two<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            continue<span class=\"sy0\">=</span><span class=\"kw4\">true</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> y<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>img <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>img<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>img<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">==</span>black <span class=\"kw2\">and</span> <span class=\"st0\">'#'</span> <span class=\"kw2\">or</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> image <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>zhangSuenThin<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 38, "block": "<pre class=\"text highlighted_source\">nB[mat_]\u00a0:= Delete[mat // Flatten, 5] // Total;<br/>\u00a0<br/>nA[mat_]\u00a0:= Module[{l},<br/>   l = Flatten[mat][[{2, 3, 6, 9, 8, 7, 4, 1, 2}]];<br/>   Total[Map[If[#[[1]] == 0 &amp;&amp; #[[2]] == 1, 1, 0] &amp;, <br/>     Partition[l, 2, 1]]]<br/>   ];<br/>\u00a0<br/>iW1[mat_]\u00a0:= <br/>  Module[{l = Flatten[mat]}, <br/>   If[Apply[Times, l[[{2, 6, 8}]]] + Apply[Times, l[[{4, 6, 8}]]] == <br/>     0, 0, 1]];<br/>iW2[mat_]\u00a0:= <br/>  Module[{l = Flatten[mat]}, <br/>   If[Apply[Times, l[[{2, 6, 4}]]] + Apply[Times, l[[{4, 2, 8}]]] == <br/>     0, 0, 1]];<br/>\u00a0<br/>check[i_, j_, dat_, t_]\u00a0:= Module[{mat, d = Dimensions[dat], r, c},<br/>   r = d[[1]];<br/>   c = d[[2]];<br/>   If[i &gt; 1 &amp;&amp; i &lt; r &amp;&amp; j &gt; 1 &amp;&amp; j &lt; c,<br/>    mat = dat[[i - 1\u00a0;; i + 1, j - 1\u00a0;; j + 1]];<br/>    If[dat[[i, j]] == 1 &amp;&amp; nA[mat] == 1 &amp;&amp; 2 &lt;= nB[mat] &lt;= 6 &amp;&amp; <br/>      If[t == 1, iW1[mat], iW2[mat]] == 0, 0, dat[[i, j]]],<br/>    dat[[i, j]]<br/>    ]];<br/>\u00a0<br/>iter[dat_]\u00a0:= <br/>  Module[{i = <br/>     Flatten[Outer[List, Range[Dimensions[dat][[1]]], <br/>       Range[Dimensions[dat][[2]]]], 1], tmp},<br/>   tmp = Partition[check[#[[1]], #[[2]], dat, 1] &amp; /@ i, <br/>     Dimensions[dat][[2]]];<br/>   Partition[check[#[[1]], #[[2]], tmp, 2] &amp; /@ i, <br/>    Dimensions[tmp][[2]]]];<br/>\u00a0<br/>\u00a0<br/>FixedPoint[iter, dat]</pre>"}, {"lang": "Perl 6", "loc": 40, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> DEBUG <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@lines</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span> <span class=\"kw1\">X</span><span class=\"sy0\">+&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> lines<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\"># The low bits Just Work.</span><br/><span class=\"kw1\">my</span> \\v <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@lines</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> \\h <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@lines</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@black</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">@lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"kw3\">values</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Flatten to 1-dimensional.</span><br/>\u00a0<br/><span class=\"kw1\">my</span> \\p8 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span>h<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>h<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>h<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>         <span class=\"co1\"># Flatland distances to 8 neighbors.</span><br/>           <span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>        <span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>           h<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  h<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  h<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>   <span class=\"co1\"># (in cycle order)</span><br/>\u00a0<br/><span class=\"co1\"># Candidates have 8 neighbors and are known black</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@cand</span> <span class=\"sy0\">=</span> <span class=\"kw3\">grep</span> <span class=\"br0\">{</span> <span class=\"re0\">@black</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">v</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">X</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">h</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\y<span class=\"sy0\">,</span>\\<span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> y<span class=\"sy0\">*</span>h <span class=\"sy0\">+</span> <span class=\"kw1\">x</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">repeat</span> <span class=\"kw1\">while</span> <span class=\"kw1\">my</span> <span class=\"re0\">@goners1</span> <span class=\"kw1\">or</span> <span class=\"kw1\">my</span> <span class=\"re0\">@goners2</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> seewhite <span class=\"br0\">(</span>\\w1<span class=\"sy0\">,</span>\\w2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">sub</span> cycles <span class=\"br0\">(</span><span class=\"re0\">@neighbors</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@neighbors</span> Z<span class=\"sy0\">&lt;</span> <span class=\"re0\">@neighbors</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">sub</span> blacks <span class=\"br0\">(</span><span class=\"re0\">@neighbors</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@neighbors</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@prior</span> <span class=\"sy0\">=</span> <span class=\"re0\">@cand</span><span class=\"sy0\">;</span> <span class=\"re0\">@cand</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        gather <span class=\"kw1\">for</span> <span class=\"re0\">@prior</span> <span class=\"sy0\">-&gt;</span> \\p <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> \\n <span class=\"sy0\">=</span> <span class=\"re0\">@black</span><span class=\"br0\">[</span>p8 <span class=\"kw1\">X</span><span class=\"sy0\">+</span> p<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> cycles<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> blacks<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span> <span class=\"kw1\">and</span> n<span class=\"br0\">[</span>w1<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">any</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> n<span class=\"br0\">[</span>w2<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">any</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>                 <span class=\"br0\">{</span> take p <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"re0\">@cand</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> p <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">@goners1</span> <span class=\"sy0\">=</span> seewhite <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@black</span><span class=\"br0\">[</span><span class=\"re0\">@goners1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Ping: {[+] @black} remaining after removing \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@goners1</span> <span class=\"kw1\">if</span> DEBUG<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@goners2</span> <span class=\"sy0\">=</span> seewhite <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@black</span><span class=\"br0\">[</span><span class=\"re0\">@goners2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Pong: {[+] @black} remaining after removing \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@goners2</span> <span class=\"kw1\">if</span> DEBUG<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@black</span><span class=\"sy0\">.</span><span class=\"kw3\">splice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>h<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span><span class=\"st_h\">'01'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'.#'</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"re0\">@black</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 65, "block": "<pre class=\"text highlighted_source\">constant n = {{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1},{-1,0}};<br/>\u00a0<br/>function AB(sequence text, integer y, x, step)<br/>integer wtb = 0, bn = 0<br/>integer prev = '#', next<br/>string p2468 = \"\"<br/>    for i=1 to length(n) do<br/>        next = text[y+n[i][1]][x+n[i][2]]<br/>        wtb += (prev='.' and next&lt;='#')<br/>        bn += (i&gt;1 and next&lt;='#')   <br/>        if and_bits(i,1)=0 then p2468 = append(p2468,prev) end if<br/>        prev = next<br/>    end for<br/>    if step=2 then -- make it p6842<br/>        p2468 = p2468[3..4]&amp;p2468[1..2]<br/>    end if<br/>    return {wtb,bn,p2468}<br/>end function<br/>\u00a0<br/>procedure Zhang_Suen(sequence text)<br/>integer wtb, bn, changed, changes<br/>string p2468    -- (p6842 for step 2)<br/>    text = split(text,'\\n')<br/>    while 1 do<br/>        changed = 0<br/>        for step=1 to 2 do<br/>            changes = 0<br/>            for y=2 to length(text)-1 do<br/>                for x=2 to length(text[y])-1 do<br/>                    if text[y][x]='#' then<br/>                        {wtb,bn,p2468} = AB(text,y,x,step)<br/>                        if wtb=1 <br/>                        and bn&gt;=2 and bn&lt;=6 <br/>                        and find('.',p2468[1..3]) <br/>                        and find('.',p2468[2..4])then<br/>                            changes = 1<br/>                            text[y][x] = '!'    -- (logically still black)<br/>                        end if<br/>                    end if<br/>                end for<br/>            end for<br/>            if changes then<br/>                for y=2 to length(text)-1 do<br/>                    text[y] = substitute(text[y],\"!\",\".\")<br/>                end for<br/>                changed = 1<br/>            end if<br/>        end for<br/>        if not changed then exit end if<br/>    end while<br/>    puts(1,join(text,\"\\n\"))<br/>end procedure<br/>\u00a0<br/>string small_rc = \"\"\"<br/>................................<br/>.#########.......########.......<br/>.###...####.....####..####......<br/>.###....###.....###....###......<br/>.###...####.....###.............<br/>.#########......###.............<br/>.###.####.......###....###......<br/>.###..####..###.####..####.###..<br/>.###...####.###..########..###..<br/>................................\"\"\"<br/>Zhang_Suen(small_rc)</pre>"}, {"lang": "PL/I", "loc": 123, "block": "<pre class=\"text highlighted_source\">zhang: procedure options (main);        /* 8 July 2014 */<br/>\u00a0<br/>   declare pic(10) bit(32) initial (<br/>      '00000000000000000000000000000000'b,<br/>      '01111111110000000111111110000000'b,<br/>      '01110001111000001111001111000000'b,<br/>      '01110000111000001110000111000000'b,<br/>      '01110001111000001110000000000000'b,<br/>      '01111111110000001110000000000000'b,<br/>      '01110111100000001110000111000000'b,<br/>      '01110011110011101111001111011100'b,<br/>      '01110001111011100111111110011100'b,<br/>      '00000000000000000000000000000000'b );<br/>   declare image  (10,32) bit(1) defined pic;<br/>   declare status (10,32) fixed decimal (1);<br/>   declare changes bit(1);<br/>   declare (i, j, k, m, n) fixed binary;<br/>\u00a0<br/>   m = hbound(image,1); n = hbound(image,2);<br/>\u00a0<br/>   call display; <br/>\u00a0<br/>   /* Pixel labelling for pixels surrounding P1, co-ordinates (i,j). */<br/>   /* P9 P2 P3 */<br/>   /* P8 P1 P4 */<br/>   /* P7 P6 P5 */<br/>\u00a0<br/>   do k = 1 to 10 until (^changes);<br/>      changes = '0'b;<br/>      /* Set conditions as follows: */<br/>      /*   (0) The pixel is black and has eight neighbours */<br/>      /*   (1) 2 &lt; = B(P1) &lt; = 6                           */<br/>      /*   (2) A(P1) = 1                                   */<br/>      /*   (3) At least one of P2 and P4 and P6 is white   */<br/>      /*   (4) At least one of P4 and P6 and P8 is white   */<br/>      status = -1;<br/>      do i = 2 to m-1;<br/>         do j = 2 to n-1;<br/>            if image(i,j) then<br/>               if B(i,j) &gt;= 2 &amp; B(i,j) &lt;= 6 then<br/>                  if A(i,j) = 1 then<br/>                     if ^image(i-1,j) | ^image(i,j+1) | ^image(i+1,j) then<br/>                        if ^image(i,j+1) | ^image(i+1,j) | ^image(i,j-1) then<br/>                           status(i,j) = 4;<br/>         end;<br/>      end;<br/>      /* Having determined a status for every bit in the image,   */<br/>      /* change those bits to white.                              */<br/>      do i = 2 to m-1;<br/>         do j = 2 to n-1;<br/>            if status(i,j) ^= -1 then do; image(i,j) = '0'b; changes = '1'b; end;<br/>         end;<br/>      end;<br/>\u00a0<br/>      /* Set conditions as follows: */<br/>      /*   (0) The pixel is black and has eight neighbours */<br/>      /*   (1) 2 &lt; = B(P1) &lt; = 6                           */<br/>      /*   (2) A(P1) = 1                                   */<br/>      /*   (3) At least one of P2 and P4 and P8 is white   */<br/>      /*   (4) At least one of P2 and P6 and P8 is white   */<br/>      status = -1;<br/>      do i = 2 to m-1;<br/>         do j = 2 to n-1;<br/>            if image(i,j) then<br/>               if B(i,j) &gt;= 2 &amp; B(i,j) &lt;= 6 then<br/>                  if A(i,j) = 1 then<br/>                     if ^image(i-1,j) | ^image(i,j+1) | ^image(i,j-1) then<br/>                        if ^image(i-1,j) | ^image(i+1,j) | ^image(i,j-1) then<br/>                           status(i,j) = 4;<br/>         end;<br/>      end;<br/>      /* Having determined a status for every bit in the image,   */<br/>      /* change those bits to white.                              */<br/>      do i = 2 to m-1;<br/>         do j = 2 to n-1;<br/>            if status(i,j) ^= -1 then do; image(i,j) = '0'b; changes = '1'b; end;<br/>         end;<br/>      end;<br/>\u00a0<br/>   end; /* of the \"until\" loop */<br/>\u00a0<br/>   put skip list ('Final image after ' || trim(k) || ' iterations:');<br/>   call display;<br/>\u00a0<br/>display: procedure;<br/>   declare (i, j) fixed binary;<br/>   declare c character (1);<br/>\u00a0<br/>   do i = 1 to m;<br/>      put skip edit ('row:', i) (A, F(3));<br/>      do j = 1 to n;<br/>         if image(i,j) then c = '.'; else c = ' ';<br/>         put edit (c) (A);<br/>      end;<br/>   end;<br/>   put skip;<br/>end;<br/>\u00a0<br/>/* Returns the number of transitions from white to black from P2 through P9 and P2. */<br/>A: procedure (i,j) returns (fixed binary);<br/>   declare (i,j) fixed binary nonassignable;<br/>   declare n(2:10) bit(1);<br/>\u00a0<br/>   n(2)  = image(i-1,j);  n(3) = image(i-1,j+1);<br/>   n(4)  = image(i, j+1); n(5) = image(i+1,j+1);<br/>   n(6)  = image(i+1,j);  n(7) = image(i+1,j-1);<br/>   n(8)  = image(i,j-1);  n(9) = image(i-1,j-1);<br/>   n(10) = image(i-1,j);<br/>\u00a0<br/>   return ( tally(string(n), '01'b) );<br/>end A;<br/>\u00a0<br/>/* Count the pixel neighbors of P1 that are black */<br/>B: procedure (i, j) returns (fixed binary);<br/>   declare (i,j) fixed binary nonassignable;<br/>   declare s fixed binary;<br/>\u00a0<br/>   s = image(i-1,j-1) + image(i-1,j) + image(i-1,j+1);<br/>   s = s + image(i,j-1) + image(i,j+1);<br/>   return ( s + image(i+1,j-1) + image(i+1,j) + image(i+1,j+1) );<br/>end B;<br/>\u00a0<br/>end zhang;</pre>"}, {"lang": "Python", "loc": 118, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/><span class=\"co1\"># Example from [http://nayefreza.wordpress.com/2013/05/11/zhang-suen-thinning-algorithm-java-implementation/ this blog post].</span><br/>beforeTxt <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>1100111<br/>1100111<br/>1100111<br/>1100111<br/>1100110<br/>1100110<br/>1100110<br/>1100110<br/>1100110<br/>1100110<br/>1100110<br/>1100110<br/>1111110<br/>0000000<span class=\"es0\">\\</span><br/>'''</span><br/>\u00a0<br/><span class=\"co1\"># Thanks to [http://www.network-science.de/ascii/ this site] and vim for these next two examples</span><br/>smallrc01 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<span class=\"es0\">\\</span><br/>'''</span><br/>\u00a0<br/>rc01 <span class=\"sy0\">=</span> <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>00000000000000000000000000000000000000000000000000000000000<br/>01111111111111111100000000000000000001111111111111000000000<br/>01111111111111111110000000000000001111111111111111000000000<br/>01111111111111111111000000000000111111111111111111000000000<br/>01111111100000111111100000000001111111111111111111000000000<br/>00011111100000111111100000000011111110000000111111000000000<br/>00011111100000111111100000000111111100000000000000000000000<br/>00011111111111111111000000000111111100000000000000000000000<br/>00011111111111111110000000000111111100000000000000000000000<br/>00011111111111111111000000000111111100000000000000000000000<br/>00011111100000111111100000000111111100000000000000000000000<br/>00011111100000111111100000000111111100000000000000000000000<br/>00011111100000111111100000000011111110000000111111000000000<br/>01111111100000111111100000000001111111111111111111000000000<br/>01111111100000111111101111110000111111111111111111011111100<br/>01111111100000111111101111110000001111111111111111011111100<br/>01111111100000111111101111110000000001111111111111011111100<br/>00000000000000000000000000000000000000000000000000000000000<span class=\"es0\">\\</span><br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">def</span> intarray<span class=\"br0\">(</span>binstring<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''Change a 2D matrix of 01 chars into a list of lists of ints'''</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> ch <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span> <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> line<span class=\"br0\">]</span> <br/>            <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> binstring.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> chararray<span class=\"br0\">(</span>intmatrix<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''Change a 2d list of lists of 1/0 ints into lines of 1/0 chars'''</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> intmatrix<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> toTxt<span class=\"br0\">(</span>intmatrix<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''Change a 2d list of lists of 1/0 ints into lines of '#' and '.' chars'''</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'#'</span> <span class=\"kw1\">if</span> p <span class=\"kw1\">else</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> intmatrix<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> neighbours<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> image<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''Return 8-neighbours of point p1 of picture, in order'''</span><br/>    i <span class=\"sy0\">=</span> image<br/>    x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x_1<span class=\"sy0\">,</span> y_1 <span class=\"sy0\">=</span> x+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> y-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> x-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> y+<span class=\"nu0\">1</span><br/>    <span class=\"co1\">#print ((x,y))</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>i<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span>  i<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"sy0\">,</span>   i<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"sy0\">,</span>  i<span class=\"br0\">[</span>y_1<span class=\"br0\">]</span><span class=\"br0\">[</span>x1<span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"co1\"># P2,P3,P4,P5</span><br/>            i<span class=\"br0\">[</span>y_1<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">[</span>y_1<span class=\"br0\">]</span><span class=\"br0\">[</span>x_1<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x_1<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">[</span>y1<span class=\"br0\">]</span><span class=\"br0\">[</span>x_1<span class=\"br0\">]</span><span class=\"br0\">]</span>  <span class=\"co1\"># P6,P7,P8,P9</span><br/>\u00a0<br/><span class=\"kw1\">def</span> transitions<span class=\"br0\">(</span>neighbours<span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> neighbours + neighbours<span class=\"br0\">[</span><span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"br0\">]</span>    <span class=\"co1\"># P2, ... P9, P2</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n1<span class=\"sy0\">,</span> n2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n1<span class=\"sy0\">,</span> n2 <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> zhangSuen<span class=\"br0\">(</span>image<span class=\"br0\">)</span>:<br/>    changing1 <span class=\"sy0\">=</span> changing2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> changing1 <span class=\"kw1\">or</span> changing2:<br/>        <span class=\"co1\"># Step 1</span><br/>        changing1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>image<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>                P2<span class=\"sy0\">,</span>P3<span class=\"sy0\">,</span>P4<span class=\"sy0\">,</span>P5<span class=\"sy0\">,</span>P6<span class=\"sy0\">,</span>P7<span class=\"sy0\">,</span>P8<span class=\"sy0\">,</span>P9 <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> neighbours<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> image<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span>    <span class=\"co1\"># (Condition 0)</span><br/>                    P4 * P6 * P8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span>   <span class=\"co1\"># Condition 4</span><br/>                    P2 * P4 * P6 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span>   <span class=\"co1\"># Condition 3</span><br/>                    transitions<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> <span class=\"co1\"># Condition 2</span><br/>                    <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>:      <span class=\"co1\"># Condition 1</span><br/>                    changing1.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> changing1: image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"co1\"># Step 2</span><br/>        changing2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>image<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>                P2<span class=\"sy0\">,</span>P3<span class=\"sy0\">,</span>P4<span class=\"sy0\">,</span>P5<span class=\"sy0\">,</span>P6<span class=\"sy0\">,</span>P7<span class=\"sy0\">,</span>P8<span class=\"sy0\">,</span>P9 <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> neighbours<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> image<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span>    <span class=\"co1\"># (Condition 0)</span><br/>                    P2 * P6 * P8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span>   <span class=\"co1\"># Condition 4</span><br/>                    P2 * P4 * P8 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span>   <span class=\"co1\"># Condition 3</span><br/>                    transitions<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> <span class=\"co1\"># Condition 2</span><br/>                    <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>:      <span class=\"co1\"># Condition 1</span><br/>                    changing2.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> changing2: image<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"co1\">#print changing1</span><br/>        <span class=\"co1\">#print changing2</span><br/>    <span class=\"kw1\">return</span> image<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> picture <span class=\"kw1\">in</span> <span class=\"br0\">(</span>beforeTxt<span class=\"sy0\">,</span> smallrc01<span class=\"sy0\">,</span> rc01<span class=\"br0\">)</span>:<br/>        image <span class=\"sy0\">=</span> intarray<span class=\"br0\">(</span>picture<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>From:<span class=\"es0\">\\n</span>%s'</span>\u00a0% toTxt<span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        after <span class=\"sy0\">=</span> zhangSuen<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>To thinned:<span class=\"es0\">\\n</span>%s'</span>\u00a0% toTxt<span class=\"br0\">(</span>after<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 114, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (img-01string-&gt;vector str)<br/>  (define lines (regexp-split \"\\n\" str))<br/>  (define h (length lines))<br/>  (define w (if (zero? h) 0 (string-length (car lines))))<br/>  (define v (for*/vector #:length (* w h)<br/>              ((l (in-list lines)) (p (in-string l)))<br/>              (match p (#\\0 0) (#\\1 1) (#\\# 1) (#\\. 0))))<br/>  (values v h w))<br/>\u00a0<br/>; Task (2) asks for \"or an ASCII-art image of space/non-space characters.\"<br/>; Spaces don't really impress where the borders are, so we'll use a dot.<br/>(define cell-&gt;display-char (match-lambda (0 \".\") (1 \"#\") (else \"?\")))<br/>\u00a0<br/>(define (display-img v w)<br/>  (for ((p (in-vector v)) (col (in-naturals)))<br/>    (printf \"~a\" (cell-&gt;display-char p))<br/>    (when (= (modulo col w) (sub1 w)) (newline))))<br/>\u00a0<br/>; returns vector of ([P1's idx] P1 P2 ... P9)<br/>(define (Pns v w r c)<br/>  (define i (+ c (* r w)))<br/>  (define-syntax-rule (vi+ x) (vector-ref v (+ i x)))<br/>  (define-syntax-rule (vi- x) (vector-ref v (- i x)))<br/>  (vector i (vi+ 0) (vi- w) (vi+ (- 1 w))<br/>          (vi+ 1) (vi+ (+ w 1)) (vi+ w)<br/>          (vi+ (- w 1)) (vi- 1) (vi- (+ w 1))))<br/>\u00a0<br/>; Second argument to in-vector is the start offset;<br/>; We skip offset 0 (idx) and 1 (P1)<br/>(define (B Ps) (for/sum ((Pn (in-vector Ps 2))) Pn))<br/>\u00a0<br/>(define (A Ps)<br/>  (define P2 (vector-ref Ps 2))<br/>  (define-values (rv _)<br/>    (for/fold ((acc 0) (Pn-1 P2))<br/>      ((Pn (in-sequences (in-vector Ps 3) (in-value P2))))<br/>      (values (+ acc (if (and (= 0 Pn-1) (= 1 Pn)) 1 0)) Pn)))<br/>  rv)<br/>\u00a0<br/>(define-syntax-rule (not-all-black? Pa Pb Pc) (zero? (* Pa Pb Pc)))<br/>(define (z-s-thin v h w)<br/> \u00a0; return idx when thin necessary, #f otherwise<br/>  (define (thin? Ps n/bour-check-1 n/bour-check-2)<br/>    (match-define (vector idx P1 P2 _ P4 _ P6 _ P8 _) Ps)<br/>    (and (= P1 1) (&lt;= 2 (B Ps) 6) (= (A Ps) 1)<br/>         (n/bour-check-1 P2 P4 P6 P8)<br/>         (n/bour-check-2 P2 P4 P6 P8)<br/>         idx))<br/>\u00a0<br/>  (define (has-white?-246 P2 P4 P6 P8) (not-all-black? P2 P4 P6))<br/>  (define (has-white?-468 P2 P4 P6 P8) (not-all-black? P4 P6 P8))<br/>  (define (has-white?-248 P2 P4 P6 P8) (not-all-black? P2 P4 P8))<br/>  (define (has-white?-268 P2 P4 P6 P8) (not-all-black? P2 P6 P8))<br/>  (define (step-n even-Pn-check-1 even-Pn-check-2)<br/>    (for*/list ((r (in-range 1 (- h 1)))<br/>                (c (in-range 1 (- w 1)))<br/>                (idx (in-value (thin? (Pns v w r c)<br/>                                      even-Pn-check-1<br/>                                      even-Pn-check-2)))<br/>                #:when idx) idx))<br/>\u00a0<br/>  (define (step-1) (step-n has-white?-246 has-white?-468))<br/>  (define (step-2) (step-n has-white?-248 has-white?-268))  <br/>  (define (inner-z-s-thin)<br/>    (define changed-list-1 (step-1))<br/>    (for ((idx (in-list changed-list-1))) (vector-set! v idx 0))<br/>    (define changed-list-2 (step-2))<br/>    (for ((idx (in-list changed-list-2))) (vector-set! v idx 0))<br/>    (unless (and (null? changed-list-1) (null? changed-list-2)) (inner-z-s-thin)))  <br/>  (inner-z-s-thin))<br/>\u00a0<br/>(define (read-display-thin-display-image img-str)<br/>  (define-values (v h w) (img-01string-&gt;vector img-str))<br/>  (printf \"Original image:~%\") (display-img v w)<br/>  (z-s-thin v h w)<br/>  (printf \"Thinned image:~%\") (display-img v w))<br/>\u00a0<br/>(define e.g.-image #&lt;&lt;EOS<br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<br/>EOS<br/>  )<br/>\u00a0<br/>(define e.g.-image/2 #&lt;&lt;EOS<br/>##..###<br/>##..###<br/>##..###<br/>##..###<br/>##..##.<br/>##..##.<br/>##..##.<br/>##..##.<br/>##..##.<br/>##..##.<br/>##..##.<br/>##..##.<br/>######.<br/>.......<br/>EOS<br/>  )<br/>\u00a0<br/>(module+ main<br/> \u00a0; (read-display-thin-display-image e.g.-image/2)<br/> \u00a0; (newline)<br/>  (read-display-thin-display-image e.g.-image))</pre>"}, {"lang": "REXX", "loc": 41, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program thins a  NxM  character grid  using  the  Zhang-Suen thinning  algorithm.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> iFID <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> iFID==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> iFID=<span class=\"st0\">'ZHANG_SUEN.DAT'</span><br/>white=<span class=\"st0\">' '</span>;         @<span class=\"sy0\">.</span>=white                      <span class=\"coMULTI\">/* [\u2193]  read the input character grid. */</span><br/>           <span class=\"kw1\">do</span> row=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>;  _=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><br/>           _=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>_,,<span class=\"sy0\">.</span>0<span class=\"br0\">)</span>;               cols<span class=\"sy0\">.</span>row=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><br/>               <span class=\"kw1\">do</span> col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<span class=\"sy0\">.</span>row;  @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,col,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                     <span class=\"coMULTI\">/* [\u2191]  assign whole row of characters.*/</span><br/>           <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*row*/</span><br/>rows=row-<span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*adjust ROWS because of the  DO loop. */</span><br/><span class=\"kw1\">call</span> <a class=\"__cf_email__\" data-cfemail=\"4e3d2621390e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <span class=\"st0\">'input file '</span> iFID  <span class=\"st0\">\" contents:\"</span>      <span class=\"coMULTI\">/*display show the input character grid*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>  changed==<span class=\"nu0\">0</span>;    changed=<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*keep slimming until we're finished.  */</span><br/>       <span class=\"kw1\">do</span> step=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>                          <span class=\"coMULTI\">/*keep track of  step one  or step two.*/</span><br/>         <span class=\"kw1\">do</span>     r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows                    <span class=\"coMULTI\">/*process all the  rows  and  columns. */</span><br/>             <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<span class=\"sy0\">.</span>r; \u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"47247a07\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c    <span class=\"coMULTI\">/*assign an alternate grid.            */</span><br/>             <span class=\"kw1\">if</span> r==<span class=\"nu0\">1</span><span class=\"sy0\">|</span>r==rows<span class=\"sy0\">|</span>c==<span class=\"nu0\">1</span><span class=\"sy0\">|</span>c==cols<span class=\"sy0\">.</span>r  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>             <span class=\"coMULTI\">/*is this an edge?*/</span><br/>             <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==white  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*Is the character white?  Then skip it*/</span><br/>             <span class=\"kw1\">call</span> Ps; b=b<span class=\"br0\">(</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*define   Ps   and also   \"b\".        */</span><br/>             <span class=\"kw1\">if</span> b<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"sy0\">|</span> b<span class=\"sy0\">&gt;</span><span class=\"nu0\">6</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*is   B   within the range\u00a0?          */</span><br/>             <span class=\"kw1\">if</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*count the number of transitions.     */</span>    <span class=\"coMULTI\">/*  \u2554\u2550\u2550\u2566\u2550\u2550\u2566\u2550\u2550\u2557  */</span><br/>             <span class=\"kw1\">if</span> step==<span class=\"nu0\">1</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&amp;</span> p4 <span class=\"sy0\">&amp;</span> p6<span class=\"br0\">)</span>  <span class=\"sy0\">|</span>  p4 <span class=\"sy0\">&amp;</span> p6 <span class=\"sy0\">&amp;</span> p8  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*  \u2551p9\u2551p2\u2551p3\u2551  */</span><br/>             <span class=\"kw1\">if</span> step==<span class=\"nu0\">2</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p2 <span class=\"sy0\">&amp;</span> p4 <span class=\"sy0\">&amp;</span> p8<span class=\"br0\">)</span>  <span class=\"sy0\">|</span>  p2 <span class=\"sy0\">&amp;</span> p6 <span class=\"sy0\">&amp;</span> p8  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*  \u2560\u2550\u2550\u256c\u2550\u2550\u256c\u2550\u2550\u2563  */</span><br/>            \u00a0!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=white                         <span class=\"coMULTI\">/*set a grid character to  white.      */</span>    <span class=\"coMULTI\">/*  \u2551p8\u2551p1\u2551p4\u2551  */</span><br/>             changed=<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/*indicate a character was changed.    */</span>    <span class=\"coMULTI\">/*  \u2560\u2550\u2550\u256c\u2550\u2550\u256c\u2550\u2550\u2563  */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                                                      <span class=\"coMULTI\">/*  \u2551p7\u2551p6\u2551p5\u2551  */</span><br/>         <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*r*/</span>                                                                      <span class=\"coMULTI\">/*  \u255a\u2550\u2550\u2569\u2550\u2550\u2569\u2550\u2550\u255d  */</span><br/>       <span class=\"kw1\">call</span> copy!                                <span class=\"coMULTI\">/*copy the alternate to working grid.  */</span><br/>       <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*step*/</span><br/>  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*until changed==0*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> <a class=\"__cf_email__\" data-cfemail=\"3c4f54534b7c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  <span class=\"st0\">'slimmed output:'</span>                    <span class=\"coMULTI\">/*display the slimmed character grid.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>a: <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>p2==p3<span class=\"sy0\">&amp;</span>p3<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p3==p4<span class=\"sy0\">&amp;</span>p4<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p4==p5<span class=\"sy0\">&amp;</span>p5<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p5==p6<span class=\"sy0\">&amp;</span>p6<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p6==p7<span class=\"sy0\">&amp;</span>p7<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p7==p8<span class=\"sy0\">&amp;</span>p8<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p8==p9<span class=\"sy0\">&amp;</span>p9<span class=\"br0\">)</span>+<span class=\"br0\">(</span><span class=\"sy0\">\\</span>p9==p2<span class=\"sy0\">&amp;</span>p2<span class=\"br0\">)</span><br/>b: <span class=\"kw1\">return</span> p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9<br/>copy!:                        <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows;       <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<span class=\"sy0\">.</span>r;        @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=!<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c;  <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span><br/><a class=\"__cf_email__\" data-cfemail=\"fb8893948cbb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: <span class=\"kw1\">say</span>; <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">say</span>;  <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> rows; _=;   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cols<span class=\"sy0\">.</span>r; _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c; <span class=\"kw3\">end</span>;  <span class=\"kw1\">say</span> _; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Ps:  rm=r-<span class=\"nu0\">1</span>;  rp=r+<span class=\"nu0\">1</span>;  cm=c-<span class=\"nu0\">1</span>;  cp=c+<span class=\"nu0\">1</span>                       <span class=\"coMULTI\">/*calculate some shortcuts.*/</span><br/>     <a class=\"__cf_email__\" data-cfemail=\"d1a1e3ec91\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rm<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"d1a1e2ec91\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rm<span class=\"sy0\">.</span>cp<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"78084c4538\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>cp<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"2c5c19116c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rp<span class=\"sy0\">.</span>cp<span class=\"sy0\">\\</span>==white<br/>     <a class=\"__cf_email__\" data-cfemail=\"4232747f02\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rp<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"bbcb8c86fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rp<span class=\"sy0\">.</span>cm<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"93e3abaed3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>cm<span class=\"sy0\">\\</span>==white; <a class=\"__cf_email__\" data-cfemail=\"4c3c75710c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>rm<span class=\"sy0\">.</span>cm<span class=\"sy0\">\\</span>==white; <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 68, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> ZhangSuen<br/>  NEIGHBOUR8 = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>  <span class=\"co1\"># 8 neighbors</span><br/>  CIRCULARS = NEIGHBOUR8 <span class=\"sy0\">+</span> <span class=\"br0\">[</span>NEIGHBOUR8.<span class=\"me1\">first</span><span class=\"br0\">]</span>                       <span class=\"co1\"># P2, ... P9, P2</span><br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>str, black=<span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>    s1 = str.<span class=\"me1\">each_line</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> line.<span class=\"kw3\">chomp</span>.<span class=\"me1\">each_char</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c==black\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    s2 = s1.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> line.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    xrange = <span class=\"nu0\">1</span> ... <span class=\"me1\">s1</span>.<span class=\"me1\">size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    yrange = <span class=\"nu0\">1</span> ... <span class=\"me1\">s1</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    printout<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"re1\">@r</span> = <span class=\"nu0\">0</span><br/>      xrange.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> yrange.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> s2<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = s1<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">-</span> zs<span class=\"br0\">(</span>s1,x,y,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span>  <span class=\"co1\"># Step 1</span><br/>      xrange.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> yrange.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> s1<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = s2<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">-</span> zs<span class=\"br0\">(</span>s2,x,y,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span>  <span class=\"co1\"># Step 2</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">until</span> <span class=\"re1\">@r</span> == <span class=\"nu0\">0</span><br/>    printout<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> zs<span class=\"br0\">(</span>ng,x,y,g<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> == <span class=\"nu0\">0</span> <span class=\"kw1\">or</span>                                    <span class=\"co1\"># P1</span><br/>               <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>g<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>g<span class=\"br0\">]</span><span class=\"br0\">)</span> == <span class=\"nu0\">3</span> <span class=\"kw1\">or</span>   <span class=\"co1\"># P2, P4, P6/P8</span><br/>               <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>g<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span>g<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> == <span class=\"nu0\">3</span>      <span class=\"co1\"># P4/P2, P6, P8</span><br/>    bp1 = NEIGHBOUR8.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>res,<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">|</span> res <span class=\"sy0\">+</span>= ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span>j<span class=\"br0\">]</span><span class=\"br0\">}</span>     <span class=\"co1\"># B(P1)</span><br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> bp1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"nu0\">6</span> <span class=\"sy0\">&lt;</span> bp1<br/>    ap1 = CIRCULARS.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i,j<span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span>j<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a<span class=\"sy0\">&lt;</span>b<span class=\"br0\">}</span>   <span class=\"co1\"># A(P1)</span><br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> ap1\u00a0!= <span class=\"nu0\">1</span><br/>    <span class=\"re1\">@r</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> printout<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> image.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>col<span class=\"sy0\">|</span> <span class=\"st0\">\" #\"</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>str = <span class=\"co4\">&lt;&lt;EOS<br/>...........................................................<br/>.#################...................#############.........<br/>.##################...............################.........<br/>.###################............##################.........<br/>.########.....#######..........###################.........<br/>...######.....#######.........#######.......######.........<br/>...######.....#######........#######.......................<br/>...#################.........#######.......................<br/>...################..........#######.......................<br/>...#################.........#######.......................<br/>...######.....#######........#######.......................<br/>...######.....#######........#######.......................<br/>...######.....#######.........#######.......######.........<br/>.########.....#######..........###################.........<br/>.########.....#######.######....##################.######..<br/>.########.....#######.######......################.######..<br/>.########.....#######.######.........#############.######..<br/>...........................................................<br/>EOS</span><br/>\u00a0<br/>ZhangSuen.<span class=\"me1\">new</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\u00a0<br/>task_example = <span class=\"co4\">&lt;&lt;EOS<br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<br/>EOS</span><br/>\u00a0<br/>ZhangSuen.<span class=\"me1\">new</span><span class=\"br0\">(</span>task_example, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 57, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> ZhangSuen<span class=\"br0\">(</span>str, black=<span class=\"st0\">\"1\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  const NEIGHBOURS = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>  <span class=\"co1\"># 8 neighbors</span><br/>  const CIRCULARS = <span class=\"br0\">(</span>NEIGHBOURS <span class=\"sy0\">+</span> <span class=\"br0\">[</span>NEIGHBOURS.<span class=\"me1\">first</span><span class=\"br0\">]</span><span class=\"br0\">)</span>                         <span class=\"co1\"># P2, ... P9, P2</span><br/>\u00a0<br/>  has r = <span class=\"nu0\">0</span><br/>  has image = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  method init <span class=\"br0\">{</span><br/>    var s1 = str.<span class=\"me1\">lines</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> line.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c==black\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    var s2 = s1.<span class=\"me1\">len</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> s1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">len</span>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    var xr = range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, s1.<span class=\"me1\">end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    var yr = range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, s1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        r = <span class=\"nu0\">0</span><br/>        xr.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> yr.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> s2<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = <span class=\"br0\">(</span>s1<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"kw2\">self</span>.<span class=\"me1\">zs</span><span class=\"br0\">(</span>s1,x,y,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">}</span>  <span class=\"co1\"># Step 1</span><br/>        xr.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> yr.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> s1<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> = <span class=\"br0\">(</span>s2<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"kw2\">self</span>.<span class=\"me1\">zs</span><span class=\"br0\">(</span>s2,x,y,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">}</span>  <span class=\"co1\"># Step 2</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span>\u00a0!r.<span class=\"me1\">is_zero</span><br/>    image = s1<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  method zs<span class=\"br0\">(</span>ng,x,y,g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span>                                   <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">||</span> <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>g<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span>g <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">||</span> <span class=\"br0\">(</span>ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>g <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span>g<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">+</span> ng<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    var bp1 = NEIGHBOURS.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span>  <span class=\"co1\"># B(P1)</span><br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bp1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"sy0\">&lt;</span> bp1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var ap1 = <span class=\"nu0\">0</span><br/>    CIRCULARS.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>x<span class=\"sy0\">+</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"sy0\">+</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span><br/>        <span class=\"sy0\">++</span>ap1 <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span>                                    <span class=\"co1\"># A(P1)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ap1\u00a0!= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    r = <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  method display <span class=\"br0\">{</span><br/>    image.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> say row.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>col<span class=\"sy0\">|</span> col\u00a0? <span class=\"st0\">'#'</span>\u00a0: <span class=\"st0\">' '</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var text = <span class=\"co4\">&lt;&lt;EOS<br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<br/>EOS</span><br/>\u00a0<br/>ZhangSuen.<span class=\"me1\">new</span><span class=\"br0\">(</span>text, black: <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>.<span class=\"me1\">display</span></pre>"}, {"lang": "Tcl", "loc": 78, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/><span class=\"kw1\">set</span> data <span class=\"br0\">{</span><br/>00000000000000000000000000000000<br/>01111111110000000111111110000000<br/>01110001111000001111001111000000<br/>01110000111000001110000111000000<br/>01110001111000001110000000000000<br/>01111111110000001110000000000000<br/>01110111100000001110000111000000<br/>01110011110011101111001111011100<br/>01110001111011100111111110011100<br/>00000000000000000000000000000000<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> zhang-suen data <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> data <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$data</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><br/>\t<span class=\"kw2\">incr</span> n <span class=\"br0\">[</span>step <span class=\"nu0\">1</span> data<span class=\"br0\">]</span><br/>\t<span class=\"kw2\">incr</span> n <span class=\"br0\">[</span>step <span class=\"nu0\">2</span> data<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">$n</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$data</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> step <span class=\"br0\">{</span>number _data<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$_data</span> data<br/>    <span class=\"kw1\">set</span> xmax <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> ymax <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$data</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">switch</span> -- <span class=\"re0\">$number</span> <span class=\"br0\">{</span><br/>\t<span class=\"nu0\">1</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> cond <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$P2</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P4</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P6</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$P4</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P6</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P8</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"nu0\">2</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> cond <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$P2</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P4</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P8</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$P2</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P6</span> || <span class=\"sy0\">!</span><span class=\"re0\">$P8</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> hits <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$xmax</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$ymax</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> b <span class=\"br0\">[</span>B <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">6</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>A <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">set</span> P2 <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">set</span> P4 <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">set</span> P6 <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$y</span>+<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">set</span> P8 <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$x</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"re0\">$cond</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> hits <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">}</span> <br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"re0\">$hits</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> data <span class=\"br0\">[</span>setpix <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$hits</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> A <span class=\"br0\">{</span>data x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> last <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  -<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> this <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$x</span>+<span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$y</span>+<span class=\"re0\">$dy</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$this</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$last</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> res<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> last <span class=\"re0\">$this</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> B <span class=\"br0\">{</span>data x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  -<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> res <span class=\"br0\">[</span>getpix <span class=\"re0\">$data</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$x</span>+<span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$y</span>+<span class=\"re0\">$dy</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> getpix <span class=\"br0\">{</span>data x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">string</span> index <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> setpix <span class=\"br0\">{</span>data x y val<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> row <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> data <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> replace <span class=\"re0\">$row</span> <span class=\"re0\">$x</span> <span class=\"re0\">$x</span> <span class=\"re0\">$val</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$data</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"nu0\">1</span> @ <span class=\"nu0\">0</span> .<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>zhang-suen <span class=\"re0\">$data</span><span class=\"br0\">]</span> \\n<span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}]}