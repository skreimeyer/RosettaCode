{"task": "Permutations_by_swapping", "blocks": [{"lang": "AutoHotkey", "loc": 10, "block": "<pre class=\"autohotkey highlighted_source\">Permutations_By_Swapping<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> list<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tch <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; get left-most charachter of str</span><br/>\tfor i<span class=\"sy0\">,</span> line in StrSplit<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">; for each line in list</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t\t\t\t<span class=\"co1\">; loop each possible position</span><br/>\t\t\tNewlist <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>line<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"(?=.{\"</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\"}$)\"</span>\u00a0: <span class=\"st0\">\"^.{\"</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\"}\\K\"</span><span class=\"sy0\">,</span> ch<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>\tlist <span class=\"sy0\">:=</span> Newlist\u00a0? Trim<span class=\"br0\">(</span>Newlist<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span>\u00a0: ch\t\t\t<span class=\"co1\">; recreate list</span><br/>\t<span class=\"kw1\">if</span>\u00a0!str <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; remove charachter from left hand side</span><br/>\t\t<span class=\"kw1\">return</span> list\t\t\t\t\t\t\t\t\t\t<span class=\"co1\">; done if str is empty</span><br/>\t<span class=\"kw1\">return</span> Permutations_By_Swapping<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> list<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; else recurse</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 35, "block": "<pre class=\"text highlighted_source\">      PROCperms(3)<br/>      PRINT<br/>      PROCperms(4)<br/>      END<br/>\u00a0<br/>      DEF PROCperms(n%)<br/>      LOCAL p%(), i%, k%, s%<br/>      DIM p%(n%)<br/>      FOR i% = 1 TO n%<br/>        p%(i%) = -i%<br/>      NEXT<br/>      s% = 1<br/>      REPEAT<br/>        PRINT \"Perm: [ \";<br/>        FOR i% = 1 TO n%<br/>          PRINT\u00a0;ABSp%(i%) \" \";<br/>        NEXT<br/>        PRINT \"] Sign: \";s%<br/>        k% = 0<br/>        FOR i% = 2 TO n%<br/>          IF p%(i%)&lt;0 IF ABSp%(i%)&gt;ABSp%(i%-1) IF ABSp%(i%)&gt;ABSp%(k%) k% = i%<br/>        NEXT<br/>        FOR i% = 1 TO n%-1<br/>          IF p%(i%)&gt;0 IF ABSp%(i%)&gt;ABSp%(i%+1) IF ABSp%(i%)&gt;ABSp%(k%) k% = i%<br/>        NEXT<br/>        IF k% THEN<br/>          FOR i% = 1 TO n%<br/>            IF ABSp%(i%)&gt;ABSp%(k%) p%(i%) *= -1<br/>          NEXT<br/>          i% = k%+SGNp%(k%)<br/>          SWAP p%(k%),p%(i%)<br/>          s% = -s%<br/>        ENDIF<br/>      UNTIL k% = 0<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 69, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> flag <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> heapPermute<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw4\">int</span> arrLen<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> temp<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>[\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>arrLen<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d,\"</span><span class=\"sy0\">,</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\b</span>] Sign\u00a0:\u00a0%d\"</span><span class=\"sy0\">,</span>flag<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tflag<span class=\"sy0\">*=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\theapPermute<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>arr<span class=\"sy0\">,</span>arrLen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\ttemp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tarr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tarr<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t\ttemp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tarr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tarr<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\theapPermute<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>arr<span class=\"sy0\">,</span>arrLen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">*</span>arr<span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> token<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;comma separated list of integers&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>\t\t\t\tcount<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tarr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>count<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ttoken <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>token<span class=\"sy0\">!=</span>NULL<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tarr<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttoken <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\theapPermute<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>arr<span class=\"sy0\">,</span>count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 64, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> UpTo<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> offset <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> retval<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ii <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> ii <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>ii<span class=\"br0\">)</span><br/>\t\tretval<span class=\"br0\">[</span>ii<span class=\"br0\">]</span> <span class=\"sy1\">=</span> ii <span class=\"sy2\">+</span> offset<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> retval<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> JohnsonTrotterState_<br/><span class=\"br0\">{</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> values_<span class=\"sy4\">;</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> positions_<span class=\"sy4\">;</span>\t<span class=\"co1\">// size is n+1, first element is not used</span><br/>\tvector<span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span> directions_<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> sign_<span class=\"sy4\">;</span><br/>\u00a0<br/>\tJohnsonTrotterState_<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"sy4\">:</span> values_<span class=\"br0\">(</span>UpTo<span class=\"br0\">(</span>n, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, positions_<span class=\"br0\">(</span>UpTo<span class=\"br0\">(</span>n <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, directions_<span class=\"br0\">(</span>n <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, <span class=\"kw2\">false</span><span class=\"br0\">)</span>, sign_<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> LargestMobile<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>\t<span class=\"co1\">// returns 0 if no mobile integer exists</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> values_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"sy2\">--</span>r<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> loc <span class=\"sy1\">=</span> positions_<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>directions_<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy4\">?</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>loc <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">&amp;&amp;</span> loc <span class=\"sy1\">&lt;</span> values_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> values_<span class=\"br0\">[</span>loc<span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> r<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> r<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">bool</span> IsComplete<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> LargestMobile<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"co1\">// implement Johnson-Trotter algorithm</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> LargestMobile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> rLoc <span class=\"sy1\">=</span> positions_<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> lLoc <span class=\"sy1\">=</span> rLoc <span class=\"sy2\">+</span> <span class=\"br0\">(</span>directions_<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy4\">?</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> values_<span class=\"br0\">[</span>lLoc<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"co1\">// do the swap</span><br/>\t\tswap<span class=\"br0\">(</span>values_<span class=\"br0\">[</span>lLoc<span class=\"br0\">]</span>, values_<span class=\"br0\">[</span>rLoc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tswap<span class=\"br0\">(</span>positions_<span class=\"br0\">[</span>l<span class=\"br0\">]</span>, positions_<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tsign_ <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>sign_<span class=\"sy4\">;</span><br/>\t\t<span class=\"co1\">// change directions</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> pd <span class=\"sy1\">=</span> directions_.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> r <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> pd <span class=\"sy3\">!</span><span class=\"sy1\">=</span> directions_.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>pd<span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy2\">*</span>pd <span class=\"sy1\">=</span> <span class=\"sy3\">!</span><span class=\"sy2\">*</span>pd<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tJohnsonTrotterState_ state<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">do</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> v <span class=\"sy4\">:</span> state.<span class=\"me1\">values_</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> v <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"sy2\">++</span>state<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>state.<span class=\"me1\">IsComplete</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 39, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> permutation<span class=\"sy0\">-</span>swaps<br/>  <span class=\"st0\">\"List of swap indexes to generate all permutations of n elements\"</span><br/>  <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>old<span class=\"sy0\">-</span>swaps <span class=\"br0\">(</span>permutation<span class=\"sy0\">-</span>swaps <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          swaps<span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          swaps<span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> swaps<span class=\"sy0\">-&gt;</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>old<span class=\"sy0\">-</span>swap side<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>case side<br/>                 \u00a0:<span class=\"kw1\">first</span> swaps<span class=\"sy0\">&lt;-</span><br/>                 \u00a0:<span class=\"me1\">right</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> swaps<span class=\"sy0\">&lt;-</span> old<span class=\"sy0\">-</span>swap<span class=\"br0\">)</span><br/>                 \u00a0:<span class=\"me1\">left</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> swaps<span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">inc</span> old<span class=\"sy0\">-</span>swap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">conj</span> old<span class=\"sy0\">-</span>swaps nil<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">cons</span>\u00a0:<span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> '<span class=\"br0\">(</span>:<span class=\"me1\">left</span>\u00a0:<span class=\"me1\">right</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> swap <span class=\"br0\">[</span>v <span class=\"br0\">[</span>i j<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> v<br/>      <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> i <span class=\"br0\">(</span>nth v j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> j <span class=\"br0\">(</span>nth v i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> permutations <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>permutations <span class=\"br0\">(</span><span class=\"kw1\">reduce</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>all<span class=\"sy0\">-</span>perms new<span class=\"sy0\">-</span>swap<span class=\"br0\">]</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">conj</span> all<span class=\"sy0\">-</span>perms <span class=\"br0\">(</span>swap <span class=\"br0\">(</span>last all<span class=\"sy0\">-</span>perms<span class=\"br0\">)</span><br/>                                               new<span class=\"sy0\">-</span>swap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>permutation<span class=\"sy0\">-</span>swaps n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        output <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span><br/>                    permutations<br/>                    <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    output<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dorun</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> println <span class=\"br0\">(</span>permutations n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 59, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defstruct <span class=\"br0\">(</span>directed-number <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">conc-</span><span class=\"kw1\">name</span> dn-<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>number <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>direction <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"sy0\">:</span><span class=\"me1\">left</span> <span class=\"sy0\">:</span><span class=\"me1\">right</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod print-object <span class=\"br0\">(</span><span class=\"br0\">(</span>dn directed-number<span class=\"br0\">)</span> stream<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>ecase <span class=\"br0\">(</span>dn-direction dn<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">left</span>  <span class=\"br0\">(</span>format stream <span class=\"st0\">\"&lt;~D\"</span> <span class=\"br0\">(</span>dn-number dn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">right</span> <span class=\"br0\">(</span>format stream <span class=\"st0\">\"~D&gt;\"</span> <span class=\"br0\">(</span>dn-number dn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dn<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>dn1 dn2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>directed-number dn1 dn2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>dn-number dn1<span class=\"br0\">)</span> <span class=\"br0\">(</span>dn-number dn2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dn-reverse-direction <span class=\"br0\">(</span>dn<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>directed-number dn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>dn-direction dn<span class=\"br0\">)</span> <span class=\"br0\">(</span>ecase <span class=\"br0\">(</span>dn-direction dn<span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">left</span>  <span class=\"sy0\">:</span><span class=\"me1\">right</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">right</span> <span class=\"sy0\">:</span><span class=\"me1\">left</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-directed-numbers-upto <span class=\"br0\">(</span>upto<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>numbers <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> upto <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>n upto numbers<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers n<span class=\"br0\">)</span> <span class=\"br0\">(</span>make-directed-number <span class=\"sy0\">:</span><span class=\"me1\">number</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">left</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> max-mobile-pos <span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>declare <span class=\"br0\">(</span><span class=\"br0\">(</span>vector directed-number<span class=\"br0\">)</span> numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with pos-limit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        with max-<span class=\"kw1\">value</span> <span class=\"kw1\">and</span> max-pos<br/>        for num across numbers<br/>        for pos from <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>ecase <span class=\"br0\">(</span>dn-direction num<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">left</span>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">plusp</span> pos<span class=\"br0\">)</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">&gt;</span> num <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers <span class=\"br0\">(</span><span class=\"nu0\">1</span>- pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> max-<span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">&gt;</span> num max-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">setf</span> max-<span class=\"kw1\">value</span> num<br/>                             max-pos   pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">right</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> pos pos-limit<span class=\"br0\">)</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">&gt;</span> num <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> max-<span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">&gt;</span> num max-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">setf</span> max-<span class=\"kw1\">value</span> num<br/>                             max-pos   pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> max-pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> permutations <span class=\"br0\">(</span>upto<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with numbers <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-directed-numbers-upto upto<span class=\"br0\">)</span><br/>        for max-mobile-pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>max-mobile-pos numbers<span class=\"br0\">)</span><br/>        for sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> then <span class=\"br0\">(</span>- sign<span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A sign: ~:[~;+~]~D~%\"</span> numbers <span class=\"br0\">(</span><span class=\"kw1\">plusp</span> sign<span class=\"br0\">)</span> sign<span class=\"br0\">)</span><br/>        while max-mobile-pos<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>max-mobile-number <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers max-mobile-pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>ecase <span class=\"br0\">(</span>dn-direction max-mobile-number<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">left</span>  <span class=\"br0\">(</span>rotatef <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers <span class=\"br0\">(</span><span class=\"nu0\">1</span>- max-mobile-pos<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers max-mobile-pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">right</span> <span class=\"br0\">(</span>rotatef <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers max-mobile-pos<span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"kw1\">aref</span> numbers <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ max-mobile-pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop for n across numbers<br/>                   <span class=\"kw1\">when</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">&gt;</span> n max-mobile-number<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">do</span> <span class=\"br0\">(</span>dn-reverse-direction n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>permutations <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>permutations <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 84, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Spermutations<span class=\"br0\">(</span><span class=\"kw4\">bool</span> doCopy<span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> TResult <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> opApply<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> TResult<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> dg<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">alias</span> Int2 <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> p <span class=\"sy0\">=</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Int2<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> i <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        TResult aux<span class=\"sy0\">;</span><br/>\u00a0<br/>        aux<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pi <span class=\"sy0\">=&gt;</span> pi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        aux<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> sign<span class=\"sy0\">;</span><br/>        result <span class=\"sy0\">=</span> dg<span class=\"br0\">(</span>aux<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>            <span class=\"kw1\">goto</span> END<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p.<span class=\"me1\">any</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Failed to use std.algorithm here, too much complex.</span><br/>            <span class=\"kw4\">auto</span> largest <span class=\"sy0\">=</span> Int2<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i1 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> pi<span class=\"sy0\">;</span> p<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pi<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> largest<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        i1 <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                        largest <span class=\"sy0\">=</span> pi<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"kw4\">immutable</span> n1 <span class=\"sy0\">=</span> largest<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      d1 <span class=\"sy0\">=</span> largest<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            sign <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i2<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d1 <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                i2 <span class=\"sy0\">=</span> i1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span>.<span class=\"me1\">swap</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> p<span class=\"br0\">[</span>i2 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> n1<span class=\"br0\">)</span><br/>                    p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d1 <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                i2 <span class=\"sy0\">=</span> i1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span>.<span class=\"me1\">swap</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i2 <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> p<span class=\"br0\">[</span>i2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> n1<span class=\"br0\">)</span><br/>                    p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doCopy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                aux<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pi <span class=\"sy0\">=&gt;</span> pi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> pi<span class=\"sy0\">;</span> p<span class=\"br0\">)</span><br/>                    aux<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            aux<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> sign<span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">=</span> dg<span class=\"br0\">(</span>aux<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>                <span class=\"kw1\">goto</span> END<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i3<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> pi<span class=\"sy0\">;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> n3 <span class=\"sy0\">=</span> pi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                          d3 <span class=\"sy0\">=</span> pi<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n3 <span class=\"sy0\">&gt;</span> n1<span class=\"br0\">)</span><br/>                    pi<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i3 <span class=\"sy0\">&lt;</span> i2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        END<span class=\"sy0\">:</span> <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Spermutations<span class=\"sy0\">!</span>doCopy spermutations<span class=\"br0\">(</span><span class=\"kw4\">bool</span> doCopy<span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span> <span class=\"br0\">(</span>permutations_by_swapping1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Permutations and sign of\u00a0%d items\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> tp<span class=\"sy0\">;</span> n.<span class=\"me1\">spermutations</span><span class=\"br0\">)</span><br/>                writefln<span class=\"br0\">(</span><span class=\"st0\">\"Perm:\u00a0%s  Sign:\u00a0%2d\"</span><span class=\"sy0\">,</span> tp<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 31, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib '<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for/fold <span class=\"br0\">(</span>sign <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>\u03c3 <span class=\"br0\">(</span>in-permutations <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>printf <span class=\"st0\">\"perm:\u00a0%a count:%4d sign:%4d\"</span> \u03c3 count sign<span class=\"br0\">)</span> <span class=\"br0\">(</span>* sign -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">0</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">2</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">3</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">4</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">5</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">6</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">7</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">8</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>   <span class=\"nu0\">9</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">10</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">11</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">12</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">13</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">14</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">15</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">16</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">17</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">18</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">19</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">20</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">21</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">22</span> sign<span class=\"sy0\">:</span>   <span class=\"nu0\">1</span><br/>perm<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> count<span class=\"sy0\">:</span>  <span class=\"nu0\">23</span> sign<span class=\"sy0\">:</span>  -<span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 40, "block": "<pre class=\"text highlighted_source\">defmodule Permutation do<br/>  def by_swap(n) do<br/>    p = Enum.to_list(0..-n) |&gt; List.to_tuple<br/>    by_swap(n, p, 1)<br/>  end<br/>\u00a0<br/>  defp by_swap(n, p, s) do<br/>    IO.puts \"Perm: #{inspect for i &lt;- 1..n, do: abs(elem(p,i))}  Sign: #{s}\"<br/>    k = 0 |&gt; step_up(n, p) |&gt; step_down(n, p)<br/>    if k &gt; 0 do<br/>      pk = elem(p,k)<br/>      i = if pk&gt;0, do: k+1, else: k-1<br/>      p = Enum.reduce(1..n, p, fn i,acc -&gt;<br/>        if abs(elem(p,i)) &gt; abs(pk), do: put_elem(acc, i, -elem(acc,i)), else: acc<br/>      end)<br/>      pi = elem(p,i)<br/>      p = put_elem(p,i,pk) |&gt; put_elem(k,pi)            # swap<br/>      by_swap(n, p, -s)<br/>    end<br/>  end<br/>\u00a0<br/>  defp step_up(k, n, p) do<br/>    Enum.reduce(2..n, k, fn i,acc -&gt;<br/>      if elem(p,i)&lt;0 and abs(elem(p,i))&gt;abs(elem(p,i-1)) and abs(elem(p,i))&gt;abs(elem(p,acc)),<br/>        do: i, else: acc <br/>    end)<br/>  end<br/>\u00a0<br/>  defp step_down(k, n, p) do<br/>    Enum.reduce(1..n-1, k, fn i,acc -&gt;<br/>      if elem(p,i)&gt;0 and abs(elem(p,i))&gt;abs(elem(p,i+1)) and abs(elem(p,i))&gt;abs(elem(p,acc)),<br/>        do: i, else: acc <br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(3..4, fn n -&gt;<br/>  Permutation.by_swap(n)<br/>  IO.puts \"\"<br/>end)</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*Implement Johnson-Trotter algorithm<br/>  Nigel Galloway January 24th 2017*)</span><br/><span class=\"kw1\">module</span> Ring<br/><span class=\"kw1\">let</span> PlainChanges <span class=\"br0\">(</span>N:<span class=\"st0\">'n[]) = seq{<br/>  let gn  = [|for n in N -&gt; 1|]<br/>  let ni  = [|for n in N -&gt; 0|]<br/>  let gel = Array.length(N)-1<br/>  yield Some N<br/>  let rec _Ni g e l = seq{<br/>    match (l,g) with<br/>    |_ when l&lt;0   -&gt; gn.[g] &lt;- -gn.[g]; yield! _Ni (g-1) e (ni.[g-1] + gn.[g-1])<br/>    |(1,0)        -&gt; yield None<br/>    |_ when l=g+1 -&gt; gn.[g] &lt;- -gn.[g]; yield! _Ni (g-1) (e+1) (ni.[g-1] + gn.[g-1])<br/>    |_ -&gt; let n = N.[g-ni.[g]+e];<br/>          N.[g-ni.[g]+e] &lt;- N.[g-l+e]; N.[g-l+e] &lt;- n; yield Some N<br/>          ni.[g] &lt;- l; yield! _Ni gel 0 (ni.[gel] + gn.[gel])}<br/>  yield! _Ni gel 0 1<br/>}<br/></span></pre>"}, {"lang": "Forth", "loc": 67, "block": "<pre class=\"text highlighted_source\">S\" fsl-util.fs\" REQUIRED<br/>S\" fsl/dynmem.seq\" REQUIRED<br/>\u00a0<br/>cell darray p{<br/>\u00a0<br/>: sgn<br/>  DUP 0 &gt; IF<br/>    DROP 1<br/>  ELSE 0 &lt; IF<br/>    -1<br/>  ELSE<br/>    0<br/>  THEN THEN\u00a0;<br/>: arr-swap {: addr1 addr2 | tmp --\u00a0:}<br/>  addr1 @ TO tmp<br/>  addr2 @ addr1\u00a0!<br/>  tmp addr2\u00a0!\u00a0;<br/>: perms {: n xt | my-i k s --\u00a0:}<br/>  &amp; p{ n 1+ }malloc malloc-fail? ABORT\" perms\u00a0:: out of memory\"<br/>  0 p{ 0 }\u00a0!<br/>  n 1+ 1 DO<br/>    I NEGATE p{ I }\u00a0!<br/>  LOOP<br/>  1 TO s<br/>  BEGIN<br/>    1 n 1+ DO<br/>      p{ I } @ ABS<br/>    -1 +LOOP<br/>    n 1+ s xt EXECUTE<br/>    0 TO k<br/>    n 1+ 2 DO<br/>      p{ I } @ 0 &lt; ( flag )<br/>      p{ I } @ ABS  p{ I 1- } @ ABS  &gt; ( flag flag )<br/>      p{ I } @ ABS p{ k } @ ABS &gt; ( flag flag flag )<br/>      AND AND IF<br/>        I TO k<br/>      THEN<br/>    LOOP<br/>    n 1 DO<br/>      p{ I } @ 0 &gt; ( flag )<br/>      p{ I } @ ABS  p{ I 1+ } @ ABS  &gt; ( flag flag )<br/>      p{ I } @ ABS  p{ k } @ ABS  &gt; ( flag flag flag )<br/>      AND AND IF<br/>        I TO k<br/>      THEN<br/>    LOOP<br/>    k IF<br/>      n 1+ 1 DO<br/>        p{ I } @ ABS  p{ k } @ ABS  &gt; IF<br/>          p{ I } @ NEGATE p{ I }\u00a0!<br/>        THEN<br/>      LOOP<br/>      p{ k } @ sgn k + TO my-i<br/>      p{ k } p{ my-i } arr-swap<br/>      s NEGATE TO s<br/>    THEN<br/>  k 0 = UNTIL\u00a0;<br/>: .perm ( p0 p1 p2 ... pn n s )<br/>  &gt;R<br/>  .\" Perm: [ \"<br/>  1 DO<br/>    . SPACE<br/>  LOOP<br/>  R&gt; .\" ] Sign: \" . CR\u00a0;<br/>\u00a0<br/>3 ' .perm perms CR<br/>4 ' .perm perms</pre>"}, {"lang": "FreeBASIC", "loc": 60, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 31-03-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> perms<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> p<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, i, k, s = <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = -i<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Perm: [ \"</span>;<br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">Print</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"] Sign: \"</span>; s<br/>\u00a0<br/>        k = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> k = i<br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i +<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> k = i<br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> k <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">For</span>  i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                <span class=\"kw1\">If</span> Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Abs<span class=\"br0\">(</span>p<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = -p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span><br/>            i = k + <span class=\"kw1\">Sgn</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Swap</span> p<span class=\"br0\">(</span>k<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            s = -s<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> k = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>perms<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><br/>perms<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 50, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> permute<br/>\u00a0<br/><span class=\"co1\">// Iter takes a slice p and returns an iterator function.  The iterator</span><br/><span class=\"co1\">// permutes p in place and returns the sign.  After all permutations have</span><br/><span class=\"co1\">// been generated, the iterator returns 0 and p is left in its initial order.</span><br/><span class=\"kw4\">func</span> Iter<span class=\"sy1\">(</span>p <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> pf<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Recursive function used by perm, returns a chain of closures that</span><br/><span class=\"co1\">// implement a loopless recursive SJT.</span><br/><span class=\"kw4\">func</span> pf<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">func</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    sign <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">switch</span> n <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            s <span class=\"sy2\">=</span> sign<br/>            sign <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        p0 <span class=\"sy2\">:=</span> pf<span class=\"sy1\">(</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> n<br/>        <span class=\"kw1\">var</span> d <span class=\"kw4\">int</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> sign <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> n<span class=\"sy1\">:</span><br/>                <span class=\"nu2\">i</span><span class=\"sy2\">--</span><br/>                sign <span class=\"sy2\">=</span> p0<span class=\"sy1\">(</span>p<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>                d <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>                <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>                sign <span class=\"sy2\">*=</span> p0<span class=\"sy1\">(</span>p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span><br/>                d <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">if</span> sign <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    p<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>                sign <span class=\"sy2\">=</span> <span class=\"sy3\">-</span>sign<br/>                <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> d<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span> sign<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\">sPermutations <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>sPermutations <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> aux <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    aux x items <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> item<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><span class=\"br0\">)</span> items<br/>      f <span class=\"br0\">(</span>insertEv x item<span class=\"br0\">)</span><br/>    insertEv x <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    insertEv x l<span class=\"sy0\">@</span><span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x\u00a0: l<span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span><span class=\"br0\">(</span>y\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> insertEv x ys<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"3 items:\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> sPermutations <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>4 items:\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> sPermutations <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 30, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Permutations of length \"</span><span class=\"sy0\">,</span>n <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">every</span> p <span class=\"sy0\">:=</span> permute<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span>showList<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> permute<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    items <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">,</span> new_items <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> item <span class=\"sy0\">:=</span> items<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>items<span class=\"br0\">]</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>item <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>new_items<span class=\"sy0\">,</span> <span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> i<span class=\"sy0\">%</span>2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">every</span> k <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>item<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    new_item <span class=\"sy0\">:=</span> item<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>k<span class=\"br0\">]</span> <span class=\"sy0\">|||</span> <span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">|||</span> item<span class=\"br0\">[</span>k<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                    <span class=\"kw4\">put</span><span class=\"br0\">(</span>new_items<span class=\"sy0\">,</span> new_item<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">every</span> k <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>item<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> by <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    new_item <span class=\"sy0\">:=</span> item<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>k<span class=\"br0\">]</span> <span class=\"sy0\">|||</span> <span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">|||</span> item<span class=\"br0\">[</span>k<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                    <span class=\"kw4\">put</span><span class=\"br0\">(</span>new_items<span class=\"sy0\">,</span> new_item<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>       items <span class=\"sy0\">:=</span> new_items<br/>       <span class=\"br0\">}</span><br/>    <span class=\"kw1\">suspend</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">!</span>items<span class=\"sy0\">,</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+:=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showList<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||:=</span> <span class=\"kw4\">image</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>A<span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"st0\">\", \"</span><br/>    <span class=\"kw1\">return</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">||</span><span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">bfsjt0=: <span class=\"nu0\">_1</span> - i.<br/>lookingat=: <span class=\"nu0\">0</span> &gt;. &lt;:@# &lt;. <a class=\"__cf_email__\" data-cfemail=\"81e8afc1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># + * <br/>next=: | &gt;./@:* | &gt; | {~ lookingat<br/>bfsjtn=: <span class=\"sy0\">(((</span>] &lt;@, ] + *@{~<span class=\"sy0\">)</span> | i. next<span class=\"sy0\">)</span> C. ] * <span class=\"nu0\">_1</span> ^ next &lt; |<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span>*@next<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 68, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">package</span> <span class=\"co2\">org.rosettacode.java</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.IntStream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HeapsAlgorithm <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array <span class=\"sy0\">=</span> IntStream.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\t\t.<span class=\"me1\">boxed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t\t.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tHeapsAlgorithm algorithm <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HeapsAlgorithm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\talgorithm.<span class=\"me1\">recursive</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\talgorithm.<span class=\"me1\">loop</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> recursive<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\trecursive<span class=\"br0\">(</span>array, array.<span class=\"me1\">length</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> recursive<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array, <span class=\"kw4\">int</span> n, <span class=\"kw4\">boolean</span> plus<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\toutput<span class=\"br0\">(</span>array, plus<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\trecursive<span class=\"br0\">(</span>array, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tswap<span class=\"br0\">(</span>array, n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">:</span> <span class=\"nu0\">0</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> output<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array, <span class=\"kw4\">boolean</span> plus<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>plus <span class=\"sy0\">?</span> <span class=\"st0\">\" +1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" -1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array, <span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> o <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tarray<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tarray<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> o<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> loop<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tloop<span class=\"br0\">(</span>array, array.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> loop<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> array, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\toutput<span class=\"br0\">(</span>array, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">boolean</span> plus <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tswap<span class=\"br0\">(</span>array, <span class=\"nu0\">0</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t\tswap<span class=\"br0\">(</span>array, c<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\toutput<span class=\"br0\">(</span>array, plus<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tplus <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>plus<span class=\"sy0\">;</span><br/>\t\t\t\tc<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t\t\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\tc<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\ti<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 45, "block": "<pre class=\"text highlighted_source\"># The helper function, _recurse, is tail-recursive and therefore in<br/># versions of jq with TCO (tail call optimization) there is no<br/># overhead associated with the recursion.<br/>\u00a0<br/>def permutations:<br/>  def abs: if . &lt; 0 then -. else . end;<br/>  def sign: if . &lt; 0 then -1 elif . == 0 then 0 else 1 end;<br/>  def swap(i;j): .[i] as $i | .[i] = .[j] | .[j] = $i;<br/>\u00a0<br/>  # input: [ parity, extendedPermutation]<br/>  def _recurse:<br/>    .[0] as $s | .[1] as $p | (($p | length) -1) as $n<br/>    | [ $s, ($p[1:] | map(abs)) ],<br/>      (reduce range(2; $n+1) as $i<br/>         (0;<br/>          if $p[$i] &lt; 0 and -($p[$i]) &gt; ($p[$i-1]|abs) and -($p[$i]) &gt; ($p[.]|abs)<br/>          then $i <br/>          else .<br/>          end)) as $k<br/>      | (reduce range(1; $n) as $i<br/>           ($k;<br/>            if $p[$i] &gt; 0 and $p[$i] &gt; ($p[$i+1]|abs) and $p[$i] &gt; ($p[.]|abs)<br/>            then $i <br/>            else .<br/>            end)) as $k<br/>      | if $k == 0 then empty<br/>        else (reduce range(1; $n) as $i<br/>\t       ($p;<br/>                if (.[$i]|abs) &gt; (.[$k]|abs) then .[$i] *= -1 <br/>                else .<br/>                end )) as $p<br/>        | ($k + ($p[$k]|sign)) as $i<br/>        | ($p | swap($i; $k)) as $p<br/>        | [ -($s), $p ] | _recurse<br/>        end\u00a0;<br/>\u00a0<br/>  . as $in<br/>  | length as $n<br/>  | (reduce range(0; $n+1) as $i ([]; . + [ -$i ])) as $p<br/>  # recurse state: [$s, $p]<br/>  | [ 1, $p] | _recurse<br/>  | .[1] as $p<br/>  | .[1] = reduce range(0; $n) as $i ([]; . + [$in[$p[$i]  - 1]])\u00a0;<br/>\u00a0<br/>def count(stream): reduce stream as $x (0; .+1);</pre>"}, {"lang": "Julia", "loc": 60, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function johnsontrottermove!(ints, isleft)<br/>    len = length(ints)<br/>    function ismobile(pos)<br/>        if isleft[pos] &amp;&amp; (pos &gt; 1) &amp;&amp; (ints[pos-1] &lt; ints[pos])<br/>            return true<br/>        elseif\u00a0!isleft[pos] &amp;&amp; (pos &lt; len) &amp;&amp; (ints[pos+1] &lt; ints[pos])<br/>            return true<br/>        end<br/>        false<br/>    end<br/>    function maxmobile()<br/>        arr = [ints[pos] for pos in 1:len if ismobile(pos)]<br/>        if isempty(arr)<br/>            0, 0<br/>        else<br/>            maxmob = maximum(arr)<br/>            maxmob, findfirst(x -&gt; x == maxmob, ints)<br/>        end<br/>    end<br/>    function directedswap(pos)<br/>        tmp = ints[pos]<br/>        tmpisleft = isleft[pos]<br/>        if isleft[pos]<br/>            ints[pos] = ints[pos-1]; ints[pos-1] = tmp<br/>            isleft[pos] = isleft[pos-1]; isleft[pos-1] = tmpisleft<br/>        else<br/>            ints[pos] = ints[pos+1]; ints[pos+1] = tmp<br/>            isleft[pos] = isleft[pos+1]; isleft[pos+1] = tmpisleft<br/>        end<br/>    end<br/>    (moveint, movepos) = maxmobile()<br/>    if movepos &gt; 0<br/>        directedswap(movepos)<br/>        for (i, val) in enumerate(ints)<br/>            if val &gt; moveint<br/>                isleft[i] =\u00a0!isleft[i]<br/>            end<br/>        end<br/>        ints, isleft, true<br/>    else<br/>        ints, isleft, false<br/>    end<br/>end<br/>function johnsontrotter(low, high)<br/>    ints = collect(low:high)<br/>    isleft = [true for i in ints]<br/>    firstconfig = copy(ints)<br/>    iters = 0<br/>    while true<br/>        iters += 1<br/>        println(\"$ints $(iters &amp; 1 == 1\u00a0? \"+1\"\u00a0: \"-1\")\")<br/>        if johnsontrottermove!(ints, isleft)[3] == false<br/>            break<br/>        end<br/>    end<br/>    println(\"There were $iters iterations.\")<br/>end<br/>johnsontrotter(1,4)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 46, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun johnsonTrotter<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span>, List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span>  <span class=\"co1\">// permutation</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span>  <span class=\"co1\">// inverse permutation</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span>  <span class=\"co1\">// direction = 1 or -1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> signs <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun permute<span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            perms.<span class=\"me1\">add</span><span class=\"br0\">(</span>p.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            signs.<span class=\"me1\">add</span><span class=\"br0\">(</span>sign<span class=\"br0\">)</span><br/>            sign <span class=\"sy0\">*=</span> -<span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span> <br/>        permute<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> z <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>q<span class=\"br0\">[</span>k<span class=\"br0\">]</span> + d<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            p<span class=\"br0\">[</span>q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z<br/>            p<span class=\"br0\">[</span>q<span class=\"br0\">[</span>k<span class=\"br0\">]</span> + d<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>            q<span class=\"br0\">[</span>z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>            q<span class=\"br0\">[</span>k<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> d<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>            permute<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        d<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> -<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    permute<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> perms to signs<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printPermsAndSigns<span class=\"br0\">(</span>perms<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span>, signs<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, perm<span class=\"br0\">)</span> in perms.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${perm.contentToString()} -&gt; sign = ${signs[i]}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>perms, signs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> johnsonTrotter<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    printPermsAndSigns<span class=\"br0\">(</span>perms, signs<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>perms2, signs2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> johnsonTrotter<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    printPermsAndSigns<span class=\"br0\">(</span>perms2, signs2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 41, "block": "<pre class=\"lua highlighted_source\">_JT<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> JT<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> n<span class=\"sy0\">=</span><span class=\"br0\">{</span> values<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> positions<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> directions<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> sign<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"br0\">{</span>__index<span class=\"sy0\">=</span>_JT<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>dim <span class=\"kw1\">do</span><br/>    n<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>i<br/>    n<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>i<br/>    n<span class=\"sy0\">.</span>directions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> _JT<span class=\"sy0\">:</span>largestMobile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=#</span>self<span class=\"sy0\">.</span>values<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> loc<span class=\"sy0\">=</span>self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span>self<span class=\"sy0\">.</span>directions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> loc <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> loc <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>values <span class=\"kw2\">and</span> self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>loc<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> i <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> i<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> _JT<span class=\"sy0\">:</span><span class=\"kw3\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> r<span class=\"sy0\">=</span>self<span class=\"sy0\">:</span>largestMobile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> r<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> rloc<span class=\"sy0\">=</span>self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>r<span class=\"br0\">]</span><br/>  <span class=\"kw1\">local</span> lloc<span class=\"sy0\">=</span>rloc<span class=\"sy0\">+</span>self<span class=\"sy0\">.</span>directions<span class=\"br0\">[</span>r<span class=\"br0\">]</span><br/>  <span class=\"kw1\">local</span> l<span class=\"sy0\">=</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>lloc<span class=\"br0\">]</span><br/>  self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>lloc<span class=\"br0\">]</span><span class=\"sy0\">,</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>rloc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>rloc<span class=\"br0\">]</span><span class=\"sy0\">,</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>lloc<span class=\"br0\">]</span><br/>  self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">,</span>self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">,</span>self<span class=\"sy0\">.</span>positions<span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>  self<span class=\"sy0\">.</span>sign<span class=\"sy0\">=-</span>self<span class=\"sy0\">.</span>sign<br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span>r<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>self<span class=\"sy0\">.</span>directions <span class=\"kw1\">do</span> self<span class=\"sy0\">.</span>directions<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=-</span>self<span class=\"sy0\">.</span>directions<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span>  <br/>\u00a0<br/><span class=\"co1\">-- test</span><br/>\u00a0<br/>perm<span class=\"sy0\">=</span>JT<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">repeat</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>perm<span class=\"sy0\">.</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">until</span> <span class=\"kw2\">not</span> perm<span class=\"sy0\">:</span><span class=\"kw3\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">perms[0] = {{{}, 1}}; <br/>perms[n_]\u00a0:= <br/> Flatten[If[#2 == 1, Reverse, # &amp;]@<br/>     Table[{Insert[#1, n, i], (-1)^(n + i) #2}, {i, n}] &amp; @@@ <br/>   perms[n - 1], 1];</pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\"># iterative Boothroyd method<br/>iterator permutations*[T](ys: openarray[T]): tuple[perm: seq[T], sign: int] =<br/>  var<br/>    d = 1<br/>    c = newSeq[int](ys.len)<br/>    xs = newSeq[T](ys.len)<br/>    sign = 1<br/>\u00a0<br/>  for i, y in ys: xs[i] = y<br/>  yield (xs, sign)<br/>\u00a0<br/>  block outter:<br/>    while true:<br/>      while d &gt; 1:<br/>        dec d<br/>        c[d] = 0<br/>      while c[d] &gt;= d:<br/>        inc d<br/>        if d &gt;= ys.len: break outter<br/>\u00a0<br/>      let i = if (d and 1) == 1: c[d] else: 0<br/>      swap xs[i], xs[d]<br/>      sign *= -1<br/>      yield (xs, sign)<br/>      inc c[d]<br/>\u00a0<br/>if isMainModule:<br/>  for i in permutations([0,1,2]):<br/>    echo i<br/>\u00a0<br/>  echo \"\"<br/>\u00a0<br/>  for i in permutations([0,1,2,3]):<br/>    echo i</pre>"}, {"lang": "Perl", "loc": 61, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># This code uses \"Even's Speedup,\" as described on</span><br/><span class=\"co1\"># the Wikipedia page about the Steinhaus\u2013Johnson\u2013</span><br/><span class=\"co1\"># Trotter algorithm.</span><br/>\u00a0<br/><span class=\"co1\"># Any resemblance between this code and the Python</span><br/><span class=\"co1\"># code elsewhere on the page is purely a coincidence,</span><br/><span class=\"co1\"># caused by them both implementing the same algorithm.</span><br/>\u00a0<br/><span class=\"co1\"># The code was written to be read relatively easily</span><br/><span class=\"co1\"># while demonstrating some common perl idioms.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> perms<span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$callback</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">@perm</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$sign</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$callback</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$sign</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@perm</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$sign</span> <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$chosen</span><span class=\"sy0\">,</span> <span class=\"re0\">$index</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#perm</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"br0\">(</span><span class=\"re0\">$chosen</span><span class=\"sy0\">,</span> <span class=\"re0\">$index</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">if</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$chosen</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$index</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$direction</span> <span class=\"sy0\">=</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <span class=\"re0\">$index</span> <span class=\"sy0\">+</span> <span class=\"re0\">$direction</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"re0\">@perm</span><span class=\"br0\">[</span> <span class=\"re0\">$index</span><span class=\"sy0\">,</span> <span class=\"re0\">$next</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@perm</span><span class=\"br0\">[</span> <span class=\"re0\">$next</span><span class=\"sy0\">,</span> <span class=\"re0\">$index</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$next</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"re0\">$next</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$#perm</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$next</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">elsif</span><span class=\"br0\">(</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$next</span> <span class=\"sy0\">+</span> <span class=\"re0\">$direction</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$chosen</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$next</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$next</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$chosen</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"re0\">$next</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#perm</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$perm</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$chosen</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>perms <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$sign</span><span class=\"sy0\">,</span> <span class=\"re0\">@perm</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"[\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@perm</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"]\"</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$sign</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" =&gt; -1<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" =&gt; +1<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>   <br/><span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> insert<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">@xs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>flat <span class=\"re0\">@xs</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">@xs</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"sy0\">+</span><span class=\"re0\">@xs</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> order<span class=\"br0\">(</span><span class=\"re0\">$sg</span><span class=\"sy0\">,</span> <span class=\"re0\">@xs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$sg</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">??</span> <span class=\"re0\">@xs</span> <span class=\"sy0\">!!</span> <span class=\"re0\">@xs</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> perms<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> perms<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@xs</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    perms<span class=\"br0\">(</span><span class=\"re0\">@xs</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>order<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">,</span> insert<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">Z</span><span class=\"sy0\">=&gt;</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> perms<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function spermutations(integer p, integer i)<br/>-- generate the i'th permutation of [1..p]:<br/>-- first obtain the appropriate permutation of [1..p-1],<br/>-- then insert p/move it down k(=0..p-1) places from the end.<br/>    integer k = mod(i-1,2*p)<br/>    if k&gt;=p then k=2*p-1-k  end if<br/>    sequence res<br/>    integer parity<br/>    if p&gt;1 then<br/>        {res,parity} = spermutations(p-1,floor((i-1)/p)+1)<br/>        res = res[1..length(res)-k]&amp;p&amp;res[length(res)-k+1..$]<br/>    else<br/>        res = {1}<br/>    end if<br/>    return {res,iff(and_bits(i,1)?1:-1)}<br/>end function<br/>\u00a0<br/>for p=1 to 4 do<br/>    printf(1,\"==%d==\\n\",p)<br/>    for i=1 to factorial(p) do<br/>       \u00a0?{i,spermutations(p,i)}<br/>    end for<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 42, "block": "<pre class=\"text highlighted_source\">(let<br/>   (N 4<br/>      L<br/>      (mapcar<br/>         '((I) (list I 0))<br/>         (range 1 N) ) )<br/>   (for I L<br/>      (printsp (car I)) )<br/>   (prinl)<br/>   (while<br/>      # find the lagest mobile integer<br/>      (setq<br/>         X<br/>         (maxi<br/>            '((I) (car (get L (car I))))<br/>            (extract<br/>               '((I J)<br/>                  (let? Y<br/>                     (get<br/>                        L<br/>                        ((if (=0 (cadr I)) dec inc) J) )<br/>                     (when (&gt; (car I) (car Y))<br/>                        (list J (cadr I)) ) ) )<br/>               L<br/>               (range 1 N) ) )<br/>         Y (get L (car X)) )<br/>      # swap integer and adjacent int it is looking at<br/>      (xchg<br/>         (nth L (car X))<br/>         (nth<br/>            L<br/>            ((if (=0 (cadr X)) dec inc) (car X)) ) )<br/>      # reverse direction of all ints large than our<br/>      (for I L<br/>         (when (&lt; (car Y) (car I))<br/>            (set (cdr I)<br/>               (if (=0 (cadr I)) 1 0) ) ) )<br/>      # print current positions<br/>      (for I L<br/>         (printsp (car I)) )<br/>      (prinl) ) )<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 44, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> permutation <span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> sign<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span>.Count<br/>        <span class=\"re0\">$sign</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$size</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$size</span>\u00a0; <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$sign</span> <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$sign</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">function</span> generate<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"sy0\">,</span> <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span><span class=\"sy0\">,</span> <span class=\"re0\">$cnt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$cnt</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"$A -- swapped positions: $i1 $i2 -- sign = $(sign $A)<span class=\"es0\">`n</span>\"</span><br/>            <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"$A -- sign = $(sign $A)<span class=\"es0\">`n</span>\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span><span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i1</span> <span class=\"re0\">$i2</span> <span class=\"re0\">$cnt</span><br/>                <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i1</span> <span class=\"re0\">$i2</span> <span class=\"re0\">$cnt</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$array</span>.Count<br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>generate <span class=\"re0\">$n</span> <span class=\"re0\">$array</span>  <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$array</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>permutation <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 60, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> itemgetter<br/>\u00a0<br/>DEBUG <span class=\"sy0\">=</span> <span class=\"kw2\">False</span> <span class=\"co1\"># like the built-in __debug__</span><br/>\u00a0<br/><span class=\"kw1\">def</span> spermutations<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"permutations by swapping. Yields: perm, sign\"\"\"</span><br/>    sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    p <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\"># [num, direction]</span><br/>         <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> DEBUG: <span class=\"kw1\">print</span> <span class=\"st0\">' #'</span><span class=\"sy0\">,</span> p<br/>    <span class=\"kw1\">yield</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>pp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> pp <span class=\"kw1\">in</span> p<span class=\"br0\">)</span><span class=\"sy0\">,</span> sign<br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>pp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> pp <span class=\"kw1\">in</span> p<span class=\"br0\">)</span>: <span class=\"co1\"># moving</span><br/>        i1<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n1<span class=\"sy0\">,</span> d1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> pp<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> pp <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">if</span> pp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                           key<span class=\"sy0\">=</span>itemgetter<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sign *<span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> d1 <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span>:<br/>            <span class=\"co1\"># Swap down</span><br/>            i2 <span class=\"sy0\">=</span> i1 - <span class=\"nu0\">1</span><br/>            p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><br/>            <span class=\"co1\"># If this causes the chosen element to reach the First or last</span><br/>            <span class=\"co1\"># position within the permutation, or if the next element in the</span><br/>            <span class=\"co1\"># same direction is larger than the chosen element:</span><br/>            <span class=\"kw1\">if</span> i2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> p<span class=\"br0\">[</span>i2 - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> n1:<br/>                <span class=\"co1\"># The direction of the chosen element is set to zero</span><br/>                p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">elif</span> d1 <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"co1\"># Swap up</span><br/>            i2 <span class=\"sy0\">=</span> i1 + <span class=\"nu0\">1</span><br/>            p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><br/>            <span class=\"co1\"># If this causes the chosen element to reach the first or Last</span><br/>            <span class=\"co1\"># position within the permutation, or if the next element in the</span><br/>            <span class=\"co1\"># same direction is larger than the chosen element:</span><br/>            <span class=\"kw1\">if</span> i2 <span class=\"sy0\">==</span> n - <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> p<span class=\"br0\">[</span>i2 + <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> n1:<br/>                <span class=\"co1\"># The direction of the chosen element is set to zero</span><br/>                p<span class=\"br0\">[</span>i2<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> DEBUG: <span class=\"kw1\">print</span> <span class=\"st0\">' #'</span><span class=\"sy0\">,</span> p<br/>        <span class=\"kw1\">yield</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>pp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> pp <span class=\"kw1\">in</span> p<span class=\"br0\">)</span><span class=\"sy0\">,</span> sign<br/>\u00a0<br/>        <span class=\"kw1\">for</span> i3<span class=\"sy0\">,</span> pp <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>            n3<span class=\"sy0\">,</span> d3 <span class=\"sy0\">=</span> pp<br/>            <span class=\"kw1\">if</span> n3 <span class=\"sy0\">&gt;</span> n1:<br/>                pp<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> i3 <span class=\"sy0\">&lt;</span> i2 <span class=\"kw1\">else</span> -<span class=\"nu0\">1</span><br/>                <span class=\"kw1\">if</span> DEBUG: <span class=\"kw1\">print</span> <span class=\"st0\">' # Set Moving'</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/>\u00a0<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>Permutations and sign of\u00a0%i items'</span>\u00a0% n<br/>        sp <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> spermutations<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>            sp.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Perm:\u00a0%r Sign:\u00a0%2i'</span>\u00a0% i<span class=\"br0\">)</span><br/>            <span class=\"co1\">#if DEBUG: raw_input('?')</span><br/>        <span class=\"co1\"># Test</span><br/>        p <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>permutations<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">assert</span> sp <span class=\"sy0\">==</span> p<span class=\"sy0\">,</span> <span class=\"st0\">'Two methods of generating permutations do not agree'</span></pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (add-at l i x)<br/>  (if (zero? i) (cons x l) (cons (car l) (add-at (cdr l) (sub1 i) x))))<br/>\u00a0<br/>(define (permutations l)<br/>  (define (loop l)<br/>    (cond [(null? l) '(())]<br/>          [else (for*/list ([(p i) (in-indexed (loop (cdr l)))]<br/>                            [i ((if (odd? i) identity reverse)<br/>                                (range (add1 (length p))))])<br/>                  (add-at p i (car l)))]))<br/>  (for/list ([p (loop (reverse l))] [i (in-cycle '(1 -1))]) (cons i p)))<br/>\u00a0<br/>(define (show-permutations l)<br/>  (printf \"Permutations of ~s:\\n\" l)<br/>  (for ([p (permutations l)])<br/>    (printf \"  ~a (~a)\\n\" (apply ~a (add-between (cdr p) \", \")) (car p))))<br/>\u00a0<br/>(for ([n (in-range 3 5)]) (show-permutations (range n)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates all  permutations  of   N   different objects by  swapping.   */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> things bunch <span class=\"sy0\">.</span>                         <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> things==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> things==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> things=<span class=\"nu0\">4</span>       <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> bunch ==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> bunch ==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> bunch =things  <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">call</span> permSets things, bunch                      <span class=\"coMULTI\">/*invoke permutations by swapping sub. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!:        <span class=\"kw1\">procedure</span>; \u00a0!=<span class=\"nu0\">1</span>;        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   \u00a0!=!<span class=\"sy0\">*</span>j;     <span class=\"kw3\">end</span>;           <span class=\"kw1\">return</span>\u00a0!<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>permSets: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y               <span class=\"coMULTI\">/*take   X  things   Y   at a time.    */</span><br/>         \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;      pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, x<span class=\"sy0\">*</span>y<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*X can't be &gt; length of below str (62)*/</span><br/>          z=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>, x<span class=\"br0\">)</span>;  q=z<br/>          #=<span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*the number of permutations  (so far).*/</span><br/>         \u00a0!<span class=\"sy0\">.</span>z=<span class=\"nu0\">1</span>;    s=<span class=\"nu0\">1</span>;   times=!<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\u00a0%\u00a0!<span class=\"br0\">(</span>x-y<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*calculate (#) TIMES  using factorial.*/</span><br/>          w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"st0\">'permute'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*maximum width of  Z and also PERMUTE.*/</span><br/>          <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'permutations for '</span>   x   <span class=\"st0\">' things taken '</span>   y   <span class=\"st0\">\" at a time\"</span>,<span class=\"nu0\">60</span>,<span class=\"st0\">'\u2550'</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">say</span><br/>          <span class=\"kw1\">say</span>   pad    <span class=\"st0\">'permutation'</span>       <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"permute\"</span>, w, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>         <span class=\"st0\">\"sign\"</span><br/>          <span class=\"kw1\">say</span>   pad    <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500'</span>       <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\"</span>, w, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>         <span class=\"st0\">\"\u2500\u2500\u2500\u2500\"</span><br/>          <span class=\"kw1\">say</span>   pad    <span class=\"kw6\">center</span><span class=\"br0\">(</span>#, <span class=\"nu0\">11</span><span class=\"br0\">)</span>       <span class=\"kw6\">center</span><span class=\"br0\">(</span>z        , w<span class=\"br0\">)</span>              <span class=\"kw6\">right</span><span class=\"br0\">(</span>s, <span class=\"nu0\">4</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>             <span class=\"kw1\">do</span> $=<span class=\"nu0\">1</span>   <span class=\"kw2\">until</span>  #==times            <span class=\"coMULTI\">/*perform permutation until # of times.*/</span><br/>               <span class=\"kw1\">do</span>   k=<span class=\"nu0\">1</span>    <span class=\"kw2\">for</span> x-<span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*step thru things for  things-1 times.*/</span><br/>                 <span class=\"kw1\">do</span> m=k+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span>  x;     \u00a0?=        <span class=\"coMULTI\">/*this method doesn't use  adjacency.  */</span><br/>                     <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x               <span class=\"coMULTI\">/*build the new permutation by swapping*/</span><br/>                     <span class=\"kw1\">if</span> n<span class=\"sy0\">\\</span>==k <span class=\"sy0\">&amp;</span> n<span class=\"sy0\">\\</span>==m  <span class=\"kw3\">then</span>              \u00a0? = \u00a0?  <span class=\"sy0\">||</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>z, n, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                       <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> n==k  <span class=\"kw3\">then</span>\u00a0? = \u00a0?  <span class=\"sy0\">||</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>z, m, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                                     <span class=\"kw3\">else</span>\u00a0? = \u00a0?  <span class=\"sy0\">||</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>z, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>                 z=?                             <span class=\"coMULTI\">/*save this permutation for next swap. */</span><br/>                 <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>?  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> m          <span class=\"coMULTI\">/*if defined before, then try next one.*/</span><br/>                 _=<span class=\"nu0\">0</span>                             <span class=\"coMULTI\">/* [\u2193]  count number of swapped symbols*/</span><br/>                    <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x  <span class=\"kw2\">while</span> $<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>;  _= _ + <span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>?,d,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"kw6\">substr</span><span class=\"br0\">(</span>prev,d,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*d*/</span><br/>                 <span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;        _=z<br/>                              a=$<span class=\"sy0\">//</span>x+<span class=\"nu0\">1</span>;  q=q + _ <span class=\"coMULTI\">/* [\u2190 \u2193]  this swapping tries adjacency*/</span><br/>                              b=q<span class=\"sy0\">//</span>x+<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> b==a  <span class=\"kw3\">then</span> b=a + <span class=\"nu0\">1</span>;       <span class=\"kw1\">if</span> b<span class=\"sy0\">&gt;</span>x  <span class=\"kw3\">then</span> b=a - <span class=\"nu0\">1</span><br/>                              z=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>z,b,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw6\">overlay</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>z,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, _, b<span class=\"br0\">)</span>,  a<span class=\"br0\">)</span><br/>                              <span class=\"kw1\">iterate</span> $          <span class=\"coMULTI\">/*now, try this particular permutation.*/</span><br/>                              <span class=\"kw3\">end</span><br/>                 #=#+<span class=\"nu0\">1</span>;  s= -s;   <span class=\"kw1\">say</span> pad   <span class=\"kw6\">center</span><span class=\"br0\">(</span>#, <span class=\"nu0\">11</span><span class=\"br0\">)</span>    <span class=\"kw6\">center</span><span class=\"br0\">(</span>?, w<span class=\"br0\">)</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>s, <span class=\"nu0\">4</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                \u00a0!<span class=\"sy0\">.</span>?=<span class=\"nu0\">1</span>;  prev=?;      <span class=\"kw1\">iterate</span> $  <span class=\"coMULTI\">/*now, try another swapped permutation.*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/>               <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*k*/</span><br/>             <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*$*/</span><br/>          <span class=\"kw1\">return</span>                                 <span class=\"coMULTI\">/*we're all finished with permutating. */</span></pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> perms<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">p</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"sy0\">-</span>i<span class=\"br0\">}</span><br/>  s = <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">yield</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:abs<span class=\"br0\">)</span>, s<br/>    k = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">2</span>..<span class=\"me1\">n</span><br/>      k = i <span class=\"kw1\">if</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"kw1\">and</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">abs</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>...<span class=\"me1\">n</span><br/>      k = i <span class=\"kw1\">if</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"kw1\">and</span>  <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">abs</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> k.<span class=\"me1\">zero</span>?<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><br/>      <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span>= <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">abs</span><br/>    <span class=\"kw1\">end</span><br/>    i = k <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span>, <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw3\">p</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"kw3\">p</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>    s = <span class=\"sy0\">-</span>s<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">3</span>..<span class=\"nu0\">4</span><br/>  perms<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>perm, sign<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"Perm: #{perm}  Sign: #{sign}\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> JohnsonTrotter <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> perm<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">// permutation</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pi <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">// inverse permutation</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dir <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">// direction = +1 or -1</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> perm<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, p<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, pi<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, dir<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> p.<span class=\"me1\">length</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>aP <span class=\"sy0\">&lt;</span>- p<span class=\"br0\">)</span> print<span class=\"br0\">(</span>aP<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        perm<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>, p, pi, dir<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// swap</span><br/>          printf<span class=\"br0\">(</span><span class=\"st0\">\"   (%d\u00a0%d)<span class=\"es1\">\\n</span>\"</span>, pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> z <span class=\"sy0\">=</span> p<span class=\"br0\">(</span>pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          p<span class=\"br0\">(</span>pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> z<br/>          p<span class=\"br0\">(</span>pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>          pi<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>          pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>          perm<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>, p, pi, dir<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> -dir<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dir<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>      p<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>      pi<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>    perm<span class=\"br0\">(</span><span class=\"nu0\">0</span>, p, pi, dir<span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"   (0 1)<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  perm<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\">func perms<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   var perms = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      var sign = <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      perms = gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> s,<span class=\"sy0\">*</span><span class=\"kw3\">p</span> <span class=\"kw1\">in</span> perms <span class=\"br0\">{</span><br/>          var r = <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"kw3\">p</span>.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>          take<span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>\u00a0? r\u00a0: r.<span class=\"me1\">flip</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>            <span class=\"br0\">[</span>sign <span class=\"sy0\">*</span>= <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"kw3\">p</span><span class=\"br0\">[</span>^i<span class=\"br0\">]</span>, x, <span class=\"kw3\">p</span><span class=\"br0\">[</span>i..<span class=\"kw3\">p</span>.<span class=\"kw1\">end</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   perms<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var n = <span class=\"nu0\">4</span><br/><span class=\"kw1\">for</span> <span class=\"kw3\">p</span> <span class=\"kw1\">in</span> perms<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var s = <span class=\"kw3\">p</span>.<span class=\"me1\">shift</span><br/>    s <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>s = <span class=\"st0\">'+1'</span><span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"#{p} =&gt; #{s}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 50, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># A simple swap operation</span><br/><span class=\"kw1\">proc</span> swap <span class=\"br0\">{</span>listvar i1 i2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$listvar</span> l<br/>    <span class=\"kw1\">set</span> tmp <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> l <span class=\"re0\">$i1</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"re0\">$i2</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> l <span class=\"re0\">$i2</span> <span class=\"re0\">$tmp</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> permswap <span class=\"br0\">{</span>n v1 v2 body<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$v1</span> perm <span class=\"re0\">$v2</span> sign<br/>\u00a0<br/>    <span class=\"co1\"># Initialize</span><br/>    <span class=\"kw1\">set</span> sign -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> items <span class=\"re0\">$i</span><br/>\t<span class=\"kw2\">lappend</span> dirs -<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Report via callback</span><br/>\t<span class=\"kw1\">set</span> perm <span class=\"re0\">$items</span><br/>\t<span class=\"kw1\">set</span> sign <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$sign</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$body</span><br/>\u00a0<br/>\t<span class=\"co1\"># Find the largest mobile integer (lmi) and its index (idx)</span><br/>\t<span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">set</span> idx -<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">foreach</span> item <span class=\"re0\">$items</span> dir <span class=\"re0\">$dirs</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> + <span class=\"re0\">$dir</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$items</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$item</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$items</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$idx</span> == -<span class=\"nu0\">1</span> || <span class=\"re0\">$item</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$lmi</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> lmi <span class=\"re0\">$item</span><br/>\t\t<span class=\"kw1\">set</span> idx <span class=\"re0\">$i</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># If none, we're done</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\u00a0<br/>\t<span class=\"co1\"># Swap the largest mobile integer with \"what it is looking at\"</span><br/>\t<span class=\"kw1\">set</span> nextIdx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> + <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$dirs</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\tswap items <span class=\"re0\">$idx</span> <span class=\"re0\">$nextIdx</span><br/>\tswap dirs <span class=\"re0\">$idx</span> <span class=\"re0\">$nextIdx</span><br/>\u00a0<br/>\t<span class=\"co1\"># Reverse directions on larger integers</span><br/>\t<span class=\"kw1\">set</span> i -<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">foreach</span> item <span class=\"re0\">$items</span> dir <span class=\"re0\">$dirs</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> dirs <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$item</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$lmi</span> <span class=\"sy0\">?</span> -<span class=\"re0\">$dir</span>\u00a0: <span class=\"re0\">$dir</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XPL0", "loc": 36, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc PERMS(N);<br/>int  N;                         \\number of elements<br/>int  I, K, S, T, P;<br/>[P:= Reserve((N+1)*4);<br/>for I:= 0 to N do P(I):= -I;    \\initialize facing left (also set P(0)=0)<br/>S:= 1;<br/>repeat  Text(0, \"Perm: [ \");<br/>        for I:= 1 to N do<br/>                [IntOut(0, abs(P(I)));  ChOut(0, ^ )];<br/>        Text(0, \"] Sign: \");  IntOut(0, S);  CrLf(0);<br/>\u00a0<br/>        K:= 0;                  \\find largest mobile element<br/>        for I:= 2 to N do                         \\for left-facing elements<br/>            if P(I) &lt; 0 and<br/>                abs(P(I)) &gt; abs(P(I-1)) and       \\ greater than neighbor<br/>                abs(P(I)) &gt; abs(P(K)) then K:= I; \\ get largest element<br/>        for I:= 1 to N-1 do                       \\for right-facing elements<br/>            if P(I) &gt; 0 and<br/>                abs(P(I)) &gt; abs(P(I+1)) and       \\ greater than neighbor<br/>                abs(P(I)) &gt; abs(P(K)) then K:= I; \\ get largest element<br/>        if K # 0 then           \\mobile element found<br/>           [for I:= 1 to N do   \\reverse elements &gt; K<br/>                if abs(P(I)) &gt; abs(P(K)) then P(I):= P(I)*-1;<br/>            I:= K + (if P(K)&lt;0 then -1 else 1);<br/>            T:= P(K);  P(K):= P(I);  P(I):= T;    \\swap K with element looked at<br/>            S:= -S;             \\alternate signs<br/>            ];<br/>until   K = 0;                  \\no mobile element remains<br/>];<br/>\u00a0<br/>[PERMS(3);<br/>CrLf(0);<br/>PERMS(4);<br/>]</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">fcn permute(seq)<br/>{<br/>   insertEverywhere\u00a0:= fcn(x,list){ //(x,(a,b))--&gt;((x,a,b),(a,x,b),(a,b,x))<br/>      (0).pump(list.len()+1,List,'wrap(n){list[0,n].extend(x,list[n,*]) })};<br/>   insertEverywhereB\u00a0:= fcn(x,t){ //--&gt; insertEverywhere().reverse()<br/>      [t.len()..-1,-1].pump(t.len()+1,List,'wrap(n){t[0,n].extend(x,t[n,*])})};<br/>\u00a0<br/>   seq.reduce('wrap(items,x){<br/>      f\u00a0:= Utils.Helpers.cycle(insertEverywhereB,insertEverywhere);<br/>      items.pump(List,'wrap(item){f.next()(x,item)},<br/>\t      T.fp(Void.Write,Void.Write));<br/>   },T(T));<br/>}</pre>"}]}