{"task": "Validate_International_Securities_Identification_Number", "blocks": [{"lang": "Ada", "loc": 74, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">procedure</span> ISIN <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- Luhn_Test copied from other Task</span><br/>   <span class=\"kw3\">function</span> Luhn_Test <span class=\"br0\">(</span>Number: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Sum \u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      Odd \u00a0: Boolean\u00a0:= True;<br/>      Digit: Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">9</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> p <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> Number'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Digit\u00a0:= Integer'Value <span class=\"br0\">(</span>Number <span class=\"br0\">(</span>p..<span class=\"me1\">p</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Odd <span class=\"kw1\">then</span><br/>            Sum\u00a0:= Sum + Digit;<br/>         <span class=\"kw1\">else</span><br/>            Sum\u00a0:= Sum + <span class=\"br0\">(</span>Digit*<span class=\"nu0\">2</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span>Digit / <span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Odd\u00a0:= <span class=\"kw2\">not</span> Odd;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Sum <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">end</span> Luhn_Test;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Decimal   <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> '<span class=\"nu0\">0</span>' .. '<span class=\"nu0\">9</span>';<br/>   <span class=\"kw3\">subtype</span> Letter    <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'A' .. 'Z';<br/>   <span class=\"kw3\">subtype</span> ISIN_Type <span class=\"kw1\">is</span> String<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">12</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- converts a string of decimals and letters into a string of decimals</span><br/>   <span class=\"kw3\">function</span> To_Digits<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- Character'Pos('A')-Offset=10, Character'Pos('B')-Offset=11, ...</span><br/>      Offset: <span class=\"kw3\">constant</span> Integer\u00a0:= Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span>-<span class=\"nu0\">10</span>;<br/>\u00a0<br/>      Invalid_Character: <span class=\"kw1\">exception</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> S = <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>;<br/>      <span class=\"kw1\">elsif</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span> <span class=\"co1\">-- skip blanks</span><br/>         <span class=\"kw1\">return</span> To_Digits<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>; <br/>      <span class=\"kw1\">elsif</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> <span class=\"kw3\">in</span> Decimal <span class=\"kw1\">then</span> <br/>         <span class=\"kw1\">return</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &amp; To_Digits<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">elsif</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> <span class=\"kw3\">in</span> Letter <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> To_Digits<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span><span class=\"br0\">)</span>-Offset<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           &amp; To_Digits<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span> <br/>         <span class=\"kw3\">raise</span> Invalid_Character;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> To_Digits;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Valid_ISIN<span class=\"br0\">(</span>S: ISIN_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Number\u00a0: String\u00a0:= To_Digits<span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span>   <span class=\"kw3\">in</span> Letter  <span class=\"kw2\">and</span><br/>             S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">in</span> Letter  <span class=\"kw2\">and</span><br/>             S<span class=\"br0\">(</span>S'Last<span class=\"br0\">)</span>    <span class=\"kw3\">in</span> Decimal <span class=\"kw2\">and</span><br/>             Luhn_Test<span class=\"br0\">(</span>Number<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Is_Valid_ISIN;<br/>\u00a0<br/>   Test_Cases\u00a0: <span class=\"kw3\">constant</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> ISIN_Type\u00a0:=<br/>      <span class=\"br0\">(</span><span class=\"st0\">\"US0378331005\"</span>,<br/>       <span class=\"st0\">\"US0373831005\"</span>,<br/>       <span class=\"st0\">\"U50378331005\"</span>,<br/>       <span class=\"co1\">-- excluded by type with fixed length</span><br/>       <span class=\"co1\">-- \"US03378331005\",</span><br/>       <span class=\"st0\">\"AU0000XVGZA3\"</span>,<br/>       <span class=\"st0\">\"AU0000VXGZA3\"</span>,<br/>       <span class=\"st0\">\"FR0000988040\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Test_Cases'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Test_Cases<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\":\"</span> &amp;<br/>        Boolean'Image<span class=\"br0\">(</span>Is_Valid_ISIN<span class=\"br0\">(</span>Test_Cases<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"co1\">-- using wrong length will result in an exception:</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"US03378331005:\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Boolean'Image<span class=\"br0\">(</span>Is_Valid_Isin<span class=\"br0\">(</span><span class=\"st0\">\"US03378331005\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Exception occured\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> ISIN;</pre>"}, {"lang": "ALGOL W", "loc": 75, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% external procedure that returns true if ccNumber passes the Luhn test, false otherwise\u00a0%<br/>    logical procedure LuhnTest ( string(32) value ccNumber<br/>                              \u00a0; integer    value ccLength<br/>                               )\u00a0; algol \"LUHN\"\u00a0;<br/>\u00a0<br/>   \u00a0% returns true if isin is a valid ISIN, false otherwise   \u00a0%<br/>    logical procedure isIsin ( string(32) value isin )\u00a0;<br/>        if isin( 12 // 20 ) not = \"\" then false\u00a0% code is too long\u00a0%<br/>        else begin<br/>           \u00a0% the first two characters must be upper-case letters\u00a0%<br/>\u00a0<br/>           \u00a0% returns the digit corresponding to a character of an ISIN\u00a0%<br/>            integer procedure isinDigit ( string(1) value iChar )\u00a0;<br/>                if      iChar &gt;= \"0\" and iChar &lt;= \"9\" then ( decode( iChar ) - decode( \"0\" ) )<br/>                else if iChar &gt;= \"A\" and iChar &lt;= \"Z\" then ( decode( iChar ) - decode( \"A\" ) ) + 10<br/>                else begin\u00a0% invalid digit\u00a0%<br/>                    isValid\u00a0:= false;<br/>                    -1<br/>                end isinDigit\u00a0;<br/>\u00a0<br/>            integer d1, d2;<br/>            logical isValid;<br/>            isValid\u00a0:= true;<br/>            d1     \u00a0:= isinDigit( isin( 0 // 1 ) );<br/>            d2     \u00a0:= isinDigit( isin( 1 // 1 ) );<br/>            if d1 &lt; 10 or d1 &gt; 35 or d2 &lt; 10 or d2 &gt; 35 then false\u00a0% invalid first two characters\u00a0%<br/>            else begin<br/>               \u00a0% ok so far - conveet from base 36 to base 10\u00a0%<br/>                string(24) base10Isin;<br/>                integer    b10Pos;<br/>                base10Isin\u00a0:= \"\";<br/>                b10Pos    \u00a0:= 0;<br/>                for cPos\u00a0:= 0 until 10 do begin<br/>                    integer digit;<br/>                    digit\u00a0:= isinDigit( isin( cPos // 1 ) );<br/>                    if isValid then begin<br/>                       \u00a0% valid digit\u00a0%<br/>                        if digit &gt; 9 then begin<br/>                            base10Isin( b10Pos // 1 )\u00a0:= code( ( digit div 10 ) + decode( \"0\" ) );<br/>                            b10Pos                   \u00a0:= b10Pos + 1;<br/>                        end if_digit_gt_9\u00a0;<br/>                        base10Isin( b10Pos // 1 )    \u00a0:= code( ( digit rem 10 ) + decode( \"0\" ) );<br/>                        b10Pos                       \u00a0:= b10Pos + 1<br/>                    end if_isValid<br/>                end for_cPos\u00a0;<br/>               \u00a0% add the check digit as is\u00a0%<br/>                base10Isin( b10Pos // 1 )\u00a0:= isin( 11 // 1 );<br/>                isValid and LuhnTest( base10Isin, b10Pos + 1 )<br/>            end<br/>        end isIsin\u00a0;<br/>\u00a0<br/>   \u00a0% task test cases\u00a0%<br/>\u00a0<br/>    procedure testIsIsin ( string(32) value isin<br/>                        \u00a0; logical    value expected<br/>                         )\u00a0;<br/>    begin<br/>        logical isValid;<br/>        isValid\u00a0:= isIsin( isin );<br/>        write( s_w\u00a0:= 0<br/>             , isin<br/>             , if isValid then \" is valid\" else \" is invalid\"<br/>             , if isValid = expected   then \"\" else \" NOT as expected\u00a0??\"<br/>             )<br/>    end testIsin\u00a0;<br/>\u00a0<br/>    testIsIsin( \"US0378331005\",  true  );<br/>    testIsIsin( \"US0373831005\",\t false );<br/>    testIsIsin( \"U50378331005\",  false );<br/>    testIsIsin( \"US03378331005\", false );<br/>    testIsIsin( \"AU0000XVGZA3\",\t true  );<br/>    testIsIsin( \"AU0000VXGZA3\",\t true  );<br/>    testIsIsin( \"FR0000988040\",\t true  );<br/>end.</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> check_isin<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        k <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            s<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>k <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            k <span class=\"sy0\">-=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            s<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            s<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    v <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        v <span class=\"sy0\">+=</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">?</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">9</span> <span class=\"sy0\">:</span> k<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v <span class=\"sy0\">+=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>test<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"US0378331005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"US0373831005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"U50378331005\"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"US03378331005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AU0000XVGZA3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AU0000VXGZA3\"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"FR0000988040\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c%c\"</span><span class=\"sy0\">,</span> check_isin<span class=\"br0\">(</span>test<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'T'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'F'</span><span class=\"sy0\">,</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">6</span> <span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* will print: T F F F T T T */</span></pre>"}, {"lang": "C++", "loc": 62, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;regex&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> CheckFormat<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> isin<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">regex</span> isinRegEpx<span class=\"br0\">(</span>R<span class=\"st0\">\"([A-Z]{2}[A-Z0-9]{9}[0-9])\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">smatch</span> match<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">regex_match</span><span class=\"br0\">(</span>isin, match, isinRegEpx<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> CodeISIN<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> isin<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> coded<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> offset <span class=\"sy1\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy2\">-</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> ch <span class=\"sy4\">:</span> isin<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&amp;&amp;</span> ch <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tstd<span class=\"sy4\">::</span><span class=\"me2\">stringstream</span> ss<span class=\"sy4\">;</span><br/>\t\t\tss <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"sy2\">-</span> offset<span class=\"sy4\">;</span><br/>\t\t\tcoded <span class=\"sy2\">+</span><span class=\"sy1\">=</span> ss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tcoded.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">move</span><span class=\"br0\">(</span>coded<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> CkeckISIN<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> isin<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>CheckFormat<span class=\"br0\">(</span>isin<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> coded <span class=\"sy1\">=</span> CodeISIN<span class=\"br0\">(</span>isin<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"co1\">// from http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers#C.2B.2B11</span><br/>\t<span class=\"kw1\">return</span> luhn<span class=\"br0\">(</span>coded<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> isins<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"US0378331005\"</span>, <span class=\"st0\">\"US0373831005\"</span>, <span class=\"st0\">\"U50378331005\"</span>,<br/>\t\t\t\t\t\t\t<span class=\"st0\">\"US03378331005\"</span>, <span class=\"st0\">\"AU0000XVGZA3\"</span>, <span class=\"st0\">\"AU0000VXGZA3\"</span>,<br/>\t\t\t\t\t\t\t<span class=\"st0\">\"FR0000988040\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> isin <span class=\"sy4\">:</span> isins<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> isin <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" - \"</span> <span class=\"sy1\">&lt;&lt;</span> CkeckISIN<span class=\"br0\">(</span>isin<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 80, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text.RegularExpressions</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Validate_ISIN <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> DigitValue<span class=\"br0\">(</span><span class=\"kw4\">char</span> c, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Digit<span class=\"br0\">(</span><span class=\"kw4\">char</span> c, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> DigitValue<span class=\"br0\">(</span>c, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">&gt;=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Error</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid Number\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> ISINtest<span class=\"br0\">(</span><span class=\"kw4\">string</span> isin<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            isin <span class=\"sy0\">=</span> isin<span class=\"sy0\">.</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Regex r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Regex<span class=\"br0\">(</span><span class=\"st0\">\"^[A-Z]{2}[A-Z0-9]{9}<span class=\"es0\">\\\\</span>d$\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"sy0\">.</span><span class=\"me1\">IsMatch</span><span class=\"br0\">(</span>isin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            StringBuilder sb <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> isin<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>Digit<span class=\"br0\">(</span>c, <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> LuhnTest<span class=\"br0\">(</span>sb<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> ReverseString<span class=\"br0\">(</span><span class=\"kw4\">string</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> intermediate <span class=\"sy0\">=</span> input<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Array<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span>intermediate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>intermediate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> LuhnTest<span class=\"br0\">(</span><span class=\"kw4\">string</span> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> s1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> s2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> reverse <span class=\"sy0\">=</span> ReverseString<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> reverse<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> Digit<span class=\"br0\">(</span>reverse<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\">//This is for odd digits, they are 1-indexed in the algorithm.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    s1 <span class=\"sy0\">+=</span> digit<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// Add 2 * digit for 0-4, add 2 * digit - 9 for 5-9.</span><br/>                    s2 <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> digit<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>digit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        s2 <span class=\"sy0\">-=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">+</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> isins <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"US0378331005\"</span>,<br/>                <span class=\"st0\">\"US0373831005\"</span>,<br/>                <span class=\"st0\">\"U50378331005\"</span>,<br/>                <span class=\"st0\">\"US03378331005\"</span>,<br/>                <span class=\"st0\">\"AU0000XVGZA3\"</span>,<br/>                <span class=\"st0\">\"AU0000VXGZA3\"</span>,<br/>                <span class=\"st0\">\"FR0000988040\"</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> isin <span class=\"kw1\">in</span> isins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} is {1}\"</span>, isin, ISINtest<span class=\"br0\">(</span>isin<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"valid\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not valid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 30, "block": "<pre class=\"text highlighted_source\">Class Utils.Check [ Abstract ]<br/>{<br/>\u00a0<br/>ClassMethod ISIN(x As\u00a0%String) As\u00a0%Boolean<br/>{<br/>\t// https://en.wikipedia.org/wiki/International_Securities_Identification_Number<br/>\tIF x'?2U9UN1N QUIT 0<br/>\tSET cd=$EXTRACT(x,*), x=$EXTRACT(x,1,*-1)<br/>\tFOR i=1:1 {<br/>\t\tSET n=$EXTRACT(x,i) IF n=\"\" QUIT<br/>\t\tIF n'=+n SET $EXTRACT(x,i)=$CASE(n,\"*\":36,\"@\":37,\"#\":38,:$ASCII(n)-55)<br/>\t}<br/>\t// call into luhn check, appending check digit<br/>\tQUIT ..Luhn(x_cd)<br/>}<br/>\u00a0<br/>ClassMethod Luhn(x As\u00a0%String) As\u00a0%Boolean<br/>{<br/>\t// https://www.simple-talk.com/sql/t-sql-programming/calculating-and-verifying-check-digits-in-t-sql/<br/>\tSET x=$TRANSLATE(x,\" \"), cd=$EXTRACT(x,*)<br/>\tSET x=$REVERSE($EXTRACT(x,1,*-1)), t=0<br/>\tFOR i=1:1:$LENGTH(x) {<br/>\t\tSET n=$EXTRACT(x,i)<br/>\t\tIF i#2 SET n=n*2 IF $LENGTH(n)&gt;1 SET n=$EXTRACT(n,1)+$EXTRACT(n,2)<br/>\t\tSET t=t+n<br/>\t}<br/>\tQUIT cd=((t*9)#10)<br/>}<br/>\u00a0<br/>}</pre>"}, {"lang": "COBOL", "loc": 173, "block": "<pre class=\"cobol highlighted_source\">        &gt;&gt;<span class=\"kw1\">SOURCE</span> FORMAT FREE<br/><span class=\"co1\">*&gt;   this is gnucobol 2.0</span><br/><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> callISINtest<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ISINtest-result binary-int<span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>start-callISINtest<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'US0378331005'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should not be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'US0373831005'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should not be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'U50378331005'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should not be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'US03378331005'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'AU0000XVGZA3'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'AU0000VXGZA3'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'should be valid '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'ISINtest'</span> <span class=\"kw3\">using</span> <span class=\"st0\">'FR0000988040'</span> ISINtest-result<br/>    <span class=\"kw2\">perform</span> display-ISINtest-result<br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>    <span class=\"sy0\">.</span><br/>display-ISINtest-result<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">evaluate</span> ISINtest-result<br/>    <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> <br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' is valid'</span><br/>    <span class=\"kw3\">when</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' invalid length '</span><br/>    <span class=\"kw3\">when</span> -<span class=\"nu0\">2</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' invalid countrycode '</span><br/>    <span class=\"kw3\">when</span> -<span class=\"nu0\">3</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' invalid base36 digit '</span><br/>    <span class=\"kw3\">when</span> -<span class=\"nu0\">4</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' luhn test failed'</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">' invalid return code '</span> ISINtest-result<br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> callISINtest<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> ISINtest<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  country-code-<span class=\"kw3\">values</span> <span class=\"kw3\">value</span><br/>    <span class=\"st0\">'ADAEAFAGAIALAMAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBS'</span><br/>&amp;   <span class=\"st0\">'BTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEE'</span><br/>&amp;   <span class=\"st0\">'EGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHM'</span><br/>&amp;   <span class=\"st0\">'HNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLC'</span><br/>&amp;   <span class=\"st0\">'LILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNA'</span><br/>&amp;   <span class=\"st0\">'NCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURW'</span><br/>&amp;   <span class=\"st0\">'SASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTO'</span><br/>&amp;   <span class=\"st0\">'TRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW'</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  country-codes <span class=\"kw3\">occurs</span> <span class=\"nu0\">249</span><br/>        <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> country-<span class=\"kw1\">code</span><br/>        <span class=\"kw3\">indexed</span> <span class=\"kw3\">by</span> cc-idx<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  country-<span class=\"kw1\">code</span> <span class=\"kw3\">pic</span> xx<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  b <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  base36-digits <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>    <span class=\"st0\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  i <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  p <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  luhn-<span class=\"kw3\">number</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  luhntest-result binary-int<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  test-<span class=\"kw3\">number</span> <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ISINtest-result binary-int<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> test-<span class=\"kw3\">number</span> ISINtest-result<span class=\"sy0\">.</span><br/>start-ISINtest<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> test-<span class=\"kw3\">number</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>\u00a0<br/>    *&gt; format <span class=\"kw3\">test</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">function</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">12</span><br/>        <span class=\"kw2\">move</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> ISINtest-result<br/>        goback<br/>    end-<span class=\"kw1\">if</span><br/>\u00a0<br/>    *&gt; countrycode <span class=\"kw3\">test</span><br/>    <span class=\"kw1\">search</span> <span class=\"kw3\">all</span> country-codes<br/>    <span class=\"kw3\">at</span> <span class=\"kw3\">end</span><br/>        <span class=\"kw2\">move</span> -<span class=\"nu0\">2</span> <span class=\"kw2\">to</span> ISINtest-result<br/>        goback<br/>    <span class=\"kw3\">when</span> test-<span class=\"kw3\">number</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> country-<span class=\"kw1\">code</span><span class=\"br0\">(</span>cc-idx<span class=\"br0\">)</span><br/>        <span class=\"kw2\">continue</span> <br/>    end-<span class=\"kw1\">search</span><br/>\u00a0<br/>    *&gt; convert each <span class=\"kw3\">character</span> <span class=\"kw3\">from</span> base <span class=\"nu0\">36</span> <span class=\"kw2\">to</span> base <span class=\"nu0\">10</span><br/>    *&gt; <span class=\"kw3\">and</span> <span class=\"kw2\">add</span> <span class=\"kw2\">to</span> the luhn-<span class=\"kw3\">number</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> p<br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> i &gt; <span class=\"nu0\">12</span><br/>        <span class=\"kw1\">if</span> test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw3\">and</span> &lt;<span class=\"sy0\">=</span> <span class=\"st0\">'9'</span><br/>            <span class=\"kw2\">move</span> test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> luhn-<span class=\"kw3\">number</span><span class=\"br0\">(</span>p<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> p<br/>        <span class=\"kw3\">else</span><br/>            <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> b <span class=\"kw3\">from</span> <span class=\"nu0\">9</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> b &gt; <span class=\"nu0\">35</span><br/>            <span class=\"kw3\">or</span> base36-digits<span class=\"br0\">(</span>b<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">continue</span><br/>            end-<span class=\"kw2\">perform</span><br/>            <span class=\"kw1\">if</span> b &gt; <span class=\"nu0\">35</span><br/>                 <span class=\"kw2\">move</span> -<span class=\"nu0\">3</span> <span class=\"kw2\">to</span> ISINtest-result<br/>                 goback<br/>            end-<span class=\"kw1\">if</span><br/>            <span class=\"kw2\">move</span> b <span class=\"kw2\">to</span> luhn-<span class=\"kw3\">number</span><span class=\"br0\">(</span>p<span class=\"sy0\"> + </span><span class=\"nu0\">1</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">add</span> <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> p<br/>        end-<span class=\"kw1\">if</span><br/>    end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>    <span class=\"kw2\">call</span> <span class=\"st0\">'luhntest'</span> <span class=\"kw3\">using</span> luhn-<span class=\"kw3\">number</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:p<span class=\"br0\">)</span> luhntest-result<br/>    <span class=\"kw1\">if</span> luhntest-result &lt;&gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> -<span class=\"nu0\">4</span> <span class=\"kw2\">to</span> ISINtest-result<br/>        goback<br/>    end-<span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> ISINtest-result<br/>    goback<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> ISINtest<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> luhntest<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  i <span class=\"kw3\">pic</span> S99<span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  check-<span class=\"kw4\">sum</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  test-<span class=\"kw3\">number</span> <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  luhntest-result binary-int<span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> test-<span class=\"kw3\">number</span> luhntest-result<span class=\"sy0\">.</span><br/>start-luhntest<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> test-<span class=\"kw3\">number</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> check-<span class=\"kw4\">sum</span><br/>\u00a0<br/>    *&gt; <span class=\"kw3\">right</span> <span class=\"kw2\">to</span> <span class=\"kw3\">left</span> <span class=\"kw4\">sum</span> the odd numbered digits<br/>    <span class=\"kw2\">compute</span> i <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> i <span class=\"kw3\">by</span> -<span class=\"nu0\">2</span> <span class=\"kw2\">until</span> i &lt; <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">add</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> check-<span class=\"kw4\">sum</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> check-<span class=\"kw4\">sum</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>\u00a0<br/>    *&gt; <span class=\"kw3\">right</span> <span class=\"kw2\">to</span> <span class=\"kw3\">left</span> double <span class=\"kw4\">sum</span> the even numbered digits<br/>    <span class=\"kw2\">compute</span> i <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">)</span><span class=\"sy0\"> - </span><span class=\"nu0\">1</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> i <span class=\"kw3\">by</span> -<span class=\"nu0\">2</span> <span class=\"kw2\">until</span> i &lt; <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">add</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> check-<span class=\"kw4\">sum</span><br/>        <span class=\"kw2\">add</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span><span class=\"br0\">(</span>test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> check-<span class=\"kw4\">sum</span><br/>        *&gt; convert a two-digit double <span class=\"kw4\">sum</span> <span class=\"kw3\">number</span> <span class=\"kw2\">to</span> a single digit<br/>        <span class=\"kw1\">if</span> test-<span class=\"kw3\">number</span><span class=\"br0\">(</span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"st0\">'5'</span><br/>            <span class=\"kw3\">subtract</span> <span class=\"nu0\">9</span> <span class=\"kw3\">from</span> check-<span class=\"kw4\">sum</span><br/>        end-<span class=\"kw1\">if</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> check-<span class=\"kw4\">sum</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">function</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>check-<span class=\"kw4\">sum</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> luhntest-result *&gt; success<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw2\">move</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> luhntest-result *&gt; failure<br/>    end-<span class=\"kw1\">if</span><br/>    goback<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> luhntest<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> alphap <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>char<span class=\"sy0\">&lt;=</span> #\\A char #\\Z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> alpha-digit-char-p <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>alphap char<span class=\"br0\">)</span> <span class=\"br0\">(</span>digit-char-p char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> valid-isin-format-p <span class=\"br0\">(</span>isin<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> isin<span class=\"br0\">)</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>alphap <span class=\"br0\">(</span>char isin <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>alphap <span class=\"br0\">(</span>char isin <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">2</span> to <span class=\"nu0\">10</span><br/>             always <span class=\"br0\">(</span>alpha-digit-char-p <span class=\"br0\">(</span>char isin i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>digit-char-p <span class=\"br0\">(</span>char isin <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> isin-<span class=\"sy0\">&gt;</span>digits <span class=\"br0\">(</span>isin<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'concatenate 'string<br/>         <span class=\"br0\">(</span>loop for c across isin<br/>               collect <span class=\"br0\">(</span>princ-to-string <span class=\"br0\">(</span>digit-char-p c <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> luhn-test <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for c across <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> string<span class=\"br0\">)</span><br/>        for <span class=\"kw1\">oddp</span> <span class=\"sy0\">=</span> t then <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"kw1\">oddp</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">oddp</span><br/>          sum <span class=\"br0\">(</span>digit-char-p c<span class=\"br0\">)</span> into result<br/>        else<br/>          sum <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span>digit-char-p c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>- n <span class=\"nu0\">9</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            into result<br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod result <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> valid-isin-p <span class=\"br0\">(</span>isin<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>valid-isin-format-p isin<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>luhn-test <span class=\"br0\">(</span>isin-<span class=\"sy0\">&gt;</span>digits isin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> test <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>isin '<span class=\"br0\">(</span><span class=\"st0\">\"US0378331005\"</span> <span class=\"st0\">\"US0373831005\"</span> <span class=\"st0\">\"U50378331005\"</span> <span class=\"st0\">\"US03378331005\"</span><br/>                  <span class=\"st0\">\"AU0000XVGZA3\"</span> <span class=\"st0\">\"AU0000VXGZA3\"</span> <span class=\"st0\">\"FR0000988040\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A: ~:[invalid~;valid~]~%\"</span> isin <span class=\"br0\">(</span>valid-isin-p isin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 40, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> isins <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"st0\">\"US0378331005\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"US0373831005\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"U50378331005\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"US03378331005\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"AU0000XVGZA3\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"AU0000VXGZA3\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"FR0000988040\"</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>isin<span class=\"sy0\">;</span> isins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>isin<span class=\"sy0\">,</span> <span class=\"st0\">\" is \"</span><span class=\"sy0\">,</span> ISINvalidate<span class=\"br0\">(</span>isin<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"valid\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not valid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> ISINvalidate<span class=\"br0\">(</span><span class=\"kw4\">string</span> isin<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">array</span> <span class=\"sy0\">:</span> appender<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span> <span class=\"sy0\">:</span> to<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">regex</span> <span class=\"sy0\">:</span> matchFirst<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"kw4\">string</span> <span class=\"sy0\">:</span> strip<span class=\"sy0\">,</span> toUpper<span class=\"sy0\">;</span><br/>\u00a0<br/>    isin <span class=\"sy0\">=</span> isin.<span class=\"me1\">strip</span>.<span class=\"me1\">toUpper</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isin.<span class=\"me1\">matchFirst</span><span class=\"br0\">(</span><span class=\"st_h\">`^[A-Z]{2}[A-Z0-9]{9}\\d$`</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> sb <span class=\"sy0\">=</span> appender<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> isin<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sb.<span class=\"me1\">put</span><span class=\"br0\">(</span><br/>            <span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>               .<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">string</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">import</span> luhn<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> luhnTest<span class=\"br0\">(</span>sb.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">isin? = fn str -&gt;<br/>          if str =~ ~r/\\A[A-Z]{2}[A-Z0-9]{9}\\d\\z/ do<br/>            String.codepoints(str)<br/>            |&gt; Enum.map_join(&amp;String.to_integer(&amp;1, 36))<br/>            |&gt; Luhn.valid?<br/>          else<br/>            false<br/>          end<br/>        end<br/>\u00a0<br/>IO.puts \"    ISIN        Valid?\"<br/>~w(US0378331005<br/>   US0373831005<br/>   U50378331005<br/>   US03378331005<br/>   AU0000XVGZA3<br/>   AU0000VXGZA3<br/>   FR0000988040)<br/>|&gt; Enum.each(&amp;IO.puts \"#{&amp;1}\\t#{isin?.(&amp;1)}\")</pre>"}, {"lang": "Factor", "loc": 38, "block": "<pre class=\"text highlighted_source\">USING: combinators.short-circuit.smart formatting kernel luhn<br/>math math.parser qw sequences strings unicode\u00a0;<br/>IN: rosetta-code.isin<br/>\u00a0<br/>CONSTANT: test-cases qw{<br/>    US0378331005 US0373831005 U50378331005 US03378331005<br/>    AU0000XVGZA3 AU0000VXGZA3 FR0000988040<br/>}<br/>\u00a0<br/>: valid-length? ( str --\u00a0? ) length 12 =\u00a0;<br/>\u00a0<br/>: valid-country-code? ( str --\u00a0? ) first2 [ Letter? ] both?\u00a0;<br/>\u00a0<br/>: valid-security-code? ( str --\u00a0? )<br/>    [ 2 11 ] dip subseq [ alpha? ] all?\u00a0;<br/>\u00a0<br/>: valid-checksum-digit? ( str --\u00a0? ) last digit?\u00a0;<br/>\u00a0<br/>: valid-format? ( str --\u00a0? ) {<br/>        [ valid-length?         ]<br/>        [ valid-country-code?   ]<br/>        [ valid-security-code?  ]<br/>        [ valid-checksum-digit? ]<br/>    } &amp;&amp;\u00a0;<br/>\u00a0<br/>: base36&gt;base10 ( str -- n )<br/>    &gt;upper [ dup LETTER? [ 55 - number&gt;string ] [ 1string ] if ]<br/>    { } map-as concat string&gt;number\u00a0;<br/>\u00a0<br/>: isin? ( str --\u00a0? )<br/>    { [ valid-format? ] [ base36&gt;base10 luhn? ] } &amp;&amp;\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    test-cases [<br/>        dup isin? \"\" \" not\"\u00a0? \"%s is%s valid\\n\" printf<br/>    ] each\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fortran", "loc": 57, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> isin<br/>    <span class=\"kw3\">use</span> ctype<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">test</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"US0378331005        \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"US0373831005        \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"U50378331005        \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"US03378331005       \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"AU0000XVGZA3        \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"AU0000VXGZA3        \"</span>, <span class=\"sy0\">&amp;</span><br/>                                <span class=\"st0\">\"FR0000988040        \"</span><span class=\"br0\">]</span><br/>    print <span class=\"sy0\">*</span>, check_isin<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/><span class=\"co1\">contains</span><br/>    elemental <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> check_isin<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, k, n, v<br/>\u00a0<br/>        check_isin <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>\u00a0<br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">/=</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>        <span class=\"co1\">! Convert to an array of digits</span><br/>        j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            k <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">48</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> k &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">57</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &lt; <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>                k <span class=\"sy0\">=</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">48</span><br/>                j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                s<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> k<br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">65</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> k &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>                k <span class=\"sy0\">=</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">65</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><br/>                j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                s<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> k <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>                j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                s<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>k, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>        <span class=\"co1\">! Compute checksum</span><br/>        v <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>            k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k &gt; <span class=\"nu0\">9</span><span class=\"br0\">)</span> k <span class=\"sy0\">=</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">9</span><br/>            v <span class=\"sy0\">=</span> v <span class=\"sy0\">+</span> k<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> j, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>            v <span class=\"sy0\">=</span> v <span class=\"sy0\">+</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>        check_isin <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>v, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 78, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 27-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Ifndef TRUE        ' define true and false for older freebasic versions</span><br/>    <span class=\"co2\">#Define FALSE 0</span><br/>    <span class=\"co2\">#Define TRUE Not FALSE</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> luhntest<span class=\"br0\">(</span>cardnr <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/>    cardnr = <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>cardnr<span class=\"br0\">)</span> <span class=\"co1\">' remove spaces  </span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> reverse_nr = cardnr<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j, s1, s2, l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>cardnr<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">' reverse string</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l<br/>        reverse_nr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = cardnr<span class=\"br0\">[</span>l - i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"co1\">' sum odd numbers</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>        s1 = s1 + <span class=\"br0\">(</span>reverse_nr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"co1\">' sum even numbers</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> l <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>        j = reverse_nr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>        j = j * <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">If</span> j &gt; <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span> j = j <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span> +<span class=\"nu0\">1</span><br/>        s2 = s2 + j<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>s1 + s2<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=-----</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test_str<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test_set<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = <span class=\"br0\">{</span> <span class=\"st0\">\"US0378331005\"</span>, <span class=\"st0\">\"US0373831005\"</span>, _<br/>                    <span class=\"st0\">\"U50378331005\"</span>, <span class=\"st0\">\"US03378331005\"</span>, <span class=\"st0\">\"AU0000XVGZA3\"</span>, _<br/>                                     <span class=\"st0\">\"AU0000VXGZA3\"</span>, <span class=\"st0\">\"FR0000988040\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, l, n, x<br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>test_set<span class=\"br0\">)</span><br/>    test_str = <span class=\"st0\">\"\"</span><br/>    l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> l &lt;&gt; <span class=\"nu0\">12</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\"Invalid, length &lt;&gt; 12 char.\"</span><br/>        <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> &lt; <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> &lt; <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\"Invalid, number needs to start with 2 characters\"</span><br/>        <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l -<span class=\"nu0\">1</span><br/>        x = test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">' if test_set(i)[i] is a letter we to correct for that</span><br/>        <span class=\"kw1\">If</span> x &gt; <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span> x = x -<span class=\"nu0\">7</span><br/>        <span class=\"kw1\">If</span> x &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">Then</span><br/>            test_str = test_str + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span> <span class=\"co1\">' two digest number</span><br/>            test_str = test_str + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x \\ <span class=\"nu0\">10</span><span class=\"br0\">)</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span> test_set<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>luhntest<span class=\"br0\">(</span>test_str<span class=\"br0\">)</span> = <span class=\"kw1\">TRUE</span>, <span class=\"st0\">\"Valid\"</span>,<span class=\"st0\">\"Invalid, checksum error\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"regexp\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> r <span class=\"sy2\">=</span> regexp<span class=\"sy3\">.</span>MustCompile<span class=\"sy1\">(</span><span class=\"co2\">`^[A-Z]{2}[A-Z0-9]{9}\\d$`</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> inc <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">][</span><span class=\"nu0\">10</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ValidISIN<span class=\"sy1\">(</span>n <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy3\">!</span>r<span class=\"sy3\">.</span>MatchString<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">var</span> sum<span class=\"sy1\">,</span> p <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\tp <span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span> p<br/>\t\t<span class=\"kw1\">if</span> d <span class=\"sy2\">:=</span> n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">];</span> d &lt; <span class=\"st0\">'A'</span> <span class=\"sy1\">{</span><br/>\t\t\tsum <span class=\"sy2\">+=</span> inc<span class=\"sy1\">[</span>p<span class=\"sy1\">][</span>d<span class=\"sy3\">-</span><span class=\"st0\">'0'</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\td <span class=\"sy2\">-=</span> <span class=\"st0\">'A'</span><br/>\t\t\tsum <span class=\"sy2\">+=</span> inc<span class=\"sy1\">[</span>p<span class=\"sy1\">][</span>d<span class=\"sy3\">%</span><span class=\"nu0\">10</span><span class=\"sy1\">]</span><br/>\t\t\tp <span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span> p<br/>\t\t\tsum <span class=\"sy2\">+=</span> inc<span class=\"sy1\">[</span>p<span class=\"sy1\">][</span>d<span class=\"sy3\">/</span><span class=\"nu0\">10</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tsum <span class=\"sy2\">+=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>n<span class=\"sy1\">[</span><span class=\"nu0\">11</span><span class=\"sy1\">]</span> <span class=\"sy3\">-</span> <span class=\"st0\">'0'</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> sum<span class=\"sy3\">%</span><span class=\"nu0\">10</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\">CHARS <span class=\"sy0\">=</span> <span class=\"st0\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> checksum<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> prefix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> digits <span class=\"sy0\">=</span> prefix.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> CHARS.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> groups <span class=\"sy0\">=</span> digits.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> CHARS.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>acc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, acc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> ds <span class=\"sy0\">=</span> groups<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> it<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> CHARS.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">+</span> groups<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> ds.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> checksum<span class=\"br0\">(</span><span class=\"st0\">'AU0000VXGZA'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> checksum<span class=\"br0\">(</span><span class=\"st0\">'GB000263494'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> checksum<span class=\"br0\">(</span><span class=\"st0\">'US037833100'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> checksum<span class=\"br0\">(</span><span class=\"st0\">'US037833107'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Haskell", "loc": 82, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> ISINVerification2 <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>isUpper<span class=\"sy0\">,</span> isDigit<span class=\"sy0\">,</span> digitToInt<span class=\"br0\">)</span><br/>\u00a0<br/>verifyISIN <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>verifyISIN isin <span class=\"sy0\">=</span><br/>  correctFormat isin <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a> <span class=\"br0\">(</span>oddsum <span class=\"sy0\">+</span> multiplied<span class=\"sy0\">_</span>even<span class=\"sy0\">_</span>sum<span class=\"br0\">)</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">where</span><br/>    reverted <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> convertToNumber isin<br/>    theOdds <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> collectOddandEven reverted<br/>    theEvens <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span> collectOddandEven reverted<br/>    oddsum <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> digitToInt theOdds<br/>    multiplied<span class=\"sy0\">_</span>even<span class=\"sy0\">_</span>sum <span class=\"sy0\">=</span> addUpDigits <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> digitToInt<span class=\"br0\">)</span> theEvens<br/>\u00a0<br/>capitalLetters <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>capitalLetters <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'Z'</span><span class=\"br0\">]</span><br/>\u00a0<br/>numbers <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'2'</span><span class=\"sy0\">,</span> <span class=\"st0\">'3'</span><span class=\"sy0\">,</span> <span class=\"st0\">'4'</span><span class=\"sy0\">,</span> <span class=\"st0\">'5'</span><span class=\"sy0\">,</span> <span class=\"st0\">'6'</span><span class=\"sy0\">,</span> <span class=\"st0\">'7'</span><span class=\"sy0\">,</span> <span class=\"st0\">'8'</span><span class=\"sy0\">,</span> <span class=\"st0\">'9'</span><span class=\"br0\">]</span><br/>\u00a0<br/>correctFormat <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>correctFormat isin <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> isin <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` capitalLetters<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">2</span> isin<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>\\c <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a> c capitalLetters <span class=\"sy0\">||</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a> c numbers<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">11</span> isin<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> isin<span class=\"br0\">)</span> numbers<br/>\u00a0<br/>convertToNumber <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>convertToNumber <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> convert<br/>  <span class=\"kw1\">where</span><br/>    convert <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>    convert c <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> isDigit c<br/>        <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> digitToInt c<br/>        <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> c <span class=\"sy0\">-</span> <span class=\"nu0\">55</span><span class=\"br0\">)</span><br/>\u00a0<br/>collectOddandEven <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>collectOddandEven term<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> term <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>        <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> n term<br/>        <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> term <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>        <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> d term<br/>        <span class=\"sy0\">|</span> d <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> term <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>        <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> n term<br/>        <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> term <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>        <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> d term<br/>        <span class=\"sy0\">|</span> d <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> term <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>addUpDigits <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>addUpDigits list <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a><br/>    <span class=\"br0\">(</span>\\d <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><br/>          <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> digitToInt <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> d<br/>          <span class=\"kw1\">else</span> d<span class=\"br0\">)</span><br/>    list<br/>\u00a0<br/>printSolution <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printSolution str <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> str <span class=\"sy0\">++</span> <span class=\"st0\">\" is\"</span><br/>  <span class=\"kw1\">if</span> verifyISIN str<br/>    <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\" valid\"</span><br/>    <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\" not valid\"</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> isinnumbers <span class=\"sy0\">=</span><br/>        <span class=\"br0\">[</span> <span class=\"st0\">\"US0378331005\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"US0373831005\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"U50378331005\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"US03378331005\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"AU0000XVGZA3\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"AU0000VXGZA3\"</span><br/>        <span class=\"sy0\">,</span> <span class=\"st0\">\"FR0000988040\"</span><br/>        <span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> printSolution isinnumbers</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'regex'</span><br/>validFmt=: <span class=\"nu0\">0</span> -: <span class=\"st_h\">'^[A-Z]{2}[A-Z0-9]{9}[0-9]{1}$'</span>&amp;rxindex<br/>\u00a0<br/>df36=:\u00a0;@<span class=\"sy0\">(</span>[: &lt;@\":\"<span class=\"nu0\">0</span> <span class=\"st_h\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>&amp;i.<span class=\"sy0\">)</span>  <span class=\"co1\">NB. decimal from base 36</span><br/>luhn=: <span class=\"nu0\">0</span> = <span class=\"nu0\">10</span> <span class=\"sy0\">(</span>| +/@,<span class=\"sy0\">)</span> <span class=\"nu0\">10</span> #.inv <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> *&amp;|: <span class=\"nu0\">_2</span> \".\"<span class=\"nu0\">0</span>\\ |.            <span class=\"co1\">NB. as per task Luhn_test_of_credit_card_numbers#J</span><br/>\u00a0<br/>validISIN=: validFmt *. <a class=\"__cf_email__\" data-cfemail=\"cea2bba6a08eaaa8fdf8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 47, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ISIN <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> isins <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"US0378331005\"</span>, <br/>            <span class=\"st0\">\"US0373831005\"</span>, <br/>            <span class=\"st0\">\"U50378331005\"</span>, <br/>            <span class=\"st0\">\"US03378331005\"</span>,<br/>            <span class=\"st0\">\"AU0000XVGZA3\"</span>, <br/>            <span class=\"st0\">\"AU0000VXGZA3\"</span>, <br/>            <span class=\"st0\">\"FR0000988040\"</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> isin <span class=\"sy0\">:</span> isins<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s is\u00a0%s<span class=\"es0\">\\n</span>\"</span>, isin, ISINtest<span class=\"br0\">(</span>isin<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"valid\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not valid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> ISINtest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> isin<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        isin <span class=\"sy0\">=</span> isin.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isin.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^[A-Z]{2}[A-Z0-9]{9}<span class=\"es0\">\\\\</span>d$\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"sy0\">:</span> isin.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">digit</span><span class=\"br0\">(</span>c, <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> luhnTest<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> luhnTest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> s1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, s2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> reverse <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span>number<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> reverse.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">digit</span><span class=\"br0\">(</span>reverse.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//This is for odd digits, they are 1-indexed in the algorithm.</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                s1 <span class=\"sy0\">+=</span> digit<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// Add 2 * digit for 0-4, add 2 * digit - 9 for 5-9.</span><br/>                s2 <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> digit<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>digit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    s2 <span class=\"sy0\">-=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">+</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">luhntest(x) = luhntest(parse(Int, x))<br/>\u00a0<br/>function checkISIN(inum::AbstractString)<br/>    if length(inum)\u00a0!= 12 ||\u00a0!all(isalpha, inum[1:2]) return false end<br/>    return parse.(Int, collect(inum), 36) |&gt; join |&gt; luhntest<br/>end<br/>\u00a0<br/>for inum in [\"US0378331005\", \"US0373831005\", \"U50378331005\",<br/>    \"US03378331005\", \"AU0000XVGZA3\", \"AU0000VXGZA3\", \"FR0000988040\"]<br/>    @printf(\"%-15s\u00a0%5s\\n\", inum, ifelse(checkISIN(inum), \"pass\", \"fail\"))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Isin <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"^[A-Z]{2}[A-Z0-9]{9}[0-9]$\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun isValid<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <span class=\"co1\">// check format</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s.<span class=\"me1\">matches</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <span class=\"co1\">// validate checksum</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                in <span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span> -<span class=\"sy0\">&gt;</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                in <span class=\"st0\">'A'</span>..<span class=\"st0\">'Z'</span> -<span class=\"sy0\">&gt;</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">55</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> luhn<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun luhn<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        fun sumDigits<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n / <span class=\"nu0\">10</span> + n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> t.<span class=\"me1\">filterIndexed</span> <span class=\"br0\">{</span> i, <span class=\"sy0\">_</span> -<span class=\"sy0\">&gt;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it - <span class=\"st0\">'0'</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2 <span class=\"sy0\">=</span> t.<span class=\"me1\">filterIndexed</span> <span class=\"br0\">{</span> i, <span class=\"sy0\">_</span> -<span class=\"sy0\">&gt;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> sumDigits<span class=\"br0\">(</span><span class=\"br0\">(</span>it - <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>s1 + s2<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isins <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"US0378331005\"</span>, <span class=\"st0\">\"US0373831005\"</span>, <span class=\"st0\">\"U50378331005\"</span>, <span class=\"st0\">\"US03378331005\"</span>,<br/>        <span class=\"st0\">\"AU0000XVGZA3\"</span>, <span class=\"st0\">\"AU0000VXGZA3\"</span>, <span class=\"st0\">\"FR0000988040\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>isin in isins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$isin<span class=\"es1\">\\t</span> -&gt; ${if (Isin.isValid(isin)) \"</span>valid<span class=\"st0\">\" else \"</span>not valid<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 37, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> luhn <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> revStr<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> <span class=\"kw3\">mod</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>revStr <span class=\"kw1\">do</span><br/>        digit <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>revStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> pos <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            s1 <span class=\"sy0\">=</span> s1 <span class=\"sy0\">+</span> digit<br/>        <span class=\"kw1\">else</span><br/>            digit <span class=\"sy0\">=</span> digit <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">if</span> digit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw3\">mod</span> <span class=\"sy0\">=</span> digit <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>                digit <span class=\"sy0\">=</span> <span class=\"kw3\">mod</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>digit <span class=\"sy0\">-</span> <span class=\"kw3\">mod</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            s2 <span class=\"sy0\">=</span> s2 <span class=\"sy0\">+</span> digit<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>s1 <span class=\"sy0\">+</span> s2<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> checkISIN <span class=\"br0\">(</span>inStr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>inStr <span class=\"sy0\">~=</span> <span class=\"nu0\">12</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> numStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>inStr <span class=\"kw1\">do</span><br/>        numStr <span class=\"sy0\">=</span> numStr <span class=\"sy0\">..</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>inStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> luhn<span class=\"br0\">(</span>numStr<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"US0378331005\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"US0373831005\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"US0373831005\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"US03378331005\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"AU0000XVGZA3\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"AU0000VXGZA3\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"FR0000988040\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> ISIN <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>ISIN<span class=\"sy0\">,</span> checkISIN<span class=\"br0\">(</span>ISIN<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 21, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> English<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> POSIX<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Test<span class=\"sy0\">::</span><span class=\"me2\">Simple</span> tests <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0<br/>ok<span class=\"br0\">(</span>   validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'US0378331005'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>ok<span class=\"br0\">(</span> <span class=\"sy0\">!</span> validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'US0373831005'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 2'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ok<span class=\"br0\">(</span> <span class=\"sy0\">!</span> validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'U50378331005'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 3'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ok<span class=\"br0\">(</span> <span class=\"sy0\">!</span> validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'US03378331005'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Test 4'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ok<span class=\"br0\">(</span>   validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'AU0000XVGZA3'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 5'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>ok<span class=\"br0\">(</span>   validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'AU0000VXGZA3'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 6'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ok<span class=\"br0\">(</span>   validate_isin<span class=\"br0\">(</span><span class=\"st_h\">'FR0000988040'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"st_h\">'Test 7'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> validate_isin <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$isin</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$isin</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\A[A-Z]{2}[A-Z\\d]{9}\\d\\z/s</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$base10</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span>POSIX<span class=\"sy0\">::</span><span class=\"me2\">strtol</span><span class=\"br0\">(</span><span class=\"re0\">$ARG</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>                               <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$isin</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> luhn_test<span class=\"br0\">(</span><span class=\"re0\">$base10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$ISIN</span> <span class=\"sy0\">=</span> <span class=\"sy0\">/</span><br/>    <span class=\"sy0\">^</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">[</span>A<span class=\"sy0\">..</span><span class=\"kw1\">Z</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;**</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">[</span>A<span class=\"sy0\">..</span><span class=\"me1\">Z0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;**</span><span class=\"nu0\">9</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> $<br/>    <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> luhn<span class=\"sy0\">-</span>test $<span class=\"sy0\">/.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">:</span><span class=\"nu0\">36</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">/;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> luhn<span class=\"sy0\">-</span>test <span class=\"br0\">(</span><span class=\"re0\">$number</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@digits</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"re0\">@digits</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">...*</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">sum</span><br/>            <span class=\"sy0\">+</span> <span class=\"re0\">@digits</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">...*</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$_ is {$ISIN\u00a0?? \"</span>valid<span class=\"st0\">\"\u00a0!! \"</span><span class=\"kw1\">not</span> valid<span class=\"st0\">\"}\"</span> <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span><br/>US0378331005<br/>US0373831005<br/>U50378331005<br/>US03378331005<br/>AU0000XVGZA3<br/>AU0000VXGZA3<br/>FR0000988040<br/><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 42, "block": "<pre class=\"text highlighted_source\">function Luhn(string st)<br/>integer s=0, d<br/>    st = reverse(st)<br/>    for i=1 to length(st) do<br/>        d = st[i]-'0'<br/>        s += iff(mod(i,2)?d,d*2-(d&gt;4)*9)<br/>    end for<br/>    return remainder(s,10)=0<br/>end function<br/>\u00a0<br/>function valid_ISIN(string st)<br/>-- returns 1 if valid, else 0/2/3/4.<br/>-- (feel free to return 0 instead of 2/3/4)<br/>    if length(st)!=12 then return 2 end if<br/>    for i=length(st) to 1 by -1 do<br/>        integer ch = st[i]<br/>        if ch&gt;='A' then<br/>            if ch&gt;'Z' then return 3 end if<br/>            st[i..i] = sprintf(\"%d\",ch-55)<br/>        elsif i&lt;=2 then<br/>            return 4<br/>        elsif ch&lt;'0' or ch&gt;'9' then<br/>            return 3<br/>        end if<br/>    end for<br/>    return Luhn(st)<br/>end function<br/>\u00a0<br/>sequence tests = {\"US0378331005\",   --  valid   <br/>                  \"US0373831005\",   --  not valid       The transposition typo is caught by the checksum constraint.<br/>                  \"U50378331005\",   --  not valid       The substitution typo is caught by the format constraint.<br/>                  \"US03378331005\",  --  not valid       The duplication typo is caught by the format constraint.<br/>                  \"AU0000XVGZA3\",   --  valid   <br/>                  \"AU0000VXGZA3\",   --  valid   Unfortunately, not all transposition typos are caught by the checksum constraint.<br/>                  \"FR0000988040\"}   --  valid<br/>\u00a0<br/>constant reasons = {\"wrong checksum\",\"valid\",\"wrong length\",\"bad char\",\"wrong country\"}<br/>\u00a0<br/>for i=1 to length(tests) do<br/>    string ti = tests[i]<br/>    printf(1,\"%s\u00a0:\u00a0%s\\n\",{ti,reasons[valid_ISIN(ti)+1]})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 23, "block": "<pre class=\"text highlighted_source\">(de isin (Str)<br/>   (let Str (mapcar char (chop Str))<br/>      (and<br/>         (= 12 (length Str))<br/>         (&lt;= 65 (car Str) 90)<br/>         (&lt;= 65 (cadr Str) 90)<br/>         (luhn<br/>            (pack<br/>               (mapcar<br/>                  '((N)<br/>                     (- N (if (&lt;= 48 N 57) 48 55)) )<br/>                  Str ) ) ) ) ) )<br/>(println<br/>   (mapcar<br/>      isin<br/>      (quote<br/>         \"US0378331005\"<br/>         \"US0373831005\"<br/>         \"U50378331005\"<br/>         \"US03783310005\"<br/>         \"AU0000XVGZA3\"<br/>         \"AU0000VXGZA3\"<br/>         \"FR0000988040\" ) ) )</pre>"}, {"lang": "PowerShell", "loc": 65, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Test<span class=\"sy0\">-</span>ISIN<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">bool</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidatePattern<span class=\"br0\">(</span><span class=\"st0\">\"[A-Z]{2}\\w{9}\\d\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span>ValidateScript<span class=\"br0\">(</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Length <span class=\"kw4\">-eq</span> <span class=\"nu0\">12</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Number</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">function</span> Split<span class=\"sy0\">-</span>Array<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$array</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$input</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$index</span> <span class=\"sy0\">=</span> <span class=\"kw4\">-not</span> <span class=\"re0\">$index</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">}</span><br/>        <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">filter</span> ConvertTo<span class=\"sy0\">-</span>Digit<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-gt</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><br/>            <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"re0\">$checkDigit</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Number</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"re0\">$digits</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$Number</span> <span class=\"kw4\">-replace</span> <span class=\"st0\">\".$\"</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::IsDigit<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">55</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$odds</span><span class=\"sy0\">,</span> <span class=\"re0\">$evens</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$digits</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> Split<span class=\"sy0\">-</span>Array<br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$odds</span>.Count <span class=\"kw4\">-gt</span> <span class=\"re0\">$evens</span>.Count<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$odds</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$odds</span>  <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"sy0\">|</span> ConvertTo<span class=\"sy0\">-</span>Digit<br/>        <span class=\"re0\">$evens</span> <span class=\"sy0\">=</span> <span class=\"re0\">$evens</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$odds</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$odds</span>  <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"re0\">$evens</span> <span class=\"sy0\">=</span> <span class=\"re0\">$evens</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">Char</span><span class=\"br0\">]</span>::GetNumericValue<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"sy0\">|</span> ConvertTo<span class=\"sy0\">-</span>Digit<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$odds</span>  <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span><span class=\"br0\">)</span>.Sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$evens</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span><span class=\"br0\">)</span>.Sum<br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$sum</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"kw4\">-match</span> <span class=\"re0\">$checkDigit</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 49, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b Check_ISIN<span class=\"br0\">(</span><span class=\"sy0\">*</span>c.Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> count.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, Idx.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, v.i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, i.i<br/>  <span class=\"kw1\">Dim</span> s.i<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">MemoryStringLength</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">While</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c<br/>    count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c<span class=\"sy0\">&gt;=</span>'<span class=\"nu0\">0</span>' <span class=\"kw1\">And</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c<span class=\"sy0\">&lt;=</span>'<span class=\"nu0\">9</span>'      <br/>      <span class=\"kw1\">If</span> count<span class=\"sy0\">&lt;=</span><span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> #False\u00a0: <span class=\"kw1\">EndIf</span><br/>      s<span class=\"br0\">(</span>Idx<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c <span class=\"sy0\">-</span> '<span class=\"nu0\">0</span>'<br/>      Idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ElseIf</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c<span class=\"sy0\">&gt;=</span>'A' <span class=\"kw1\">And</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c<span class=\"sy0\">&lt;=</span>'Z'      <br/>      s<span class=\"br0\">(</span>Idx<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c <span class=\"sy0\">-</span> <span class=\"br0\">(</span>'A'<span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/>      Idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      s<span class=\"br0\">(</span>Idx<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"sy0\">\\</span>c <span class=\"sy0\">-</span> <span class=\"br0\">(</span>'A'<span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>      Idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False      <br/>    <span class=\"kw1\">EndIf</span>    <br/>    <span class=\"sy0\">*</span>c <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span>Idx<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><br/>      v<span class=\"sy0\">+</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">9</span><br/>    <span class=\"kw1\">Else</span><br/>      v<span class=\"sy0\">+</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">EndIf</span><br/>    v<span class=\"sy0\">+</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> Bool<span class=\"br0\">(</span>v<span class=\"sy0\">%</span>10<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>      <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span>.s s<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Validate_International_Securities_Identification_Number (ISIN)\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"st0\">\"c:\\code_pb\\rosettacode\\data\\isin.txt\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    s<span class=\"sy0\">=</span><span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>s<span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> Check_ISIN<span class=\"br0\">(</span>@s<span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"TRUE\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"FALSE\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span>    <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 33, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> check_isin<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">12</span> <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>c.<span class=\"me1\">isalpha</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> a<span class=\"br0\">[</span>:<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>c.<span class=\"me1\">isalnum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> * <span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> s<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> +<br/>                 <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"nu0\">48</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> s<span class=\"br0\">[</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\"># A more readable version </span><br/><span class=\"kw1\">def</span> check_isin_alt<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">12</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> c.<span class=\"me1\">isdigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>:<br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>            s.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"nu0\">48</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> c.<span class=\"me1\">isupper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">11</span>:<br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>            s +<span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    v <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> s<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>:<br/>        k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> * k<br/>        v +<span class=\"sy0\">=</span> k - <span class=\"nu0\">9</span> <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"kw1\">else</span> k<br/>    <span class=\"kw1\">return</span> v\u00a0% <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"br0\">[</span>check_isin<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">\"US0378331005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"US0373831005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"U50378331005\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"US03378331005\"</span><span class=\"sy0\">,</span><br/>                         <span class=\"st0\">\"AU0000XVGZA3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AU0000VXGZA3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"FR0000988040\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># [True, False, False, False, True, True, True]</span></pre>"}, {"lang": "Racket", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; convert a base36 character (#\\0 - #\\Z) to its equivalent<br/>;; in base 10 as a string (\"0\" - \"35\")<br/>(define (base36-char-&gt;base10-string c)<br/>  (let ([char-int (char-&gt;integer (char-upcase c))]<br/>        [zero-int (char-&gt;integer #\\0)]<br/>        [nine-int (char-&gt;integer #\\9)]<br/>        [A-int (char-&gt;integer #\\A)]<br/>        [Z-int (char-&gt;integer #\\Z)])<br/>    (cond [(and (&gt;= char-int zero-int) (&lt;= char-int nine-int)) (~a c)]<br/>          [(and (&gt;= char-int A-int) (&lt;= char-int Z-int)) (~a (+ (- char-int A-int) 10))]<br/>          [else null])))<br/>\u00a0<br/>;; substitute equivalent base 10 numbers for base 36 characters in string<br/>;; this is a character-by-character substitution not a conversion<br/>;; of a base36 number to a base10 number<br/>(define (base36-string-characters-&gt;base10-string-characters s)<br/>  (for/fold ([joined \"\"])<br/>            ([tenstr (map base36-char-&gt;base10-string (string-&gt;list (string-upcase s)))])<br/>    (values (string-append joined tenstr))))<br/>\u00a0<br/>;; This uses the Racket Luhn solution<br/>(define [isin-test? s]<br/>  (let ([RE (pregexp \"^[A-Z]{2}[A-Z0-9]{9}[0-9]{1}$\")])<br/>    (and<br/>     (regexp-match? RE s)<br/>     (luhn-test (string-&gt;number (base36-string-characters-&gt;base10-string-characters s))))))<br/>\u00a0<br/>(define test-cases '(\"US0378331005\" \"US0373831005\" \"U50378331005\" \"US03378331005\" \"AU0000XVGZA3\" \"AU0000VXGZA3\" \"FR0000988040\"))<br/>\u00a0<br/>(map isin-test? test-cases)<br/>;; -&gt; '(#t #f #f #f #t #t #t)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program validates the  checksum digit for an  International Securities ID number.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z                                      <span class=\"coMULTI\">/*obtain optional  ISINs  from the C.L.*/</span><br/><span class=\"kw1\">if</span> z=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> z= <span class=\"st0\">\"US0378331005 US0373831005 U50378331005 US03378331005 AU0000XVGZA3\"</span> ,<br/>                 <span class=\"st0\">'AU0000VXGZA3 FR0000988040'</span>     <span class=\"coMULTI\">/* [\u2191]  use the default list of  ISINs.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  process  all  specified  ISINs.*/</span><br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>;  x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>z, n<span class=\"br0\">)</span>;  y=x  <span class=\"coMULTI\">/*obtain an  ISIN  from the  Z  list.  */</span><br/>      $=                                         <span class=\"coMULTI\">/* [\u2193]  construct list of ISIN digits. */</span><br/>         <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;  _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*the ISIN may contain alphabetic chars*/</span><br/>         p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, <span class=\"st0\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*X must contain A\u2500\u2500\u25baZ, 0\u2500\u2500\u25ba9.*/</span><br/>         <span class=\"kw1\">if</span> p==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> y=                                 <span class=\"coMULTI\">/*trigger  \"not\"  valid below.*/</span><br/>                  <span class=\"kw3\">else</span> $=$ <span class=\"sy0\">||</span> p-<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*convert  X  string (base 36 \u2500\u2500\u25ba dec).*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                             <span class=\"coMULTI\">/* [\u2191]  convert  alphabetic \u2500\u2500\u25ba digits.*/</span><br/>      @=                                         <span class=\"coMULTI\">/*placeholder for the \"not\" in message.*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">12</span>            <span class=\"kw3\">then</span> @= <span class=\"st0\">\"not\"</span> <span class=\"coMULTI\">/*check if the ISIN is exactly 12 chars*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"st0\">'U'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> @= <span class=\"st0\">\"not\"</span> <span class=\"coMULTI\">/*  \"    \"  \"    \"  1st 2 chars cap let*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>x,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> @= <span class=\"st0\">\"not\"</span> <span class=\"coMULTI\">/*  \"    \"  \"    \"  last char not digit*/</span><br/>      <span class=\"kw1\">if</span> @==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>luhn<span class=\"br0\">(</span>$<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> @= <span class=\"st0\">\"not\"</span> <span class=\"coMULTI\">/*  \"    \"  \"    \"  passed Luhn test.  */</span><br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>x,<span class=\"nu0\">30</span><span class=\"br0\">)</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>@, <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"st0\">\"valid\"</span>    <span class=\"coMULTI\">/*display the   yea  or  nay   message.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>                                <span class=\"coMULTI\">/* [\u2191] 1st 3 IFs could've been combined*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Luhn: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;       $=<span class=\"nu0\">0</span>         <span class=\"coMULTI\">/*get credit card number;  zero $ sum. */</span><br/>      y=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>x<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*add leading zero if needed, &amp; reverse*/</span><br/>                             <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;    _=<span class=\"nu0\">2</span>  <span class=\"sy0\">*</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>y, j+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                             $=$ + <span class=\"kw6\">substr</span><span class=\"br0\">(</span>y, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  +  <span class=\"kw6\">left</span><span class=\"br0\">(</span>_, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  +  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span>  , <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>         <span class=\"coMULTI\">/* [\u2191]   sum the  odd and even  digits.*/</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>$, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/*return \"1\" if number passed Luhn test*/</span></pre>"}, {"lang": "Ring", "loc": 82, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Validate International Securities Identification Number<br/>\u00a0<br/>decimals(0)<br/>\u00a0<br/>test = [\"US0378331005\",<br/>           \"US0373831005\",<br/>           \"U50378331005\",<br/>           \"US03378331005\",<br/>           \"AU0000XVGZA3\",<br/>           \"AU0000VXGZA3\",<br/>           \"FR0000988040\"]<br/>\u00a0<br/>for n = 1 to len(test)<br/>      testold = test[n] <br/>      ascii1 = ascii(left(test[n],1))<br/>      ascii2 = ascii(substr(test[n],2,1))<br/>      if len(test[n])\u00a0!= 12 or (ascii1 &lt; 65 or ascii1 &gt; 90) or (ascii2 &lt; 65 or ascii2 &gt; 90)<br/>         see test[n] + \" -&gt; Invalid\" + nl<br/>         loop<br/>      ok<br/>      for m = 1 to len(test[n])<br/>           if ascii(test[n][m]) &gt; 64 and ascii(test[n][m]) &lt; 91<br/>              asc = ascii(test[n][m]) - 55<br/>              test[n] = left(test[n],m-1) + string(asc) + right(test[n],len(test[n])-m)<br/>           ok<br/>      next<br/>      see testold + \" -&gt; \" + cardtest(test[n]) + nl<br/>next<br/>\u00a0<br/>func cardtest(numstr)<br/>        revstring = revstr(numstr)<br/>        s1 = revodd(revstring)<br/>        s2 = reveven(revstring)<br/>        s3 =right(string(s1+s2), 1)<br/>        if s3 = \"0\"<br/>           return \"Valid\"<br/>        else<br/>           return \"Invalid\"<br/>        ok<br/>\u00a0<br/>func revstr(str)<br/>      strnew = \"\"<br/>      for nr = len(str) to 1 step -1<br/>           strnew = strnew + str[nr]<br/>      next<br/>      return strnew<br/>\u00a0<br/>func revodd(str)<br/>        strnew = \"\"<br/>        for nr = 1 to len(str) step 2<br/>             strnew = strnew + str[nr]<br/>        next<br/>        sumodd = 0<br/>        for p = 1 to len(strnew)<br/>              sumodd = sumodd + number(strnew[p])<br/>        next     <br/>        return sumodd<br/>\u00a0<br/>func reveven(str)<br/>        strnew = \"\"<br/>        for nr = 2 to len(str) step 2<br/>             strnew = strnew + str[nr]<br/>        next<br/>        lsteven = []<br/>        for p = 1 to len(strnew)<br/>             add(lsteven, string(2*number(strnew[p])))<br/>        next  <br/>        arreven = list(len(lsteven))<br/>        for q = 1 to len(lsteven)<br/>              sum = 0<br/>              for w = 1 to len(lsteven[q])<br/>                    sum = sum + lsteven[q][w]<br/>              next<br/>              arreven[q] = sum<br/>        next<br/>        sumarr = 0<br/>        for x = 1 to len(arreven)<br/>             sumarr = sumarr + arreven[x]<br/>        next<br/>        return sumarr <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">RE = <span class=\"sy0\">/</span>\\A<span class=\"br0\">[</span>A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">[</span>A<span class=\"sy0\">-</span>Z0<span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>\\z<span class=\"sy0\">/</span><br/>\u00a0<br/><span class=\"kw1\">def</span> valid_isin?<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">unless</span> str =~ RE<br/>  luhn<span class=\"br0\">(</span>str.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c.<span class=\"me1\">to_i</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>US0378331005<br/>US0373831005<br/>U50378331005<br/>US03378331005<br/>AU0000XVGZA3<br/>AU0000VXGZA3<br/>FR0000988040<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>tc<span class=\"sy0\">|</span> valid_isin?<span class=\"br0\">(</span>tc<span class=\"br0\">)</span> <span class=\"br0\">}</span>\t <br/>\u00a0<br/><span class=\"co1\"># =&gt; [true, false, false, false, true, true, true]</span></pre>"}, {"lang": "SAS", "loc": 48, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> test;<br/><span class=\"kw3\">length</span> isin $20 ok $1;<br/><span class=\"kw3\">input</span> isin;<br/><span class=\"kw4\">keep</span> isin ok;<br/><span class=\"kw4\">array</span> s<span class=\"br0\">{</span><span class=\"nu0\">24</span><span class=\"br0\">}</span>;<br/><span class=\"kw4\">link</span> isin;<br/><span class=\"kw4\">return</span>;<br/>isin:<br/>ok=<span class=\"st0\">\"N\"</span>;<br/><span class=\"kw3\">n</span>=<span class=\"kw3\">length</span><span class=\"br0\">(</span>isin<span class=\"br0\">)</span>;<br/><span class=\"kw5\">if</span> <span class=\"kw3\">n</span>=<span class=\"nu0\">12</span> <span class=\"kw5\">then</span> <span class=\"kw5\">do</span>;<br/>    j=<span class=\"nu0\">0</span>;<br/>    <span class=\"kw5\">do</span> i=<span class=\"nu0\">1</span> to <span class=\"kw3\">n</span>;<br/>        k=<span class=\"kw3\">rank</span><span class=\"br0\">(</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span>isin,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw5\">if</span> k&gt;=<span class=\"nu0\">48</span> &amp; k&lt;=<span class=\"nu0\">57</span> <span class=\"kw5\">then</span> <span class=\"kw5\">do</span>;<br/>            <span class=\"kw5\">if</span> i&lt;<span class=\"nu0\">3</span> <span class=\"kw5\">then</span> <span class=\"kw4\">return</span>;<br/>            j+<span class=\"nu0\">1</span>;<br/>            s<span class=\"br0\">{</span>j<span class=\"br0\">}</span>=k-<span class=\"nu0\">48</span>;<br/>        <span class=\"kw5\">end</span>;<br/>        <span class=\"kw5\">else</span> <span class=\"kw5\">if</span> k&gt;=<span class=\"nu0\">65</span> &amp; k&lt;=<span class=\"nu0\">90</span> <span class=\"kw5\">then</span> <span class=\"kw5\">do</span>;<br/>            <span class=\"kw5\">if</span> i=<span class=\"nu0\">12</span> <span class=\"kw5\">then</span> <span class=\"kw4\">return</span>;<br/>            k+-<span class=\"nu0\">55</span>;<br/>            j+<span class=\"nu0\">1</span>;<br/>            s<span class=\"br0\">{</span>j<span class=\"br0\">}</span>=<span class=\"kw3\">int</span><span class=\"br0\">(</span>k/<span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>            j+<span class=\"nu0\">1</span>;<br/>            s<span class=\"br0\">{</span>j<span class=\"br0\">}</span>=<span class=\"kw3\">mod</span><span class=\"br0\">(</span>k,<span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw5\">end</span>;<br/>        <span class=\"kw5\">else</span> <span class=\"kw4\">return</span>;<br/>    <span class=\"kw5\">end</span>;<br/>\u00a0<br/>    v=<span class=\"kw3\">sum</span><span class=\"br0\">(</span>of s<span class=\"br0\">{</span><span class=\"coMULTI\">*});</span><br/>    <span class=\"kw5\">do</span> i=j-<span class=\"nu0\">1</span> to <span class=\"nu0\">1</span> <span class=\"kw4\">by</span> -<span class=\"nu0\">2</span>;<br/>        v+s<span class=\"br0\">{</span>i<span class=\"br0\">}</span>-<span class=\"nu0\">9</span><span class=\"coMULTI\">*(s{i}&gt;4);</span><br/>    <span class=\"kw5\">end</span>;<br/>\u00a0<br/><span class=\"kw5\">if</span> <span class=\"kw3\">mod</span><span class=\"br0\">(</span>v,<span class=\"nu0\">10</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw5\">then</span> ok=<span class=\"st0\">\"Y\"</span>;<br/><span class=\"kw5\">end</span>;<br/><span class=\"kw4\">return</span>;<br/>cards;<br/>US0378331005<br/>US0373831005<br/>U50378331005<br/>US03378331005<br/>AU0000XVGZA3<br/>AU0000VXGZA3<br/>FR0000988040<br/>;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Isin <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isins <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"st0\">\"US0378331005\"</span>, <span class=\"st0\">\"US0373831005\"</span>, <span class=\"st0\">\"U50378331005\"</span>,<br/>    <span class=\"st0\">\"US03378331005\"</span>, <span class=\"st0\">\"AU0000XVGZA3\"</span>,<span class=\"st0\">\"AU0000VXGZA3\"</span>, <span class=\"st0\">\"FR0000988040\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ISINtest<span class=\"br0\">(</span>isin<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isin0 <span class=\"sy0\">=</span> isin.<span class=\"me1\">trim</span>.<span class=\"me1\">toUpperCase</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> luhnTestS<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> luhnTestN<span class=\"br0\">(</span>digits<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> checksum<span class=\"br0\">(</span>digits<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          digits.<span class=\"me1\">reverse</span>.<span class=\"me1\">zipWithIndex</span><br/>            .<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>sum, <span class=\"br0\">(</span>digit, i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sum + digit<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> sum + <span class=\"br0\">(</span>digit <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> / <span class=\"nu0\">10</span> + <span class=\"br0\">(</span>digit <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>            <span class=\"br0\">}</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        checksum<span class=\"br0\">(</span>digits<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      luhnTestN<span class=\"br0\">(</span>number.<span class=\"me1\">map</span> <span class=\"br0\">{</span> c <span class=\"sy0\">=&gt;</span><br/>        assert<span class=\"br0\">(</span>c.<span class=\"me1\">isDigit</span>, s<span class=\"st0\">\"$number has a non-digit error\"</span><span class=\"br0\">)</span><br/>        c.<span class=\"me1\">asDigit</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isin0.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^[A-Z]{2}[A-Z0-9]{9}<span class=\"es1\">\\\\</span>d$\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span>- isin0.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>Character.<span class=\"me1\">digit</span><span class=\"br0\">(</span>c, <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      luhnTestS<span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  isins.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>isin <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"$isin is ${if (ISINtest(isin)) \"</span><span class=\"st0\">\" else \"</span>not<span class=\"st0\">\"}%s valid\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span>   <span class=\"sy0\">;</span><span class=\"co1\"># mostly needed for [assert].  Substitute a simpler one or a NOP if required.</span></pre>"}, {"lang": "Transact-SQL", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>CREATE FUNCTION dbo._ISINCheck( @strISIN VarChar(40) )<br/>RETURNS bit<br/>AS<br/>BEGIN<br/>--*** Test an ISIN code and return 1 if it is valid, 0 if invalid.<br/>DECLARE @bValid\t bit;<br/>\u00a0<br/>SET @bValid = CASE WHEN @strISIN LIKE '[A-Z][A-Z][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][0-9]' THEN 1 ELSE 0 END<br/>IF @bValid = 1<br/>\tBEGIN<br/>\t\tDECLARE @strTest VarChar(40) = '';<br/>\t\tDECLARE @strAdd  VarChar(2);<br/>\t\tDECLARE @p INT = 0;<br/>\t\tWHILE @p &lt; LEN(@strISIN)<br/>\t\t\tBEGIN<br/>\t\t\t\tSET @p = @p+1;<br/>\t\t\t\tSET @strAdd = SUBSTRING(@strISIN,@p,1);<br/>\t\t\t\tIF @strAdd LIKE '[A-Z]' SET @strAdd = CONVERT(VarChar(2),ASCII(UPPER(@strAdd))-55);<br/>\t\t\t\tSET @strTest = @strTest + @strAdd;<br/>\t\t\tEND;<br/>\u00a0<br/>\t\t-- Proceed with Luhn test<br/>\t\tDECLARE @strLuhn VarChar(40) = REVERSE(@strTest); -- usage: set once, never changed<br/>\t\tDECLARE @strS2Values VarChar(10) = '0246813579';  -- constant: maps digits to their S2 summed values<br/>\t\tSET @p = 0; -- reset loop counter<br/>\t\tDECLARE @intValue INT;<br/>\t\tDECLARE @intSum\tINT = 0;<br/>\t\t-- loop through the reversed string, get the value (even-positioned digits are mapped) and add it to @intSum<br/>\t\tWHILE @p &lt; LEN(@strLuhn)<br/>\t\t\tBEGIN<br/>\t\t\t\tSET @p = @p+1;<br/>\t\t\t\tSET @intValue = CONVERT(INT, SUBSTRING(@strLuhn,@p,1) ) -- value of the digit at position @p in the string<br/>\t\t\t\tIF @p\u00a0% 2 = 0\tSET @intValue = CONVERT(INT,SUBSTRING(@strS2Values,@intValue+1,1))<br/>\t\t\t\tSET @intSum = @intSum + @intValue<br/>\t\t\tEND<br/>\t\t-- If the of the digits' mapped values ends in 0 (modulo 10 = 0) then the Luhn test succeeds<br/>\t\tSET @bValid = CASE WHEN @intSum\u00a0% 10 = 0 THEN 1 ELSE 0 END <br/>\tEND;<br/>\u00a0<br/>RETURN @bValid<br/>END<br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 68, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> MakeIsinCode(Exchange <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, security <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/>    <span class=\"kw4\">Dim</span> numLeadingZeroes <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    numLeadingZeroes = 9 - Len(security)<br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> leader <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    leader = Exchange &amp; <span class=\"kw1\">String</span>(numLeadingZeroes, <span class=\"st0\">\"0\"</span>) &amp; security<br/>\u00a0<br/>    MakeIsinCode = leader &amp; CStr(IsinCheckDigit(leader))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsinCheckDigit(<span class=\"kw4\">ByVal</span> security <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw4\">Dim</span> digits <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(security)<br/>        <span class=\"kw4\">Dim</span> ch <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>        ch = UCase(Mid(security, i, 1))<br/>\u00a0<br/>        <span class=\"kw3\">If</span> ch &gt;= <span class=\"st0\">\"A\"</span> <span class=\"kw3\">And</span> ch &lt;= <span class=\"st0\">\"Z\"</span> <span class=\"kw3\">Then</span><br/>            <span class=\"co1\">' A to Z translated to \"10\", \"11\", .. \"35\"<br/></span>            digits = digits &amp; CStr(Asc(ch) - 55)<br/>        <span class=\"kw3\">ElseIf</span> ch &gt;= <span class=\"st0\">\"0\"</span> <span class=\"kw3\">And</span> ch &lt;= <span class=\"st0\">\"9\"</span> <span class=\"kw3\">Then</span><br/>            digits = digits &amp; ch<br/>        <span class=\"kw3\">Else</span><br/>            Err.Raise 50001, , <span class=\"st0\">\"Security must contain only letters and digits\"</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> total <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw4\">Dim</span> tmp <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    total = 0<br/>\u00a0<br/>    <span class=\"co1\">'If rightmost even, \"other\" digits for doubling are 2,4,6. If rightmost odd, they're 1,3,5.<br/></span>    <span class=\"co1\">'rightmost digit is always doubled, so start with it and work backwards<br/></span>    <span class=\"kw4\">Dim</span> other <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    other = <span class=\"kw5\">True</span><br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = Len(digits) <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>        tmp = CInt(Mid(digits, i, 1))<br/>\u00a0<br/>        <span class=\"kw3\">If</span> other <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">If</span> tmp &lt; 5 <span class=\"kw3\">Then</span><br/>                <span class=\"co1\">' 0 to 4 map to 0,2,4,6,8<br/></span>                total = total + (tmp * 2)<br/>            <span class=\"kw3\">Else</span><br/>                <span class=\"co1\">' 5 to 9 map to 1,3,5,7,9<br/></span>                total = total + ((tmp * 2) - 9)<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Else</span><br/>            total = total + tmp<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>        <span class=\"co1\">'Toggle doubling flag<br/></span>        other = <span class=\"kw3\">Not</span> other<br/>    <span class=\"kw3\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">'Last Mod 10 is to wrap 10 to zero<br/></span>    IsinCheckDigit = (10 - (total <span class=\"kw4\">Mod</span> 10)) <span class=\"kw4\">Mod</span> 10<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn validateISIN(isin){<br/>   RegExp(String(\"^\",\"[A-Z]\"*2,\"[A-Z0-9]\"*9,\"[0-9]$\")).matches(isin) and <br/>      luhnTest(isin.split(\"\").apply(\"toInt\",36).concat().toInt())<br/>}<br/>fcn luhnTest(n){<br/>   0 == (n.split().reverse().reduce(fcn(s,n,clk){<br/>      s + if(clk.inc()%2) n else 2*n%10 + n/5 },0,Ref(1))\u00a0%10)<br/>}</pre>"}]}