{"task": "Church_Numerals", "blocks": [{"lang": "AppleScript", "loc": 150, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> cThree <span class=\"kw3\">to</span> churchFromInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> cFour <span class=\"kw3\">to</span> churchFromInt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>intFromChurch, \u00ac<br/>        <span class=\"br0\">{</span>churchAdd<span class=\"br0\">(</span>cThree, cFour<span class=\"br0\">)</span>, churchMult<span class=\"br0\">(</span>cThree, cFour<span class=\"br0\">)</span>, \u00ac<br/>            churchExp<span class=\"br0\">(</span>cFour, cThree<span class=\"br0\">)</span>, churchExp<span class=\"br0\">(</span>cThree, cFour<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- churchZero\u00a0:: (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> churchZero<span class=\"br0\">(</span>f, x<span class=\"br0\">)</span><br/>    x<br/><span class=\"kw3\">end</span> churchZero<br/>\u00a0<br/><span class=\"co1\">-- churchSucc\u00a0:: ((a -&gt; a) -&gt; a -&gt; a) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> churchSucc<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">property</span> mf\u00a0: mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>mReturn<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(mf)'</span>s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> churchSucc<br/>\u00a0<br/><span class=\"co1\">-- churchFromInt(n)\u00a0:: Int -&gt; (b -&gt; b) -&gt; b -&gt; b</span><br/><span class=\"kw3\">on</span> churchFromInt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            foldr<span class=\"br0\">(</span><span class=\"kw3\">my</span> compose, <span class=\"kw3\">my</span> |<span class=\"kw1\">id</span>|, replicate<span class=\"br0\">(</span>n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> churchFromInt<br/>\u00a0<br/><span class=\"co1\">-- intFromChurch\u00a0:: ((Int -&gt; Int) -&gt; Int -&gt; Int) -&gt; Int</span><br/><span class=\"kw3\">on</span> intFromChurch<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><br/>    mReturn<span class=\"br0\">(</span>cn<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(my succ)'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> intFromChurch<br/>\u00a0<br/><span class=\"kw3\">on</span> churchAdd<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">property</span> mf\u00a0: mReturn<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>                <span class=\"kw3\">property</span> nf\u00a0: mReturn<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    nf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(mf'</span>s |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> churchAdd<br/>\u00a0<br/><span class=\"kw3\">on</span> churchMult<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">property</span> mf\u00a0: mReturn<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>                <span class=\"kw3\">property</span> nf\u00a0: mReturn<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>nf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> churchMult<br/>\u00a0<br/><span class=\"kw3\">on</span> churchExp<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    n<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> churchExp<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- compose (&lt;&lt;&lt;)\u00a0:: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">property</span> mf\u00a0: mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">property</span> mg\u00a0: mReturn<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>mg<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"co1\">-- id\u00a0:: a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw1\">id</span>|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x<br/><span class=\"kw3\">end</span> |<span class=\"kw1\">id</span>|<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, v, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: First-class m =&gt; (a -&gt; b) -&gt; m (a -&gt; b)</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- Egyptian multiplication - progressively doubling a list, appending</span><br/><span class=\"co1\">-- stages of doubling to an accumulator where needed for binary </span><br/><span class=\"co1\">-- assembly of a target length</span><br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- succ\u00a0:: Int -&gt; Int</span><br/><span class=\"kw3\">on</span> succ<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x<br/><span class=\"kw3\">end</span> succ</pre>"}, {"lang": "Go", "loc": 78, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> any <span class=\"sy2\">=</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> fn <span class=\"kw4\">func</span><span class=\"sy1\">(</span>any<span class=\"sy1\">)</span> any<br/>\u00a0<br/><span class=\"kw1\">type</span> church <span class=\"kw4\">func</span><span class=\"sy1\">(</span>fn<span class=\"sy1\">)</span> fn<br/>\u00a0<br/><span class=\"kw4\">func</span> zero<span class=\"sy1\">(</span>f fn<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x any<span class=\"sy1\">)</span> any <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> x<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c church<span class=\"sy1\">)</span> succ<span class=\"sy1\">()</span> church <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>f fn<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x any<span class=\"sy1\">)</span> any <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span>c<span class=\"sy1\">(</span>f<span class=\"sy1\">)(</span>x<span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c church<span class=\"sy1\">)</span> add<span class=\"sy1\">(</span>d church<span class=\"sy1\">)</span> church <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>f fn<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x any<span class=\"sy1\">)</span> any <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> c<span class=\"sy1\">(</span>f<span class=\"sy1\">)(</span>d<span class=\"sy1\">(</span>f<span class=\"sy1\">)(</span>x<span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c church<span class=\"sy1\">)</span> mul<span class=\"sy1\">(</span>d church<span class=\"sy1\">)</span> church <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>f fn<span class=\"sy1\">)</span> fn <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x any<span class=\"sy1\">)</span> any <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> c<span class=\"sy1\">(</span>d<span class=\"sy1\">(</span>f<span class=\"sy1\">))(</span>x<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c church<span class=\"sy1\">)</span> pow<span class=\"sy1\">(</span>d church<span class=\"sy1\">)</span> church <span class=\"sy1\">{</span><br/>    di <span class=\"sy2\">:=</span> d<span class=\"sy3\">.</span>toInt<span class=\"sy1\">()</span><br/>    prod <span class=\"sy2\">:=</span> c<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; di<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        prod <span class=\"sy2\">=</span> prod<span class=\"sy3\">.</span>mul<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> prod<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c church<span class=\"sy1\">)</span> toInt<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> c<span class=\"sy1\">(</span>incr<span class=\"sy1\">)(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> intToChurch<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> church <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> zero<br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> intToChurch<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span>succ<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> incr<span class=\"sy1\">(</span><span class=\"nu2\">i</span> any<span class=\"sy1\">)</span> any <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    z <span class=\"sy2\">:=</span> church<span class=\"sy1\">(</span>zero<span class=\"sy1\">)</span><br/>    three <span class=\"sy2\">:=</span> z<span class=\"sy3\">.</span>succ<span class=\"sy1\">()</span><span class=\"sy3\">.</span>succ<span class=\"sy1\">()</span><span class=\"sy3\">.</span>succ<span class=\"sy1\">()</span><br/>    four <span class=\"sy2\">:=</span> three<span class=\"sy3\">.</span>succ<span class=\"sy1\">()</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"three        -&gt;\"</span><span class=\"sy1\">,</span> three<span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"four         -&gt;\"</span><span class=\"sy1\">,</span> four<span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"three + four -&gt;\"</span><span class=\"sy1\">,</span> three<span class=\"sy3\">.</span><span class=\"me1\">add</span><span class=\"sy1\">(</span>four<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"three * four -&gt;\"</span><span class=\"sy1\">,</span> three<span class=\"sy3\">.</span><span class=\"me1\">mul</span><span class=\"sy1\">(</span>four<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"three ^ four -&gt;\"</span><span class=\"sy1\">,</span> three<span class=\"sy3\">.</span><span class=\"me1\">pow</span><span class=\"sy1\">(</span>four<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"four ^ three -&gt;\"</span><span class=\"sy1\">,</span> four<span class=\"sy3\">.</span><span class=\"me1\">pow</span><span class=\"sy1\">(</span>three<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">toInt</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"5 -&gt; five    -&gt;\"</span><span class=\"sy1\">,</span> intToChurch<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span>toInt<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\">churchZero <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><br/>\u00a0<br/>churchSucc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>\u00a0<br/>churchAdd <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>\u00a0<br/>churchMult <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>\u00a0<br/>churchExp <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><br/>\u00a0<br/>churchFromInt <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span><br/>churchFromInt <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> churchZero<br/>churchFromInt n <span class=\"sy0\">=</span> churchSucc <span class=\"sy0\">$</span> churchFromInt <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Or as a fold:</span><br/><span class=\"co1\">-- churchFromInt n = foldr (.) id . replicate n</span><br/>\u00a0<br/><span class=\"co1\">-- Or as an iterate:</span><br/><span class=\"co1\">-- churchFromInt n = iterate churchSucc churchZero\u00a0!! n</span><br/>\u00a0<br/>intFromChurch <span class=\"sy0\">::</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>intFromChurch cn <span class=\"sy0\">=</span> cn <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- TEST --------------------------------------------</span><br/><span class=\"br0\">[</span>cThree<span class=\"sy0\">,</span> cFour<span class=\"br0\">]</span> <span class=\"sy0\">=</span> churchFromInt <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>  intFromChurch <span class=\"sy0\">&lt;$&gt;</span><br/>  <span class=\"br0\">[</span> churchAdd cThree cFour<br/>  <span class=\"sy0\">,</span> churchMult cThree cFour<br/>  <span class=\"sy0\">,</span> churchExp cFour cThree<br/>  <span class=\"sy0\">,</span> churchExp cThree cFour<br/>  <span class=\"br0\">]</span></pre>"}, {"lang": "JavaScript", "loc": 68, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">const</span> main <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchZero <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchSucc <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>n<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchAdd <span class=\"sy0\">=</span> m <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">=&gt;</span> f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> n<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>m<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchMult <span class=\"sy0\">=</span> m <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">=&gt;</span> f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> n<span class=\"br0\">(</span>m<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchExp <span class=\"sy0\">=</span> m <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">=&gt;</span> n<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> intFromChurch <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> n<span class=\"br0\">(</span>succ<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> churchFromInt <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span><br/>            f <span class=\"sy0\">=&gt;</span> foldl<span class=\"br0\">(</span>composeR<span class=\"sy0\">,</span> id<span class=\"sy0\">,</span> replicate<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Or, recursively ...</span><br/>        <span class=\"co1\">// const churchFromInt = x =&gt; {</span><br/>        <span class=\"co1\">//     const go = i =&gt;</span><br/>        <span class=\"co1\">//         0 === i\u00a0? (</span><br/>        <span class=\"co1\">//             churchZero</span><br/>        <span class=\"co1\">//         )\u00a0: churchSucc(go(i - 1));</span><br/>        <span class=\"co1\">//     return go(x);</span><br/>        <span class=\"co1\">// };</span><br/>\u00a0<br/>        <span class=\"co1\">// TEST -------------------------------------------</span><br/>        <span class=\"kw1\">const</span> <span class=\"br0\">[</span>cThree<span class=\"sy0\">,</span> cFour<span class=\"br0\">]</span> <span class=\"sy0\">=</span> map<span class=\"br0\">(</span>churchFromInt<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> map<span class=\"br0\">(</span><br/>            intFromChurch<span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>                churchAdd<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                churchMult<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                churchExp<span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                churchExp<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// composeR (&gt;&gt;&gt;)\u00a0:: (a -&gt; b) -&gt; (b -&gt; c) -&gt; a -&gt; c</span><br/>    <span class=\"kw1\">const</span> composeR <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/>    <span class=\"kw1\">const</span> foldl <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// id\u00a0:: a -&gt; a</span><br/>    <span class=\"kw1\">const</span> id <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> replicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> n<br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// succ\u00a0:: Enum a =&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> succ <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// MAIN ---------------------</span><br/>    <span class=\"kw1\">return</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 80, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> functools<br/><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/>\u00a0<br/><span class=\"co1\"># CHURCH ENCODINGS ---------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchZero<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> f: <span class=\"kw2\">id</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchSucc<span class=\"br0\">(</span>cn<span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> x: f<span class=\"br0\">(</span>cn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchAdd<span class=\"br0\">(</span>m<span class=\"br0\">)</span>: <br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> n: <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> x: n<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>m<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchMult<span class=\"br0\">(</span>m<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> n: <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> x: n<span class=\"br0\">(</span>m<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchExp<span class=\"br0\">(</span>m<span class=\"br0\">)</span>: <br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> n: n<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> churchFromInt<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> f: <span class=\"br0\">(</span><br/>        foldl<span class=\"br0\">(</span>composeR<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">id</span><span class=\"br0\">)</span><span class=\"br0\">(</span>replicate<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#OR, recursively:</span><br/><span class=\"co1\">#def churchFromInt(n):</span><br/><span class=\"co1\">#    if 0 == n:</span><br/><span class=\"co1\">#        return churchZero()</span><br/><span class=\"co1\">#    else:</span><br/><span class=\"co1\">#        return churchSucc(churchFromInt(n - 1))</span><br/>\u00a0<br/><span class=\"kw1\">def</span> intFromChurch<span class=\"br0\">(</span>cn<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> cn<span class=\"br0\">(</span>succ<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># GENERIC FUNCTIONS -------------------------------</span><br/>\u00a0<br/><span class=\"co1\"># composeR (&gt;&gt;&gt;)\u00a0:: (a -&gt; b) -&gt; (b -&gt; c) -&gt; a -&gt; c</span><br/><span class=\"kw1\">def</span> composeR<span class=\"br0\">(</span>f<span class=\"br0\">)</span>: <br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> g: <span class=\"kw1\">lambda</span> x: f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw1\">def</span> foldl<span class=\"br0\">(</span>f<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> a: <span class=\"kw1\">lambda</span> xs: <span class=\"br0\">(</span><br/>        functools.<span class=\"kw2\">reduce</span><span class=\"br0\">(</span>uncurry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># id\u00a0:: a -&gt; a</span><br/><span class=\"kw1\">def</span> <span class=\"kw2\">id</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> x<br/>\u00a0<br/><span class=\"co1\"># replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw1\">def</span> replicate<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span> x: <span class=\"kw3\">itertools</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># succ\u00a0:: Int -&gt; Int</span><br/><span class=\"kw1\">def</span> succ<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> + x<br/>\u00a0<br/><span class=\"co1\"># uncurry\u00a0:: (a -&gt; b -&gt; c) -&gt; ((a, b) -&gt; c)</span><br/><span class=\"kw1\">def</span> uncurry<span class=\"br0\">(</span>f<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> g<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> g<br/>\u00a0<br/><span class=\"co1\"># MAIN -------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    cThree <span class=\"sy0\">=</span> churchFromInt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    cFour <span class=\"sy0\">=</span> churchFromInt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span>intFromChurch<span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>        churchAdd<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>        churchMult<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        churchExp<span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        churchExp<span class=\"br0\">(</span>cThree<span class=\"br0\">)</span><span class=\"br0\">(</span>cFour<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">class Church{  // kinda heavy, just an int + fcn churchAdd(ca,cb) would also work<br/>   fcn init(N){ var n=N; }\t// Church Zero is Church(0)<br/>   fcn toInt(f,x){ do(n){ x=f(x) } x } // c(3)(f,x) --&gt; f(f(f(x)))<br/>   fcn succ{ self(n+1) }<br/>   fcn __opAdd(c){ self(n+c.n)      }<br/>   fcn __opMul(c){ self(n*c.n)      }<br/>   fcn pow(c)    { self(n.pow(c.n)) }<br/>   fcn toString{ String(\"Church(\",n,\")\") }<br/>}</pre>"}]}