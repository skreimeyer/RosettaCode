{"task": "Arithmetic-geometric_mean", "blocks": [{"lang": "360 Assembly", "loc": 91, "block": "<pre class=\"text highlighted_source\">AGM      CSECT  <br/>         USING  AGM,R13<br/>SAVEAREA B      STM-SAVEAREA(R15)<br/>         DC     17F'0'<br/>         DC     CL8'AGM'<br/>STM      STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15<br/>         ZAP    A,K                a=1<br/>         ZAP    PWL8,K<br/>         MP     PWL8,K<br/>         DP     PWL8,=P'2'<br/>         ZAP    PWL8,PWL8(7)<br/>         BAL    R14,SQRT<br/>         ZAP    G,PWL8             g=sqrt(1/2)<br/>WHILE1   EQU    *                  while a!=g<br/>         ZAP    PWL8,A<br/>         SP     PWL8,G<br/>         CP     PWL8,=P'0'         (a-g)!=0<br/>         BE     EWHILE1<br/>         ZAP    PWL8,A<br/>         AP     PWL8,G<br/>         DP     PWL8,=P'2'<br/>         ZAP    AN,PWL8(7)         an=(a+g)/2<br/>         ZAP    PWL8,A<br/>         MP     PWL8,G<br/>         BAL    R14,SQRT<br/>         ZAP    G,PWL8             g=sqrt(a*g)<br/>         ZAP    A,AN               a=an<br/>         B      WHILE1<br/>EWHILE1  EQU    *<br/>         ZAP    PWL8,A<br/>         UNPK   ZWL16,PWL8<br/>         MVC    CWL16,ZWL16<br/>         OI     CWL16+15,X'F0'<br/>         MVI    CWL16,C'+'<br/>         CP     PWL8,=P'0'<br/>         BNM    *+8<br/>         MVI    CWL16,C'-'<br/>         MVC    CWL80+0(15),CWL16<br/>         MVC    CWL80+9(1),=C'.'   /k  (15-6=9)<br/>         XPRNT  CWL80,80           display a<br/>         L      R13,4(0,R13)<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>         DS     0F<br/>K        DC     PL8'1000000'       10^6 <br/>A        DS     PL8<br/>G        DS     PL8<br/>AN       DS     PL8<br/>* ****** SQRT   *******************<br/>SQRT     CNOP   0,4                function sqrt(x)<br/>         ZAP    X,PWL8<br/>         ZAP    X0,=P'0'           x0=0<br/>         ZAP    X1,=P'1'           x1=1<br/>WHILE2   EQU    *                  while x0!=x1<br/>         ZAP    PWL8,X0<br/>         SP     PWL8,X1<br/>         CP     PWL8,=P'0'         (x0-x1)!=0<br/>         BE     EWHILE2<br/>         ZAP    X0,X1              x0=x1<br/>         ZAP    PWL16,X<br/>         DP     PWL16,X1<br/>         ZAP    XW,PWL16(8)        xw=x/x1<br/>         ZAP    PWL8,X1<br/>         AP     PWL8,XW<br/>         DP     PWL8,=P'2'<br/>         ZAP    PWL8,PWL8(7)<br/>         ZAP    X2,PWL8            x2=(x1+xw)/2<br/>         ZAP    X1,X2              x1=x2<br/>         B      WHILE2<br/>EWHILE2  EQU    *<br/>         ZAP    PWL8,X1            return x1<br/>         BR     R14<br/>         DS     0F<br/>X        DS     PL8<br/>X0       DS     PL8<br/>X1       DS     PL8<br/>X2       DS     PL8<br/>XW       DS     PL8<br/>* end SQRT<br/>PWL8     DC     PL8'0'<br/>PWL16    DC     PL16'0'<br/>CWL80    DC     CL80' '<br/>CWL16    DS     CL16<br/>ZWL16    DS     ZL16<br/>         LTORG  <br/>         YREGS  <br/>         END    AGM</pre>"}, {"lang": "8th", "loc": 15, "block": "<pre class=\"text highlighted_source\">: epsilon  1.0e-12\u00a0;<br/>\u00a0<br/>with: n<br/>\u00a0<br/>: iter  \\ n1 n2 -- n1 n2<br/>    2dup * sqrt &gt;r + 2 / r&gt;\u00a0;<br/>\u00a0<br/>: agn  \\ n1 n2 -- n<br/>    repeat  iter  2dup epsilon ~= not while!  drop\u00a0;<br/>\u00a0<br/>\"agn(1, 1/sqrt(2)) = \" .  1  1 2 sqrt /  agn  \"%.10f\" s:strfmt . cr<br/>\u00a0<br/>;with<br/>bye<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Arith_Geom_Mean <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Num <span class=\"kw1\">is</span> <span class=\"kw3\">digits</span> <span class=\"nu0\">18</span>; <span class=\"co1\">-- the largest value gnat/gcc allows</span><br/>   <span class=\"kw3\">package</span> N_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span><span class=\"br0\">(</span>Num<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> Math <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span><span class=\"br0\">(</span>Num<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> AGM<span class=\"br0\">(</span>A, G: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Num <span class=\"kw1\">is</span><br/>      Old_G: Num;<br/>      New_G: Num\u00a0:= G;<br/>      New_A: Num\u00a0:= A;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         Old_G\u00a0:= New_G;<br/>         New_G\u00a0:= Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>New_A*New_G<span class=\"br0\">)</span>;<br/>         New_A\u00a0:= <span class=\"br0\">(</span>Old_G + New_A<span class=\"br0\">)</span> * <span class=\"nu0\">0.5</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> <span class=\"br0\">(</span>New_A - New_G<span class=\"br0\">)</span> &lt;= Num'Epsilon;<br/>         <span class=\"co1\">-- Num'Epsilon denotes the relative error when performing arithmetic over Num</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> New_G;<br/>   <span class=\"kw1\">end</span> AGM;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   N_IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>AGM<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>/Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">17</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Arith_Geom_Mean;</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">PROC</span> agm <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">IF</span> x <span class=\"sy1\">&lt;</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">0.0</span> <span class=\"kw16\">OR</span> y <span class=\"sy1\">&lt;</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">0.0</span> <span class=\"kw2\">THEN</span> <span class=\"sy1\">-</span><span class=\"kw4\">LONG</span> <span class=\"re1\">1.0</span><br/>      <span class=\"kw2\">ELIF</span> x <span class=\"sy1\">+</span> y <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">0.0</span> <span class=\"kw2\">THEN</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">0.0</span>\t\t<span class=\"co1\">CO Edge cases CO</span><br/>      <span class=\"kw2\">ELSE</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a <span class=\"sy1\">:=</span> x<span class=\"sy1\">,</span> g <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> epsilon <span class=\"sy1\">:=</span> a <span class=\"sy1\">+</span> g<span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> next a <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>a <span class=\"sy1\">+</span> g<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">2.0</span><span class=\"sy1\">,</span> next g <span class=\"sy1\">:=</span> <span class=\"kw24\">long sqrt</span> <span class=\"br0\">(</span>a <span class=\"sy1\">*</span> g<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> next epsilon <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>a <span class=\"sy1\">-</span> g<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t <span class=\"kw2\">WHILE</span> next epsilon <span class=\"sy1\">&lt;</span> epsilon<br/>\t <span class=\"kw2\">DO</span><br/>\t    <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>epsilon<span class=\"sy1\">,</span> <span class=\"st0\">\"   \"</span><span class=\"sy1\">,</span> next epsilon<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t    epsilon <span class=\"sy1\">:=</span> next epsilon<span class=\"sy1\">;</span><br/>\t    a <span class=\"sy1\">:=</span> next a<span class=\"sy1\">;</span> g <span class=\"sy1\">:=</span> next g<span class=\"sy1\">;</span><br/>\t    next a <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>a <span class=\"sy1\">+</span> g<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">2.0</span><span class=\"sy1\">;</span> next g <span class=\"sy1\">:=</span> <span class=\"kw24\">long sqrt</span> <span class=\"br0\">(</span>a <span class=\"sy1\">*</span> g<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t    next epsilon <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>a <span class=\"sy1\">-</span> g<span class=\"br0\">)</span><br/>\t <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t a<br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$l<span class=\"br0\">(</span><span class=\"sy1\">-</span>35<span class=\"sy1\">,</span>33<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> agm <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"re1\">1.0</span><span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">1.0</span> <span class=\"sy1\">/</span> <span class=\"kw24\">long sqrt</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"re1\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>agd\u2190{(\u237a-\u2375)&lt;10*\u00af8:\u237a\u22c4((\u237a+\u2375)\u00f72)\u2207(\u237a\u00d7\u2375)*\u00f72}<br/>1 agd \u00f72*\u00f72<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 59, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- ARITHMETIC GEOMETRIC MEAN -------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw3\">property</span> tolerance\u00a0: 1.0E<span class=\"sy0\">-</span>5<br/>\u00a0<br/><span class=\"co1\">-- agm\u00a0:: Num a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> agm<span class=\"br0\">(</span>a, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> withinTolerance<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> m <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>its an<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>its gn<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> tolerance<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> nextRefinement<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> m<br/>                <span class=\"kw3\">set</span> <span class=\"br0\">{</span>an, gn<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>its an, its gn<span class=\"br0\">}</span><br/>                <span class=\"br0\">{</span>an:<span class=\"br0\">(</span>an <span class=\"sy0\">+</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, gn:<span class=\"br0\">(</span>an <span class=\"sy0\">*</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    an <span class=\"kw3\">of</span> |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>withinTolerance, \u00ac<br/>        nextRefinement, <span class=\"br0\">{</span>an:<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, gn:<span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> agm<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; 0.847213084835</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>p, f, x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> x<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">until</span> mp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> v<br/><span class=\"kw3\">end</span> |<span class=\"kw3\">until</span>|<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"ahk highlighted_source\">agm<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> tolerance<span class=\"sy0\">=</span>1<span class=\"sy0\">.</span>0e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">While</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">abs</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>g<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> tolerance<br/>\t<span class=\"br0\">{</span><br/>\t\tan <span class=\"sy0\">:=</span> <span class=\"sy0\">.</span>5 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span><br/>\t\tg  <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>g<span class=\"br0\">)</span><br/>\t\ta  <span class=\"sy0\">:=</span> an<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> a<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.15</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"%.16g<span class=\"es0\">\\n</span>\"</span>, agm<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>,<span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> agm<span class=\"br0\">(</span>a,g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ta0=a<br/>\t\ta=<span class=\"br0\">(</span>a0<span class=\"sy3\">+</span>g<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><br/>\t\tg=<span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>a0<span class=\"sy3\">*</span>g<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>a0<span class=\"sy3\">-</span>a<span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> abs<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy3\">*</span>1e<span class=\"sy3\">-</span>15<span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span> a<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw6\">return</span> <span class=\"br0\">(</span>x<span class=\"sy2\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy5\">?</span> <span class=\"sy3\">-</span>x <span class=\"sy5\">:</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">10 A = 1<br/>20 G = 1/SQR(2)<br/>30 GOSUB 100<br/>40 PRINT A<br/>50 END<br/>100 TA = A<br/>110 A = (A+G)/2<br/>120 G = SQR(TA*G)<br/>130 IF A&lt;TA THEN 100<br/>140 RETURN</pre>"}, {"lang": "BBC BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      @% = &amp;1010<br/>      PRINT FNagm(1, 1/SQR(2))<br/>      END<br/>\u00a0<br/>      DEF FNagm(a,g)<br/>      LOCAL ta<br/>      REPEAT<br/>        ta = a<br/>        a = (a+g)/2<br/>        g = SQR(ta*g)<br/>      UNTIL a = ta<br/>      = a<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 25, "block": "<pre class=\"text highlighted_source\">/* Calculate the arithmethic-geometric mean of two positive<br/> * numbers x and y.<br/> * Result will have d digits after the decimal point.<br/> */<br/>define m(x, y, d) {<br/>    auto a, g, o<br/>\u00a0<br/>    o = scale<br/>    scale = d<br/>    d = 1 / 10 ^ d<br/>\u00a0<br/>    a = (x + y) / 2<br/>    g = sqrt(x * y)<br/>    while ((a - g) &gt; d) {<br/>        x = (a + g) / 2<br/>        g = sqrt(a * g)<br/>        a = x<br/>    }<br/>\u00a0<br/>    scale = o<br/>    return(a)<br/>}    <br/>\u00a0<br/>scale = 20<br/>m(1, 1 / sqrt(2), 20)</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> agm<span class=\"br0\">(</span> <span class=\"kw4\">double</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> g <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"coMULTI\">/* arithmetic-geometric mean */</span><br/>   <span class=\"kw4\">double</span> iota <span class=\"sy0\">=</span> <span class=\"nu19\">1.0E-16</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> a1<span class=\"sy0\">,</span> g1<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span> a<span class=\"sy0\">*</span>g <span class=\"sy0\">&lt;</span> <span class=\"nu16\">0.0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"arithmetic-geometric mean undefined when x*y&lt;0<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">while</span><span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fabs.html\"><span class=\"kw3\">fabs</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>g<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>iota <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      a1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/>      g1 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      a <span class=\"sy0\">=</span> a1<span class=\"sy0\">;</span><br/>      g <span class=\"sy0\">=</span> g1<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">void</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"Enter two numbers: \"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"%lf%lf\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>y <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"The arithmetic-geometric mean is\u00a0%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> agm<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include&lt;bits/stdc++.h&gt;<br/>using namespace std;<br/>#define _cin\tios_base::sync_with_stdio(0);\tcin.tie(0);<br/>#define rep(a, b)\tfor(ll i =a;i&lt;=b;++i)<br/>\u00a0<br/>double agm(double a, double g)\t\t//ARITHMETIC GEOMETRIC MEAN<br/>{\tdouble epsilon = 1.0E-16,a1,g1;<br/>\tif(a*g&lt;0.0)<br/>\t{\tcout&lt;&lt;\"Couldn't find arithmetic-geometric mean of these numbers\\n\";<br/>\t\texit(1);<br/>\t}<br/>\twhile(fabs(a-g)&gt;epsilon)<br/>\t{\ta1 = (a+g)/2.0;<br/>\t\tg1 = sqrt(a*g);<br/>\t\ta = a1;<br/>\t\tg = g1;<br/>\t}<br/>\treturn a;<br/>}<br/>\u00a0<br/>int main()<br/>{\t_cin;    //fast input-output<br/>\tdouble x, y;<br/>\tcout&lt;&lt;\"Enter X and Y: \";\t//Enter two numbers<br/>\tcin&gt;&gt;x&gt;&gt;y;<br/>\tcout&lt;&lt;\"\\nThe Arithmetic-Geometric Mean of \"&lt;&lt;x&lt;&lt;\" and \"&lt;&lt;y&lt;&lt;\" is \"&lt;&lt;agm(x, y);<br/>return 0;<br/>}<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 78, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">ArithmeticGeometricMean</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Globalization</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> ArithmeticGeometricMean<span class=\"br0\">(</span><span class=\"kw4\">double</span> number,<br/>                                                      <span class=\"kw4\">double</span> otherNumber,<br/>                                                      IEqualityComparer<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><br/>                                                          comparer<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> comparer<span class=\"sy0\">.</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span><br/>                       <span class=\"sy0\">?</span> number<br/>                       <span class=\"sy0\">:</span> ArithmeticGeometricMean<span class=\"br0\">(</span><br/>                           ArithmeticMean<span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span>,<br/>                           GeometricMean<span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span>, comparer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> ArithmeticMean<span class=\"br0\">(</span><span class=\"kw4\">double</span> number, <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>number <span class=\"sy0\">+</span> otherNumber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> GeometricMean<span class=\"br0\">(</span><span class=\"kw4\">double</span> number, <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>number <span class=\"sy0\">*</span> otherNumber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><br/>                ArithmeticGeometricMean<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>                                        <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> RelativeDifferenceComparer<span class=\"br0\">(</span>1e<span class=\"sy0\">-</span>5<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>                    <span class=\"me1\">ToString</span><span class=\"br0\">(</span>CultureInfo<span class=\"sy0\">.</span><span class=\"me1\">InvariantCulture</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">class</span> RelativeDifferenceComparer <span class=\"sy0\">:</span> IEqualityComparer<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">double</span> _maximumRelativeDifference<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">internal</span> RelativeDifferenceComparer<span class=\"br0\">(</span><span class=\"kw4\">double</span> maximumRelativeDifference<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                _maximumRelativeDifference <span class=\"sy0\">=</span> maximumRelativeDifference<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> Equals<span class=\"br0\">(</span><span class=\"kw4\">double</span> number, <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> RelativeDifference<span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span><br/>                       _maximumRelativeDifference<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> GetHashCode<span class=\"br0\">(</span><span class=\"kw4\">double</span> number<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> number<span class=\"sy0\">.</span><span class=\"me1\">GetHashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> RelativeDifference<span class=\"br0\">(</span><span class=\"kw4\">double</span> number,<br/>                                                     <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> AbsoluteDifference<span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span> <span class=\"sy0\">/</span><br/>                       Norm<span class=\"br0\">(</span>number, otherNumber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> AbsoluteDifference<span class=\"br0\">(</span><span class=\"kw4\">double</span> number,<br/>                                                     <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>number <span class=\"sy0\">-</span> otherNumber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> Norm<span class=\"br0\">(</span><span class=\"kw4\">double</span> number, <span class=\"kw4\">double</span> otherNumber<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>otherNumber<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns agmcompute<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Java Arbitray Precision Library</span><br/><span class=\"br0\">(</span>import '<span class=\"br0\">(</span>org<span class=\"sy0\">.</span>apfloat Apfloat ApfloatMath<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def precision <span class=\"nu0\">70</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def one <span class=\"br0\">(</span>Apfloat<span class=\"sy0\">.</span> 1M precision<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def two <span class=\"br0\">(</span>Apfloat<span class=\"sy0\">.</span> 2M precision<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def half <span class=\"br0\">(</span>Apfloat<span class=\"sy0\">.</span> 0<span class=\"sy0\">.</span>5M precision<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def isqrt2 <span class=\"br0\">(</span><span class=\"sy0\">.</span>divide one  <span class=\"br0\">(</span>ApfloatMath/pow two half<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def TOLERANCE <span class=\"br0\">(</span>Apfloat<span class=\"sy0\">.</span> 0<span class=\"sy0\">.</span>000000M precision<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn agm <span class=\"br0\">[</span>a g<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Simple AGM Loop calculation \"</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>THRESH 1e-65                 <span class=\"co1\">; done when error less than threshold or we exceed max loops</span><br/>             MAX-LOOPS <span class=\"nu0\">1000000</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>loop <span class=\"br0\">[</span><span class=\"br0\">[</span>an gn<span class=\"br0\">]</span> <span class=\"br0\">[</span>a g<span class=\"br0\">]</span><span class=\"sy0\">,</span> cnt <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>ApfloatMath/<span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>subtract an gn<span class=\"br0\">)</span><span class=\"br0\">)</span> THRESH<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> cnt MAX-LOOPS<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              an<br/>              <span class=\"br0\">(</span>recur <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>multiply <span class=\"br0\">(</span><span class=\"sy0\">.</span>add an gn<span class=\"br0\">)</span> half<span class=\"br0\">)</span> <span class=\"br0\">(</span>ApfloatMath/pow <span class=\"br0\">(</span><span class=\"sy0\">.</span>multiply an gn<span class=\"br0\">)</span> half<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                     <span class=\"br0\">(</span>inc cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println  <span class=\"br0\">(</span>agm one isqrt2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 33, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> ARITHMETIC-GEOMETRIC-MEAN-PROG<span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  AGM-VARS<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> A       <span class=\"kw3\">PIC</span> 9V9<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> A-<span class=\"kw3\">ZERO</span>  <span class=\"kw3\">PIC</span> 9V9<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> G       <span class=\"kw3\">PIC</span> 9V9<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> DIFF    <span class=\"kw3\">PIC</span> 9V9<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/><span class=\"co1\">* Initialize DIFF with a non-zero value, otherwise AGM-PARAGRAPH</span><br/><span class=\"co1\">* is never performed at all.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>TEST-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span>    <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> A<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">COMPUTE</span> G <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\"> / </span><span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"co1\">* The program will run with the test values. If you would rather</span><br/><span class=\"co1\">* calculate the AGM of numbers input at the console, comment out</span><br/><span class=\"co1\">* TEST-PARAGRAPH and un-comment-out INPUT-A-AND-G-PARAGRAPH.</span><br/><span class=\"co1\">* INPUT-A-AND-G-PARAGRAPH.</span><br/><span class=\"co1\">*     DISPLAY 'Enter two numbers.'</span><br/><span class=\"co1\">*     ACCEPT  A.</span><br/><span class=\"co1\">*     ACCEPT  G.</span><br/>CONTROL-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> AGM-PARAGRAPH <span class=\"kw2\">UNTIL</span> DIFF <span class=\"kw3\">IS</span> <span class=\"kw3\">LESS</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">0.000000000000001</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> A<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>AGM-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span>     A <span class=\"kw2\">TO</span> A-<span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">COMPUTE</span>  A <span class=\"sy0\">=</span> <span class=\"br0\">(</span>A-<span class=\"kw3\">ZERO</span><span class=\"sy0\"> + </span>G<span class=\"br0\">)</span><span class=\"sy0\"> / </span><span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MULTIPLY</span> A-<span class=\"kw3\">ZERO</span> <span class=\"kw3\">BY</span> G <span class=\"kw2\">GIVING</span> G<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">COMPUTE</span>  G <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>G<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SUBTRACT</span> A <span class=\"kw3\">FROM</span> G <span class=\"kw2\">GIVING</span> DIFF<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">COMPUTE</span>  DIFF <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> ABS<span class=\"br0\">(</span>DIFF<span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> agm <span class=\"br0\">(</span>a0 g0 <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>tolerance 1d-<span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for a <span class=\"sy0\">=</span> a0 then <span class=\"br0\">(</span>* <span class=\"br0\">(</span>+ a g<span class=\"br0\">)</span> 5d-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">and</span> g <span class=\"sy0\">=</span> g0 then <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>* a g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     until <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>- a g<span class=\"br0\">)</span><span class=\"br0\">)</span> tolerance<span class=\"br0\">)</span><br/>     finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">meta</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">real</span> agm<span class=\"br0\">(</span><span class=\"kw4\">real</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> g<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> bitPrecision<span class=\"sy0\">=</span><span class=\"nu0\">60</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//{a, g} = {(a + g) / 2.0, sqrt(a * g)};</span><br/>        AliasSeq<span class=\"sy0\">!</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=</span> tuple<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> sqrt<span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>feqrel<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> bitPrecision<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%0.19f\"</span><span class=\"sy0\">,</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> sqrt<span class=\"br0\">(</span><span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>agm a g<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>~<span class=\"sy0\">=</span> a g<span class=\"br0\">)</span> a <br/>       <span class=\"br0\">(</span>agm <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a g <span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>math<span class=\"sy0\">-</span>precision<span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">0.000001</span> <span class=\"co1\">;; default</span><br/><span class=\"br0\">(</span>agm <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">0.8472130848351929</span><br/><span class=\"br0\">(</span>math<span class=\"sy0\">-</span>precision 1.e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span><br/>    \u2192 1e<span class=\"sy0\">-</span>15<br/><span class=\"br0\">(</span>agm <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">0.8472130847939792</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule ArithhGeom do<br/>  def mean(a,g,tol) when abs(a-g) &lt;= tol, do: a<br/>  def mean(a,g,tol) do<br/>    mean((a+g)/2,:math.pow(a*g, 0.5),tol)<br/>  end<br/>end<br/>\u00a0<br/>IO.puts ArithhGeom.mean(1,1/:math.sqrt(2),0.0000000001)</pre>"}, {"lang": "Erlang", "loc": 19, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% Arithmetic Geometric Mean of 1 and 1 / sqrt(2)</span><br/><span class=\"co1\">%% Author: Abhay Jain</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>agm_calculator<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>find_agm<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">TOLERANCE</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.0000000001</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">find_agm</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">A</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">B</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">AGM</span> <span class=\"sy3\">=</span> <span class=\"re3\">agm</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"AGM = ~p\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">AGM</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">agm</span> <span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">-</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span>\u00a0?<span class=\"re4\">TOLERANCE</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">A</span><span class=\"sy1\">;</span><br/><span class=\"re3\">agm</span> <span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">A1</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">B1</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">agm</span><span class=\"br0\">(</span><span class=\"re5\">A1</span><span class=\"sy1\">,</span> <span class=\"re5\">B1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM AGM<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>PROCEDURE AGM(A,G-&gt;A)<br/>   LOCAL TA<br/>   REPEAT<br/>      TA=A<br/>      A=(A+G)/2<br/>      G=SQR(TA*G)<br/>   UNTIL A=TA<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   AGM(1.0,1/SQR(2)-&gt;A)<br/>   PRINT(A)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> agm a g precision  <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> precision <span class=\"sy0\">&gt;</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span>a <span class=\"sy0\">-</span> g<span class=\"br0\">)</span> <span class=\"kw1\">then</span> a <span class=\"kw1\">else</span><br/>    agm <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">sqrt</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span> precision<br/>\u00a0<br/>printfn <span class=\"st0\">\"%g\"</span> <span class=\"br0\">(</span>agm <span class=\"nu0\">1</span>. <span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> 1e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.functions prettyprint\u00a0;<br/>IN: rosetta-code.arithmetic-geometric-mean<br/>\u00a0<br/>: agm ( a g -- a' g' ) 2dup [ + 0.5 * ] 2dip * sqrt\u00a0;<br/>\u00a0<br/>1 1 2 sqrt / [ 2dup - 1e-15 &gt; ] [ agm ] while drop .</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: agm ( a g -- m )<br/>  begin<br/>    fover fover f+ 2e f/<br/>    frot frot f* fsqrt<br/>    fover fover 1e-15 f~<br/>  until<br/>  fdrop\u00a0;<br/>\u00a0<br/>1e  2e -0.5e f**  agm f.   \\ 0.847213084793979</pre>"}, {"lang": "Fortran", "loc": 15, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">function</span> agm<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> agm,a,b,eps,c<br/>      <span class=\"kw3\">parameter</span><span class=\"br0\">(</span>eps<span class=\"sy0\">=</span>1.0d<span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>   <span class=\"nu0\">10</span> c<span class=\"sy0\">=</span>0.5d0<span class=\"sy0\">*</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><br/>      b<span class=\"sy0\">=</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/>      a<span class=\"sy0\">=</span>c<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>b.<span class=\"me1\">gt</span>.<span class=\"me1\">eps</span><span class=\"sy0\">*</span>a<span class=\"br0\">)</span> <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>      agm<span class=\"sy0\">=</span>0.5d0<span class=\"sy0\">*</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">program</span> test<br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> agm<br/>      print<span class=\"sy0\">*</span>,agm<span class=\"br0\">(</span>1.0d0,1.0d0<span class=\"sy0\">/</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>2.0d0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span></pre>"}, {"lang": "FreeBASIC", "loc": 26, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 16-09-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> agm<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, g <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> t_a <br/>\u00a0<br/>    <span class=\"kw1\">Do</span><br/>        t_a = <span class=\"br0\">(</span>a + g<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>        g = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>a * g<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Swap</span> a, t_a<br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> a = t_a<br/>\u00a0<br/>    <span class=\"kw1\">Return</span> a<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> / <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer </span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Futhark", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import \"futlib/math\"<br/>\u00a0<br/>fun agm(a: f64, g: f64): f64 =<br/>  let eps = 1.0E-16<br/>  loop ((a,g)) = while f64.abs(a-g) &gt; eps do<br/>    ((a+g) / 2.0,<br/>     f64.sqrt (a*g))<br/>  in a<br/>\u00a0<br/>fun main(x: f64, y: f64): f64 =<br/>  agm(x,y)<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> \u03b5 <span class=\"sy2\">=</span> 1e<span class=\"sy3\">-</span><span class=\"nu0\">14</span><br/>\u00a0<br/><span class=\"kw4\">func</span> agm<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> g <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>a<span class=\"sy3\">-</span>g<span class=\"sy1\">)</span> &gt; math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><span class=\"sy3\">*</span>\u03b5 <span class=\"sy1\">{</span><br/>        a<span class=\"sy1\">,</span> g <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>a<span class=\"sy3\">+</span>g<span class=\"sy1\">)</span><span class=\"sy3\">*.</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>a<span class=\"sy3\">*</span>g<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>agm<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>math<span class=\"sy3\">.</span>Sqrt2<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> agm <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> a, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> an <span class=\"sy0\">=</span> a, gn <span class=\"sy0\">=</span> g<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>an<span class=\"sy0\">-</span>gn<span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">10.0</span><span class=\"sy0\">**-</span><span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>an, gn<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>an<span class=\"sy0\">+</span>gn<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span>, <span class=\"br0\">(</span>an<span class=\"sy0\">*</span>gn<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    an<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- Return an approximation to the arithmetic-geometric mean of two numbers.</span><br/><span class=\"co1\">-- The result is considered accurate when two successive approximations are</span><br/><span class=\"co1\">-- sufficiently close, as determined by \"eq\".</span><br/>agm <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<br/>agm a g eq <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> eq<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> step <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> step <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Return the relative difference of the pair.  We assume that at least one of</span><br/><span class=\"co1\">-- the values is far enough from 0 to not cause problems.</span><br/>relDiff <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<br/>relDiff <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> <br/>                     d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>                 <span class=\"kw1\">in</span> n <span class=\"sy0\">/</span> d<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> equal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.000000001</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> relDiff<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> agm <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">2</span><span class=\"br0\">)</span> equal</pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"text highlighted_source\">procedure main(A)<br/>    a\u00a0:= real(A[1]) | 1.0<br/>    g\u00a0:= real(A[2]) | (1 / 2^0.5)<br/>    epsilon\u00a0:= real(A[3])<br/>    write(\"agm(\",a,\",\",g,\") = \",agm(a,g,epsilon))<br/>end<br/>\u00a0<br/>procedure agm(an, gn, e)<br/>    /e\u00a0:= 1e-15<br/>    while abs(an-gn) &gt; e do {<br/>       ap\u00a0:= (an+gn)/2.0<br/>       gn\u00a0:= (an*gn)^0.5<br/>       an\u00a0:= ap<br/>       }<br/>    return an<br/>end</pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">mean=: +/\u00a0% #<br/>   <span class=\"sy0\">(</span>mean , */\u00a0%:~ #<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span>] <span class=\"nu0\">1</span>,%%:<span class=\"nu0\">2</span><br/><span class=\"nu0\">0.8472130847939792</span> <span class=\"nu0\">0.8472130847939791</span></pre>"}, {"lang": "Java", "loc": 23, "block": "<pre class=\"java highlighted_source\"><span class=\"coMULTI\">/*<br/> * Arithmetic-Geometric Mean of 1 &amp; 1/sqrt(2)<br/> * Brendan Shaklovitz<br/> * 5/29/12<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ArithmeticGeometricMean <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> agm<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> a1 <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> g1 <span class=\"sy0\">=</span> g<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a1 <span class=\"sy0\">-</span> g1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> 1.0e<span class=\"sy0\">-</span>14<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> arith <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">+</span> g1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> geom <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> g1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            a1 <span class=\"sy0\">=</span> arith<span class=\"sy0\">;</span><br/>            g1 <span class=\"sy0\">=</span> geom<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> a1<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>agm<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> agm<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> g0<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> an <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a0 <span class=\"sy0\">+</span> g0<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>        gn <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a0 <span class=\"sy0\">*</span> g0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>an <span class=\"sy0\">-</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> tolerance<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        an <span class=\"sy0\">=</span> <span class=\"br0\">(</span>an <span class=\"sy0\">+</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> gn <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>an <span class=\"sy0\">*</span> gn<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> an<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">def naive_agm(a; g; tolerance):<br/>  def abs: if . &lt; 0 then -. else . end;<br/>  def _agm:<br/>     # state [an,gn]<br/>     if ((.[0] - .[1])|abs) &gt; tolerance <br/>     then [add/2, ((.[0] * .[1])|sqrt)] | _agm <br/>     else .<br/>     end;<br/>  [a, g] | _agm | .[0]\u00a0;</pre>"}, {"lang": "Julia", "loc": 21, "block": "<pre class=\"text highlighted_source\">function agm(x::T, y::T, e::Real = 5) where T&lt;:AbstractFloat<br/>    if x \u2264 0 || y \u2264 0 || e \u2264 0 throw(DomainError(\"x, y must be strictly positive\")) end<br/>    err = e * eps(x)<br/>    g, a = minmax(x, y)<br/>    while err &lt; (a - g)<br/>        a, g = (a + g) / 2, sqrt(a * g)<br/>    end<br/>    return a<br/>end<br/>\u00a0<br/>x = 1.0<br/>y = 1 / \u221a2<br/>\u00a0<br/>println(\"# Using literal-precision float numbers:\")<br/>@show agm(x, y)<br/>println(\"# Using half-precision float numbers:\")<br/>x, y = Float32(x), Float32(y)<br/>@show agm(x, y)<br/>println(\"# Using \", precision(BigFloat), \"-bit float numbers:\")<br/>x, y = big(1.0), 1 / \u221abig(2.0)<br/>@show agm(x, y)</pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/>fun agm<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Double, g<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> aa <span class=\"sy0\">=</span> a             <span class=\"co1\">// mutable 'a'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> gg <span class=\"sy0\">=</span> g             <span class=\"co1\">// mutable 'g'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ta<span class=\"sy0\">:</span> Double         <span class=\"co1\">// temporary variable to hold next iteration of 'aa'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> epsilon <span class=\"sy0\">=</span> 1.0e-16  <span class=\"co1\">// tolerance for checking if limit has been reached</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ta <span class=\"sy0\">=</span> <span class=\"br0\">(</span>aa + gg<span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>aa - ta<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> epsilon<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ta<br/>        gg <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>aa <span class=\"sy0\">*</span> gg<span class=\"br0\">)</span><br/>        aa <span class=\"sy0\">=</span> ta<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>agm<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span> / Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 17, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> agm <span class=\"br0\">(</span>a g<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>agm a g 1<span class=\"sy0\">.</span>0e-15<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> agm <span class=\"br0\">(</span>a g tol<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=&lt;</span> <span class=\"br0\">(</span>- a g<span class=\"br0\">)</span> tol<span class=\"br0\">)</span><br/>    a<br/>    <span class=\"br0\">(</span>agm <span class=\"br0\">(</span>next-a a g<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>next-g a g<span class=\"br0\">)</span><br/>         tol<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next-a <span class=\"br0\">(</span>a g<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ a g<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next-g <span class=\"br0\">(</span>a g<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>math<span class=\"sy0\">:</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>* a g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 16, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span><span class=\"st0\">\"#.#################\"</span><span class=\"sy0\">,</span>agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">function</span> agm<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>g<span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span><br/>        absdiff <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>g<span class=\"br0\">)</span><br/>        an<span class=\"sy0\">=</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>g<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>        gn<span class=\"sy0\">=</span><span class=\"kw2\">sqr</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>g<span class=\"br0\">)</span><br/>        a<span class=\"sy0\">=</span>an<br/>        g<span class=\"sy0\">=</span>gn<br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>an<span class=\"sy0\">-</span>gn<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span> absdiff<br/>    agm <span class=\"sy0\">=</span> a<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "LiveCode", "loc": 13, "block": "<pre class=\"text highlighted_source\">function agm aa,g<br/>    put abs(aa-g) into absdiff <br/>    put (aa+g)/2 into aan<br/>    put sqrt(aa*g) into gn<br/>    repeat while abs(aan - gn) &lt; absdiff<br/>        put abs(aa-g) into absdiff <br/>        put (aa+g)/2 into aan<br/>        put sqrt(aa*g) into gn<br/>        put aan into aa<br/>        put gn into g<br/>    end repeat<br/>    return aa<br/>end agm</pre>"}, {"lang": "Logo", "loc": 10, "block": "<pre class=\"text highlighted_source\">to about\u00a0:a\u00a0:b<br/>  output and [:a -\u00a0:b &lt; 1e-15] [:a -\u00a0:b &gt; -1e-15]<br/>end<br/>to agm\u00a0:arith\u00a0:geom<br/>  if about\u00a0:arith\u00a0:geom [output\u00a0:arith]<br/>  output agm (:arith +\u00a0:geom)/2  sqrt (:arith *\u00a0:geom)<br/>end<br/>\u00a0<br/>show agm 1 1/sqrt 2<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> agm<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> tolerance<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> tolerance <span class=\"kw2\">or</span> tolerance <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1e-15</span> <span class=\"kw1\">then</span><br/>        tolerance <span class=\"sy0\">=</span> <span class=\"nu0\">1e-15</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">repeat</span><br/>        a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">until</span> <span class=\"kw3\">math.abs</span><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> tolerance<br/>    <span class=\"kw1\">return</span> a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%.15f\"</span><span class=\"sy0\">,</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Function Agm {<br/>      \\\\ new stack constructed at calling the Agm() with two values<br/>            Repeat {<br/>                  Read a0, b0<br/>                  Push  Sqrt(a0*b0), (a0+b0)/2<br/>                  ' last pushed first read <br/>            } Until Stackitem(1)==Stackitem(2)<br/>            =Stackitem(1)<br/>            \\\\ stack deconstructed at exit of function<br/>      } <br/>      Print Agm(1,1/Sqrt(2))<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; evalf( GaussAGM( 1, 1 / sqrt( 2 ) ) ); # default precision is 10 digits<br/>                              0.8472130847<br/>\u00a0<br/>&gt; evalf[100]( GaussAGM( 1, 1 / sqrt( 2 ) ) ); # to 100 digits<br/>0.847213084793979086606499123482191636481445910326942185060579372659\\<br/>    7340048341347597232002939946112300<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">PrecisionDigits = 85;<br/>AGMean[a_, b_]\u00a0:= FixedPoint[{ <a class=\"__cf_email__\" data-cfemail=\"41153301\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#/2, Sqrt[<a class=\"__cf_email__\" data-cfemail=\"da8eb3b7bfa99a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@#] }&amp;, N[{a,b}, PrecisionDigits]]\u301a1\u301b</pre>"}, {"lang": "MATLAB / Octave", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>a,g<span class=\"br0\">]</span>=agm<span class=\"br0\">(</span>a,g<span class=\"br0\">)</span><br/><span class=\"co1\">%%arithmetic_geometric_mean(a,g)</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\ta0=a;<br/>\t\ta=<span class=\"br0\">(</span>a0+g<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>;<br/>\t\tg=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>a0*g<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>a0-a<span class=\"br0\">)</span> &lt; a*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eps.html\"><span class=\"kw2\">eps</span></a><span class=\"br0\">)</span> <span class=\"kw1\">break</span>; <span class=\"kw1\">end</span>; <br/>\t<span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">agm(a, b)\u00a0:=\u00a0%pi/4*(a + b)/elliptic_kc(((a - b)/(a + b))^2)$<br/>\u00a0<br/>agm(1, 1/sqrt(2)), bfloat, fpprec: 85;<br/>/* 8.472130847939790866064991234821916364814459103269421850605793726597340048341347597232b-1 */</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u041f1\t&lt;-&gt;\t\u041f0\t1\t\u0412\u041f\t8\t/-/\t\u041f2\t\u0418\u041f0\t\u0418\u041f1<br/>-\t\u0418\u041f2\t-\t/-/\tx&lt;0\t31\t\u0418\u041f1\t\u041f3\t\u0418\u041f0\t\u0418\u041f1<br/>*\t\u041a\u0432\u041a\u043e\u0440\t\u041f1\t\u0418\u041f0\t\u0418\u041f3\t+\t2\t/\t\u041f0\t\u0411\u041f<br/>08\t\u0418\u041f0\t\u0421/\u041f</pre>"}, {"lang": "NetRexx", "loc": 25, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">18</span><br/><span class=\"kw1\">parse</span> arg a_ g_ .<br/><span class=\"kw1\">if</span> a_ = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> a_ = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> a0 = <span class=\"nu0\">1</span><br/>                      <span class=\"kw3\">else</span> a0 = a_<br/><span class=\"kw1\">if</span> g_ = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> g_ = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> g0 = <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> Math.<span class=\"me0\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                      <span class=\"kw3\">else</span> g0 = g_<br/>\u00a0<br/><span class=\"kw1\">say</span> agm<span class=\"br0\">(</span>a0, g0<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method agm<span class=\"br0\">(</span>a0, g0<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  a1 = a0<br/>  g1 = g0<br/>  <span class=\"kw1\">loop</span> while <span class=\"br0\">(</span>a1 - g1<span class=\"br0\">)</span>.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= Math.<span class=\"me0\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, -<span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>    temp = <span class=\"br0\">(</span>a1 + g1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    g1 = Math.<span class=\"me0\">sqrt</span><span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> g1<span class=\"br0\">)</span><br/>    a1 = temp<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> a1 + <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc agm(a, g: float,delta: float = 1.0e-15): float =<br/>  var <br/>    aNew: float = 0<br/>    aOld: float = a<br/>    gOld: float = g<br/>  while (abs(aOld - gOld) &gt; delta):<br/>    aNew = 0.5 * (aOld + gOld)<br/>    gOld = sqrt(aOld * gOld)<br/>    aOld = aNew<br/>  result = aOld<br/>\u00a0<br/>echo $agm(1.0,1.0/sqrt(2.0))</pre>"}, {"lang": "Oberon-2", "loc": 27, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Agm;<br/><span class=\"kw1\">IMPORT</span><br/>  Math <span class=\"sy0\">:=</span> LRealMath<span class=\"sy0\">,</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">CONST</span><br/>  epsilon <span class=\"sy0\">=</span> 1.0E<span class=\"sy0\">-</span>15;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Of<span class=\"sy0\">*</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>g<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">VAR</span><br/>  na<span class=\"sy0\">,</span>ng<span class=\"sy0\">,</span>og<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  na <span class=\"sy0\">:=</span> a; ng <span class=\"sy0\">:=</span> g;<br/>  <span class=\"kw1\">LOOP</span><br/>    og <span class=\"sy0\">:=</span> ng;<br/>    ng <span class=\"sy0\">:=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>na <span class=\"sy0\">*</span> ng<span class=\"br0\">)</span>; <br/>    na <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>na <span class=\"sy0\">+</span> og<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.5</span>;<br/>    <span class=\"kw1\">IF</span> na <span class=\"sy0\">-</span> ng &lt;<span class=\"sy0\">=</span> epsilon <span class=\"kw1\">THEN</span> <span class=\"kw1\">EXIT</span> <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> ng;<br/><span class=\"kw1\">END</span> Of;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span> <br/>  Out.<span class=\"me1\">LongReal</span><span class=\"br0\">(</span>Of<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Agm.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> ArithmeticMean <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Amg<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> g <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    a1 <span class=\"sy0\">:=</span> a<span class=\"sy0\">;</span><br/>    g1 <span class=\"sy0\">:=</span> g<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a1<span class=\"sy0\">-</span>g1<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Power</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>a1<span class=\"sy0\">+</span>g1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>        g1 <span class=\"sy0\">:=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span>a1<span class=\"sy0\">*</span>g1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        a1 <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    a1<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Amg<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> agm a g tol <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> tol <span class=\"sy0\">&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs_float\"><span class=\"kw3\">abs_float</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">-.</span> g<span class=\"br0\">)</span> <span class=\"kw1\">then</span> a <span class=\"kw1\">else</span><br/>  agm <span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"sy0\">*.</span><span class=\"br0\">(</span>a<span class=\"sy0\">+.</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>a<span class=\"sy0\">*.</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span> tol<br/>\u00a0<br/><span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%.16f\\n\"</span> <span class=\"br0\">(</span>agm <span class=\"nu0\">1.0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> 1e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: agm   \\ a b -- m<br/>   while( 2dup &lt;&gt; ) [ 2dup + 2 / -rot * sqrt ] drop\u00a0;</pre>"}, {"lang": "OOC", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import math // import for sqrt() function<br/>\u00a0<br/>amean: func (x: Double, y: Double) -&gt; Double {<br/>  (x + y) / 2.<br/>}<br/>gmean: func (x: Double, y: Double) -&gt; Double {<br/>  sqrt(x * y)<br/>}<br/>agm: func (a: Double, g: Double) -&gt; Double {<br/>  while ((a - g) abs() &gt; pow(10, -12)) {<br/>    (a1, g1)\u00a0:= (amean(a, g), gmean(a, g))<br/>    (a, g) = (a1, g1)<br/>  }<br/>  a<br/>}<br/>\u00a0<br/>main: func {<br/>  \"%.16f\" printfln(agm(1., sqrt(0.5)))<br/>}<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 20, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">say</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"sy0\">/</span>rxcalcsqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>::routine agm<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> a, g<br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  a1 = a<br/>  g1 = g<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>a1 - g1<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= 1e-14<br/>      temp = <span class=\"br0\">(</span>a1 + g1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>      g1 = rxcalcsqrt<span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> g1<span class=\"br0\">)</span><br/>      a1 = temp<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">9</span><br/>  <span class=\"kw1\">return</span> a1+<span class=\"nu0\">0</span><br/>\u00a0<br/>::requires rxmath LIBRARY<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">agm</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 35, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> ArithmeticGeometricMean<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  gmp<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> agm <span class=\"br0\">(</span>in1<span class=\"sy1\">,</span> in2<span class=\"sy1\">:</span> mpf_t<span class=\"sy1\">;</span> <span class=\"kw1\">var</span> out1<span class=\"sy1\">,</span> out2<span class=\"sy1\">:</span> mpf_t<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  mpf_add <span class=\"br0\">(</span>out1<span class=\"sy1\">,</span> in1<span class=\"sy1\">,</span> in2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_div_ui <span class=\"br0\">(</span>out1<span class=\"sy1\">,</span> out1<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_mul <span class=\"br0\">(</span>out2<span class=\"sy1\">,</span> in1<span class=\"sy1\">,</span> in2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_sqrt <span class=\"br0\">(</span>out2<span class=\"sy1\">,</span> out2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  nl <span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> resA<span class=\"sy1\">,</span> resB<span class=\"sy1\">:</span> mpf_t<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  mpf_set_default_prec <span class=\"br0\">(</span><span class=\"nu0\">65568</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  mpf_init_set_ui <span class=\"br0\">(</span>y0<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_init_set_d <span class=\"br0\">(</span>x0<span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_sqrt <span class=\"br0\">(</span>x0<span class=\"sy1\">,</span> x0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_init <span class=\"br0\">(</span>resA<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpf_init <span class=\"br0\">(</span>resB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    agm<span class=\"br0\">(</span>x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> resA<span class=\"sy1\">,</span> resB<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    agm<span class=\"br0\">(</span>resA<span class=\"sy1\">,</span> resB<span class=\"sy1\">,</span> x0<span class=\"sy1\">,</span> y0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  mp_printf <span class=\"br0\">(</span><span class=\"st0\">'%.20000Ff'</span><span class=\"sy3\">+</span>nl<span class=\"sy1\">,</span> <span class=\"sy2\">@</span>x0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mp_printf <span class=\"br0\">(</span><span class=\"st0\">'%.20000Ff'</span><span class=\"sy3\">+</span>nl<span class=\"sy3\">+</span>nl<span class=\"sy1\">,</span> <span class=\"sy2\">@</span>y0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -w</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a0</span><span class=\"sy0\">,</span> <span class=\"re0\">$g0</span><span class=\"sy0\">,</span> <span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$g1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> agm<span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a0</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$g0</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$g0</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <br/>        <span class=\"re0\">$g1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$a0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$g0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"re0\">$a0</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$g1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <br/>        <span class=\"re0\">$g0</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$a1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$g1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$a0</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$a1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$a0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> agm<span class=\"br0\">(</span> <span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">$g</span> <span class=\"kw1\">is</span> copy <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">sqrt</span> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$g</span> <span class=\"kw1\">until</span> <span class=\"re0\">$a</span> \u2245 <span class=\"re0\">$g</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> agm <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw3\">sqrt</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function agm(atom a, atom g, atom tolerance=1.0e-15)<br/>    while abs(a-g)&gt;tolerance do<br/>        {a,g} = {(a + g)/2,sqrt(a*g)}<br/>        printf(1,\"%0.15g\\n\",a)<br/>    end while<br/>    return a<br/>end function<br/>?agm(1,1/sqrt(2))   -- (rounds to 10 d.p.)</pre>"}, {"lang": "PHP", "loc": 24, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'PRECISION'</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> agm<span class=\"br0\">(</span><span class=\"re0\">$a0</span><span class=\"sy0\">,</span> <span class=\"re0\">$g0</span><span class=\"sy0\">,</span> <span class=\"re0\">$tolerance</span> <span class=\"sy0\">=</span> <span class=\"nu19\">1e-10</span><span class=\"br0\">)</span>                                                                                                    <br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// the bc extension deals in strings and cannot convert</span><br/>    <span class=\"co1\">// floats in scientific notation by itself - hence</span><br/>    <span class=\"co1\">// this manual conversion to a string</span><br/>    <span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/number_format\"><span class=\"kw3\">number_format</span></a><span class=\"br0\">(</span><span class=\"re0\">$tolerance</span><span class=\"sy0\">,</span> PRECISION<span class=\"sy0\">,</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$an</span>    <span class=\"sy0\">=</span> <span class=\"re0\">$a0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$gn</span>    <span class=\"sy0\">=</span> <span class=\"re0\">$g0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$an</span><span class=\"sy0\">,</span> <span class=\"re0\">$gn</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><br/>            <a href=\"http://www.php.net/bcdiv\"><span class=\"kw3\">bcdiv</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/bcadd\"><span class=\"kw3\">bcadd</span></a><span class=\"br0\">(</span><span class=\"re0\">$an</span><span class=\"sy0\">,</span> <span class=\"re0\">$gn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <br/>            <a href=\"http://www.php.net/bcsqrt\"><span class=\"kw3\">bcsqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/bcmul\"><span class=\"kw3\">bcmul</span></a><span class=\"br0\">(</span><span class=\"re0\">$an</span><span class=\"sy0\">,</span> <span class=\"re0\">$gn</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/bccomp\"><span class=\"kw3\">bccomp</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/bcsub\"><span class=\"kw3\">bcsub</span></a><span class=\"br0\">(</span><span class=\"re0\">$an</span><span class=\"sy0\">,</span> <span class=\"re0\">$gn</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$limit</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$an</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.php.net/bcscale\"><span class=\"kw3\">bcscale</span></a><span class=\"br0\">(</span>PRECISION<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <a href=\"http://www.php.net/bcsqrt\"><span class=\"kw3\">bcsqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(scl 80)<br/>\u00a0<br/>(de agm (A G)<br/>   (do 7<br/>      (prog1 (/ (+ A G) 2)<br/>         (setq G (sqrt A G)  A @) ) ) )<br/>\u00a0<br/>(round<br/>   (agm 1.0 (*/ 1.0 1.0 (sqrt 2.0 1.0)))<br/>   70 )</pre>"}, {"lang": "PL/I", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>arithmetic_geometric_mean:           /* 31 August 2012 */<br/>   procedure options (main);<br/>   declare (a, g, t) float (18);<br/>\u00a0<br/>   a = 1; g = 1/sqrt(2.0q0);<br/>   put skip list ('The arithmetic-geometric mean of ' || a || ' and ' || g || ':');<br/>   do until (abs(a-g) &lt; 1e-15*a);<br/>      t = (a + g)/2; g = sqrt(a*g);<br/>      a = t;<br/>      put skip data (a, g);<br/>   end;<br/>   put skip list ('The result is:', a);<br/>end arithmetic_geometric_mean;<br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 17, "block": "<pre class=\"text highlighted_source\">sqrt = (x)\u00a0:<br/>   xi = 1<br/>   7 times\u00a0:<br/>      xi = (xi + x / xi) / 2<br/>   .<br/>   xi<br/>.<br/>\u00a0<br/>agm = (x, y)\u00a0:<br/>   7 times\u00a0:<br/>      a = (x + y) / 2<br/>      g = sqrt(x * y)<br/>      x = a<br/>      y = g<br/>   .<br/>   x<br/>.</pre>"}, {"lang": "PowerShell", "loc": 16, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> agm <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">Double</span><span class=\"br0\">]</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">Double</span><span class=\"br0\">]</span><span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">Double</span><span class=\"br0\">]</span><span class=\"re0\">$eps</span> <span class=\"sy0\">=</span> 1E<span class=\"sy0\">-</span>15<br/>    <span class=\"br0\">[</span><span class=\"re3\">Double</span><span class=\"br0\">]</span><span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">Double</span><span class=\"br0\">]</span><span class=\"re0\">$g1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">-</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"kw4\">-gt</span> <span class=\"re0\">$eps</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$g1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$g1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>        <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"sy0\">*</span><span class=\"re0\">$g1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span>pscustomobject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        a <span class=\"sy0\">=</span> <span class=\"st0\">\"$a\"</span><br/>        g <span class=\"sy0\">=</span> <span class=\"st0\">\"$g\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>agm <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>agm<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span>A<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>A<span class=\"sy3\">-</span>G<span class=\"br0\">)</span> <span class=\"sy6\">&lt;</span> <span class=\"nu0\">1.0e-15</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>agm<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span>Res<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> A1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>A<span class=\"sy3\">+</span>G<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2.0</span><span class=\"sy4\">,</span> G1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>A<span class=\"sy3\">*</span>G<span class=\"br0\">)</span><span class=\"sy4\">,</span><span class=\"sy5\">!</span><span class=\"sy4\">,</span> agm<span class=\"br0\">(</span>A1<span class=\"sy4\">,</span>G1<span class=\"sy4\">,</span>Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">?-</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>Res <span class=\"sy6\">=</span> <span class=\"nu0\">0.8472130847939792</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 15, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.d AGM<span class=\"br0\">(</span>a.d, g.d, ErrLim.d<span class=\"sy0\">=</span>1e<span class=\"sy0\">-</span>15<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d ta<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, tg<br/>  <span class=\"kw1\">While</span> ta <span class=\"sy0\">&lt;&gt;</span> a <br/>    ta<span class=\"sy0\">=</span>a: tg<span class=\"sy0\">=</span>g<br/>    a<span class=\"sy0\">=</span><span class=\"br0\">(</span>ta<span class=\"sy0\">+</span>tg<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">0.5</span><br/>    g<span class=\"sy0\">=</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>ta<span class=\"sy0\">*</span>tg<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> a<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>AGM<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/>\u00a0<br/><span class=\"kw1\">def</span> agm<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> g0<span class=\"sy0\">,</span> tolerance<span class=\"sy0\">=</span><span class=\"nu0\">1e-10</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Calculating the arithmetic-geometric mean of two numbers a0, g0.<br/>\u00a0<br/>    tolerance     the tolerance for the converged <br/>                  value of the arithmetic-geometric mean<br/>                  (default value = 1e-10)<br/>    \"\"\"</span><br/>    an<span class=\"sy0\">,</span> gn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a0 + g0<span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> sqrt<span class=\"br0\">(</span>a0 * g0<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>an - gn<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> tolerance:<br/>        an<span class=\"sy0\">,</span> gn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>an + gn<span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> sqrt<span class=\"br0\">(</span>an * gn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> an<br/>\u00a0<br/><span class=\"kw1\">print</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> / sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 14, "block": "<pre class=\"text highlighted_source\">arithmeticMean &lt;- function(a, b) { (a + b)/2 }<br/>geometricMean &lt;- function(a, b) { sqrt(a * b) }<br/>\u00a0<br/>arithmeticGeometricMean &lt;- function(a, b) {<br/>  rel_error &lt;- abs(a - b) / pmax(a, b) <br/>  if (all(rel_error &lt; .Machine$double.eps, na.rm=TRUE)) {<br/>    agm &lt;- a<br/>    return(data.frame(agm, rel_error));<br/>  }<br/>  Recall(arithmeticMean(a, b), geometricMean(a, b))  <br/>}<br/>\u00a0<br/>agm &lt;- arithmeticGeometricMean(1, 1/sqrt(2))<br/>print(format(agm, digits=16))</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (agm a g [\u03b5 1e-15])<br/>  (if (&lt;= (- a g) \u03b5)<br/>      a<br/>      (agm (/ (+ a g) 2) (sqrt (* a g)) \u03b5)))<br/>\u00a0<br/>(agm 1 (/ 1 (sqrt 2)))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 12, "block": "<pre class=\"text highlighted_source\">define agm  use  $a, $g, $errlim<br/>    # $errlim $g $a \"%d\u00a0%g\u00a0%d\\n\" print<br/>    $a 1.0  +   as $t<br/>    repeat $a 1.0 * $g - abs -15 exp10 $a *  &gt;   while<br/>        $a $g + 2 /   as $t<br/>        $a $g * sqrt  as $g<br/>        $t as $a<br/>        $g $a $t  \"t:\u00a0%g a:\u00a0%g g:\u00a0%g\\n\" print<br/>    $a<br/>\u00a0<br/>\u00a0<br/>16   1 2 sqrt /   1   agm   \"agm:\u00a0%.15g\\n\" print</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the  AGM  (arithmetic\u2500geometric mean)  of two (real) numbers. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b digs <span class=\"sy0\">.</span>                             <span class=\"coMULTI\">/*obtain optional numbers from the C.L.*/</span><br/><span class=\"kw1\">if</span> digs==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> digs==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> digs=<span class=\"nu0\">110</span>           <span class=\"coMULTI\">/*No DIGS specified?  Then use default.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> digs                              <span class=\"coMULTI\">/*REXX will use lots of decimal digits.*/</span><br/><span class=\"kw1\">if</span>    a==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    a==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> a=<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*No A specified?  Then use the default*/</span><br/><span class=\"kw1\">if</span>    b==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    b==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> b=<span class=\"nu0\">1</span> <span class=\"sy0\">/</span> sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/* \" B     \"         \"   \"   \"     \"   */</span><br/><span class=\"kw1\">call</span> AGM a,b                                     <span class=\"coMULTI\">/*invoke the  AGM  function.           */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'1st # ='</span>      a                            <span class=\"coMULTI\">/*display the   A   value.             */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'2nd # ='</span>      b                            <span class=\"coMULTI\">/*   \"     \"    B     \"                */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'  AGM ='</span>  agm<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*   \"     \"   AGM    \"                */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>agm:  <span class=\"kw1\">procedure</span>: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;   <span class=\"kw1\">if</span> x=y  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x      <span class=\"coMULTI\">/*is this an equality case?*/</span><br/>                                  <span class=\"kw1\">if</span> y=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>      <span class=\"coMULTI\">/*is   Y  equal to zero\u00a0?  */</span><br/>                                  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>  <span class=\"coMULTI\">/* \"   X    \"    \"   \"     */</span><br/>      d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d+<span class=\"nu0\">5</span>            <span class=\"coMULTI\">/*add 5 more digs to ensure convergence*/</span><br/>      tiny=<span class=\"st0\">'1e-'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*construct a pretty tiny REXX number. */</span><br/>      ox=x + <span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> ox<span class=\"sy0\">\\</span>=x <span class=\"sy0\">&amp;</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>ox<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>tiny;  ox=x;          oy=y<br/>                                                              x=<span class=\"br0\">(</span>ox+oy<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>;   y=sqrt<span class=\"br0\">(</span>ox<span class=\"sy0\">*</span>oy<span class=\"br0\">)</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;       <span class=\"kw1\">return</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>       <span class=\"coMULTI\">/*restore digs, normalize X to new digs*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h\u00a0% <span class=\"nu0\">2</span>  + <span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span>;    <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(9)<br/>see agm(1, 1/sqrt(2)) + nl<br/>see agm(1,1/pow(2,0.5)) + nl<br/>\u00a0<br/>func agm agm,g<br/>       while agm<br/>             an  = (agm + g)/2<br/>             gn  = sqrt(agm*g)<br/>             if fabs(agm-g) &lt;= fabs(an-gn) exit ok<br/>             agm = an<br/>             g   = gn<br/>       end<br/>       return gn<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 21, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># The flt package (http://flt.rubyforge.org/) is useful for high-precision floating-point math.</span><br/><span class=\"co1\"># It lets us control 'context' of numbers, individually or collectively -- including precision</span><br/><span class=\"co1\"># (which adjusts the context's value of epsilon accordingly).</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'flt'</span><br/><span class=\"kw1\">include</span> Flt<br/>\u00a0<br/>BinNum.<span class=\"me1\">Context</span>.<span class=\"me1\">precision</span> = <span class=\"nu0\">512</span>  <span class=\"co1\"># default 53 (bits)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> agm<span class=\"br0\">(</span>a,g<span class=\"br0\">)</span><br/>  new_a = BinNum a<br/>  new_g = BinNum g<br/>  <span class=\"kw1\">while</span> new_a <span class=\"sy0\">-</span> new_g <span class=\"sy0\">&gt;</span> new_a.<span class=\"kw1\">class</span>.<span class=\"me1\">Context</span>.<span class=\"me1\">epsilon</span> <span class=\"kw1\">do</span><br/>    old_g = new_g<br/>    new_g = <span class=\"br0\">(</span>new_a <span class=\"sy0\">*</span> new_g<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><br/>    new_a = <span class=\"br0\">(</span>old_g <span class=\"sy0\">+</span> new_a<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.5</span><br/>  <span class=\"kw1\">end</span><br/>  new_g<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> BinNum<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">print agm(1, 1/sqr(2))<br/>print agm(1,1/2^.5)<br/>print using(\"#.############################\",agm(1, 1/sqr(2)))<br/>\u00a0<br/>function agm(agm,g)<br/> while agm<br/>   an  = (agm + g)/2<br/>   gn  = sqr(agm*g)<br/>   if abs(agm-g) &lt;= abs(an-gn) then exit while<br/>   agm = an<br/>   g   = gn<br/> wend<br/>end function</pre>"}, {"lang": "Rust", "loc": 31, "block": "<pre class=\"text highlighted_source\">// Accepts two command line arguments<br/>// cargo run --name agm arg1 arg2<br/>\u00a0<br/>fn main () {<br/>    let mut args = std::env::args();<br/>\u00a0<br/>    let x = args.nth(1).expect(\"First argument not specified.\").parse::&lt;f32&gt;().unwrap();<br/>    let y = args.next().expect(\"Second argument not specified.\").parse::&lt;f32&gt;().unwrap();<br/>\u00a0<br/>    let result = agm(x,y);<br/>    println!(\"The arithmetic-geometric mean is {}\", result);<br/>}<br/>\u00a0<br/>fn agm (x: f32, y: f32) -&gt; f32 {<br/>    let e: f32 = 0.000001;<br/>    let mut a = x;<br/>    let mut g = y;<br/>    let mut a1: f32;<br/>    let mut g1: f32;<br/>\u00a0<br/>    if a * g &lt; 0f32 { panic!(\"The arithmetric-geometric mean is undefined for numbers less than zero!\"); }<br/>    else {<br/>        loop {<br/>            a1 = (a + g) / 2.;<br/>            g1 = (a * g).sqrt();<br/>            a = a1;<br/>            g = g1;<br/>            if (a - g).abs() &lt; e {  return a; }<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> agm<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Double, g<span class=\"sy0\">:</span> Double, eps<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a - g<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> eps<span class=\"br0\">)</span> <span class=\"br0\">(</span>a + g<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> agm<span class=\"br0\">(</span><span class=\"br0\">(</span>a + g<span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> g<span class=\"br0\">)</span>, eps<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>, 1e-15<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> agm<br/>  <span class=\"br0\">(</span>case<span class=\"sy0\">-</span><span class=\"kw1\">lambda</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>a0 g0<span class=\"br0\">)</span> <span class=\"co1\">; call again with default value for tolerance</span><br/>     <span class=\"br0\">(</span>agm a0 g0 1e<span class=\"sy0\">-</span>8<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>a0 g0 tolerance<span class=\"br0\">)</span> <span class=\"co1\">; called with three arguments</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a a0 <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a g<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>g g0 <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> a g<span class=\"br0\">)</span><span class=\"br0\">)</span> tolerance<span class=\"br0\">)</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>agm <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func float: agm (in var float: a, in var float: g) is func<br/>  result<br/>    var float: agm is 0.0;<br/>  local<br/>    const float: iota is 1.0E-7;<br/>    var float: a1 is 0.0;<br/>    var float: g1 is 0.0;<br/>  begin<br/>    if a * g &lt; 0.0 then<br/>      raise RANGE_ERROR;<br/>    else<br/>      while abs(a - g) &gt; iota do<br/>        a1\u00a0:= (a + g) / 2.0;<br/>        g1\u00a0:= sqrt(a * g);<br/>        a\u00a0:= a1;<br/>        g\u00a0:= g1;<br/>      end while;<br/>      agm\u00a0:= a;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(agm(1.0, 2.0) digits 6);<br/>    writeln(agm(1.0, 1.0 / sqrt(2.0)) digits 6);<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 13, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Math.sl&gt;;<br/>\u00a0<br/>agm(a, g)\u00a0:=<br/>    let<br/>        iota\u00a0:= 1.0e-15;<br/>        arithmeticMean\u00a0:= 0.5 * (a + g);<br/>        geometricMean\u00a0:= sqrt(a * g);<br/>    in<br/>        a when abs(a-g) &lt; iota<br/>    else<br/>        agm(arithmeticMean, geometricMean);<br/>\u00a0<br/>main\u00a0:= agm(1.0, 1.0 / sqrt(2));</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func agm<span class=\"br0\">(</span>a, g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        var <span class=\"br0\">(</span>a1, g1<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>g<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>, sqrt<span class=\"br0\">(</span>a<span class=\"sy0\">*</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span>a1,g1<span class=\"br0\">]</span> == <span class=\"br0\">[</span>a,g<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> a<br/>        <span class=\"br0\">(</span>a, g<span class=\"br0\">)</span> = <span class=\"br0\">(</span>a1, g1<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say agm<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"sy0\">/</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\"> 10 LET A=1<br/> 20 LET G=1/SQR 2<br/> 30 GOSUB 100<br/> 40 PRINT AGM<br/> 50 STOP<br/>100 LET A0=A<br/>110 LET A=(A+G)/2<br/>120 LET G=SQR (A0*G)<br/>130 IF ABS(A-G)&gt;.00000001 THEN GOTO 100<br/>140 LET AGM=A<br/>150 RETURN</pre>"}, {"lang": "Stata", "loc": 14, "block": "<pre class=\"text highlighted_source\">mata <br/>\u00a0<br/>real scalar agm(real scalar a, real scalar b) {<br/>\treal scalar c<br/>\tdo {<br/>\t\tc=0.5*(a+b)<br/>\t\tb=sqrt(a*b)<br/>\t\ta=c<br/>\t} while (a-b&gt;1e-15*a)<br/>\treturn(0.5*(a+b))<br/>}<br/>\u00a0<br/>agm(1,1/sqrt(2))<br/>end</pre>"}, {"lang": "Swift", "loc": 31, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>\u00a0<br/>enum AGRError\u00a0: Error {<br/>\tcase undefined<br/>}<br/>\u00a0<br/>func agm(_ a: Double, _ g: Double, _ iota: Double = 1e-8) throws -&gt; Double {<br/>\tvar a = a<br/>\tvar g = g<br/>\tvar a1: Double = 0<br/>\tvar g1: Double = 0<br/>\u00a0<br/>\tguard a * g &gt;= 0 else {<br/>\t\tthrow AGRError.undefined<br/>\t}<br/>\u00a0<br/>\twhile abs(a - g) &gt; iota {<br/>\t\ta1 = (a + g) / 2<br/>\t\tg1 = sqrt(a * g)<br/>\t\ta = a1<br/>\t\tg = g1<br/>\t}<br/>\u00a0<br/>\treturn a<br/>}<br/>\u00a0<br/>do {<br/>\ttry print(agm(1, 1 / sqrt(2)))<br/>} catch {<br/>\tprint(\"agr is undefined when a * g &lt; 0\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> agm <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> old_b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy0\">?</span>inf:-inf<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$old_b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> old_b <span class=\"re0\">$b</span><br/>\tlassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">0.5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>+<span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> a b<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>agm <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"nu0\">1</span>/sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">1\u2192A:1/sqrt(2)\u2192G<br/>While abs(A-G)&gt;e-15<br/>(A+G)/2\u2192B<br/>sqrt(AG)\u2192G:B\u2192A<br/>End<br/>A</pre>"}, {"lang": "UNIX Shell", "loc": 12, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> agm <span class=\"br0\">{</span><br/>    float <span class=\"re2\">a</span>=<span class=\"re4\">$1</span> <span class=\"re2\">g</span>=<span class=\"re4\">$2</span> <span class=\"re2\">eps</span>=<span class=\"co1\">${3:-1e-11}</span> tmp<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> abs<span class=\"br0\">(</span>a-g<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> eps <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        print <span class=\"st0\">\"debug: a=<span class=\"es2\">$a</span><span class=\"es1\">\\t</span>g=<span class=\"es2\">$g</span>\"</span><br/>        <span class=\"re2\">tmp</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>a+g<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"re2\">g</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span>a<span class=\"sy0\">*</span>g<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"re2\">a</span>=<span class=\"re1\">$tmp</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>agm $<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "VBScript", "loc": 12, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> agm(a,g)<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> a = tmp_a<br/>\t\ttmp_a = a<br/>\t\ta = (a + g)/2<br/>\t\tg = Sqr(tmp_a * g)<br/>\t<span class=\"kw3\">Loop</span><br/>\tagm = a<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.Echo agm(1,1/Sqr(2))<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 10, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codesi;<br/>real A, A1, G;<br/>[Format(0, 16);<br/>A:= 1.0;  G:= 1.0/sqrt(2.0);<br/>repeat\tA1:= (A+G)/2.0;<br/>\tG:= sqrt(A*G);<br/>\tA:= A1;<br/>\tRlOut(0, A);  RlOut(0, G);  RlOut(0, A-G);  CrLf(0);<br/>until\tA=G;<br/>]</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">a:=1.0; g:=1.0/(2.0).sqrt();<br/>while(not a.closeTo(g,1.0e-15)){<br/>   a1:=(a+g)/2.0; g=(a*g).sqrt(); a=a1; <br/>   println(a,\"  \",g,\" \",a-g);<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 7, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> a=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> g=<span class=\"nu0\">1</span>/<span class=\"kw3\">SQR</span> <span class=\"nu0\">2</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> ta=a<br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> a=<span class=\"br0\">(</span>a+g<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> g=<span class=\"kw3\">SQR</span> <span class=\"br0\">(</span>ta*g<span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> a&lt;ta <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> a<br/>\u00a0</pre>"}]}