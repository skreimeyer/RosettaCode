{"task": "Pythagorean_quadruples", "blocks": [{"lang": "ALGOL 68", "loc": 34, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># find values of d where d^2 =/= a^2 + b^2 + c^2 for any integers a, b, c #</span><br/>    <span class=\"coMULTI\"># where d in [1..2200], a, b, c =/= 0                                     #</span><br/>    <span class=\"coMULTI\"># max number to check #</span><br/>    <span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> 2200<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> max square <span class=\"sy1\">=</span> max number <span class=\"sy1\">*</span> max number<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># table of numbers that can be the sum of two squares #</span><br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max square <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> sum of two squares<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> max square <span class=\"kw2\">DO</span> sum of two squares<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> a <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">INT</span> a2 <span class=\"sy1\">=</span> a <span class=\"sy1\">*</span> a<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> b <span class=\"kw2\">FROM</span> a <span class=\"kw2\">TO</span> max number <span class=\"kw2\">WHILE</span> <span class=\"kw3\">INT</span> sum2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> b <span class=\"sy1\">*</span> b <span class=\"br0\">)</span> <span class=\"sy1\">+</span> a2<span class=\"sy1\">;</span><br/>                                         sum2 <span class=\"sy1\">&lt;=</span> max square <span class=\"kw2\">DO</span><br/>            sum of two squares<span class=\"br0\">[</span> sum2 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># now find d such that d^2 - c^2 is in sum of two squares #</span><br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> solution<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span> solution<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> d <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">INT</span> d2 <span class=\"sy1\">=</span> d <span class=\"sy1\">*</span> d<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> c <span class=\"kw2\">TO</span> d <span class=\"sy1\">-</span> 1 <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> solution<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">INT</span> diff2 <span class=\"sy1\">=</span> d2 <span class=\"sy1\">-</span> <span class=\"br0\">(</span> c <span class=\"sy1\">*</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> sum of two squares<span class=\"br0\">[</span> diff2 <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                solution<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># print the numbers whose squares are not the sum of three squares #</span><br/>    <span class=\"kw2\">FOR</span> d <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> solution<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> d<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "C", "loc": 26, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N 2200</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> r<span class=\"br0\">[</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>r<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// zero solution array</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>b<span class=\"sy0\">=</span>a<span class=\"sy0\">;</span> b<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t <span class=\"kw4\">int</span> aabb<span class=\"sy0\">;</span><br/>\t <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span>  <span class=\"co1\">// for positive odd a and b, no solution.</span><br/>\t aabb<span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>b<span class=\"sy0\">;</span><br/>\t <span class=\"kw1\">for</span><span class=\"br0\">(</span>c<span class=\"sy0\">=</span>b<span class=\"sy0\">;</span> c<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> aabbcc<span class=\"sy0\">=</span>aabb <span class=\"sy0\">+</span> c<span class=\"sy0\">*</span>c<span class=\"sy0\">;</span><br/>\t    d<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span>aabbcc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span>aabbcc <span class=\"sy0\">==</span> d<span class=\"sy0\">*</span>d <span class=\"sy0\">&amp;&amp;</span> d<span class=\"sy0\">&lt;=</span>N<span class=\"br0\">)</span> r<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// solution</span><br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// print non solution</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 38, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PythagoreanQuadruples <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> MAX2 <span class=\"sy0\">=</span> MAX <span class=\"sy0\">*</span> MAX <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> found <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>MAX <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// all false by default</span><br/>            <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a2b2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>MAX2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// ditto</span><br/>            <span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> a2 <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> a<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> b<span class=\"sy0\">=</span>a<span class=\"sy0\">;</span> b<span class=\"sy0\">&lt;=</span>MAX<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    a2b2<span class=\"br0\">[</span>a2 <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> s1 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>                s <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> s2 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a2b2<span class=\"br0\">[</span>s1<span class=\"br0\">]</span><span class=\"br0\">)</span> found<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                    s1 <span class=\"sy0\">+=</span> s2<span class=\"sy0\">;</span><br/>                    s2 <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The values of d &lt;= {0} which can't be represented:\"</span>, MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;</span> MAX<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}  \"</span>, d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 43, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">bitmanip</span> <span class=\"sy0\">:</span> BitArray<span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>_200<span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> N2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>N<span class=\"sy0\">*</span>N<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BitArray found<span class=\"sy0\">;</span><br/>    found.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    BitArray aabb<span class=\"sy0\">;</span><br/>    aabb.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> N2<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> s<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint</span> aa <span class=\"sy0\">=</span> a<span class=\"sy0\">*</span>a<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> b<span class=\"sy0\">&lt;</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            aabb<span class=\"br0\">[</span>aa <span class=\"sy0\">+</span> b<span class=\"sy0\">*</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> c<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint</span> s1 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>        s <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">uint</span> s2 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> d<span class=\"sy0\">=</span>c<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> d<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>aabb<span class=\"br0\">[</span>s1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                found<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            s1 <span class=\"sy0\">+=</span> s2<span class=\"sy0\">;</span><br/>            s2 <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"The values of d &lt;= \"</span><span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"st0\">\" which can't be represented:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> d<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 52, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 12-08-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define max 2200</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> l, m, n, l2, l2m2<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> limit = max * <span class=\"nu0\">4</span> \\ <span class=\"nu0\">15</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> max2 = limit * limit * <span class=\"nu0\">2</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ubyte</span> list_1<span class=\"br0\">(</span>max2<span class=\"br0\">)</span>, list_2<span class=\"br0\">(</span>max2 +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' prime sieve, list_2(l) contains a 0 if l = prime  </span><br/><span class=\"kw1\">For</span> l = <span class=\"nu0\">4</span> <span class=\"kw1\">To</span> max2 <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>    list_1<span class=\"br0\">(</span>l<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">For</span> l = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> max2 <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> list_1<span class=\"br0\">(</span>l<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> m = l * l <span class=\"kw1\">To</span> max2 <span class=\"kw1\">Step</span> l * <span class=\"nu0\">2</span><br/>            list_1<span class=\"br0\">(</span>m<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' we do not need a and b (a and b are even, l = a \\ 2, m = b \\ 2)</span><br/><span class=\"co1\">' we only need to find d</span><br/><span class=\"kw1\">For</span> l = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> limit<br/>    l2 = l * l<br/>    <span class=\"kw1\">For</span> m = l <span class=\"kw1\">To</span> limit<br/>        l2m2 = l2 + m * m<br/>        list_2<span class=\"br0\">(</span>l2m2 +<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"co1\">' if l2m2 is a prime, no other factors exits</span><br/>        <span class=\"kw1\">If</span> list_1<span class=\"br0\">(</span>l2m2<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"co1\">' find possible factors of l2m2</span><br/>        <span class=\"co1\">' if l2m2 is odd, we need only to check the odd divisors</span><br/>        <span class=\"kw1\">For</span> n = <span class=\"nu0\">2</span> + <span class=\"br0\">(</span>l2m2 And <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Fix</span><span class=\"br0\">(</span><span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>l2m2 -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>l2m2 And <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> l2m2 <span class=\"kw1\">Mod</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"co1\">' set list_2(x) to 1 if solution is found</span><br/>                list_2<span class=\"br0\">(</span>l2m2 \\ n + n<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> l = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max<br/>    <span class=\"kw1\">If</span> list_2<span class=\"br0\">(</span>l<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> l; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer </span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 42, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    N <span class=\"sy2\">=</span> <span class=\"nu0\">2200</span><br/>    N2 <span class=\"sy2\">=</span> N <span class=\"sy3\">*</span> N <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s  <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span> <br/>    <span class=\"kw1\">var</span> s1<span class=\"sy1\">,</span> s2 <span class=\"kw4\">int</span>    <br/>    <span class=\"kw1\">var</span> r  <span class=\"sy1\">[</span>N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>    <span class=\"kw1\">var</span> ab <span class=\"sy1\">[</span>N2 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> a &lt;<span class=\"sy2\">=</span> N<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        a2 <span class=\"sy2\">:=</span> a <span class=\"sy3\">*</span> a<br/>        <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> a<span class=\"sy1\">;</span> b &lt;<span class=\"sy2\">=</span> N<span class=\"sy1\">;</span> b<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            ab<span class=\"sy1\">[</span>a2 <span class=\"sy3\">+</span> b <span class=\"sy3\">*</span> b<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> N<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        s1 <span class=\"sy2\">=</span> s<br/>        s <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>        s2 <span class=\"sy2\">=</span> s<br/>        <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> c <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d &lt;<span class=\"sy2\">=</span> N<span class=\"sy1\">;</span> d<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> ab<span class=\"sy1\">[</span>s1<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                r<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>            s1 <span class=\"sy2\">+=</span> s2<br/>            s2 <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d &lt;<span class=\"sy2\">=</span> N<span class=\"sy1\">;</span> d<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>r<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span>       <br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> PythagoreanQuadruple <span class=\"kw1\">where</span><br/>\u00a0<br/>powersOfTwo <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> powersOfTwo<br/>\u00a0<br/>unrepresentable <span class=\"sy0\">=</span> merge powersOfTwo <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> powersOfTwo<br/>\u00a0<br/>merge <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">=</span> x\u00a0: merge xs <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span><br/>merge <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> y\u00a0: merge <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> ys<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"The values of d &lt;= 2200 which can't be represented.\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2200</span><span class=\"br0\">)</span> unrepresentable<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PythagoreanQuadruple <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> MAX2 <span class=\"sy0\">=</span> MAX <span class=\"sy0\">*</span> MAX <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> found <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>MAX <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>   <span class=\"co1\">// all false by default</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a2b2  <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>MAX2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// ditto</span><br/>        <span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> a2 <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> a<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> a2b2<span class=\"br0\">[</span>a2 <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> s1 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>            s <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> s2 <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d  <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a2b2<span class=\"br0\">[</span>s1<span class=\"br0\">]</span><span class=\"br0\">)</span> found<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                s1 <span class=\"sy0\">+=</span> s2<span class=\"sy0\">;</span><br/>                s2 <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The values of d &lt;=\u00a0%d which can't be represented:<span class=\"es0\">\\n</span>\"</span>, MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> d <span class=\"sy0\">&lt;=</span> MAX<span class=\"sy0\">;</span> d<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d  \"</span>, d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\"># Emit a proof that the input is a pythagorean quad, or else false<br/>def is_pythagorean_quad:<br/>  . as $d<br/>  | (.*.) as $d2<br/>  | first(<br/>      label $continue_a | range(1; $d) | . as $a | (.*.) as $a2<br/>    |   if 3*$a2 &gt; $d2 then break $continue_a else . end<br/>    | label $continue_b | range($a; $d) | . as $b | (.*.) as $b2<br/>    |   if $a2  + 2 * $b2  &gt; $d2 then break $continue_b else . end<br/>    | (($d2-($a2+$b2)) | sqrt) as $c<br/>    | if ($c | floor) == $c then [$a, $b, $c] else empty end )<br/>  // false;<br/>\u00a0<br/># The specific task:<br/>\u00a0<br/>[range(1; 2201) | select( is_pythagorean_quad | not )] | join(\" \")</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">function quadruples(N::Int=2200)<br/>    r  = falses(N)<br/>    ab = falses(2N ^ 2)<br/>\u00a0<br/>    for a in 1:N, b in a:N<br/>        ab[a ^ 2 + b ^ 2] = true<br/>    end<br/>\u00a0<br/>    s = 3<br/>    for c in 1:N<br/>        s1, s, s2 = s, s + 2, s + 2<br/>        for d in c+1:N<br/>            if ab[s1] r[d] = true end<br/>            s1 += s2<br/>            s2 += 2<br/>        end<br/>    end<br/>\u00a0<br/>    return find(.! r)<br/>end<br/>\u00a0<br/>println(\"Pythagorean quadruples up to 2200: \", join(quadruples(), \", \"))</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX2 <span class=\"sy0\">=</span> MAX <span class=\"sy0\">*</span> MAX - <span class=\"nu0\">1</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> found <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>MAX + <span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\">// all false by default</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>MAX + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>  <span class=\"co1\">// pre-compute squares</span><br/>\u00a0<br/>    <span class=\"co1\">// compute all possible positive values of d * d - c * c and map them back to d</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dc <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>Int, MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in <span class=\"nu0\">1</span>..<span class=\"me1\">MAX</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">1</span> until d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> p2<span class=\"br0\">[</span>d<span class=\"br0\">]</span> - p2<span class=\"br0\">[</span>c<span class=\"br0\">]</span>              <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> dc<span class=\"br0\">[</span>diff<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>                dc.<span class=\"me1\">put</span><span class=\"br0\">(</span>diff, mutableListOf<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">!</span>in v<span class=\"br0\">)</span><br/>                v.<span class=\"me1\">add</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a in <span class=\"nu0\">1</span>..<span class=\"me1\">MAX</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b in <span class=\"nu0\">1</span>..<span class=\"me1\">a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>a and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>b and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> p2<span class=\"br0\">[</span>a<span class=\"br0\">]</span> + p2<span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> MAX2<span class=\"br0\">)</span> continue<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> dc<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> v.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> found<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The values of d &lt;= $MAX which can't be represented:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">MAX</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> \\N <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sq</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">N</span><span class=\"br0\">)</span>\u00bb\u00b2<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">not</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span> <span class=\"kw1\">xx</span> N<span class=\"sy0\">;</span><br/><span class=\"sy0\">@</span><span class=\"kw1\">not</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">N</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$d</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$d</span> <span class=\"sy0\">...</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">ceiling</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">ceiling</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$ab</span> <span class=\"sy0\">=</span> <span class=\"re0\">@sq</span><span class=\"br0\">[</span><span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">@sq</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">@sq</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">@sq</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$ab</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">.</span><span class=\"me1\">narrow</span> <span class=\"sy0\">~~</span> Int <span class=\"br0\">{</span><br/>                <span class=\"sy0\">@</span><span class=\"kw1\">not</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">last</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$last</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">@</span><span class=\"kw1\">not</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"kw1\">not</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>k <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 21, "block": "<pre class=\"text highlighted_source\">(de quadruples (N)<br/>   (let (AB NIL  S 3  R)<br/>      (for A N<br/>         (for (B A (&gt;= N B) (inc B))<br/>            (idx<br/>               'AB<br/>               (+ (* A A) (* B B))<br/>               T ) ) )<br/>      (for C N<br/>         (let (S1 S  S2)<br/>            (inc 'S 2)<br/>            (setq S2 S)<br/>            (for (D (+ C 1) (&gt;= N D) (inc D))<br/>               (and (idx 'AB S1) (idx 'R D T))<br/>               (inc 'S1 S2)<br/>               (inc 'S2 2) ) ) )<br/>      (make<br/>         (for A N<br/>            (or (idx 'R A) (link A)) ) ) ) )<br/>\u00a0<br/>(println (quadruples 2200))</pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> quad<span class=\"br0\">(</span>top<span class=\"sy0\">=</span><span class=\"nu0\">2200</span><span class=\"br0\">)</span>:<br/>    r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * top<br/>    ab <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>top * <span class=\"nu0\">2</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> top<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> top<span class=\"br0\">)</span>:<br/>            ab<span class=\"br0\">[</span>a * a + b * b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> top<span class=\"br0\">)</span>:<br/>        s1<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> s2 <span class=\"sy0\">=</span> s<span class=\"sy0\">,</span> s + <span class=\"nu0\">2</span><span class=\"sy0\">,</span> s + <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>c + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> top<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> ab<span class=\"br0\">[</span>s1<span class=\"br0\">]</span>:<br/>                r<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>            s1 +<span class=\"sy0\">=</span> s2<br/>            s2 +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>i <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> val <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> val <span class=\"kw1\">and</span> i<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">\"Those values of d in 1..{n} that can't be represented: {quad(n)}\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(require data/bit-vector)<br/>\u00a0<br/>(define (quadruples top)<br/>  (define top+1 (add1 top))<br/>  (define 1..top (in-range 1 top+1))<br/>  (define r (make-bit-vector top+1))<br/>  (define ab (make-bit-vector (add1 (sqr (* top 2)))))<br/>  (for* ((a 1..top) (b (in-range a top+1))) (bit-vector-set! ab (+ (sqr a) (sqr b)) #t))<br/>\u00a0<br/>  (for/fold ((s 3))<br/>            ((c 1..top))<br/>    (for/fold ((s1 s) (s2 (+ s 2)))<br/>              ((d (in-range (add1 c) top+1)))<br/>      (when (bit-vector-ref ab s1)<br/>        (bit-vector-set! r d #t))<br/>      (values (+ s1 s2) (+ s2 2)))<br/>    (+ 2 s))<br/>\u00a0<br/>  (for/list ((i (in-naturals 1)) (v (in-bit-vector r 1)) #:unless v) i))<br/>\u00a0<br/>(define (report n)<br/>  (printf \"Those values of d in 1..~a that can't be represented: ~a~%\" n (quadruples n)))<br/>\u00a0<br/>(report 2200)</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm computes/shows (integers),  D  that aren't possible for: a\u00b2 + b\u00b2 + c\u00b2  =  d\u00b2 */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> hi <span class=\"sy0\">.</span>                                   <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> hi==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> hi==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> hi=<span class=\"nu0\">2200</span>;  high=<span class=\"nu0\">2</span><span class=\"sy0\">*</span>hi<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                             <span class=\"coMULTI\">/*array of integers to be squared.     */</span><br/>!<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                             <span class=\"coMULTI\">/*  \"    \"     \"    squared.           */</span><br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> high                          <span class=\"coMULTI\">/*precompute possible squares (to max).*/</span><br/>       jj=j<span class=\"sy0\">*</span>j;  \u00a0!<span class=\"sy0\">.</span>jj=j;   <span class=\"kw1\">if</span> j<span class=\"sy0\">&lt;</span>=hi  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>j=jj <span class=\"coMULTI\">/*define a square; D  value; squared # */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>d<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                             <span class=\"coMULTI\">/*array of possible solutions  (D)     */</span><br/>       <span class=\"kw1\">do</span>       a=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> hi-<span class=\"nu0\">2</span>                    <span class=\"coMULTI\">/*go hunting for solutions to equation.*/</span><br/>          <span class=\"kw1\">do</span>    b=a   <span class=\"kw2\">to</span> hi-<span class=\"nu0\">1</span>;   ab = @<span class=\"sy0\">.</span>a + @<span class=\"sy0\">.</span>b  <span class=\"coMULTI\">/*calculate sum of  2  (A,B)   squares.*/</span><br/>             <span class=\"kw1\">do</span> c=b   <span class=\"kw2\">to</span> hi;     abc= ab  + @<span class=\"sy0\">.</span>c  <span class=\"coMULTI\">/*    \"      \"   \"  3  (A,B,C)    \"    */</span><br/>             <span class=\"kw1\">if</span> abc<span class=\"sy0\">&lt;</span>=high  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>abc==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*Not a square? Then skip it*/</span><br/>                           <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;   t=abc;   r=<span class=\"nu0\">0</span>;   q=<span class=\"nu0\">1</span>;       <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> q<span class=\"sy0\">&lt;</span>=t;   q=q<span class=\"sy0\">*</span><span class=\"nu0\">4</span><br/>                                                                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while q&lt;=t*/</span><br/>                                                            <span class=\"coMULTI\">/*R:  will be the iSqrt(t). */</span><br/>                                  <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> q<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;  q=q%4;  _=t-r-q;  r=r%2<br/>                                  <span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  t=_;  r=r+q;  <span class=\"kw3\">end</span><br/>                                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while q&gt;1*/</span><br/>                                <span class=\"kw1\">if</span> r<span class=\"sy0\">*</span>r<span class=\"sy0\">\\</span>=abc  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*(DO iterator C)*/</span><br/>                                <span class=\"kw3\">end</span><br/>             s=!<span class=\"sy0\">.</span>abc;    d<span class=\"sy0\">.</span>s=                    <span class=\"coMULTI\">/*define this D solution as being found*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>          <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*b*/</span><br/>       <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*a*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Not possible positive integers for   d \u2264'</span> hi <span class=\"st0\">\"  using equation:  a\u00b2 + b\u00b2 + c\u00b2  =  d\u00b2\"</span><br/><span class=\"kw1\">say</span><br/>$=                                               <span class=\"coMULTI\">/* [\u2193]  find all the  \"not possibles\". */</span><br/>       <span class=\"kw1\">do</span> p=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> hi;   <span class=\"kw1\">if</span> d<span class=\"sy0\">.</span>p==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> $=$ p   <span class=\"coMULTI\">/*Not possible? Then add it to the list*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*p*/</span>                               <span class=\"coMULTI\">/* [\u2193]  display list of not-possibles. */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 23, "block": "<pre class=\"text highlighted_source\"># Project\u00a0: Pythagorean quadruples<br/>\u00a0<br/>limit = 2200<br/>pq = list(limit)<br/>for n = 1 to limit<br/>      for m = 1 to limit<br/>           for p = 1 to limit<br/>                 for x = 1 to limit<br/>                       if pow(x,2) = pow(n,2) + pow(m,2) + pow(p,2)<br/>                          pq[x] = 1<br/>                       ok<br/>                 next<br/>           next<br/>      next<br/>next<br/>pqstr = \"\"<br/>for d = 1 to limit<br/>      if pq[d] = 0<br/>         pqstr = pqstr + d + \" \"<br/>      ok<br/>next<br/>see pqstr + nl<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PythagoreanQuadruple <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">2200</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX2<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> MAX <span class=\"sy0\">*</span> MAX <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> found <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span>MAX + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2b2 <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Boolean<span class=\"br0\">]</span><span class=\"br0\">(</span>MAX2 + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to MAX<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2 <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> a<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span>- a to MAX<span class=\"br0\">)</span> a2b2<span class=\"br0\">(</span>a2 + b <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to MAX<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s1 <span class=\"sy0\">=</span> s<br/>    s +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s2 <span class=\"sy0\">=</span> s<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span>c + <span class=\"nu0\">1</span><span class=\"br0\">)</span> to MAX<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a2b2<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"br0\">)</span> found<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>      s1 +<span class=\"sy0\">=</span> s2<br/>      s2 +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>f<span class=\"st0\">\"The values of d &lt;= ${MAX}%d which can't be represented:\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> notRepresented <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to MAX<span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span>  found<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>notRepresented.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 97, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'ntheory'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Finds all solutions (a,b) such that: a^2 + b^2 = n^2</span><br/>func sum_of_two_squares<span class=\"br0\">(</span>n<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>\u00a0<br/>    n == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    var prod1 = <span class=\"nu0\">1</span><br/>    var prod2 = <span class=\"nu0\">1</span><br/>\u00a0<br/>    var prime_powers = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">p</span>,e <span class=\"kw1\">in</span> <span class=\"br0\">(</span>n.<span class=\"me1\">factor_exp</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> == <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                  <span class=\"co1\"># p = 3 (mod 4)</span><br/>            e.<span class=\"me1\">is_even</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>         <span class=\"co1\"># power must be even</span><br/>            prod2 <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>e <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span> == <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                   <span class=\"co1\"># p = 2</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e.<span class=\"me1\">is_even</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>               <span class=\"co1\"># power is even</span><br/>                prod2 <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>e <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                         <span class=\"co1\"># power is odd</span><br/>                prod1 <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><br/>                prod2 <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                prime_powers.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw3\">p</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                             <span class=\"co1\"># p = 1 (mod 4)</span><br/>            prod1 <span class=\"sy0\">*</span>= <span class=\"kw3\">p</span><span class=\"sy0\">**</span>e<br/>            prime_powers.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw3\">p</span>, e<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    prod1 == <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>prod2, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    prod1 == <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>prod2, prod2<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># All the solutions to the congruence: x^2 = -1 (mod prod1)</span><br/>    var square_roots = gather <span class=\"br0\">{</span><br/>        gather <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"kw3\">p</span>,e <span class=\"kw1\">in</span> <span class=\"br0\">(</span>prime_powers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                var pp = <span class=\"kw3\">p</span><span class=\"sy0\">**</span>e<br/>                var r = <span class=\"sy0\">%</span>S<span class=\"sy0\">&lt;</span>ntheory<span class=\"sy0\">&gt;</span>.<span class=\"me1\">sqrtmod</span><span class=\"br0\">(</span><span class=\"st0\">\"#{pp - 1}\"</span>, <span class=\"st0\">\"#{pp}\"</span><span class=\"br0\">)</span><br/>                take<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>r, pp<span class=\"br0\">]</span>, <span class=\"br0\">[</span>pp <span class=\"sy0\">-</span> r, pp<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">cartesian</span> <span class=\"br0\">{</span> <span class=\"sy0\">|*</span>a<span class=\"sy0\">|</span><br/>            take<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">chinese</span><span class=\"br0\">(</span>a...<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var solutions = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"br0\">(</span>square_roots<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        var s = r<br/>        var q = prod1<br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s<span class=\"sy0\">*</span>s <span class=\"sy0\">&gt;</span> prod1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">(</span>s, q<span class=\"br0\">)</span> = <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> s, s<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        solutions.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span>prod2 <span class=\"sy0\">*</span> s, prod2 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> s<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">p</span>,e <span class=\"kw1\">in</span> <span class=\"br0\">(</span>prime_powers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>var i = e<span class=\"sy0\">%</span>2; i <span class=\"sy0\">&lt;</span> e; i <span class=\"sy0\">+</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            var sq = <span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            var pp = <span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>e <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>\u00a0<br/>            solutions <span class=\"sy0\">+</span>= <span class=\"br0\">(</span><br/>                __FUNC__<span class=\"br0\">(</span>prod1 <span class=\"sy0\">/</span> pp<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span><br/>                    pair.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> sq <span class=\"sy0\">*</span> prod2 <span class=\"sy0\">*</span> r <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    solutions.<span class=\"me1\">map</span>     <span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> pair.<span class=\"me1\">sort</span> <span class=\"br0\">}</span> \\<br/>             .<span class=\"me1\">uniq_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"br0\">}</span> \\<br/>             .<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span> pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Finds all solutions (a,b,c) such that: a^2 + b^2 + c^2 = n^2</span><br/>func sum_of_three_squares<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var t = sum_of_two_squares<span class=\"br0\">(</span>n<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> k<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>            take<span class=\"br0\">(</span>t.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span>k, _...<span class=\"br0\">]</span> <span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say gather <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2200</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum_of_three_squares<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">||</span> take<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 28, "block": "<pre class=\"text highlighted_source\"># find values of d where d^2 =/= a^2 + b^2 + c^2 for any integers a, b, c #<br/># where d in [1..2200], a, b, c =/= 0                                     #<br/># max number to check #<br/>const max_number = 2200;<br/>const max_square = max_number * max_number;<br/># table of numbers that can be the sum of two squares #<br/>sum_of_two_squares:=Data(max_square+1,Int).fill(0);  # 4 meg byte array<br/>foreach a in ([1..max_number]){<br/>   a2\u00a0:= a * a;<br/>   foreach b in ([a..max_number]){<br/>      sum2\u00a0:= ( b * b ) + a2;<br/>      if(sum2 &lt;= max_square) sum_of_two_squares[ sum2 ] = True;  # True--&gt;1<br/>   }<br/>}<br/># now find d such that d^2 - c^2 is in sum of two squares #<br/>solution:=Data(max_number+1,Int).fill(0);\t# another byte array<br/>foreach d in ([1..max_number]){<br/>   d2\u00a0:= d * d;<br/>   foreach c in ([1..d-1]){<br/>      diff2\u00a0:= d2 - ( c * c );<br/>      if(sum_of_two_squares[ diff2 ]){ solution[ d ] = True; break; }<br/>   }<br/>}<br/># print the numbers whose squares are not the sum of three squares #<br/>foreach d in ([1..max_number]){<br/>   if(not solution[ d ]) print(d, \" \");<br/>}<br/>println();</pre>"}]}