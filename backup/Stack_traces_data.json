{"task": "Stack_traces", "blocks": [{"lang": "Ada", "loc": 31, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">Traceback</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">Traceback</span>.<span class=\"me1\">Symbolic</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Stack_Trace <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> Call_Stack <span class=\"kw1\">is</span><br/>      Trace \u00a0: GNAT.<span class=\"me1\">Traceback</span>.<span class=\"me1\">Tracebacks_Array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span>_000<span class=\"br0\">)</span>;<br/>      Length\u00a0: Natural;<br/>   <span class=\"kw1\">begin</span><br/>      GNAT.<span class=\"me1\">Traceback</span>.<span class=\"me1\">Call_Chain</span> <span class=\"br0\">(</span>Trace, Length<span class=\"br0\">)</span>;<br/>      Put_Line <span class=\"br0\">(</span>GNAT.<span class=\"me1\">Traceback</span>.<span class=\"me1\">Symbolic</span>.<span class=\"me1\">Symbolic_Traceback</span> <span class=\"br0\">(</span>Trace <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Call_Stack; <br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Inner <span class=\"br0\">(</span>K\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Call_Stack;<br/>   <span class=\"kw1\">end</span> Inner;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Middle <span class=\"br0\">(</span>X, Y\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Inner <span class=\"br0\">(</span>X * Y<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Middle;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Outer <span class=\"br0\">(</span>A, B, C\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>     Middle <span class=\"br0\">(</span>A + B, B + C<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Outer;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Outer <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Stack_Trace;</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ListLines.htm\"><span class=\"kw3\">ListLines</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> lines recently executed<br/>x <span class=\"sy0\">=</span> local to g<br/><a href=\"http://www.autohotkey.com/docs/commands/ListVars.htm\"><span class=\"kw3\">ListVars</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> variable bindings<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_Persistent.htm\"><span class=\"kw5\">#Persistent</span></a></pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre> 100 DEF PROC callstack\n 110   ON ERROR GOTO 1000\n 120   FOR i=1 TO 100\n 130      POP lnum\n 140      LIST lnum TO lnum\n 150   NEXT i\n 190 END PROC\n\n1000 PRINT \"End of stack\"\n1010 STOP\n</pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;execinfo.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_BT 200</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_stack_trace<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>buffer<span class=\"br0\">[</span>MAX_BT<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>  n <span class=\"sy0\">=</span> backtrace<span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> MAX_BT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"--- (depth\u00a0%d) ---<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  backtrace_symbols_fd<span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> STDERR_FILENO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> inner<span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  print_stack_trace<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> middle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  inner<span class=\"br0\">(</span>x<span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> outer<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  middle<span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span> b<span class=\"sy0\">+</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  outer<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Inner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StackTrace<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Middle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Inner<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Outer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Middle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Outer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doall</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> println <span class=\"br0\">(</span><span class=\"sy0\">.</span>dumpAllThreads <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>management<span class=\"sy0\">.</span>ManagementFactory<span class=\"sy0\">/</span>getThreadMXBean<span class=\"br0\">)</span> false false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>swank-backend<span class=\"sy0\">:</span><span class=\"me1\">call-with-debugging-environment</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>swank<span class=\"sy0\">:</span><span class=\"me1\">backtrace</span> <span class=\"nu0\">0</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> core.<span class=\"me1\">runtime</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> inner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> defaultTraceHandler.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> middle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> inner<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> outer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> middle<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    outer<span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"After the stack trace.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> Inner<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">try</span><br/>      <span class=\"kw1\">raise</span> Exception<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">except</span><br/>      <span class=\"kw1\">on</span> E<span class=\"sy1\">:</span> Exception <span class=\"kw1\">do</span><br/>         PrintLn<span class=\"br0\">(</span>E<span class=\"sy1\">.</span><span class=\"me1\">StackTrace</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Middle<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Inner<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Outer<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Middle<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>Outer<span class=\"sy1\">;</span></pre>"}, {"lang": "Elena", "loc": 25, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>{<br/>    inner<br/>    [<br/>        console printLine(CallStack new).<br/>    ]<br/>\u00a0<br/>    middle<br/>    [<br/>        $self inner.<br/>    ]<br/>\u00a0<br/>    outer<br/>    [<br/>        $self middle.<br/>    ]<br/>\u00a0<br/>    // program entry point<br/>    eval<br/>    [<br/>        $self outer.<br/>    ]<br/>}.</pre>"}, {"lang": "Elixir", "loc": 25, "block": "<pre class=\"text highlighted_source\">defmodule Stack_traces do<br/>  def main do<br/>    {:ok, a} = outer<br/>    IO.inspect a<br/>  end<br/>\u00a0<br/>  defp outer do <br/>    {:ok, a} = middle<br/>    {:ok, a}<br/>  end <br/>\u00a0<br/>  defp middle do<br/>    {:ok, a} = inner<br/>    {:ok, a}<br/>  end<br/>\u00a0<br/>  defp inner do<br/>    try do<br/>      throw(42)<br/>    catch 42 -&gt; {:ok,\u00a0:erlang.get_stacktrace}<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>Stack_traces.main</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>stack_traces<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">outer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">outer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">middle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">middle</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">inner</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">inner</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"kw1\">try</span> <span class=\"kw3\">throw</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span> <span class=\"kw1\">catch</span> <span class=\"nu0\">42</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">stacktrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Diagnostics</span><br/>\u00a0<br/><span class=\"kw1\">type</span> myClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">inner</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span> StackTrace<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">middle</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this.<span class=\"me1\">inner</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">outer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this.<span class=\"me1\">middle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> that <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> myClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    that.<span class=\"me1\">outer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Forth", "loc": 14, "block": "<pre class=\"text highlighted_source\">[UNDEFINED] R.S [IF]<br/>\\ Return stack counterpart of DEPTH<br/>\\ Note the STACK-CELLS correction is there to hide RDEPTH itself<br/>                                       ( -- n)<br/>: RDEPTH STACK-CELLS -2 [+] CELLS <a class=\"__cf_email__\" data-cfemail=\"67353727\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -\u00a0;<br/>\u00a0<br/>\\ Return stack counterpart of .S<br/>\\ Note the\u00a0: R.S R&gt; .. &gt;R\u00a0; sequence is there to hide R.S itself<br/>                                       ( --)<br/>: R.S R&gt; CR RDEPTH DUP 0&gt; IF DUP<br/>  BEGIN DUP WHILE R&gt; -ROT 1- REPEAT DROP DUP<br/>  BEGIN DUP WHILE ROT DUP . &gt;R 1- REPEAT DROP<br/>  THEN .\" (TORS) \" DROP &gt;R\u00a0;<br/>[THEN]</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>Gnash: croak Life is troubled\nGoodbye, cruel world!\nRoutine XeqACard croaks: Life is troubled\n...from XeqACard Confronting croak Life is troubled\n...from Attack   some input\n...from Gnash    Gnash gnashing\nOmitted exit from level 3:XeqACard\nOmitted exit from level 2:Attack\n</pre>"}, {"lang": "Go", "loc": 14, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"runtime\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    stackTrace <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">1024</span><span class=\"sy1\">)</span><br/>    n <span class=\"sy2\">:=</span> runtime<span class=\"sy3\">.</span>Stack<span class=\"sy1\">(</span>stackTrace<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">)</span><br/>    stackTrace <span class=\"sy2\">=</span> stackTrace<span class=\"sy1\">[:</span>n<span class=\"sy1\">]</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> stackTrace<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"(%d bytes)<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>stackTrace<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rawTrace <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Thread&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">currentThread</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">stackTrace</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"unicon highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Utils  <span class=\"co1\"># for buildStackTrace</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"co1\"># Using 1 as argument omits the trace of buildStackTrace itself</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,!</span>buildStackTrace<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">13</span>!:<span class=\"nu0\">0</span>]<span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 11, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> StackTracer <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> printStackTrace<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StackTraceElement.html\"><span class=\"kw21\">StackTraceElement</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> elems = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Thread.html\"><span class=\"kw21\">Thread</span></a>.<span class=\"me1\">currentThread</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">getStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack trace:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = elems.<span class=\"me1\">length</span>-<span class=\"nu0\">1</span>, j = <span class=\"nu0\">2</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">3</span> <span class=\"sy0\">;</span> i--, j+=<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span> + j + <span class=\"st0\">\"s%s.%s%n\"</span>, <span class=\"st0\">\"\"</span>,<br/>\t\t    elems<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">getClassName</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, elems<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">getMethodName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> Error<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">catch</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  alert<span class=\"br0\">(</span>e.<span class=\"me1\">stack</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">f() = g()<br/>g() = println.(stacktrace())<br/>\u00a0<br/>f()</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2 (stacktrace.kt which compiles to StacktraceKt.class)</span><br/>\u00a0<br/>fun myFunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>Throwable<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">stackTrace</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span>Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    myFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Continuing ... \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 24, "block": "<pre class=\"text highlighted_source\">// Define our own trace method<br/>define trace =&gt; {<br/>    local(gb) = givenblock<br/>\u00a0<br/>    // Set a depth counter<br/>    var(::_tracedepth)-&gt;isnota(::integer)\u00a0? $_tracedepth = 0<br/>    handle =&gt; {$_tracedepth--}<br/>\u00a0<br/>    // Only output when supplied a capture<br/>    #gb\u00a0? stdoutnl(<br/>        // Indent<br/>        ('\\t' * $_tracedepth++) +                     <br/>\u00a0<br/>        // Type + Method<br/>        #gb-&gt;self-&gt;type + '.' + #gb-&gt;calledname +     <br/>\u00a0<br/>        // Call site file<br/>        ': ' + #gb-&gt;home-&gt;callsite_file +             <br/>\u00a0<br/>        // Line number and column number<br/>        ' (line '+#gb-&gt;home-&gt;callsite_line + ', col ' + #gb-&gt;home-&gt;callsite_col +')'<br/>    )<br/>    return #gb()<br/>}</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Inner<span class=\"br0\">(</span> k <span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">debug</span><span class=\"sy0\">.</span>traceback<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"Program continues...\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Middle<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y <span class=\"br0\">)</span><br/>    Inner<span class=\"br0\">(</span> x<span class=\"sy0\">+</span>y <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Outer<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c <span class=\"br0\">)</span><br/>    Middle<span class=\"br0\">(</span> a<span class=\"sy0\">*</span>b<span class=\"sy0\">,</span> c <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>Outer<span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">f[g[1, Print[Stack[]]; 2]]</pre>"}, {"lang": "NetRexx", "loc": 23, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">class</span> RStackTraces<br/>  method inner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>    StackTracer.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  method middle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>    inner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  method outer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>    middle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    outer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RStackTraces.<span class=\"me0\">StackTracer</span><br/>  method printStackTrace<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    elems = Thread.<span class=\"me0\">currentThread</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">getStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Stack trace:'</span><br/>    j_ = <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">loop</span> i_ = elems.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span> to <span class=\"nu0\">2</span> by -<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">''</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>j_<span class=\"br0\">)</span> <span class=\"sy0\">||</span> elems<span class=\"br0\">[</span>i_<span class=\"br0\">]</span>.<span class=\"me0\">getClassName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"st0\">'.'</span>elems<span class=\"br0\">[</span>i_<span class=\"br0\">]</span>.<span class=\"me0\">getMethodName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      j_ = j_ + <span class=\"nu0\">2</span><br/>      <span class=\"kw3\">end</span> i_<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 9, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#include &lt;execinfo.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>frames<span class=\"br0\">[</span><span class=\"nu0\">128</span><span class=\"br0\">]</span>;<br/><span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> backtrace<span class=\"br0\">(</span>frames, <span class=\"nu0\">128</span><span class=\"br0\">)</span>;<br/><span class=\"kw4\">char</span> <span class=\"sy0\">**</span>symbols <span class=\"sy0\">=</span> backtrace_symbols<span class=\"br0\">(</span>frames, len<span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; len; <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%s\"</span>, symbols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>symbols<span class=\"br0\">)</span>;</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> div a b <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span> div <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> e <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprerr_endline\"><span class=\"kw3\">prerr_endline</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printexc.html\"><span class=\"kw2\">Printexc</span></a><span class=\"sy0\">.</span>to_string e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printexc.html\"><span class=\"kw2\">Printexc</span></a><span class=\"sy0\">.</span>print_backtrace <span class=\"kw1\">stderr</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: f1   Exception throw(\"An exception\")\u00a0;<br/>Integer method: f2  self f1\u00a0;<br/>: f3   f2\u00a0;<br/>: f4   f3\u00a0;<br/>\u00a0<br/>10 f4</pre>"}, {"lang": "OxygenBasic", "loc": 82, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'32bit x86<br/>\u00a0<br/>static string Report<br/>\u00a0<br/>\u00a0<br/>macro ReportStack(n)<br/>'===================<br/>\u00a0<br/>  '<br/>  scope<br/>  '<br/>  static sys stack[0X100],stackptr,e<br/>  '<br/>  'CAPTURE IMAGE OF UP TO 256 ENTRIES<br/>  '<br/>  '<br/>  mov eax,n<br/>  cmp eax,0x100<br/>  (<br/>    jle exit<br/>    mov eax,0x100 'UPPER LIMIT<br/>  )<br/>  mov e,eax<br/>  mov stackptr,esp<br/>  lea edx,stack<br/>  mov ecx,e<br/>  mov esi,esp<br/>  (<br/>    mov eax,[esi]<br/>    mov [edx],eax<br/>    add esi,4<br/>    add edx,4<br/>    dec ecx<br/>    jg repeat<br/>  )<br/>  sys i<br/>  string cr=chr(13)+chr(10), tab=chr(9)<br/>  '<br/>  for i=1 to e<br/>    report+=hex(stackptr+(i-1)*4,8) tab hex(i-1,2) tab hex(stack[i],8) cr<br/>  next<br/>  '<br/>  end scope<br/>  '<br/>end macro<br/>\u00a0<br/>'====<br/>'TEST<br/>'====<br/>\u00a0<br/>  function foo()<br/>  '=============<br/>\u00a0<br/>  push 0x44556677<br/>  push 0x33445566<br/>  push 0x22334455<br/>  push 0x11223344<br/>  ReportStack(8)<br/>\u00a0<br/>  end function<br/>\u00a0<br/>Report+=\"Trace inside foo<br/>\"<br/>foo()<br/>print report<br/>'putfile \"s.txt\",Report<br/>\u00a0<br/>/*<br/>RESULT:<br/>\u00a0<br/>Trace inside foo<br/>0017FE00\t00\t11223344<br/>0017FE04\t01\t22334455<br/>0017FE08\t02\t33445566<br/>0017FE0C\t03\t44556677<br/>0017FE10\t04\t005EAB1C<br/>0017FE14\t05\t0017FE40<br/>0017FE18\t06\t10002D5F<br/>0017FE1C\t07\t00000000<br/>*/<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 10, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Test</span><span class=\"br0\">}</span><br/>     _ = 1 <span class=\"kw1\">div</span> 0<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span><br/>     <span class=\"br0\">{</span>Test<span class=\"br0\">}</span><br/>  <span class=\"kw1\">catch</span> E <span class=\"kw1\">then</span><br/>     <span class=\"br0\">{</span>Inspect E<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">proc g() =<br/>  writeStackTrace()<br/>proc f() =<br/>  g()<br/>\u00a0<br/>f()</pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Carp <span class=\"st_h\">'cluck'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> g <span class=\"br0\">{</span>cluck <span class=\"st_h\">'Hello from &amp;g'</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> f <span class=\"br0\">{</span>g<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>f<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> g <span class=\"br0\">{</span> <span class=\"kw3\">say</span> Backtrace<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">.</span><span class=\"me1\">concise</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> f <span class=\"br0\">{</span> g <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">{</span> f <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 56, "block": "<pre class=\"text highlighted_source\">constant W = machine_word(),<br/>         {RTN,PREVEBP} = iff(W=4?{8,20}:{16,40})<br/>\u00a0<br/>procedure show_stack()<br/>sequence symtab, symtabN<br/>integer rtn<br/>atom prev_ebp<br/>\u00a0<br/>    #ilASM{<br/>        [32]<br/>            lea edi,[symtab]<br/>            call\u00a0:%opGetST      -- [edi]=symtab (ie our local:=the real symtab)<br/>            mov edi,[ebp+20]    -- prev_ebp<br/>            mov eax,[edi+8]     -- calling routine no<br/>            mov [rtn],eax<br/>            mov eax,edi<br/>            lea edi,[prev_ebp]<br/>            call\u00a0:%pStoreMint<br/>        [64]<br/>            lea rdi,[symtab]<br/>            call\u00a0:%opGetST      -- [rdi]=symtab (ie our local:=the real symtab)<br/>            mov rdi,[rbp+40]    -- prev_ebp<br/>            mov rax,[rdi+16]    -- calling routine no<br/>            mov [rtn],rax<br/>            mov rax,rdi<br/>            lea rdi,[prev_ebp]<br/>            call\u00a0:%pStoreMint<br/>        []<br/>          }<br/>    while rtn!=21 do -- (T_maintls, main top level routine, always present)<br/>        symtabN = symtab[rtn]<br/>       \u00a0?symtabN[1]<br/>        prev_ebp = peekNS(prev_ebp+PREVEBP,W,0)<br/>        rtn = peekNS(prev_ebp+RTN,W,0)<br/>    end while<br/>end procedure<br/>\u00a0<br/>procedure three(bool die)<br/>    if die then<br/>       \u00a0?9/0<br/>    else<br/>        show_stack()<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure two(bool die)<br/>    three(die)<br/>end procedure<br/>\u00a0<br/>procedure one(bool die)<br/>    two(die)<br/>end procedure<br/>\u00a0<br/>one(0)<br/>?routine_id(\"dummy\")    -- see note below<br/>one(1)</pre>"}, {"lang": "PHP", "loc": 15, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> StackTraceDemo <span class=\"br0\">{</span><br/>    static <span class=\"kw2\">function</span> inner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        debug_print_backtrace<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    static <span class=\"kw2\">function</span> middle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"me2\">inner</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    static <span class=\"kw2\">function</span> outer<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"me2\">middle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>StackTraceDemo<span class=\"sy0\">::</span><span class=\"me2\">outer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* The SNAP option in the ON statement is sufficient to obtain */<br/>/* a traceback.  The SYSTEM option specifies that standard     */<br/>/* system action is to occur, which resume execution after the */<br/>/* SIGNAL statement.                                           */<br/>on condition(traceback) snap system;<br/>...<br/>signal condition(traceback);<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(off \"Stack\")<br/>\u00a0<br/>(de $$ \"Prg\"<br/>   (let \"Stack\" (cons (cons (car \"Prg\") (env)) \"Stack\")  # Build stack frame<br/>      (set \"Stack\"<br/>         (delq (asoq '\"Stack\" (car \"Stack\"))  # Remove self-created entries<br/>            (delq (asoq '\"Prg\" (car \"Stack\"))<br/>               (car \"Stack\") ) ) )<br/>      (run (cdr \"Prg\")) ) )  # Run body<br/>\u00a0<br/>(de stackAll (Excl)<br/>   (let *Dbg NIL<br/>      (for \"X\" (all)<br/>         (or<br/>            (memq \"X\" Excl)<br/>            (memq \"X\" '($$ @ @@ @@@))<br/>            (= `(char \"*\") (char \"X\"))<br/>            (cond<br/>               ((= `(char \"+\") (char \"X\"))<br/>                  (for \"Y\" (pair (val \"X\"))<br/>                     (and<br/>                        (pair \"Y\")<br/>                        (fun? (cdr \"Y\"))<br/>                        (unless (== '$$ (caaddr \"Y\"))<br/>                           (con (cdr \"Y\")<br/>                              (list<br/>                                 (cons '$$ (cons (car \"Y\" \"X\") (cddr \"Y\"))) ) ) ) ) ) )<br/>               ((pair (getd \"X\"))<br/>                  (let \"Y\" @<br/>                     (unless (== '$$ (caadr \"Y\"))<br/>                        (con \"Y\"<br/>                           (list (cons '$$ \"X\" (cdr \"Y\"))) ) ) ) ) ) ) ) ) )<br/>\u00a0<br/>(de dumpStack ()<br/>   (more (reverse (cdr \"Stack\")))<br/>   T )</pre>"}, {"lang": "PureBasic", "loc": 17, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Three<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  a<span class=\"sy0\">=</span><span class=\"nu0\">7</span><br/>  ShowCallstack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CallDebugger</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Two<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  a<span class=\"sy0\">=</span><span class=\"nu0\">4</span><br/>  Three<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> One<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  a<span class=\"sy0\">=</span><span class=\"nu0\">2</span><br/>  Two<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>One<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">traceback</span><br/>\u00a0<br/><span class=\"kw1\">def</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw1\">return</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">def</span> g<span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw3\">traceback</span>.<span class=\"me1\">print_stack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>f<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">foo &lt;- function()<br/>{   <br/>   bar &lt;- function()<br/>   {<br/>     sys.calls()<br/>   }  <br/>   bar()<br/>}<br/>\u00a0<br/>foo()</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* call stack */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Call A'</span><br/><span class=\"kw1\">call</span> A <span class=\"st0\">'123'</span><br/><span class=\"kw1\">say</span> <span class=\"kw4\">result</span><br/><span class=\"kw1\">exit</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>A:<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Call B'</span><br/><span class=\"kw1\">call</span> B <span class=\"st0\">'456'</span><br/><span class=\"kw1\">say</span> <span class=\"kw4\">result</span><br/><span class=\"kw1\">return</span> <span class=\"kw1\">ARG</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>B:<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Call C'</span><br/><span class=\"kw1\">call</span> C <span class=\"st0\">'789'</span><br/><span class=\"kw1\">say</span> <span class=\"kw4\">result</span><br/><span class=\"kw1\">return</span> <span class=\"kw1\">ARG</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>C:<br/><span class=\"kw1\">call</span> callstack<br/><span class=\"kw1\">return</span> <span class=\"kw1\">ARG</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>callstack: <span class=\"kw1\">procedure</span><br/>getcallstack<span class=\"br0\">(</span>cs<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Dump call stack with'</span> cs<span class=\"sy0\">.</span>0 <span class=\"st0\">'items'</span><br/><span class=\"kw1\">do</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> cs<span class=\"sy0\">.</span>0<br/>    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> cs<span class=\"sy0\">.</span>i line func<br/>    <span class=\"kw1\">say</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>line, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"st0\">':'</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>func, <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"st0\">': source \"'</span> <span class=\"sy0\">||</span> <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'\"'</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span> cs<span class=\"sy0\">.</span>0</pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; To see these calls we do two things: mutate the binding to prevent<br/>;; Racket from inlining the value; use a (void) call at the end so the<br/>;; calls are not tail calls (which will otherwise not show on the<br/>;; stack).<br/>(define foo #f)<br/>(set! foo (\u03bb() (bar) (void)))<br/>(define bar #f)<br/>(set! bar (\u03bb() (show-stacktrace) (void)))<br/>\u00a0<br/>(define (show-stacktrace)<br/>  (for ([s (continuation-mark-set-&gt;context (current-continuation-marks))]<br/>        [i (in-naturals)])<br/>   \u00a0;; show just the names, not the full source information<br/>    (when (car s) (printf \"~s: ~s\\n\" i (car s)))))<br/>(foo)<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\"> [1 2 3 4] 42 { 'a' 1 'b' 2 'c' 3 } 34.1234 ( -1 -2 -3 )  \"The quick brown fox\" FILE dump</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> outer<span class=\"br0\">(</span>a,b,c<span class=\"br0\">)</span><br/>  middle a<span class=\"sy0\">+</span>b, b<span class=\"sy0\">+</span>c<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> middle<span class=\"br0\">(</span>d,e<span class=\"br0\">)</span><br/>  inner d<span class=\"sy0\">+</span>e<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> inner<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"kw3\">caller</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"continuing... my arg is #{f}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>outer <span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">5</span></pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> callStack <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span> error<span class=\"br0\">(</span><span class=\"st0\">\"exception\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ex <span class=\"sy0\">=&gt;</span> ex.<span class=\"me1\">getStackTrace</span> drop <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printStackTrace <span class=\"sy0\">=</span> callStack drop <span class=\"nu0\">1</span> <span class=\"coMULTI\">/* don't print ourselves! */</span> foreach println</pre>"}, {"lang": "Slate", "loc": 8, "block": "<pre class=\"text highlighted_source\">slate[1]&gt; <a class=\"__cf_email__\" data-cfemail=\"224662\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Debugger traits) printCurrentStack &amp;limit: limit &amp;stream: out &amp;showLocation: showLocation<br/>[<br/>  d clone `&gt;&gt; [baseFramePointer: (d interpreter framePointerOf: #printCurrentStack).<br/>               buildFrames. <br/>               printBacktrace &amp;limit: limit &amp;stream: out &amp;showLocation: showLocation ]<br/>].<br/>Defining function 'printCurrentStack' on: 'Debugger traits'<br/>[printCurrentStack &amp;limit: &amp;stream: &amp;showLocation:]</pre>"}, {"lang": "Smalltalk", "loc": 15, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re0\">Container</span> <span class=\"br0\">[</span><br/>   <span class=\"re0\">Container</span> class &gt;&gt; outer: <span class=\"re5\">a</span> and: <span class=\"re5\">b</span> and: <span class=\"re5\">c</span> <span class=\"br0\">[</span><br/>     <span class=\"kw1\">self</span> middle: <span class=\"br0\">(</span><span class=\"re5\">a</span>+<span class=\"re5\">b</span><span class=\"br0\">)</span> and: <span class=\"br0\">(</span><span class=\"re5\">b</span>+<span class=\"re5\">c</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">]</span><br/>   <span class=\"re0\">Container</span> class &gt;&gt; middle: <span class=\"re5\">x</span> and: <span class=\"re5\">y</span> <span class=\"br0\">[</span><br/>     <span class=\"kw1\">self</span> inner: <span class=\"br0\">(</span><span class=\"re5\">x</span>*<span class=\"re5\">y</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">]</span><br/>   <span class=\"re0\">Container</span> class &gt;&gt; inner: <span class=\"re5\">k</span> <span class=\"br0\">[</span><br/>     <span class=\"re0\">Smalltalk</span> backtrace<br/>   <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re0\">Container</span> outer: <span class=\"re5\">2</span> and: <span class=\"re5\">3</span> and: <span class=\"re5\">5</span>.<br/>\u00a0<br/><span class=\"st0\">'Anyway, we continue with it'</span> displayNl.</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> printStackTrace <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Stack trace:\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"  \"</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn f{println(\"F\");vm.stackTrace().println()} fcn g{println(\"G\")}<br/>f();g();</pre>"}]}