{"task": "Find_the_missing_permutation", "blocks": [{"lang": "360 Assembly", "loc": 29, "block": "<pre class=\"text highlighted_source\">*        Find the missing permutation - 19/10/2015<br/>PERMMISX CSECT<br/>         USING  PERMMISX,R15       set base register<br/>         LA     R4,0               i=0<br/>         LA     R6,1               step<br/>         LA     R7,23              to<br/>LOOPI    BXH    R4,R6,ELOOPI       do i=1 to hbound(perms)<br/>         LA     R5,0               j=0<br/>         LA     R8,1               step<br/>         LA     R9,4               to<br/>LOOPJ    BXH    R5,R8,ELOOPJ       do j=1 to hbound(miss)<br/>         LR     R1,R4              i<br/>         SLA    R1,2               *4<br/>         LA     R3,PERMS-5(R1)     @perms(i)<br/>         AR     R3,R5              j<br/>         LA     R2,MISS-1(R5)      @miss(j)<br/>         XC     0(1,R2),0(R3)      miss(j)=miss(j) xor substr(perms(i),j,1)<br/>         B      LOOPJ<br/>ELOOPJ   B      LOOPI<br/>ELOOPI   XPRNT  MISS,15            print buffer<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>PERMS    DC     C'ABCD',C'CABD',C'ACDB',C'DACB',C'BCDA',C'ACBD'<br/>         DC     C'ADCB',C'CDAB',C'DABC',C'BCAD',C'CADB',C'CDBA'<br/>         DC     C'CBAD',C'ABDC',C'ADBC',C'BDCA',C'DCBA',C'BACD'<br/>         DC     C'BADC',C'BDAC',C'CBDA',C'DBCA',C'DCAB'<br/>MISS     DC     4XL1'00',C' is missing'  buffer<br/>         YREGS<br/>         END    PERMMISX</pre>"}, {"lang": "Ada", "loc": 51, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Missing_Permutations <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Permutation_Character <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'A' .. 'D';<br/>\u00a0<br/>   Character_Count\u00a0: <span class=\"kw3\">constant</span>\u00a0:=<br/>      <span class=\"nu0\">1</span> + Permutation_Character'Pos <span class=\"br0\">(</span>Permutation_Character'Last<span class=\"br0\">)</span><br/>        - Permutation_Character'Pos <span class=\"br0\">(</span>Permutation_Character'First<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Permutation_String <span class=\"kw1\">is</span><br/>     <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Character_Count</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Permutation_Character;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Item\u00a0: Permutation_String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Item'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Item <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   Given_Permutations\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Permutation_String\u00a0:=<br/>     <span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>,<br/>      <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>, <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span>,<br/>      <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>, <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>,<br/>      <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Count    \u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Permutation_Character, <span class=\"nu0\">1</span> .. <span class=\"me1\">Character_Count</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural<br/>     \u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Max_Count\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>\u00a0<br/>   Missing_Permutation\u00a0: Permutation_String;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Given_Permutations'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> Pos <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Character_Count</span> <span class=\"kw1\">loop</span><br/>         Count <span class=\"br0\">(</span>Given_Permutations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>, Pos<span class=\"br0\">)</span>  \u00a0:=<br/>           Count <span class=\"br0\">(</span>Given_Permutations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>, Pos<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">if</span> Count <span class=\"br0\">(</span>Given_Permutations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>, Pos<span class=\"br0\">)</span> &gt; Max_Count <span class=\"kw1\">then</span><br/>            Max_Count\u00a0:= Count <span class=\"br0\">(</span>Given_Permutations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>, Pos<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> Char <span class=\"kw3\">in</span> Permutation_Character <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> Pos <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Character_Count</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Count <span class=\"br0\">(</span>Char, Pos<span class=\"br0\">)</span> &lt; Max_Count <span class=\"kw1\">then</span><br/>            Missing_Permutation <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>\u00a0:= Char;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Missing Permutation:\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>Missing_Permutation<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Missing_Permutations;</pre>"}, {"lang": "Aime", "loc": 34, "block": "<pre class=\"text highlighted_source\">void<br/>paste(record r, index x, text p, integer a)<br/>{<br/>    p = insert(p, -1, a);<br/>    x.delete(a);<br/>    if (~x) {<br/>        x.vcall(paste, -1, r, x, p);<br/>    } else {<br/>        r[p] = 0;<br/>    }<br/>    x[a] = 0;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    record r;<br/>    list l;<br/>    index x;<br/>\u00a0<br/>    l.bill(0, \"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\",<br/>           \"CDAB\", \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\",<br/>           \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\");<br/>\u00a0<br/>    x['A'] = x['B'] = x['C'] = x['D'] = 0;<br/>\u00a0<br/>    x.vcall(paste, -1, r, x, \"\");<br/>\u00a0<br/>    l.ucall(r_delete, 1, r);<br/>\u00a0<br/>    o_(r.low, \"\\n\");<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AppleScript", "loc": 236, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span> <span class=\"co1\">-- ( sort )</span><br/>\u00a0<br/><span class=\"co1\">-- RAREST LETTER IN EACH COLUMN ----------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, \u00ac<br/>        map<span class=\"br0\">(</span>composeAll<span class=\"br0\">(</span><span class=\"br0\">{</span>\u00ac<br/>            head, \u00ac<br/>            curry<span class=\"br0\">(</span>minimumBy<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>comparing<span class=\"br0\">(</span>|length|<span class=\"br0\">)</span><span class=\"br0\">)</span>, \u00ac<br/>            group, \u00ac<br/>            sort<span class=\"br0\">}</span><span class=\"br0\">)</span>, \u00ac<br/>            transpose<span class=\"br0\">(</span>map<span class=\"br0\">(</span>chars, \u00ac<br/>                |words|<span class=\"br0\">(</span><span class=\"st0\">\"ABCD CABD ACDB DACB BCDA ACBD \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    <span class=\"st0\">\"ADCB CDAB DABC BCAD CADB CDBA \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    <span class=\"st0\">\"CBAD ABDC ADBC BDCA DCBA BACD \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    <span class=\"st0\">\"BADC BDAC CBDA DBCA DCAB\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; \"DBAC\"</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- chars\u00a0:: String -&gt; [String]</span><br/><span class=\"kw3\">on</span> chars<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    characters <span class=\"kw3\">of</span> s<br/><span class=\"kw3\">end</span> chars<br/>\u00a0<br/><span class=\"co1\">-- Ordering \u00a0:: (-1 | 0 | 1)</span><br/><span class=\"co1\">-- compare\u00a0:: a -&gt; a -&gt; Ordering</span><br/><span class=\"kw3\">on</span> compare<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> a <span class=\"sy0\">&lt;</span> b <span class=\"kw3\">then</span><br/>        <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> a &gt; b <span class=\"kw3\">then</span><br/>        <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> compare<br/>\u00a0<br/><span class=\"co1\">-- comparing\u00a0:: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)</span><br/><span class=\"kw3\">on</span> comparing<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw3\">to</span> compare<span class=\"br0\">(</span>|\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span>, |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> comparing<br/>\u00a0<br/><span class=\"co1\">-- composeAll\u00a0:: [(a -&gt; a)] -&gt; (a -&gt; a)</span><br/><span class=\"kw3\">on</span> composeAll<span class=\"br0\">(</span>fs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f, a<span class=\"br0\">)</span><br/>                    mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, x, fs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> composeAll<br/>\u00a0<br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (b -&gt; a -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, v, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- group\u00a0:: Eq a =&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> group<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> eq<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">=</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    groupBy<span class=\"br0\">(</span>eq, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> group<br/>\u00a0<br/><span class=\"co1\">-- groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> groupBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> enGroup<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> active <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">missing value</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> h <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw2\">and</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>h, x<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> x, sofar:sofar <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">{</span>x<span class=\"br0\">}</span>, sofar:<span class=\"br0\">(</span>sofar <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> dct <span class=\"kw3\">to</span> foldl<span class=\"br0\">(</span>enGroup, <span class=\"br0\">{</span>active:<span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span>, sofar:<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>active <span class=\"kw3\">of</span> dct<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>            sofar <span class=\"kw3\">of</span> dct <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>active <span class=\"kw3\">of</span> dct<span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            sofar <span class=\"kw3\">of</span> dct<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> groupBy<br/>\u00a0<br/><span class=\"co1\">-- head\u00a0:: [a] -&gt; a</span><br/><span class=\"kw3\">on</span> head<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> head<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- length\u00a0:: [a] -&gt; Int</span><br/><span class=\"kw3\">on</span> |length|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    length <span class=\"kw3\">of</span> xs<br/><span class=\"kw3\">end</span> |length|<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- minimumBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; a </span><br/><span class=\"kw3\">on</span> minimumBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> x <span class=\"kw3\">in</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>x, v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> x<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> minimumBy<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- sort\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> sort<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>current <span class=\"kw1\">application</span><span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:xs<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingSelector:<span class=\"st0\">\"compare:\"</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sort<br/>\u00a0<br/><span class=\"co1\">-- tail\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tail<br/>\u00a0<br/><span class=\"co1\">-- transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> column<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, iCol<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> row<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> xs<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>row, xss<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>column, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> transpose<br/>\u00a0<br/><span class=\"co1\">-- words\u00a0:: String -&gt; [String]</span><br/><span class=\"kw3\">on</span> |words|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    words <span class=\"kw3\">of</span> s<br/><span class=\"kw3\">end</span> |words|</pre>"}, {"lang": "AutoHotkey", "loc": 30, "block": "<pre class=\"autohotkey highlighted_source\">IncompleteList <span class=\"sy0\">:=</span> <span class=\"st0\">\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"</span><br/>\u00a0<br/>CompleteList <span class=\"sy0\">:=</span> Perm<span class=\"br0\">(</span> <span class=\"st0\">\"ABCD\"</span> <span class=\"br0\">)</span><br/>Missing <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> CompleteList<span class=\"sy0\">,</span> `n<span class=\"sy0\">,</span> `r<br/>  <span class=\"kw1\">If</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span> IncompleteList <span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"br0\">)</span><br/>    Missing <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Missing Permutation<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<span class=\"re0\">%Missing%</span><br/>\u00a0<br/><span class=\"co1\">;-------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">; Shortened version of [VxE]'s permutation function</span><br/><span class=\"co1\">; http://www.autohotkey.com/forum/post-322251.html#322251</span><br/>Perm<span class=\"br0\">(</span> s <span class=\"sy0\">,</span> dL<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">,</span> t<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">,</span> p<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span>\u00a0% d <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>dL<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"re0\">%t%</span><br/>   IfEqual<span class=\"sy0\">,</span> m0<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span> m1 d p<br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%m0%</span><br/>   <span class=\"br0\">{</span><br/>      r <span class=\"sy0\">:=</span> m1<br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% m0<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>         x <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> r <span class=\"sy0\">.=</span> d m<span class=\"re0\">%x%</span><br/>      L <span class=\"sy0\">.=</span> Perm<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> m<span class=\"re0\">%m0%</span> d p<span class=\"br0\">)</span><span class=\"st0\">\"`n\"</span> <span class=\"sy0\">,</span> mx <span class=\"sy0\">:=</span> m1<br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% m0<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>         x <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> m<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> m<span class=\"re0\">%x%</span><br/>      m<span class=\"re0\">%m0%</span> <span class=\"sy0\">:=</span> mx<br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">substr</span></a><span class=\"br0\">(</span>L<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 19, "block": "<pre class=\"awk highlighted_source\"><span class=\"br0\">{</span> <br/>  <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"re0\">$1</span>,a,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>; <br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">4</span>;<span class=\"sy3\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    t<span class=\"br0\">[</span>i,a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy3\">++</span>; <br/>  <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>k,a,<span class=\"kw3\">SUBSEP</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>l <span class=\"kw1\">in</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">split</span><span class=\"br0\">(</span>l, b, <span class=\"kw3\">SUBSEP</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;&amp;</span> t<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">&lt;</span> t<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s<span class=\"br0\">[</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> = a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">break</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw5\">print</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>s<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">      DIM perms$(22), miss&amp;(4)<br/>      perms$() = \"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \\<br/>      \\  \"CDAB\", \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \\<br/>      \\  \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\"<br/>\u00a0<br/>      FOR i% = 0 TO DIM(perms$(),1)<br/>        FOR j% = 1 TO DIM(miss&amp;(),1)<br/>          miss&amp;(j%-1) EOR= ASCMID$(perms$(i%),j%)<br/>        NEXT<br/>      NEXT<br/>      PRINT $$^miss&amp;(0) \" is missing\"<br/>      END</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ln\"ABCD\"<a class=\"__cf_email__\" data-cfemail=\"6d1f2d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/\\\\<br/>\u00a0</pre>"}, {"lang": "C", "loc": 33, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N 4</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>perms<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"st0\">\"ABCD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CABD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ACDB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DACB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BCDA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ACBD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ADCB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CDAB\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"DABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BCAD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CADB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CDBA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CBAD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ABDC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ADBC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BDCA\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"DCBA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BACD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BADC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BDAC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CBDA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DBCA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DCAB\"</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> cnt<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> miss<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> n <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* n = (N-1)!, # of occurrence */</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> cnt<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* count how many times each letter occur at position i */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>perms<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tcnt<span class=\"br0\">[</span>perms<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* letter not occurring (N-1)! times is the missing one */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> N <span class=\"sy0\">&amp;&amp;</span> cnt<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tmiss<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Missing:\u00a0%.*s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> miss<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> GivenPermutations<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"ABCD\"</span>,<span class=\"st0\">\"CABD\"</span>,<span class=\"st0\">\"ACDB\"</span>,<span class=\"st0\">\"DACB\"</span>,<br/>  <span class=\"st0\">\"BCDA\"</span>,<span class=\"st0\">\"ACBD\"</span>,<span class=\"st0\">\"ADCB\"</span>,<span class=\"st0\">\"CDAB\"</span>,<br/>  <span class=\"st0\">\"DABC\"</span>,<span class=\"st0\">\"BCAD\"</span>,<span class=\"st0\">\"CADB\"</span>,<span class=\"st0\">\"CDBA\"</span>,<br/>  <span class=\"st0\">\"CBAD\"</span>,<span class=\"st0\">\"ABDC\"</span>,<span class=\"st0\">\"ADBC\"</span>,<span class=\"st0\">\"BDCA\"</span>,<br/>  <span class=\"st0\">\"DCBA\"</span>,<span class=\"st0\">\"BACD\"</span>,<span class=\"st0\">\"BADC\"</span>,<span class=\"st0\">\"BDAC\"</span>,<br/>  <span class=\"st0\">\"CBDA\"</span>,<span class=\"st0\">\"DBCA\"</span>,<span class=\"st0\">\"DCAB\"</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">size_t</span> NumGivenPermutations <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span>GivenPermutations<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>GivenPermutations<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> permutations<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> initial <span class=\"sy1\">=</span> <span class=\"st0\">\"ABCD\"</span><span class=\"sy4\">;</span><br/>    permutations.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>initial<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">string</span> p <span class=\"sy1\">=</span> permutations.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">next_permutation</span><span class=\"br0\">(</span>p.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, p.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>p <span class=\"sy1\">==</span> permutations.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>        permutations.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> missing<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> given_permutations<span class=\"br0\">(</span>GivenPermutations, GivenPermutations <span class=\"sy2\">+</span> NumGivenPermutations<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">set_difference</span><span class=\"br0\">(</span>permutations.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, permutations.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, given_permutations.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        given_permutations.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>missing<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>missing.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, missing.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 41, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MissingPermutation<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> given <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <br/>                                            <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>, <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>, <br/>                                            <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span>, <br/>                                            <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>, <br/>                                            <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>, <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <br/>                                            <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            permuteString<span class=\"br0\">(</span><span class=\"kw1\">ref</span> result, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> a <span class=\"kw1\">in</span> result<span class=\"br0\">)</span>            <br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Array<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>given, a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> <span class=\"st0\">\" is a missing Permutation\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> permuteString<span class=\"br0\">(</span><span class=\"kw1\">ref</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> result, <span class=\"kw4\">string</span> beginningString, <span class=\"kw4\">string</span> endingString<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>endingString<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span>                 <br/>                result<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>beginningString <span class=\"sy0\">+</span> endingString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> endingString<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span>                     <br/>                    <span class=\"kw4\">string</span> newString <span class=\"sy0\">=</span> endingString<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> endingString<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    permuteString<span class=\"br0\">(</span><span class=\"kw1\">ref</span> result, beginningString <span class=\"sy0\">+</span> <span class=\"br0\">(</span>endingString<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>, newString<span class=\"br0\">)</span><span class=\"sy0\">;</span>                    <br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>combinatorics<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> given <span class=\"br0\">(</span><span class=\"kw1\">apply</span> hash<span class=\"sy0\">-</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"st0\">\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> s1 <span class=\"br0\">(</span><span class=\"kw1\">apply</span> hash<span class=\"sy0\">-</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span>permutations <span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  \t   <br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> missing <span class=\"br0\">(</span>difference s1 given<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 37, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>missing_permutation = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Find the missing permutation in an array of N! - 1 permutations.</span><br/>\u00a0<br/>  <span class=\"co1\"># We won't validate every precondition, but we do have some basic</span><br/>  <span class=\"co1\"># guards.</span><br/>  <span class=\"kw1\">if</span> arr.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"Need more data\"</span><br/>  <span class=\"kw1\">if</span> arr.<span class=\"me1\">length</span> == <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">[</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\"># Now we know that for each position in the string, elements should appear</span><br/>  <span class=\"co1\"># an even number of times (N-1 &gt;= 2).  We can use a set to detect the element appearing</span><br/>  <span class=\"co1\"># an odd number of times.  Detect odd occurrences by toggling admission/expulsion</span><br/>  <span class=\"co1\"># to and from the set for each value encountered.  At the end of each pass one element</span><br/>  <span class=\"co1\"># will remain in the set.</span><br/>  result = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">for</span> pos <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><br/>      set = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">for</span> permutation <span class=\"kw1\">in</span> arr<br/>          c = permutation<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><br/>          <span class=\"kw1\">if</span> set<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>            <span class=\"kw3\">delete</span> set<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>          <span class=\"kw1\">else</span><br/>            set<span class=\"br0\">[</span>c<span class=\"br0\">]</span> = <span class=\"kw4\">true</span><br/>      <span class=\"kw1\">for</span> c <span class=\"kw1\">of</span> set<br/>        result <span class=\"sy0\">+</span>= c<br/>        <span class=\"kw1\">break</span><br/>  result<br/>\u00a0<br/>given = <span class=\"st0\">'''ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA <br/>  CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB'''</span><br/>\u00a0<br/>arr = <span class=\"br0\">(</span>s <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> given.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span> <span class=\"st0\">' '</span> <span class=\"kw1\">when</span> s <span class=\"sy0\">!</span>= <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> missing_permutation<span class=\"br0\">(</span>arr<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *permutations*<br/>  '<span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span> <span class=\"st0\">\"CABD\"</span> <span class=\"st0\">\"ACDB\"</span> <span class=\"st0\">\"DACB\"</span> <span class=\"st0\">\"BCDA\"</span> <span class=\"st0\">\"ACBD\"</span> <span class=\"st0\">\"ADCB\"</span> <span class=\"st0\">\"CDAB\"</span> <span class=\"st0\">\"DABC\"</span> <span class=\"st0\">\"BCAD\"</span> <span class=\"st0\">\"CADB\"</span> <span class=\"st0\">\"CDBA\"</span><br/>    <span class=\"st0\">\"CBAD\"</span> <span class=\"st0\">\"ABDC\"</span> <span class=\"st0\">\"ADBC\"</span> <span class=\"st0\">\"BDCA\"</span> <span class=\"st0\">\"DCBA\"</span> <span class=\"st0\">\"BACD\"</span> <span class=\"st0\">\"BADC\"</span> <span class=\"st0\">\"BDAC\"</span> <span class=\"st0\">\"CBDA\"</span> <span class=\"st0\">\"DBCA\"</span> <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> missing-perm <span class=\"br0\">(</span>perms<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>letters <span class=\"br0\">(</span>loop for i across <span class=\"br0\">(</span><span class=\"kw1\">car</span> perms<span class=\"br0\">)</span> collecting i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">length</span> perms<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>enum <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>loop for i below n collecting i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>least-occurs <span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>occurs <span class=\"br0\">(</span>loop for i in perms collecting <span class=\"br0\">(</span><span class=\"kw1\">aref</span> i pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>letter<span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>count letter occurs<span class=\"br0\">)</span> letter<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t    letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>concatenate 'string <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'least-occurs <span class=\"br0\">(</span>enum <span class=\"br0\">(</span><span class=\"kw1\">length</span> letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 43, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> perms <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC<br/>                       BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD<br/>                       BADC BDAC CBDA DBCA DCAB\"</span>.<span class=\"me1\">split</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Version 1: test all permutations.</span><br/>    <span class=\"kw4\">immutable</span> permsSet <span class=\"sy0\">=</span> perms<br/>                         .<span class=\"me1\">map</span><span class=\"sy0\">!</span>representation<br/>                         .<span class=\"me1\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">true</span>.<span class=\"me1\">repeat</span><span class=\"br0\">)</span><br/>                         .<span class=\"me1\">assocArray</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> perm <span class=\"sy0\">=</span> perms<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">representation</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>perm <span class=\"sy0\">!</span><span class=\"kw2\">in</span> permsSet<span class=\"br0\">)</span><br/>            writeln<span class=\"br0\">(</span>perm.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>perm.<span class=\"me1\">nextPermutation</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Version 2: xor all the ASCII values, the uneven one</span><br/>    <span class=\"co1\">// gets flushed out. Based on Perl 6 (via Go).</span><br/>    <span class=\"kw4\">enum</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span><span class=\"br0\">[</span>len<span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> p<span class=\"sy0\">;</span> perms<span class=\"br0\">)</span><br/>        b<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">^=</span> p<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    b.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Version 3: sum ASCII values.</span><br/>    <span class=\"kw4\">immutable</span> rowSum <span class=\"sy0\">=</span> perms<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>    len<br/>    .<span class=\"me1\">iota</span><br/>    .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> to<span class=\"sy0\">!</span><span class=\"kw4\">char</span><span class=\"br0\">(</span>rowSum <span class=\"sy0\">-</span> perms.<span class=\"me1\">transversal</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">%</span> rowSum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Version 4: a checksum, Java translation. maxCode will be 36.</span><br/>    <span class=\"kw4\">immutable</span> maxCode <span class=\"sy0\">=</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"br0\">(</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> code <span class=\"sy0\">=</span> perms.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> perms<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Code will come up 3, 1, 0, 2 short of 36.</span><br/>        perms<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>maxCode <span class=\"sy0\">-</span> code<span class=\"br0\">]</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; use the obvious methos</span><br/><span class=\"br0\">(</span>lib '<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"co1\">; for (permutations) function</span><br/>\u00a0<br/><span class=\"co1\">;; input</span><br/><span class=\"br0\">(</span>define perms '<br/><span class=\"br0\">(</span>ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; generate all permutations</span><br/><span class=\"br0\">(</span>define all-perms <span class=\"br0\">(</span>map list-<span class=\"sy0\">&gt;</span>string <span class=\"br0\">(</span>permutations '<span class=\"br0\">(</span>A B C D<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 all-perms<br/>\u00a0<br/><span class=\"co1\">;; {set} substraction</span><br/><span class=\"br0\">(</span>set-substract <span class=\"br0\">(</span>make-<span class=\"kw1\">set</span> all-perms<span class=\"br0\">)</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">set</span> perms<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  \u2192 <span class=\"br0\">{</span> DBAC <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def find_miss_perm(head, perms) do<br/>    all_permutations(head) -- perms<br/>  end<br/>\u00a0<br/>  defp all_permutations(string) do<br/>    list = String.split(string, \"\", trim: true)<br/>    Enum.map(permutations(list), fn x -&gt; Enum.join(x) end)<br/>  end<br/>\u00a0<br/>  defp permutations([]), do: [[]]<br/>  defp permutations(list), do: (for x &lt;- list, y &lt;- permutations(list -- [x]), do: [x|y])<br/>end<br/>\u00a0<br/>perms = [\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\", \"DABC\", \"BCAD\", \"CADB\", \"CDBA\",<br/>         \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\"]<br/>\u00a0<br/>IO.inspect RC.find_miss_perm( hd(perms), perms )</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> find_missing_permutation <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>difference<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">difference</span><span class=\"br0\">(</span> <span class=\"re5\">Permutate_this</span><span class=\"sy1\">,</span> <span class=\"re5\">Existing_permutations</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">all_permutations</span><span class=\"br0\">(</span> <span class=\"re5\">Permutate_this</span> <span class=\"br0\">)</span> <span class=\"sy3\">--</span> <span class=\"re5\">Existing_permutations</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">difference</span><span class=\"br0\">(</span> <span class=\"st0\">\"ABCD\"</span><span class=\"sy1\">,</span> <span class=\"re3\">existing_permutations</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">all_permutations</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">A</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re3\">is_different</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">existing_permutations</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"ABCD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CABD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ACDB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DACB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BCDA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ACBD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ADCB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CDAB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DABC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BCAD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CADB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CDBA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CBAD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ABDC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ADBC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BDCA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DCBA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BACD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BADC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BDAC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CBDA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DBCA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">_H</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_different</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">H</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"kw1\">andalso</span> <span class=\"re3\">is_different</span><span class=\"br0\">(</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MISSING<br/>\u00a0<br/>CONST N=4<br/>\u00a0<br/>DIM PERMS$[23]<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0! CLS<br/>  DATA(\"ABCD\",\"CABD\",\"ACDB\",\"DACB\",\"BCDA\",\"ACBD\",\"ADCB\")<br/>  DATA(\"CDAB\",\"DABC\",\"BCAD\",\"CADB\",\"CDBA\",\"CBAD\",\"ABDC\",\"ADBC\")<br/>  DATA(\"BDCA\",\"DCBA\",\"BACD\",\"BADC\",\"BDAC\",\"CBDA\",\"DBCA\",\"DCAB\")<br/>\u00a0<br/>  FOR I%=1 TO UBOUND(PERMS$,1) DO<br/>    READ(PERMS$[I%])<br/>  END FOR<br/>\u00a0<br/>  SOL$=\"....\"<br/>\u00a0<br/>  FOR I%=1 TO N DO<br/>    CH$=CHR$(I%+64)<br/>    COUNT%=0<br/>    FOR Z%=1 TO N DO<br/>       COUNT%=0<br/>       FOR J%=1 TO UBOUND(PERMS$,1) DO<br/>          IF CH$=MID$(PERMS$[J%],Z%,1) THEN COUNT%=COUNT%+1 END IF<br/>       END FOR<br/>       IF COUNT%&lt;&gt;6 THEN<br/>          \u00a0!$RCODE=\"MID$(SOL$,Z%,1)=CH$\"<br/>       END IF<br/>    END FOR<br/>  END FOR<br/>  PRINT(\"Solution is: \";SOL$)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: io math.combinatorics sequences sets\u00a0;<br/>\u00a0<br/>\"ABCD\" all-permutations lines diff first print</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\"> hex<br/> ABCD     CABD xor ACDB xor DACB xor BCDA xor ACBD xor<br/> ADCB xor CDAB xor DABC xor BCAD xor CADB xor CDBA xor<br/> CBAD xor ABDC xor ADBC xor BDCA xor DCBA xor BACD xor<br/> BADC xor BDAC xor CBDA xor DBCA xor DCAB xor<br/> cr .( Missing permutation: ) u.<br/> decimal</pre>"}, {"lang": "Fortran", "loc": 16, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> missing_permutation<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">23</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">list</span> <span class=\"sy0\">=</span>                    <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">'ABCD'</span>, <span class=\"st0\">'CABD'</span>, <span class=\"st0\">'ACDB'</span>, <span class=\"st0\">'DACB'</span>, <span class=\"st0\">'BCDA'</span>, <span class=\"st0\">'ACBD'</span>, <span class=\"st0\">'ADCB'</span>, <span class=\"st0\">'CDAB'</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'DABC'</span>, <span class=\"st0\">'BCAD'</span>, <span class=\"st0\">'CADB'</span>, <span class=\"st0\">'CDBA'</span>, <span class=\"st0\">'CBAD'</span>, <span class=\"st0\">'ABDC'</span>, <span class=\"st0\">'ADBC'</span>, <span class=\"st0\">'BDCA'</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span>   <span class=\"st0\">'DCBA'</span>, <span class=\"st0\">'BACD'</span>, <span class=\"st0\">'BADC'</span>, <span class=\"st0\">'BDAC'</span>, <span class=\"st0\">'CBDA'</span>, <span class=\"st0\">'DBCA'</span>, <span class=\"st0\">'DCAB'</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, k<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><br/>    j <span class=\"sy0\">=</span> <span class=\"kw4\">minloc</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">count</span> <span class=\"br0\">(</span>list <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> list <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"sy0\">:</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span>, k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">'no'</span><span class=\"br0\">)</span> list <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>j <span class=\"sy0\">:</span> j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> missing_permutation</pre>"}, {"lang": "FreeBASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 30-03-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>, <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>, <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ulong total<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">' total(0 to 3, 65 to 68)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong i, j, n = <span class=\"nu0\">24</span> \\ <span class=\"nu0\">4</span>   <span class=\"co1\">' n! \\ n</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> tmp<br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">23</span><br/>    <span class=\"kw1\">Read</span> tmp<br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>        total<span class=\"br0\">(</span>j, tmp<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>tmp = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">For</span> j = <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> total<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> &lt;&gt; n <span class=\"kw1\">Then</span><br/>         tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = j<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The missing permutation is\u00a0: \"</span>; tmp<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "GAP", "loc": 17, "block": "<pre class=\"text highlighted_source\"># our deficient list<br/>L\u00a0:=<br/>[ \"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\",<br/>  \"ACBD\", \"ADCB\", \"CDAB\", \"DABC\", \"BCAD\",<br/>  \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\",<br/>  \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\",<br/>  \"CBDA\", \"DBCA\", \"DCAB\" ];<br/>\u00a0<br/># convert L to permutations on 1..4<br/>u\u00a0:= List(L, s -&gt; List([1..4], i -&gt; Position(\"ABCD\", s[i])));<br/>\u00a0<br/># set difference (with all permutations)<br/>v\u00a0:= Difference(PermutationsList([1..4]), u);<br/>\u00a0<br/># convert back to letters<br/>s\u00a0:= \"ABCD\";<br/>List(v, p -&gt; List(p, i -&gt; s[i]));</pre>"}, {"lang": "Go", "loc": 47, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> given <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span><span class=\"co2\">`ABCD<br/>CABD<br/>ACDB<br/>DACB<br/>BCDA<br/>ACBD<br/>ADCB<br/>CDAB<br/>DABC<br/>BCAD<br/>CADB<br/>CDBA<br/>CBAD<br/>ABDC<br/>ADBC<br/>BDCA<br/>DCBA<br/>BACD<br/>BADC<br/>BDAC<br/>CBDA<br/>DBCA<br/>DCAB`</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    b <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>given<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>        m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">byte</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> given <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span>p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]]</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> char<span class=\"sy1\">,</span> count <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> count&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> char<br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fact <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> prod, i <span class=\"sy0\">-&gt;</span> prod <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> missingPerms<br/>missingPerms <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> elts, <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> perms <span class=\"sy0\">-&gt;</span><br/>    perms.<span class=\"me1\">empty</span> <span class=\"sy0\">?</span> elts.<span class=\"me1\">permutations</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: elts.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> e <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> ePerms <span class=\"sy0\">=</span> perms.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> e <span class=\"sy0\">==</span> it<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        ePerms.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> fact<span class=\"br0\">(</span>elts.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> \\<br/>           \u00a0: missingPerms<span class=\"br0\">(</span>elts <span class=\"sy0\">-</span> e, ePerms<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span>e<span class=\"br0\">]</span> <span class=\"sy0\">+</span> it <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 37, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><span class=\"br0\">(</span>\\\\<span class=\"br0\">)</span><span class=\"sy0\">,</span> permutations<span class=\"sy0\">,</span> nub<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>join<span class=\"br0\">)</span><br/>\u00a0<br/>missingPerm<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>missingPerm <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\\\\<span class=\"br0\">)</span> <span class=\"sy0\">=&lt;&lt;</span> permutations <span class=\"sy0\">.</span> nub <span class=\"sy0\">.</span> join<br/>\u00a0<br/>deficientPermsList <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>deficientPermsList <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"st0\">\"ABCD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CABD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"ACDB\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"DACB\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BCDA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"ACBD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"ADCB\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CDAB\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"DABC\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BCAD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CADB\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CDBA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CBAD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"ABDC\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"ADBC\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BDCA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"DCBA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BACD\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BADC\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"BDAC\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"CBDA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"DBCA\"</span><br/>  <span class=\"sy0\">,</span> <span class=\"st0\">\"DCAB\"</span><br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> missingPerm deficientPermsList</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> strings    <span class=\"co1\"># for permutes</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>givens <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"sy1\">!</span><span class=\"br0\">[</span> <span class=\"st0\">\"ABCD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CABD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ACDB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DACB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BCDA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ACBD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ADCB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CDAB\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DABC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BCAD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CADB\"</span><span class=\"sy1\">,</span> <br/>                <span class=\"st0\">\"CDBA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CBAD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ABDC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"ADBC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BDCA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DCBA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BACD\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BADC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"BDAC\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"CBDA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DBCA\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>full <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> permutes<span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># generate all permutations</span><br/>givens <span class=\"sy1\">:=</span> full<span class=\"sy1\">--</span>givens                         <span class=\"co1\"># and difference</span><br/>\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The difference is\u00a0: \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>givens<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">permutations=: A.~ <a class=\"__cf_email__\" data-cfemail=\"9df4b3dd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"143554\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<br/>missingPerms=: -.~ permutations @ {.</pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">com.google.common.base.Joiner</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">com.google.common.collect.ImmutableSet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">com.google.common.collect.Lists</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FindMissingPermutation <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tJoiner joiner <span class=\"sy0\">=</span> Joiner.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">skipNulls</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tImmutableSet<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> s <span class=\"sy0\">=</span> ImmutableSet.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>, <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>, <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"CDBA\"</span>, <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>, <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>, <span class=\"st0\">\"BADC\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>ArrayList<span class=\"sy0\">&lt;</span>Character<span class=\"sy0\">&gt;</span> cs <span class=\"sy0\">:</span> Utils.<span class=\"me1\">Permutations</span><span class=\"br0\">(</span>Lists.<span class=\"me1\">newArrayList</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s.<span class=\"me1\">contains</span><span class=\"br0\">(</span>joiner.<span class=\"me1\">join</span><span class=\"br0\">(</span>cs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>joiner.<span class=\"me1\">join</span><span class=\"br0\">(</span>cs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\">permute <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//v1.0</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> v.<span class=\"me1\">length</span><span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"sy0\">;</span> q <span class=\"sy0\">*=</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> q<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">;</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j <span class=\"sy0\">/=</span> <span class=\"sy0\">--</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>p <span class=\"sy0\">&lt;</span> q<span class=\"sy0\">;</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> l<span class=\"sy0\">;</span> <span class=\"sy0\">!--</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> l<span class=\"br0\">)</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m <span class=\"sy0\">?</span> x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:</span> v<span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>f<span class=\"sy0\">;</span> f <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">;</span> x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">--</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> l<span class=\"sy0\">,</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>list <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"st0\">'ABCD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CABD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ACDB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'DACB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BCDA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ACBD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ADCB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CDAB'</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">'DABC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BCAD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CADB'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CDBA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CBAD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ABDC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ADBC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BDCA'</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">'DCBA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BACD'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BADC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'BDAC'</span><span class=\"sy0\">,</span> <span class=\"st0\">'CBDA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'DBCA'</span><span class=\"sy0\">,</span> <span class=\"st0\">'DCAB'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>all <span class=\"sy0\">=</span> permute<span class=\"br0\">(</span>list<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> elem.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>missing <span class=\"sy0\">=</span> all.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> list.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>missing<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// ==&gt; DBAC</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre> jq -R . Find_the_missing_permutation.txt | jq -s -f Find_the_missing_permutation.jq\n</pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">using Combinatorics<br/>function missingperm(arr::Vector)<br/>    allperms = permutations(arr[1])<br/>    for perm in allperms<br/>        perm = convert(eltype(arr), perm)<br/>        if perm \u2209 arr return perm end<br/>    end<br/>end<br/>\u00a0<br/>arr = [\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\", \"DABC\", \"BCAD\",<br/>       \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\",<br/>       \"CBDA\", \"DBCA\", \"DCAB\"]<br/>@show missingperm(arr)</pre>"}, {"lang": "Obvious method", "loc": 13, "block": "<pre class=\"text highlighted_source\">using Combinatorics<br/>function missingperm(arr::Vector)<br/>    allperms = permutations(arr[1])<br/>    for perm in allperms<br/>        perm = convert(eltype(arr), perm)<br/>        if perm \u2209 arr return perm end<br/>    end<br/>end<br/>\u00a0<br/>arr = [\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\", \"DABC\", \"BCAD\",<br/>       \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\",<br/>       \"CBDA\", \"DBCA\", \"DCAB\"]<br/>@show missingperm(arr)</pre>"}, {"lang": "Alternative method", "loc": 17, "block": "<pre class=\"text highlighted_source\">function missingperm1(arr::Vector{&lt;:AbstractString})<br/>    missperm = string()<br/>    for pos in 1:length(arr[1])<br/>        s = Set()<br/>        for perm in arr<br/>            c = perm[pos]<br/>            if c \u2208 s pop!(s, c) else push!(s, c) end<br/>        end<br/>        missperm *= first(s)<br/>    end<br/>    return missperm<br/>end<br/>\u00a0<br/>using BenchmarkTools<br/>\u00a0<br/>@btime missingperm(arr)<br/>@btime missingperm1(arr)</pre>"}, {"lang": "K", "loc": 24, "block": "<pre class=\"text highlighted_source\">   split:{1_'(&amp;x=y)_ x:y,x}<br/>\u00a0<br/>   g: (\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB\")<br/>   g,:(\" CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\")<br/>   p: split[g;\" \"];<br/>\u00a0<br/>   / All permutations of \"ABCD\"<br/>   perm:{:[1&lt;x;,/(&gt;:'(x,x)#1,x#0)[;0,'1+_f x-1];,!x]}<br/>   p2:<a class=\"__cf_email__\" data-cfemail=\"593819\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(perm(#a:\"ABCD\"));<br/>\u00a0<br/>   / Which permutations in p are there in p2?<br/>   p2 _lin p<br/>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1<br/>\u00a0<br/>   / Invert the result<br/>   ~p2 _lin p<br/>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0<br/>\u00a0<br/>   / It's the 20th permutation that is missing<br/>   &amp;~p2 _lin p<br/>,20<br/>\u00a0<br/>   <a class=\"__cf_email__\" data-cfemail=\"acdc9eec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;~p2 _lin p<br/>\"DBAC\"</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> permute<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> listOf<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toInsert <span class=\"sy0\">=</span> input<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>perm in permute<span class=\"br0\">(</span>input.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">perm</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newPerm <span class=\"sy0\">=</span> perm.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            newPerm.<span class=\"me1\">add</span><span class=\"br0\">(</span>i, toInsert<span class=\"br0\">)</span><br/>            perms.<span class=\"me1\">add</span><span class=\"br0\">(</span>newPerm<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> perms<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> missingPerms<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span>, perms<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> permute<span class=\"br0\">(</span>input<span class=\"br0\">)</span> - perms<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>, <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>,<br/>        <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span>, <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>,<br/>        <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>, <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> strings.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toList</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> missing <span class=\"sy0\">=</span> missingPerms<span class=\"br0\">(</span>input, perms<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>missing.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"The missing permutation is ${missing[0].joinToString(\"</span><span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"There are ${missing.size} missing permutations, namely:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>perm in missing<span class=\"br0\">)</span> println<span class=\"br0\">(</span>perm.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> permute<span class=\"sy0\">,</span> tablex <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"pl.permute\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"pl.tablex\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> permList<span class=\"sy0\">,</span> pStr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"ABCD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CABD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ACDB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DACB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BCDA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ACBD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ADCB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CDAB\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"DABC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BCAD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CADB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CDBA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CBAD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ABDC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ADBC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BDCA\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"DCBA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BACD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BADC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BDAC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CBDA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DBCA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"DCAB\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> perm <span class=\"kw2\">in</span> permute<span class=\"sy0\">.</span>iter<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"D\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    pStr <span class=\"sy0\">=</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>perm<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> tablex<span class=\"sy0\">.</span>find<span class=\"br0\">(</span>permList<span class=\"sy0\">,</span> pStr<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>pStr<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 11, "block": "<pre class=\"text highlighted_source\">lst\u00a0:= [\"ABCD\",\"CABD\",\"ACDB\",\"DACB\",\"BCDA\",\"ACBD\",\"ADCB\",\"CDAB\",\"DABC\",\"BCAD\",\"CADB\",\"CDBA\",\"CBAD\",\"ABDC\",\"ADBC\",\"BDCA\",\"DCBA\",\"BACD\",\"BADC\",\"BDAC\",\"CBDA\",\"DBCA\",\"DCAB\"]:<br/>perm\u00a0:= table():<br/>for letter in \"ABCD\" do<br/>\tperm[letter]\u00a0:= 0:<br/>end do:<br/>for item in lst do<br/>\tfor letter in \"ABCD\" do<br/>\t\tperm[letter] += StringTools:-FirstFromLeft(letter, item):<br/>\tend do:<br/>end do:<br/>print(StringTools:-Join(ListTools:-Flatten([indices(perm)], 4)[sort(map(x-&gt;60-x, ListTools:-Flatten([entries(perm)],4)),'output=permutation')], \"\")):</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">ProvidedSet = {\"ABCD\" , \"CABD\" , \"ACDB\" , \"DACB\" , \"BCDA\" , \"ACBD\", <br/>\"ADCB\" , \"CDAB\", \"DABC\", \"BCAD\" , \"CADB\", \"CDBA\" , \"CBAD\" , \"ABDC\", <br/>\"ADBC\" , \"BDCA\",  \"DCBA\" , \"BACD\", \"BADC\", \"BDAC\" , \"CBDA\", \"DBCA\", \"DCAB\"};<br/>\u00a0<br/>Complement[StringJoin /@ <a class=\"__cf_email__\" data-cfemail=\"18487d6a756d6c796c7177766b585b70796a797b6c7d6a6b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"a2e4cbd0d1d6e2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, #] &amp;@ProvidedSet<br/>\u00a0<br/>\u00a0<br/>-&gt;{\"DBAC\"}</pre>"}, {"lang": "MATLAB", "loc": 27, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> perm = findMissingPerms<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>\u00a0<br/>    permsList = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/perms.html\"><span class=\"kw2\">perms</span></a><span class=\"br0\">(</span>list<span class=\"br0\">(</span><span class=\"nu0\">1</span>,:<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%Generate all permutations of the 4 letters</span><br/>    perm = <span class=\"br0\">[</span><span class=\"br0\">]</span>; <span class=\"co1\">%This is the functions return value if the list is not missing a permutation</span><br/>\u00a0<br/>    <span class=\"co1\">%Normally the rest of this would be vectorized, but because this is</span><br/>    <span class=\"co1\">%done on a vector of strings, the vectorized functions will only access</span><br/>    <span class=\"co1\">%one character at a time. So, in order for this to work we have to use</span><br/>    <span class=\"co1\">%loops.</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>permsList,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        found = false;<br/>\u00a0<br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>list,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>permsList<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>,:<span class=\"br0\">)</span> == list<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a>,:<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                found = true;<br/>                <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> not<span class=\"br0\">(</span>found<span class=\"br0\">)</span><br/>            perm = permsList<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>,:<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%for   </span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%fingMissingPerms</span></pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc missingPermutation(arr): string =<br/>  result = \"\"<br/>  if arr.len == 0: return<br/>  if arr.len == 1: return arr[0][1] &amp; arr[0][0]<br/>\u00a0<br/>  for pos in 0 .. &lt;arr[0].len:<br/>    var s: set[char] = {}<br/>    for permutation in arr:<br/>      let c = permutation[pos]<br/>      if c in s: s.excl c<br/>      else:      s.incl c<br/>    for c in s: result.add c<br/>\u00a0<br/>const given = \"\"\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>  CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"\"\".split()<br/>\u00a0<br/>echo missingPermutation(given)</pre>"}, {"lang": "OCaml", "loc": 18, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* insert x at all positions into li and return the list of results *)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> insert x <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> a<span class=\"sy0\">::</span>m <span class=\"kw1\">as</span> li <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>li<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> y <span class=\"sy0\">-&gt;</span> a<span class=\"sy0\">::</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span>insert x m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* list of all permutations of li *)</span><br/><span class=\"kw1\">let</span> permutations li <span class=\"sy0\">=</span> <br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_right <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a z <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>concat <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span>insert a<span class=\"br0\">)</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span> li <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">(* convert a string to a char list *)</span><br/><span class=\"kw1\">let</span> chars_of_string s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> cl <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> cl <span class=\"sy0\">:=</span> c <span class=\"sy0\">::</span> <span class=\"sy0\">!</span>cl<span class=\"br0\">)</span> s<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev <span class=\"sy0\">!</span>cl<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* convert a char list to a string *)</span><br/><span class=\"kw1\">let</span> string_of_chars cl <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>make <span class=\"nu0\">1</span><span class=\"br0\">)</span> cl<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 15, "block": "<pre class=\"octave highlighted_source\">given <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"co3\">'ABCD'</span><span class=\"sy5\">;</span><span class=\"co3\">'CABD'</span><span class=\"sy5\">;</span><span class=\"co3\">'ACDB'</span><span class=\"sy5\">;</span><span class=\"co3\">'DACB'</span><span class=\"sy5\">;</span> <span class=\"sy5\">...</span><br/>          <span class=\"co3\">'BCDA'</span><span class=\"sy5\">;</span><span class=\"co3\">'ACBD'</span><span class=\"sy5\">;</span><span class=\"co3\">'ADCB'</span><span class=\"sy5\">;</span><span class=\"co3\">'CDAB'</span><span class=\"sy5\">;</span> <span class=\"sy5\">...</span><br/>          <span class=\"co3\">'DABC'</span><span class=\"sy5\">;</span><span class=\"co3\">'BCAD'</span><span class=\"sy5\">;</span><span class=\"co3\">'CADB'</span><span class=\"sy5\">;</span><span class=\"co3\">'CDBA'</span><span class=\"sy5\">;</span> <span class=\"sy5\">...</span><br/>          <span class=\"co3\">'CBAD'</span><span class=\"sy5\">;</span><span class=\"co3\">'ABDC'</span><span class=\"sy5\">;</span><span class=\"co3\">'ADBC'</span><span class=\"sy5\">;</span><span class=\"co3\">'BDCA'</span><span class=\"sy5\">;</span> <span class=\"sy5\">...</span><br/>          <span class=\"co3\">'DCBA'</span><span class=\"sy5\">;</span><span class=\"co3\">'BACD'</span><span class=\"sy5\">;</span><span class=\"co3\">'BADC'</span><span class=\"sy5\">;</span><span class=\"co3\">'BDAC'</span><span class=\"sy5\">;</span> <span class=\"sy5\">...</span><br/>          <span class=\"co3\">'CBDA'</span><span class=\"sy5\">;</span><span class=\"co3\">'DBCA'</span><span class=\"sy5\">;</span><span class=\"co3\">'DCAB'</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>val <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy2\">.^</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">'</span><span class=\"sy5\">;</span><br/>there <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">+</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/toascii.html\"><span class=\"kw5\">toascii</span></a><span class=\"br0\">(</span>given<span class=\"br0\">)</span><span class=\"sy1\">-</span><a href=\"http://octave.sourceforge.net/octave/function/toascii.html\"><span class=\"kw5\">toascii</span></a><span class=\"br0\">(</span><span class=\"co3\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>val<span class=\"sy5\">;</span><br/>every <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">+</span><a href=\"http://octave.sourceforge.net/octave/function/perms.html\"><span class=\"kw6\">perms</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>val<span class=\"sy5\">;</span><br/>\u00a0<br/>bits <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/zeros.html\"><span class=\"kw5\">zeros</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/max.html\"><span class=\"kw6\">max</span></a><span class=\"br0\">(</span>every<span class=\"br0\">)</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>bits<span class=\"br0\">(</span>every<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>bits<span class=\"br0\">(</span>there<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/>missing <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/dec2base.html\"><span class=\"kw6\">dec2base</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/find.html\"><span class=\"kw6\">find</span></a><span class=\"br0\">(</span>bits<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"co3\">'ABCD'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 19, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  GivenPermutations =<br/>  <span class=\"br0\">[</span><span class=\"st0\">\"ABCD\"</span> <span class=\"st0\">\"CABD\"</span> <span class=\"st0\">\"ACDB\"</span> <span class=\"st0\">\"DACB\"</span> <span class=\"st0\">\"BCDA\"</span> <span class=\"st0\">\"ACBD\"</span> <span class=\"st0\">\"ADCB\"</span> <span class=\"st0\">\"CDAB\"</span> <span class=\"st0\">\"DABC\"</span> <span class=\"st0\">\"BCAD\"</span> <span class=\"st0\">\"CADB\"</span> <span class=\"st0\">\"CDBA\"</span><br/>   <span class=\"st0\">\"CBAD\"</span> <span class=\"st0\">\"ABDC\"</span> <span class=\"st0\">\"ADBC\"</span> <span class=\"st0\">\"BDCA\"</span> <span class=\"st0\">\"DCBA\"</span> <span class=\"st0\">\"BACD\"</span> <span class=\"st0\">\"BADC\"</span> <span class=\"st0\">\"BDAC\"</span> <span class=\"st0\">\"CBDA\"</span> <span class=\"st0\">\"DBCA\"</span> <span class=\"st0\">\"DCAB\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">%% four distinct variables between \"A\" and \"D\":</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Description</span> Root<span class=\"br0\">}</span><br/>     Root = <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>list 4 <span class=\"re3\">&amp;A</span><span class=\"sy0\">#</span><span class=\"re3\">&amp;D</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>distinct Root<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>distribute naiv Root<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  AllPermutations = <span class=\"br0\">{</span>SearchAll Description<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> P <span class=\"kw1\">in</span> AllPermutations <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>Member P GivenPermutations<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Missing: \"</span><span class=\"sy0\">#</span>P<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"st0\">\"ABCD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CABD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ACDB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DACB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BCDA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ACBD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ADCB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CDAB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DABC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BCAD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CADB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CDBA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CBAD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ABDC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ADBC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BDCA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DCBA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BACD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BADC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BDAC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CBDA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DBCA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DCAB\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>v<span class=\"sy0\">=</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>u<span class=\"sy0\">-&gt;</span><span class=\"kw1\">permtonum</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">-</span><span class=\"nu1\">64</span><span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>t<span class=\"sy0\">=</span><span class=\"kw1\">numtoperm</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span> <span class=\"kw1\">binomial</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">!,</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">+</span><span class=\"nu1\">64</span><span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 63, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> MissPerm<span class=\"sy1\">;</span><br/><span class=\"co2\">{$MODE DELPHI}</span> <span class=\"co1\">//for result</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  maxcol <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tmissPerm <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">23</span><span class=\"sy1\">;</span><br/>  tcol <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">maxcol</span><span class=\"sy1\">;</span><br/>  tResString <span class=\"sy3\">=</span> <span class=\"kw4\">String</span><span class=\"br0\">[</span>maxcol<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  Given_Permutations <span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span>tmissPerm<span class=\"br0\">]</span> <span class=\"kw1\">of</span> tResString <span class=\"sy3\">=</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">'ABCD'</span><span class=\"sy1\">,</span> <span class=\"st0\">'CABD'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ACDB'</span><span class=\"sy1\">,</span> <span class=\"st0\">'DACB'</span><span class=\"sy1\">,</span> <span class=\"st0\">'BCDA'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ACBD'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'ADCB'</span><span class=\"sy1\">,</span> <span class=\"st0\">'CDAB'</span><span class=\"sy1\">,</span> <span class=\"st0\">'DABC'</span><span class=\"sy1\">,</span> <span class=\"st0\">'BCAD'</span><span class=\"sy1\">,</span> <span class=\"st0\">'CADB'</span><span class=\"sy1\">,</span> <span class=\"st0\">'CDBA'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'CBAD'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ABDC'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ADBC'</span><span class=\"sy1\">,</span> <span class=\"st0\">'BDCA'</span><span class=\"sy1\">,</span> <span class=\"st0\">'DCBA'</span><span class=\"sy1\">,</span> <span class=\"st0\">'BACD'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'BADC'</span><span class=\"sy1\">,</span> <span class=\"st0\">'BDAC'</span><span class=\"sy1\">,</span> <span class=\"st0\">'CBDA'</span><span class=\"sy1\">,</span> <span class=\"st0\">'DBCA'</span><span class=\"sy1\">,</span> <span class=\"st0\">'DCAB'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  chOfs <span class=\"sy3\">=</span>  <span class=\"kw3\">Ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  SumElemCol<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tcol<span class=\"sy1\">,</span>tcol<span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CountOccurences<span class=\"sy1\">:</span> tresString<span class=\"sy1\">;</span><br/><span class=\"co1\">//count the number of every letter in every column</span><br/><span class=\"co1\">//should be (colmax-1)! =&gt; 6</span><br/><span class=\"co1\">//the missing should count (colmax-1)! -1 =&gt; 5</span><br/><span class=\"kw1\">var</span><br/>  fibN_1 <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>  row<span class=\"sy1\">,</span> col<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> row <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tmissPerm<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tmissPerm<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">For</span> col <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      inc<span class=\"br0\">(</span>SumElemCol<span class=\"br0\">[</span>col<span class=\"sy1\">,</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>Given_Permutations<span class=\"br0\">[</span>row<span class=\"sy1\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">-</span>chOfs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">//search the missing</span><br/>  fibN_1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> fib<span class=\"br0\">(</span>maxcol<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>result<span class=\"sy1\">,</span>maxcol<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> col <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">For</span> row <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">IF</span> SumElemCol<span class=\"br0\">[</span>col<span class=\"sy1\">,</span>row<span class=\"br0\">]</span><span class=\"sy3\">=</span>fibN_1 <span class=\"kw1\">then</span><br/>        result<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span>row<span class=\"sy3\">+</span>chOfs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CheckXOR<span class=\"sy1\">:</span> tresString<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  row<span class=\"sy1\">,</span>col<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  setlength<span class=\"br0\">(</span>result<span class=\"sy1\">,</span>maxcol<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  fillchar<span class=\"br0\">(</span>result<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>maxcol<span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> row <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tmissPerm<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tmissPerm<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">For</span> col <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tcol<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      result<span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>result<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">XOR</span> <span class=\"kw3\">ord</span><span class=\"br0\">(</span>Given_Permutations<span class=\"br0\">[</span>row<span class=\"sy1\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>CountOccurences<span class=\"sy1\">,</span><span class=\"st0\">' is missing'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>CheckXOR<span class=\"sy1\">,</span><span class=\"st0\">' is missing'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> check_perm <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%hash</span><span class=\"sy0\">;</span> <span class=\"re0\">@hash</span><span class=\"br0\">{</span><span class=\"co5\">@_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$hash</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">$_</span><br/>        <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check and display</span><br/><span class=\"re0\">@perms</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>            CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> check_perm<span class=\"br0\">(</span><span class=\"re0\">@perms</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@givens</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>                CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@perms</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>A B C D<span class=\"sy0\">&gt;.</span><span class=\"me1\">permutations</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">when</span> <span class=\"kw3\">none</span><span class=\"br0\">(</span><span class=\"re0\">@givens</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@perms</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 46, "block": "<pre class=\"text highlighted_source\">constant perms = {\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\",<br/>                  \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\",<br/>                  \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\"}<br/>\u00a0<br/>-- 1: sum of letters<br/>sequence r = repeat(0,4)<br/>for i=1 to length(perms) do<br/>    r = sq_add(r,perms[i])<br/>end for<br/>r = sq_sub(max(r)+'A',r)<br/>puts(1,r&amp;'\\n')<br/>-- based on the notion that missing = sum(full)-sum(partial) would be true,<br/>--  and that sum(full) would be like {M,M,M,M} rather than a mix of numbers.<br/>-- the final step is equivalent to eg {1528,1530,1531,1529} <br/>--                        max-r[i] -&gt; {   3,   1,   0,   2}<br/>--                        to chars -&gt; {   D,   B,   A,   C}<br/>-- (but obviously both done in one line)<br/>\u00a0<br/>-- 2: the xor trick<br/>r = repeat(0,4)<br/>for i=1 to length(perms) do<br/>    r = sq_xor_bits(r,perms[i])<br/>end for<br/>puts(1,r&amp;'\\n')<br/>-- (relies on the missing chars being present an odd number of times, non-missing chars an even number of times)<br/>\u00a0<br/>-- 3: find least frequent letters<br/>r = \"    \"<br/>for i=1 to length(r) do<br/>    sequence count = repeat(0,4)<br/>    for j=1 to length(perms) do<br/>        count[perms[j][i]-'A'+1] += 1<br/>    end for<br/>    r[i] = smallest(count,1)+'A'-1<br/>end for<br/>puts(1,r&amp;'\\n')<br/>-- (relies on the assumption that a full set would have each letter occurring the same number of times in each position)<br/>-- (smallest(count,1) returns the index position of the smallest, rather than it's value)<br/>\u00a0<br/>-- 4: test all permutations<br/>for i=1 to factorial(4) do<br/>    r = permute(i,\"ABCD\")<br/>    if not find(r,perms) then exit end if<br/>end for<br/>puts(1,r&amp;'\\n')<br/>-- (relies on brute force(!) - but this is the only method that could be made to cope with &gt;1 omission)</pre>"}, {"lang": "PHP", "loc": 21, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$finalres</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">function</span> permut<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"sy0\">,</span><span class=\"re0\">$result</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">global</span>  <span class=\"re0\">$finalres</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$finalres</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"re0\">$result</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$newArr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arr</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$newres</span> <span class=\"sy0\">=</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$newres</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$val</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$newArr</span><span class=\"br0\">[</span><span class=\"re0\">$key</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tpermut<span class=\"br0\">(</span><span class=\"re0\">$newArr</span><span class=\"sy0\">,</span><span class=\"re0\">$newres</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$givenPerms</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ABCD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CABD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ACDB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DACB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BCDA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ACBD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ADCB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CDAB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DABC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BCAD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CADB\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CDBA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CBAD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ABDC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"ADBC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BDCA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DCBA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BACD\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BADC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"BDAC\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"CBDA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DBCA\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"DCAB\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$given</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"D\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>permut<span class=\"br0\">(</span><span class=\"re0\">$given</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_diff\"><span class=\"kw3\">array_diff</span></a><span class=\"br0\">(</span><span class=\"re0\">$finalres</span><span class=\"sy0\">,</span><span class=\"re0\">$givenPerms</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Array ( [20] =&gt; DBAC ) </span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(setq *PermList<br/>   (mapcar chop<br/>      (quote<br/>         \"ABCD\" \"CABD\" \"ACDB\" \"DACB\" \"BCDA\" \"ACBD\" \"ADCB\" \"CDAB\"<br/>         \"DABC\" \"BCAD\" \"CADB\" \"CDBA\" \"CBAD\" \"ABDC\" \"ADBC\" \"BDCA\"<br/>         \"DCBA\" \"BACD\" \"BADC\" \"BDAC\" \"CBDA\" \"DBCA\" \"DCAB\" ) ) )<br/>\u00a0<br/>(let (Lst (chop \"ABCD\")  L Lst)<br/>   (recur (L)  # Permute<br/>      (if (cdr L)<br/>         (do (length L)<br/>            (recurse (cdr L))<br/>            (rot L) )<br/>         (unless (member Lst *PermList)  # Check<br/>            (prinl Lst) ) ) ) )</pre>"}, {"lang": "PowerShell", "loc": 58, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> permutation <span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> generate<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$array</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span><span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$array</span> <span class=\"re0\">$A</span><br/>                <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$temp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$temp</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$temp</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$temp</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$array</span> <span class=\"re0\">$A</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$array</span>.Count<br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>generate <span class=\"re0\">$n</span> <span class=\"re0\">$array</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$array</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$perm</span> <span class=\"sy0\">=</span> permutation <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"sy0\">,</span><span class=\"st0\">'C'</span><span class=\"sy0\">,</span> <span class=\"st0\">'D'</span><span class=\"br0\">)</span><br/><span class=\"re0\">$find</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><br/><span class=\"st0\">\"ABCD\"</span><br/><span class=\"st0\">\"CABD\"</span><br/><span class=\"st0\">\"ACDB\"</span><br/><span class=\"st0\">\"DACB\"</span><br/><span class=\"st0\">\"BCDA\"</span><br/><span class=\"st0\">\"ACBD\"</span><br/><span class=\"st0\">\"ADCB\"</span><br/><span class=\"st0\">\"CDAB\"</span><br/><span class=\"st0\">\"DABC\"</span><br/><span class=\"st0\">\"BCAD\"</span><br/><span class=\"st0\">\"CADB\"</span><br/><span class=\"st0\">\"CDBA\"</span><br/><span class=\"st0\">\"CBAD\"</span><br/><span class=\"st0\">\"ABDC\"</span><br/><span class=\"st0\">\"ADBC\"</span><br/><span class=\"st0\">\"BDCA\"</span><br/><span class=\"st0\">\"DCBA\"</span><br/><span class=\"st0\">\"BACD\"</span><br/><span class=\"st0\">\"BADC\"</span><br/><span class=\"st0\">\"BDAC\"</span><br/><span class=\"st0\">\"CBDA\"</span><br/><span class=\"st0\">\"DBCA\"</span><br/><span class=\"st0\">\"DCAB\"</span><br/><span class=\"br0\">)</span><br/><span class=\"re0\">$perm</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span><span class=\"br0\">{</span><span class=\"kw4\">-not</span> <span class=\"re0\">$find</span>.Contains<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 39, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> in_List<span class=\"br0\">(</span><span class=\"kw3\">in</span>.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i i, j<br/>  <span class=\"kw1\">Define</span>.s a<br/>  <span class=\"kw1\">Restore</span> data_to_test<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Read</span>.s a<br/>    <span class=\"kw1\">If</span> <span class=\"kw3\">in</span><span class=\"sy0\">=</span>a<br/>      <span class=\"kw1\">ProcedureReturn</span> #True<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">ProcedureReturn</span> #False<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span>.c z, x, c, v<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> z<span class=\"sy0\">=</span>'A' <span class=\"kw1\">To</span> 'D'<br/>    <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span>'A' <span class=\"kw1\">To</span> 'D'<br/>      <span class=\"kw1\">If</span> z<span class=\"sy0\">=</span>x:<span class=\"kw1\">Continue</span>:<span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">For</span> c<span class=\"sy0\">=</span>'A' <span class=\"kw1\">To</span> 'D'<br/>        <span class=\"kw1\">If</span> c<span class=\"sy0\">=</span>x <span class=\"kw1\">Or</span> c<span class=\"sy0\">=</span>z:<span class=\"kw1\">Continue</span>:<span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">For</span> v<span class=\"sy0\">=</span>'A' <span class=\"kw1\">To</span> 'D'<br/>          <span class=\"kw1\">If</span> v<span class=\"sy0\">=</span>c <span class=\"kw1\">Or</span> v<span class=\"sy0\">=</span>x <span class=\"kw1\">Or</span> v<span class=\"sy0\">=</span>z:<span class=\"kw1\">Continue</span>:<span class=\"kw1\">EndIf</span><br/>          <span class=\"kw1\">Define</span>.s <span class=\"kw3\">test</span><span class=\"sy0\">=</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> in_List<span class=\"br0\">(</span><span class=\"kw3\">test</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw3\">test</span><span class=\"sy0\">+</span><span class=\"st0\">\" is missing.\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">EndIf</span> <br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press Enter to exit\"</span><span class=\"br0\">)</span>:<span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>data_to_test:<br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ABCD\"</span>,<span class=\"st0\">\"CABD\"</span>,<span class=\"st0\">\"ACDB\"</span>,<span class=\"st0\">\"DACB\"</span>,<span class=\"st0\">\"BCDA\"</span>,<span class=\"st0\">\"ACBD\"</span>,<span class=\"st0\">\"ADCB\"</span>,<span class=\"st0\">\"CDAB\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"DABC\"</span>,<span class=\"st0\">\"BCAD\"</span>,<span class=\"st0\">\"CADB\"</span>,<span class=\"st0\">\"CDBA\"</span>,<span class=\"st0\">\"CBAD\"</span>,<span class=\"st0\">\"ABDC\"</span>,<span class=\"st0\">\"ADBC\"</span>,<span class=\"st0\">\"BDCA\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"DCBA\"</span>,<span class=\"st0\">\"BACD\"</span>,<span class=\"st0\">\"BADC\"</span>,<span class=\"st0\">\"BDAC\"</span>,<span class=\"st0\">\"CBDA\"</span>,<span class=\"st0\">\"DBCA\"</span>,<span class=\"st0\">\"DCAB\"</span><br/><span class=\"kw1\">EndDataSection</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/>\u00a0<br/>given <span class=\"sy0\">=</span> <span class=\"st0\">'''ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>           CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB'''</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>allPerms <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span>given<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>missing <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>allPerms<span class=\"br0\">)</span> - <span class=\"kw2\">set</span><span class=\"br0\">(</span>given<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># ['DBAC']</span></pre>"}, {"lang": "R", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>library(combinat)<br/>\u00a0<br/>permute.me &lt;- c(\"A\", \"B\", \"C\", \"D\")<br/>perms  &lt;- permn(permute.me)  # list of all permutations<br/>perms2 &lt;- matrix(unlist(perms), ncol=length(permute.me), byrow=T)  # matrix of all permutations<br/>perms3 &lt;- apply(perms2, 1, paste, collapse=\"\")  # vector of all permutations<br/>\u00a0<br/>incomplete &lt;- c(\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\", \"ADCB\", \"CDAB\", <br/>                \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\", \"BDCA\", <br/>                \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\")<br/>\u00a0<br/>setdiff(perms3, incomplete)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define almost-all<br/>  '([A B C D] [C A B D] [A C D B] [D A C B] [B C D A] [A C B D] [A D C B]<br/>    [C D A B] [D A B C] [B C A D] [C A D B] [C D B A] [C B A D] [A B D C]<br/>    [A D B C] [B D C A] [D C B A] [B A C D] [B A D C] [B D A C] [C B D A]<br/>    [D B C A] [D C A B]))<br/>\u00a0<br/>\u00a0<br/>;; Obvious method:<br/>(for/first ([p (in-permutations (car almost-all))]<br/>            #:unless (member p almost-all))<br/>  p)<br/>;; -&gt; '(D B A C)<br/>\u00a0<br/>\u00a0<br/>;; For permutations of any set<br/>(define charmap<br/>  (for/hash ([x (in-list (car almost-all))] [i (in-naturals)])<br/>    (values x i)))<br/>(define size (hash-count charmap))<br/>\u00a0<br/>;; Illustrating approach mentioned in the task description.<br/>;; For each position, character with odd parity at that position.<br/>\u00a0<br/>(require data/bit-vector)<br/>\u00a0<br/>(for/list ([i (in-range size)])<br/>  (define parities (make-bit-vector size #f))<br/>  (for ([permutation (in-list almost-all)])<br/>    (define n (hash-ref charmap (list-ref permutation i)))<br/>    (bit-vector-set! parities n (not (bit-vector-ref parities n))))<br/>  (for/first ([(c i) charmap] #:when (bit-vector-ref parities i))<br/>    c))<br/>;; -&gt; '(D B A C)<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 26, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Dim</span> PList <span class=\"kw4\">as</span> QStringList<br/>PList.addItems <span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>, <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span><br/>PList.additems <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span>, <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span><br/>PList.additems <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>, <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span><br/>\u00a0<br/><span class=\"kw4\">Dim</span> NumChar(4, 65 <span class=\"kw3\">to</span> 68) <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw4\">Dim</span> MPerm <span class=\"kw4\">as</span> <span class=\"kw1\">string</span><br/>\u00a0<br/><span class=\"co1\">'Create table with occurences<br/></span><span class=\"kw3\">For</span> x = 0 <span class=\"kw3\">to</span> PList.Itemcount -1<br/>    <span class=\"kw3\">for</span> y = 1 <span class=\"kw3\">to</span> 4<br/>        Inc(NumChar(y, asc(PList.Item(x)[y])))<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">next</span><br/>\u00a0<br/><span class=\"co1\">'When a char only occurs 5 times it's the missing one<br/></span><span class=\"kw3\">for</span> x = 1 <span class=\"kw3\">to</span> 4<br/>    <span class=\"kw3\">for</span> y = 65 <span class=\"kw3\">to</span> 68<br/>        MPerm = MPerm + iif(NumChar(x, y)=5, chr$(y), <span class=\"st0\">\"\"</span>)<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">next</span><br/>\u00a0<br/>showmessage MPerm <br/><span class=\"co1\">'= DBAC<br/></span></pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm finds one or more missing permutations from an internal list &amp; displays them.*/</span><br/>          list = <span class=\"st0\">'ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA'</span>,<br/>                 <span class=\"st0\">'CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB'</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/* [\u2193]  needs to be as long as  THINGS.*/</span><br/>@abcU  = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>            <span class=\"coMULTI\">/*an uppercase (Latin/Roman) alphabet. */</span><br/>things = <span class=\"nu0\">4</span>                                       <span class=\"coMULTI\">/*number of unique letters to be used. */</span><br/>bunch  = <span class=\"nu0\">4</span>                                       <span class=\"coMULTI\">/*number letters to be used at a time. */</span><br/>                 <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> things              <span class=\"coMULTI\">/* [\u2193]  only get a portion of alphabet.*/</span><br/>                 $<span class=\"sy0\">.</span>j=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>@abcU,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*extract just one letter from alphabet*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                     <span class=\"coMULTI\">/* [\u2191]  build a letter array for speed.*/</span><br/><span class=\"kw1\">call</span> permSet <span class=\"nu0\">1</span>                                   <span class=\"coMULTI\">/*invoke PERMSET subroutine recursively*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>permSet: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> $<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> bunch list things;    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?<br/>         <span class=\"kw1\">if</span>\u00a0?<span class=\"sy0\">&gt;</span>bunch  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  _=<br/>                                   <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> bunch           <span class=\"coMULTI\">/*build a permutation.   */</span><br/>                                   _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>m                  <span class=\"coMULTI\">/*add permutation\u2500\u2500\u25balist.*/</span><br/>                                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/>                                                               <span class=\"coMULTI\">/* [\u2193]  is in the list?  */</span><br/>                          <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>_,list<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> _  <span class=\"st0\">' is missing from the list.'</span><br/>                          <span class=\"kw3\">end</span><br/>                     <span class=\"kw3\">else</span> <span class=\"kw1\">do</span> x=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> things                   <span class=\"coMULTI\">/*build a permutation.   */</span><br/>                                   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>\u00a0?-<span class=\"nu0\">1</span><br/>                                   <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>k==$<span class=\"sy0\">.</span>x <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> x  <span class=\"coMULTI\">/*was permutation built? */</span><br/>                                   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>                          @<span class=\"sy0\">.</span>?=$<span class=\"sy0\">.</span>x                              <span class=\"coMULTI\">/*define as being built. */</span><br/>                          <span class=\"kw1\">call</span> permSet \u00a0?+<span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/*call subr. recursively.*/</span><br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*x*/</span><br/>         <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>list = \"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"<br/>\u00a0<br/>for a = ascii(\"A\") to ascii(\"D\")<br/>    for b = ascii(\"A\") to ascii(\"D\")<br/>        for c = ascii(\"A\") to ascii(\"D\")<br/>            for d = ascii(\"A\") to ascii(\"D\") <br/>                x = char(a) + char(b) + char(c)+ char(d)<br/>                if a!=b and a!=c and a!=d and b!=c and b!=d and c!=d<br/>                   if substr(list,x) = 0 see x + \" missing\" + nl ok ok<br/>            next<br/>        next<br/>    next <br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">given = <span class=\"sy0\">%</span>w<span class=\"br0\">{</span><br/>  ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>  CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB<br/><span class=\"br0\">}</span><br/>\u00a0<br/>all = given<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">permutation</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:join<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"missing: #{all - given}\"</span></pre>"}, {"lang": "Run BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">list$ = \"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"<br/>\u00a0<br/>for a = asc(\"A\") to asc(\"D\")<br/>  for b = asc(\"A\") to asc(\"D\")<br/>    for c = asc(\"A\") to asc(\"D\")<br/>      for d = asc(\"A\") to asc(\"D\")<br/>        x$ = chr$(a) + chr$(b) + chr$(c)+ chr$(d)<br/>        for i = 1 to 4                                            ' make sure each letter is unique<br/>          j = instr(x$,mid$(x$,i,1))<br/>          if instr(x$,mid$(x$,i,1),j + 1) &lt;&gt; 0 then goto [nxt]<br/>        next i<br/>       if instr(list$,x$) = 0 then print x$;\" missing\"            ' found missing permutation<br/>[nxt] next d<br/>    next c<br/>  next b<br/>next a</pre>"}, {"lang": "Scala", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fat<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_*_</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> perm<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, a<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> a.<span class=\"me1\">size</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fatN1 <span class=\"sy0\">=</span> fat<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fatN <span class=\"sy0\">=</span> fatN1 <span class=\"sy0\">*</span> n<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> x / fatN1 <span class=\"sy0\">%</span> fatN<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>before, Seq<span class=\"br0\">(</span>el, after <span class=\"sy0\">@</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a splitAt p<br/>  el +<span class=\"sy0\">:</span> perm<span class=\"br0\">(</span>x <span class=\"sy0\">%</span> fatN1, before ++ after<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> findMissingPerm<span class=\"br0\">(</span>start<span class=\"sy0\">:</span> String, perms<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>    i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until fat<span class=\"br0\">(</span>start.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    p <span class=\"sy0\">=</span> perm<span class=\"br0\">(</span>i, start<span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>perms.<span class=\"me1\">contains</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<br/>  <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"ABCD<br/>CABD<br/>ACDB<br/>DACB<br/>BCDA<br/>ACBD<br/>ADCB<br/>CDAB<br/>DABC<br/>BCAD<br/>CADB<br/>CDBA<br/>CBAD<br/>ABDC<br/>ADBC<br/>BDCA<br/>DCBA<br/>BACD<br/>BADC<br/>BDAC<br/>CBDA<br/>DBCA<br/>DCAB\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">stripMargin</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span>findMissingPerm<span class=\"br0\">(</span>perms<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, perms<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 33, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: missingPermutation (in array string: perms) is func<br/>  result<br/>    var string: missing is \"\";<br/>  local<br/>    var integer: pos is 0;<br/>    var set of char: chSet is (set of char).EMPTY_SET;<br/>    var string: permutation is \"\";<br/>    var char: ch is ' ';<br/>  begin<br/>    if length(perms) &lt;&gt; 0 then<br/>      for key pos range perms[1] do<br/>        chSet\u00a0:= (set of char).EMPTY_SET;<br/>        for permutation range perms do<br/>          ch\u00a0:= permutation[pos];<br/>          if ch in chSet then<br/>            excl(chSet, ch);<br/>          else<br/>            incl(chSet, ch);<br/>          end if;<br/>        end for;<br/>        missing &amp;:= min(chSet);<br/>      end for;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(missingPermutation([] (\"ABCD\", \"CABD\", \"ACDB\", \"DACB\", \"BCDA\", \"ACBD\",<br/>           \"ADCB\", \"CDAB\", \"DABC\", \"BCAD\", \"CADB\", \"CDBA\", \"CBAD\", \"ABDC\", \"ADBC\",<br/>           \"BDCA\", \"DCBA\", \"BACD\", \"BADC\", \"BDAC\", \"CBDA\", \"DBCA\", \"DCAB\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func check_perm<span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var hash = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    hash.<span class=\"me1\">set_keys</span><span class=\"br0\">(</span>arr...<span class=\"br0\">)</span><br/>    arr.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>        <span class=\"br0\">{</span><br/>            var t = <span class=\"br0\">(</span>s.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> s.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            hash.<span class=\"me1\">has_key</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> t<br/>        <span class=\"br0\">}</span> <span class=\"sy0\">*</span> s.<span class=\"me1\">len</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var perms = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA<br/>               CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB<span class=\"br0\">)</span><br/>\u00a0<br/>say check_perm<span class=\"br0\">(</span>perms<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">set</span> have <span class=\"br0\">{</span> \\<br/>    ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC \\<br/>    ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB \\<br/><span class=\"br0\">}</span><br/>\u00a0<br/>struct::<span class=\"kw2\">list</span> foreachperm element <span class=\"br0\">{</span>A B C D<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> text <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$element</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$text</span> ni <span class=\"re0\">$have</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"Missing permutation(s): $text\"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">permutations = ~&amp;itB^?a\\~&amp;aNC *=ahPfatPRD refer ^C/~&amp;a ~&amp;ar&amp;&amp; ~&amp;arh2falrtPXPRD</pre>"}, {"lang": "VBScript", "loc": 26, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>arrp = Array(<span class=\"st0\">\"ABCD\"</span>, <span class=\"st0\">\"CABD\"</span>, <span class=\"st0\">\"ACDB\"</span>, <span class=\"st0\">\"DACB\"</span>, <span class=\"st0\">\"BCDA\"</span>, <span class=\"st0\">\"ACBD\"</span>,_<br/>      <span class=\"st0\">\"ADCB\"</span>, <span class=\"st0\">\"CDAB\"</span>, <span class=\"st0\">\"DABC\"</span>, <span class=\"st0\">\"BCAD\"</span>, <span class=\"st0\">\"CADB\"</span>, <span class=\"st0\">\"CDBA\"</span>,_<br/>      <span class=\"st0\">\"CBAD\"</span>, <span class=\"st0\">\"ABDC\"</span>, <span class=\"st0\">\"ADBC\"</span>, <span class=\"st0\">\"BDCA\"</span>, <span class=\"st0\">\"DCBA\"</span>, <span class=\"st0\">\"BACD\"</span>,_<br/>      <span class=\"st0\">\"BADC\"</span>, <span class=\"st0\">\"BDAC\"</span>, <span class=\"st0\">\"CBDA\"</span>, <span class=\"st0\">\"DBCA\"</span>, <span class=\"st0\">\"DCAB\"</span>)<br/>\u00a0<br/><span class=\"kw4\">Dim</span> col(4)<br/>\u00a0<br/><span class=\"co1\">'supposes that a complete column have 6 of each letter.<br/></span>target = (6*Asc(<span class=\"st0\">\"A\"</span>)) + (6*Asc(<span class=\"st0\">\"B\"</span>)) + (6*Asc(<span class=\"st0\">\"C\"</span>)) + (6*Asc(<span class=\"st0\">\"D\"</span>))<br/>\u00a0<br/>missing = <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arrp)<br/>\t<span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 4<br/>            col(j) = col(j) + Asc(Mid(arrp(i),j,1))<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> 4<br/>\tn = target - col(k)<br/>\tmissing = missing &amp; Chr(n)<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/>WScript.StdOut.WriteLine missing<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 6, "block": "<pre class=\"text highlighted_source\">code HexIn=26, HexOut=27;<br/>int  P, I;<br/>[P:= 0;<br/>for I:= 1 to 24-1 do P:= P xor HexIn(1);<br/>HexOut(0, P);<br/>]</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">var data=L(\"ABCD\",\"CABD\",\"ACDB\",\"DACB\",\"BCDA\",\"ACBD\",\"ADCB\",\"CDAB\",<br/>           \"DABC\",\"BCAD\",\"CADB\",\"CDBA\",\"CBAD\",\"ABDC\",\"ADBC\",\"BDCA\",<br/>           \"DCBA\",\"BACD\",\"BADC\",\"BDAC\",\"CBDA\",\"DBCA\",\"DCAB\");<br/>Utils.Helpers.permute([\"A\"..\"D\"]).apply(\"concat\").copy().remove(data.xplode());</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 14, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> l$=<span class=\"st0\">\"ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> length=<span class=\"kw3\">LEN</span> l$<br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> a= <span class=\"kw3\">CODE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span>  <span class=\"kw3\">CODE</span> <span class=\"st0\">\"D\"</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> b= <span class=\"kw3\">CODE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span>  <span class=\"kw3\">CODE</span> <span class=\"st0\">\"D\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> c= <span class=\"kw3\">CODE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span>  <span class=\"kw3\">CODE</span> <span class=\"st0\">\"D\"</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> d= <span class=\"kw3\">CODE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span>  <span class=\"kw3\">CODE</span> <span class=\"st0\">\"D\"</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> x$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> a=b <span class=\"kw4\">OR</span> a=c <span class=\"kw4\">OR</span> a=d <span class=\"kw4\">OR</span> b=c <span class=\"kw4\">OR</span> b=d <span class=\"kw4\">OR</span> c=d <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">140</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">LET</span> x$=<span class=\"kw3\">CHR</span>$ a+<span class=\"kw3\">CHR</span>$ b+<span class=\"kw3\">CHR</span>$ c+<span class=\"kw3\">CHR</span>$ d<br/><span class=\"nu0\">100</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> length <span class=\"kw4\">STEP</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> x$=l$<span class=\"br0\">(</span>i <span class=\"kw1\">TO</span> i+<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">140</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span> x$;<span class=\"st0\">\" is missing\"</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> d: <span class=\"kw1\">NEXT</span> c: <span class=\"kw1\">NEXT</span> b: <span class=\"kw1\">NEXT</span> a</pre>"}]}