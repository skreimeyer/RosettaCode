{"task": "Monte_Carlo_methods", "blocks": [{"lang": "360 Assembly", "loc": 82, "block": "<pre class=\"text highlighted_source\">*        Monte Carlo methods       08/03/2017<br/>MONTECAR CSECT<br/>         USING  MONTECAR,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R8,1000            isamples=1000<br/>         LA     R6,4               i=4<br/>       DO WHILE=(C,R6,LE,=F'7')    do i=4 to 7<br/>         MH     R8,=H'10'            isamples=isamples*10<br/>         ZAP    HITS,=P'0'           hits=0<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(CR,R7,LE,R8)        do j=1 to isamples<br/>         BAL    R14,RNDPK              call random<br/>         ZAP    X,RND                  x=rnd<br/>         BAL    R14,RNDPK              call random<br/>         ZAP    Y,RND                  y=rnd<br/>         ZAP    WP,X                   x<br/>         MP     WP,X                   x**2<br/>         DP     WP,ONE                 ~<br/>         ZAP    XX,WP(8)               x**2   normalized<br/>         ZAP    WP,Y                   y<br/>         MP     WP,Y                   y**2<br/>         DP     WP,ONE                 ~<br/>         ZAP    YY,WP(8)               y**2   normalized<br/>         AP     XX,YY                  xx=x**2+y**2<br/>       IF CP,XX,LT,ONE THEN            if x**2+y**2&lt;1 then<br/>         AP     HITS,=P'1'               hits=hits+1<br/>       ENDIF    ,                      endif<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         CVD    R8,PSAMPLES          psamples=isamples<br/>         ZAP    WP,=P'4'             4<br/>         MP     WP,ONE               ~<br/>         MP     WP,HITS              *hits<br/>         DP     WP,PSAMPLES          /psamples<br/>         ZAP    MCPI,WP(8)           mcpi=4*hits/psamples<br/>         XDECO  R6,WC                edit i<br/>         MVC    PG+4(1),WC+11        output i<br/>         MVC    WC,MASK              load mask<br/>         ED     WC,PSAMPLES          edit psamples<br/>         MVC    PG+6(8),WC+8         output psamples<br/>         UNPK   WC,MCPI              unpack mcpi<br/>         OI     WC+15,X'F0'          zap sign<br/>         MVC    PG+31(1),WC+6        output mcpi<br/>         MVC    PG+33(6),WC+7        output mcpi decimals<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>RNDPK    EQU    *             ---- random number generator<br/>         ZAP    WP,RNDSEED         w=seed    <br/>         MP     WP,RNDCNSTA        w*=cnsta<br/>         AP     WP,RNDCNSTB        w+=cnstb<br/>         MVC    RNDSEED,WP+8       seed=w mod 10**15<br/>         MVC    RND,=PL8'0'        0&lt;=rnd&lt;1<br/>         MVC    RND+3(5),RNDSEED+3 return rnd<br/>         BR     R14           ---- return<br/>PSAMPLES DS     0D,PL8             F(15,0)<br/>RNDSEED  DC     PL8'613058151221121'  linear congruential constant<br/>RNDCNSTA DC     PL8'944021285986747'  \"<br/>RNDCNSTB DC     PL8'852529586767995'  \"<br/>RND      DS     PL8                fixed(15,9)<br/>ONE      DC     PL8'1.000000000'   1 fixed(15,9)<br/>HITS     DS     PL8                fixed(15,0)<br/>X        DS     PL8                fixed(15,9)<br/>Y        DS     PL8                fixed(15,9)<br/>MCPI     DS     PL8                fixed(15,9)<br/>XX       DS     PL8                fixed(15,9)<br/>YY       DS     PL8                fixed(15,9)<br/>PG       DC     CL80'10**x xxxxxxxx samples give Pi=x.xxxxxx'  buffer<br/>MASK     DC     X'40202020202020202020202020202120'  mask CL16 15num<br/>WC       DS     PL16               character 16<br/>WP       DS     PL16               packed decimal 16<br/>         YREGS<br/>         END    MONTECAR</pre>"}, {"lang": "Ada", "loc": 23, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Monte_Carlo <span class=\"kw1\">is</span><br/>   Dice\u00a0: Generator;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Pi <span class=\"br0\">(</span>Throws\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Inside\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Throw <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Throws</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> ** <span class=\"nu0\">2</span> + Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> ** <span class=\"nu0\">2</span> &lt;= <span class=\"nu0\">1.0</span> <span class=\"kw1\">then</span><br/>            Inside\u00a0:= Inside + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">4.0</span> * Float <span class=\"br0\">(</span>Inside<span class=\"br0\">)</span> / Float <span class=\"br0\">(</span>Throws<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Pi;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"     10_000:\"</span> &amp; Float'Image <span class=\"br0\">(</span>Pi <span class=\"br0\">(</span>     <span class=\"nu0\">10</span>_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"    100_000:\"</span> &amp; Float'Image <span class=\"br0\">(</span>Pi <span class=\"br0\">(</span>    <span class=\"nu0\">100</span>_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"  1_000_000:\"</span> &amp; Float'Image <span class=\"br0\">(</span>Pi <span class=\"br0\">(</span>  <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" 10_000_000:\"</span> &amp; Float'Image <span class=\"br0\">(</span>Pi <span class=\"br0\">(</span> <span class=\"nu0\">10</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"100_000_000:\"</span> &amp; Float'Image <span class=\"br0\">(</span>Pi <span class=\"br0\">(</span><span class=\"nu0\">100</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Monte_Carlo;</pre>"}, {"lang": "ALGOL 68", "loc": 16, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> <span class=\"kw23\">pi</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> throws<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw3\">INT</span> inside <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">TO</span> throws <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">IF</span> random <span class=\"sy1\">**</span> 2 <span class=\"sy1\">+</span> random <span class=\"sy1\">**</span> 2 <span class=\"sy1\">&lt;=</span> 1 <span class=\"kw2\">THEN</span><br/>         inside <span class=\"sy1\">+:=</span> 1<br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   4 <span class=\"sy1\">*</span> inside <span class=\"sy1\">/</span> throws<br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># pi #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"     10 000:\"</span><span class=\"sy1\">,</span><span class=\"kw23\">pi</span> <span class=\"br0\">(</span>     10 000<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"    100 000:\"</span><span class=\"sy1\">,</span><span class=\"kw23\">pi</span> <span class=\"br0\">(</span>    100 000<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"  1 000 000:\"</span><span class=\"sy1\">,</span><span class=\"kw23\">pi</span> <span class=\"br0\">(</span>  1 000 000<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" 10 000 000:\"</span><span class=\"sy1\">,</span><span class=\"kw23\">pi</span> <span class=\"br0\">(</span> 10 000 000<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"100 000 000:\"</span><span class=\"sy1\">,</span><span class=\"kw23\">pi</span> <span class=\"br0\">(</span>100 000 000<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MontePi<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>   <span class=\"co1\">; 3.154400 </span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MontePi<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span>  <span class=\"co1\">; 3.142040 </span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MontePi<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"co1\">; 3.142096 </span><br/>\u00a0<br/>MontePi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span> <span class=\"br0\">{</span> <br/>      <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> x<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span> <br/>      <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> y<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span> <br/>      p <span class=\"sy0\">+=</span> x<span class=\"sy0\">*</span>x<span class=\"sy0\">+</span>y<span class=\"sy0\">*</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <br/>   <span class=\"br0\">}</span> <br/>   <span class=\"kw1\">Return</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>p<span class=\"sy0\">/</span>n <br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># --- with command line argument \"throws\" ---</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span> th=<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;</span>th; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> cin <span class=\"sy3\">+</span>= <span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> <span class=\"nu0\">1</span> <br/> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Pi =\u00a0%8.5f<span class=\"es0\">\\n</span>\"</span>,<span class=\"nu0\">4</span><span class=\"sy3\">*</span>cin<span class=\"sy3\">/</span>th<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>usage<span class=\"sy5\">:</span> awk <span class=\"sy3\">-</span>f pi <span class=\"nu0\">2300</span><br/>\u00a0<br/>Pi =  <span class=\"nu0\">3.14333</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 22, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> getPi! <span class=\"br0\">(</span>throws!<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> getPi<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> getPi<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> getPi<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> getPi<span class=\"br0\">(</span><span class=\"nu0\">10000000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> getPi <span class=\"br0\">(</span>throws<span class=\"br0\">)</span><br/>\tinCircle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> throws<br/>\t\t\t<span class=\"co1\">'a square with a side of length 2 centered at 0 has</span><br/>\t\t\t<span class=\"co1\">'x and y range of -1 to 1</span><br/>\t\t\trandX <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"co1\">'range -1 to 1</span><br/>\t\t\trandY <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"co1\">'range -1 to 1</span><br/>\t\t\t<span class=\"co1\">'distance from (0,0) = sqrt((x-0)^2+(y-0)^2)</span><br/>\t\t\tdist <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span>randX <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> randY <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">IF</span> dist <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">'circle with diameter of 2 has radius of 1</span><br/>\t\t\t\tinCircle <span class=\"sy0\">=</span> inCircle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t\t<span class=\"kw1\">NEXT</span> i<br/>\tgetPi <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>! <span class=\"sy0\">*</span> inCircle <span class=\"sy0\">/</span> throws<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      PRINT FNmontecarlo(1000)<br/>      PRINT FNmontecarlo(10000)<br/>      PRINT FNmontecarlo(100000)<br/>      PRINT FNmontecarlo(1000000)<br/>      PRINT FNmontecarlo(10000000)<br/>      END<br/>\u00a0<br/>      DEF FNmontecarlo(t%)<br/>      LOCAL i%, n%<br/>      FOR i% = 1 TO t%<br/>        IF RND(1)^2 + RND(1)^2 &lt; 1 n% += 1<br/>      NEXT<br/>      = 4 * n% / t%</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> pi<span class=\"br0\">(</span><span class=\"kw4\">double</span> tolerance<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> val<span class=\"sy0\">,</span> error<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> sampled <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> hit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* don't check error every turn, make loop tight */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">--,</span> sampled<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ty <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> hit <span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tval <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> hit <span class=\"sy0\">/</span> sampled<span class=\"sy0\">;</span><br/>\t\terror <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>val <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> val<span class=\"br0\">)</span> <span class=\"sy0\">/</span> sampled<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\tval <span class=\"sy0\">*=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* some feedback, or user gets bored */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Pi =\u00a0%f +/-\u00a0%5.3e at\u00a0%ldM samples.<span class=\"es1\">\\r</span>\"</span><span class=\"sy0\">,</span><br/>\t\t\tval<span class=\"sy0\">,</span> error<span class=\"sy0\">,</span> sampled<span class=\"sy0\">/</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>hit <span class=\"sy0\">||</span> error <span class=\"sy0\">&gt;</span> tolerance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              <span class=\"coMULTI\">/*\u00a0!hit is for completeness's sake; if no hit after 1M samples,<br/>                 your rand() is BROKEN */</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Pi is\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> pi<span class=\"br0\">(</span><span class=\"nu19\">3e-4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* set to 1e-4 for some fun */</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;iostream&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> jmax<span class=\"sy1\">=</span><span class=\"nu0\">1000</span><span class=\"sy4\">;</span> <span class=\"co1\">// maximum value of HIT number. (Length of output file)</span><br/>    <span class=\"kw4\">int</span> imax<span class=\"sy1\">=</span><span class=\"nu0\">1000</span><span class=\"sy4\">;</span> <span class=\"co1\">// maximum value of random numbers for producing HITs.</span><br/>    <span class=\"kw4\">double</span> x,y<span class=\"sy4\">;</span>    <span class=\"co1\">// Coordinates</span><br/>    <span class=\"kw4\">int</span> hit<span class=\"sy4\">;</span>       <span class=\"co1\">// storage variable of number of HITs</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>j<span class=\"sy1\">&lt;</span>jmax<span class=\"sy4\">;</span>j<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        hit<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        x<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> y<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span>imax<span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            x<span class=\"sy1\">=</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            y<span class=\"sy1\">=</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>y<span class=\"sy1\">&lt;=</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">-</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> hit<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span>          <span class=\"co1\">//Choosing HITs according to analytic formula of circle</span><br/>    <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"\"</span><span class=\"sy1\">&lt;&lt;</span><span class=\"nu0\">4</span><span class=\"sy2\">*</span><span class=\"kw4\">double</span><span class=\"br0\">(</span>hit<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"kw4\">double</span><span class=\"br0\">(</span>imax<span class=\"br0\">)</span><span class=\"sy1\">&lt;&lt;</span>endl<span class=\"sy4\">;</span> <span class=\"br0\">}</span>  <span class=\"co1\">// Print out Pi number</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> MonteCarloPi<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> inside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        Random r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                inside<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> inside <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">value</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}:{1}\"</span>, <span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"st0\">\"#,###\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span>, MonteCarloPi<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn calc-pi <span class=\"br0\">[</span>iterations<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>x <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> y <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> in <span class=\"nu0\">0</span> total <span class=\"nu0\">1</span><span class=\"br0\">]</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> total iterations<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span> <span class=\"br0\">(</span>* y y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>inc in<span class=\"br0\">)</span> in<span class=\"br0\">)</span> <span class=\"br0\">(</span>inc total<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>double <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ in total<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>x <span class=\"br0\">(</span>take <span class=\"nu0\">5</span> <span class=\"br0\">(</span>iterate #<span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span>str <span class=\"br0\">(</span>format <span class=\"st0\">\"% 8d\"</span> x<span class=\"br0\">)</span> <span class=\"st0\">\": \"</span> <span class=\"br0\">(</span>calc-pi x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> approximate-pi <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>loop repeat n count <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>complex <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> n <span class=\"nu0\">0.25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>n <span class=\"br0\">(</span>loop repeat <span class=\"nu0\">5</span> for n <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span> then <span class=\"br0\">(</span>* n <span class=\"nu0\">10</span><span class=\"br0\">)</span> collect n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%~8d -&gt; ~f\"</span> n <span class=\"br0\">(</span>approximate-pi n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> pi<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> nthrows<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint</span> inside<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nthrows</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hypot<span class=\"br0\">(</span>uniform01<span class=\"sy0\">,</span> uniform01<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            inside<span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu16\">4.0</span> <span class=\"sy0\">*</span> inside <span class=\"sy0\">/</span> nthrows<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> p<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%10s:\u00a0%07f\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^^</span> p<span class=\"sy0\">,</span> pi<span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">^^</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import 'dart:async';<br/>import 'dart:html';<br/>import 'dart:math' show Random;<br/>\u00a0<br/>// We changed 5 lines of code to make this sample nicer on<br/>// the web (so that the execution waits for animation frame, <br/>// the number gets updated in the DOM, and the program ends <br/>// after 500 iterations).<br/>\u00a0<br/>main() async {<br/>  print('Compute \u03c0 using the Monte Carlo method.');<br/>  var output = querySelector(\"#output\");<br/>  await for (var estimate in computePi().take(500)) {<br/>    print('\u03c0 \u2245 $estimate');<br/>    output.text = estimate.toStringAsFixed(5);<br/>    await window.animationFrame;<br/>  }<br/>}<br/>\u00a0<br/>/// Generates a stream of increasingly accurate estimates of \u03c0.<br/>Stream&lt;double&gt; computePi({int batch: 100000}) async* {<br/>  var total = 0;<br/>  var count = 0;<br/>  while (true) {<br/>    var points = generateRandom().take(batch);<br/>    var inside = points.where((p) =&gt; p.isInsideUnitCircle);<br/>    total += batch;<br/>    count += inside.length;<br/>    var ratio = count / total;<br/>    // Area of a circle is A = \u03c0\u22c5r\u00b2, therefore \u03c0 = A/r\u00b2.<br/>    // So, when given random points with x \u2208 &lt;0,1&gt;,<br/>    // y \u2208 &lt;0,1&gt;, the ratio of those inside a unit circle<br/>    // should approach \u03c0 / 4. Therefore, the value of \u03c0<br/>    // should be:<br/>    yield ratio * 4;<br/>  }<br/>}<br/>\u00a0<br/>Iterable&lt;Point&gt; generateRandom([int seed]) sync* {<br/>  final random = new Random(seed);<br/>  while (true) {<br/>    yield new Point(random.nextDouble(), random.nextDouble());<br/>  }<br/>}<br/>\u00a0<br/>class Point {<br/>  final double x, y;<br/>  const Point(this.x, this.y);<br/>  bool get isInsideUnitCircle =&gt; x * x + y * y &lt;= 1;<br/>}<br/>\u00a0</pre>"}, {"lang": "E", "loc": 7, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> inside <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <span class=\"sy0\">?</span> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextFloat</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextFloat</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span> <span class=\"br0\">{</span><br/>         inside <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    return inside <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">/</span> n<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule MonteCarlo do<br/>  def pi(n) do<br/>    count = Enum.count(1..n, fn _ -&gt;<br/>      x =\u00a0:rand.uniform<br/>      y =\u00a0:rand.uniform<br/>     \u00a0:math.sqrt(x*x + y*y) &lt;= 1<br/>    end)<br/>    4 * count / n<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([1000, 10000, 100000, 1000000, 10000000], fn n -&gt;<br/> \u00a0:io.format \"~8w samples: PI = ~f~n\", [n, MonteCarlo.pi(n)]<br/>end)</pre>"}, {"lang": "ERRE", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM RANDOM_PI<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>PROCEDURE MONTECARLO(T-&gt;RES)<br/>      LOCAL I,N<br/>      FOR I=1 TO T DO<br/>        IF RND(1)^2+RND(1)^2&lt;1 THEN N+=1 END IF<br/>      END FOR<br/>      RES=4*N/T<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>      RANDOMIZE(TIMER)\u00a0! init rnd number generator<br/>      MONTECARLO(1000-&gt;RES)     PRINT(RES)<br/>      MONTECARLO(10000-&gt;RES)    PRINT(RES)<br/>      MONTECARLO(100000-&gt;RES)   PRINT(RES)<br/>      MONTECARLO(1000000-&gt;RES)  PRINT(RES)<br/>      MONTECARLO(10000000-&gt;RES) PRINT(RES)<br/>END PROGRAM</pre>"}, {"lang": "Euler Math Toolbox", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function map MonteCarloPI (n,plot=false) ...<br/>$  X:=random(1,n);<br/>$  Y:=random(1,n);<br/>$  if plot then<br/>$      plot2d(X,Y,&gt;points,style=\".\"); <br/>$      plot2d(\"sqrt(1-x^2)\",color=2,&gt;add); <br/>$  endif<br/>$  return sum(X^2+Y^2&lt;1)/n*4;<br/>$endfunction<br/>&gt;MonteCarloPI(10^(1:7))<br/> [ 3.6  2.96  3.224  3.1404  3.1398  3.141548  3.1421492 ]<br/>&gt;pi<br/> 3.14159265359<br/>&gt;MonteCarloPI(10000,true):<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 21, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> print x <span class=\"sy0\">=</span> printfn <span class=\"st0\">\"%A\"</span> x<br/>\u00a0<br/><span class=\"kw1\">let</span> MonteCarloPiGreco niter <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> eng <span class=\"sy0\">=</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> action <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> x: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span> eng.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> y: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span> eng.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> res: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">Math</span>.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2.0</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">**</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> res <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">then</span><br/>            <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">niter</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> action<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> tmp: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> res<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">float</span><span class=\"br0\">(</span>res.<span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">4.0</span><span class=\"sy0\">*</span>tmp<br/>\u00a0<br/>MonteCarloPiGreco <span class=\"nu0\">1000</span> <span class=\"sy0\">|&gt;</span> print<br/>MonteCarloPiGreco <span class=\"nu0\">10000</span> <span class=\"sy0\">|&gt;</span> print<br/>MonteCarloPiGreco <span class=\"nu0\">100000</span> <span class=\"sy0\">|&gt;</span> print<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.functions random sequences\u00a0;<br/>\u00a0<br/>: limit ( -- n ) 2 32 ^\u00a0; inline<br/>: in-circle ( x y --\u00a0? ) limit [ sq ] <a class=\"__cf_email__\" data-cfemail=\"a0d4d2c9e0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [ + ] [ &lt;= ] bi*\u00a0;<br/>: rand ( -- r ) limit random\u00a0;<br/>: pi ( n -- pi ) [ [ drop rand rand in-circle ] count ] keep / 4 * &gt;float\u00a0;</pre>"}, {"lang": "Fantom", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class MontyCarlo<br/>{<br/>  // assume square/circle of width 1 unit<br/>  static Float findPi (Int samples)<br/>  {<br/>    Int insideCircle\u00a0:= 0<br/>    samples.times <br/>    {<br/>      x\u00a0:= Float.random<br/>      y\u00a0:= Float.random<br/>      if ((x*x + y*y).sqrt &lt;= 1.0f) insideCircle += 1<br/>    }<br/>    return insideCircle * 4.0f / samples<br/>  }<br/>\u00a0<br/>  public static Void main () <br/>  {<br/>    [100, 1000, 10000, 1000000, 10000000].each |sample|<br/>    {<br/>      echo (\"Sample size $sample gives PI as ${findPi(sample)}\")<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre>include random.fs\n\n10000 value r\n\n: hit? ( --\u00a0? )\n  r random dup *\n  r random dup * +\n  r dup * &lt;\u00a0;\n\n: sims ( n -- hits )\n  0 swap 0 do hit? if 1+ then loop\u00a0;\n</pre>"}, {"lang": "Fortran", "loc": 35, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">MODULE</span> Simulation<br/>\u00a0<br/>   <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>   <span class=\"kw1\">CONTAINS</span><br/>\u00a0<br/>   <span class=\"kw1\">FUNCTION</span> Pi<span class=\"br0\">(</span>samples<span class=\"br0\">)</span><br/>     <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">Pi</span><br/>     <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">coords</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, length<br/>     <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, in_circle, samples<br/>\u00a0<br/>     in_circle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">DO</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, samples<br/>       <span class=\"kw1\">CALL</span> <span class=\"kw4\">RANDOM_NUMBER</span><span class=\"br0\">(</span>coords<span class=\"br0\">)</span><br/>       coords <span class=\"sy0\">=</span> coords <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       length <span class=\"sy0\">=</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>coords<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>coords<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> coords<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>coords<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>length &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> in_circle <span class=\"sy0\">=</span> in_circle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>     <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>     Pi <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>in_circle<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>samples<span class=\"br0\">)</span><br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> Pi<br/>\u00a0<br/> <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> Simulation<br/>\u00a0<br/> <span class=\"kw1\">PROGRAM</span> MONTE_CARLO<br/>\u00a0<br/>   <span class=\"kw3\">USE</span> Simulation <br/>\u00a0<br/>   <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">100000000</span><span class=\"br0\">)</span><br/>     WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> n, Pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>     n <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/> <span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> MONTE_CARLO</pre>"}, {"lang": "FreeBASIC", "loc": 33, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 23-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span> <span class=\"kw1\">Timer</span>  <span class=\"co1\">'seed the random function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x, y, pi, error_<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> m = <span class=\"nu0\">10</span>, n, n_start, n_stop = m, p<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" Mumber of throws  Ratio (Pi)     Error\"</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">For</span> n = n_start <span class=\"kw1\">To</span> n_stop -<span class=\"nu0\">1</span><br/>        x = <span class=\"kw1\">Rnd</span><br/>        y = <span class=\"kw1\">Rnd</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x * x + y * y<span class=\"br0\">)</span> &lt;= <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> p = p +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"    ############,  \"</span>; m\u00a0;<br/>    pi = p * <span class=\"nu0\">4</span> / m<br/>    error_ = <span class=\"nu0\">3.141592653589793238462643383280</span> - pi<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">RTrim</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>pi<span class=\"br0\">)</span>,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>;<span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"br0\">)</span>; <span class=\"kw1\">Using</span> <span class=\"st0\">\"##.#############\"</span>; error_<br/>    m = m * <span class=\"nu0\">10</span><br/>    n_start = n_stop<br/>    n_stop = m<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> m &gt; <span class=\"nu0\">1000000000</span> <span class=\"co1\">' 1,000,000,000</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Futhark", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import \"futlib/math\"<br/>\u00a0<br/>default(f32)<br/>\u00a0<br/>fun dirvcts(): [2][30]i32 =<br/>    [<br/>            [<br/>                536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1<br/>            ],<br/>            [<br/>                536870912, 805306368, 671088640, 1006632960, 570425344, 855638016, 713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120, 572653568, 858980352, 715816960, 1073725440, 536879104, 805318656, 671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840, 538976288, 808464432, 673720360, 1010580540, 572662306, 858993459<br/>            ]<br/>    ]<br/>\u00a0<br/>\u00a0<br/>fun grayCode(x: i32): i32 = (x &gt;&gt; 1) ^ x<br/>\u00a0<br/>----------------------------------------<br/>--- Sobol Generator<br/>----------------------------------------<br/>fun testBit(n: i32, ind: i32): bool =<br/>    let t = (1 &lt;&lt; ind) in (n &amp; t) == t<br/>\u00a0<br/>fun xorInds(n: i32) (dir_vs: [num_bits]i32): i32 =<br/>    let reldv_vals = zipWith (\\ dv i  -&gt;<br/>                                if testBit(grayCode n,i)<br/>                                then dv else 0)<br/>                             dir_vs (iota num_bits)<br/>    in reduce (^) 0 reldv_vals<br/>\u00a0<br/>fun sobolIndI (dir_vs: [m][num_bits]i32, n: i32): [m]i32 =<br/>    map (xorInds n) dir_vs<br/>\u00a0<br/>fun sobolIndR(dir_vs:  [m][num_bits]i32) (n: i32 ): [m]f32 =<br/>    let divisor = 2.0 ** f32(num_bits)<br/>    let arri    = sobolIndI( dir_vs, n )<br/>    in map (\\ (x: i32): f32  -&gt; f32(x) / divisor) arri<br/>\u00a0<br/>fun main(n: i32): f32 =<br/>    let rand_nums = map (sobolIndR (dirvcts())) (iota n)<br/>    let dists     = map (\\xy -&gt;<br/>                           let (x,y) = (xy[0],xy[1]) in f32.sqrt(x*x + y*y))<br/>                        rand_nums<br/>\u00a0<br/>    let bs        = map (\\d -&gt; if d &lt;= 1.0f32 then 1 else 0) dists<br/>\u00a0<br/>    let inside    = reduce (+) 0 bs<br/>    in 4.0f32*f32(inside)/f32(n)<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> getPi<span class=\"sy1\">(</span>numThrows <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    inCircle <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; numThrows<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">//a square with a side of length 2 centered at 0 has </span><br/>        <span class=\"co1\">//x and y range of -1 to 1</span><br/>        randX <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"co1\">//range -1 to 1</span><br/>        randY <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"co1\">//range -1 to 1</span><br/>        <span class=\"co1\">//distance from (0,0) = sqrt((x-0)^2+(y-0)^2)</span><br/>        dist <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Hypot<span class=\"sy1\">(</span>randX<span class=\"sy1\">,</span> randY<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> dist &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span> <span class=\"co1\">//circle with diameter of 2 has radius of 1</span><br/>            inCircle<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>inCircle<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>numThrows<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>getPi<span class=\"sy1\">(</span><span class=\"nu0\">10000</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>getPi<span class=\"sy1\">(</span><span class=\"nu0\">100000</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>getPi<span class=\"sy1\">(</span><span class=\"nu0\">1000000</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>getPi<span class=\"sy1\">(</span><span class=\"nu0\">10000000</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>getPi<span class=\"sy1\">(</span><span class=\"nu0\">100000000</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>get<span class=\"sy0\">_</span>pi throws <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> results <span class=\"sy0\">&lt;-</span> replicateM throws one<span class=\"sy0\">_</span>trial<br/>                   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> results<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> throws<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    one<span class=\"sy0\">_</span>trial <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> rand<span class=\"sy0\">_</span>x <span class=\"sy0\">&lt;-</span> randomRIO <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   rand<span class=\"sy0\">_</span>y <span class=\"sy0\">&lt;-</span> randomRIO <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   <span class=\"kw1\">let</span> dist <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>                       dist <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>rand<span class=\"sy0\">_</span>x<span class=\"sy0\">*</span>rand<span class=\"sy0\">_</span>x <span class=\"sy0\">+</span> rand<span class=\"sy0\">_</span>y<span class=\"sy0\">*</span>rand<span class=\"sy0\">_</span>y<span class=\"br0\">)</span><br/>                   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"kw1\">if</span> dist <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 12, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">FUNCTION</span> Pi<span class=\"br0\">(</span>samples<span class=\"br0\">)</span><br/>   inside <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> samples<br/>      inside <span class=\"sy1\">=</span> inside <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> <span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">0.5</span> <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">ENDDO</span><br/>   Pi <span class=\"sy1\">=</span> <span class=\"nu0\">4</span> <span class=\"sy1\">*</span> inside <span class=\"sy1\">/</span> samples<br/><span class=\"kw1\">END</span><br/>\u00a0<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> Pi<span class=\"br0\">(</span>1E4<span class=\"br0\">)</span> <span class=\"co1\">! 3.1504</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> Pi<span class=\"br0\">(</span>1E5<span class=\"br0\">)</span> <span class=\"co1\">! 3.14204</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> Pi<span class=\"br0\">(</span>1E6<span class=\"br0\">)</span> <span class=\"co1\">! 3.141672</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> Pi<span class=\"br0\">(</span>1E7<span class=\"br0\">)</span> <span class=\"co1\">! 3.1412856</span></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> t <span class=\"sy1\">:=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">^</span> <span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>     printf<span class=\"br0\">(</span><span class=\"st0\">\"Rounds=%d Pi ~\u00a0%r<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>t<span class=\"sy1\">,</span>getPi<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> getPi<span class=\"br0\">(</span>rounds<span class=\"br0\">)</span><br/>   incircle <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">.</span> <br/>   <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> rounds <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">0</span> <span class=\"sy1\">*</span> <span class=\"nu0\">2</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">^</span> <span class=\"nu0\">2</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">0</span> <span class=\"sy1\">*</span> <span class=\"nu0\">2</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>         incircle <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> <span class=\"sy1\">*</span> incircle <span class=\"sy1\">/</span> rounds<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">piMC=: monad define \"<span class=\"nu0\">0</span><br/>  <span class=\"nu0\">4</span>* <span class=\"kw2\">y</span>%~ +/ <span class=\"nu0\">1</span>&gt;:\u00a0%: +/ *: &lt;: +: <span class=\"sy0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw2\">y</span><span class=\"sy0\">)</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"ae91ee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$ <span class=\"nu0\">0</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MC <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getPi<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getPi<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getPi<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getPi<span class=\"br0\">(</span><span class=\"nu0\">10000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getPi<span class=\"br0\">(</span><span class=\"nu0\">100000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> getPi<span class=\"br0\">(</span><span class=\"kw4\">int</span> numThrows<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> inCircle<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> numThrows<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">//a square with a side of length 2 centered at 0 has </span><br/>\t\t\t<span class=\"co1\">//x and y range of -1 to 1</span><br/>\t\t\t<span class=\"kw4\">double</span> randX<span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"co1\">//range -1 to 1</span><br/>\t\t\t<span class=\"kw4\">double</span> randY<span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"co1\">//range -1 to 1</span><br/>\t\t\t<span class=\"co1\">//distance from (0,0) = sqrt((x-0)^2+(y-0)^2)</span><br/>\t\t\t<span class=\"kw4\">double</span> dist<span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>randX <span class=\"sy0\">*</span> randX <span class=\"sy0\">+</span> randY <span class=\"sy0\">*</span> randY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\">//^ or in Java 1.5+: double dist= Math.hypot(randX, randY);</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//circle with diameter of 2 has radius of 1</span><br/>\t\t\t\tinCircle<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> inCircle <span class=\"sy0\">/</span> numThrows<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> mcpi<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        y <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            m <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> m <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mcpi<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mcpi<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mcpi<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mcpi<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mcpi<span class=\"br0\">(</span><span class=\"nu0\">10000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">function monte\u03c0(n)<br/>    s = count(rand() ^ 2 + rand() ^ 2 &lt; 1 for _ in 1:n)<br/>    return 4s / n<br/>end<br/>\u00a0<br/>for n in 10 .^ (3:8)<br/>    p = monte\u03c0(n)<br/>    println(\"$(lpad(n, 9)): \u03c0 \u2248 $(lpad(p, 10)), pct.err = \", @sprintf(\"%2.5f%%\", abs(p - \u03c0) / \u03c0))<br/>end</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">   sim:{4*(+/{~1&lt;+/(2_draw 0)^2}'!x)%x}<br/>\u00a0<br/>   sim 10000<br/>3.103<br/>\u00a0<br/>   sim'10^!8<br/>4 2.8 3.4 3.072 3.1212 3.14104 3.14366 3.1413</pre>"}, {"lang": "Kotlin", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>fun mcPi<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> inside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> inside++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> inside / n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>   <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Iterations -&gt; Approx Pi  -&gt; Error%\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"----------    ----------    ------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pi <span class=\"sy0\">=</span> mcPi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> err <span class=\"sy0\">=</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> - pi<span class=\"br0\">)</span> / Math.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span><br/>        println<span class=\"br0\">(</span>String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%9d  -&gt;\u00a0%10.8f -&gt;\u00a0%6.4f\"</span>, n, pi, err<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        n <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 18, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/> <span class=\"kw1\">for</span> pow <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span><br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>^pow<br/>    <span class=\"kw1\">print</span> n<span class=\"sy0\">,</span> getPi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> getPi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    incircle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> throws<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<br/>        <span class=\"kw1\">scan</span><br/>        incircle <span class=\"sy0\">=</span> incircle <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    getPi <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>incircle<span class=\"sy0\">/</span>throws<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Locomotive Basic", "loc": 16, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">mode</span> <span class=\"nu0\">1</span>:<span class=\"kw1\">randomize</span> <span class=\"kw1\">time</span>:<span class=\"kw1\">defint</span> a-z<br/><span class=\"nu0\">20</span> <span class=\"kw1\">input</span> <span class=\"st0\">\"How many samples\"</span>;n<br/><span class=\"nu0\">30</span> u=n/<span class=\"nu0\">100</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> r=<span class=\"nu0\">100</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">for</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/><span class=\"nu0\">60</span> <span class=\"kw1\">if</span> i <span class=\"kw2\">mod</span> u=<span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">locate</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>:<span class=\"kw1\">print</span> <span class=\"kw1\">using</span> <span class=\"st0\">\"##% done\"</span>; i/n*<span class=\"nu0\">100</span><br/><span class=\"nu0\">70</span> x=<span class=\"kw2\">rnd</span>*<span class=\"nu0\">2</span>*r-r<br/><span class=\"nu0\">80</span> y=<span class=\"kw2\">rnd</span>*<span class=\"nu0\">2</span>*r-r<br/><span class=\"nu0\">90</span> <span class=\"kw1\">if</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span>x*x+y*y<span class=\"br0\">)</span>&lt;r <span class=\"kw1\">then</span> m=m+<span class=\"nu0\">1</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">next</span><br/><span class=\"nu0\">110</span> pi2!=<span class=\"nu0\">4</span>*m/n<br/><span class=\"nu0\">120</span> <span class=\"kw1\">locate</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">print</span> m;<span class=\"st0\">\"points in circle\"</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Computed value of pi:\"</span>pi2!<br/><span class=\"nu0\">150</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Difference to real value of pi: \"</span>;<br/><span class=\"nu0\">160</span> <span class=\"kw1\">print</span> <span class=\"kw1\">using</span> <span class=\"st0\">\"+#.##%\"</span>; <span class=\"br0\">(</span>pi2!-<span class=\"kw2\">pi</span><span class=\"br0\">)</span>/<span class=\"kw2\">pi</span>*<span class=\"nu0\">100</span></pre>"}, {"lang": "Logo", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>to square\u00a0:n<br/>  output\u00a0:n *\u00a0:n<br/>end<br/>to trial\u00a0:r<br/>  output less? sum square random\u00a0:r square random\u00a0:r  square\u00a0:r<br/>end<br/>to sim\u00a0:n\u00a0:r<br/>  make \"hits 0<br/>  repeat\u00a0:n [if trial\u00a0:r [make \"hits\u00a0:hits + 1]]<br/>  output 4 *\u00a0:hits /\u00a0:n<br/>end<br/>\u00a0<br/>show sim    1000 10000 \u00a0; 3.18<br/>show sim   10000 10000 \u00a0; 3.1612<br/>show sim  100000 10000 \u00a0; 3.145<br/>show sim 1000000 10000 \u00a0; 3.140828<br/>\u00a0</pre>"}, {"lang": "LSL", "loc": 22, "block": "<pre class=\"text highlighted_source\">integer iMIN_SAMPLE_POWER = 0;<br/>integer iMAX_SAMPLE_POWER = 6;<br/>default {<br/>\tstate_entry() {<br/>\t\tllOwnerSay(\"Estimating Pi (\"+(string)PI+\")\");<br/>\t\tinteger iSample = 0;<br/>\t\tfor(iSample=iMIN_SAMPLE_POWER\u00a0; iSample&lt;=iMAX_SAMPLE_POWER \u00a0; iSample++) {<br/>\t\t\tinteger iInCircle = 0;<br/>\t\t\tinteger x = 0;<br/>\t\t\tinteger iMaxSamples = (integer)llPow(10, iSample);<br/>\t\t\tfor(x=0\u00a0; x&lt;iMaxSamples\u00a0; x++) {<br/>\t\t\t\tif(llSqrt(llPow(llFrand(2.0)-1.0, 2.0)+llPow(llFrand(2.0)-1.0, 2.0))&lt;1.0) {<br/>\t\t\t\t\tiInCircle++;<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t\tfloat fPi = ((4.0*iInCircle)/llPow(10, iSample));<br/>\t\t\tfloat fError = llFabs(100.0*(PI-fPi)/PI);<br/>\t\t\tllOwnerSay((string)iSample+\": \"+(string)iMaxSamples+\" = \"+(string)fPi+\", Error = \"+(string)fError+\"%\");<br/>\t\t}<br/>\t\tllOwnerSay(\"Done.\");<br/>\t}<br/>}</pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> MonteCarlo <span class=\"br0\">(</span> n_throws <span class=\"br0\">)</span><br/>    <span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    n_inside <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n_throws <span class=\"kw1\">do</span><br/>    \t<span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">then</span><br/>            n_inside <span class=\"sy0\">=</span> n_inside <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    \t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>    <br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n_inside <span class=\"sy0\">/</span> n_throws<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> MonteCarlo<span class=\"br0\">(</span> <span class=\"nu0\">10000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> MonteCarlo<span class=\"br0\">(</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> MonteCarlo<span class=\"br0\">(</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> MonteCarlo<span class=\"br0\">(</span> <span class=\"nu0\">10000000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> MonteCarloPi[samplesize_Integer]\u00a0:= N[4Mean[If[# &gt; 1, 0, 1] &amp; /@ Norm /@ RandomReal[1, {samplesize, 2}]]]<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 17, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> piEstimate = monteCarloPi<span class=\"br0\">(</span>numDarts<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%The square has a sides of length 2, which means the circle has radius</span><br/>    <span class=\"co1\">%1.</span><br/>\u00a0<br/>    <span class=\"co1\">%Generate a table of random x-y value pairs in the range [0,1] sampled</span><br/>    <span class=\"co1\">%from the uniform distribution for each axis.</span><br/>    darts = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span>numDarts,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Any darts that are in the circle will have position vector whose</span><br/>    <span class=\"co1\">%length is less than or equal to 1 squared.</span><br/>    dartsInside = <span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>darts.^<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> &lt;= <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/>    piEstimate = <span class=\"nu0\">4</span>*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>dartsInside<span class=\"br0\">)</span>/numDarts;<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 10, "block": "<pre class=\"text highlighted_source\">load(\"distrib\");<br/>approx_pi(n):= block(<br/>  [x: random_continuous_uniform(0, 1, n),<br/>   y: random_continuous_uniform(0, 1, n),<br/>   r, cin: 0, listarith: true],<br/>   r: x^2 + y^2,<br/>   for r0 in r do if r0&lt;1 then cin: cin + 1,<br/>   4*cin/n);<br/>\u00a0<br/>float(approx_pi(100));</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre>fn monteCarlo iterations =\n(\n    radius = 1.0\n    pointsInCircle = 0\n    for i in 1 to iterations do\n    (\n        testPoint = [(random -radius radius), (random -radius radius)]\n        if length testPoint &lt;= radius then\n        (\n            pointsInCircle += 1\n        )\n    )\n    4.0 * pointsInCircle / iterations\n)\n</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f0\t\u041f1\t0\t\u041f4\t\u0421\u0427\tx^2\t^\t\u0421\u0427\tx^2\t+<br/>1\t-\tx&lt;0\t15\t\u041a\u0418\u041f4\tL0\t04\t\u0418\u041f4\t4\t*<br/>\u0418\u041f1\t/\t\u0421/\u041f</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\">import math<br/>randomize()<br/>\u00a0<br/>proc pi(nthrows): float =<br/>  var inside = 0<br/>  for i in 1..int64(nthrows):<br/>    if hypot(random(1.0), random(1.0)) &lt; 1:<br/>      inc inside<br/>  return float(4 * inside) / nthrows<br/>\u00a0<br/>for n in [10e4, 10e6, 10e7, 10e8]:<br/>  echo pi(n)</pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> get_pi throws <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> helper i count <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> throws <span class=\"kw1\">then</span> count<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> rand_x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">2.0</span> <span class=\"sy0\">-.</span> <span class=\"nu0\">1.0</span><br/>      <span class=\"kw1\">and</span> rand_y <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">2.0</span> <span class=\"sy0\">-.</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> dist <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>rand_x <span class=\"sy0\">*.</span> rand_x <span class=\"sy0\">+.</span> rand_y <span class=\"sy0\">*.</span> rand_y<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> dist <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">then</span><br/>        helper <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        helper <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> count<br/>  <span class=\"kw1\">in</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> helper <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> throws</pre>"}, {"lang": "Octave", "loc": 16, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> p <span class=\"sy3\">=</span> montepi<span class=\"br0\">(</span>samples<span class=\"br0\">)</span><br/>  in_circle <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> samp <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>samples<br/>    v <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <a href=\"http://octave.sourceforge.net/octave/function/unifrnd.html\"><span class=\"kw6\">unifrnd</span></a><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/unifrnd.html\"><span class=\"kw6\">unifrnd</span></a><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">if</span> <span class=\"br0\">(</span> v<span class=\"sy1\">*</span>v<span class=\"sy2\">.'</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu19\">1.0</span> <span class=\"br0\">)</span><br/>      in_circle<span class=\"sy1\">++</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endif</span><br/>  <span class=\"kw4\">endfor</span><br/>  p <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">*</span>in_circle<span class=\"sy1\">/</span>samples<span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>l <span class=\"sy3\">=</span> <span class=\"nu19\">1e4</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">while</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;</span> <span class=\"nu19\">1e7</span><span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>montepi<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  l <span class=\"sy3\">*=</span> <span class=\"nu0\">10</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endwhile</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">MonteCarloPi<span class=\"br0\">(</span>tests<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu1\">4</span>.<span class=\"sy0\">*</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>tests<span class=\"sy0\">,</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>tests<span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 30, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> MonteCarlo<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> MC_Pi<span class=\"br0\">(</span>expo<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    x<span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">,</span> hits<span class=\"sy1\">,</span> samples<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    samples <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">**</span>expo<span class=\"sy1\">;</span><br/>    hits <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    randomize<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> samples <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>      y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>x<span class=\"sy3\">*</span>x <span class=\"sy3\">+</span> y<span class=\"sy3\">*</span>y<span class=\"br0\">)</span> &lt; <span class=\"nu0\">1.0</span> <span class=\"kw1\">then</span><br/>        inc<span class=\"br0\">(</span>hits<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    MC_Pi <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">4.0</span> <span class=\"sy3\">*</span> hits <span class=\"sy3\">/</span> samples<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">4</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy3\">**</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' samples give '</span><span class=\"sy1\">,</span> MC_Pi<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">7</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">' as pi.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> pi <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$nthrows</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$inside</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nthrows</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"re0\">*$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"re0\">*$y</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$inside</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"re0\">$inside</span> <span class=\"sy0\">/</span> <span class=\"re0\">$nthrows</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%9d:\u00a0%07f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> pi<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@random_distances</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"sy0\">**</span><span class=\"nu0\">2</span> xx <span class=\"nu0\">2</span><span class=\"br0\">)</span> xx <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> approximate_pi<span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"re0\">@random_distances</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"Monte-Carlo \u03c0 approximation:\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"$_ iterations:  \"</span><span class=\"sy0\">,</span> approximate_pi <span class=\"co5\">$_</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000<span class=\"sy0\">,</span> <span class=\"nu0\">10</span>_000<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 11, "block": "<pre class=\"text highlighted_source\">integer N = 100<br/>for i=1 to 6 do<br/>    integer inside = 0<br/>    for i=1 to N do<br/>        integer x = rand(N),<br/>                y = rand(N)<br/>        inside += (x*x+y*y&lt;N*N)<br/>    end for<br/>   \u00a0?{N,4*inside/N}<br/>    N *= 10<br/>end for</pre>"}, {"lang": "PHP", "loc": 10, "block": "<pre class=\"php highlighted_source\"><span class=\"sy1\">&lt;?</span><br/><span class=\"re0\">$loop</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> <span class=\"co2\"># loop to 1,000,000<br/></span><span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$loop</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.php.net/getrandmax\"><span class=\"kw3\">getrandmax</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.php.net/getrandmax\"><span class=\"kw3\">getrandmax</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$count</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"loop=\"</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/number_format\"><span class=\"kw3\">number_format</span></a><span class=\"br0\">(</span><span class=\"re0\">$loop</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\", count=\"</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/number_format\"><span class=\"kw3\">number_format</span></a><span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\", pi=\"</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"sy0\">/</span><span class=\"re0\">$loop</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de carloPi (Scl)<br/>   (let (Dim (** 10 Scl)  Dim2 (* Dim Dim)  Pi 0)<br/>      (do (* 4 Dim)<br/>         (let (X (rand 0 Dim)  Y (rand 0 Dim))<br/>            (when (&gt;= Dim2 (+ (* X X) (* Y Y)))<br/>               (inc 'Pi) ) ) )<br/>      (format Pi Scl) ) )<br/>\u00a0<br/>(for N 6<br/>   (prinl (carloPi N)) )</pre>"}, {"lang": "PowerShell", "loc": 17, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Pi <span class=\"br0\">(</span><span class=\"re0\">$Iterations</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$InCircle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Iterations</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>Random <span class=\"nu0\">1.0</span><br/>        <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>Random <span class=\"nu0\">1.0</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"kw4\">-le</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$InCircle</span><span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$Pi</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">decimal</span><span class=\"br0\">]</span> <span class=\"re0\">$InCircle</span> <span class=\"sy0\">/</span> <span class=\"re0\">$Iterations</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><br/>    <span class=\"re0\">$RealPi</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">decimal</span><span class=\"br0\">]</span> <span class=\"st0\">\"3.141592653589793238462643383280\"</span><br/>    <span class=\"re0\">$Diff</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$Pi</span> <span class=\"sy0\">-</span> <span class=\"re0\">$RealPi</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$RealPi</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">New-Object</span> PSObject `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty Iterations <span class=\"re0\">$Iterations</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty Pi <span class=\"re0\">$Pi</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty <span class=\"st0\">\"% Difference\"</span> <span class=\"re0\">$Diff</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 25, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d MonteCarloPi<span class=\"br0\">(</span>throws.d<span class=\"br0\">)</span><br/>\tinCircle.d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> throws.d<br/>\t\t\trandX.d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">2147483647</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2147483647</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\trandY.d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">2147483647</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2147483647</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <br/>\t\t\tdist.d  <span class=\"sy0\">=</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>randX.d<span class=\"sy0\">*</span>randX.d <span class=\"sy0\">+</span> randY.d<span class=\"sy0\">*</span>randY.d<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">If</span> dist.d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <br/>\t\t\t\tinCircle <span class=\"sy0\">=</span> inCircle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">EndIf</span><br/>\t\t<span class=\"kw1\">Next</span> i<br/>\tpi.d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> inCircle <span class=\"sy0\">/</span> throws.d<span class=\"br0\">)</span>\t<br/>\t<span class=\"kw1\">ProcedureReturn</span> pi.d<br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span><span class=\"st0\">\"'built-in' #Pi         = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>#PI,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span><span class=\"st0\">\"MonteCarloPi(10000)    = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MonteCarloPi<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span><span class=\"st0\">\"MonteCarloPi(100000)   = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MonteCarloPi<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span><span class=\"st0\">\"MonteCarloPi(1000000)  = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MonteCarloPi<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span><span class=\"st0\">\"MonteCarloPi(10000000) = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MonteCarloPi<span class=\"br0\">(</span><span class=\"nu0\">10000000</span><span class=\"br0\">)</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">random</span><span class=\"sy0\">,</span> <span class=\"kw3\">math</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> throws <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">4.0</span> * <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>*<span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>-<span class=\"nu0\">1</span><br/>\t                 <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>              <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"kw2\">float</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><br/><span class=\"nu0\">3.1520000000000001</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> throws <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">4.0</span> * <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>*<span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>-<span class=\"nu0\">1</span><br/>\t                 <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>              <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"kw2\">float</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><br/><span class=\"nu0\">3.1396359999999999</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> throws <span class=\"sy0\">=</span> <span class=\"nu0\">100000000</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">4.0</span> * <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>*<span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>-<span class=\"nu0\">1</span><br/>\t                 <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>              <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"kw2\">float</span><span class=\"br0\">(</span>throws<span class=\"br0\">)</span><br/><span class=\"nu0\">3.1415666400000002</span></pre>"}, {"lang": "R", "loc": 27, "block": "<pre class=\"text highlighted_source\"># nice but not suitable for big samples!<br/>monteCarloPi &lt;- function(samples) {<br/>  x &lt;- runif(samples, -1, 1) # for big samples, you need a lot of memory!<br/>  y &lt;- runif(samples, -1, 1)<br/>  l &lt;- sqrt(x*x + y*y)<br/>  return(4*sum(l&lt;=1)/samples)<br/>}<br/>\u00a0<br/># this second function changes the samples number to be<br/># multiple of group parameter (default 100).<br/>monteCarlo2Pi &lt;- function(samples, group=100) {<br/>  lim &lt;- ceiling(samples/group)<br/>  olim &lt;- lim<br/>  c &lt;- 0<br/>  while(lim &gt; 0) {<br/>    x &lt;- runif(group, -1, 1)<br/>    y &lt;- runif(group, -1, 1)<br/>    l &lt;- sqrt(x*x + y*y)<br/>    c &lt;- c + sum(l &lt;= 1)<br/>    lim &lt;- lim - 1<br/>  }<br/>  return(4*c/(olim*group))<br/>}<br/>\u00a0<br/>print(monteCarloPi(1e4))<br/>print(monteCarloPi(1e5))<br/>print(monteCarlo2Pi(1e7))</pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (in-unit-circle? x y) (&lt;= (sqrt (+ (sqr x) (sqr y))) 1))<br/>;; point in ([-1,1], [-1,1])<br/>(define (random-point-in-2x2-square) (values (* 2 (- (random) 1/2)) (* 2 (- (random) 1/2))))<br/>\u00a0<br/>;; Area of circle is (pi r^2). r is 1, area of circle is pi<br/>;; Area of square is 2^2 = 4<br/>;; There is a pi/4 chance of landing in circle<br/>;; .: pi = 4*(proportion passed) = 4*(passed/samples)<br/>(define (passed:samples-&gt;pi passed samples) (* 4 (/ passed samples)))<br/>\u00a0<br/>;; generic kind of monte-carlo simulation<br/>(define (monte-carlo run-length report-frequency<br/>                     sample-generator pass?<br/>                     interpret-result)<br/>  (let inner ((samples 0) (passed 0) (cnt report-frequency))<br/>    (cond<br/>      [(= samples run-length) (interpret-result passed samples)]<br/>      [(zero? cnt)\u00a0; intermediate report<br/>       (printf \"~a samples of ~a: ~a passed -&gt; ~a~%\"<br/>               samples run-length passed (interpret-result passed samples))<br/>       (inner samples passed report-frequency)]<br/>      [else<br/>       (inner (add1 samples)<br/>              (if (call-with-values sample-generator pass?)<br/>                  (add1 passed) passed) (sub1 cnt))])))<br/>\u00a0<br/>;; (monte-carlo ...) gives an \"exact\" result... which will be a fraction.<br/>;; to see how it looks as a decimal we can exact-&gt;inexact it<br/>(let ((mc (monte-carlo 10000000 1000000 random-point-in-2x2-square in-unit-circle? passed:samples-&gt;pi)))<br/>  (printf \"exact = ~a~%inexact = ~a~%(pi - guess) = ~a~%\" mc (exact-&gt;inexact mc) (- pi mc)))</pre>"}, {"lang": "REXX", "loc": 28, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes and displays the value of  pi\u00f74  using the Monte Carlo algorithm*/</span><br/><span class=\"coMULTI\">/*true pi*/</span> pi=<span class=\"nu0\">3.141592653589793238462643383279502884197169399375105820974944592307816406</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'                    1         2         3         4         5         6         7   '</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'scale:    1\u00b7234567890123456789012345678901234567890123456789012345678901234567890123'</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2191]  a two-line scale for showing pi*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'true pi= '</span>       pi<span class=\"st0\">\"+\"</span>                      <span class=\"coMULTI\">/*we might as well brag about true  pi.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>pi<span class=\"br0\">)</span> - <span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/*this program uses these decimal digs.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> times chunk <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*does user want a specific number?    */</span><br/><span class=\"kw1\">if</span> times==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> times==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> times=5e12       <span class=\"coMULTI\">/*five trillion should do it, hopefully*/</span><br/><span class=\"kw1\">if</span> chunk==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> chunk==<span class=\"st0\">\".\"</span>  <span class=\"kw3\">then</span> chunk=<span class=\"nu0\">100000</span>     <span class=\"coMULTI\">/*perform Monte Carlo in  100k  chunks.*/</span><br/>limit=<span class=\"nu0\">10000</span> - <span class=\"nu0\">1</span>                                  <span class=\"coMULTI\">/*REXX random generates only integers. */</span><br/>limitSq=limit<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                                 <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7 so, instead of one, use limit**2.*/</span><br/>accuracy=<span class=\"nu0\">0</span>                                       <span class=\"coMULTI\">/*accuracy of Monte Carlo pi  (so far).*/</span><br/>!=<span class=\"nu0\">0</span>;  @reps= <span class=\"st0\">'repetitions:  Monte Carlo  pi  is'</span> <span class=\"coMULTI\">/*pi  decimal digit accuracy  (so far).*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*a blank line,  just for the eyeballs.*/</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> times\u00a0% chunk<br/>                       <span class=\"kw1\">do</span> chunk                  <span class=\"coMULTI\">/*do Monte Carlo,  one chunk at-a-time.*/</span><br/>                       <span class=\"kw1\">if</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span>, limit<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> + <span class=\"kw6\">random</span><span class=\"br0\">(</span>, limit<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span>= limitSq  <span class=\"kw3\">then</span>\u00a0!=! + <span class=\"nu0\">1</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*chunk*/</span><br/>      reps=chunk <span class=\"sy0\">*</span> j                             <span class=\"coMULTI\">/*calculate the number of repetitions. */</span><br/>      _=<span class=\"kw6\">compare</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>! <span class=\"sy0\">/</span> reps, pi<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*compare apples and  \u00b7\u00b7\u00b7  crabapples. */</span><br/>      <span class=\"kw1\">if</span> _<span class=\"sy0\">&lt;</span>=accuracy  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*Not better accuracy?  Keep truckin'. */</span><br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>comma<span class=\"br0\">(</span>reps<span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span> @reps  <span class=\"st0\">'accurate to'</span>  _-<span class=\"nu0\">1</span>  <span class=\"st0\">\"places.\"</span>  <span class=\"coMULTI\">/*\u25001 \u2261 dec. point*/</span><br/>      accuracy=_                                 <span class=\"coMULTI\">/*use this accuracy for next baseline. */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>comma: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> _;  <span class=\"kw1\">do</span> k=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>-<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">3</span>; _=<span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">','</span>,_,k<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> _</pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(8)<br/>see \"monteCarlo(1000) = \" + monteCarlo(1000) + nl<br/>see \"monteCarlo(10000) = \" + monteCarlo(10000) + nl<br/>see \"monteCarlo(100000) = \" + monteCarlo(100000) + nl<br/>\u00a0<br/>func monteCarlo t<br/>     n=0<br/>     for i = 1 to t<br/>         if sqrt(pow(random(1),2) + pow(random(1),2)) &lt;= 1 n += 1 ok<br/>     next<br/>     t = (4 * n) / t<br/>     return t<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> approx_pi<span class=\"br0\">(</span>throws<span class=\"br0\">)</span><br/>  times_inside = throws.<span class=\"me1\">times</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span><span class=\"kw4\">Math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span>, <span class=\"kw3\">rand</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1.0</span><span class=\"br0\">}</span><br/>  <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> times_inside <span class=\"sy0\">/</span> throws<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">10</span>_000, <span class=\"nu0\">100</span>_000, <span class=\"nu0\">1</span>_000_000, <span class=\"nu0\">10</span>_000_000<span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <br/>   <span class=\"kw3\">puts</span> <span class=\"st0\">\"%8d samples: PI =\u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n, approx_pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 33, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>use std::f64::consts::PI;<br/>\u00a0<br/>// `(f32, f32)` would be faster for some RNGs (including `rand::thread_rng` on 32-bit platforms<br/>// and `rand::weak_rng` as of rand v0.4) as `next_u64` combines two `next_u32`s if not natively<br/>// supported by the RNG.  It would less accurate however.<br/>fn is_inside_circle((x, y): (f64, f64)) -&gt; bool {<br/>    x * x + y * y &lt;= 1.0<br/>}<br/>\u00a0<br/>fn simulate&lt;R: Rng&gt;(rng: &amp;mut R, samples: usize) -&gt; f64 {<br/>    let mut count = 0;<br/>    for _ in 0..samples {<br/>        if is_inside_circle(rng.gen()) {<br/>            count += 1;<br/>        }<br/>    }<br/>    (count as f64) / (samples as f64)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut rng = rand::weak_rng();<br/>\u00a0<br/>    println!(\"Real pi: {}\", PI);<br/>\u00a0<br/>    for samples in (3..9).map(|e| 10_usize.pow(e)) {<br/>        let estimate = 4.0 * simulate(&amp;mut rng, samples);<br/>        let deviation = 100.0 * (1.0 - estimate / PI).abs();<br/>        println!(\"{:9}: {:&lt;11} dev: {:.5}%\", samples, estimate, deviation);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MonteCarlo <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> random <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Returns a random number between -1 and 1 */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> nextThrow<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">(</span>random.<span class=\"me1\">nextDouble</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> - <span class=\"nu0\">1.0</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Returns true if the argument point would be 'inside' the unit circle with<br/>    * center at the origin, and bounded by a square with side lengths of 2<br/>    * units. */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> insideCircle<span class=\"br0\">(</span>pt<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Double, Double<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> pt <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> + <span class=\"br0\">(</span>y <span class=\"sy0\">*</span> y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1.0</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Runs the simulation the specified number of times. Uses the result to <br/>    * estimate a value of pi */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> simulate<span class=\"br0\">(</span>times<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inside <span class=\"sy0\">=</span> Iterator.<span class=\"me1\">tabulate</span> <span class=\"br0\">(</span>times<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>nextThrow, nextThrow<span class=\"br0\">)</span><span class=\"br0\">)</span> count insideCircle<br/>    inside.<span class=\"me1\">toDouble</span> / times.<span class=\"me1\">toDouble</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4.0</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sims <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"nu0\">10000</span>, <span class=\"nu0\">100000</span>, <span class=\"nu0\">1000000</span>, <span class=\"nu0\">10000000</span>, <span class=\"nu0\">100000000</span><span class=\"br0\">)</span><br/>    sims.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span><br/>      println<span class=\"br0\">(</span>n+<span class=\"st0\">\" simulations; pi estimation: \"</span>+ simulate<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const func float: pi (in integer: throws) is func<br/>  result<br/>    var float: pi is 0.0;<br/>  local<br/>    var integer: throw is 0;<br/>    var integer: inside is 0;<br/>  begin<br/>    for throw range 1 to throws do<br/>      if rand(0.0, 1.0) ** 2 + rand(0.0, 1.0) ** 2 &lt;= 1.0 then<br/>        incr(inside);<br/>      end if;<br/>    end for;<br/>    pi\u00a0:= flt(4 * inside) / flt(throws);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"    10000: \" &lt;&amp; pi(    10000) digits 5);<br/>    writeln(\"   100000: \" &lt;&amp; pi(   100000) digits 5);<br/>    writeln(\"  1000000: \" &lt;&amp; pi(  1000000) digits 5);<br/>    writeln(\" 10000000: \" &lt;&amp; pi( 10000000) digits 5);<br/>    writeln(\"100000000: \" &lt;&amp; pi(100000000) digits 5);<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import &lt;Utilities/Random.sl&gt;;<br/>import &lt;Utilities/Conversion.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:= monteCarlo(stringToInt(args[1]), stringToInt(args[2]));<br/>\u00a0<br/>monteCarlo(n, seed)\u00a0:=<br/>\tlet<br/>\t\ttotalHits\u00a0:= monteCarloHelper(n, seedRandom(seed), 0);<br/>\tin<br/>\t\t(totalHits / intToFloat(n))*4.0;<br/>\u00a0<br/>monteCarloHelper(n, generator, result)\u00a0:=<br/>\tlet<br/>\t\txRand\u00a0:= getRandom(generator);<br/>\t\tx\u00a0:= xRand.Value/(generator.RandomMax + 1.0);<br/>\t\tyRand\u00a0:= getRandom(xRand.Generator);<br/>\t\ty\u00a0:= yRand.Value/(generator.RandomMax + 1.0);<br/>\u00a0<br/>\t\tnewResult\u00a0:= result + 1 when x^2 + y^2 &lt; 1.0 else<br/>\t\t\t\t\t result;<br/>\tin<br/>\t\tresult when n &lt; 0 else<br/>\t\tmonteCarloHelper(n - 1, yRand.Generator, newResult);<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func monteCarloPi<span class=\"br0\">(</span>nthrows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>^nthrows <span class=\"sy0\">-&gt;</span> count_by <span class=\"br0\">{</span><br/>        hypot<span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> nthrows<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span>1e2, 1e3, 1e4, 1e5, 1e6<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%9d:\u00a0%07f<span class=\"es0\">\\n</span>\"</span>, n, monteCarloPi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 17, "block": "<pre class=\"text highlighted_source\">program define mcdisk<br/>\tclear all<br/>\tquietly set obs `1'<br/>\tgen x=2*runiform()<br/>\tgen y=2*runiform()<br/>\tquietly count if (x-1)^2+(y-1)^2&lt;1<br/>\tdisplay 4*r(N)/_N<br/>end<br/>\u00a0<br/>. mcdisk 10000<br/>3.1424<br/>\u00a0<br/>. mcdisk 1000000<br/>3.141904<br/>\u00a0<br/>. mcdisk 100000000<br/>3.1416253</pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func mcpi(sampleSize size:Int) -&gt; Double {<br/>    var x = 0 as Double<br/>    var y = 0 as Double<br/>    var m = 0 as Double<br/>\u00a0<br/>    for i in 0..&lt;size {<br/>        x = Double(arc4random()) / Double(UINT32_MAX)<br/>        y = Double(arc4random()) / Double(UINT32_MAX)<br/>\u00a0<br/>        if ((x * x) + (y * y) &lt; 1) {<br/>            m += 1<br/>        }<br/>    }<br/>\u00a0<br/>    return (4.0 * m) / Double(size)<br/>}<br/>\u00a0<br/>println(mcpi(sampleSize: 100))<br/>println(mcpi(sampleSize: 1000))<br/>println(mcpi(sampleSize: 10000))<br/>println(mcpi(sampleSize: 100000))<br/>println(mcpi(sampleSize: 1000000))<br/>println(mcpi(sampleSize: 10000000))<br/>println(mcpi(sampleSize: 100000000))</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> pi <span class=\"br0\">{</span>samples<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> inside <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$samples</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> + rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> inside<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$inside</span> / <span class=\"re0\">$samples</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"PI is approx [expr {atan(1)*4}]<span class=\"es0\">\\n</span>\"</span><br/><span class=\"kw1\">foreach</span> runs <span class=\"br0\">{</span>1e2 1e4 1e6 1e8<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$runs =&gt; [pi $runs]\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import flo<br/>\u00a0<br/>mcp \"n\" = times/4. div\\float\"n\" (rep\"n\" (fleq/.5+ sqrt+ plus+ ~~ sqr+ minus/.5+ rand)?/~&amp; plus/1.) 0.</pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">code Ran=1, CrLf=9;<br/>code real RlOut=48;<br/>\u00a0<br/>func real MontePi(N);   \\Calculate pi using Monte Carlo method<br/>int  N;                 \\number of randomly selected points<br/>int  I, X, Y, C;<br/>def  R = 10000;         \\radius of circle<br/>[C:= 0;                 \\initialize count of points in circle<br/>for I:= 0 to N-1 do<br/>        [X:= Ran(R);<br/>         Y:= Ran(R);<br/>        if X*X + Y*Y &lt;= R*R then C:= C+1;<br/>        ];<br/>return float(C)*4.0 / float(N);   \\Acir/Asqr = pi*R^2/4*R^2 = pi/4<br/>];<br/>\u00a0<br/>[RlOut(0, MontePi(        100));  CrLf(0);<br/> RlOut(0, MontePi(     10_000));  CrLf(0);<br/> RlOut(0, MontePi(  1_000_000));  CrLf(0);<br/> RlOut(0, MontePi(100_000_000));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn monty(n){<br/>   inCircle:=0; <br/>   do(n){<br/>      x:=(0.0).random(1); y:=(0.0).random(1);<br/>      if(x*x + y*y &lt; 1.0) inCircle+=1;<br/>   }<br/>   4.0*inCircle/n<br/>}</pre>"}]}