{"task": "Executable_library", "blocks": [{"lang": "Ada", "loc": 4, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Parameter <span class=\"kw1\">is</span><br/>   X: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   Y: Natural;<br/><span class=\"kw1\">end</span> Parameter;</pre>"}, {"lang": "AutoHotkey", "loc": 28, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">; Check if we're executed directly:</span><br/><span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LineFile\"><span class=\"kw2\">A_LineFile</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptFullPath\"><span class=\"kw2\">A_ScriptFullPath</span></a><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\th27 <span class=\"sy0\">:=</span> hailstone<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Length of hailstone 27: \"</span> <span class=\"br0\">(</span>m <span class=\"sy0\">:=</span> h27<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"`nStarts with \"</span><br/>\t\t<span class=\"sy0\">.</span> h27<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nEnds with \"</span><br/>\t\t<span class=\"sy0\">.</span> h27<span class=\"br0\">[</span>m<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span>m<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span> h27<span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">100000</span><br/>\t<span class=\"br0\">{</span><br/>\t\th <span class=\"sy0\">:=</span> hailstone<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>h<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> m<span class=\"br0\">)</span><br/>\t\t\tm <span class=\"sy0\">:=</span> h<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> longest <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Longest hailstone is that of \"</span> longest <span class=\"st0\">\" with a length of \"</span> m <span class=\"st0\">\"!\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>hailstone<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tout <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t\tn <span class=\"sy0\">:=</span> n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>\u00a0? n<span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: n<span class=\"sy0\">//</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> out<span class=\"sy0\">.</span><span class=\"kw6\">insert</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\tuntil n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> out<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      seqlen% = FNhailstone(27)<br/>      PRINT \"Sequence length for 27 is \"; seqlen%<br/>      maxlen% = 0<br/>      FOR number% = 2 TO 100000<br/>        seqlen% = FNhailstone(number%)<br/>        IF seqlen% &gt; maxlen% THEN<br/>          maxlen% = seqlen%<br/>          maxnum% = number%<br/>        ENDIF<br/>      NEXT<br/>      PRINT \"The number with the longest hailstone sequence is \"\u00a0; maxnum%<br/>      PRINT \"Its sequence length is \"\u00a0; maxlen%<br/>      END<br/>\u00a0<br/>      DEF FNhailstone(N%)<br/>      LOCAL L%<br/>      WHILE N% &lt;&gt; 1<br/>        IF N% AND 1 THEN N% = 3 * N% + 1 ELSE N% DIV= 2<br/>        L% += 1<br/>      ENDWHILE<br/>      = L% + 1</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifndef HAILSTONE</span><br/><span class=\"co2\">#define HAILSTONE       </span><br/>\u00a0<br/><span class=\"kw4\">long</span> hailstone<span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"sy0\">,</span> <span class=\"kw4\">long</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/><span class=\"kw4\">void</span> free_sequence<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#endif/*HAILSTONE*/</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre>.\n\u251c\u2500\u2500 clojure.jar\n\u2514\u2500\u2500 rosetta_code\n    \u251c\u2500\u2500 frequent_hailstone_lengths.clj\n    \u2514\u2500\u2500 hailstone_sequence.clj\n</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 36, "block": "<pre class=\"text highlighted_source\">local hailstone:<br/>\tswap [ over ]<br/>\twhile &lt; 1 dup:<br/>\t\tif\u00a0% over 2:<br/>\t\t\t#odd<br/>\t\t\t++ * 3<br/>\t\telse:<br/>\t\t\t#even<br/>\t\t\t/ swap 2<br/>\t\tswap push-through rot dup<br/>\tdrop<br/>\u00a0<br/>if = (name)\u00a0:(main):<br/>\tlocal\u00a0:h27 hailstone 27<br/>\t!. = 112 len h27<br/>\t!. = 27 h27! 0<br/>\t!. = 82 h27! 1<br/>\t!. = 41 h27! 2<br/>\t!. = 124 h27! 3<br/>\t!. = 8 h27! 108<br/>\t!. = 4 h27! 109<br/>\t!. = 2 h27! 110<br/>\t!. = 1 h27! 111<br/>\u00a0<br/>\tlocal\u00a0:max 0<br/>\tlocal\u00a0:maxlen 0<br/>\tfor i range 1 99999:<br/>\t\tdup len hailstone i<br/>\t\tif &lt; maxlen:<br/>\t\t\tset\u00a0:maxlen<br/>\t\t\tset\u00a0:max i<br/>\t\telse:<br/>\t\t\tdrop<br/>\t!print( \"number: \" to-str max \", length: \" to-str maxlen )<br/>else:<br/>\t@hailstone</pre>"}, {"lang": "Factor", "loc": 31, "block": "<pre class=\"text highlighted_source\">! rosetta/hailstone/hailstone.factor<br/>USING: arrays io kernel math math.ranges prettyprint sequences vectors\u00a0;<br/>IN: rosetta.hailstone<br/>\u00a0<br/>: hailstone ( n -- seq )<br/>    [ 1vector ] keep<br/>    [ dup 1 number= ]<br/>    [<br/>        dup even? [ 2 / ] [ 3 * 1 + ] if<br/>        2dup swap push<br/>    ] until<br/>    drop\u00a0;<br/>\u00a0<br/>&lt;PRIVATE<br/>: main ( -- )<br/>    27 hailstone dup dup<br/>    \"The hailstone sequence from 27:\" print<br/>    \"  has length \" write length .<br/>    \"  starts with \" write 4 head [ unparse ] map \", \" join print<br/>    \"  ends with \" write 4 tail* [ unparse ] map \", \" join print<br/>\u00a0<br/>   \u00a0! Maps n =&gt; { length n }, and reduces to longest Hailstone sequence.<br/>    1 100000 [a,b)<br/>    [ [ hailstone length ] keep 2array ]<br/>    [ [ [ first ] <a class=\"__cf_email__\" data-cfemail=\"b9dbd0f9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; ] most ] map-reduce<br/>    first2<br/>    \"The hailstone sequence from \" write pprint<br/>    \" has length \" write pprint \".\" print\u00a0;<br/>PRIVATE&gt;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Io", "loc": 30, "block": "<pre class=\"io highlighted_source\">HailStone\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <br/>HailStone sequence\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>n,<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span>, <span class=\"kw3\">Exception</span> <span class=\"kw1\">raise</span><span class=\"br0\">(</span><span class=\"st0\">\"hailstone: expect n &gt;= 1 not #{n}\"</span> interpolate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n = n floor         <span class=\"co1\">// make sure integer value</span><br/>    stones\u00a0:= <span class=\"kw2\">list</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span>,<br/>        n = <span class=\"kw1\">if</span><span class=\"br0\">(</span>n isEven, n<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"sy0\">*</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        stones append<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    stones<br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> isLaunchScript,<br/>    out\u00a0:= HailStone sequence<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"hailstone(27) has length \"</span>,out size,<span class=\"st0\">\": \"</span>,<br/>        out slice<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span> join<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>,<span class=\"st0\">\" ... \"</span>,out slice<span class=\"br0\">(</span>-<span class=\"nu0\">4</span><span class=\"br0\">)</span> join<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    maxSize\u00a0:= <span class=\"nu0\">0</span><br/>    maxN\u00a0:= <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>n, <span class=\"nu0\">1</span>, <span class=\"nu0\">100000</span>-<span class=\"nu0\">1</span>,<br/>        out = HailStone sequence<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>out size <span class=\"sy0\">&gt;</span> maxSize,<br/>            maxSize = out size<br/>            maxN = n<br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"For numbers &lt; 100,000, \"</span>, maxN,<br/>    <span class=\"st0\">\" has the longest sequence of \"</span>, maxSize, <span class=\"st0\">\" elements.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">hailseq=: -:`<span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span>&amp;p.<span class=\"sy0\">)</span>@.<span class=\"sy0\">(</span><span class=\"nu0\">2</span>&amp;|<span class=\"sy0\">)</span> ^:<span class=\"sy0\">(</span><span class=\"nu0\">1</span> ~: ]<span class=\"sy0\">)</span> ^:a:\"<span class=\"nu0\">0</span><br/><span class=\"nu0\">9</span>!:<span class=\"nu0\">29</span>]<span class=\"nu0\">1</span><br/><span class=\"nu0\">9</span>!:<span class=\"nu0\">27</span><span class=\"st_h\">'main 0'</span><br/>main=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  smoutput <span class=\"st_h\">'Hailstone sequence for the number 27'</span><br/>  smoutput hailseq <span class=\"nu0\">27</span><br/>  smoutput <span class=\"st_h\">''</span><br/>  smoutput <span class=\"st_h\">'Finding number with longest hailstone sequence which is'</span><br/>  smoutput <span class=\"st_h\">'less than 100000 (and finding that sequence length):'</span><br/>  smoutput <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"f5bcdbb5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>= &gt;./<span class=\"sy0\">)</span>,&gt;./<span class=\"sy0\">)</span> #@hailseq i.<span class=\"nu0\">1e5</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Julia", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>############### in file hailstone.jl ###############<br/>module Hailstone<br/>\u00a0<br/>function hailstone(n)<br/>    ret = [n]<br/>    while n &gt; 1<br/>        if n &amp; 1 &gt; 0<br/>            n = 3n + 1<br/>        else <br/>            n = Int(n//2)<br/>        end<br/>        append!(ret, n)<br/>    end<br/>    return ret<br/>end<br/>\u00a0<br/>export hailstone<br/>\u00a0<br/>end<br/>\u00a0<br/>if PROGRAM_FILE == \"hailstone.jl\"<br/>    using Hailstone<br/>    h = hailstone(27)<br/>    n = length(h)<br/>    println(\"The sequence of hailstone(27) is:\\n $h.\\nThis sequence is of length $n. It starts with $(h[1:4]) and ends with $(h[n-3:end]).\")<br/>end<br/>############ in file moduletest.jl ####################<br/>include(\"hailstone.jl\")<br/>using Hailstone<br/>function countstones(mi, mx)<br/>    lengths2occurences = Dict()<br/>    mostfreq = mi<br/>    maxcount = 1<br/>    for i in mi:mx<br/>        h = hailstone(i)<br/>        n = length(h)<br/>        if haskey(lengths2occurences, n)<br/>            newoccurences = lengths2occurences[n] + 1<br/>            if newoccurences &gt; maxcount<br/>                maxcount = newoccurences<br/>                mostfreq = n<br/>            end<br/>            lengths2occurences[n] = newoccurences<br/>        else<br/>            lengths2occurences[n] = 1<br/>        end<br/>    end<br/>    mostfreq, maxcount<br/>end<br/>\u00a0<br/>nlen, cnt = countstones(1,99999)<br/>\u00a0<br/>print(\"The most common hailstone sequence length for hailstone(n) for 1 &lt;= n &lt; 100000 is $nlen, which occurs $cnt times.\")<br/>\u00a0</pre>"}, {"lang": "Limbo", "loc": 54, "block": "<pre class=\"text highlighted_source\">implement Execlib;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>include \"draw.m\";<br/>\u00a0<br/>Execlib: module {<br/>\tinit: fn(ctxt: ref Draw-&gt;Context, args: list of string);<br/>\thailstone: fn(i: big): list of big;<br/>};<br/>\u00a0<br/>init(nil: ref Draw-&gt;Context, nil: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\u00a0<br/>\tseq\u00a0:= hailstone(big 27);<br/>\tl\u00a0:= len seq;<br/>\u00a0<br/>\tsys-&gt;print(\"hailstone(27):  \");<br/>\tfor(i\u00a0:= 0; i &lt; 4; i++) {<br/>\t\tsys-&gt;print(\"%bd, \", hd seq);<br/>\t\tseq = tl seq;<br/>\t}<br/>\tsys-&gt;print(\"\u22ef\");<br/>\u00a0<br/>\twhile(len seq &gt; 4)<br/>\t\tseq = tl seq;<br/>\u00a0<br/>\twhile(seq\u00a0!= nil) {<br/>\t\tsys-&gt;print(\",\u00a0%bd\", hd seq);<br/>\t\tseq = tl seq;<br/>\t}<br/>\tsys-&gt;print(\" (length\u00a0%d)\\n\", l);<br/>\u00a0<br/>\tmax\u00a0:= 1;<br/>\tmaxn\u00a0:= big 1;<br/>\tfor(n\u00a0:= big 2; n &lt; big 100000; n++) {<br/>\t\tcur\u00a0:= len hailstone(n);<br/>\t\tif(cur &gt; max) {<br/>\t\t\tmax = cur;<br/>\t\t\tmaxn = n;<br/>\t\t}<br/>\t}<br/>\tsys-&gt;print(\"hailstone(%bd) has length\u00a0%d\\n\", maxn, max);<br/>}<br/>\u00a0<br/>hailstone(i: big): list of big<br/>{<br/>\tif(i == big 1)<br/>\t\treturn big 1\u00a0:: nil;<br/>\tif(i\u00a0% big 2 == big 0)<br/>\t\treturn i\u00a0:: hailstone(i / big 2);<br/>\treturn i\u00a0:: hailstone(big 3 * i + big 1);<br/>}<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">hailstone[1] = {1};<br/>hailstone[n_]\u00a0:= <br/>  hailstone[n] = Prepend[hailstone[If[EvenQ[n], n/2, 3 n + 1]], n];<br/>If[$ScriptCommandLine[[1]] == $Input,<br/>  val = hailstone[27];<br/>  Print[\"hailstone(27) starts with \", val[[;; 4]], \", ends with \", <br/>   val[[-4\u00a0;;]], \", and has length \", Length[val], \".\"];<br/>  val = MaximalBy[Range[99999], <a class=\"__cf_email__\" data-cfemail=\"abe7cec5ccdfc3eb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*hailstone][[1]];<br/>  Print[val, \" has the longest hailstone sequence with length \", <br/>   Length[hailstone[val]], \".\"]];</pre>"}, {"lang": "NetRexx", "loc": 1, "block": "<pre>$ jar cvfe RHailstoneSequence.jar RHailstoneSequence RHailstoneSequence.class \nadded manifest\nadding: RHailstoneSequence.class(in = 2921) (out= 1567)(deflated 46%)</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">proc hailstone*(n): auto =<br/>  result = @[n]<br/>  var n = n<br/>  while n &gt; 1:<br/>    if (n and 1) == 1:<br/>      n = 3 * n + 1<br/>    else:<br/>      n = n div 2<br/>    result.add n<br/>\u00a0<br/>when isMainModule:<br/>  let h = hailstone 27<br/>  assert h.len == 112 and h[0..3] == @[27,82,41,124] and h[h.high-3..h.high] == @[8,4,2,1]<br/>  var m, mi = 0<br/>  for i in 1 .. &lt;100_000:<br/>    let n = hailstone(i).len<br/>    if n &gt; m:<br/>      m = n<br/>      mi = i<br/>  echo \"Maximum length \", m, \" was found for hailstone(\", mi, \") for numbers &lt;100,000\"</pre>"}, {"lang": "PARI/GP", "loc": 44, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pari/pari.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define HAILSTONE1      \"n=1;print1(%d,\\\": \\\");apply(x-&gt;while(x!=1,if(x/2==x\\\\2,x/=2,x=x*3+1);n++;print1(x,\\\", \\\")),%d);print(\\\"(\\\",n,\\\")\\n\\\")\"</span><br/><span class=\"co2\">#define HAILSTONE2      \"m=n=0;for(i=2,%d,h=1;apply(x-&gt;while(x!=1,if(x/2==x\\\\2,x/=2,x=x*3+1);h++),i);if(m&lt;h,m=h;n=i));print(n,\\\": \\\",m)\"</span><br/>\u00a0<br/><span class=\"kw4\">void</span> hailstone1<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/snprintf.html\"><span class=\"kw3\">snprintf</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">,</span> HAILSTONE1<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  pari_init<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  geval<span class=\"br0\">(</span>strtoGENstr<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  pari_close<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> hailstone2<span class=\"br0\">(</span><span class=\"kw4\">int</span> range<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/snprintf.html\"><span class=\"kw3\">snprintf</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">,</span> HAILSTONE2<span class=\"sy0\">,</span> range<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  pari_init<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  geval<span class=\"br0\">(</span>strtoGENstr<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  pari_close<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#if __i386__</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> _hail<span class=\"br0\">[</span><span class=\"br0\">]</span> __attribute__<span class=\"br0\">(</span><span class=\"br0\">(</span>section<span class=\"br0\">(</span><span class=\"st0\">\".interp\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"/lib/ld-linux.so.2\"</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#else // __x86_64__</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> _hail<span class=\"br0\">[</span><span class=\"br0\">]</span> __attribute__<span class=\"br0\">(</span><span class=\"br0\">(</span>section<span class=\"br0\">(</span><span class=\"st0\">\".interp\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"/lib64/ld-linux-x86-64.so.2\"</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  hailstone1<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  hailstone2<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 26, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Hailstone<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> seq <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>\t<span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> seq<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> seq<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%cache</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> len <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>\t\t<span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>\t<span class=\"sy0\">?</span> len<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">:</span> len<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">unless</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/caller.html\"><span class=\"kw3\">caller</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span>_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> len<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$l</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$len</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"seq of 27 - $cache{27} elements: @{[seq(27)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Longest sequence is for $m: $len<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\">module Hailstone <span class=\"br0\">{</span><br/>    <span class=\"kw1\">our</span> <span class=\"kw2\">sub</span> hailstone<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> export <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"re0\">$_</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"hailstone(27) = {.[^4]} [...] {.[*-4 .. *-1]}\"</span> <span class=\"kw1\">given</span> Hailstone<span class=\"sy0\">::</span><span class=\"me2\">hailstone</span> <span class=\"nu0\">27</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 64, "block": "<pre class=\"text highlighted_source\">function isMainOrInclude()<br/>-- returns 1 if called from the main file, 0 if from an include<br/>integer res<br/>    #ilASM{<br/>        [32]<br/>            mov eax,[ebp+20]    -- prev_ebp<br/>            mov eax,[eax+8]     -- rtn<br/>            mov [res],eax<br/>        [64]<br/>            mov rax,[rbp+40]    -- prev_ebp<br/>            mov rax,[rax+16]    -- rtn<br/>            mov [res],rax<br/>        []<br/>          }<br/>    return res=21 -- (21=T_maintls)<br/>end function<br/>\u00a0<br/>--global (if you want to be able to call this from test.exw)<br/>function hailstone(atom n)<br/>sequence s = {n}<br/>    while n!=1 do<br/>        if remainder(n,2)=0 then<br/>            n /= 2<br/>        else<br/>            n = 3*n+1<br/>        end if<br/>        s &amp;= n<br/>    end while<br/>    return s<br/>end function<br/>\u00a0<br/>global function hailstone_count(atom n)<br/>integer count = 1<br/>    while n!=1 do<br/>        if remainder(n,2)=0 then<br/>            n /= 2<br/>        else<br/>            n = 3*n+1<br/>        end if<br/>        count += 1<br/>    end while<br/>    return count<br/>end function<br/>\u00a0<br/>if isMainOrInclude() then<br/>\u00a0<br/>    sequence s = hailstone(27)<br/>    integer ls = length(s)<br/>    s[5..-5] = {\"..\"}<br/>    puts(1,\"hailstone(27) = \")<br/>   \u00a0? s<br/>    printf(1,\"length =\u00a0%d\\n\\n\",ls)<br/>\u00a0<br/>    integer hmax = 1, imax = 1,count<br/>    for i=2 to 1e5-1 do<br/>        count = hailstone_count(i)<br/>        if count&gt;hmax then<br/>            hmax = count<br/>            imax = i<br/>        end if<br/>    end for<br/>\u00a0<br/>    printf(1,\"The longest hailstone sequence under 100,000 is\u00a0%d with\u00a0%d elements.\\n\",{imax,hmax})<br/>end if</pre>"}, {"lang": "Pike", "loc": 39, "block": "<pre class=\"pike highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env pike<br/>\u00a0<br/>int next<span class=\"br0\">(</span>int n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> hailstone<span class=\"br0\">(</span>int n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array seq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> n <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"sy0\">=</span>next<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        seq <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> n <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> seq<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> two <span class=\"sy0\">=</span> hailstone<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equal<span class=\"br0\">(</span>two<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">27</span>, <span class=\"nu0\">82</span>, <span class=\"nu0\">41</span>, <span class=\"nu0\">124</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> equal<span class=\"br0\">(</span>two<span class=\"br0\">[</span>&lt;<span class=\"nu0\">3</span>..<span class=\"br0\">]</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">8</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"sizeof(({\u00a0%{%d,\u00a0%}, ...\u00a0%{%d,\u00a0%} }) ==\u00a0%d<span class=\"es0\">\\n</span>\"</span>, two<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span>, two<span class=\"br0\">[</span>&lt;<span class=\"nu0\">3</span>..<span class=\"br0\">]</span>, sizeof<span class=\"br0\">(</span>two<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    mapping longest <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"st0\">\"length\"</span>:<span class=\"nu0\">0</span>, <span class=\"st0\">\"start\"</span>:<span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>allocate<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> int start<span class=\"sy0\">;</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        int length <span class=\"sy0\">=</span> sizeof<span class=\"br0\">(</span>hailstone<span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length &gt; longest<span class=\"sy0\">-</span>&gt;length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            longest<span class=\"sy0\">-</span>&gt;length <span class=\"sy0\">=</span> length<span class=\"sy0\">;</span><br/>            longest<span class=\"sy0\">-</span>&gt;start <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"longest sequence starting at\u00a0%d has\u00a0%d elements<span class=\"es0\">\\n</span>\"</span>, longest<span class=\"sy0\">-</span>&gt;start, longest<span class=\"sy0\">-</span>&gt;length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 20, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/picolisp /usr/lib/picolisp/lib.l<br/>\u00a0<br/>(de hailstone (N)<br/>   (make<br/>      (until (= 1 (link N))<br/>         (setq N<br/>            (if (bit? 1 N)<br/>               (inc (* N 3))<br/>               (/ N 2) ) ) ) ) )<br/>\u00a0<br/>(de hailtest ()<br/>   (let L (hailstone 27)<br/>      (test 112 (length L))<br/>      (test (27 82 41 124) (head 4 L))<br/>      (test (8 4 2 1) (tail 4 L)) )<br/>   (let N (maxi '((N) (length (hailstone N))) (range 1 100000))<br/>      (test 77031 N)<br/>      (test 351 (length (hailstone N))) )<br/>   (println 'OK)<br/>   (bye) )</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> hailstone<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    seq <span class=\"sy0\">=</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>:<br/>        n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>*n + <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n &amp; <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> n//<span class=\"nu0\">2</span><br/>        seq.<span class=\"me1\">append</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> seq<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    h <span class=\"sy0\">=</span> hailstone<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">112</span> <span class=\"kw1\">and</span> h<span class=\"br0\">[</span>:<span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">82</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">124</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> h<span class=\"br0\">[</span>-<span class=\"nu0\">4</span>:<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Maximum length\u00a0%i was found for hailstone(%i) for numbers &lt;100,000\"</span>\u00a0%<br/>          <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>hailstone<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(provide hailstone)<br/>(define hailstone<br/>  (let ([t (make-hasheq)])<br/>    (hash-set! t 1 '(1))<br/>    (\u03bb(n) (hash-ref! t n<br/>            (\u03bb() (cons n (hailstone (if (even? n) (/ n 2) (+ (* 3 n) 1)))))))))<br/>\u00a0<br/>(module+ main<br/>  (define h27 (hailstone 27))<br/>  (printf \"h(27) = ~s, ~s items\\n\"<br/>          `(,@(take h27 4) ... ,@(take-right h27 4))<br/>          (length h27))<br/>  (define N 100000)<br/>  (define longest<br/>    (for/fold ([m #f]) ([i (in-range 1 (add1 N))])<br/>      (define h (hailstone i))<br/>      (if (and m (&gt; (cdr m) (length h))) m (cons i (length h)))))<br/>  (printf \"for x&lt;=~s, ~s has the longest sequence with ~s items\\n\"<br/>          N (car longest) (cdr longest)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 9, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program returns the hailstone (Collatz) sequence for any integer.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                      <span class=\"coMULTI\">/*ensure enough digits for mult. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n <span class=\"nu0\">1</span> s                        <span class=\"coMULTI\">/*N &amp; S assigned to the first arg*/</span><br/>                <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> n<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*loop while  N  isn't  unity.   */</span><br/>                <span class=\"kw1\">if</span> n<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> n=n<span class=\"sy0\">*</span><span class=\"nu0\">3</span>+<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*if  N  is odd,  calc:   3*n +1 */</span><br/>                         <span class=\"kw3\">else</span> n=n%2    <span class=\"coMULTI\">/* \"  \"   \" even, perform fast \u00f7 */</span><br/>                s=s n                  <span class=\"coMULTI\">/*build a sequence list (append).*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/><span class=\"kw1\">return</span> s</pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># hailstone.rb</span><br/><span class=\"kw1\">module</span> Hailstone<br/>  module_function<br/>  <span class=\"kw1\">def</span> hailstone n<br/>    seq = <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">until</span> n == <span class=\"nu0\">1</span><br/>      n = <span class=\"br0\">(</span>n.<span class=\"me1\">even</span>?<span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      seq <span class=\"sy0\">&lt;&lt;</span> n<br/>    <span class=\"kw1\">end</span><br/>    seq<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">__FILE__</span> == $0<br/>  <span class=\"kw1\">include</span> Hailstone<br/>\u00a0<br/>  <span class=\"co1\"># for n = 27, show sequence length and first and last 4 elements</span><br/>  hs27 = hailstone <span class=\"nu0\">27</span><br/>  <span class=\"kw3\">p</span> <span class=\"br0\">[</span>hs27.<span class=\"me1\">length</span>, hs27<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span>, hs27<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">4</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\"># find the longest sequence among n less than 100,000</span><br/>  n, len = <span class=\"br0\">(</span><span class=\"nu0\">1</span> ... <span class=\"nu0\">100</span>_000<span class=\"br0\">)</span> .<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    <span class=\"br0\">[</span>n, hailstone<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">}</span> .<span class=\"me1\">max_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n, len<span class=\"sy0\">|</span> len<span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n} has a hailstone sequence length of #{len}\"</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"the largest number in that sequence is #{hailstone(n).max}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HailstoneSequence <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span> <span class=\"co1\">// Show it all, default number is 27.</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hailstone<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>       n <span class=\"sy0\">#::</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> Stream.<span class=\"me1\">empty</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> hailstone<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> n / <span class=\"nu0\">2</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> n <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Hailstone.<span class=\"me1\">details</span><span class=\"br0\">(</span>args.<span class=\"me1\">headOption</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  HailTest.<span class=\"me1\">main</span><span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Hailstone <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span> <span class=\"co1\">// Compute a given or default number to Hailstone sequence</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> details<span class=\"br0\">(</span>nr<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> collatz <span class=\"sy0\">=</span> HailstoneSequence.<span class=\"me1\">hailstone</span><span class=\"br0\">(</span>nr<span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"Use the routine to show that the hailstone sequence for the number: $nr.\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>collatz.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"It has ${collatz.length} elements.\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  details<span class=\"br0\">(</span>args.<span class=\"me1\">headOption</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HailTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span> <span class=\"co1\">// Compute only the &lt; 100000 test</span><br/>  println<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"Compute the number &lt; 100,000, which has the longest hailstone sequence with that sequence's length.\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>n, len<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> until <span class=\"nu0\">100000</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>n, HailstoneSequence.<span class=\"me1\">hailstone</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">maxBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Longest hailstone sequence length= $len occurring with number $n.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 26, "block": "<pre class=\"ruby highlighted_source\">func hailstone<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            take<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            n = <span class=\"br0\">(</span>n.<span class=\"me1\">is_even</span>\u00a0? n<span class=\"sy0\">/</span><span class=\"nu0\">2</span>\u00a0: <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        take<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">__FILE__</span> == __MAIN__<span class=\"br0\">)</span> <span class=\"br0\">{</span>             <span class=\"co1\"># true when not imported</span><br/>    var seq = hailstone<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"hailstone(27) - #{seq.len} elements: #{seq.ft(0, 3)} [...] #{seq.ft(-4)}\"</span><br/>\u00a0<br/>    var n = <span class=\"nu0\">0</span><br/>    var max = <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">100</span>_000.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        var seq = hailstone<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>seq.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            max = seq.<span class=\"me1\">len</span><br/>            n = i<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    say <span class=\"st0\">\"Longest sequence is for #{n}: #{max}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 25, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\">### In the file hailstone.tcl ###</span><br/><span class=\"kw2\">package</span> provide hailstone <span class=\"nu0\">1.0</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> hailstone n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> seq <span class=\"re0\">$n</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$seq</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span>+<span class=\"nu0\">1</span>\u00a0: <span class=\"re0\">$n</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># If directly executed, run demo code</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> script<span class=\"br0\">]</span> eq <span class=\"sy0\">$</span>::<span class=\"me1\">argv0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> h27 <span class=\"br0\">[</span>hailstone <span class=\"nu0\">27</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"h27 len=[llength $h27]\"</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"head4 = [lrange $h27 0 3]\"</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"tail4 = [lrange $h27 end-3 end]\"</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> maxlen <span class=\"br0\">[</span><span class=\"kw1\">set</span> max <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">100000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> l <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span>hailstone <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span><span class=\"sy0\">&gt;</span><span class=\"re0\">$maxlen</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> maxlen <span class=\"re0\">$l</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> max <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"max is $max, with length $maxlen\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn collatz(n,z=L()){ z.append(n); if(n==1) return(z);<br/>   if(n.isEven) return(self.fcn(n/2,z)); return(self.fcn(n*3+1,z)) }<br/>\u00a0<br/>h27:=collatz(27);<br/>println(\"Hailstone(27)--&gt;\",h27[0,4].concat(\",\"),\"...\",<br/>\th27[-4,*].concat(\",\"),\" length \",h27.len());<br/>\u00a0<br/>[2..0d100_000].pump(Void,  // loop n from 2 to 100,000<br/>   collatz,              // generate Collatz sequence(n)<br/>   fcn(c,n){           // if new longest sequence, save length/C, return longest<br/>      if(c.len()&gt;n[0]) n.clear(c.len(),c[0]); n}.fp1(L(0,0)))<br/>.println();</pre>"}]}