{"task": "Sort_an_array_of_composite_structures", "blocks": [{"lang": "ACL2", "loc": 32, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> insert-by-key <span class=\"br0\">(</span>o os key<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp os<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> o<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> key o<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> key <span class=\"br0\">(</span>first os<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> o os<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first os<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>insert-by-key o <span class=\"br0\">(</span>rest os<span class=\"br0\">)</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> isort-by-key <span class=\"br0\">(</span>os key<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp os<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span>insert-by-key <span class=\"br0\">(</span>first os<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>isort-by-key <span class=\"br0\">(</span>rest os<span class=\"br0\">)</span> key<span class=\"br0\">)</span><br/>                      key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>isort-by-key<br/> '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>  <span class=\"sy0\">.</span> <span class=\"st0\">\"map\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>weight <span class=\"sy0\">.</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">value</span>  <span class=\"sy0\">.</span> <span class=\"nu0\">150</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>   <span class=\"sy0\">.</span> <span class=\"st0\">\"compass\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>weight <span class=\"sy0\">.</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">value</span>  <span class=\"sy0\">.</span> <span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>   <span class=\"sy0\">.</span> <span class=\"st0\">\"water\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>weight <span class=\"sy0\">.</span> <span class=\"nu0\">153</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">value</span>  <span class=\"sy0\">.</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>   <span class=\"sy0\">.</span> <span class=\"st0\">\"sandwich\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>weight <span class=\"sy0\">.</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">value</span>  <span class=\"sy0\">.</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">name</span>   <span class=\"sy0\">.</span> <span class=\"st0\">\"glucose\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>weight <span class=\"sy0\">.</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">value</span>  <span class=\"sy0\">.</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> '<span class=\"kw1\">value</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 41, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;           <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Demo_Array_Sort <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>S\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Unbounded_String <span class=\"kw3\">renames</span> To_Unbounded_String;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> A_Composite <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">record</span><br/>         Name \u00a0: Unbounded_String;<br/>         Value\u00a0: Unbounded_String;<br/>      <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"br0\">(</span>L, R\u00a0: A_Composite<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> L.<span class=\"me1\">Name</span> &lt; R.<span class=\"me1\">Name</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"&lt;\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put_Line <span class=\"br0\">(</span>C\u00a0: A_Composite<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put_Line <span class=\"br0\">(</span>To_String <span class=\"br0\">(</span>C.<span class=\"me1\">Name</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; To_String <span class=\"br0\">(</span>C.<span class=\"me1\">Value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Put_Line;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> An_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> A_Composite;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Generic_Array_Sort</span> <span class=\"br0\">(</span>Natural, A_Composite, An_Array<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Data\u00a0: An_Array\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span> =&gt; <span class=\"br0\">(</span>Name =&gt; +<span class=\"st0\">\"Joe\"</span>,    Value =&gt; +<span class=\"st0\">\"5531\"</span><span class=\"br0\">)</span>,<br/>                       <span class=\"nu0\">2</span> =&gt; <span class=\"br0\">(</span>Name =&gt; +<span class=\"st0\">\"Adam\"</span>,   Value =&gt; +<span class=\"st0\">\"2341\"</span><span class=\"br0\">)</span>,<br/>                       <span class=\"nu0\">3</span> =&gt; <span class=\"br0\">(</span>Name =&gt; +<span class=\"st0\">\"Bernie\"</span>, Value =&gt; +<span class=\"st0\">\"122\"</span><span class=\"br0\">)</span>,<br/>                       <span class=\"nu0\">4</span> =&gt; <span class=\"br0\">(</span>Name =&gt; +<span class=\"st0\">\"Walter\"</span>, Value =&gt; +<span class=\"st0\">\"1234\"</span><span class=\"br0\">)</span>,<br/>                       <span class=\"nu0\">5</span> =&gt; <span class=\"br0\">(</span>Name =&gt; +<span class=\"st0\">\"David\"</span>,  Value =&gt; +<span class=\"st0\">\"19\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Sort <span class=\"br0\">(</span>Data<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Data'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Put_Line <span class=\"br0\">(</span>Data <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Demo_Array_Sort;</pre>"}, {"lang": "ALGOL 68", "loc": 9, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> SORTSTRUCT <span class=\"sy1\">=</span> PERSON<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">&lt;</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>PERSON a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> age <span class=\"kw6\">OF</span> a <span class=\"sy1\">&lt;</span> age <span class=\"kw6\">OF</span> b<span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/sort.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> PERSON <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> age<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> person repr <span class=\"sy1\">=</span> $<span class=\"st0\">\"Name: \"</span>g<span class=\"st0\">\", Age: \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">]</span>SORTSTRUCT person <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"joe\"</span><span class=\"sy1\">,</span> 120<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span><span class=\"sy1\">,</span> 31<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"bar\"</span><span class=\"sy1\">,</span> 51<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>person repr<span class=\"sy1\">,</span> shell sort<span class=\"br0\">(</span>person<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 67, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>\u00a0<br/><span class=\"co1\">-- SORTING COMPOSITE STRUCTURES (BY PRIMARY AND N-ARY KEYS)</span><br/>\u00a0<br/><span class=\"co1\">-- List of {strKey, blnAscending} pairs -&gt; list of records -&gt; sorted list of records</span><br/><span class=\"co1\">-- sortByComparing\u00a0:: [(String, Bool)] -&gt; [Records] -&gt; [Records]</span><br/><span class=\"kw3\">on</span> sortByComparing<span class=\"br0\">(</span>keyDirections, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> recDict<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            ca<span class=\"co2\">'</span>s NSDictionary<span class=\"co2\">'</span>s dictionaryWithDictionary:x<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">set</span> dcts <span class=\"kw3\">to</span> map<span class=\"br0\">(</span>recDict, xs<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> asDescriptor<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kd<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, d<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kd<br/>            ca<span class=\"co2\">'</span>s NSSortDescriptor<span class=\"co2\">'</span>s sortDescriptorWithKey:k ascending:d selector:dcts<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:dcts<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingDescriptors:map<span class=\"br0\">(</span>asDescriptor, keyDirections<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sortByComparing<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">[</span>\u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Shanghai \"</span>, pop:<span class=\"nu0\">24.2</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Karachi \"</span>, pop:<span class=\"nu0\">23.5</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Beijing \"</span>, pop:<span class=\"nu0\">21.5</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Sao Paulo \"</span>, pop:<span class=\"nu0\">24.2</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Dhaka \"</span>, pop:<span class=\"nu0\">17.0</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Delhi \"</span>, pop:<span class=\"nu0\">16.8</span><span class=\"br0\">}</span>, \u00ac<br/>    <span class=\"br0\">{</span>city:<span class=\"st0\">\"Lagos \"</span>, pop:<span class=\"nu0\">16.1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Boolean true for ascending order, false for descending:</span><br/>\u00a0<br/>sortByComparing<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"pop\"</span>, <span class=\"kw1\">false</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"city\"</span>, <span class=\"kw1\">true</span><span class=\"br0\">}</span><span class=\"br0\">]</span>, xs<span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 24, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"re2\">start:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#ListView\"><span class=\"kw8\">ListView</span></a><span class=\"sy0\">,</span> r20 w200<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>|<span class=\"nu0\">2</span><br/>data <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/>foo<span class=\"sy0\">,</span><span class=\"nu0\">53</span><br/>joe<span class=\"sy0\">,</span><span class=\"nu0\">34</span><br/>bar<span class=\"sy0\">,</span><span class=\"nu0\">23</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> data<span class=\"sy0\">,</span> `n<br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">stringsplit</span></a><span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>  <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_Add</span></a><span class=\"br0\">(</span>row<span class=\"sy0\">,</span> row1<span class=\"sy0\">,</span> row2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_ModifyCol</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">; Auto-size columns</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> sorting by column1<br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_ModifyCol</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sort\"</span><span class=\"br0\">)</span> <span class=\"co1\">; sort by first column</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> sorting by column2<br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">LV_ModifyCol</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sort Integer\"</span><span class=\"br0\">)</span> <span class=\"co1\">; sort by second column numerically</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "Babel", "loc": 4, "block": "<pre class=\"text highlighted_source\">babel&gt; baz ([map \"foo\" 3 \"bar\" 17] [map \"foo\" 4 \"bar\" 18] [map \"foo\" 5 \"bar\" 19] [map \"foo\" 0 \"bar\" 20]) &lt;<br/>babel&gt; bop baz { &lt;- \"foo\" lumap\u00a0! -&gt; \"foo\" lumap\u00a0! lt? } lssort\u00a0! &lt;<br/>babel&gt; bop {\"foo\" lumap\u00a0!} over\u00a0! lsnum\u00a0!<br/>( 0 3 4 5 )</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTSALIB\"<br/>      sort% = FN_sortSAinit(0,0)<br/>\u00a0<br/>      DIM pair{name$, number%}<br/>      DIM array{(10)} = pair{}<br/>      FOR i% = 1 TO DIM(array{()}, 1)<br/>        READ array{(i%)}.name$, array{(i%)}.number%<br/>      NEXT<br/>\u00a0<br/>      DATA \"Eight\", 8, \"Two\", 2, \"Five\", 5, \"Nine\", 9, \"One\", 1<br/>      DATA \"Three\", 3, \"Six\", 6, \"Seven\", 7, \"Four\", 4, \"Ten\", 10<br/>\u00a0<br/>      C% = DIM(array{()}, 1)<br/>      D% = 1<br/>      CALL sort%, array{()}, array{(0)}.number%, array{(0)}.name$<br/>\u00a0<br/>      FOR i% = 1 TO DIM(array{()}, 1)<br/>        PRINT array{(i%)}.name$, array{(i%)}.number%<br/>      NEXT</pre>"}, {"lang": "Bracmat", "loc": 7, "block": "<pre class=\"text highlighted_source\">( (tab=(\"C++\",1979)+(Ada,1983)+(Ruby,1995)+(Eiffel,1985))<br/>&amp; out$\"unsorted array:\"<br/>&amp; lst$tab<br/>&amp; out$(\"sorted array:\"\u00a0!tab \\n)<br/>&amp; out$\"But tab is still unsorted:\"<br/>&amp; lst$tab<br/>);</pre>"}, {"lang": "C", "loc": 98, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> twoStringsStruct <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> key<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>value<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> sTwoStrings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> ord<span class=\"br0\">(</span> <span class=\"kw4\">char</span> v <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>dgts <span class=\"sy0\">=</span> <span class=\"st0\">\"012345679\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>cp<span class=\"sy0\">=</span>dgts<span class=\"sy0\">;</span> v <span class=\"sy0\">!=</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span> cp<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>cp<span class=\"sy0\">-</span>dgts<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cmprStrgs<span class=\"br0\">(</span><span class=\"kw4\">const</span> sTwoStrings <span class=\"sy0\">*</span>s1<span class=\"sy0\">,</span><span class=\"kw4\">const</span> sTwoStrings <span class=\"sy0\">*</span>s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p1 <span class=\"sy0\">=</span> s1<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">;</span> <br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p2 <span class=\"sy0\">=</span> s2<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>mrk1<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>mrk2<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"br0\">{</span> p1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">++;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> v1<span class=\"sy0\">,</span> v2<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1 <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2 <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">&gt;</span> s1<span class=\"sy0\">-&gt;</span>key<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p1<span class=\"sy0\">--;</span> p2<span class=\"sy0\">--;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p1 <span class=\"sy0\">!=</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p1<span class=\"sy0\">++;</span> p2<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        mrk1 <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span> mrk2 <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span><br/>        v1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            v1 <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>v1<span class=\"sy0\">+</span>ord<span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            p1<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        v2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            v2 <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>v2<span class=\"sy0\">+</span>ord<span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            p2<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v1 <span class=\"sy0\">==</span> v2<span class=\"br0\">)</span> <br/>           <span class=\"kw1\">return</span><span class=\"br0\">(</span>p2<span class=\"sy0\">-</span>mrk2<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>p1<span class=\"sy0\">-</span>mrk1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v1 <span class=\"sy0\">-</span> v2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">return</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>p1<span class=\"sy0\">=</span>s1<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">,</span> p2<span class=\"sy0\">=</span>s2<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p1 <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>p2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">*</span>p1<span class=\"sy0\">;</span> p1<span class=\"sy0\">++,</span> p2<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p1 <span class=\"sy0\">-*</span>p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> maxstrlen<span class=\"br0\">(</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> la <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> lb <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>la<span class=\"sy0\">&gt;</span>lb<span class=\"br0\">)</span><span class=\"sy0\">?</span> la <span class=\"sy0\">:</span> lb<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    sTwoStrings toBsorted<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"Beta11a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"many\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"alpha1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"This\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"Betamax\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sorted.\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"order\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta11a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"strings\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta001\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"is\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta11\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"which\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta041\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"be\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta05\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"in\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"the\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span> <span class=\"st0\">\"beta40\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"should\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define ASIZE (sizeof(toBsorted)/sizeof(sTwoStrings))</span><br/>    <span class=\"kw4\">int</span> k<span class=\"sy0\">,</span> maxlens<span class=\"br0\">[</span>ASIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> format<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    sTwoStrings <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>toBsorted<span class=\"sy0\">,</span> ASIZE<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>sTwoStrings<span class=\"br0\">)</span><span class=\"sy0\">,</span>cmprStrgs<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>cp<span class=\"sy0\">=</span>toBsorted<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> ASIZE<span class=\"sy0\">;</span> k<span class=\"sy0\">++,</span>cp<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        maxlens<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> maxstrlen<span class=\"br0\">(</span>cp<span class=\"sy0\">-&gt;</span>key<span class=\"sy0\">,</span> cp<span class=\"sy0\">-&gt;</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>format<span class=\"sy0\">,</span><span class=\"st0\">\"\u00a0%%-%ds\"</span><span class=\"sy0\">,</span> maxlens<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>format<span class=\"sy0\">,</span> toBsorted<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> ASIZE<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>format<span class=\"sy0\">,</span><span class=\"st0\">\"\u00a0%%-%ds\"</span><span class=\"sy0\">,</span> maxlens<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>format<span class=\"sy0\">,</span> toBsorted<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre>g++ -std=c++11 sort.cpp\n</pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span>        <br/>    <span class=\"kw4\">struct</span> Entry<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> Entry<span class=\"br0\">(</span><span class=\"kw4\">string</span> name, <span class=\"kw4\">double</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Name <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span> <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> Elements <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Entry<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Krypton\"</span>, <span class=\"nu0\">83.798</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Beryllium\"</span>, <span class=\"nu0\">9.012182</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Silicon\"</span>, <span class=\"nu0\">28.0855</span><span class=\"br0\">)</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Cobalt\"</span>, <span class=\"nu0\">58.933195</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Selenium\"</span>, <span class=\"nu0\">78.96</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Entry<span class=\"br0\">(</span><span class=\"st0\">\"Germanium\"</span>, <span class=\"nu0\">72.64</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> sortedElements <span class=\"sy0\">=</span> Elements<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Entry e <span class=\"kw1\">in</span> sortedElements<span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,-11}{1}\"</span>, e<span class=\"sy0\">.</span><span class=\"me1\">Name</span>, e<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"co1\">;; Gathered with Google Squared</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">*</span>langs<span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Clojure\"</span> <span class=\"nu0\">2007</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Common Lisp\"</span> <span class=\"nu0\">1984</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Java\"</span> <span class=\"nu0\">1995</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Haskell\"</span> <span class=\"nu0\">1990</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">[</span><span class=\"st0\">\"Lisp\"</span> <span class=\"nu0\">1958</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Scheme\"</span> <span class=\"nu0\">1975</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> second <span class=\"sy0\">*</span>langs<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"co1\">; using a keyfn</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"Lisp\"</span> <span class=\"nu0\">1958</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Scheme\"</span> <span class=\"nu0\">1975</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Common Lisp\"</span> <span class=\"nu0\">1984</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Haskell\"</span> <span class=\"nu0\">1990</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Java\"</span> <span class=\"nu0\">1995</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"st0\">\"Clojure\"</span> <span class=\"nu0\">2007</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>defparameter *test-scores* '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"texas\"</span> <span class=\"nu0\">68.9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"ohio\"</span> <span class=\"nu0\">87.8</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"california\"</span> <span class=\"nu0\">76.2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"new york\"</span> <span class=\"nu0\">88.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>*TEST-SCORES*</pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Pair <span class=\"br0\">{</span> <span class=\"kw4\">string</span> name<span class=\"sy0\">,</span> value<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Pair<span class=\"br0\">[</span><span class=\"br0\">]</span> pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st0\">\"Joe\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"5531\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"st0\">\"Adam\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"2341\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"122\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"st0\">\"Walter\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1234\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"st0\">\"David\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"19\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    pairs.<span class=\"me1\">schwartzSort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">name</span> <span class=\"br0\">}</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 33, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SortCompositeStructures<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">,</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">,</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Defaults</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TStructurePair <span class=\"sy3\">=</span> <span class=\"kw1\">record</span><br/>    name<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>    value<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span><span class=\"kw1\">const</span> aName<span class=\"sy1\">,</span> aValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TStructurePair<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"kw1\">const</span> aName<span class=\"sy1\">,</span> aValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  name <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aName<span class=\"sy1\">;</span><br/>  value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lArray<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> TStructurePair<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>lArray<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  lArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStructurePair<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'dog'</span><span class=\"sy1\">,</span> <span class=\"st0\">'rex'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  lArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStructurePair<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'cat'</span><span class=\"sy1\">,</span> <span class=\"st0\">'simba'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  lArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStructurePair<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'horse'</span><span class=\"sy1\">,</span> <span class=\"st0\">'trigger'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TArray<span class=\"sy1\">.</span><span class=\"me1\">Sort</span>&lt;TStructurePair&gt;<span class=\"br0\">(</span>lArray <span class=\"sy1\">,</span> TDelegatedComparer&lt;TStructurePair&gt;<span class=\"sy1\">.</span><span class=\"me1\">Construct</span><span class=\"br0\">(</span><br/>  <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"kw1\">const</span> Left<span class=\"sy1\">,</span> Right<span class=\"sy1\">:</span> TStructurePair<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">CompareText</span><span class=\"br0\">(</span>Left<span class=\"sy1\">.</span><span class=\"me1\">Name</span><span class=\"sy1\">,</span> Right<span class=\"sy1\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 14, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> compareBy<span class=\"br0\">(</span>keyfn<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># This ought to be in the standard library</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> comparer<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return keyfn<span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">op__cmp</span><span class=\"br0\">(</span>keyfn<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> x <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Joe\"</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Bill\"</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Alice\"</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Harry\"</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span>x.<span class=\"me1\">sort</span><span class=\"br0\">(</span>compareBy<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">[</span>name<span class=\"sy0\">,</span>_<span class=\"br0\">]</span> <span class=\"br0\">{</span> name <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 13, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; sorting (name value) by name - Ignoring case</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>name a<span class=\"br0\">)</span> <span class=\"br0\">(</span>first a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span><span class=\"br0\">(</span> sort<span class=\"sy0\">-</span>proc a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>ci<span class=\"sy0\">&lt;</span>? <span class=\"br0\">(</span>name a<span class=\"br0\">)</span> <span class=\"br0\">(</span>name b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> people <br/>   '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"\ud83d\ude0e\"</span> <span class=\"sy0\">-</span><span class=\"nu0\">42</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"albert\"</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Simone\"</span> <span class=\"nu0\">44</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Antoinette\"</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"elvis\"</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"\ud83d\ude03\"</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort sort<span class=\"sy0\">-</span>proc people<span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"albert\"</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Antoinette\"</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"elvis\"</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"Simone\"</span> <span class=\"nu0\">44</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"\ud83d\ude03\"</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"\ud83d\ude0e\"</span> <span class=\"sy0\">-</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 20, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var elements\u00a0:= (<br/>            KeyValue new key:\"Krypton\" value:83.798r,<br/>            KeyValue new key:\"Beryllium\" value:9.012182r,<br/>            KeyValue new key:\"Silicon\" value:28.0855r,<br/>            KeyValue new key:\"Cobalt\" value:58.933195r,<br/>            KeyValue new key:\"Selenium\" value:78.96r,<br/>            KeyValue new key:\"Germanium\" value:72.64r).<br/>\u00a0<br/>    var sorted\u00a0:= elements sort(:former:later)( former key &lt; later key ).<br/>\u00a0<br/>    sorted forEach(:element)<br/>    [<br/>         console printLine(element key,\" - \",element).<br/>    ].<br/>].</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">defmodule Person do<br/>  defstruct name: \"\", value: 0<br/>end<br/>\u00a0<br/>list = [struct(Person, [name: \"Joe\", value: 3]),<br/>        struct(Person, [name: \"Bill\", value: 4]),<br/>        struct(Person, [name: \"Alice\", value: 20]),<br/>        struct(Person, [name: \"Harry\", value: 3])]<br/>\u00a0<br/>Enum.sort(list) |&gt; Enum.each(fn x -&gt; IO.inspect x end)<br/>IO.puts \"\"<br/>Enum.sort_by(list, &amp;(&amp;1.value)) |&gt; Enum.each(&amp;IO.inspect &amp;1)</pre>"}, {"lang": "Erlang", "loc": 20, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2006</span><span class=\"sy1\">,</span><span class=\"nu0\">2007</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Ducks\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2000</span><span class=\"sy1\">,</span><span class=\"nu0\">2001</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Avalanche\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2002</span><span class=\"sy1\">,</span><span class=\"nu0\">2003</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2001</span><span class=\"sy1\">,</span><span class=\"nu0\">2002</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2003</span><span class=\"sy1\">,</span><span class=\"nu0\">2004</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Lightning\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2004</span><span class=\"sy1\">,</span><span class=\"nu0\">2005</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"N/A: lockout\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2005</span><span class=\"sy1\">,</span><span class=\"nu0\">2006</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Hurricanes\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1999</span><span class=\"sy1\">,</span><span class=\"nu0\">2000</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2007</span><span class=\"sy1\">,</span><span class=\"nu0\">2008</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>               <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2008</span><span class=\"sy1\">,</span><span class=\"nu0\">2009</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Penguins\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1999</span><span class=\"sy1\">,</span><span class=\"nu0\">2000</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2000</span><span class=\"sy1\">,</span><span class=\"nu0\">2001</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Avalanche\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2001</span><span class=\"sy1\">,</span><span class=\"nu0\">2002</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2002</span><span class=\"sy1\">,</span><span class=\"nu0\">2003</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2003</span><span class=\"sy1\">,</span><span class=\"nu0\">2004</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Lightning\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2004</span><span class=\"sy1\">,</span><span class=\"nu0\">2005</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"N/A: lockout\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2005</span><span class=\"sy1\">,</span><span class=\"nu0\">2006</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Hurricanes\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2006</span><span class=\"sy1\">,</span><span class=\"nu0\">2007</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Ducks\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2007</span><span class=\"sy1\">,</span><span class=\"nu0\">2008</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2008</span><span class=\"sy1\">,</span><span class=\"nu0\">2009</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"st0\">\"Penguins\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "Euphoria", "loc": 15, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> sort.e<br/><span class=\"kw1\">include</span> misc.e<br/>\u00a0<br/><span class=\"kw1\">constant</span> NAME <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">function</span> compare_names<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>NAME<span class=\"br0\">]</span><span class=\"sy2\">,</span>b<span class=\"br0\">[</span>NAME<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> s<br/>s <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"st0\">\"grass\"</span><span class=\"sy2\">,</span>  <span class=\"st0\">\"green\"</span> <span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>      <span class=\"br0\">{</span> <span class=\"st0\">\"snow\"</span><span class=\"sy2\">,</span>   <span class=\"st0\">\"white\"</span> <span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>      <span class=\"br0\">{</span> <span class=\"st0\">\"sky\"</span><span class=\"sy2\">,</span>    <span class=\"st0\">\"blue\"</span>  <span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>      <span class=\"br0\">{</span> <span class=\"st0\">\"cherry\"</span><span class=\"sy2\">,</span> <span class=\"st0\">\"red\"</span>   <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>pretty_print<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>custom_sort<span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"compare_names\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span>s<span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">TUPLE: example-pair name value\u00a0;<br/>\u00a0<br/>: sort-by-name ( seq -- seq' ) [ [ name&gt;&gt; ] compare ] sort\u00a0;</pre>"}, {"lang": "Fantom", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Pair // create a composite structure<br/>{<br/>  Str name<br/>  Str value<br/>  new make (Str name, Str value)<br/>  {<br/>    this.name = name<br/>    this.value = value<br/>  }<br/>\u00a0<br/>  override Str toStr () <br/>  {<br/>    \"(Pair: $name, $value)\"<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    // samples<br/>    pairs\u00a0:= [Pair(\"Fantom\", \"OO\"), Pair(\"Clojure\", \"Functional\"), Pair(\"Java\", \"OO\") ]<br/>\u00a0<br/>    sorted\u00a0:= pairs.dup // make a copy of original list <br/>    sorted.sort |Pair a, Pair b -&gt; Int|  // sort using custom comparator<br/>    {<br/>      a.name &lt;=&gt; b.name<br/>    }<br/>    echo (\"Started with\u00a0: \" + pairs.join(\" \"))<br/>    echo (\"Finished with: \" + sorted.join(\" \"))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 35, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> EXAMPLE<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span>  <br/>\u00a0<br/>  <span class=\"kw3\">TYPE</span> Pair<br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> Pair<br/>\u00a0<br/>  <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>Pair<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rcc</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, temp<br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Black\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Brown\"</span>, <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Red\"</span>, <span class=\"st0\">\"2\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Orange\"</span>, <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Yellow\"</span>, <span class=\"st0\">\"4\"</span><span class=\"br0\">)</span> <br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Green\"</span>, <span class=\"st0\">\"5\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Blue\"</span>, <span class=\"st0\">\"6\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Violet\"</span>, <span class=\"st0\">\"7\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"Grey\"</span>, <span class=\"st0\">\"8\"</span><span class=\"br0\">)</span><br/>  rcc<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"White\"</span>, <span class=\"st0\">\"9\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">SIZE</span><span class=\"br0\">(</span>rcc<span class=\"br0\">)</span><br/>     j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>     temp <span class=\"sy0\">=</span> rcc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j&gt;<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> <span class=\"kw4\">LGT</span><span class=\"br0\">(</span>rcc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"kw1\">name</span>, temp<span class=\"sy0\">%</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           rcc<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> rcc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>           j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>     rcc<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(2A6)\"</span><span class=\"br0\">)</span> rcc<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> EXAMPLE</pre>"}, {"lang": "FreeBASIC", "loc": 53, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> Pair<br/>  <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> <span class=\"kw1\">name</span>, value<br/>  <span class=\"kw1\">Declare</span> Constructor<span class=\"br0\">(</span>name_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, value_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Declare</span> Operator Cast<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/>Constructor Pair<span class=\"br0\">(</span>name_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, value_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">name</span>  = name_<br/>  value = value_<br/><span class=\"kw1\">End</span> Constructor<br/>\u00a0<br/>Operator Pair.<span class=\"me1\">Cast</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Return</span> <span class=\"st0\">\"[\"</span> + <span class=\"kw1\">name</span> + <span class=\"st0\">\", \"</span> + value + <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">End</span> Operator<br/>\u00a0<br/><span class=\"co1\">' selection sort, quick enough for sorting small number of pairs</span><br/><span class=\"kw1\">Sub</span> sortPairsByName<span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Pair<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, m<br/>  <span class=\"kw1\">For</span> i = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    m = i<br/>    <span class=\"kw1\">For</span> j = i + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> p<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"kw1\">name</span> &lt; p<span class=\"br0\">(</span>m<span class=\"br0\">)</span>.<span class=\"kw1\">name</span> <span class=\"kw1\">Then</span> m = j<br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">If</span> m &lt;&gt; i <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Pair pairs<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> = _<br/><span class=\"br0\">{</span> _<br/>  Pair<span class=\"br0\">(</span><span class=\"st0\">\"grass\"</span>, <span class=\"st0\">\"green\"</span><span class=\"br0\">)</span>, _ <br/>  Pair<span class=\"br0\">(</span><span class=\"st0\">\"snow\"</span>, <span class=\"st0\">\"white\"</span> <span class=\"br0\">)</span>, _<br/>  Pair<span class=\"br0\">(</span><span class=\"st0\">\"sky\"</span>, <span class=\"st0\">\"blue\"</span><span class=\"br0\">)</span>,    _<br/>  Pair<span class=\"br0\">(</span><span class=\"st0\">\"cherry\"</span>, <span class=\"st0\">\"red\"</span><span class=\"br0\">)</span>   _<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Before sorting\u00a0:\"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; pairs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>sortPairsByName pairs<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"After sorting by name\u00a0:\"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; pairs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> persons <span class=\"sy0\">=</span> <span class=\"br0\">[</span>| <span class=\"br0\">(</span><span class=\"st0\">\"Joe\"</span>, <span class=\"nu0\">120</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span>, <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"bar\"</span>, <span class=\"nu0\">51</span><span class=\"br0\">)</span> |<span class=\"br0\">]</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sortInPlaceBy</span> <span class=\"kw3\">fst</span> persons<br/>printfn <span class=\"st0\">\"%A\"</span> persons</pre>"}, {"lang": "Go", "loc": 29, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pair <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    name<span class=\"sy1\">,</span> value <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> csArray <span class=\"sy1\">[]</span>pair<br/>\u00a0<br/><span class=\"co1\">// three methods satisfy sort.Interface</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a csArray<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>name &lt; a<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>name <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a csArray<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a csArray<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> x <span class=\"sy2\">=</span> csArray<span class=\"sy1\">{</span><br/>    pair<span class=\"sy1\">{</span><span class=\"st0\">\"joe\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"120\"</span><span class=\"sy1\">},</span><br/>    pair<span class=\"sy1\">{</span><span class=\"st0\">\"foo\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"31\"</span><span class=\"sy1\">},</span><br/>    pair<span class=\"sy1\">{</span><span class=\"st0\">\"bar\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"251\"</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> x <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%5s:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> p<span class=\"sy3\">.</span><span class=\"me1\">name</span><span class=\"sy1\">,</span> p<span class=\"sy3\">.</span><span class=\"me1\">value</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 25, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Holiday <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> date<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> name<br/>    Holiday<span class=\"br0\">(</span>dateStr, name<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">date</span> <span class=\"sy0\">=</span> format.<span class=\"me1\">parse</span><span class=\"br0\">(</span>dateStr<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"${format.format date}: ${name}\"</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> format <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> java.<span class=\"me1\">text</span>.<a href=\"http://www.google.de/search?as_q=SimpleDateFormat&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">SimpleDateFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"yyyy-MM-dd\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> holidays <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-12-25\"</span>, <span class=\"st0\">\"Christmas Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-04-22\"</span>, <span class=\"st0\">\"Earth Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-09-07\"</span>, <span class=\"st0\">\"Labor Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-07-04\"</span>, <span class=\"st0\">\"Independence Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-10-31\"</span>, <span class=\"st0\">\"Halloween\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-05-25\"</span>, <span class=\"st0\">\"Memorial Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-03-14\"</span>, <span class=\"st0\">\"PI Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-01-01\"</span>, <span class=\"st0\">\"New Year's Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-12-31\"</span>, <span class=\"st0\">\"New Year's Eve\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-11-26\"</span>, <span class=\"st0\">\"Thanksgiving\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-02-14\"</span>, <span class=\"st0\">\"St. Valentine's Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-03-17\"</span>, <span class=\"st0\">\"St. Patrick's Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-01-19\"</span>, <span class=\"st0\">\"Martin Luther King Day\"</span><span class=\"br0\">)</span>,<br/>                 <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Holiday<span class=\"br0\">(</span><span class=\"st0\">\"2009-02-16\"</span>, <span class=\"st0\">\"President's Day\"</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0<br/>holidays.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a> <span class=\"br0\">{</span> x, y <span class=\"sy0\">-&gt;</span> x.<span class=\"me1\">date</span> <span class=\"sy0\">&lt;=&gt;</span> y.<span class=\"me1\">date</span> <span class=\"br0\">}</span><br/>holidays.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Person <span class=\"sy0\">=</span><br/>  P <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Person <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>P name val<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Person \"</span> <span class=\"sy0\">++</span> name <span class=\"sy0\">++</span> <span class=\"st0\">\" with value \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> val<br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> Person <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>P a <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>P b <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> a b<br/>\u00a0<br/>pVal <span class=\"sy0\">::</span> Person <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>pVal <span class=\"br0\">(</span>P <span class=\"sy0\">_</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>\u00a0<br/>people <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Person<span class=\"br0\">]</span><br/>people <span class=\"sy0\">=</span> <span class=\"br0\">[</span>P <span class=\"st0\">\"Joe\"</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> P <span class=\"st0\">\"Bob\"</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> P <span class=\"st0\">\"Alice\"</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> P <span class=\"st0\">\"Harry\"</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> sort people<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> sortBy <span class=\"br0\">(</span>on <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> pVal<span class=\"br0\">)</span> people</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">record</span> star<span class=\"br0\">(</span><span class=\"kw4\">name</span><span class=\"sy1\">,</span>HIP<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>Ori <span class=\"sy1\">:=</span> <span class=\"br0\">[</span> star<span class=\"br0\">(</span><span class=\"st0\">\"Betelgeuse\"</span><span class=\"sy1\">,</span><span class=\"nu0\">27989</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         star<span class=\"br0\">(</span><span class=\"st0\">\"Rigel\"</span><span class=\"sy1\">,</span><span class=\"nu0\">24436</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         star<span class=\"br0\">(</span><span class=\"st0\">\"Belatrix\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">25336</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         star<span class=\"br0\">(</span><span class=\"st0\">\"Alnilam\"</span><span class=\"sy1\">,</span><span class=\"nu0\">26311</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Some Orion stars by HIP#\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">sortf</span><span class=\"br0\">(</span>Ori<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"kw4\">name</span><span class=\"sy1\">,</span> <span class=\"st0\">\" HIP \"</span><span class=\"sy1\">,</span>x<span class=\"sy1\">.</span><span class=\"me1\">HIP</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 17, "block": "<pre class=\"j highlighted_source\">   names =:\u00a0;: <span class=\"st_h\">'Perlis Wilkes Hamming Minsky Wilkinson McCarthy'</span><br/>   values=:\u00a0;: <span class=\"st_h\">'Alan Maurice Richard Marvin James John'</span><br/>   pairs =: values ,. names<br/>   pairs /: names<br/>+-------+---------+<br/>|Richard|Hamming  |<br/>+-------+---------+<br/>|John   |McCarthy |<br/>+-------+---------+<br/>|Marvin |Minsky   |<br/>+-------+---------+<br/>|Alan   |Perlis   |<br/>+-------+---------+<br/>|Maurice|Wilkes   |<br/>+-------+---------+<br/>|James  |Wilkinson|<br/>+-------+---------+</pre>"}, {"lang": "Java", "loc": 34, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Comparator</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SortComp <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Pair <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> value<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> Pair<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> n, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            name <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            value <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Pair<span class=\"br0\">[</span><span class=\"br0\">]</span> pairs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"06-07\"</span>, <span class=\"st0\">\"Ducks\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"00-01\"</span>, <span class=\"st0\">\"Avalanche\"</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"02-03\"</span>, <span class=\"st0\">\"Devils\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"01-02\"</span>, <span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"03-04\"</span>, <span class=\"st0\">\"Lightning\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"04-05\"</span>, <span class=\"st0\">\"lockout\"</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"05-06\"</span>, <span class=\"st0\">\"Hurricanes\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"99-00\"</span>, <span class=\"st0\">\"Devils\"</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"07-08\"</span>, <span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span><span class=\"st0\">\"08-09\"</span>, <span class=\"st0\">\"Penguins\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        sortByName<span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Pair p <span class=\"sy0\">:</span> pairs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>p.<span class=\"me1\">name</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> p.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> sortByName<span class=\"br0\">(</span>Pair<span class=\"br0\">[</span><span class=\"br0\">]</span> pairs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>pairs, <span class=\"kw1\">new</span> Comparator<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compare<span class=\"br0\">(</span>Pair p1, Pair p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> p1.<span class=\"me1\">name</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>p2.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> arr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>  <span class=\"br0\">{</span>id<span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> value<span class=\"sy0\">:</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span>id<span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> value<span class=\"sy0\">:</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span>id<span class=\"sy0\">:</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> value<span class=\"sy0\">:</span> <span class=\"st0\">\"baz\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span>id<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> value<span class=\"sy0\">:</span> <span class=\"nu0\">42</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span>id<span class=\"sy0\">:</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> something<span class=\"sy0\">:</span> <span class=\"st0\">\"another string\"</span><span class=\"br0\">}</span> <span class=\"co1\">// Works with any object declaring 'id' as a number.</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>arr <span class=\"sy0\">=</span> arr.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a.<span class=\"me1\">id</span> <span class=\"sy0\">-</span> b.<span class=\"me1\">id</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Sort with comparator checking the id.</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">def example:<br/> [<br/>  {\"name\": \"Joe\", \"value\": 3},<br/>  {\"name\": \"Bill\", \"value\": 4},<br/>  {\"name\": \"Alice\", \"value\": 20},<br/>  {\"name\": \"Harry\", \"value\": 3}<br/> ];</pre>"}, {"lang": "Julia", "loc": 17, "block": "<pre class=\"text highlighted_source\">lst = Pair[Pair(\"gold\", \"shiny\"),<br/>           Pair(\"neon\", \"inert\"),<br/>           Pair(\"sulphur\", \"yellow\"),<br/>           Pair(\"iron\", \"magnetic\"),<br/>           Pair(\"zebra\", \"striped\"),<br/>           Pair(\"star\", \"brilliant\"),<br/>           Pair(\"apple\", \"tasty\"),<br/>           Pair(\"ruby\", \"red\"),<br/>           Pair(\"dice\", \"random\"),<br/>           Pair(\"coffee\", \"stimulating\"),<br/>           Pair(\"book\", \"interesting\")]<br/>\u00a0<br/>println(\"The original list: \\n - \", join(lst, \"\\n - \"))<br/>sort!(lst; by=first)<br/>println(\"\\nThe list, sorted by name: \\n - \", join(lst, \"\\n - \"))<br/>sort!(lst; by=last)<br/>println(\"\\nThe list, sorted by value: \\n - \", join(lst, \"\\n - \"))</pre>"}, {"lang": "Kotlin", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Employee<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> category<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Employee<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Employee<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">name</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other.<span class=\"me1\">name</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> employees <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"David\"</span>, <span class=\"st0\">\"Manager\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Alice\"</span>, <span class=\"st0\">\"Sales\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Joanna\"</span>, <span class=\"st0\">\"Director\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Henry\"</span>, <span class=\"st0\">\"Admin\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim\"</span>, <span class=\"st0\">\"Sales\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Juan\"</span>, <span class=\"st0\">\"Admin\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    employees.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>name, category<span class=\"br0\">)</span> in employees<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${name.padEnd(6)}\u00a0: $category\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 20, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>N <span class=\"sy0\">=</span><span class=\"nu0\">20</span><br/><span class=\"kw1\">dim</span> IntArray$<span class=\"br0\">(</span> N<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Original order\"</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    <span class=\"kw1\">name</span>$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> <span class=\"st0\">\"SortArrayOfCompositeStructures\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">25</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    IntArray$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"kw1\">name</span>$<br/>    <span class=\"kw1\">print</span> <span class=\"kw1\">name</span>$<span class=\"sy0\">,</span><br/>    t$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    IntArray$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>t$<br/>    <span class=\"kw1\">print</span> t$<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">sort</span> IntArray$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Sorted by name\"</span>  <span class=\"co1\">' (  we specified column 1)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    <span class=\"kw1\">print</span> IntArray$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> IntArray$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> sorting<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span> <br/>    <span class=\"kw1\">return</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/>tab <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span><span class=\"st0\">\"C++\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1979</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Ada\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1983</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Ruby\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1995</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"Eiffel\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1985</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span> tab<span class=\"sy0\">,</span> sorting <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span> tab <span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 97, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Flush ' empty stack of values<br/>      Class Quick {<br/>      Private:<br/>            partition=lambda-&gt; {<br/>                  Read &amp;A(), p, r\u00a0: i = p-1\u00a0: x=A(r)<br/>                  For j=p to r-1 {If .LE(A(j), x) Then i++:Swap A(i),A(j)<br/>                  }\u00a0: Swap A(i+1), A(r)\u00a0:  Push  i+2, i <br/>            }<br/>      Public:<br/>            LE=Lambda-&gt;Number&lt;=Number<br/>            Module ForStrings {<br/>                  .partition&lt;=lambda-&gt; {<br/>                        Read &amp;a$(), p, r\u00a0: i = p-1\u00a0: x$=a$(r)<br/>                        For j=p to r-1 {If a$(j)&lt;= x$ Then i++:Swap a$(i),a$(j)<br/>                        }\u00a0: Swap a$(i+1), a$(r)\u00a0: Push i+2, i<br/>                  }<br/>            }<br/>            Function quicksort {<br/>                 Read ref$<br/>                 {<br/>                         loop\u00a0: If Stackitem() &gt;= Stackitem(2) Then Drop 2\u00a0: if  empty then {Break} else continue<br/>                         over 2,2\u00a0: call .partition(ref$)\u00a0:shift 3 <br/>                 }<br/>            }<br/>      }<br/>      Quick=Quick()<br/>      Quick.LE=lambda (a, b)-&gt;{<br/>            =a.name$&lt;=b.name$<br/>      }<br/>      Data \"Joe\",   5531<br/>      Data \"Adam\", 2341<br/>      Data \"Bernie\", 122<br/>      Data \"Walter\", 1234<br/>      Data \"David\",  19<br/>      Class pair {<br/>            name$<br/>            value_<br/>      }<br/>      Document Doc$={Unsorted Pairs:<br/>      }<br/>      Dim A(1 to 5)=pair()<br/>      For i=1 to 5 {<br/>            For A(i) {<br/>                  Read .name$, .value_<br/>                  Doc$=Format$(\"{0}, {1}\", .name$, .value_)+{<br/>                  }<br/>            }<br/>      }<br/>\u00a0<br/>      Call Quick.quicksort(&amp;A(),1, 5)<br/>      Doc$={<br/>            Sorted Pairs<br/>            }<br/>      k=Each(A())<br/>      While k {<br/>            getone=array(k)<br/>            For getone {<br/>                              Doc$=Format$(\"{0}, {1}\", .name$, .value_)+{<br/>                              }<br/>            }<br/>      }<br/>      Report Doc$<br/>      Clipboard Doc$<br/>}<br/>Checkit<br/>module Checkit2 {<br/>      Inventory Alfa=\"Joe\":=5531, \"Adam\":=2341, \"Bernie\":=122<br/>      Append Alfa, \"Walter\":=1234, \"David\":=19<br/>      Sort Alfa<br/>      k=Each(Alfa)<br/>      While k {<br/>            Print eval$(Alfa, k^), Eval(k)<br/>      }<br/>}<br/>Checkit2<br/>module Checkit3 {<br/>      class any {<br/>             x<br/>            class:<br/>            Module any (.x) {}<br/>      }<br/>      Inventory Alfa=\"Joe\":=any(5531), \"Adam\":=any(2341), \"Bernie\":=any(122)<br/>      Append Alfa, \"Walter\":=any(1234), \"David\":=any(19)<br/>      Sort Alfa<br/>      k=Each(Alfa)<br/>      While k {<br/>            \\\\ k^ is the index number by k cursor<br/>            \\\\ Alfa(\"joe\") return object<br/>            \\\\ Alfa(0!) return first element object<br/>            \\\\ Alfa(k^!) return (k^) objext<br/>            Print eval$(Alfa, k^),  Alfa(k^!).x<br/>      }<br/>}<br/>Checkit3<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 13, "block": "<pre class=\"text highlighted_source\">events = {{\"2009-12-25\", \"Christmas Day\"}, {\"2009-04-22\", <br/>    \"Earth Day\"}, {\"2009-09-07\", \"Labor Day\"}, {\"2009-07-04\", <br/>    \"Independence Day\"}, {\"2009-10-31\", \"Halloween\"}, {\"2009-05-25\", <br/>    \"Memorial Day\"}, {\"2009-03-14\", \"PI Day\"}, {\"2009-01-01\", <br/>    \"New Year's Day\"}, {\"2009-12-31\", <br/>    \"New Year's Eve\"}, {\"2009-11-26\", \"Thanksgiving\"}, {\"2009-02-14\", <br/>    \"St. Valentine's Day\"}, {\"2009-03-17\", <br/>    \"St. Patrick's Day\"}, {\"2009-01-19\", <br/>    \"Martin Luther King Day\"}, {\"2009-02-16\", \"President's Day\"}};<br/>date = 1;<br/>name = 2;<br/>SortBy[events, #[[name]] &amp;] // Grid<br/>SortBy[events, #[[date]] &amp;] // Grid</pre>"}, {"lang": "NetRexx", "loc": 55, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RSortCompsiteStructure <span class=\"kw2\">public</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    places = <span class=\"br0\">[</span> -<br/>      PairBean<span class=\"br0\">(</span><span class=\"st0\">'London'</span>,     <span class=\"st0\">'UK'</span><span class=\"br0\">)</span>, PairBean<span class=\"br0\">(</span><span class=\"st0\">'New York'</span>,   <span class=\"st0\">'US'</span><span class=\"br0\">)</span> -<br/>    , PairBean<span class=\"br0\">(</span><span class=\"st0\">'Boston'</span>,     <span class=\"st0\">'US'</span><span class=\"br0\">)</span>, PairBean<span class=\"br0\">(</span><span class=\"st0\">'Washington'</span>, <span class=\"st0\">'US'</span><span class=\"br0\">)</span> -<br/>    , PairBean<span class=\"br0\">(</span><span class=\"st0\">'Washington'</span>, <span class=\"st0\">'UK'</span><span class=\"br0\">)</span>, PairBean<span class=\"br0\">(</span><span class=\"st0\">\"Birmingham\"</span>, <span class=\"st0\">'US'</span><span class=\"br0\">)</span> -<br/>    , PairBean<span class=\"br0\">(</span><span class=\"st0\">\"Birmingham\"</span>, <span class=\"st0\">'UK'</span><span class=\"br0\">)</span>, PairBean<span class=\"br0\">(</span><span class=\"st0\">\"Boston\"</span>,     <span class=\"st0\">'UK'</span><span class=\"br0\">)</span> -<br/>    <span class=\"br0\">]</span><br/>    <span class=\"kw1\">say</span> displayArray<span class=\"br0\">(</span>places<span class=\"br0\">)</span><br/>    Arrays.<span class=\"me0\">sort</span><span class=\"br0\">(</span>places, PairComparator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> displayArray<span class=\"br0\">(</span>places<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  method displayArray<span class=\"br0\">(</span>harry = PairBean<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">constant</span><br/>    disp = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">loop</span> elmt over harry<br/>      disp = disp<span class=\"st0\">','</span>elmt<br/>      <span class=\"kw3\">end</span> elmt<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'['</span>disp.<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">']'</span> <span class=\"co1\">-- trim leading comma</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RSortCompsiteStructure.<span class=\"me0\">PairBean</span><br/>  <span class=\"kw1\">properties</span> indirect<br/>    name<br/>    value<br/>  method PairBean<span class=\"br0\">(</span>name_, value_<span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    setName<span class=\"br0\">(</span>name_<span class=\"br0\">)</span><br/>    setValue<span class=\"br0\">(</span>value_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>  method <span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> String<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'('</span>getName<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"st0\">','</span>getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"st0\">')'</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RSortCompsiteStructure.<span class=\"me0\">PairComparator</span> <span class=\"kw2\">implements</span> Comparator<br/>  method <span class=\"kw6\">compare</span><span class=\"br0\">(</span>lft = Object, rgt = Object<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> int<br/>    cRes = int<br/>    <span class=\"kw1\">if</span> lft <span class=\"sy0\">&lt;</span>= RSortCompsiteStructure.<span class=\"me0\">PairBean</span>, rgt <span class=\"sy0\">&lt;</span>= RSortCompsiteStructure.<span class=\"me0\">PairBean</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      lName = String <span class=\"br0\">(</span>RSortCompsiteStructure.<span class=\"me0\">PairBean</span> lft<span class=\"br0\">)</span>.<span class=\"me0\">getName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      rName = String <span class=\"br0\">(</span>RSortCompsiteStructure.<span class=\"me0\">PairBean</span> rgt<span class=\"br0\">)</span>.<span class=\"me0\">getName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      cRes = lName.<span class=\"me0\">compareTo</span><span class=\"br0\">(</span>rName<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> cRes == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        lVal = String <span class=\"br0\">(</span>RSortCompsiteStructure.<span class=\"me0\">PairBean</span> lft<span class=\"br0\">)</span>.<span class=\"me0\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        rVal = String <span class=\"br0\">(</span>RSortCompsiteStructure.<span class=\"me0\">PairBean</span> rgt<span class=\"br0\">)</span>.<span class=\"me0\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        cRes = lVal.<span class=\"me0\">compareTo</span><span class=\"br0\">(</span>rVal<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">'Arguments must be of type PairBean'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> cRes<br/>\u00a0</pre>"}, {"lang": "MAXScript", "loc": 13, "block": "<pre class=\"text highlighted_source\">fn keyCmp comp1 comp2 =<br/>(<br/>    case of<br/>    (<br/>        (comp1[1] &gt; comp2[1]):\t1<br/>        (comp1[1] &lt; comp2[1]):\t-1<br/>        default:\t\t0<br/>    )<br/>)<br/>\u00a0<br/>people = #(#(\"joe\", 39), #(\"dave\", 37), #(\"bob\", 42))<br/>qsort people keyCmp<br/>print people</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">import algorithm, future<br/>\u00a0<br/>var people = @{\"joe\": 120, \"foo\": 31, \"bar\": 51}<br/>sort(people, (x,y) =&gt; cmp(x[0], y[0]))<br/>echo people</pre>"}, {"lang": "Objeck", "loc": 46, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Entry implements Compare <span class=\"br0\">{</span><br/>  @name <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">;</span><br/>  @value <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>name <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> value <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @name <span class=\"sy0\">:=</span> name<span class=\"sy0\">;</span><br/>    @value <span class=\"sy0\">:=</span> value<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Compare<span class=\"br0\">(</span>rhs <span class=\"sy0\">:</span> Compare<span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @name<span class=\"sy0\">-&gt;</span><span class=\"me1\">Compare</span><span class=\"br0\">(</span>rhs<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Entry<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">GetName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetName<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @name<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> HashID<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @name<span class=\"sy0\">-&gt;</span><span class=\"me1\">HashID</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"name={<a class=\"__cf_email__\" data-cfemail=\"3f1b7f515e525a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}, value={<a class=\"__cf_email__\" data-cfemail=\"1a3e5a6c7b766f7f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Sorter <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    entries <span class=\"sy0\">:=</span> CompareVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Krypton\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">83.798</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Beryllium\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">9.012182</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Silicon\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">28.0855</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Cobalt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">58.933195</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Selenium\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">78.96</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>Entry<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"st0\">\"Germanium\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">72.64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> entries<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      entries<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Entry<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 55, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> Pair <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>name;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>value;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>pairWithName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n value<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n value<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>name;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>value;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Pair<br/><span class=\"sy0\">+</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>pairWithName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n value<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>self alloc<span class=\"br0\">]</span> initWithName<span class=\"sy0\">:</span>n value<span class=\"sy0\">:</span>v<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithName<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>n value<span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>v <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        name <span class=\"sy0\">=</span> n;<br/>        value <span class=\"sy0\">=</span> v;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>name <span class=\"br0\">{</span> <span class=\"kw1\">return</span> name; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>value <span class=\"br0\">{</span> <span class=\"kw1\">return</span> value; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>description <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"&lt;\u00a0%@ -&gt;\u00a0%@ &gt;\"</span>, name, value<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>pairs <span class=\"sy0\">=</span> @<span class=\"br0\">[</span><br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"06-07\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Ducks\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"00-01\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Avalanche\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"02-03\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"01-02\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"03-04\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Lightning\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"04-05\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"lockout\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"05-06\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Hurricanes\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"99-00\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Devils\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"07-08\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">]</span>,<br/>                       <span class=\"br0\">[</span>Pair pairWithName<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"08-09\"</span> value<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Penguins\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>        <span class=\"co2\">// optional 3rd arg: you can also specify a selector to compare the keys</span><br/>        <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSortDescriptor_Class/\"><span class=\"kw5\">NSSortDescriptor</span></a> <span class=\"sy0\">*</span>sd <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSSortDescriptor_Class/\"><span class=\"kw5\">NSSortDescriptor</span></a> alloc<span class=\"br0\">]</span> initWithKey<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"name\"</span> ascending<span class=\"sy0\">:</span><span class=\"kw2\">YES</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>        <span class=\"co2\">// it takes an array of sort descriptors, and it will be ordered by the</span><br/>        <span class=\"co2\">// first one, then if it's a tie by the second one, etc.</span><br/>        <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>sorted <span class=\"sy0\">=</span> <span class=\"br0\">[</span>pairs sortedArrayUsingDescriptors<span class=\"sy0\">:</span>@<span class=\"br0\">[</span>sd<span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>        NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, sorted<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> people <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"Joe\"</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alice\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Harry\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> people <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">*</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"Joe\"</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alice\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Harry\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> sortedPeopleByVal <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_, v1<span class=\"br0\">)</span> <span class=\"br0\">(</span>_, v2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> v1 v2<span class=\"br0\">)</span> people<span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> sortedPeopleByVal <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">*</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"Harry\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Bob\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Alice\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Joe\"</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">[[\"Joe\",5531], [\"Adam\",2341], [\"Bernie\",122], [\"David\",19]] sortBy(#first) println</pre>"}, {"lang": "ooRexx", "loc": 57, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>a = <span class=\"sy0\">.</span>array~new<br/>\u00a0<br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"06-07\"</span>, <span class=\"st0\">\"Ducks\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"00-01\"</span>, <span class=\"st0\">\"Avalanche\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"02-03\"</span>, <span class=\"st0\">\"Devils\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"01-02\"</span>, <span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"03-04\"</span>, <span class=\"st0\">\"Lightning\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"04-05\"</span>, <span class=\"st0\">\"lockout\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"05-06\"</span>, <span class=\"st0\">\"Hurricanes\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"99-00\"</span>, <span class=\"st0\">\"Devils\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"07-08\"</span>, <span class=\"st0\">\"Red Wings\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>a~append<span class=\"br0\">(</span><span class=\"sy0\">.</span>pair~new<span class=\"br0\">(</span><span class=\"st0\">\"08-09\"</span>, <span class=\"st0\">\"Penguins\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>b = a~copy   <span class=\"co1\">-- make a copy before sorting</span><br/>b~sort<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Sorted using direct comparison\"</span><br/><span class=\"kw1\">do</span> pair <span class=\"kw2\">over</span> b<br/>   <span class=\"kw1\">say</span> pair<br/><span class=\"kw3\">end</span><br/>\u00a0<br/>c = a~copy<br/><span class=\"co1\">-- this uses a custom comparator instead</span><br/>c~sortWith<span class=\"br0\">(</span><span class=\"sy0\">.</span>paircomparator~new<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Sorted using a comparator (inverted)\"</span><br/><span class=\"kw1\">do</span> pair <span class=\"kw2\">over</span> c<br/>   <span class=\"kw1\">say</span> pair<br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- a name/value mapping class that directly support the sort comparisons</span><br/>::class pair inherit comparable<br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">name</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> <span class=\"kw2\">name</span>, <span class=\"kw2\">value</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> <span class=\"kw2\">name</span><br/>::<span class=\"kw1\">attribute</span> <span class=\"kw2\">value</span><br/>\u00a0<br/>::method string<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">name</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">name</span> <span class=\"st0\">\"=\"</span> <span class=\"kw2\">value</span><br/>\u00a0<br/><span class=\"co1\">-- the compareto method is a requirement brought in</span><br/><span class=\"co1\">-- by the</span><br/>::method compareto<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">name</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> other<br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">name</span>~compareto<span class=\"br0\">(</span>other~<span class=\"kw2\">name</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- a comparator that shows an alternate way of sorting</span><br/>::class pairComparator subclass comparator<br/>::method <span class=\"kw6\">compare</span><br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"co1\">-- perform the comparison on the names</span><br/>  <span class=\"kw1\">return</span> -<span class=\"kw6\">left</span>~<span class=\"kw2\">name</span>~compareTo<span class=\"br0\">(</span><span class=\"kw6\">right</span>~<span class=\"kw2\">name</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 13, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  People = <span class=\"br0\">[</span>person<span class=\"br0\">(</span>name:joe value:3<span class=\"br0\">)</span><br/>            person<span class=\"br0\">(</span>name:bill value:4<span class=\"br0\">)</span><br/>            person<span class=\"br0\">(</span>name:alice value:20<span class=\"br0\">)</span><br/>            person<span class=\"br0\">(</span>name:harry value:3<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>  SortedPeople = <span class=\"br0\">{</span>Sort People<br/>                  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> P1 P2<span class=\"br0\">}</span><br/>                     P1<span class=\"sy0\">.</span>name <span class=\"sy0\">&lt;</span> P2<span class=\"sy0\">.</span>name<br/>                  <span class=\"kw1\">end</span><br/>                 <span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll SortedPeople Show<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"name\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"value\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"name2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"value2\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">@people</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'joe'</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'foo'</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'bar'</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@people</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@people</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">@people</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'joe'</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'foo'</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'bar'</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@people</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@people</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"kw2\">class</span> Employee <span class=\"br0\">{</span><br/>   <span class=\"kw1\">has</span> Str <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">name</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">has</span> Rat <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">wage</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$boss</span>     <span class=\"sy0\">=</span> Employee<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Frank Myers\"</span>     <span class=\"sy0\">,</span> wage <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6755.85</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$driver</span>   <span class=\"sy0\">=</span> Employee<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Aaron Fast\"</span>      <span class=\"sy0\">,</span> wage <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2530.40</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$worker</span>   <span class=\"sy0\">=</span> Employee<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"John Dude\"</span>       <span class=\"sy0\">,</span> wage <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2200.00</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$salesman</span> <span class=\"sy0\">=</span> Employee<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Frank Mileeater\"</span> <span class=\"sy0\">,</span> wage <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4590.12</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@team</span> <span class=\"sy0\">=</span> <span class=\"re0\">$boss</span><span class=\"sy0\">,</span> <span class=\"re0\">$driver</span><span class=\"sy0\">,</span> <span class=\"re0\">$worker</span><span class=\"sy0\">,</span> <span class=\"re0\">$salesman</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@orderedByName</span> <span class=\"sy0\">=</span> <span class=\"re0\">@team</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"me1\">name</span> <span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">name</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@orderedByWage</span> <span class=\"sy0\">=</span> <span class=\"re0\">@team</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"me1\">wage</span> <span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">name</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Team ordered by name (ascending order):\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">@orderedByName</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'  '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Team ordered by wage (ascending order):\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">@orderedByWage</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'  '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function compare_col2(sequence a, sequence b)<br/>    return compare(a[2],b[2])<br/>end function<br/>\u00a0<br/>sequence s = {{\"grass\",\"green\"},{\"snow\",\"white\"},{\"sky\",\"blue\"},{\"cherry\",\"red\"}}<br/>\u00a0<br/>?sort(s)<br/>?custom_sort(routine_id(\"compare_col2\"),s)</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (sort '((\"def\" 456) (\"abc\" 789) (\"ghi\" 123)))<br/>-&gt; ((\"abc\" 789) (\"def\" 456) (\"ghi\" 123))</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$list</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/><span class=\"st0\">\"def\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"one\"</span><br/><span class=\"st0\">\"abc\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"two\"</span><br/><span class=\"st0\">\"jkl\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"three\"</span><br/><span class=\"st0\">\"abcdef\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"four\"</span><br/><span class=\"st0\">\"ghi\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"five\"</span><br/><span class=\"st0\">\"ghijkl\"</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"six\"</span><br/> <span class=\"br0\">}</span><br/> <span class=\"re0\">$list</span>.GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$PSItem</span>.Name<span class=\"br0\">)</span>.length<span class=\"br0\">}</span><span class=\"sy0\">,</span> Name<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 33, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> MyPair <span class=\"co1\">; Define a structured data type</span><br/>  Name$<br/>  Value.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> People.MyPair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>             <span class=\"co1\">; Allocate some elements</span><br/>\u00a0<br/>People<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Name$ <span class=\"sy0\">=</span> <span class=\"st0\">\"John\"</span>         <span class=\"co1\">; Start filling them in</span><br/>People<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/>People<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Name$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Emma\"</span><br/>People<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> <span class=\"nu0\">200</span><br/>\u00a0<br/>People<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Name$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Johnny\"</span><br/>People<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> <span class=\"nu0\">175</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i<br/>  <span class=\"co1\">; Sort ascending by name</span><br/>  <span class=\"kw2\">SortStructuredArray</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>MyPair<span class=\"sy0\">\\</span>Name$<span class=\"br0\">)</span>, #PB_Sort_String<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Sorted ascending by name.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Name$<span class=\"sy0\">+</span><span class=\"st0\">\" - Value: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">; Sort descending by value</span><br/>  <span class=\"kw2\">SortStructuredArray</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Descending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>MyPair<span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span>, #PB_Sort_Integer<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Sorted descending by value.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Name$<span class=\"sy0\">+</span><span class=\"st0\">\" - Value: \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>People<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">; Wait for user...</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>:<span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\">people <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'joe'</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'foo'</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">'bar'</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>people<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">sortbyname &lt;- function(x, ...) x[order(names(x), ...)]<br/>x &lt;- c(texas=68.9, ohio=87.8, california=76.2, \"new york\"=88.2)<br/>sortbyname(x)</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define data '([Joe 5531] [Adam 2341] [Bernie 122] [Walter 1234] [David 19]))<br/>\u00a0<br/>(sort data &lt; #:key cadr)<br/>;; --&gt; '((David 19) (Bernie 122) (Walter 1234) (Adam 2341) (Joe 5531))<br/>\u00a0<br/>;; Demonstrating a \"key\" that is not just a direct element<br/>(sort data string&lt;? #:key (compose1 symbol-&gt;string car))<br/>;; --&gt; '((Adam 2341) (Bernie 122) (David 19) (Joe 5531) (Walter 1234))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 34, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  sorts an array of composite structures  (which has two classes of data).*/</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*number elements in structure (so far)*/</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'tan'</span>  \u00a0;  <span class=\"kw2\">value</span>= <span class=\"nu0\">0</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*tan    peanut M&amp;M's are  0%  of total*/</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'orange'</span>;  <span class=\"kw2\">value</span>=<span class=\"nu0\">10</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*orange    \"    \"     \"  10%   \"   \"  */</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'yellow'</span>;  <span class=\"kw2\">value</span>=<span class=\"nu0\">20</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*yellow    \"    \"     \"  20%   \"   \"  */</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'green'</span>\u00a0;  <span class=\"kw2\">value</span>=<span class=\"nu0\">20</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*green     \"    \"     \"  20%   \"   \"  */</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'red'</span>  \u00a0;  <span class=\"kw2\">value</span>=<span class=\"nu0\">20</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*red       \"    \"     \"  20%   \"   \"  */</span><br/><span class=\"kw2\">name</span>=<span class=\"st0\">'brown'</span>\u00a0;  <span class=\"kw2\">value</span>=<span class=\"nu0\">30</span>;  <span class=\"kw1\">call</span> add <span class=\"kw2\">name</span>,<span class=\"kw2\">value</span>   <span class=\"coMULTI\">/*brown     \"    \"     \"  30%   \"   \"  */</span><br/><span class=\"kw1\">call</span> show  <span class=\"st0\">'before sort'</span>,  #<br/><span class=\"kw1\">say</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2592'</span>, <span class=\"nu0\">70</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> xSort                 #<br/><span class=\"kw1\">call</span> show  <span class=\"st0\">' after sort'</span>,  #<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>add:   <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> # @<span class=\"sy0\">.</span>;   #=#+<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*bump the number of structure entries.*/</span><br/>       @<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>color=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;      @<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>pc=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*construct a entry of the structure.  */</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*2nd arg\u2261number of structure elements.*/</span><br/>                              <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">30</span><span class=\"br0\">)</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>color,<span class=\"nu0\">9</span><span class=\"br0\">)</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>pc,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"st0\">'%'</span><br/>                              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>        <span class=\"coMULTI\">/* [\u2191]  display  what,  name,  value.  */</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>xSort: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;    h=N<br/>                              <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;                       h=h%2<br/>                                <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N-h;        j=i;      k=h+i<br/>                                  <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>color<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>color         <span class=\"coMULTI\">/*swap elements.*/</span><br/>                                  <a class=\"__cf_email__\" data-cfemail=\"c798fa87\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>color;        @<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"25464a494a571865\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>color;     @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>color=_<br/>                                  <a class=\"__cf_email__\" data-cfemail=\"8ed1b3ce\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>pc;           @<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>pc   <a class=\"__cf_email__\" data-cfemail=\"221f62\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>pc;        @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>pc   =_<br/>                                  <span class=\"kw1\">if</span> h<span class=\"sy0\">&gt;</span>=j  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;    j=j-h;    k=k-h<br/>                                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while @.k.color \u00b7\u00b7\u00b7*/</span><br/>                                <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*i*/</span><br/>                              <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*while h&gt;1*/</span><br/>       <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">Person = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:name</span>,:value<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">def</span> to_s; <span class=\"st0\">\"name:#{name}, value:#{value}\"</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>list = <span class=\"br0\">[</span>Person.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"Joe\"</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>        Person.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"Bill\"</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>        Person.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"Alice\"</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span>,<br/>        Person.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"Harry\"</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw3\">puts</span> list.<span class=\"me1\">sort_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span>x.<span class=\"me1\">name</span><span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span><br/><span class=\"kw3\">puts</span> list.<span class=\"me1\">sort_by</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:value<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"                          ' create in memory db<br/>mem$\t= \"CREATE TABLE people(num integer, name text,city text)\"<br/>#mem execute(mem$)<br/>data \"1\",\"George\",\"Redding\",\"2\",\"Fred\",\"Oregon\",\"3\",\"Ben\",\"Seneca\",\"4\",\"Steve\",\"Fargo\",\"5\",\"Frank\",\"Houston\"<br/>\u00a0<br/>for i = 1 to 5                                          ' read data and place in memory DB<br/> read num$\u00a0:read name$: read city$<br/> #mem execute(\"INSERT INTO people VALUES(\";num$;\",'\";name$;\"','\";city$;\"')\")<br/>next i<br/>#mem execute(\"SELECT * FROM people ORDER BY name\")      'sort by name order<br/>WHILE  #mem hasanswer()<br/>  #row  = #mem #nextrow()<br/>  num   = #row num()<br/>  name$\t= #row name$()<br/>  city$\t= #row city$()<br/>  print num;\" \";name$;\" \";city$<br/>WEND</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Pair<span class=\"br0\">(</span>name<span class=\"sy0\">:</span>String, value<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>Pair<span class=\"br0\">(</span><span class=\"st0\">\"Krypton\"</span>, <span class=\"nu0\">83.798</span><span class=\"br0\">)</span>, Pair<span class=\"br0\">(</span><span class=\"st0\">\"Beryllium\"</span>, <span class=\"nu0\">9.012182</span><span class=\"br0\">)</span>, Pair<span class=\"br0\">(</span><span class=\"st0\">\"Silicon\"</span>, <span class=\"nu0\">28.0855</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>input.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span> <span class=\"co1\">// Array(Pair(Beryllium,9.012182), Pair(Krypton,83.798), Pair(Silicon,28.0855))</span><br/>\u00a0<br/><span class=\"co1\">// alternative versions:</span><br/>input.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span>struct <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>struct.<span class=\"me1\">name</span>, struct.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// additional sort field (name first, then value)</span><br/>input.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a.<span class=\"me1\">name</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>b.<span class=\"me1\">name</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">// arbitrary comparison function</span></pre>"}, {"lang": "Seed7", "loc": 39, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: pair is new struct<br/>    var string: name is \"\";<br/>    var string: value is \"\";<br/>  end struct;<br/>\u00a0<br/>const func integer: compare (in pair: pair1, in pair: pair2) is<br/>  return compare(pair1.name, pair2.name);<br/>\u00a0<br/>const func string: str (in pair: aPair) is<br/>  return \"(\" &lt;&amp; aPair.name &lt;&amp; \", \" &lt;&amp; aPair.value &lt;&amp; \")\";<br/>\u00a0<br/>enable_output(pair);<br/>\u00a0<br/>const func pair: pair (in string: name, in string: value) is func<br/>  result<br/>    var pair: newPair is pair.value;<br/>  begin<br/>    newPair.name\u00a0:= name;<br/>    newPair.value\u00a0:= value;<br/>  end func;<br/>\u00a0<br/>var array pair: data is [] (<br/>    pair(\"Joe\",    \"5531\"),<br/>    pair(\"Adam\",   \"2341\"),<br/>    pair(\"Bernie\", \"122\"),<br/>    pair(\"Walter\", \"1234\"),<br/>    pair(\"David\",  \"19\"));<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var pair: aPair is pair.value;<br/>  begin<br/>    data\u00a0:= sort(data);<br/>    for aPair range data do<br/>      writeln(aPair);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Declare an array of pairs</span><br/>var people = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'joe'</span>, <span class=\"nu0\">120</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">'foo'</span>, <span class=\"nu0\">31</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"st0\">'bar'</span>, <span class=\"nu0\">51</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"co1\"># Sort the array in-place by name</span><br/>people.<span class=\"me1\">sort</span>! <span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"co1\"># Alternatively, we can use the `.sort_by{}` method</span><br/>var sorted = people.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>item<span class=\"sy0\">|</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"co1\"># Display the sorted array</span><br/>say people;</pre>"}, {"lang": "Simula", "loc": 69, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    CLASS COMPARABLE;;<br/>\u00a0<br/>    COMPARABLE CLASS PAIR(N,V); TEXT N,V;;<br/>\u00a0<br/>    CLASS COMPARATOR;<br/>    VIRTUAL:<br/>        PROCEDURE COMPARE IS<br/>            INTEGER PROCEDURE COMPARE(A, B); REF(COMPARABLE) A, B;;<br/>    BEGIN<br/>    END**OF**COMPARATOR;<br/>\u00a0<br/>    COMPARATOR CLASS PAIRBYNAME;<br/>    BEGIN<br/>        INTEGER PROCEDURE COMPARE(A, B); REF(COMPARABLE) A, B;<br/>        BEGIN<br/>            COMPARE\u00a0:= IF A QUA PAIR.N &lt; B QUA PAIR.N THEN -1 ELSE<br/>                       IF A QUA PAIR.N &gt; B QUA PAIR.N THEN +1 ELSE 0;<br/>        END;<br/>    END**OF**PAIRBYNAME;<br/>\u00a0<br/>    PROCEDURE BUBBLESORT(A, C); NAME A; REF(COMPARABLE) ARRAY A; REF(COMPARATOR) C;<br/>    BEGIN<br/>       INTEGER LOW, HIGH, I;<br/>       BOOLEAN SWAPPED;<br/>\u00a0<br/>       PROCEDURE SWAP(I, J); INTEGER I, J;<br/>       BEGIN<br/>           REF(COMPARABLE) TEMP;<br/>           TEMP\u00a0:- A(I); A(I)\u00a0:- A(J); A(J)\u00a0:- TEMP;<br/>       END**OF**SWAP;<br/>\u00a0<br/>       LOW\u00a0:= LOWERBOUND(A, 1);<br/>       HIGH\u00a0:= UPPERBOUND(A, 1);<br/>       SWAPPED\u00a0:= TRUE;<br/>       WHILE SWAPPED DO<br/>       BEGIN<br/>           SWAPPED\u00a0:= FALSE;<br/>           FOR I\u00a0:= LOW + 1 STEP 1 UNTIL HIGH DO<br/>           BEGIN<br/>               COMMENT IF THIS PAIR IS OUT OF ORDER\u00a0;<br/>               IF C.COMPARE(A(I - 1), A(I)) &gt; 0 THEN<br/>               BEGIN<br/>                   COMMENT SWAP THEM AND REMEMBER SOMETHING CHANGED\u00a0;<br/>                   SWAP(I - 1, I);<br/>                   SWAPPED\u00a0:= TRUE;<br/>               END;<br/>           END;<br/>       END;<br/>    END**OF**BUBBLESORT;<br/>\u00a0<br/>    COMMENT ** MAIN PROGRAM **;<br/>    REF(PAIR) ARRAY A(1:5);<br/>    INTEGER I;<br/>\u00a0<br/>    A(1)\u00a0:- NEW PAIR( \"JOE\", \"5531\" );<br/>    A(2)\u00a0:- NEW PAIR( \"ADAM\", \"2341\" );<br/>    A(3)\u00a0:- NEW PAIR( \"BERNIE\", \"122\" );<br/>    A(4)\u00a0:- NEW PAIR( \"WALTER\", \"1234\" );<br/>    A(5)\u00a0:- NEW PAIR( \"DAVID\", \"19\" );<br/>\u00a0<br/>    BUBBLESORT(A, NEW PAIRBYNAME);<br/>\u00a0<br/>    FOR I:= 1 STEP 1 UNTIL 5 DO<br/>    BEGIN OUTTEXT(A(I).N); OUTCHAR(' '); OUTTEXT(A(I).V); OUTIMAGE; END;<br/>    OUTIMAGE;<br/>\u00a0<br/>END.</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> people <span class=\"br0\">{</span><span class=\"br0\">{</span>joe <span class=\"nu0\">120</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>foo <span class=\"nu0\">31</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>bar <span class=\"nu0\">51</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"co1\"># sort by the first element of each pair</span><br/><span class=\"kw2\">lsort</span> -index <span class=\"nu0\">0</span> <span class=\"re0\">$people</span></pre>"}, {"lang": "UNIX Shell", "loc": 28, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">list</span>=<span class=\"st0\">\"namez:order!<br/>name space:in<br/>name1:sort<br/>name:Please\"</span><br/>\u00a0<br/><span class=\"re2\">newline</span>=<span class=\"st0\">\"<br/>\"</span><br/>\u00a0<br/>dumplist<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">(</span><br/>\t\t<span class=\"re2\">IFS</span>=<span class=\"re1\">$newline</span><br/>\t\t<span class=\"kw1\">for</span> pair <span class=\"kw1\">in</span> <span class=\"re1\">$list</span>; <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"re2\">IFS</span>=:<br/>\t\t\t\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"re1\">$pair</span><br/>\t\t\t\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"  $1 =&gt; $2\"</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">done</span><br/>\t<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Original list:\"</span><br/>dumplist<br/>\u00a0<br/><span class=\"re2\">list</span>=<span class=\"sy0\">`</span><span class=\"re2\">IFS</span>=<span class=\"re1\">$newline</span>; <span class=\"kw3\">printf</span> <span class=\"sy0\">%</span>s <span class=\"st0\">\"<span class=\"es2\">$list</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span> -t: -k1,<span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Sorted list:\"</span><br/>dumplist</pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>#cast\u00a0%sWLW<br/>\u00a0<br/>examples = <br/>\u00a0<br/>(<br/>   -&lt;&amp;l &lt;('z','a'),('x','c'),('y','b')&gt;,  # sorted by the left<br/>   -&lt;&amp;r &lt;('z','a'),('x','c'),('y','b')&gt;)  # sorted by the right</pre>"}, {"lang": "XPL0", "loc": 32, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>char Dict(10,10);<br/>int  Entries;<br/>\u00a0<br/>proc BSort(A, N);       \\Bubble sort array A's key string into ascending order<br/>char A;                 \\address of array<br/>int  N;                 \\number of items in array (size)<br/>int  B, I, J, T;<br/>[B:= A;                 \\B(I) accesses 32-bit pointers, not A(I) 8-bit bytes<br/>for J:= N-1 downto 0 do<br/>    for I:= 0 to J-1 do<br/>        if StrCmp(A(I,1), A(I+1,1)) &gt; 0 then<br/>            [T:= B(I);  B(I):= B(I+1);  B(I+1):= T];    \\swap pointers<br/>];<br/>\u00a0<br/>proc AddEntry(Letter, Greek);   \\Insert entry into associative array<br/>char Letter, Greek;<br/>[Dict(Entries,0):= Letter;<br/>StrCopy(Greek, @Dict(Entries,1));<br/>Entries:= Entries+1;            \\(limit checks ignored for simplicity)<br/>];<br/>\u00a0<br/>int I;<br/>[Entries:= 0;<br/>AddEntry(^A, \"alpha\");          \\add items in arbitrary order<br/>AddEntry(^D, \"delta\");<br/>AddEntry(^B, \"beta\");<br/>AddEntry(^C, \"gamma\");<br/>BSort(Dict, Entries);           \\sort entries by Greek name<br/>for I:= 0 to Entries-1 do       \\show sorted entries<br/>    [ChOut(0, Dict(I,0));  ChOut(0, ^ );  Text(0, @Dict(I,1));  CrLf(0)];<br/>]</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">class P{var name,value;<br/>   fcn init(nm,val){name,value=vm.arglist} <br/>   fcn __opLT(p){name&lt;p.name}  // implementation of P1 &lt; P2<br/>}<br/>// create list of pairs:<br/>p:=List(P(\"sam\",\"a\"),P(\"fred\",\"b\"),P(\"chris\",\"c\"));<br/>p.sort();<br/>p.apply(\"name\"); //--&gt;L(\"chris\",\"fred\",\"sam\")</pre>"}]}