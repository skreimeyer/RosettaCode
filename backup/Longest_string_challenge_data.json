{"task": "Longest_string_challenge", "blocks": [{"lang": "Ada", "loc": 145, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Longest_Strings <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- first, in order to strictly use integer, I use integer in</span><br/>   <span class=\"co1\">-- place of an enumeration type: -1 =&gt; not-equal</span><br/>   <span class=\"co1\">--                                0 =&gt; shorter - ignore, no print current string</span><br/>   <span class=\"co1\">--                                1 =&gt; equal - print current and up-stream</span><br/>   <span class=\"co1\">--                                2 =&gt; longer - no print upstream, only current and equal subsequent</span><br/>   <span class=\"co1\">--                           others =&gt; null; -- must never happen.</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"co1\">-- Anything else that is tested or used that is not a string or integer</span><br/>   <span class=\"co1\">-- is not used explicitly by me, but is a standard part of the language</span><br/>   <span class=\"co1\">-- as provided in the standard libraries (like boolean \"End_Of_File\").</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Measure_And_Print_N <span class=\"br0\">(</span>O\u00a0: String\u00a0:= <span class=\"st0\">\"\"</span>; <span class=\"co1\">-- original/old string</span><br/>                                 N\u00a0: String\u00a0:= <span class=\"st0\">\"\"</span>  <span class=\"co1\">-- next/new string</span><br/>                                <span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      T1\u00a0: String\u00a0:= O;<br/>      T2\u00a0: String\u00a0:= N;<br/>      L \u00a0: Integer\u00a0:= <span class=\"nu0\">1</span>; <span class=\"co1\">-- Length defaults to the same;</span><br/>      <span class=\"kw3\">function</span> Test_Length <span class=\"br0\">(</span>O\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> String; <span class=\"co1\">-- original/old string</span><br/>                            N\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> String<span class=\"br0\">)</span> <span class=\"co1\">-- new/test-subject string</span><br/>                            <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">function</span> Test_Equal <span class=\"br0\">(</span>O\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> String; N\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> String<span class=\"br0\">)</span><br/>                              <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>         <span class=\"kw1\">begin</span><br/>            O\u00a0:= N;<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">exception</span><br/>            <span class=\"kw3\">when</span> Constraint_Error =&gt;<br/>               <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">case</span> Test_Equal <span class=\"br0\">(</span>O, N<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> -<span class=\"nu0\">1</span> =&gt;<br/>            O <span class=\"br0\">(</span>N'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>\u00a0:= N;<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>            <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Constraint_Error =&gt;<br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">case</span> Test_Length <span class=\"br0\">(</span>T1, T2<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt;<br/>\u00a0<br/>            <span class=\"co1\">-- N &lt; O, so return \"shorter\"  do not print N</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> End_Of_File<br/>            <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>            <span class=\"kw1\">else</span><br/>               <span class=\"kw1\">case</span> Measure_And_Print_N <span class=\"br0\">(</span>O, Get_Line<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>; <span class=\"co1\">-- carry up any subsequent canceling of print.</span><br/>                  <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>                     <span class=\"kw3\">raise</span> Numeric_Error;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>\u00a0<br/>            <span class=\"co1\">-- O = N, so return \"equal\"  print N if all subsequent values are</span><br/>            <span class=\"co1\">-- less than or equal to N</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> End_Of_File<br/>            <span class=\"kw1\">then</span><br/>               Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">else</span><br/>               <span class=\"kw1\">case</span> Measure_And_Print_N <span class=\"br0\">(</span>O, Get_Line<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt;<br/>                     Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>                     Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt;  <span class=\"co1\">-- carry up the subsequent canceling of print.</span><br/>                     <span class=\"kw3\">null</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>                     <span class=\"kw3\">raise</span> Numeric_Error;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt;<br/>\u00a0<br/>            <span class=\"co1\">-- N &gt; O, so return \"longer\" to cancel printing all previous values</span><br/>            <span class=\"co1\">-- and print N if it is also equal to or greater than descendant</span><br/>            <span class=\"co1\">-- values.</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> End_Of_File<br/>            <span class=\"kw1\">then</span><br/>               Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>            <span class=\"kw1\">else</span><br/>               <span class=\"kw1\">case</span> Measure_And_Print_N <span class=\"br0\">(</span>N, Get_Line<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt;<br/>                     Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>                     Put_Line <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt;  <span class=\"co1\">-- printing N cancelled by subsequent input.</span><br/>                     <span class=\"kw3\">null</span>;<br/>                     <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>;<br/>                  <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>                     <span class=\"kw3\">raise</span> Numeric_Error;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>\u00a0<br/>            <span class=\"co1\">-- This should never happen - raise exception</span><br/>\u00a0<br/>            <span class=\"kw3\">raise</span> Numeric_Error;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> End_Of_File<br/>   <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">null</span>;<br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">case</span> Measure_And_Print_N <span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, Get_Line<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">0</span> =&gt;<br/>            Put_Line <span class=\"br0\">(</span>Current_Error,<br/>                      <span class=\"st0\">\"Error, Somehow the input line is calculated as less than zero!\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> =&gt;<br/>            Put_Line <span class=\"br0\">(</span>Current_Error,<br/>                      <span class=\"st0\">\"All input lines appear to be blank.\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> =&gt;<br/>            <span class=\"kw3\">null</span>;<br/>         <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>            <span class=\"kw3\">raise</span> Numeric_Error;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span>;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 39, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw3\">INT</span> bound <span class=\"sy1\">=</span> 1000000<span class=\"sy1\">;</span>\t\t\t <span class=\"co1\">CO Arbitrary upper limit on string lengths CO</span><br/>   <span class=\"kw3\">INT</span> max<span class=\"sy1\">;</span>\t\t\t\t <span class=\"co1\">CO Length of longest string CO</span><br/>   <span class=\"kw3\">INT</span> len<span class=\"sy1\">;</span>\t\t\t\t <span class=\"co1\">CO Length of string under examination CO</span><br/>   <span class=\"kw3\">STRING</span> buffer <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span>\t\t\t <span class=\"co1\">CO All characters read from stand in CO</span><br/>   <span class=\"kw3\">STRING</span> mask <span class=\"sy1\">:=</span> bound <span class=\"sy1\">*</span> <span class=\"st0\">\"0\"</span><span class=\"sy1\">;</span>\t\t <span class=\"co1\">CO High water mark of string length seen so far CO</span><br/><span class=\"co1\">CO Standard boiler plate CO</span><br/>   on file end <span class=\"br0\">(</span>stand in<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw22\">close</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw2\">GOTO</span> finished<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">DO</span><br/>      <span class=\"kw3\">STRING</span> line<span class=\"sy1\">;</span><br/>      read <span class=\"br0\">(</span><span class=\"br0\">(</span>line<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      buffer <span class=\"kw17\">PLUSAB</span> line <span class=\"sy1\">+</span> <span class=\"kw8\">REPR</span> 10<span class=\"sy1\">;</span>\t<span class=\"co1\">CO Concatenate string and newline CO</span><br/>      mask<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> line<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"1\"</span>\t\t<span class=\"co1\">CO And set mask where character exists in line CO</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>finished<span class=\"sy1\">:</span><br/>   buffer <span class=\"kw17\">PLUSAB</span> <span class=\"kw8\">REPR</span> 10<span class=\"sy1\">;</span>\t\t<span class=\"co1\">CO Guarantee there's a zero-length string at the end CO</span><br/>CO<br/>   Scan backwards through mask looking for highest index used which is equal to the length<br/>   of the longest string with its terminating <span class=\"kw22\">newline</span>.<br/>CO<br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> bound <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1<br/>   <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FROM</span> <span class=\"kw8\">ABS</span> mask<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">TO</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"kw2\">DO</span> max <span class=\"sy1\">:=</span> i <span class=\"kw2\">OD</span>\t<span class=\"co1\">CO Exploit ABS \"1\" &gt; ABS \"0\" CO</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> buffer<br/>   <span class=\"kw2\">DO</span>\t\t\t\t\t\t\t<span class=\"co1\">CO Null loop if buffer is empty CO</span><br/>      <span class=\"kw3\">VOID</span> <span class=\"br0\">(</span><span class=\"kw26\">char in string</span> <span class=\"br0\">(</span><span class=\"kw8\">REPR</span> 10<span class=\"sy1\">,</span> len<span class=\"sy1\">,</span> buffer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\t<span class=\"co1\">CO Pedantry and Algol68 Genie extension CO</span><br/>      <span class=\"kw2\">FROM</span> max <span class=\"kw2\">TO</span> len<br/>      <span class=\"kw2\">DO</span>\t\t\t\t\t\t<span class=\"co1\">CO Null loop if len &lt; max CO</span><br/>\t <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> max<br/>\t <span class=\"kw2\">DO</span><br/>\t    <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$a$<span class=\"sy1\">,</span> buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">CO Print string and newline CO</span><br/>\t <span class=\"kw2\">OD</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      buffer <span class=\"sy1\">:=</span> buffer<span class=\"br0\">[</span>len <span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> buffer<span class=\"br0\">]</span><span class=\"sy1\">;</span>\t\t<span class=\"co1\">CO Step over string CO</span><br/>      buffer <span class=\"sy1\">:=</span> buffer<span class=\"br0\">[</span>2 <span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> buffer<span class=\"br0\">]</span>\t\t\t<span class=\"co1\">CO Step over newline CO</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 21, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">input</span></a> <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/>a<br/>bb<br/>ccc<br/>ddd<br/>ee<br/>f<br/>ggg<br/><span class=\"br0\">)</span><br/>longestLen <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> buffer <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">input</span></a><span class=\"sy0\">,</span> `n<br/><span class=\"br0\">{</span><br/>   top <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> top<span class=\"sy0\">,</span> top<span class=\"sy0\">,</span> `n<br/>   <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> LongestLen<span class=\"br0\">)</span> <span class=\"co1\">; at least as long</span><br/>      buffer <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`n\"</span><br/>   <span class=\"kw1\">If</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>top<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; longer</span><br/>      buffer <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> LongestLen <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% buffer</pre>"}, {"lang": "AWK", "loc": 18, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f </span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    maxlen = <span class=\"nu0\">0</span>; <br/>    lenList = <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><span class=\"sy2\">&gt;</span>maxlen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tlenList = <span class=\"nu0\">1</span>;<br/>\tList<span class=\"br0\">[</span>lenList<span class=\"br0\">]</span> = <span class=\"re0\">$0</span>;<br/>\tmaxlen = <span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span>;<br/>   <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><span class=\"sy2\">==</span>maxlen<span class=\"br0\">)</span> <br/>\tList<span class=\"br0\">[</span><span class=\"sy3\">++</span>lenList<span class=\"br0\">]</span>=<span class=\"re0\">$0</span>;<br/><span class=\"br0\">}</span>\t<br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>; k <span class=\"sy2\">&lt;=</span> lenList; k<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"kw5\">print</span> List<span class=\"br0\">[</span>k<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 30, "block": "<pre class=\"text highlighted_source\">      DIM buffer% 65535<br/>      bufptr% = buffer%<br/>      longest$ = \" \"<br/>\u00a0<br/>      ON ERROR PRINT $$buffer%;\u00a0: END<br/>\u00a0<br/>      REPEAT<br/>        READ A$<br/>        IF FNcmp(A$, longest$) THEN<br/>          IF FNcmp(longest$, A$) ELSE bufptr% = buffer%<br/>          longest$ = A$<br/>          $bufptr% = A$<br/>          WHILE\u00a0?bufptr%<br/>            bufptr% = FNinc(bufptr%)<br/>          ENDWHILE<br/>         \u00a0?bufptr% = 10<br/>          bufptr% = FNinc(bufptr%)<br/>        ENDIF<br/>      UNTIL FALSE\u00a0: REM Loops until 'Out of data' error<br/>      END<br/>\u00a0<br/>      DATA a, bb, ccc, ddd, ee, f, ggg<br/>\u00a0<br/>      DEF FNcmp(a$, b$)\u00a0: REM Returns LEN(a$)&gt;=LEN(b$) [if b$&lt;&gt;\"\"]<br/>      LEFT$(a$, 65535) = b$<br/>      = INSTR(a$, b$)<br/>\u00a0<br/>      DEF FNinc(i%)\u00a0: REM Returns i%+1<br/>      FOR i% = i% TO i%\u00a0: NEXT<br/>      = i%</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>q<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">*</span>q<span class=\"br0\">)</span> p <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> line<span class=\"br0\">[</span><span class=\"nu0\">65536</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> buf<span class=\"br0\">[</span><span class=\"nu0\">1000000</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>last <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>next <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/gets.html\"><span class=\"kw3\">gets</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>line<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmp<span class=\"br0\">(</span>last<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmp<span class=\"br0\">(</span>line<span class=\"sy0\">,</span> last<span class=\"br0\">)</span><span class=\"br0\">)</span> next <span class=\"sy0\">=</span> buf<span class=\"sy0\">;</span><br/>\t\tlast <span class=\"sy0\">=</span> next<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>next<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>next<span class=\"br0\">)</span> next <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>next<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 31, "block": "<pre class=\"lisp highlighted_source\">ns longest-string<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn longer <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" if a is longer, it returns the characters in a after length b characters have been removed<br/>    otherwise it returns nil \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>empty? a<span class=\"br0\">)</span> <span class=\"br0\">(</span>empty? b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>not-empty a<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>rest a<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn get-input <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Gets the data from standard input as a lazy-sequence of lines (i.e. reads lines as needed by caller<br/>    Input is terminated by a zero length line (i.e. line with just &lt;CR&gt; \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>line <span class=\"br0\">(</span>read-line<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>count line<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>lazy-seq <span class=\"br0\">(</span><span class=\"kw1\">cons</span> line <span class=\"br0\">(</span>get-input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn process <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Returns list of longest lines \"</span><br/>  <span class=\"br0\">(</span>first                                                             <span class=\"co1\">; takes lines from [lines longest]</span><br/>    <span class=\"br0\">(</span>reduce <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">[</span>lines longest<span class=\"br0\">]</span> x<span class=\"br0\">]</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>              <span class=\"br0\">(</span>longer x longest<span class=\"br0\">)</span> <span class=\"br0\">[</span>x x<span class=\"br0\">]</span>                               <span class=\"co1\">; new longer line</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>longer longest x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>str lines <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> x<span class=\"br0\">)</span> longest<span class=\"br0\">]</span> <span class=\"co1\">; append x to previous longest</span><br/>              <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">[</span>lines longest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                               <span class=\"co1\">; keep previous lines &amp; longest</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"\"</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>get-input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Input text:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Output:<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">(</span>process<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Return a.length - b.length if positive, 0 otherwise.</span><br/><span class=\"kw4\">int</span> longer<span class=\"br0\">(</span><span class=\"kw4\">string</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">string</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>a.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>b.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        a.<span class=\"me1\">popFront</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> b.<span class=\"me1\">popFront</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> longest<span class=\"sy0\">,</span> lines<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> line<span class=\"sy0\">;</span> stdin.<span class=\"me1\">lines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>longer<span class=\"br0\">(</span>line<span class=\"sy0\">,</span> longest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            lines <span class=\"sy0\">=</span> longest <span class=\"sy0\">=</span> line<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>longer<span class=\"br0\">(</span>longest<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            lines <span class=\"sy0\">~=</span> line<span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 44, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    in <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdin<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> blankLine <span class=\"sy2\">=</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"kw1\">var</span> printLongest <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span><br/>    printLongest <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>candidate <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>longest <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        longest <span class=\"sy2\">=</span> candidate<br/>        s<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> in<span class=\"sy3\">.</span>ReadString<span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw3\">recover</span><span class=\"sy1\">()</span><br/>            <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw3\">recover</span><span class=\"sy1\">()</span><br/>            <span class=\"sy1\">}()</span><br/>            _ <span class=\"sy2\">=</span> blankLine<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>            <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw3\">recover</span><span class=\"sy1\">()</span><br/>                <span class=\"sy1\">}()</span><br/>                _ <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>longest<span class=\"sy1\">)]</span><br/>                longest <span class=\"sy2\">=</span> s<br/>            <span class=\"sy1\">}()</span><br/>            longest <span class=\"sy2\">=</span> printLongest<span class=\"sy1\">(</span>longest<span class=\"sy1\">)</span><br/>            <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw3\">recover</span><span class=\"sy1\">()</span><br/>                    os<span class=\"sy3\">.</span>Stdout<span class=\"sy3\">.</span>WriteString<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}()</span><br/>                _ <span class=\"sy2\">=</span> longest<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)]</span><br/>                s <span class=\"sy2\">=</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"sy1\">}()</span><br/>        <span class=\"sy1\">}()</span><br/>        _ <span class=\"sy2\">=</span> err<span class=\"sy3\">.</span><span class=\"sy1\">(</span>error<span class=\"sy1\">)</span><br/>        os<span class=\"sy3\">.</span><span class=\"me1\">Stdout</span><span class=\"sy3\">.</span><span class=\"me1\">WriteString</span><span class=\"sy1\">(</span>blankLine<span class=\"sy1\">)</span><br/>        blankLine <span class=\"sy2\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    printLongest<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 20, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> longer <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> aa <span class=\"sy0\">=</span> a, bb <span class=\"sy0\">=</span> b<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>bb <span class=\"sy0\">&amp;&amp;</span> aa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        bb <span class=\"sy0\">=</span> bb.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        aa <span class=\"sy0\">=</span> aa.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    aa <span class=\"sy0\">?</span> a\u00a0: b<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> longestStrings <br/>longestStrings <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=BufferedReader&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BufferedReader</span></a> source, <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> longest <span class=\"sy0\">=</span> <span class=\"st0\">''</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> current <span class=\"sy0\">=</span> source.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> finalLongest <span class=\"sy0\">=</span> current <span class=\"sy0\">==</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a> \\<br/>        <span class=\"sy0\">?</span> longest \\<br/>       \u00a0: longestStrings<span class=\"br0\">(</span>source,longer<span class=\"br0\">(</span>current,longest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>longer<span class=\"br0\">(</span>finalLongest, current<span class=\"br0\">)</span> <span class=\"sy0\">==</span> current<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> current<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> finalLongest<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span>           System<span class=\"sy0\">.</span>Environment<br/>\u00a0<br/>cmp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ordering\"><span class=\"kw4\">Ordering</span></a><br/>cmp <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>         <span class=\"sy0\">=</span> EQ<br/>cmp <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span>:<span class=\"sy0\">_</span><span class=\"br0\">)</span>      <span class=\"sy0\">=</span> LT<br/>cmp <span class=\"br0\">(</span><span class=\"sy0\">_</span>:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>      <span class=\"sy0\">=</span> GT<br/>cmp <span class=\"br0\">(</span><span class=\"sy0\">_</span>:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span>:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> cmp xs ys<br/>\u00a0<br/>longest <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>longest <span class=\"sy0\">=</span> longest<span class=\"st0\">' \"\" \"\" . lines<br/>  where<br/>    longest'</span> acc l <span class=\"br0\">[</span><span class=\"br0\">]</span>         <span class=\"sy0\">=</span> acc<br/>    longest<span class=\"st0\">' [] l (x:xs)      = longest'</span> x x xs<br/>    longest<span class=\"st0\">' acc l (x:xs) = case cmp l x of<br/>                                   LT -&gt; longest'</span> x x xs<br/>                                   EQ <span class=\"sy0\">-&gt;</span> longest<span class=\"st0\">' (acc ++ '</span>\\n<span class=\"st0\">':x) l xs<br/>                                   GT -&gt; longest'</span> acc l xs<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"br0\">(</span>file:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> getArgs<br/>  contents <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> file<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> longest contents<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> b  <span class=\"co1\"># the current buffer (string)</span><br/>    <span class=\"kw2\">local</span> l  <span class=\"co1\"># the last string </span><br/>    <span class=\"kw2\">local</span> L  <span class=\"co1\"># a \\n delimited accumulation of all the longest strings</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> b <span class=\"sy1\">:=</span> <span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"sy1\">/</span>l <span class=\"sy1\">:=</span> b      <span class=\"co1\"># primes l on first pass</span><br/>        b <span class=\"sy1\">?</span> <span class=\"br0\">(</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>l<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> L <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>l <span class=\"sy1\">:=</span> b<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> L <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"sy1\">\\</span>L<span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> b <span class=\"sy1\">||</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>            <span class=\"co1\">#       move(*l) - fails if b is not l characters long</span><br/>            <span class=\"co1\">#       move(1)  - succeeds/fails if the string is longer and triggers a reset of L</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>L<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   isempty =. <span class=\"sy0\">(</span><span class=\"nu0\">0</span> [ <span class=\"nu0\">0</span>&amp;{<span class=\"sy0\">)</span>\u00a0:: 1:  <span class=\"co1\">NB. 0=#</span><br/>   compare =. <span class=\"sy0\">(</span>$:&amp;}.<span class=\"sy0\">)</span>`<span class=\"sy0\">((</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span>,:<span class=\"nu0\">_1</span> <span class=\"nu0\">0</span><span class=\"sy0\">)</span> {~ &lt;@,&amp;isempty<span class=\"sy0\">)</span>@.<span class=\"sy0\">(</span>+.&amp;isempty<span class=\"sy0\">)</span> <span class=\"co1\">NB. *@-&amp;#</span><br/>   add =. ,`<span class=\"sy0\">(</span>,:@[<span class=\"sy0\">)</span>`] @. <span class=\"sy0\">(</span>compare {:<span class=\"sy0\">)</span><br/>   &gt; add&amp;.&gt;/ <span class=\"sy0\">(</span>}: , ,:&amp;.&gt;@{:<span class=\"sy0\">)</span>\u00a0;: <span class=\"st_h\">'a bb ccc ddd ee f ggg'</span><br/>ccc<br/>ddd<br/>ggg</pre>"}, {"lang": "Java", "loc": 28, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LongestStringChallenge <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> lines <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>, longest <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span>Scanner sc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"lines.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>longer<span class=\"br0\">(</span>longest, line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    lines <span class=\"sy0\">=</span> longest <span class=\"sy0\">=</span> line<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>longer<span class=\"br0\">(</span>line, longest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    lines <span class=\"sy0\">=</span> lines.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> longer<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> dummy <span class=\"sy0\">=</span> a.<span class=\"me1\">substring</span><span class=\"br0\">(</span>b.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringindexoutofboundsexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringIndexOutOfBoundsException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">function longer(a, b)<br/>    try<br/>        b[endof(a)]<br/>    catch<br/>        return true<br/>    end<br/>    return false<br/>end<br/>\u00a0<br/>function printlongest(io::IO)<br/>    lines = longest = \"\"<br/>    while\u00a0!eof(io)<br/>        line = readline(io)<br/>        if longer(line, longest)<br/>            longest = lines = line<br/>        elseif\u00a0!longer(longest, line)<br/>            lines *= \"\\n\" * line<br/>        end<br/>    end<br/>    println(lines)<br/>end<br/>printlongest(str::String) = printlongest(IOBuffer(str))<br/>\u00a0<br/>printlongest(\"a\\nbb\\nccc\\nddd\\nee\\nf\\nggg\")</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun longer<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> String, b<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        a.<span class=\"me1\">substring</span><span class=\"br0\">(</span>b.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> StringIndexOutOfBoundsException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lines <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> longest <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> Scanner<span class=\"br0\">(</span>File<span class=\"br0\">(</span><span class=\"st0\">\"lines.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>longer<span class=\"br0\">(</span>longest, line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            longest <span class=\"sy0\">=</span> line<br/>            lines <span class=\"sy0\">=</span> longest<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>longer<span class=\"br0\">(</span>line, longest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            lines <span class=\"sy0\">=</span> lines.<span class=\"me1\">plus</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">plus</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"co1\">// using 'plus' to avoid using '+'</span><br/>    <span class=\"br0\">}</span><br/>    sc.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// alternatively (but cheating as library functions will use comparisons and lists under the hood)</span><br/>    println<span class=\"br0\">(</span>File<span class=\"br0\">(</span><span class=\"st0\">\"lines.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"br0\">}</span>.<span class=\"me1\">maxBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">key</span> <span class=\"br0\">}</span><span class=\"sy0\">!!</span>.<span class=\"me1\">value</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 26, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> longer<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>        s1 <span class=\"sy0\">=</span> s1<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        s2 <span class=\"sy0\">=</span> s2<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> s1<span class=\"sy0\">:</span>find<span class=\"br0\">(</span><span class=\"st0\">'^$'</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> s2<span class=\"sy0\">:</span>find<span class=\"br0\">(</span><span class=\"st0\">'^$'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>        <span class=\"kw1\">elseif</span> s2<span class=\"sy0\">:</span>find<span class=\"br0\">(</span><span class=\"st0\">'^$'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> output <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/><span class=\"kw1\">local</span> longest <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"kw1\">for</span> line <span class=\"kw2\">in</span> <span class=\"kw3\">io.lines</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> islonger <span class=\"sy0\">=</span> longer<span class=\"br0\">(</span>line<span class=\"sy0\">,</span> longest<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> islonger <span class=\"kw2\">and</span> longer<span class=\"br0\">(</span>longest<span class=\"sy0\">,</span> line<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        output <span class=\"sy0\">=</span> output <span class=\"sy0\">..</span> line <span class=\"sy0\">..</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>    <span class=\"kw1\">elseif</span> islonger <span class=\"kw1\">then</span><br/>        longest <span class=\"sy0\">=</span> line<br/>        output <span class=\"sy0\">=</span> line <span class=\"sy0\">..</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 13, "block": "<pre class=\"text highlighted_source\">FixedPoint[<br/> StringReplace[#, <br/>   x\u00a0: \"\\n\" | StartOfString ~~ a\u00a0: Except[\"\\n\"] ... ~~ \"\\n\" ~~ <br/>     b\u00a0: Except[\"\\n\"] ... ~~ y\u00a0: \"\\n\" | EndOfString\u00a0:&gt; <br/>    x &lt;&gt; Switch[((#1 + #2) + Abs[#1 - #2])/2 &amp;[<a class=\"__cf_email__\" data-cfemail=\"0d5e797f64636a4168636a79654d6c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <br/>       <a class=\"__cf_email__\" data-cfemail=\"41123533282f260d242f2635290123\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], Except[<a class=\"__cf_email__\" data-cfemail=\"227156504b4c456e474c45564a6243\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], b, <br/>      Except[<a class=\"__cf_email__\" data-cfemail=\"6c3f181e05020b2009020b18042c0e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], a, _, a &lt;&gt; \"\\n\" &lt;&gt; b] &lt;&gt; y] &amp;, \"a<br/> bb<br/> ccc<br/> ddd<br/> ee<br/> f<br/> ggg\"]</pre>"}, {"lang": "MATLAB / Octave", "loc": 16, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> longestString<span class=\"br0\">(</span>file<span class=\"br0\">)</span>;<br/>  fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>file<span class=\"br0\">)</span>;<br/>  maxlen = <span class=\"nu0\">0</span>; L = <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>  <span class=\"kw1\">while</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feof.html\"><span class=\"kw2\">feof</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">)</span>&gt;maxlen<span class=\"br0\">)</span> <br/>      maxlen = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">)</span>; <br/>      L = <span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">}</span>;<br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">)</span>==maxlen<span class=\"br0\">)</span> <br/>      L<span class=\"br0\">{</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a>; <br/>    <span class=\"kw1\">end</span>; <br/>  <span class=\"kw1\">end</span>; <br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>L<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span>; <br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 24, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> input_line_opt ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> Some <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> None<br/>\u00a0<br/><span class=\"kw1\">let</span> cmp s1 s2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>s1<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span>     <span class=\"co1\">(* s1 is longer *)</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>s2<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>  <span class=\"co1\">(* s2 is longer *)</span><br/>    <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span>                            <span class=\"co1\">(* both same length *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop longest acc <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> input_line_opt ic <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> Some line <span class=\"sy0\">-&gt;</span><br/>      <span class=\"br0\">(</span> <span class=\"kw1\">match</span> cmp line longest <span class=\"kw1\">with</span><br/>        <span class=\"sy0\">|</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> loop line <span class=\"br0\">(</span>line <span class=\"sy0\">^</span> <span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> loop line <span class=\"br0\">(</span>acc <span class=\"sy0\">^</span> line <span class=\"sy0\">^</span> <span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> loop longest acc <span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> acc<br/>  <span class=\"kw1\">in</span><br/>  loop <span class=\"st0\">\"\"</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "Pascal", "loc": 37, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> LongestStringChallenge_1<span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Line<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  Lines<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  position<span class=\"sy1\">,</span> len<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eoln</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    len <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    position <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">readln</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    setlength<span class=\"br0\">(</span>lines<span class=\"sy1\">,</span> len<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lines<span class=\"br0\">[</span>position<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> line<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw3\">eoln</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">readln</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> length<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy3\">=</span> length<span class=\"br0\">(</span>lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        inc<span class=\"br0\">(</span>position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        setlength<span class=\"br0\">(</span>lines<span class=\"sy1\">,</span> len<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        lines<span class=\"br0\">[</span>position<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> line<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> length<span class=\"br0\">(</span>line<span class=\"br0\">)</span> &gt; length<span class=\"br0\">(</span>lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        position <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>        len <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        setlength<span class=\"br0\">(</span>lines<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        lines<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> line<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> position <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>lines<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -n</span><br/>END<span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$all</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"re0\">$all</span> <span class=\"sy0\">=</span> <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><br/>\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"re0\">$all</span> <span class=\"sy0\">.=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Sample longest string seen.</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Accumulator to save longest strings.</span><br/>\u00a0<br/><span class=\"kw1\">while</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$s</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>     <span class=\"co1\"># Is new string longer?</span><br/>       <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span>            <span class=\"co1\"># Reset accumulator.</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">elsif</span> <span class=\"sy0\">!</span><span class=\"re0\">$l</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># Same length?</span><br/>      <span class=\"re0\">$a</span> <span class=\"sy0\">~=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span>                 <span class=\"co1\"># Accumulate it.</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">print</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 24, "block": "<pre class=\"text highlighted_source\">integer fn = open(command_line()[2],\"r\") -- (reading the source file)<br/>\u00a0<br/>function allx(string line)<br/>    line[1..-1] = 'x'<br/>    return line<br/>end function<br/>\u00a0<br/>function longest(string mask)<br/>object line = gets(fn)<br/>string newmask<br/>    if atom(line) then return mask end if<br/>    newmask = allx(line)<br/>    if not match(mask,newmask) then return longest(mask) end if<br/>    mask = longest(newmask)<br/>    if match(mask,newmask) then<br/>        puts(1,line)<br/>    end if<br/>    return mask<br/>end function<br/>\u00a0<br/>?longest(\"x\")<br/>\u00a0<br/>close(fn)<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(mapc prinl<br/>   (maxi '((L) (length (car L)))<br/>      (by length group<br/>         (in NIL<br/>            (make (until (eof) (link (line)))) ) ) ) )</pre>"}, {"lang": "Pike", "loc": 20, "block": "<pre class=\"pike highlighted_source\">int main<span class=\"br0\">(</span>int argc, array argv<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span> <br/>    string longest <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>Stdio.<span class=\"me1\">stdin</span>.<span class=\"me1\">line_iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span> string line<span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> sizeof<span class=\"br0\">(</span>indices<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">-</span> indices<span class=\"br0\">(</span>longest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">{</span> <br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>zero_type<span class=\"br0\">(</span>remove_call_out<span class=\"br0\">(</span>write<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>            longest <span class=\"sy0\">=</span> line<span class=\"sy0\">;</span> <br/>            call_out<span class=\"br0\">(</span>write, <span class=\"nu0\">0</span>, line<span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span> <br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span>sizeof<span class=\"br0\">(</span>indices<span class=\"br0\">(</span>longest<span class=\"br0\">)</span> <span class=\"sy0\">-</span> indices<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>        <span class=\"br0\">{</span> <br/>            call_out<span class=\"br0\">(</span>write, <span class=\"nu0\">0</span>, line<span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span> <br/>    call_out<span class=\"br0\">(</span>exit, <span class=\"nu0\">0.01</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>read: procedure options (main);  /* 18 January 2012. */<br/>   declare line character (100) varying controlled;<br/>   declare text character (100) varying;<br/>   declare max_length fixed binary;<br/>   declare in file input;<br/>\u00a0<br/>   on endfile (in) go to done;<br/>\u00a0<br/>   open file (in) title ('/readline.pli,type(text),recsize(100)');<br/>\u00a0<br/>   max_length = 0;<br/>   do forever;<br/>      get file (in) edit (text) (L);<br/>      put skip list (text);<br/>      if length (text) &gt; max_length then<br/>         do;<br/>            max_length = length(text);<br/>            /* empty the stack */<br/>            do while (allocation(line) &gt; 0);<br/>               free line;<br/>            end;<br/>            allocate line;<br/>            line = text;<br/>         end;<br/>      else if length(text) = max_length then<br/>         do;<br/>            allocate line;<br/>            line = text;<br/>         end;<br/>   end;<br/>\u00a0<br/>done:<br/>   put skip list (max_length || ' is the length of the longest line(s)' );<br/>   do while (allocation(line) &gt; 0);<br/>      put skip list (line);<br/>      free line;<br/>   end;<br/>\u00a0<br/>end read;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 42, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"co1\">#  Get-Content strips out any type of line break and creates an array of strings</span><br/><span class=\"co1\">#  We'll join them back together and put a specific type of line break back in</span><br/><span class=\"re0\">$File</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw1\">Get-Content</span> C:\\Test\\File.txt <span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span><br/>\u00a0<br/><span class=\"re0\">$LongestString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$LongestStrings</span> <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"co1\">#  While the file string still still exists</span><br/><span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$File</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Set the String to the first string and File to any remaining strings</span><br/>    <span class=\"re0\">$String</span><span class=\"sy0\">,</span> <span class=\"re0\">$File</span> <span class=\"sy0\">=</span> <span class=\"re0\">$File</span>.Split<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">#  Strip off characters until one or both strings are zero length</span><br/>    <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"re0\">$LongestString</span><br/>    <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span><br/>    <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$A</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$B</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span>.Substring<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <span class=\"re0\">$B</span>.Substring<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  If A is zero length...</span><br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"kw4\">-not</span> <span class=\"re0\">$A</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  If $B is not zero length (and therefore String is longer than LongestString)...</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$B</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$LongestString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span><br/>            <span class=\"re0\">$LongestStrings</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"co1\">#  Else ($B is also zero length, and therefore String is the same length as LongestString)...</span><br/>        <span class=\"kw3\">Else</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$LongestStrings</span> <span class=\"sy0\">=</span> <span class=\"re0\">$LongestStrings</span><span class=\"sy0\">,</span> <span class=\"re0\">$String</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Output longest strings</span><br/><span class=\"re0\">$LongestStrings</span>.Split<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>\"</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 48, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i ConsoleWrite<span class=\"br0\">(</span>t.s<span class=\"br0\">)</span>  <span class=\"co1\">; compile using /CONSOLE option</span><br/>        <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">PrintN</span> <span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i StdOut<span class=\"br0\">(</span>t.s<span class=\"br0\">)</span>  <span class=\"co1\">; compile using /CONSOLE option</span><br/>        <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>s:<br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"a\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"bb\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ccc\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ddd\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ee\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"f\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"ggg\"</span><br/><span class=\"kw1\">Data</span>.s <span class=\"st0\">\"~\"</span>\t<span class=\"co1\">; the tilda is only to keep the code compact</span><br/>e:\t\t<span class=\"co1\">; and easy to understand</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/>l$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span>\t\t<span class=\"co1\">; memory allocation for strings is automatic</span><br/>a$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span>\t\t<span class=\"co1\">; in fact these two lines are unnecessary</span><br/>\u00a0<br/><span class=\"kw1\">Restore</span> s<br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/><span class=\"kw1\">Read</span>.s s$<br/><span class=\"kw1\">If</span> s$<span class=\"sy0\">=</span><span class=\"st0\">\"~\"</span>:<span class=\"kw1\">Break</span>:<span class=\"kw1\">EndIf</span><br/>s$<span class=\"sy0\">+</span>#CRLF$<br/>s<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span>:l<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>l$<span class=\"br0\">)</span>\t<span class=\"co1\">; using s$ allows the use of s as an integer type</span><br/><span class=\"kw1\">If</span>     s<span class=\"sy0\">&gt;</span>l\t\t:l$<span class=\"sy0\">=</span>s$:a$<span class=\"sy0\">=</span>l$<br/><span class=\"kw1\">ElseIf</span> s<span class=\"sy0\">=</span>l\t\t:a$<span class=\"sy0\">+</span>s$<br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Forever</span><br/>\u00a0<br/>StdOut<span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">fileinput</span><br/>\u00a0<br/><span class=\"co1\"># This returns True if the second string has a value on the </span><br/><span class=\"co1\"># same index as the last index of the first string. It runs</span><br/><span class=\"co1\"># faster than trimming the strings because it runs len once</span><br/><span class=\"co1\"># and is a single index lookup versus slicing both strings </span><br/><span class=\"co1\"># one character at a time.</span><br/><span class=\"kw1\">def</span> longer<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        b<span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">except</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/>longest<span class=\"sy0\">,</span> lines <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">fileinput</span>.<span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> longer<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> longest<span class=\"br0\">)</span>:<br/>        lines<span class=\"sy0\">,</span> longest <span class=\"sy0\">=</span> x<span class=\"sy0\">,</span> x<br/>    <span class=\"kw1\">elif</span> <span class=\"kw1\">not</span> longer<span class=\"br0\">(</span>longest<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>        lines +<span class=\"sy0\">=</span> x<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>lines<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (newline? c) (equal? c #\\newline))<br/>(define eof? eof-object?)<br/>\u00a0<br/>(let loop ([O  '()] [C  '(#\\newline)] [rI '()] [rO '()] [rC '()])<br/>  (let* ([i (read-char)] [o (car C)] [i:rI (cons i rI)] [i:rC (cons i rC)])<br/>    (cond [(eof? i) (for-each write-char O)]<br/>          [(and (newline? o) (newline? i))<br/>           (let ([O (reverse i:rC)]) (loop O O '() i:rC i:rC))]<br/>          [(newline? i) (loop O O       '()  rO rO)]<br/>          [(newline? o) (loop O C       i:rI rO i:rI)]<br/>          [else         (loop O (cdr C) i:rI rO i:rC)])))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 19, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reads a file  and  displays  the  longest [widest]  record(s) [line(s)]. */</span><br/><span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> notReady                               <span class=\"coMULTI\">/*when E-O-F is reached,  jump/branch. */</span><br/>iFID= <span class=\"st0\">'LONGEST.TXT'</span>                              <span class=\"coMULTI\">/*the default file identifier for input*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> fid <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/>    <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;          iFID=fid    <span class=\"coMULTI\">/*Specified?   Then use what's given.  */</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>!=                                               <span class=\"coMULTI\">/*the maximum width  (so far).         */</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;    _=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span>;  \u00a0?=_         <span class=\"coMULTI\">/*read a line from the input file.     */</span><br/>    t=<span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*don't do the initialization next time*/</span><br/>        <span class=\"kw1\">do</span> #=t  <span class=\"kw2\">for</span> t;   \u00a0!=?;      \u00a0?=;        $=<span class=\"sy0\">.</span> <span class=\"sy0\">||</span> _;       <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*just do 1st time.*/</span><br/>        <span class=\"kw1\">do</span> #=<span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"st0\">' '</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"kw2\">for</span> <span class=\"nu0\">1</span>;  $=;             <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*found widest rec.*/</span><br/>        <span class=\"kw1\">do</span> #=<span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>     <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"kw2\">for</span> <span class=\"nu0\">1</span>;  $=$<span class=\"st0\">'a0d'</span>x <span class=\"sy0\">||</span> _; <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*append it to  $. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  variable  #  isn't really used.*/</span><br/>   \u00a0!=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,  <span class=\"kw6\">max</span><span class=\"br0\">(</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*!:  is the max length record, so far.*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  comes here when file gets E\u2500O\u2500F*/</span><br/>notReady:   <span class=\"kw1\">do</span> j=<span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*handle the case of no input*/</span><br/>            <span class=\"kw1\">say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*display (all) the longest records.   */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                          <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Longest string challenge<br/>\u00a0<br/>load \"stdlib.ring\"<br/>\u00a0<br/>test = [\"a\", \"bb\", \"ccc\", \"ddd\", \"ee\", \"f\", \"ggg\"]<br/>test1 = [] <br/>test2 = []<br/>\u00a0<br/>for n = 1 to len(test)<br/>    add(test1, [test[n], len(test[n])])<br/>next<br/>sortFirstSecond(test1, 2)<br/>\u00a0<br/>for n = len(test1) to 2 step -1<br/>    if test1[n][2] = test1[n-1][2]<br/>      add(test2, test1[n][1])<br/>    else<br/>      add(test2, test1[n][1])<br/>      exit<br/>    ok<br/>next<br/>test2 = sort(test2)<br/>see test2 + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 17, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Without restrictions</span><br/><span class=\"kw1\">BEGIN</span> <span class=\"br0\">{</span><br/>   v = <span class=\"br0\">[</span> <span class=\"br0\">]</span><br/>   m = <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>n = <span class=\"re0\">$_</span>.<span class=\"me1\">length</span><br/><span class=\"kw1\">if</span> n == m <span class=\"kw1\">then</span><br/>   v <span class=\"sy0\">&lt;&lt;</span>= <span class=\"re0\">$_</span><br/><span class=\"kw1\">elsif</span> n <span class=\"sy0\">&gt;</span> m <span class=\"kw1\">then</span><br/>   v = <span class=\"br0\">[</span>$_<span class=\"br0\">]</span><br/>   m = n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"br0\">{</span><br/>   v.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> s <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">sqliteconnect #mem, \":memory:\"                                                    ' Create in memory DB<br/>#mem execute(\"CREATE TABLE data(str)\")                                            ' And fields to hold the string data<br/>\u00a0<br/>strings$ = \"a bb ccc ddd ee f ggg\"                                                ' The given string data<br/>\u00a0<br/>while word$(strings$,i + 1,\" \") &lt;&gt; \"\"<br/> i = i + 1<br/> #mem execute(\"INSERT INTO data VALUES('\";word$(strings$,i,\" \");\"')\")             ' insert the strings in to the DB<br/>wend<br/>\u00a0<br/>#mem execute(\"SELECT length(str) as leng, str FROM data ORDER BY leng desc,str\")  ' pull data in reverse lenght sequence<br/>WHILE #mem hasanswer()<br/>      #row = #mem #nextrow()<br/>      leng = #row leng()<br/>      str$ = #row str$()<br/>print leng;\" \";str$                                                               ' print the data<br/>WEND</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> longest <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span>args.<span class=\"me1\">head</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span>.<span class=\"me1\">toIterable</span>.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">max</span>.<span class=\"sy0\">_</span>2<br/>println<span class=\"br0\">(</span>longest mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">var l = <span class=\"st0\">''</span>;  <span class=\"co1\"># Sample longest string seen.</span><br/>var a = <span class=\"st0\">''</span>;  <span class=\"co1\"># Accumulator to save longest strings.</span><br/>\u00a0<br/>STDIN.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    n.<span class=\"me1\">substr</span><span class=\"br0\">(</span>l.<span class=\"me1\">len</span><span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>a = n; l = n<span class=\"br0\">)</span><br/>                   \u00a0: <span class=\"br0\">(</span>!l.<span class=\"me1\">substr</span><span class=\"br0\">(</span>n.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> a.<span class=\"me1\">concat</span>!<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span> a;</pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\">#!/usr/bin/env tclsh</span><br/>\u00a0<br/><span class=\"kw1\">set</span> longest z<br/><span class=\"kw1\">set</span> output <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin line<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> comparison <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat z <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$line</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$longest</span> eq <span class=\"re0\">$comparison</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># this line is equally long</span><br/>        <span class=\"kw2\">append</span> output <span class=\"re0\">$line</span> \\n<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> match <span class=\"sy0\">$</span><span class=\"br0\">{</span>longest<span class=\"br0\">}</span>z<span class=\"sy0\">*</span> <span class=\"re0\">$comparison</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># this line is longer</span><br/>        <span class=\"kw1\">set</span> longest <span class=\"re0\">$comparison</span><br/>        <span class=\"kw1\">set</span> output <span class=\"st0\">\"$line<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> -nonewline <span class=\"re0\">$output</span></pre>"}, {"lang": "VBScript", "loc": 27, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'Read the input file.  This assumes that the file is in the same<br/></span><span class=\"co1\">'directory as the script.<br/></span><span class=\"kw4\">Set</span> objfso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/><span class=\"kw4\">Set</span> objfile = objfso.OpenTextFile(objfso.GetParentFolderName(WScript.ScriptFullName) &amp;_<br/>\t<span class=\"st0\">\"\\input.txt\"</span>,1)<br/>\u00a0<br/>list = <span class=\"st0\">\"\"</span><br/>previous_line = <span class=\"st0\">\"\"</span><br/>l = Len(previous_line)<br/>\u00a0<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> objfile.AtEndOfStream<br/>\tcurrent_line = objfile.ReadLine<br/>\t<span class=\"kw3\">If</span> Mid(current_line,l+1,1) &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>\t\tlist = current_line &amp; vbCrLf<br/>\t\tprevious_line = current_line<br/>\t\tl = Len(previous_line)<br/>\t<span class=\"kw3\">ElseIf</span> Mid(current_line,l,1) &lt;&gt; <span class=\"st0\">\"\"</span>  <span class=\"kw3\">And</span> Mid(current_line,(l+1),1) = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>\t\tlist = list &amp; current_line &amp; vbCrLf<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Loop</span><br/>\u00a0<br/>WScript.Echo list<br/>\u00a0<br/>objfile.<span class=\"kw3\">Close</span><br/><span class=\"kw4\">Set</span> objfso = <span class=\"kw5\">Nothing</span><br/>\u00a0</pre>"}, {"lang": "XSLT 2.0", "loc": 7, "block": "<pre class=\"text highlighted_source\">&lt;xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;<br/>&lt;xsl:output indent=\"yes\" encoding=\"UTF-8\" omit-xml-declaration=\"yes\" /&gt;     <br/>&lt;xsl:template match=\"/*\"&gt;<br/>  &lt;t&gt;&lt;xsl:copy-of select=\"for $l in max( for $s in s return string-length($s))<br/>\t  return s[string-length(.) eq $l]\" /&gt;&lt;/t&gt;<br/>&lt;/xsl:template&gt;<br/>&lt;/xsl:stylesheet&gt;</pre>"}, {"lang": "zkl", "loc": 16, "block": "<pre class=\"text highlighted_source\">fcn longer(a,b){ //--&gt;0,1,2 (same, a longer, b longer)<br/>   while(a and b){a=a.del(0); b=b.del(0);}<br/>   if (not a and not b) return(0); // a &amp; b same length<br/>   if(a) return(1); \t// a is longer<br/>   2\t\t\t// b is longer<br/>}<br/>\u00a0<br/>text:=a:=ask(\"text: \").strip(); <br/>while(b:=ask(\"text: \").strip()){<br/>   switch(longer(a,b)){<br/>      case(0){ text=String(text,\"\\n\",b) }  // a.len()==b.len()<br/>      case(1){ }\t\t// a.len&gt;b.len()<br/>      case(2){ text=a=b }\t// a.len&gt;b.len()<br/>   } //switch<br/>}<br/>println(text);</pre>"}]}