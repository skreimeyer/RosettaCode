{"task": "Least_common_multiple", "blocks": [{"lang": "8th", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: gcd \\ a b -- gcd<br/>\tdup 0 n:= if drop\u00a0;; then<br/>\ttuck \\ b a b<br/>\tn:mod \\ b a-mod-b<br/>\trecurse\u00a0; \t<br/>\u00a0<br/>: lcm \\ m n <br/>\t2dup \\ m n m n<br/>\tn:* \\ m n m*n<br/>\tn:abs \\ m n abs(m*n)<br/>\t-rot \\ abs(m*n) m n <br/>\tgcd \\ abs(m*n) gcd(m.n)<br/>\tn:/mod \\ abs / gcd <br/>\tnip \\ abs div gcd<br/>;<br/>\u00a0<br/>: demo \\ n m -- <br/>\t2dup \"LCM of \" . . \" and \" . . \" = \" . lcm .\u00a0;\t<br/>\u00a0<br/>12 18 demo cr<br/>-6 14 demo cr<br/>35  0 demo cr<br/>\u00a0<br/>\u00a0<br/>bye</pre>"}, {"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Lcm_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Gcd <span class=\"br0\">(</span>A, B\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>      M\u00a0: Integer\u00a0:= A;<br/>      N\u00a0: Integer\u00a0:= B;<br/>      T\u00a0: Integer;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> N /= <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         T\u00a0:= M;<br/>         M\u00a0:= N;<br/>         N\u00a0:= T <span class=\"kw2\">mod</span> N;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> M;<br/>   <span class=\"kw1\">end</span> Gcd;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Lcm <span class=\"br0\">(</span>A, B\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> A = <span class=\"nu0\">0</span> <span class=\"kw2\">or</span> B = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span> <span class=\"br0\">(</span>A<span class=\"br0\">)</span> * <span class=\"br0\">(</span><span class=\"kw2\">abs</span> <span class=\"br0\">(</span>B<span class=\"br0\">)</span> / Gcd <span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Lcm;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"LCM of 12, 18 is\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Lcm <span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"LCM of -6, 14 is\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Lcm <span class=\"br0\">(</span>-<span class=\"nu0\">6</span>, <span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"LCM of 35, 0 is\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Lcm <span class=\"br0\">(</span><span class=\"nu0\">35</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Lcm_Test;</pre>"}, {"lang": "ALGOL 68", "loc": 17, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">PROC</span> gcd <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> m<span class=\"sy1\">,</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> a <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> m<span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> a<span class=\"sy1\">=</span>0 <span class=\"kw16\">OR</span> b<span class=\"sy1\">=</span>0 <span class=\"kw2\">THEN</span> 0 <span class=\"kw2\">ELSE</span><br/>\t <span class=\"kw2\">WHILE</span> b <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">DO</span> <span class=\"kw3\">INT</span> t <span class=\"sy1\">=</span> b<span class=\"sy1\">;</span> b <span class=\"sy1\">:=</span> a <span class=\"kw12\">MOD</span> b<span class=\"sy1\">;</span> a <span class=\"sy1\">:=</span> t <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t a<br/>      <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">PROC</span> lcm <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> m<span class=\"sy1\">,</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span> <span class=\"br0\">(</span> m<span class=\"sy1\">*</span>n <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> 0 <span class=\"sy1\">|</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>m<span class=\"sy1\">*</span>n<span class=\"br0\">)</span> <span class=\"sy1\">%</span> gcd <span class=\"br0\">(</span>m<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> m<span class=\"sy1\">=</span>12<span class=\"sy1\">,</span> n<span class=\"sy1\">=</span>18<span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$gxg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>3<span class=\"br0\">(</span>xgxg<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span>l$<span class=\"sy1\">,</span><br/>\t    <span class=\"st0\">\"The least common multiple of\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> <span class=\"st0\">\"and\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"st0\">\"is\"</span><span class=\"sy1\">,</span> lcm<span class=\"br0\">(</span>m<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t    <span class=\"st0\">\"and their greatest common divisor is\"</span><span class=\"sy1\">,</span> gcd<span class=\"br0\">(</span>m<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 9, "block": "<pre class=\"text highlighted_source\">begin<br/>    integer procedure gcd ( integer value a, b )\u00a0;<br/>        if b = 0 then a else gcd( b, a rem abs(b) );<br/>\u00a0<br/>    integer procedure lcm( integer value a, b )\u00a0;<br/>        abs( a * b ) div gcd( a, b );<br/>\u00a0<br/>    write( lcm( 15, 20  ) );<br/>end.</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      12^18<br/>36</pre>"}, {"lang": "AppleScript", "loc": 45, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- LEAST COMMON MULTIPLE -----------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- lcm\u00a0:: Integral a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> lcm<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">or</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">else</span><br/>        abs<span class=\"br0\">(</span>x <span class=\"kw2\">div</span> <span class=\"br0\">(</span>gcd<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> lcm<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; 36</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- abs\u00a0:: Num a =&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"sy0\">-</span>x<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> abs<br/>\u00a0<br/><span class=\"co1\">-- gcd\u00a0:: Integral a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> gcd<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                a<br/>            <span class=\"kw3\">else</span><br/>                |\u03bb|<span class=\"br0\">(</span>b, a <span class=\"kw2\">mod</span> b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw1\">result</span><span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, abs<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> gcd</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>&lt; a , b &gt;\n\n( return , \n\n        abs ( @a * @b ) /\n       \u00a0!gcd( @a , @b )\n\n)</pre>"}, {"lang": "Assembly", "loc": 93, "block": "<pre class=\"asm highlighted_source\">\u00a0<br/><span class=\"co1\">; lcm.asm: calculates the least common multiple</span><br/><span class=\"co1\">; of two positive integers</span><br/><span class=\"co1\">;</span><br/><span class=\"co1\">; nasm x86_64 assembly (linux) with libc</span><br/><span class=\"co1\">; assemble: nasm -felf64 lcm.asm; gcc lcm.o</span><br/><span class=\"co1\">; usage: ./a.out [number1] [number2]</span><br/>\u00a0<br/>    <span class=\"kw5\">global</span> main<br/>    <span class=\"kw5\">extern</span> printf <span class=\"co1\">; c function: prints formatted output</span><br/>    <span class=\"kw5\">extern</span> strtol <span class=\"co1\">; c function: converts strings to longs</span><br/>\u00a0<br/>    <span class=\"kw5\">section</span> <span class=\"kw5\">.text</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rbp</span>    <span class=\"co1\">; set up stack frame</span><br/>\u00a0<br/>    <span class=\"co1\">; rdi contains argc</span><br/>    <span class=\"co1\">; if less than 3, exit</span><br/>    <span class=\"kw1\">cmp</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">jl</span> incorrect_usage<br/>\u00a0<br/>    <span class=\"co1\">; push first argument as number</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">rsi</span><span class=\"sy1\">+</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span> <span class=\"co1\">; base 10</span><br/>    <span class=\"kw1\">call</span> strtol<br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rax</span><br/>\u00a0<br/>    <span class=\"co1\">; push second argument as number</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">rsi</span><span class=\"sy1\">+</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span> <span class=\"co1\">; base 10</span><br/>    <span class=\"kw1\">call</span> strtol<br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rax</span><br/>\u00a0<br/>    <span class=\"co1\">; pop arguments and call get_gcd</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rdi</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">call</span> get_gcd<br/>\u00a0<br/>    <span class=\"co1\">; print value</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span> print_number<br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span> <span class=\"kw4\">rax</span><br/>    <span class=\"kw1\">call</span> printf<br/>\u00a0<br/>    <span class=\"co1\">; exit</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span>  <span class=\"co1\">; 0--exit success</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rbp</span><br/>    <span class=\"kw1\">ret</span><br/>\u00a0<br/>incorrect_usage<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdi</span><span class=\"sy1\">,</span> bad_use_string<br/>    <span class=\"co1\">; rsi already contains argv</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rsi</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">rsi</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">call</span> printf<br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span>  <span class=\"co1\">; 0--exit success</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rbp</span><br/>    <span class=\"kw1\">ret</span><br/>\u00a0<br/>bad_use_string<span class=\"sy1\">:</span><br/>    <span class=\"kw5\">db</span> <span class=\"st0\">\"Usage:\u00a0%s [number1] [number2]\"</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/>print_number<span class=\"sy1\">:</span><br/>    <span class=\"kw5\">db</span> <span class=\"st0\">\"%d\"</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><br/>\u00a0<br/>get_gcd<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rbp</span>    <span class=\"co1\">; set up stack frame</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">jmp</span> <span class=\"kw1\">loop</span><br/>\u00a0<br/><span class=\"kw1\">loop</span><span class=\"sy1\">:</span><br/>    <span class=\"co1\">; keep adding the first argument</span><br/>    <span class=\"co1\">; to itself until a multiple</span><br/>    <span class=\"co1\">; is found. then, return</span><br/>    <span class=\"kw1\">add</span> <span class=\"kw4\">rax</span><span class=\"sy1\">,</span> <span class=\"kw4\">rdi</span><br/>    <span class=\"kw1\">push</span> <span class=\"kw4\">rax</span><br/>    <span class=\"kw1\">mov</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">div</span> <span class=\"kw4\">rsi</span><br/>    <span class=\"kw1\">cmp</span> <span class=\"kw4\">rdx</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rax</span><br/>    <span class=\"kw1\">je</span> gcd_found<br/>    <span class=\"kw1\">jmp</span> <span class=\"kw1\">loop</span><br/>\u00a0<br/>gcd_found<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">pop</span> <span class=\"kw4\">rbp</span>     <br/>    <span class=\"kw1\">ret</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\">LCM<span class=\"br0\">(</span>Number1<span class=\"sy0\">,</span>Number2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>Number1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> || Number2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span><br/> Var <span class=\"sy0\">:=</span> Number1 <span class=\"sy0\">*</span> Number2<br/> <span class=\"kw1\">While</span><span class=\"sy0\">,</span> Number2<br/>  Num <span class=\"sy0\">:=</span> Number2<span class=\"sy0\">,</span> Number2 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>Number1<span class=\"sy0\">,</span>Number2<span class=\"br0\">)</span><span class=\"sy0\">,</span> Number1 <span class=\"sy0\">:=</span> Num<br/> <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Var <span class=\"sy0\">//</span> Number1<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Num1 <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><br/>Num2 <span class=\"sy0\">=</span> <span class=\"nu0\">18</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% LCM<span class=\"br0\">(</span>Num1<span class=\"sy0\">,</span>Num2<span class=\"br0\">)</span></pre>"}, {"lang": "AutoIt", "loc": 15, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _LCM<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><br/>\t<span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Int.htm\"><span class=\"kw3\">Int</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">/</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$c</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><br/>\t\t\t<span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"re0\">$b</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;_LCM</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 22, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># greatest common divisor</span><br/><span class=\"kw6\">function</span> gcd<span class=\"br0\">(</span>m, n,    t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Euclid's method</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt = m<br/>\t\tm = n<br/>\t\tn = t <span class=\"sy3\">%</span> n<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span> m<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># least common multiple</span><br/><span class=\"kw6\">function</span> lcm<span class=\"br0\">(</span>m, n,    r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">||</span> n <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/>\tr = m <span class=\"sy3\">*</span> n <span class=\"sy3\">/</span> gcd<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>\t<span class=\"kw6\">return</span> r <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy5\">?</span> <span class=\"sy3\">-</span>r <span class=\"sy5\">:</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Read two integers from each line of input.</span><br/><span class=\"co1\"># Print their least common multiple.</span><br/><span class=\"br0\">{</span> <span class=\"kw5\">print</span> lcm<span class=\"br0\">(</span><span class=\"re0\">$1</span>, <span class=\"re0\">$2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 22, "block": "<pre class=\"text highlighted_source\">10 DEF FN MOD(A) = INT((A / B - INT(A / B)) * B + .05) * SGN(A / B)<br/>20 INPUT\"M=\";M%<br/>30 INPUT\"N=\";N%<br/>40 GOSUB 100<br/>50 PRINT R<br/>60 END<br/>\u00a0<br/>100 REM LEAST COMMON MULTIPLE M% N%<br/>110 R = 0<br/>120 IF M% = 0 OR N% = 0 THEN RETURN<br/>130 A% = M%\u00a0: B% = N%\u00a0: GOSUB 200\"GCD<br/>140 R = ABS(M%*N%)/R<br/>150 RETURN<br/>\u00a0<br/>200 REM GCD ITERATIVE EUCLID A% B%<br/>210 FOR B = B% TO 0 STEP 0<br/>220     C% = A%<br/>230     A% = B<br/>240     B = FN MOD(C%)<br/>250 NEXT B<br/>260 R = ABS(A%)<br/>270 RETURN</pre>"}, {"lang": "Batch File", "loc": 18, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> num1=12<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> num2=18<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">lcm</span> <span class=\"sy0\">%</span><span class=\"re3\">num1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">num2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">lcm</span> <span class=\"sy0\">&lt;</span>input1<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>input2<span class=\"sy0\">&gt;</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a lcm = <span class=\"sy0\">%</span><span class=\"re3\">num1</span><span class=\"sy0\">%</span>*<span class=\"sy0\">%</span><span class=\"re3\">num2</span><span class=\"sy0\">%</span>/<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> LCM = <span class=\"sy0\">!</span><span class=\"re2\">lcm</span><span class=\"sy0\">!</span><br/>\tpause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a res = <span class=\"sy0\">%</span><span class=\"re3\">1</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">lcm</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "bc", "loc": 22, "block": "<pre class=\"text highlighted_source\">/* greatest common divisor */<br/>define g(m, n) {<br/>\tauto t<br/>\u00a0<br/>\t/* Euclid's method */<br/>\twhile (n\u00a0!= 0) {<br/>\t\tt = m<br/>\t\tm = n<br/>\t\tn = t\u00a0% n<br/>\t}<br/>\treturn (m)<br/>}<br/>\u00a0<br/>/* least common multiple */<br/>define l(m, n) {<br/>\tauto r<br/>\u00a0<br/>\tif (m == 0 || n == 0) return (0)<br/>\tr = m * n / g(m, n)<br/>\tif (r &lt; 0) return (-r)<br/>\treturn (r)<br/>}</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&amp;&gt;:0`2*1-*:&amp;&gt;:#@!#._:0`2*1v<br/>&gt;28*:*:**+:28*&gt;:*:*/\\:vv*-&lt;<br/>|&lt;:%/*:*:*82\\%*:*:*82&lt;&lt;&gt;28v<br/>&gt;$/28*:*:*/*<a class=\"__cf_email__\" data-cfemail=\"9fb1df\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^82::+**:*:*&lt;</pre>"}, {"lang": "Bracmat", "loc": 8, "block": "<pre class=\"text highlighted_source\">(gcd=<br/>  a b<br/>.  \u00a0!arg:(?a.?b)<br/>  &amp;   den$(!a*!b^-1)<br/>    * (!a:&lt;0&amp;-1|1)<br/>    *\u00a0!a<br/>);<br/>out$(gcd$(12.18) gcd$(-6.14) gcd$(35.0) gcd$(117.18))</pre>"}, {"lang": "Brat", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>gcd = { a, b |<br/>  true? { a == 0 }<br/>    { b } <br/>    { gcd(b\u00a0% a, a) }<br/>}<br/>\u00a0<br/>lcm = { a, b | <br/>  a * b / gcd(a, b)<br/>}<br/>\u00a0<br/>p lcm(12, 18) # 36<br/>p lcm(14, 21) # 42<br/>\u00a0</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> m<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> tmp<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> tmp <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span> <span class=\"br0\">}</span>       <br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> lcm<span class=\"br0\">(</span><span class=\"kw4\">int</span> m<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> m <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"lcm(35, 21) =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;boost/math/common_factor.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The least common multiple of 12 and 18 is \"</span> <span class=\"sy1\">&lt;&lt;</span> <br/>      boost<span class=\"sy4\">::</span><span class=\"me2\">math</span><span class=\"sy4\">::</span><span class=\"me2\">lcm</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> , <span class=\"nu0\">18</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ,<span class=\"es1\">\\n</span>\"</span><br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"and the greatest common divisor \"</span> <span class=\"sy1\">&lt;&lt;</span> boost<span class=\"sy4\">::</span><span class=\"me2\">math</span><span class=\"sy4\">::</span><span class=\"me2\">gcd</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> , <span class=\"nu0\">18</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 17, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">Using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> m, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">:</span> gcd<span class=\"br0\">(</span>n, n <span class=\"sy0\">%</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> lcm<span class=\"br0\">(</span><span class=\"kw4\">int</span> m, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm(12,18)=\"</span> <span class=\"sy0\">+</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span>,<span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> gcd <br/>      <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> b<span class=\"br0\">)</span><br/>      a<br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> b, <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lcm <br/>      <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; to calculate the lcm for a variable number of arguments</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lcmv <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> v<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> lcm v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 63, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> show-lcm<span class=\"sy0\">.</span><br/>\u00a0<br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       REPOSITORY<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">FUNCTION</span> lcm<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"lcm(35, 21) = \"</span> <span class=\"kw3\">FUNCTION</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> show-lcm<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       FUNCTION-ID<span class=\"sy0\">.</span> lcm<span class=\"sy0\">.</span><br/>\u00a0<br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       REPOSITORY<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">FUNCTION</span> gcd<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  m                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  n                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ret                     <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">VALUE</span> m<span class=\"sy0\">,</span> n RETURNING ret<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">COMPUTE</span> ret <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> ABS<span class=\"br0\">(</span>m<span class=\"sy0\"> * </span>n<span class=\"br0\">)</span><span class=\"sy0\"> / </span><span class=\"kw3\">FUNCTION</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">FUNCTION</span> lcm<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       FUNCTION-ID<span class=\"sy0\">.</span> gcd<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  temp                    <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  x                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  y                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  m                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  n                       <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ret                     <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">VALUE</span> m<span class=\"sy0\">,</span> n RETURNING ret<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">MOVE</span> m <span class=\"kw2\">to</span> x<br/>           <span class=\"kw2\">MOVE</span> n <span class=\"kw2\">to</span> y<br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>               <span class=\"kw2\">MOVE</span> x <span class=\"kw2\">TO</span> temp<br/>               <span class=\"kw2\">MOVE</span> y <span class=\"kw2\">TO</span> x<br/>               <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> Y<br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> ABS<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> ret<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">FUNCTION</span> gcd<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>lcm <span class=\"nu0\">12</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><br/><span class=\"nu0\">36</span><br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>lcm <span class=\"nu0\">12</span> <span class=\"nu0\">18</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><br/><span class=\"nu0\">396</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T gcd<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T a<span class=\"sy0\">,</span> T b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> t <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> a <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span><br/>        a <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T lcm<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T m<span class=\"sy0\">,</span> T n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> abs<span class=\"br0\">(</span><span class=\"br0\">(</span>m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    lcm<span class=\"br0\">(</span><span class=\"st0\">\"2562047788015215500854906332309589561\"</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"6795454494268282920431565661684282819\"</span>.<span class=\"me1\">BigInt</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span>Lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Dart", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>main() {<br/>\tint x=8;<br/>  int y=12;<br/>int z= gcd(x,y);<br/>  var lcm=(x*y)/z;<br/>  print('$lcm');<br/>  }<br/>\u00a0<br/>int gcd(int a,int b)<br/>{<br/>  if(b==0)<br/>    return a;<br/>  if(b!=0)<br/>    return gcd(b,a%b);<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lcm <span class=\"nu0\">0</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">0</span><br/><span class=\"br0\">(</span>lcm <span class=\"nu0\">444</span> <span class=\"nu0\">888</span><span class=\"br0\">)</span>\u2192 <span class=\"nu0\">888</span><br/><span class=\"br0\">(</span>lcm <span class=\"nu0\">888</span> <span class=\"nu0\">999</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">7992</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>lcm* <span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>foldl lcm <span class=\"br0\">(</span>first <span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 lcm*<br/><span class=\"br0\">(</span>lcm* '<span class=\"br0\">(</span><span class=\"nu0\">444</span> <span class=\"nu0\">888</span> <span class=\"nu0\">999</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">7992</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 11, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'math.<br/>\u00a0<br/>gcd = (:m:n)((n == 0)iif(m absolute, $(gcd(n,n mod:m)))).<br/>\u00a0<br/>lcm = (:m:n)((m * n) absolute / gcd(m,n)).<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(\"lcm(12,18)=\",lcm(12,18)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def gcd(a,0), do: abs(a)<br/>  def gcd(a,b), do: gcd(b, rem(a,b))<br/>\u00a0<br/>  def lcm(a,b), do: div(abs(a*b), gcd(a,b))<br/>end<br/>\u00a0<br/>IO.puts RC.lcm(-12,15)</pre>"}, {"lang": "Erlang", "loc": 15, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>lcm<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">lcm</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"re5\">A</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"kw2\">rem</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">lcm</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">B</span> <span class=\"kw2\">div</span> <span class=\"re3\">gcd</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 30, "block": "<pre class=\"text highlighted_source\">PROGRAM LCM<br/>\u00a0<br/>PROCEDURE GCD(A,B-&gt;GCD)<br/>    LOCAL C<br/>    WHILE B DO<br/>        C=A<br/>        A=B<br/>        B=C MOD B<br/>    END WHILE<br/>    GCD=ABS(A)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE LCM(M,N-&gt;LCM)<br/>    IF M=0 OR N=0 THEN <br/>        LCM=0<br/>        EXIT PROCEDURE<br/>      ELSE <br/>        GCD(M,N-&gt;GCD)<br/>        LCM=ABS(M*N)/GCD<br/>    END IF<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    LCM(18,12-&gt;LCM)<br/>    PRINT(\"LCM of 18 AND 12 =\";LCM)<br/>    LCM(14,-6-&gt;LCM)<br/>    PRINT(\"LCM of 14 AND -6 =\";LCM)<br/>    LCM(0,35-&gt;LCM)<br/>    PRINT(\"LCM of 0 AND 35 =\";LCM)<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 13, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span><span class=\"kw2\">integer</span> m<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> tmp<br/>    <span class=\"kw1\">while</span> m <span class=\"kw1\">do</span><br/>        tmp <span class=\"sy1\">=</span> m<br/>        m <span class=\"sy1\">=</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span>m<span class=\"br0\">)</span><br/>        n <span class=\"sy1\">=</span> tmp<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> n<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> lcm<span class=\"br0\">(</span><span class=\"kw2\">integer</span> m<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> m <span class=\"sy1\">/</span> gcd<span class=\"br0\">(</span>m<span class=\"sy2\">,</span> n<span class=\"br0\">)</span> <span class=\"sy1\">*</span> n<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Excel", "loc": 1, "block": "<pre class=\"text highlighted_source\">=LCM(A1:J1)</pre>"}, {"lang": "Ezhil", "loc": 58, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0b87\u0b9f\u0bc8\u0baf\u0bbf\u0bb2\u0bbe\u0ba9 \u0bae\u0bc0\u0b9a\u0bcd\u0b9a\u0bbf\u0bb1\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bae\u0b9f\u0b99\u0bcd\u0b95\u0bc1 (LCM), \u0bae\u0bc0\u0baa\u0bcd\u0baa\u0bc6\u0bb0\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf (GCD) \u0b8e\u0ba9\u0bcd\u0ba9 \u0b8e\u0ba9\u0bcd\u0bb1\u0bc1 \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbf\u0b9f\u0bc1\u0bae\u0bcd<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bae(\u0b8e\u0ba3\u0bcd1, \u0b8e\u0ba3\u0bcd2)<br/>\u00a0<br/>\t@(\u0b8e\u0ba3\u0bcd1 == \u0b8e\u0ba3\u0bcd2) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>  ## \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bc1\u0bae\u0bcd \u0b9a\u0bae\u0bae\u0bcd \u0b8e\u0ba9\u0bcd\u0baa\u0ba4\u0bbe\u0bb2\u0bcd, \u0bae\u0bc0\u0baa\u0bca\u0bae \u0b85\u0ba8\u0bcd\u0ba4 \u0b8e\u0ba3\u0bcd\u0ba3\u0bc7\u0ba4\u0bbe\u0ba9\u0bcd<br/>\u00a0<br/>\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b8e\u0ba3\u0bcd1<br/>\u00a0<br/>\t@(\u0b8e\u0ba3\u0bcd1 &gt; \u0b8e\u0ba3\u0bcd2) \u0b87\u0bb2\u0bcd\u0bb2\u0bc8\u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>\t\t\u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd2<br/>\t\t\u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd1<br/>\u00a0<br/>\t\u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>\u00a0<br/>\t\t\u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd1<br/>\t\t\u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1 = \u0b8e\u0ba3\u0bcd2<br/>\u00a0<br/>\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd = \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1\u00a0% \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t@(\u0bae\u0bc0\u0ba4\u0bae\u0bcd == 0) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\u00a0<br/>  ## \u0baa\u0bc6\u0bb0\u0bbf\u0baf \u0b8e\u0ba3\u0bcd\u0ba3\u0bbf\u0bb2\u0bcd \u0b9a\u0bbf\u0bb1\u0bbf\u0baf \u0b8e\u0ba3\u0bcd \u0bae\u0bc0\u0ba4\u0bae\u0bbf\u0ba9\u0bcd\u0bb1\u0bbf \u0bb5\u0b95\u0bc1\u0baa\u0b9f\u0bc1\u0bb5\u0ba4\u0bbe\u0bb2\u0bcd, \u0baa\u0bc6\u0bb0\u0bbf\u0baf \u0b8e\u0ba3\u0bcd\u0ba4\u0bbe\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bae<br/>\u00a0<br/>\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t\u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>\u00a0<br/>\t\t\u0ba4\u0bca\u0b9f\u0b95\u0bcd\u0b95\u0bae\u0bcd = \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1 + 1<br/>\t\t\u0ba8\u0bbf\u0bb1\u0bc8\u0bb5\u0bc1 = \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1 * \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t\t@(\u0b8e\u0ba3\u0bcd = \u0ba4\u0bca\u0b9f\u0b95\u0bcd\u0b95\u0bae\u0bcd, \u0b8e\u0ba3\u0bcd &lt;= \u0ba8\u0bbf\u0bb1\u0bc8\u0bb5\u0bc1, \u0b8e\u0ba3\u0bcd = \u0b8e\u0ba3\u0bcd + 1) \u0b86\u0b95<br/>\u00a0<br/>    ## \u0b92\u0bb5\u0bcd\u0bb5\u0bcb\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bbe\u0b95 \u0b8e\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bc1 \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bbe\u0bb2\u0bc1\u0bae\u0bcd \u0bb5\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0baa\u0bcd \u0baa\u0bbe\u0bb0\u0bcd\u0b95\u0bcd\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0bcb\u0bae\u0bcd. \u0bae\u0bc1\u0ba4\u0bb2\u0bbe\u0bb5\u0ba4\u0bbe\u0b95 \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bbe\u0bb2\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba4\u0bae\u0bbf\u0ba9\u0bcd\u0bb1\u0bbf \u0bb5\u0b95\u0bc1\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0b8e\u0ba3\u0bcd\u0ba4\u0bbe\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bae<br/>\u00a0<br/>\t\t\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd1 = \u0b8e\u0ba3\u0bcd\u00a0% \u0b9a\u0bbf\u0bb1\u0bbf\u0baf\u0ba4\u0bc1<br/>\t\t\t\u0bae\u0bc0\u0ba4\u0bae\u0bcd2 = \u0b8e\u0ba3\u0bcd\u00a0% \u0baa\u0bc6\u0bb0\u0bbf\u0baf\u0ba4\u0bc1<br/>\u00a0<br/>\t\t\t@((\u0bae\u0bc0\u0ba4\u0bae\u0bcd1 == 0) &amp;&amp; (\u0bae\u0bc0\u0ba4\u0bae\u0bcd2 == 0)) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>\t\t\t\t\u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b8e\u0ba3\u0bcd<br/>\t\t\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\t\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\t\u0bae\u0bc1\u0b9f\u0bbf\t<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0b85 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b93\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd \"))<br/>\u0b86 = int(\u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b87\u0ba9\u0bcd\u0ba9\u0bcb\u0bb0\u0bcd \u0b8e\u0ba3\u0bcd\u0ba3\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd \"))<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba4\u0ba8\u0bcd\u0ba4 \u0b87\u0bb0\u0bc1 \u0b8e\u0ba3\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0bae\u0bc0\u0baa\u0bca\u0bae (\u0bae\u0bc0\u0b9a\u0bcd\u0b9a\u0bbf\u0bb1\u0bc1 \u0baa\u0bca\u0ba4\u0bc1 \u0bae\u0b9f\u0b99\u0bcd\u0b95\u0bc1, LCM) = \", \u0bae\u0bc0\u0baa\u0bca\u0bae(\u0b85, \u0b86)<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd x y <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">abs</span> x <span class=\"kw1\">else</span> gcd y <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> lcm x y <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y <span class=\"sy0\">/</span> <span class=\"br0\">(</span>gcd x y<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: math.functions prettyprint\u00a0;<br/>26 28 lcm .</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: gcd ( a b -- n )<br/>  begin dup while tuck mod repeat drop\u00a0;<br/>\u00a0<br/>: lcm ( a b -- n )<br/>  over 0= over 0= or if 2drop 0 exit then<br/>  2dup gcd abs */\u00a0;</pre>"}, {"lang": "Fortran", "loc": 16, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> lcm<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"sy0\">::</span> <span class=\"me2\">a</span>,b<br/>        lcm <span class=\"sy0\">=</span> a<span class=\"sy0\">*</span>b <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> lcm<br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,b,t<br/>        <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>b<span class=\"sy0\">/=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            t <span class=\"sy0\">=</span> b<br/>            b <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">=</span> t<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        gcd <span class=\"sy0\">=</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> gcd<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> lcm <span class=\"br0\">(</span>m <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> m = <span class=\"nu0\">0</span> OrElse n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">If</span> m &lt; n <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> m, n <span class=\"co1\">'' to minimize iterations needed</span><br/>  Var count = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span><br/>    count +=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> <span class=\"br0\">(</span>m * count<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> n  = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Return</span> m * count<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"lcm(12, 18) =\"</span>; lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">18</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"lcm(15, 12) =\"</span>; lcm<span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"lcm(10, 14) =\"</span>; lcm<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[lcm[2562047788015215500854906332309589561, 6795454494268282920431565661684282819]]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 4, "block": "<pre class=\"text highlighted_source\">def<br/>  lcm( _, 0 ) =  0<br/>  lcm( 0, _ ) =  0<br/>  lcm( x, y ) =  abs( (x\\gcd(x, y)) y )</pre>"}, {"lang": "GAP", "loc": 3, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>LcmInt(12, 18);<br/># 36</pre>"}, {"lang": "Go", "loc": 17, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> z <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>\u00a0<br/><span class=\"kw4\">func</span> init<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m<span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><span class=\"st0\">\"2562047788015215500854906332309589561\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    n<span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><span class=\"st0\">\"6795454494268282920431565661684282819\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>z<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>z<span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>&amp;m<span class=\"sy1\">,</span> z<span class=\"sy3\">.</span>GCD<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> &amp;m<span class=\"sy1\">,</span> &amp;n<span class=\"sy1\">)),</span> &amp;n<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 11, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gcd<br/>gcd <span class=\"sy0\">=</span> <span class=\"br0\">{</span> m, n <span class=\"sy0\">-&gt;</span> m <span class=\"sy0\">=</span> m.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> m\u00a0: m<span class=\"sy0\">%</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n\u00a0: gcd<span class=\"br0\">(</span>n, m <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> lcd <span class=\"sy0\">=</span> <span class=\"br0\">{</span> m, n <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> / gcd<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span>m: <span class=\"nu0\">12</span>, n: <span class=\"nu0\">18</span>, l: <span class=\"nu0\">36</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span>m: <span class=\"sy0\">-</span><span class=\"nu0\">6</span>, n: <span class=\"nu0\">14</span>, l: <span class=\"nu0\">42</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span>m: <span class=\"nu0\">35</span>, n: <span class=\"nu0\">0</span>, l: <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> t <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"LCD of $t.m, $t.n is $t.l\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> lcd<span class=\"br0\">(</span>t.<span class=\"me1\">m</span>, t.<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> t.<span class=\"me1\">l</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 24, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\"><br/>10</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"LCM(35, 21) = \"</span>;<br/><span class=\"co3\">20</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> MLCM <span class=\"sy0\">=</span> <span class=\"nu0\">35</span><br/><span class=\"co3\">30</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> NLCM <span class=\"sy0\">=</span> <span class=\"nu0\">21</span><br/><span class=\"co3\">40</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">200</span>: <span class=\"co1\">' Calculate LCM</span><br/><span class=\"co3\">50</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> LCM<br/><span class=\"co3\">60</span> <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a>  <br/><span class=\"co3\"><br/>195</span> <span class=\"co1\">' Calculate LCM</span><br/><span class=\"co3\">200</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> MGCD <span class=\"sy0\">=</span> MLCM<br/><span class=\"co3\">210</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> NGCD <span class=\"sy0\">=</span> NLCM <br/><span class=\"co3\">220</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">400</span>: <span class=\"co1\">' Calculate GCD </span><br/><span class=\"co3\">230</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LCM <span class=\"sy0\">=</span> MLCM <span class=\"sy0\">/</span> GCD <span class=\"sy0\">*</span> NLCM<br/><span class=\"co3\">240</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"co3\"> <br/>395</span> <span class=\"co1\">' Calculate GCD</span><br/><span class=\"co3\">400</span> <span class=\"kw1\">WHILE</span> MGCD <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/><span class=\"co3\">410</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> TMP <span class=\"sy0\">=</span> MGCD<br/><span class=\"co3\">420</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> MGCD <span class=\"sy0\">=</span> NGCD <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> MGCD<br/><span class=\"co3\">430</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> NGCD <span class=\"sy0\">=</span> TMP<br/><span class=\"co3\">440</span> <span class=\"kw1\">WEND</span><br/><span class=\"co3\">450</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> GCD <span class=\"sy0\">=</span> NGCD<br/><span class=\"co3\">460</span> <span class=\"kw1\">RETURN</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lcm\"><span class=\"kw3\">lcm</span></a> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lcm\"><span class=\"kw3\">lcm</span></a> <span class=\"sy0\">_</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lcm\"><span class=\"kw3\">lcm</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lcm\"><span class=\"kw3\">lcm</span></a> x y <span class=\"sy0\">=</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a>` <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:gcd\"><span class=\"kw3\">gcd</span></a> x y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> numbers <br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm of 18, 36 = \"</span><span class=\"sy1\">,</span>lcm<span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"sy1\">,</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm of 0, 9 36 = \"</span><span class=\"sy1\">,</span>lcm<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">      <span class=\"nu0\">12</span> *. <span class=\"nu0\">18</span><br/><span class=\"nu0\">36</span><br/>   <span class=\"nu0\">12</span> *. <span class=\"nu0\">18</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">36</span> <span class=\"nu0\">132</span><br/>   *./ <span class=\"nu0\">12</span> <span class=\"nu0\">18</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">396</span><br/>   <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> *. <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"co1\">NB. for truth valued arguments (0 and 1) it is equivalent to \"and\"</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>   *./~ <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LCM<span class=\"br0\">{</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      Scanner aScanner <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">//prompts user for values to find the LCM for, then saves them to m and n</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter the value of m:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> aScanner.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter the value of n:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> aScanner.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> lcm <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> m <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> m <span class=\"sy0\">:</span><span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"coMULTI\">/* this section increases the value of mm until it is greater  <br/>      / than or equal to nn, then does it again when the lesser <br/>      / becomes the greater--if they aren't equal. If either value is 1,<br/>      / no need to calculate*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lcm <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"kw4\">int</span> mm <span class=\"sy0\">=</span> m, nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span>mm <span class=\"sy0\">!=</span> nn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <span class=\"kw1\">while</span> <span class=\"br0\">(</span>mm <span class=\"sy0\">&lt;</span> nn<span class=\"br0\">)</span> <span class=\"br0\">{</span> mm <span class=\"sy0\">+=</span> m<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>             <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">&lt;</span> mm<span class=\"br0\">)</span> <span class=\"br0\">{</span> nn <span class=\"sy0\">+=</span> n<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span>  <br/>         lcm <span class=\"sy0\">=</span> mm<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm(\"</span> <span class=\"sy0\">+</span> m <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">+</span> <span class=\"st0\">\") = \"</span> <span class=\"sy0\">+</span> lcm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 14, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> LCM<span class=\"br0\">(</span>A<span class=\"br0\">)</span>  <span class=\"co1\">// A is an integer array (e.g. [-50,25,-45,-18,90,447])</span><br/><span class=\"br0\">{</span>   <br/>    <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span> <span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>       while <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> a <span class=\"sy0\">%=</span> b <span class=\"sy0\">:</span> b <span class=\"sy0\">%=</span> a<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <br/>       a <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>c<span class=\"sy0\">*</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* For example:<br/>   LCM([-50,25,-45,-18,90,447]) -&gt; 67050<br/>*/</span></pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\"># Define the helper function to take advantage of jq's tail-recursion optimization<br/>def lcm(m; n):<br/>  def _lcm:<br/>    # state is [m, n, i]<br/>    if (.[2]\u00a0% .[1]) == 0 then .[2] else (.[0:2] + [.[2] + m]) | _lcm end;<br/>  [m, n, m] | _lcm; </pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">lcm(m,n)</pre>"}, {"lang": "K", "loc": 8, "block": "<pre class=\"text highlighted_source\">   gcd:{:[~x;y;_f[y;x!y]]}<br/>   lcm:{_abs _ x*y%gcd[x;y]}<br/>\u00a0<br/>   lcm .'(12 18; -6 14; 35 0)<br/>36 42 0<br/>\u00a0<br/>   lcm/1+!20<br/>232792560</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> gcd<span class=\"br0\">(</span>b, a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><br/>    fun lcm<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b / gcd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>lcm<span class=\"br0\">(</span><span class=\"nu0\">15</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "LabVIEW", "loc": 19, "block": "<pre class=\"text highlighted_source\">define gcd(a,b) =&gt; {<br/>\twhile(#b\u00a0!= 0) =&gt; {<br/>\t\tlocal(t = #b)<br/>\t\t#b = #a\u00a0% #b<br/>\t\t#a = #t<br/>\t}<br/>\treturn #a<br/>}<br/>define lcm(m,n) =&gt; {<br/>\t #m == 0 || #n == 0\u00a0? return 0<br/>\t local(r = (#m * #n) / decimal(gcd(#m, #n)))<br/>\t return integer(#r)-&gt;abs<br/>}<br/>\u00a0<br/>lcm(-6, 14)<br/>lcm(2, 0)<br/>lcm(12, 18)<br/>lcm(12, 22)<br/>lcm(7, 31)</pre>"}, {"lang": "Lasso", "loc": 19, "block": "<pre class=\"text highlighted_source\">define gcd(a,b) =&gt; {<br/>\twhile(#b\u00a0!= 0) =&gt; {<br/>\t\tlocal(t = #b)<br/>\t\t#b = #a\u00a0% #b<br/>\t\t#a = #t<br/>\t}<br/>\treturn #a<br/>}<br/>define lcm(m,n) =&gt; {<br/>\t #m == 0 || #n == 0\u00a0? return 0<br/>\t local(r = (#m * #n) / decimal(gcd(#m, #n)))<br/>\t return integer(#r)-&gt;abs<br/>}<br/>\u00a0<br/>lcm(-6, 14)<br/>lcm(2, 0)<br/>lcm(12, 18)<br/>lcm(12, 22)<br/>lcm(7, 31)</pre>"}, {"lang": "Liberty BASIC", "loc": 16, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">\"Least Common Multiple of 12 and 18 is \"</span>;LCM<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LCM<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>    LCM<span class=\"sy0\">=</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>m<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">/</span>GCD<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GCD<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> b<br/>        c <span class=\"sy0\">=</span> a<br/>        a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> c <span class=\"kw1\">mod</span> b<br/>    <span class=\"kw1\">wend</span><br/>    GCD <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to abs\u00a0:n<br/>  output sqrt product\u00a0:n\u00a0:n<br/>end<br/>\u00a0<br/>to gcd\u00a0:m\u00a0:n<br/>  output ifelse\u00a0:n = 0 [\u00a0:m ] [ gcd\u00a0:n modulo\u00a0:m\u00a0:n ]<br/>end<br/>\u00a0<br/>to lcm\u00a0:m\u00a0:n<br/>  output quotient (abs product\u00a0:m\u00a0:n) gcd\u00a0:m\u00a0:n<br/>end</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> gcd<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> q <span class=\"sy0\">=</span> m<br/>        m <span class=\"sy0\">=</span> n<br/>        n <span class=\"sy0\">=</span> q <span class=\"sy0\">%</span> n<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> lcm<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span> m <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw2\">and</span> m <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span> m<span class=\"sy0\">,</span> n <span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt; ilcm( 12, 18 );<br/>                                   36<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">LCM[18,12]<br/>-&gt; 36</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lcm.html\"><span class=\"kw2\">lcm</span></a><span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> </pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">lcm(a, b);   /* a and b may be integers or polynomials */<br/>\u00a0<br/>/* In Maxima the gcd of two integers is always positive, and a * b = gcd(a, b) * lcm(a, b),<br/>so the lcm may be negative. To get a positive lcm, simply do */<br/>\u00a0<br/>abs(lcm(a, b))</pre>"}, {"lang": "Microsoft Small Basic", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Textwindow.Write(\"LCM(35, 21) = \")<br/>mlcm = 35<br/>nlcm = 21<br/>CalculateLCM()<br/>TextWindow.WriteLine(lcm)<br/>\u00a0<br/>Sub CalculateLCM<br/>  mgcd = mlcm<br/>  ngcd = nlcm <br/>  CalculateGCD() <br/>  lcm = mlcm / gcd * nlcm<br/>EndSub <br/>\u00a0<br/>Sub CalculateGCD<br/>  While mgcd &lt;&gt; 0<br/>    tmp = mgcd<br/>    mgcd = Math.Remainder(ngcd, mgcd)<br/>    ngcd = tmp<br/>  EndWhile<br/>  gcd = ngcd<br/>EndSub<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u0418\u041fA\t\u0418\u041fB\t*\t|x|\t\u041fC\t\u0418\u041fA\t\u0418\u041fB\t/\t[x]\t\u041f9<br/>\u0418\u041fA\t\u0418\u041fB\t\u041fA\t\u0418\u041f9\t*\t-\t\u041fB\tx=0\t05\t\u0418\u041fC<br/>\u0418\u041fA\t/\t\u0421/\u041f</pre>"}, {"lang": "ML", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> gcd <span class=\"br0\">(</span>a, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> b<br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> where <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span><br/>               <span class=\"sy0\">=</span> gcd <span class=\"br0\">(</span>a, b rem a<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> gcd <span class=\"br0\">(</span>b, a rem b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> lcm <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"kw1\">val</span> d <span class=\"sy0\">=</span> gcd <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">in</span> a <span class=\"sy0\">*</span> b div d<br/>                 <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 31, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> LeastCommonMultiple;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteString<span class=\"sy0\">,</span> WriteLn;<br/><span class=\"kw1\">FROM</span> SWholeIO <span class=\"kw1\">IMPORT</span><br/>  WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GCD<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> N<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>  Tmp<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">WHILE</span> M &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>    Tmp <span class=\"sy0\">:=</span> M;<br/>    M <span class=\"sy0\">:=</span> N <span class=\"kw1\">MOD</span> M;<br/>    N <span class=\"sy0\">:=</span> Tmp;<br/>  <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">RETURN</span> N;<br/><span class=\"kw1\">END</span> GCD;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> LCM<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> N<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">RETURN</span> M <span class=\"sy0\">/</span> GCD<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> N<span class=\"br0\">)</span> <span class=\"sy0\">*</span> N;<br/><span class=\"kw1\">END</span> LCM;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  WriteString<span class=\"br0\">(</span><span class=\"st0\">\"LCM(35, 21) = \"</span><span class=\"br0\">)</span>;<br/>  WriteInt<span class=\"br0\">(</span>LCM<span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  WriteLn;<br/><span class=\"kw1\">END</span> LeastCommonMultiple.<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 71, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">3000</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><br/>method lcm<span class=\"br0\">(</span>m_, n_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  L_ = m_ <span class=\"sy0\">*</span> n_\u00a0% gcd<span class=\"br0\">(</span>m_, n_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> L_<br/>\u00a0<br/><span class=\"co1\">-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><br/><span class=\"co1\">-- Euclid's algorithm - iterative implementation</span><br/>method gcd<span class=\"br0\">(</span>m_, n_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">loop</span> while n_ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    c_ = m_ <span class=\"sy0\">//</span> n_<br/>    m_ = n_<br/>    n_ = c_<br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> m_<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg samples<br/>  <span class=\"kw1\">if</span> samples = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> samples = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span><br/>    samples = <span class=\"st0\">'-6 14 =    42 |'</span> -<br/>               <span class=\"st0\">'3  4 =    12 |'</span> -<br/>              <span class=\"st0\">'18 12 =    36 |'</span> -<br/>               <span class=\"st0\">'2  0 =     0 |'</span> -<br/>               <span class=\"st0\">'0 85 =     0 |'</span> -<br/>              <span class=\"st0\">'12 18 =    36 |'</span> -<br/>               <span class=\"st0\">'5 12 =    60 |'</span> -<br/>              <span class=\"st0\">'12 22 =   132 |'</span> -<br/>               <span class=\"st0\">'7 31 =   217 |'</span> -<br/>             <span class=\"st0\">'117 18 =   234 |'</span> -<br/>              <span class=\"st0\">'38 46 =   874 |'</span> -<br/>           <span class=\"st0\">'18 12 -5 =   180 |'</span> -<br/>           <span class=\"st0\">'-5 18 12 =   180 |'</span> - <span class=\"co1\">-- confirm that other permutations work</span><br/>           <span class=\"st0\">'12 -5 18 =   180 |'</span> -<br/>        <span class=\"st0\">'18 12 -5 97 = 17460 |'</span> -<br/>              <span class=\"st0\">'30 42 =   210 |'</span> -<br/>              <span class=\"st0\">'30 42 =     . |'</span> - <span class=\"co1\">-- 210; no verification requested</span><br/>              <span class=\"st0\">'18 12'</span>             <span class=\"co1\">-- 36</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> while samples <span class=\"sy0\">\\</span>= <span class=\"st0\">''</span><br/>    <span class=\"kw1\">parse</span> samples sample <span class=\"st0\">'|'</span> samples<br/>    <span class=\"kw1\">loop</span> while sample <span class=\"sy0\">\\</span>= <span class=\"st0\">''</span><br/>      <span class=\"kw1\">parse</span> sample mnvals <span class=\"st0\">'='</span> chk sample<br/>      <span class=\"kw1\">if</span> chk = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> chk = <span class=\"st0\">'.'</span><br/>      mv = mnvals.<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">loop</span> w_ = <span class=\"nu0\">2</span> to mnvals.<span class=\"kw6\">words</span> mnvals<br/>        nv = mnvals.<span class=\"kw6\">word</span><span class=\"br0\">(</span>w_<span class=\"br0\">)</span><br/>        mv = mv.<span class=\"kw6\">abs</span><br/>        nv = nv.<span class=\"kw6\">abs</span><br/>        mv = lcm<span class=\"br0\">(</span>mv, nv<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> w_<br/>      lv = mv<br/>      <span class=\"kw1\">select</span> <span class=\"kw2\">case</span> chk<br/>        <span class=\"kw3\">when</span> <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> state = <span class=\"st0\">''</span><br/>        <span class=\"kw3\">when</span> lv  <span class=\"kw3\">then</span> state = <span class=\"st0\">'(verified)'</span><br/>        <span class=\"kw3\">otherwise</span>     state = <span class=\"st0\">'(failed)'</span><br/>        <span class=\"kw3\">end</span><br/>      mnvals = mnvals.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">','</span>, <span class=\"st0\">', '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'lcm of'</span> mnvals.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">15</span>.<span class=\"kw6\">max</span><span class=\"br0\">(</span>mnvals.<span class=\"me0\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">'is'</span> lv.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>.<span class=\"kw6\">max</span><span class=\"br0\">(</span>lv.<span class=\"me0\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span> state<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 15, "block": "<pre class=\"text highlighted_source\">proc gcd(u, v): auto =<br/>  var<br/>    t = 0<br/>    u = u<br/>    v = v<br/>  while v\u00a0!= 0:<br/>    t = u<br/>    u = v<br/>    v = t\u00a0%% v<br/>  abs(u)<br/>\u00a0<br/>proc lcm(a, b): auto = abs(a * b) div gcd(a, b)<br/>\u00a0<br/>echo lcm(12, 18)<br/>echo lcm(-6, 14)</pre>"}, {"lang": "Objeck", "loc": 17, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> LCM <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm(35, 21) = \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>lcm<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> lcm<span class=\"br0\">(</span>m <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> m <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> gcd<span class=\"br0\">(</span>m <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    tmp <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>m <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> tmp <span class=\"sy0\">:=</span> m<span class=\"sy0\">;</span> m <span class=\"sy0\">:=</span> n <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span> n <span class=\"sy0\">:=</span> tmp<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 11, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd u v <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> v <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>gcd v <span class=\"br0\">(</span>u <span class=\"kw1\">mod</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs\"><span class=\"kw3\">abs</span></a> u<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> lcm m n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> m, n <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span>, _ <span class=\"sy0\">|</span> _, <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> m, n <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>gcd m n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"lcm(35, 21) =\u00a0%d\\n\"</span> <span class=\"br0\">(</span>lcm <span class=\"nu0\">21</span> <span class=\"nu0\">35</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">12 18 lcm</pre>"}, {"lang": "ooRexx", "loc": 20, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">say</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">18</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- calculate the greatest common denominator of a numerator/denominator pair</span><br/>::routine gcd private<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> x, y<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> y <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span><br/>      <span class=\"co1\">-- check if they divide evenly</span><br/>      temp = x <span class=\"sy0\">//</span> y<br/>      x = y<br/>      y = temp<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> x<br/>\u00a0<br/><span class=\"co1\">-- calculate the least common multiple of a numerator/denominator pair</span><br/>::routine lcm private<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> x, y<br/>  <span class=\"kw1\">return</span> x <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> y<br/>\u00a0</pre>"}, {"lang": "Order", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8gcd ORDER_PP_FN( \\<br/>8fn(8U, 8V,                            \\<br/>    8if(8isnt_0(8V), 8gcd(8V, 8remainder(8U, 8V)), 8U)))</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8lcm ORDER_PP_FN( \\<br/>8fn(8X, 8Y,                            \\<br/>    8if(8or(8is_0(8X), 8is_0(8Y)),     \\<br/>        0,                             \\<br/>        8quotient(8times(8X, 8Y), 8gcd(8X, 8Y)))))</span><br/><span class=\"co1\">// No support for negative numbers</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span> 8to_lit<span class=\"br0\">(</span>8lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"co1\">// 36</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">lcm</span></pre>"}, {"lang": "Pascal", "loc": 12, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> LeastCommonMultiple<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> lcm<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    lcm <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>lcm <span class=\"kw1\">mod</span> b<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      inc<span class=\"br0\">(</span>lcm<span class=\"sy1\">,</span> a<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'The least common multiple of 12 and 18 is: '</span><span class=\"sy1\">,</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> gcd <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">%</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t<span class=\"re0\">$y</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> lcm <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"re0\">$x</span> <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span> <span class=\"kw1\">or</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> lcm<span class=\"br0\">(</span><span class=\"nu0\">1001</span><span class=\"sy0\">,</span> <span class=\"nu0\">221</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"nu0\">3</span> lcm <span class=\"nu0\">4</span><span class=\"sy0\">;</span>            <span class=\"co1\"># infix</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span>lcm<span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20</span><span class=\"sy0\">;</span>        <span class=\"co1\"># reduction</span><br/><span class=\"kw3\">say</span> <span class=\"sy0\">~</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span> Xlcm <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\"># cross</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">function lcm(integer m, integer n)<br/>    return m / gcd(m, n) * n<br/>end function</pre>"}, {"lang": "PHP", "loc": 16, "block": "<pre class=\"php highlighted_source\"><span class=\"kw1\">echo</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> lcm<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/abs\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> gcd<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de lcm (A B)<br/>   (abs (*/ A B (gcd A B))) )</pre>"}, {"lang": "PL/I", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Calculate the Least Common Multiple of two integers. */<br/>\u00a0<br/>LCM: procedure options (main);          /* 16 October 2013 */<br/>   declare (m, n) fixed binary (31);<br/>\u00a0<br/>   get (m, n);<br/>   put edit ('The LCM of ', m, ' and ', n, ' is', LCM(m, n)) (a, x(1));<br/>\u00a0<br/>LCM: procedure (m, n) returns (fixed binary (31));<br/>   declare (m, n) fixed binary (31) nonassignable;<br/>\u00a0<br/>   if m = 0 | n = 0 then return (0);<br/>   return (abs(m*n) / GCD(m, n));<br/>end LCM;<br/>\u00a0<br/>GCD: procedure (a, b) returns (fixed binary (31)) recursive;<br/>   declare (a, b) fixed binary (31);<br/>\u00a0<br/>   if b = 0 then return (a);<br/>\u00a0<br/>   return (GCD (b, mod(a, b)) );<br/>\u00a0<br/>end GCD;<br/>end LCM;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> gcd <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> pgcd <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$m</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><span class=\"br0\">{</span>pgcd <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">-</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span> <span class=\"br0\">{</span>pgcd <span class=\"re0\">$m</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>pgcd <span class=\"re0\">$n</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> lcm <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>gcd <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>lcm <span class=\"nu0\">12</span> <span class=\"nu0\">18</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 2, "block": "<pre class=\"prolog highlighted_source\">lcm<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> Z<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tZ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">abs</span></a><span class=\"br0\">(</span>X <span class=\"sy3\">*</span> Y<span class=\"br0\">)</span> <span class=\"sy3\">/</span> gcd<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 17, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> GCDiv<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"co1\">; Euclidean algorithm</span><br/>  <span class=\"kw1\">Protected</span> r<br/>  <span class=\"kw1\">While</span> b<br/>    r <span class=\"sy0\">=</span> b<br/>    b <span class=\"sy0\">=</span> a<span class=\"sy0\">%</span>b<br/>    a <span class=\"sy0\">=</span> r<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> a<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> LCM<span class=\"br0\">(</span>m,n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> t<br/>  <span class=\"kw1\">If</span> m <span class=\"kw1\">And</span> n<br/>    t<span class=\"sy0\">=</span>m<span class=\"sy0\">*</span>n<span class=\"sy0\">/</span>GCDiv<span class=\"br0\">(</span>m,n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> t<span class=\"sy0\">*</span>Sign<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> fractions<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> lcm<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>a * b<span class=\"br0\">)</span> / fractions.<span class=\"me1\">gcd</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">if</span> a <span class=\"kw1\">and</span> b <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span><br/><span class=\"nu0\">36</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> lcm<span class=\"br0\">(</span>-<span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/><span class=\"nu0\">42</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">assert</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> lcm<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Qi", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define gcd<br/>  A 0 -&gt; A<br/>  A B -&gt; (gcd B (MOD A B)))<br/>\u00a0<br/>(define lcm A B -&gt; (/ (* A B) (gcd A B)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"%gcd%\" &lt;- function(u, v) {ifelse(u\u00a0%% v\u00a0!= 0, v\u00a0%gcd% (u%%v), v)}<br/>\u00a0<br/>\"%lcm%\" &lt;- function(u, v) { abs(u*v)/(u\u00a0%gcd% v)}<br/>\u00a0<br/>print (50\u00a0%lcm% 75)<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(lcm 3 4 5 6)       \u00a0;returns 60<br/>(lcm 8 108)         \u00a0;returns 216<br/>(gcd 8 108)         \u00a0;returns 4<br/>(gcd 108 216 432)   \u00a0;returns 108</pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">: gcd ( ab-n ) [ tuck mod dup ] while drop\u00a0;<br/>: lcm ( ab-n ) 2over gcd [ * ] dip /\u00a0;</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds the  LCM  (Least Common Multiple)  of any number of integers.      */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">10000</span>                             <span class=\"coMULTI\">/*can handle 10k decimal digit numbers.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of      19  and   0                   is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">19</span>    <span class=\"nu0\">0</span>            <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of       0  and  85                   is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span> <span class=\"nu0\">0</span>   <span class=\"nu0\">85</span>            <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of      14  and  -6                   is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">14</span>,  -<span class=\"nu0\">6</span>            <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of      18  and  12                   is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">18</span>   <span class=\"nu0\">12</span>            <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of      18  and  12  and  -5          is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">18</span>   <span class=\"nu0\">12</span>,   -<span class=\"nu0\">5</span>      <span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of      18  and  12  and  -5  and  97 is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">18</span>,  <span class=\"nu0\">12</span>,   -<span class=\"nu0\">5</span>,   <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'the LCM of 2**19-1  and  2**521-1             is \u2500\u2500\u2500\u25ba  '</span>     lcm<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">19</span>-<span class=\"nu0\">1</span>    <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">521</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]   7th  &amp;  13th  Mersenne primes.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>lcm: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $,_; $=$ _;           <span class=\"kw1\">do</span> i=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  $=$ <span class=\"kw1\">arg</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*i*/</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $ x $                                  <span class=\"coMULTI\">/*obtain the first value in args. */</span><br/>     x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                         <span class=\"coMULTI\">/*use the absolute value of  X.   */</span><br/>               <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>                       <span class=\"coMULTI\">/*process the remainder of args.  */</span><br/>               <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $\u00a0! $;    <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>\u00a0!=-!  <span class=\"coMULTI\">/*pick off the next arg (ABS val).*/</span><br/>               <span class=\"kw1\">if</span>\u00a0!==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                 <span class=\"coMULTI\">/*if zero, then LCM is also zero. */</span><br/>               d=x<span class=\"sy0\">*</span>!                                  <span class=\"coMULTI\">/*calculate part of the LCM here. */</span><br/>                      <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span>\u00a0!==<span class=\"nu0\">0</span>;    <span class=\"kw1\">parse</span>  <span class=\"kw2\">value</span>   x<span class=\"sy0\">//</span>! \u00a0!     <span class=\"kw2\">with</span>    \u00a0!  x<br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span>                 <span class=\"coMULTI\">/* [\u2191]  this is a short &amp; fast GCD*/</span><br/>               x=d%x                                  <span class=\"coMULTI\">/*divide the pre\u2500calculated value.*/</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                        <span class=\"coMULTI\">/* [\u2191]  process subsequent args.  */</span><br/>     <span class=\"kw1\">return</span> x                                         <span class=\"coMULTI\">/*return with the LCM of the args.*/</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see lcm(24,36)<br/>\u00a0<br/>func lcm m,n<br/>     lcm = m*n / gcd(m,n)<br/>     return lcm<br/>\u00a0<br/>func gcd gcd, b<br/>     while b<br/>           c   = gcd<br/>           gcd = b<br/>           b   = c\u00a0% b<br/>     end<br/>     return gcd<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span>.<span class=\"me1\">lcm</span> <span class=\"nu0\">18</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">36</span></pre>"}, {"lang": "Run BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">print lcm(22,44)<br/>\u00a0<br/>function lcm(m,n)<br/> while n<br/>   t = m<br/>   m = n<br/>   n = t mod n<br/> wend<br/>lcm = m<br/>end function</pre>"}, {"lang": "Rust", "loc": 23, "block": "<pre class=\"text highlighted_source\">use std::cmp::{max, min};<br/>\u00a0<br/>fn gcd(a: usize, b: usize) -&gt; usize {<br/>    match ((a, b), (a &amp; 1, b &amp; 1)) {<br/>        ((x, y), _) if x == y =&gt; y,<br/>        ((0, x), _) | ((x, 0), _) =&gt; x,<br/>        ((x, y), (0, 1)) | ((y, x), (1, 0)) =&gt; gcd(x &gt;&gt; 1, y),<br/>        ((x, y), (0, 0)) =&gt; gcd(x &gt;&gt; 1, y &gt;&gt; 1) &lt;&lt; 1,<br/>        ((x, y), (1, 1)) =&gt; {<br/>            let (x, y) = (min(x, y), max(x, y));<br/>            gcd((y - x) &gt;&gt; 1, x)<br/>        }<br/>        _ =&gt; unreachable!(),<br/>    }<br/>}<br/>\u00a0<br/>fn lcm(a: usize, b: usize) -&gt; usize {<br/>    a * b / gcd(a, b)<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", lcm(6324, 234))<br/>}</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> a.<span class=\"me1\">abs</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> gcd<span class=\"br0\">(</span>b, a<span class=\"sy0\">%</span>b<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> lcm<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>b<span class=\"br0\">)</span>.<span class=\"me1\">abs</span>/gcd<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">lcm</span> <span class=\"nu0\">108</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"nu0\">216</span></pre>"}, {"lang": "Seed7", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: gcd (in var integer: a, in var integer: b) is func<br/>  result<br/>    var integer: gcd is 0;<br/>  local<br/>    var integer: help is 0;<br/>  begin<br/>    while a &lt;&gt; 0 do<br/>      help\u00a0:= b rem a;<br/>      b\u00a0:= a;<br/>      a\u00a0:= help;<br/>    end while;<br/>    gcd\u00a0:= b;<br/>  end func;<br/>\u00a0<br/>const func integer: lcm (in integer: a, in integer: b) is<br/>  return a div gcd(a, b) * b;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"lcm(35, 21) = \" &lt;&amp; lcm(21, 35));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"kw4\">Math</span>.<span class=\"me1\">lcm</span><span class=\"br0\">(</span><span class=\"nu0\">1001</span>, <span class=\"nu0\">221</span><span class=\"br0\">)</span></pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"nu0\">12</span> lcm: <span class=\"re5\">18</span></pre>"}, {"lang": "Sparkling", "loc": 33, "block": "<pre class=\"text highlighted_source\">function factors(n) {<br/>\tvar f = {};<br/>\u00a0<br/>\tfor var i = 2; n &gt; 1; i++ {<br/>\t\twhile n\u00a0% i == 0 {<br/>\t\t\tn /= i;<br/>\t\t\tf[i] = f[i]\u00a0!= nil\u00a0? f[i] + 1\u00a0: 1;<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\treturn f;<br/>}<br/>\u00a0<br/>function GCD(n, k) {<br/>\tlet f1 = factors(n);<br/>\tlet f2 = factors(k);<br/>\u00a0<br/>\tlet fs = map(f1, function(factor, multiplicity) {<br/>\t\tlet m = f2[factor];<br/>\t\treturn m == nil\u00a0? 0\u00a0: min(m, multiplicity);<br/>\t});<br/>\u00a0<br/>\tlet rfs = {};<br/>\tforeach(fs, function(k, v) {<br/>\t\trfs[sizeof rfs] = pow(k, v);<br/>\t});<br/>\u00a0<br/>\treturn reduce(rfs, 1, function(x, y) { return x * y; });<br/>}<br/>\u00a0<br/>function LCM(n, k) {<br/>\treturn n * k / GCD(n, k);<br/>}</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func lcm(a:Int, b:Int) -&gt; Int {<br/>    return abs(a * b) / gcd_rec(a, b)<br/>}</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> lcm <span class=\"br0\">{</span>p q<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$m</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> p <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span> <span class=\"sy0\">%</span> <span class=\"re0\">$q</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$p</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$m</span> / <span class=\"re0\">$q</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$q</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$m</span> / <span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">lcm(12,18<br/>               36</pre>"}, {"lang": "TSE SAL", "loc": 30, "block": "<pre class=\"text highlighted_source\">// library: math: get: least: common: multiple &lt;description&gt;&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.2&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmacmu.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, su, 20-01-2013 14:36:11]<br/>INTEGER PROC FNMathGetLeastCommonMultipleI( INTEGER x1I, INTEGER x2I )<br/> //<br/> RETURN( x1I * x2I / FNMathGetGreatestCommonDivisorI( x1I, x2I ) )<br/> //<br/>END<br/>\u00a0<br/>// library: math: get: greatest: common: divisor &lt;description&gt;greatest common divisor whole numbers. Euclid's algorithm. Recursive version&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.3&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmacdi.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, su, 20-01-2013 14:22:41]<br/>INTEGER PROC FNMathGetGreatestCommonDivisorI( INTEGER x1I, INTEGER x2I )<br/> //<br/> IF ( x2I == 0 )<br/>  //<br/>  RETURN( x1I )<br/>  //<br/> ENDIF<br/> //<br/> RETURN( FNMathGetGreatestCommonDivisorI( x2I, x1I MOD x2I ) )<br/> //<br/>END<br/>\u00a0<br/>PROC Main()<br/> //<br/> STRING s1[255] = \"10\"<br/> STRING s2[255] = \"20\"<br/> REPEAT<br/>  IF ( NOT ( Ask( \"math: get: least: common: multiple: x1I = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/>  IF ( NOT ( Ask( \"math: get: least: common: multiple: x2I = \", s2, _EDIT_HISTORY_ ) ) AND ( Length( s2 ) &gt; 0 ) ) RETURN() ENDIF<br/>  Warn( FNMathGetLeastCommonMultipleI( Val( s1 ), Val( s2 ) ) ) // gives e.g. 10<br/> UNTIL FALSE<br/>END</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"bash highlighted_source\">$ txr <span class=\"re5\">-p</span> <span class=\"st_h\">'(lcm (expt 2 123) (expt 6 49) 17)'</span><br/><span class=\"nu0\">43259338018880832376582582128138484281161556655442781051813888</span></pre>"}, {"lang": "uBasic/4tH", "loc": 21, "block": "<pre class=\"text highlighted_source\">Print \"LCM of 12\u00a0: 18 = \"; FUNC(_LCM(12,18))<br/>\u00a0<br/>End<br/>\u00a0<br/>\u00a0<br/>_GCD_Iterative_Euclid Param(2)<br/>  Local (1)<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"107250\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"9af9da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"117051\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"92f3d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"5f3d1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"543614\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"096a49\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"d7b597\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>Return (ABS(<a class=\"__cf_email__\" data-cfemail=\"6d0c2d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>\u00a0<br/>\u00a0<br/>_LCM Param(2)<br/>If <a class=\"__cf_email__\" data-cfemail=\"88e9c8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"583a18\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Return (ABS(<a class=\"__cf_email__\" data-cfemail=\"d6b796\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"dfbd9f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)/FUNC(_GCD_Iterative_Euclid(<a class=\"__cf_email__\" data-cfemail=\"1a7b5a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<a class=\"__cf_email__\" data-cfemail=\"5d3f1d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)))<br/>Else<br/>  Return (0)<br/>EndIf</pre>"}, {"lang": "UNIX Shell", "loc": 21, "block": "<pre class=\"bash highlighted_source\">gcd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co0\"># Calculate $1\u00a0% $2 until $2 becomes zero.</span><br/>\t<span class=\"kw1\">until</span> <span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-eq</span> <span class=\"st0\">\"$2\"</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"co0\"># Parallel assignment: set -- 1 2</span><br/>\t\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"$2\"</span> <span class=\"st0\">\"<span class=\"es5\">`expr \"$1\"\u00a0% \"$2\"`</span>\"</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"co0\"># Echo absolute value of $1.</span><br/>\t<span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es5\">`expr 0 - \"$1\"`</span>\"</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>lcm<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"$1\"</span> <span class=\"st0\">\"$2\"</span> <span class=\"st0\">\"<span class=\"es5\">`gcd \"$1\" \"$2\"`</span>\"</span><br/>\t<span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es5\">`expr \"$1\" \\* \"$2\" / \"$3\"`</span>\"</span><br/>\t<span class=\"kw3\">test</span> <span class=\"nu0\">0</span> <span class=\"re5\">-gt</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es5\">`expr 0 - \"$1\"`</span>\"</span><br/>\t<span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>lcm <span class=\"nu0\">30</span> <span class=\"re5\">-42</span><br/><span class=\"co0\"># =&gt; 210</span></pre>"}, {"lang": "Ursa", "loc": 2, "block": "<pre class=\"text highlighted_source\">import \"math\"<br/>out (lcm 12 18) endl console</pre>"}, {"lang": "Vala", "loc": 28, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">int</span> lcm<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/*Return least common multiple of two ints*/</span><br/>    <span class=\"co1\">// check for 0's                                                            </span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> b <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Math.abs(x) only works for doubles, Math.absf(x) for floats              </span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\tb <span class=\"sy0\">*=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> x <span class=\"sy0\">%</span> b <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>x<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span>\ta <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span>\tb <span class=\"sy0\">=</span> <span class=\"nu0\">18</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    stdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"lcm(%d,\u00a0%d) =\u00a0%d<span class=\"es0\">\\n</span>\"</span>,\ta, b, lcm<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 30, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> LCM(a,b)<br/>\tLCM = POS((a * b)/GCD(a,b))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> GCD(a,b)<br/>\t<span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">If</span> a <span class=\"kw4\">Mod</span> b &gt; 0 <span class=\"kw3\">Then</span><br/>\t\t\tc = a <span class=\"kw4\">Mod</span> b<br/>\t\t\ta = b<br/>\t\t\tb = c<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tGCD = b<br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> POS(n)<br/>\t<span class=\"kw3\">If</span> n &lt; 0 <span class=\"kw3\">Then</span><br/>\t\tPOS = n * -1<br/>\t<span class=\"kw3\">Else</span><br/>\t\tPOS = n<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>i = WScript.Arguments(0)<br/>j = WScript.Arguments(1)<br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"The LCM of \"</span> &amp; i &amp; <span class=\"st0\">\" and \"</span> &amp; j &amp; <span class=\"st0\">\" is \"</span> &amp; LCM(i,j) &amp; <span class=\"st0\">\".\"</span><br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@lcm a b</pre>"}, {"lang": "XPL0", "loc": 16, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func GCD(M,N);  \\Return the greatest common divisor of M and N<br/>int  M, N;<br/>int  T;<br/>[while N do     \\Euclid's method<br/>    [T:= M;  M:= N;  N:= rem(T/N)];<br/>return M;<br/>];<br/>\u00a0<br/>func LCM(M,N);  \\Return least common multiple<br/>int  M, N;<br/>return abs(M*N) / GCD(M,N);<br/>\u00a0<br/>\\Display the LCM of two integers entered on command line<br/>IntOut(0, LCM(IntIn(8), IntIn(8)))</pre>"}, {"lang": "Yabasic", "loc": 18, "block": "<pre class=\"text highlighted_source\">sub gcd(u, v)<br/>    local t<br/>\u00a0<br/>    u = int(abs(u))<br/>    v = int(abs(v))<br/>    while(v)<br/>        t = u<br/>        u = v<br/>        v = mod(t, v)<br/>    wend<br/>    return u<br/>end sub<br/>\u00a0<br/>sub lcm(m, n)<br/>    return m / gcd(m, n) * n<br/>end sub<br/>\u00a0<br/>print \"Least common multiple: \", lcm(12345, 23044)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn lcm(m,n){ (m*n).abs()/m.gcd(n) }  // gcd is a number method</pre>"}]}