{"task": "Fractal_tree", "blocks": [{"lang": "AutoHotkey", "loc": 66, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">; Uncomment if Gdip.ahk is not in your standard library</span><br/><span class=\"co1\">; #Include, Gdip.ahk</span><br/>\u00a0<br/>FileOut\t\t<span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Desktop\"><span class=\"kw2\">A_Desktop</span></a> <span class=\"st0\">\"\\MyNewFile.png\"</span><br/>TreeColor\t<span class=\"sy0\">:=</span> 0xff0066ff\t<span class=\"co1\">; ARGB</span><br/>TrunkWidth \t<span class=\"sy0\">:=</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">; Pixels</span><br/>TrunkLength\t<span class=\"sy0\">:=</span> <span class=\"nu0\">80</span>\t\t<span class=\"co1\">; Pixels</span><br/>Angle \t\t<span class=\"sy0\">:=</span> <span class=\"nu0\">60</span>\t\t<span class=\"co1\">; Degrees</span><br/>ImageWidth \t<span class=\"sy0\">:=</span> <span class=\"nu0\">670</span>\t\t<span class=\"co1\">; Pixels</span><br/>ImageHeight \t<span class=\"sy0\">:=</span> <span class=\"nu0\">450</span>\t\t<span class=\"co1\">; Pixels</span><br/>Branches\t<span class=\"sy0\">:=</span> <span class=\"nu0\">13</span><br/>Decrease\t<span class=\"sy0\">:=</span> <span class=\"nu0\">0.81</span><br/>\u00a0<br/>Angle <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>Angle <span class=\"sy0\">*</span> <span class=\"nu0\">0.01745329252</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">,</span> Points <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"sy0\">,</span> Points<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Angle\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"sy0\">,</span> Points<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ImageWidth <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">,</span> Points<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ImageHeight <span class=\"sy0\">-</span> TrunkLength<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>!pToken <span class=\"sy0\">:=</span> Gdip_Startup<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> Gdiplus error!<span class=\"sy0\">,</span> Gdiplus failed to start<span class=\"sy0\">.</span> Please ensure you have Gdiplus on your system<span class=\"sy0\">.</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/OnExit.htm\"><span class=\"kw3\">OnExit</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a><br/>\u00a0<br/>pBitmap <span class=\"sy0\">:=</span> Gdip_CreateBitmap<span class=\"br0\">(</span>ImageWidth<span class=\"sy0\">,</span> ImageHeight<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> G <span class=\"sy0\">:=</span> Gdip_GraphicsFromImage<span class=\"br0\">(</span>pBitmap<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_SetSmoothingMode<span class=\"br0\">(</span>G<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> pBrush <span class=\"sy0\">:=</span> Gdip_BrushCreateSolid<span class=\"br0\">(</span>0xff000000<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_FillRectangle<span class=\"br0\">(</span>G<span class=\"sy0\">,</span> pBrush<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> ImageWidth <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> ImageHeight <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_DeleteBrush<span class=\"br0\">(</span>pBrush<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> pPen <span class=\"sy0\">:=</span> Gdip_CreatePen<span class=\"br0\">(</span>TreeColor<span class=\"sy0\">,</span> TrunkWidth<span class=\"sy0\">/</span>Decrease<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_DrawLine<span class=\"br0\">(</span>G<span class=\"sy0\">,</span> pPen<span class=\"sy0\">,</span> Points<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> Points<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>Y<span class=\"sy0\">,</span> Points<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> ImageHeight<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_DeletePen<span class=\"br0\">(</span>pPen<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% Branches <span class=\"br0\">{</span><br/>\tNewPoints <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\tpPen <span class=\"sy0\">:=</span> Gdip_CreatePen<span class=\"br0\">(</span>TreeColor<span class=\"sy0\">,</span> TrunkWidth<span class=\"br0\">)</span><br/>\tfor Each<span class=\"sy0\">,</span> Point in Points <span class=\"br0\">{</span><br/>\t\tN1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"sy0\">,</span> N2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N1<span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>X <span class=\"sy0\">+</span> <span class=\"br0\">(</span>TrunkLength <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sin</span></a><span class=\"br0\">(</span>NewPoints<span class=\"br0\">[</span>N1<span class=\"sy0\">,</span> <span class=\"st0\">\"Angle\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>Angle <span class=\"sy0\">-</span> Angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N1<span class=\"sy0\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>Y <span class=\"sy0\">-</span> <span class=\"br0\">(</span>TrunkLength <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Cos</span></a><span class=\"br0\">(</span>NewPoints<span class=\"br0\">[</span>N1<span class=\"br0\">]</span><span class=\"sy0\">.</span>Angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N2<span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>X <span class=\"sy0\">+</span> <span class=\"br0\">(</span>TrunkLength <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sin</span></a><span class=\"br0\">(</span>NewPoints<span class=\"br0\">[</span>N2<span class=\"sy0\">,</span> <span class=\"st0\">\"Angle\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>Angle <span class=\"sy0\">+</span> Angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N2<span class=\"sy0\">,</span> <span class=\"st0\">\"Y\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Point<span class=\"sy0\">.</span>Y <span class=\"sy0\">-</span> <span class=\"br0\">(</span>TrunkLength <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Cos</span></a><span class=\"br0\">(</span>NewPoints<span class=\"br0\">[</span>N2<span class=\"br0\">]</span><span class=\"sy0\">.</span>Angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> Gdip_DrawLine<span class=\"br0\">(</span>G<span class=\"sy0\">,</span> pPen<span class=\"sy0\">,</span> Point<span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> Point<span class=\"sy0\">.</span>Y<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N1<span class=\"br0\">]</span><span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N1<span class=\"br0\">]</span><span class=\"sy0\">.</span>Y<span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span> Gdip_DrawLine<span class=\"br0\">(</span>G<span class=\"sy0\">,</span> pPen<span class=\"sy0\">,</span> Point<span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> Point<span class=\"sy0\">.</span>Y<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N2<span class=\"br0\">]</span><span class=\"sy0\">.</span>X<span class=\"sy0\">,</span> NewPoints<span class=\"br0\">[</span>N2<span class=\"br0\">]</span><span class=\"sy0\">.</span>Y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\tTrunkWidth <span class=\"sy0\">*=</span> Decrease<br/>\t\t<span class=\"sy0\">,</span> TrunkLength <span class=\"sy0\">*=</span> Decrease<br/>\t\t<span class=\"sy0\">,</span> Points <span class=\"sy0\">:=</span> NewPoints<br/>\t\t<span class=\"sy0\">,</span> Gdip_DeletePen<span class=\"br0\">(</span>pPen<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Gdip_SaveBitmapToFile<span class=\"br0\">(</span>pBitmap<span class=\"sy0\">,</span> FileOut<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_DisposeImage<span class=\"br0\">(</span>pBitmap<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> Gdip_DeleteGraphics<span class=\"br0\">(</span>G<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Run.htm\"><span class=\"kw3\">Run</span></a><span class=\"sy0\">,</span>\u00a0% FileOut<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Exit.htm\"><span class=\"kw3\">Exit</span></a>:<br/>Gdip_Shutdown<span class=\"br0\">(</span>pToken<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "BASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">graphsize 300,300<br/>\u00a0<br/>level = 12\u00a0: len =63\t\t# initial values<br/>x = 230: y = 285\t\t\t<br/>rotation = pi/2<br/>\u00a0<br/>A1 = pi/27\u00a0: A2 = pi/8\t\t# constants which determine shape<br/>C1 = 0.7\u00a0: C2 = 0.85<br/>\u00a0<br/>dim xs(level+1)\u00a0: dim ys(level+1)\t# stacks<br/>\u00a0<br/>fastgraphics<br/>color black<br/>rect 0,0,graphwidth,graphheight<br/>refresh<br/>color green<br/>gosub tree<br/>refresh<br/>imgsave \"Fractal_tree_BASIC-256.png\", \"PNG\"<br/>end<br/>\u00a0<br/>tree:<br/>\txs[level] = x\u00a0: ys[level] = y<br/>\tgosub putline<br/>\tif level&gt;0 then<br/>\t\tlevel = level - 1<br/>\t\tlen = len*C1<br/>\t\trotation = rotation - A1<br/>\t\tgosub tree<br/>\t\tlen = len/C1*C2<br/>\t\trotation = rotation + A1 + A2<br/>\t\tgosub tree<br/>\t\trotation = rotation - A2<br/>\t\tlen = len/C2<br/>\t\tlevel = level + 1<br/>\tend if<br/>\tx = xs[level]\u00a0: y = ys[level]<br/>\treturn<br/>\u00a0<br/>putline:<br/>\tyn = -sin(rotation)*len + y<br/>\txn = cos(rotation)*len + x<br/>\tline x,y,xn,yn<br/>\tx = xn\u00a0: y = yn<br/>\treturn</pre>"}, {"lang": "C", "loc": 101, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;SDL/SDL.h&gt;</span><br/><span class=\"co2\">#ifdef WITH_CAIRO</span><br/><span class=\"co2\">#include &lt;cairo.h&gt;</span><br/><span class=\"co2\">#else</span><br/><span class=\"co2\">#include &lt;SDL/sge.h&gt;</span><br/><span class=\"co2\">#endif</span><br/><span class=\"co2\">#include &lt;cairo.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#ifdef WITH_CAIRO</span><br/><span class=\"co2\">#define PI 3.1415926535</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"co2\">#define SIZE           800   // determines size of window</span><br/><span class=\"co2\">#define SCALE          5     // determines how quickly branches shrink (higher value means faster shrinking)</span><br/><span class=\"co2\">#define BRANCHES       14    // number of branches</span><br/><span class=\"co2\">#define ROTATION_SCALE 0.75  // determines how slowly the angle between branches shrinks (higher value means slower shrinking)</span><br/><span class=\"co2\">#define INITIAL_LENGTH 50    // length of first branch</span><br/>\u00a0<br/><span class=\"kw4\">double</span> rand_fl<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>RAND_MAX<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> draw_tree<span class=\"br0\">(</span>SDL_Surface <span class=\"sy0\">*</span> surface<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> offsetx<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> offsety<span class=\"sy0\">,</span><br/>               <span class=\"kw4\">double</span> directionx<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> directiony<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> size<span class=\"sy0\">,</span><br/>               <span class=\"kw4\">double</span> rotation<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co2\">#ifdef WITH_CAIRO</span><br/>  cairo_surface_t <span class=\"sy0\">*</span>surf <span class=\"sy0\">=</span> cairo_image_surface_create_for_data<span class=\"br0\">(</span> surface<span class=\"sy0\">-&gt;</span>pixels<span class=\"sy0\">,</span><br/>                                                               CAIRO_FORMAT_RGB24<span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\t       surface<span class=\"sy0\">-&gt;</span>w<span class=\"sy0\">,</span> surface<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">,</span><br/>\t\t\t\t\t\t\t       surface<span class=\"sy0\">-&gt;</span>pitch <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_t <span class=\"sy0\">*</span>ct <span class=\"sy0\">=</span> cairo_create<span class=\"br0\">(</span>surf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  cairo_set_line_width<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_move_to<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>offsetx<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>offsety<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_line_to<span class=\"br0\">(</span>ct<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>offsetx <span class=\"sy0\">+</span> directionx <span class=\"sy0\">*</span> size<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>offsety <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_stroke<span class=\"br0\">(</span>ct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#else</span><br/>  sge_AALine<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>offsetx<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>offsety<span class=\"sy0\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>offsetx <span class=\"sy0\">+</span> directionx <span class=\"sy0\">*</span> size<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>offsety <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> size<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      SDL_MapRGB<span class=\"br0\">(</span>surface<span class=\"sy0\">-&gt;</span>format<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"co1\">// draw left branch</span><br/>    draw_tree<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span><br/>        offsetx <span class=\"sy0\">+</span> directionx <span class=\"sy0\">*</span> size<span class=\"sy0\">,</span><br/>        offsety <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> size<span class=\"sy0\">,</span><br/>        directionx <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>rotation<span class=\"br0\">)</span> <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>rotation<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        directionx <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>rotation<span class=\"br0\">)</span> <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>rotation<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        size <span class=\"sy0\">*</span> rand_fl<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> SCALE <span class=\"sy0\">+</span> size <span class=\"sy0\">*</span> <span class=\"br0\">(</span>SCALE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> SCALE<span class=\"sy0\">,</span><br/>        rotation <span class=\"sy0\">*</span> ROTATION_SCALE<span class=\"sy0\">,</span><br/>        depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// draw right branch</span><br/>    draw_tree<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span><br/>        offsetx <span class=\"sy0\">+</span> directionx <span class=\"sy0\">*</span> size<span class=\"sy0\">,</span><br/>        offsety <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> size<span class=\"sy0\">,</span><br/>        directionx <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>rotation<span class=\"br0\">)</span> <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>rotation<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        directionx <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>rotation<span class=\"br0\">)</span> <span class=\"sy0\">+</span> directiony <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span>rotation<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        size <span class=\"sy0\">*</span> rand_fl<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> SCALE <span class=\"sy0\">+</span> size <span class=\"sy0\">*</span> <span class=\"br0\">(</span>SCALE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> SCALE<span class=\"sy0\">,</span><br/>        rotation <span class=\"sy0\">*</span> ROTATION_SCALE<span class=\"sy0\">,</span><br/>        depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> render<span class=\"br0\">(</span>SDL_Surface <span class=\"sy0\">*</span> surface<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  SDL_FillRect<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> SDL_MapRGB<span class=\"br0\">(</span>surface<span class=\"sy0\">-&gt;</span>format<span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  draw_tree<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span><br/>      surface<span class=\"sy0\">-&gt;</span>w <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">,</span><br/>      surface<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">-</span> <span class=\"nu16\">10.0</span><span class=\"sy0\">,</span><br/>      <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span><br/>      INITIAL_LENGTH<span class=\"sy0\">,</span><br/>      PI <span class=\"sy0\">/</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span><br/>      BRANCHES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  SDL_UpdateRect<span class=\"br0\">(</span>surface<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  SDL_Surface <span class=\"sy0\">*</span> screen<span class=\"sy0\">;</span><br/>  SDL_Event evt<span class=\"sy0\">;</span><br/>\u00a0<br/>  SDL_Init<span class=\"br0\">(</span>SDL_INIT_VIDEO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  screen <span class=\"sy0\">=</span> SDL_SetVideoMode<span class=\"br0\">(</span>SIZE<span class=\"sy0\">,</span> SIZE<span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> SDL_HWSURFACE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  render<span class=\"br0\">(</span>screen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>SDL_PollEvent<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>evt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>evt.<span class=\"me1\">type</span> <span class=\"sy0\">==</span> SDL_QUIT<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    SDL_Delay<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  SDL_Quit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 193, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">float</span> PI <span class=\"sy1\">=</span> <span class=\"nu17\">3.1415926536f</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">void</span>\t\t<span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\u00a0<br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER\tfileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t\t\tinfoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t\t\tbitmap<span class=\"sy4\">;</span><br/>\tDWORD<span class=\"sy2\">*</span>\t\t\t\tdwpBits<span class=\"sy4\">;</span><br/>\tDWORD\t\t\t\twb<span class=\"sy4\">;</span><br/>\tHANDLE\t\t\t\tfile<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tdwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfile <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>     width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> vector2<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    vector2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    vector2<span class=\"br0\">(</span> <span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> set<span class=\"br0\">(</span> <span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> rotate<span class=\"br0\">(</span> <span class=\"kw4\">float</span> angle_r <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">float</span> _x <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span>,<br/>\t      _y <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> y <span class=\"br0\">)</span>,<br/>\t       s <span class=\"sy1\">=</span> sinf<span class=\"br0\">(</span> angle_r <span class=\"br0\">)</span>, <br/>\t       c <span class=\"sy1\">=</span> cosf<span class=\"br0\">(</span> angle_r <span class=\"br0\">)</span>,<br/>\t       a <span class=\"sy1\">=</span> _x <span class=\"sy2\">*</span> c <span class=\"sy2\">-</span> _y <span class=\"sy2\">*</span> s, <br/>\t       b <span class=\"sy1\">=</span> _x <span class=\"sy2\">*</span> s <span class=\"sy2\">+</span> _y <span class=\"sy2\">*</span> c<span class=\"sy4\">;</span><br/>\u00a0<br/>\tx <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\ty <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> fractalTree<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    fractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t      <span class=\"br0\">{</span> _ang <span class=\"sy1\">=</span> DegToRadian<span class=\"br0\">(</span> <span class=\"nu17\">24.0f</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">float</span> DegToRadian<span class=\"br0\">(</span> <span class=\"kw4\">float</span> degree <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> degree <span class=\"sy2\">*</span> <span class=\"br0\">(</span> PI <span class=\"sy2\">/</span> <span class=\"nu17\">180.0f</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> myBitmap<span class=\"sy2\">*</span> bmp <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_bmp <span class=\"sy1\">=</span> bmp<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">float</span> line_len <span class=\"sy1\">=</span> <span class=\"nu17\">130.0f</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tvector2 sp<span class=\"br0\">(</span> _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span>, _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tMoveToEx<span class=\"br0\">(</span> _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getDC<span class=\"br0\">(</span><span class=\"br0\">)</span>, sp.<span class=\"me1\">x</span>, sp.<span class=\"me1\">y</span>, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tsp.<span class=\"me1\">y</span> <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> line_len <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tLineTo<span class=\"br0\">(</span> _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getDC<span class=\"br0\">(</span><span class=\"br0\">)</span>, sp.<span class=\"me1\">x</span>, sp.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tdrawRL<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>sp, line_len, <span class=\"nu0\">0</span>, <span class=\"kw2\">true</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdrawRL<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>sp, line_len, <span class=\"nu0\">0</span>, <span class=\"kw2\">false</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> drawRL<span class=\"br0\">(</span> vector2<span class=\"sy2\">*</span> sp, <span class=\"kw4\">float</span> line_len, <span class=\"kw4\">float</span> a, <span class=\"kw4\">bool</span> rg <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tline_len <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu17\">.75f</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> line_len <span class=\"sy1\">&lt;</span> <span class=\"nu17\">2.0f</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tMoveToEx<span class=\"br0\">(</span> _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getDC<span class=\"br0\">(</span><span class=\"br0\">)</span>, sp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>x, sp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>y, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tvector2 r<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> line_len <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> rg <span class=\"br0\">)</span> a <span class=\"sy2\">-</span><span class=\"sy1\">=</span> _ang<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">else</span> a <span class=\"sy2\">+</span><span class=\"sy1\">=</span> _ang<span class=\"sy4\">;</span> <br/>\u00a0<br/>\tr.<span class=\"me1\">rotate</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tr.<span class=\"me1\">x</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> sp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>x<span class=\"sy4\">;</span> r.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> sp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>y <span class=\"sy2\">-</span> r.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tLineTo<span class=\"br0\">(</span> _bmp<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getDC<span class=\"br0\">(</span><span class=\"br0\">)</span>, r.<span class=\"me1\">x</span>, r.<span class=\"me1\">y</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tdrawRL<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>r, line_len, a, <span class=\"kw2\">true</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdrawRL<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>r, line_len, a, <span class=\"kw2\">false</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    myBitmap<span class=\"sy2\">*</span> _bmp<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">float</span>     _ang<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ShowWindow<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, SW_MAXIMIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    myBitmap bmp<span class=\"sy4\">;</span><br/>    bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">640</span>, <span class=\"nu0\">512</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    bmp.<span class=\"me1\">setPenColor</span><span class=\"br0\">(</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    fractalTree tree<span class=\"sy4\">;</span><br/>    tree.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    BitBlt<span class=\"br0\">(</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">648</span>, <span class=\"nu0\">512</span>, bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> <span class=\"st0\">\"f://rc//fracTree.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 45, "block": "<pre class=\"text highlighted_source\">import javax.swing {<br/>\u00a0<br/>\tJFrame { exitOnClose }<br/>}<br/>import java.awt {<br/>\u00a0<br/>\tColor { white, black },<br/>\tGraphics<br/>}<br/>import ceylon.numeric.float {<br/>\u00a0<br/>\tcos,<br/>\ttoRadians,<br/>\tsin<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>    value fractalTree = object extends JFrame(\"fractal tree\") {<br/>\u00a0<br/>        background = black;<br/>        setBounds(100, 100, 800, 600);<br/>        resizable = false;<br/>        defaultCloseOperation = exitOnClose;<br/>\u00a0<br/>        shared actual void paint(Graphics g) {<br/>\u00a0<br/>            void drawTree(Integer x1, Integer y1, Float angle, Integer depth) {<br/>                if (depth &lt;= 0) {<br/>                    return;<br/>                }<br/>                value x2 = x1 + (cos(toRadians(angle)) * depth * 10.0).integer;<br/>                value y2 = y1 + (sin(toRadians(angle)) * depth * 10.0).integer;<br/>                g.drawLine(x1, y1, x2, y2);<br/>                drawTree(x2, y2, angle - 20, depth - 1);<br/>                drawTree(x2, y2, angle + 20, depth - 1);<br/>            }<br/>\u00a0<br/>            g.color = white;<br/>            drawTree(400, 500, -90.0, 9);<br/>        }<br/>    };<br/>\u00a0<br/>    fractalTree.visible = true;<br/>}</pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">import</span> '<span class=\"br0\">[</span>java<span class=\"sy0\">.</span>awt Color Graphics<span class=\"br0\">]</span><br/>\t'javax<span class=\"sy0\">.</span>swing<span class=\"sy0\">.</span>JFrame<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>radian <span class=\"br0\">[</span>deg<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> deg Math<span class=\"sy0\">/</span>PI <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cos<span class=\"sy0\">-</span>deg <span class=\"br0\">[</span>angle<span class=\"br0\">]</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>cos <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>radian angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sin<span class=\"sy0\">-</span>deg <span class=\"br0\">[</span>angle<span class=\"br0\">]</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>radian angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> draw<span class=\"sy0\">-</span>tree <span class=\"br0\">[</span><span class=\"sy0\">^</span>Graphics g, x y angle depth<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">pos?</span> depth<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>x2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"br0\">(</span>int <span class=\"br0\">(</span><span class=\"sy0\">*</span> depth <span class=\"nu0\">10</span> <span class=\"br0\">(</span>cos<span class=\"sy0\">-</span>deg angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  y2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> y <span class=\"br0\">(</span>int <span class=\"br0\">(</span><span class=\"sy0\">*</span> depth <span class=\"nu0\">10</span> <span class=\"br0\">(</span>sin<span class=\"sy0\">-</span>deg angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">.</span>drawLine g x y x2 y2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>draw<span class=\"sy0\">-</span>tree g x2 y2 <span class=\"br0\">(</span><span class=\"sy0\">-</span> angle <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> depth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span>     g x2 y2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> angle <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fractal<span class=\"sy0\">-</span>tree <span class=\"br0\">[</span>depth<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doto</span> <span class=\"br0\">(</span><span class=\"kw1\">proxy</span> <span class=\"br0\">[</span>JFrame<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t  <span class=\"br0\">(</span>paint <span class=\"br0\">[</span>g<span class=\"br0\">]</span><br/>\t\t <span class=\"br0\">(</span><span class=\"sy0\">.</span>setColor g Color<span class=\"sy0\">/</span>BLACK<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>draw<span class=\"sy0\">-</span>tree g <span class=\"nu0\">400</span> <span class=\"nu0\">500</span> <span class=\"sy0\">-</span><span class=\"nu0\">90</span> depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>setBounds <span class=\"nu0\">100</span> <span class=\"nu0\">100</span> <span class=\"nu0\">800</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>setResizable false<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>setDefaultCloseOperation JFrame<span class=\"sy0\">/</span>DISPOSE_ON_CLOSE<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>show<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>fractal<span class=\"sy0\">-</span>tree <span class=\"nu0\">9</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; (require\u00a0:lispbuilder-sdl)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> deg-to-radian <span class=\"br0\">(</span>deg<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"converts degrees to radians\"</span><br/>  <span class=\"br0\">(</span>* deg pi <span class=\"nu0\">1</span>/<span class=\"nu0\">180</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cos-deg <span class=\"br0\">(</span>angle<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"returns cosin of the angle expressed in degress\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cos</span> <span class=\"br0\">(</span>deg-to-radian angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sin-deg <span class=\"br0\">(</span>angle<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"returns sin of the angle expressed in degress\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span>deg-to-radian angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-tree <span class=\"br0\">(</span>surface x y angle depth<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"draws a branch of the tree on the sdl-surface\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">plusp</span> depth<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x2 <span class=\"br0\">(</span>+ x <span class=\"br0\">(</span>round <span class=\"br0\">(</span>* depth <span class=\"nu0\">10</span> <span class=\"br0\">(</span>cos-deg angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>y2 <span class=\"br0\">(</span>+ y <span class=\"br0\">(</span>round <span class=\"br0\">(</span>* depth <span class=\"nu0\">10</span> <span class=\"br0\">(</span>sin-deg angle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">draw-line-</span>* x y x2 y2 <span class=\"sy0\">:</span><span class=\"me1\">surface</span> surface <span class=\"sy0\">:</span><span class=\"me1\">color</span> sdl<span class=\"sy0\">:</span>*green*<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>draw-tree surface x2 y2 <span class=\"br0\">(</span>- angle <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- depth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>draw-tree surface x2 y2 <span class=\"br0\">(</span>+ angle <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fractal-tree <span class=\"br0\">(</span>depth<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"shows a window with a fractal tree\"</span><br/>  <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">with-init</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">window</span> <span class=\"nu0\">800</span> <span class=\"nu0\">600</span> <span class=\"sy0\">:</span><span class=\"me1\">title-caption</span> <span class=\"st0\">\"fractal-tree\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">clear-display</span> sdl<span class=\"sy0\">:</span>*black*<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>draw-tree sdl<span class=\"sy0\">:</span>*default-surface* <span class=\"nu0\">400</span> <span class=\"nu0\">500</span> -<span class=\"nu0\">90</span> depth<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">update-display</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">with-events</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">video-expose-event</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span>sdl<span class=\"sy0\">:</span><span class=\"me1\">update-display</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">quit-event</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t   t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>fractal-tree <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"co1\">// Image dimension.</span><br/><span class=\"kw4\">enum</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span>                <span class=\"co1\">// Trunk size.</span><br/><span class=\"kw4\">enum</span> scale <span class=\"sy0\">=</span> <span class=\"nu16\">6.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span>            <span class=\"co1\">// Branch scale relative to trunk.</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tree<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> length<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> angle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> x2 <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> length <span class=\"sy0\">*</span> angle.<span class=\"me1\">cos</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> y2 <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> length <span class=\"sy0\">*</span> angle.<span class=\"me1\">sin</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"&lt;line x1='%f' y1='%f' x2='%f' y2='%f' \"</span> <span class=\"sy0\">~</span><br/>             <span class=\"st0\">\"style='stroke:black;stroke-width:1'/&gt;\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> length <span class=\"sy0\">*</span> scale<span class=\"sy0\">,</span> angle <span class=\"sy0\">+</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> length <span class=\"sy0\">*</span> scale<span class=\"sy0\">,</span> angle <span class=\"sy0\">-</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"&lt;svg width='100%' height='100%' version='1.1'<br/>     xmlns='http://www.w3.org/2000/svg'&gt;\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    tree<span class=\"br0\">(</span>width <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> height<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"&lt;/svg&gt;\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 21, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"kw3\">cos</span>, <span class=\"kw3\">sin</span>, pi<span class=\"br0\">)</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">Math</span>.<span class=\"me1\">Cos</span>, System.<span class=\"me1\">Math</span>.<span class=\"me1\">Sin</span>, System.<span class=\"me1\">Math</span>.<span class=\"me1\">PI</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>width, height<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span>., <span class=\"nu0\">1000</span>. <span class=\"co1\">// image dimension</span><br/><span class=\"kw1\">let</span> scale <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>.<span class=\"sy0\">/</span><span class=\"nu0\">10</span>.                 <span class=\"co1\">// branch scale relative to trunk</span><br/><span class=\"kw1\">let</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">400</span>.                  <span class=\"co1\">// trunk size</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> tree x y length angle <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> length <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span>. <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">let</span> <span class=\"br0\">(</span>x2, y2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> length <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">cos</span> angle<span class=\"br0\">)</span>,  y <span class=\"sy0\">+</span> length <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">sin</span> angle<span class=\"br0\">)</span><br/>        printfn <span class=\"st0\">\"&lt;line x1='%f' y1='%f' x2='%f' y2='%f' style='stroke:rgb(0,0,0);stroke-width:1'/&gt;\"</span><br/>            x y x2 y2<br/>        tree x2 y2 <span class=\"br0\">(</span>length<span class=\"sy0\">*</span>scale<span class=\"br0\">)</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">+</span> pi<span class=\"sy0\">/</span><span class=\"nu0\">5</span>.<span class=\"br0\">)</span><br/>        tree x2 y2 <span class=\"br0\">(</span>length<span class=\"sy0\">*</span>scale<span class=\"br0\">)</span> <span class=\"br0\">(</span>angle <span class=\"sy0\">-</span> pi<span class=\"sy0\">/</span><span class=\"nu0\">5</span>.<span class=\"br0\">)</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"&lt;?xml version='1.0' encoding='utf-8' standalone='no'?&gt;<br/>&lt;!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' <br/>'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'&gt;<br/>&lt;svg width='100%%' height='100%%' version='1.1'<br/>xmlns='http://www.w3.org/2000/svg'&gt;\"</span><br/>tree <span class=\"br0\">(</span>width<span class=\"sy0\">/</span><span class=\"nu0\">2</span>.<span class=\"br0\">)</span> height length <span class=\"br0\">(</span><span class=\"nu0\">3</span>.<span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">2</span>.<span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"&lt;/svg&gt;\"</span></pre>"}, {"lang": "Fantom", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using fwt<br/>using gfx<br/>\u00a0<br/>class FractalCanvas\u00a0: Canvas <br/>{<br/>  new make ()\u00a0: super() {}<br/>\u00a0<br/>  Void drawTree (Graphics g, Int x1, Int y1, Int angle, Int depth)<br/>  {<br/>    if (depth == 0) return<br/>    Int x2\u00a0:= x1 + (angle.toFloat.toRadians.cos * depth * 10.0).toInt;<br/>    Int y2\u00a0:= y1 + (angle.toFloat.toRadians.sin * depth * 10.0).toInt;<br/>    g.drawLine(x1, y1, x2, y2);<br/>    drawTree(g, x2, y2, angle - 20, depth - 1);<br/>    drawTree(g, x2, y2, angle + 20, depth - 1);<br/>  }<br/>\u00a0<br/>  override Void onPaint (Graphics g)<br/>  {<br/>    drawTree (g, 400, 500, -90, 9)<br/>  }<br/>}<br/>\u00a0<br/>class FractalTree<br/>{<br/>  public static Void main ()<br/>  {<br/>    Window<br/>    {<br/>      title = \"Fractal Tree\"<br/>      size = Size(800, 600)<br/>      FractalCanvas(),<br/>    }.open<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 40, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-03-2017</span><br/><span class=\"co1\">' compile with: fbc -s gui</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> deg2rad = <span class=\"kw1\">Atn</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">45</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> scale = <span class=\"nu0\">0.76</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> spread = <span class=\"nu0\">25</span> * deg2rad <span class=\"co1\">' convert degree's to rad's</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> branch<span class=\"br0\">(</span>x1 <span class=\"kw1\">As</span> ULong, y1 <span class=\"kw1\">As</span> ULong, size <span class=\"kw1\">As</span> ULong, angle <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, depth <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong x2, y2<br/>\u00a0<br/>    x2 = x1 + size * <span class=\"kw1\">Cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><br/>    y2 = y1 + size * <span class=\"kw1\">Sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Line</span> <span class=\"br0\">(</span>x1,y1<span class=\"br0\">)</span> - <span class=\"br0\">(</span>x2,y2<span class=\"br0\">)</span>, <span class=\"nu0\">2</span>  <span class=\"co1\">' palette color green</span><br/>    <span class=\"kw1\">If</span> depth &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        branch<span class=\"br0\">(</span>x2, y2, size * scale, angle - spread, depth -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        branch<span class=\"br0\">(</span>x2, y2, size * scale, angle + spread, depth -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=-----</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> angle = -<span class=\"nu0\">90</span> * deg2rad <span class=\"co1\">' make sure that the tree grows up</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong  SizeX = <span class=\"nu0\">800</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong  SizeY = SizeX * <span class=\"nu0\">3</span> \\ <span class=\"nu0\">4</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>  size = SizeY \\ <span class=\"nu0\">4</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong  depth = <span class=\"nu0\">11</span><br/>\u00a0<br/><span class=\"kw1\">ScreenRes</span> SizeX, SizeY, <span class=\"nu0\">8</span><br/><span class=\"kw1\">WindowTitle</span> <span class=\"br0\">(</span><span class=\"st0\">\"Fractal Tree\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>branch<span class=\"br0\">(</span>SizeX\\<span class=\"nu0\">2</span>, SizeY, size, angle, depth<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">windowtitle</span> <span class=\"br0\">(</span><span class=\"st0\">\"Fractal Tree, hit any key to end program\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frege", "loc": 79, "block": "<pre class=\"text highlighted_source\">module FractalTree where<br/>\u00a0<br/>import Java.IO<br/>import Prelude.Math<br/>\u00a0<br/>data AffineTransform = native java.awt.geom.AffineTransform where<br/>  native new\u00a0:: () -&gt; STMutable s AffineTransform<br/>  native clone\u00a0:: Mutable s AffineTransform -&gt; STMutable s AffineTransform<br/>  native rotate\u00a0:: Mutable s AffineTransform -&gt; Double -&gt; ST s ()<br/>  native scale\u00a0:: Mutable s AffineTransform -&gt; Double -&gt; Double -&gt; ST s ()<br/>  native translate\u00a0:: Mutable s AffineTransform -&gt; Double -&gt; Double -&gt; ST s ()<br/>\u00a0<br/>data BufferedImage = native java.awt.image.BufferedImage where<br/>  pure native type_3byte_bgr \"java.awt.image.BufferedImage.TYPE_3BYTE_BGR\"\u00a0:: Int<br/>  native new\u00a0:: Int -&gt; Int -&gt; Int -&gt; STMutable s BufferedImage<br/>  native createGraphics\u00a0:: Mutable s BufferedImage -&gt; STMutable s Graphics2D<br/>\u00a0<br/>data Color = pure native java.awt.Color where<br/>  pure native black \"java.awt.Color.black\"\u00a0:: Color<br/>  pure native green \"java.awt.Color.green\"\u00a0:: Color<br/>  pure native white \"java.awt.Color.white\"\u00a0:: Color<br/>  pure native new\u00a0:: Int -&gt; Color<br/>\u00a0<br/>data BasicStroke = pure native java.awt.BasicStroke where<br/>  pure native new\u00a0:: Float -&gt; BasicStroke<br/>\u00a0<br/>data RenderingHints = native java.awt.RenderingHints where<br/>  pure native key_antialiasing \"java.awt.RenderingHints.KEY_ANTIALIASING\"\u00a0:: RenderingHints_Key<br/>  pure native value_antialias_on \"java.awt.RenderingHints.VALUE_ANTIALIAS_ON\"\u00a0:: Object<br/>\u00a0<br/>data RenderingHints_Key = pure native java.awt.RenderingHints.Key<br/>\u00a0<br/>data Graphics2D = native java.awt.Graphics2D where<br/>  native drawLine\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native drawOval\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native fillRect\u00a0:: Mutable s Graphics2D -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; ST s ()<br/>  native setColor\u00a0:: Mutable s Graphics2D -&gt; Color -&gt; ST s ()<br/>  native setRenderingHint\u00a0:: Mutable s Graphics2D -&gt; RenderingHints_Key -&gt; Object -&gt; ST s ()<br/>  native setStroke\u00a0:: Mutable s Graphics2D -&gt; BasicStroke -&gt; ST s ()<br/>  native setTransform\u00a0:: Mutable s Graphics2D -&gt; Mutable s AffineTransform -&gt; ST s ()<br/>\u00a0<br/>data ImageIO = mutable native javax.imageio.ImageIO where<br/>  native write \"javax.imageio.ImageIO.write\"\u00a0:: MutableIO BufferedImage -&gt; String -&gt; MutableIO File -&gt; IO Bool throws IOException<br/>\u00a0<br/>drawTree\u00a0:: Mutable s Graphics2D -&gt; Mutable s AffineTransform -&gt; Int -&gt; ST s ()<br/>drawTree g t i = do<br/>  let len = 10 -- ratio of length to thickness<br/>      shrink = 0.75<br/>      angle = 0.3 -- radians<br/>      i' = i - 1<br/>  g.setTransform t<br/>  g.drawLine 0 0 0 len<br/>  when (i' &gt; 0) $ do<br/>    t.translate 0 (fromIntegral len)<br/>    t.scale shrink shrink<br/>    rt &lt;- t.clone<br/>    t.rotate angle<br/>    rt.rotate (-angle)<br/>    drawTree g t i'<br/>    drawTree g rt i'<br/>\u00a0<br/>main = do<br/>  let width = 900<br/>      height = 800<br/>      initScale = 20<br/>      halfWidth = fromIntegral width / 2<br/>  buffy &lt;- BufferedImage.new width height BufferedImage.type_3byte_bgr<br/>  g &lt;- buffy.createGraphics<br/>  g.setRenderingHint RenderingHints.key_antialiasing RenderingHints.value_antialias_on<br/>  g.setColor Color.black<br/>  g.fillRect 0 0 width height<br/>  g.setColor Color.green<br/>  t &lt;- AffineTransform.new ()<br/>  t.translate halfWidth (fromIntegral height)<br/>  t.scale initScale initScale<br/>  t.rotate pi<br/>  drawTree g t 16<br/>  f &lt;- File.new \"FractalTreeFrege.png\"<br/>  void $ ImageIO.write buffy \"png\" f</pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"co1\">// Files required to build supporting package raster are found in:</span><br/><span class=\"co1\">// * Bitmap</span><br/><span class=\"co1\">// * Grayscale image</span><br/><span class=\"co1\">// * Xiaolin Wu's line algorithm</span><br/><span class=\"co1\">// * Write a PPM file</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"raster\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    width  <span class=\"sy2\">=</span> <span class=\"nu0\">400</span><br/>    height <span class=\"sy2\">=</span> <span class=\"nu0\">300</span><br/>    depth  <span class=\"sy2\">=</span> <span class=\"nu0\">8</span><br/>    angle  <span class=\"sy2\">=</span> <span class=\"nu0\">12</span><br/>    length <span class=\"sy2\">=</span> <span class=\"nu0\">50</span><br/>    frac   <span class=\"sy2\">=</span> <span class=\"sy3\">.</span><span class=\"nu0\">8</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> raster<span class=\"sy3\">.</span>NewGrmap<span class=\"sy1\">(</span>width<span class=\"sy1\">,</span> height<span class=\"sy1\">)</span><br/>    ftree<span class=\"sy1\">(</span>g<span class=\"sy1\">,</span> width<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> height<span class=\"sy3\">*</span><span class=\"nu0\">9</span><span class=\"sy3\">/</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> length<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> depth<span class=\"sy1\">)</span><br/>    g<span class=\"sy3\">.</span>Bitmap<span class=\"sy1\">()</span><span class=\"sy3\">.</span>WritePpmFile<span class=\"sy1\">(</span><span class=\"st0\">\"ftree.ppm\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ftree<span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>raster<span class=\"sy3\">.</span>Grmap<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> distance<span class=\"sy1\">,</span> direction <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> depth <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    x2 <span class=\"sy2\">:=</span> x <span class=\"sy3\">+</span> distance<span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>direction<span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">/</span><span class=\"nu0\">180</span><span class=\"sy1\">)</span><br/>    y2 <span class=\"sy2\">:=</span> y <span class=\"sy3\">-</span> distance<span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>direction<span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">/</span><span class=\"nu0\">180</span><span class=\"sy1\">)</span><br/>    g<span class=\"sy3\">.</span>AaLine<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> x2<span class=\"sy1\">,</span> y2<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> depth &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        ftree<span class=\"sy1\">(</span>g<span class=\"sy1\">,</span> x2<span class=\"sy1\">,</span> y2<span class=\"sy1\">,</span> distance<span class=\"sy3\">*</span>frac<span class=\"sy1\">,</span> direction<span class=\"sy3\">-</span>angle<span class=\"sy1\">,</span> depth<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        ftree<span class=\"sy1\">(</span>g<span class=\"sy1\">,</span> x2<span class=\"sy1\">,</span> y2<span class=\"sy1\">,</span> distance<span class=\"sy3\">*</span>frac<span class=\"sy1\">,</span> direction<span class=\"sy3\">+</span>angle<span class=\"sy1\">,</span> depth<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss<br/>\u00a0<br/><span class=\"kw1\">type</span> Model <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Picture <span class=\"sy0\">-&gt;</span> Picture<span class=\"br0\">]</span><br/>\u00a0<br/>fractal <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Model <span class=\"sy0\">-&gt;</span> Picture <span class=\"sy0\">-&gt;</span> Picture<br/>fractal n model pict <span class=\"sy0\">=</span> pictures <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>mconcat model<span class=\"br0\">)</span> pict<br/>\u00a0<br/>tree1 <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> fractal <span class=\"nu0\">10</span> branches <span class=\"sy0\">$</span> Line <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span> branches <span class=\"sy0\">=</span> <span class=\"br0\">[</span> Translate <span class=\"nu0\">0</span> <span class=\"nu0\">100</span> <span class=\"sy0\">.</span> Scale <span class=\"nu0\">0.75</span> <span class=\"nu0\">0.75</span> <span class=\"sy0\">.</span> Rotate <span class=\"nu0\">30</span> <br/>                   <span class=\"sy0\">,</span> Translate <span class=\"nu0\">0</span> <span class=\"nu0\">100</span> <span class=\"sy0\">.</span> Scale <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">.</span> Rotate <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> animate <span class=\"br0\">(</span>InWindow <span class=\"st0\">\"Tree\"</span> <span class=\"br0\">(</span><span class=\"nu0\">800</span><span class=\"sy0\">,</span> <span class=\"nu0\">800</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> white <span class=\"sy0\">$</span> tree1 <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">60</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>WOpen<span class=\"br0\">(</span><span class=\"st0\">\"size=800,600\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"bg=black\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"fg=white\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"*** cannot open window\"</span><span class=\"br0\">)</span><br/>drawtree<span class=\"br0\">(</span><span class=\"nu0\">400</span><span class=\"sy1\">,</span><span class=\"nu0\">500</span><span class=\"sy1\">,-</span><span class=\"nu0\">90</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>WDone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> WOpen<br/>\u00a0<br/><span class=\"kw1\">procedure</span> drawtree<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>angle<span class=\"sy1\">,</span>depth<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> depth <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>   x2 <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>x <span class=\"sy1\">+</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span><span class=\"kw4\">dtor</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> depth <span class=\"sy1\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   y2 <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>y <span class=\"sy1\">+</span> sin<span class=\"br0\">(</span><span class=\"kw4\">dtor</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> depth <span class=\"sy1\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   <span class=\"kw5\">DrawLine</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>x2<span class=\"sy1\">,</span>y2<span class=\"br0\">)</span>   <br/>   drawtree<span class=\"br0\">(</span>x2<span class=\"sy1\">,</span>y2<span class=\"sy1\">,</span>angle<span class=\"sy1\">-</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> depth<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   drawtree<span class=\"br0\">(</span>x2<span class=\"sy1\">,</span>y2<span class=\"sy1\">,</span>angle<span class=\"sy1\">+</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> depth<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'gl2'</span><br/>\u00a0<br/>L0=: <span class=\"nu0\">50</span>           <span class=\"co1\">NB. initial length</span><br/>A0=: <span class=\"nu0\">1r8p1</span>        <span class=\"co1\">NB. initial angle: pi divided by 8</span><br/>dL=: <span class=\"nu0\">0.9</span>          <span class=\"co1\">NB. shrink factor for length</span><br/>dA=: <span class=\"nu0\">0.75</span>         <span class=\"co1\">NB. shrink factor for angle</span><br/>N=: <span class=\"nu0\">14</span>            <span class=\"co1\">NB. number of branches</span><br/>\u00a0<br/>L=: L0*dL^<span class=\"nu0\">1</span>+i.N  <span class=\"co1\">NB. lengths of line segments</span><br/>\u00a0<br/><span class=\"co1\">NB. relative angles of successive line segments</span><br/>A=: A0*<span class=\"sy0\">(</span>dA^i.N<span class=\"sy0\">)</span> +/\\@:*<span class=\"sy0\">(</span>\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> <span class=\"nu0\">_1</span> ^ #:i.<span class=\"nu0\">2</span> ^ N<br/>\u00a0<br/><span class=\"co1\">NB. end points for each line segment</span><br/>P=: <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>+/\\@,\"<span class=\"nu0\">2</span> +.*.inv <span class=\"sy0\">(</span>L0,<span class=\"nu0\">0</span><span class=\"sy0\">)</span>,\"<span class=\"nu0\">2</span> L,\"<span class=\"nu0\">0</span>\"<span class=\"nu0\">1</span> A<br/>\u00a0<br/>P_C_paint=: gllines_jgl2_ bind <span class=\"sy0\">(</span><span class=\"nu0\">10</span> + ,/\"<span class=\"nu0\">2</span> P-\"<span class=\"nu0\">1</span>&lt;./,/P<span class=\"sy0\">)</span><br/>wd <span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/> pc P closeok;<br/> xywh <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">250</span> <span class=\"nu0\">300</span>;<br/> cc C isigraph rightmove bottommove;<br/> pas <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>;<br/> pshow;<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 32, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Color</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.Graphics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.JFrame</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FractalTree <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> FractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span><span class=\"br0\">(</span><span class=\"st0\">\"Fractal Tree\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBounds<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">800</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setResizable<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setDefaultCloseOperation<span class=\"br0\">(</span>EXIT_ON_CLOSE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> drawTree<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g, <span class=\"kw4\">int</span> x1, <span class=\"kw4\">int</span> y1, <span class=\"kw4\">double</span> angle, <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span>g, x2, y2, angle <span class=\"sy0\">-</span> <span class=\"nu0\">20</span>, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span>g, x2, y2, angle <span class=\"sy0\">+</span> <span class=\"nu0\">20</span>, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">BLACK</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span>g, <span class=\"nu0\">400</span>, <span class=\"nu0\">500</span>, <span class=\"sy0\">-</span><span class=\"nu0\">90</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> FractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 37, "block": "<pre class=\"javascript highlighted_source\">&lt;html&gt;<br/>&lt;body&gt;<br/>&lt;canvas id=\"canvas\" width=\"600\" height=\"500\"&gt;&lt;/canvas&gt;<br/>\u00a0<br/><span class=\"sy0\">&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"text/javascript\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">var</span> elem <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> context <span class=\"sy0\">=</span> elem.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>context.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'#000'</span><span class=\"sy0\">;</span><br/>context.<span class=\"me1\">lineWidth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> deg_to_rad <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> depth <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> drawLine<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> brightness<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  context.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  context.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> drawTree<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> angle<span class=\"sy0\">,</span> depth<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> deg_to_rad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> deg_to_rad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    drawLine<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> depth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>context.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>drawTree<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> depth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>context.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>context.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>&lt;/body&gt;<br/>&lt;/html&gt;</pre>"}, {"lang": "jq", "loc": 38, "block": "<pre class=\"text highlighted_source\"># width and height define the outer dimensions;<br/># len defines the trunk size;<br/># scale defines the branch length relative to the trunk;<br/>def main(width; height; len; scale):<br/>\u00a0<br/>  def PI: (1|atan)*4;<br/>\u00a0<br/>  def precision(n):<br/>    def pow(k): . as $in | reduce range(0;k) as $i (1; .*$in);<br/>    if . &lt; 0 then - (-. | precision(n))<br/>    else <br/>      (10|pow(n)) as $power<br/>    | (. * 10 * $power) | floor as $x | ($x\u00a0% 10) as $r<br/>    | ((if $r &lt; 5 then $x else $x + 5 end) / 10 | floor) / $power<br/>    end;<br/>\u00a0<br/>  def p2: precision(2);<br/>\u00a0<br/>  def tree(x; y; len; angle):<br/>    if len &lt; 1 then empty<br/>    else<br/>      (x + len * (angle|cos)) as $x2 <br/>    | (y + len * (angle|sin)) as $y2<br/>    | (if len &lt; 10 then 1 else 2 end) as $swidth<br/>    | (if len &lt; 10 then \"blue\" else \"black\" end) as $stroke<br/>    | \"&lt;line x1='\\(x|p2)' y1='\\(y|p2)' x2='\\($x2|p2)' y2='\\($y2|p2)' style='stroke:\\($stroke); stroke-width:\\($swidth)'/&gt;\",<br/>      tree($x2; $y2; len * scale; angle + PI / 5),<br/>      tree($x2; $y2; len * scale; angle - PI / 5)<br/>    end<br/> \u00a0;<br/>\u00a0<br/>  \"&lt;svg width='100%' height='100%' version='1.1'<br/>        xmlns='http://www.w3.org/2000/svg'&gt;\",<br/>        tree(width / 2; height; len; 3 * PI / 2),<br/>  \"&lt;/svg&gt;\"<br/>;<br/>\u00a0<br/>main(1000; 1000; 400; 6/10)</pre>"}, {"lang": "Kotlin", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Color</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> FractalTree <span class=\"sy0\">:</span> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Fractal Tree\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    init <span class=\"br0\">{</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">black</span><br/>        setBounds<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">800</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/>        isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        defaultCloseOperation <span class=\"sy0\">=</span> EXIT<span class=\"sy0\">_</span>ON<span class=\"sy0\">_</span>CLOSE<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawTree<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics, x1<span class=\"sy0\">:</span> Int, y1<span class=\"sy0\">:</span> Int, angle<span class=\"sy0\">:</span> Double, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> x1 + <span class=\"br0\">(</span>Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> y1 + <span class=\"br0\">(</span>Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>Math.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>g, x2, y2, angle - <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>g, x2, y2, angle + <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paint<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        drawTree<span class=\"br0\">(</span>g, <span class=\"nu0\">400</span>, <span class=\"nu0\">500</span>, -<span class=\"nu0\">90.0</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    FractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 38, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/> <span class=\"kw1\">NoMainWin</span><br/>sw <span class=\"sy0\">=</span> <span class=\"nu0\">640</span> <span class=\"sy0\">:</span>   sh <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><br/><span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span> sw<span class=\"sy0\">+</span><span class=\"nu0\">8</span> <span class=\"sy0\">:</span> <span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span> sh<span class=\"sy0\">+</span><span class=\"nu0\">31</span><br/><span class=\"kw3\">UpperLeftX</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">DisplayWidth</span> <span class=\"sy0\">-</span>sw<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw3\">UpperLeftY</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>DisplayHeight<span class=\"sy0\">-</span>sh<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">Open</span><span class=\"st0\">\"Fractal Tree\"</span> <span class=\"kw1\">For</span> Graphics_nf_nsb <span class=\"kw1\">As</span> <span class=\"sy0\">#</span>g<br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Down; Color darkgreen; TrapClose halt\"</span><br/>h$ <span class=\"sy0\">=</span> <span class=\"st0\">\"#g\"</span><br/>\u00a0<br/><span class=\"co1\">'initial assignments</span><br/>initAngle <span class=\"sy0\">=</span> <span class=\"kw2\">Acs</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">1.5</span> <span class=\"co1\">'radian equivalent of 270 degrees</span><br/>    theta <span class=\"sy0\">=</span> <span class=\"nu0\">29</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw2\">Acs</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><span class=\"br0\">)</span> <span class=\"co1\">'convert 29 degrees to radians</span><br/>   length <span class=\"sy0\">=</span> <span class=\"nu0\">110</span> <span class=\"co1\">'length in pixels</span><br/>    depth <span class=\"sy0\">=</span> <span class=\"nu0\">25</span>   <span class=\"co1\">'max recursion depth</span><br/>    <span class=\"co1\">'draw the tree</span><br/>    <span class=\"kw1\">Call</span> tree h$<span class=\"sy0\">,</span> <span class=\"nu0\">320</span><span class=\"sy0\">,</span> <span class=\"nu0\">470</span><span class=\"sy0\">,</span> initAngle<span class=\"sy0\">,</span> theta<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> depth<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Flush; when leftButtonDown halt\"</span> <span class=\"co1\">'L-click to exit</span><br/>    <span class=\"kw1\">Wait</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> halt handle$<br/>    <span class=\"kw1\">Close</span> <span class=\"sy0\">#</span>handle$<br/>    <span class=\"kw1\">End</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> tree h$<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> initAngle<span class=\"sy0\">,</span> theta<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> depth<br/>    <span class=\"kw1\">Scan</span><br/>    newX <span class=\"sy0\">=</span> <span class=\"kw2\">Cos</span><span class=\"br0\">(</span>initAngle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> length <span class=\"sy0\">+</span> x<br/>    newY <span class=\"sy0\">=</span> <span class=\"kw2\">Sin</span><span class=\"br0\">(</span>initAngle<span class=\"br0\">)</span> <span class=\"sy0\">*</span> length <span class=\"sy0\">+</span> y<br/>    <span class=\"sy0\">#</span>h$ <span class=\"st0\">\"Line \"</span>;x;<span class=\"st0\">\" \"</span>;y;<span class=\"st0\">\" \"</span>;newX;<span class=\"st0\">\" \"</span>;newY<br/>    length <span class=\"sy0\">=</span> length <span class=\"sy0\">*</span> .78<br/>    depth <span class=\"sy0\">=</span> depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> depth <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Call</span> tree h$<span class=\"sy0\">,</span> newX<span class=\"sy0\">,</span> newY<span class=\"sy0\">,</span> initAngle<span class=\"sy0\">-</span>theta<span class=\"sy0\">,</span> theta<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> depth<br/>        <span class=\"kw1\">Call</span> tree h$<span class=\"sy0\">,</span> newX<span class=\"sy0\">,</span> newY<span class=\"sy0\">,</span> initAngle<span class=\"sy0\">+</span>theta<span class=\"sy0\">,</span> theta<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> depth<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 27, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Creates an image of a fractal tree<br/>-- @param {integer} width<br/>-- @param {integer} height<br/>-- @param {integer} fractalDepth<br/>-- @param {integer|float} initSize<br/>-- @param {float} spreadAngle<br/>-- @param {float} [scaleFactor=1.0]<br/>-- @return {image}<br/>----------------------------------------<br/>on fractalTree (width, height, fractalDepth, initSize, spreadAngle, scaleFactor)<br/>  if voidP(scaleFactor) then scaleFactor = 1.0<br/>  img = image(width, height, 24)<br/>  img.fill(img.rect, rgb(0,0,0))<br/>  _drawTree(img, width/2, height, -PI/2, fractalDepth, initSize, spreadAngle, scaleFactor)<br/>  return img<br/>end<br/>\u00a0<br/>on _drawTree (img, x1, y1, angle, depth, size, spreadAngle, scaleFactor)<br/>  if (depth) then<br/>    x2 = x1 + cos(angle)*depth*size<br/>    y2 = y1 + sin(angle)*depth*size<br/>    img.draw(x1, y1, x2, y2, [#color:rgb(255,255,255)])<br/>    _drawTree(img, x2, y2, angle-spreadAngle, depth-1, size*ScaleFactor, spreadAngle, scaleFactor)<br/>    _drawTree(img, x2, y2, angle+spreadAngle, depth-1, size*ScaleFactor, spreadAngle, scaleFactor)<br/>  end if<br/>end</pre>"}, {"lang": "Logo", "loc": 14, "block": "<pre class=\"text highlighted_source\">to tree\u00a0:depth\u00a0:length\u00a0:scale\u00a0:angle<br/>  if\u00a0:depth=0 [stop]<br/>  setpensize round\u00a0:depth/2<br/>  forward\u00a0:length<br/>  right\u00a0:angle<br/>  tree\u00a0:depth-1\u00a0:length*:scale\u00a0:scale\u00a0:angle<br/>  left 2*:angle<br/>  tree\u00a0:depth-1\u00a0:length*:scale\u00a0:scale\u00a0:angle<br/>  right\u00a0:angle<br/>  back\u00a0:length<br/>end<br/>\u00a0<br/>clearscreen<br/>tree 10 80 0.7 30</pre>"}, {"lang": "Lua", "loc": 39, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>g<span class=\"sy0\">,</span> angle <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">,</span> <span class=\"nu0\">26</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.pi</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><br/>wid<span class=\"sy0\">,</span> hei <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> g<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">function</span> rotate<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> a <span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> s<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"kw3\">math.sin</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.cos</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> c <span class=\"sy0\">-</span> y <span class=\"sy0\">*</span> s<span class=\"sy0\">,</span> x <span class=\"sy0\">*</span> s <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> c<br/>  <span class=\"kw1\">return</span> a<span class=\"sy0\">,</span> b<br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> branches<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> ang<span class=\"sy0\">,</span> dir <span class=\"br0\">)</span><br/>  len <span class=\"sy0\">=</span> len <span class=\"sy0\">*</span> <span class=\"nu0\">.76</span><br/>  <span class=\"kw1\">if</span> len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">end</span><br/>  g<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> len <span class=\"sy0\">*</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> len <span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> dir <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> ang <span class=\"sy0\">=</span> ang <span class=\"sy0\">-</span> angle<br/>  <span class=\"kw1\">else</span> ang <span class=\"sy0\">=</span> ang <span class=\"sy0\">+</span> angle <br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> vx<span class=\"sy0\">,</span> vy <span class=\"sy0\">=</span> rotate<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> ang <span class=\"br0\">)</span><br/>  vx <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> vx<span class=\"sy0\">;</span> vy <span class=\"sy0\">=</span> b <span class=\"sy0\">-</span> vy<br/>  g<span class=\"sy0\">.</span>line<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> vx<span class=\"sy0\">,</span> vy <span class=\"br0\">)</span><br/>  branches<span class=\"br0\">(</span> vx<span class=\"sy0\">,</span> vy<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> ang<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>  branches<span class=\"br0\">(</span> vx<span class=\"sy0\">,</span> vy<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> ang<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> createTree<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> lineLen <span class=\"sy0\">=</span> <span class=\"nu0\">127</span><br/>  <span class=\"kw1\">local</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> wid <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> hei <span class=\"sy0\">-</span> lineLen<br/>  g<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"nu0\">160</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span> <span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>  g<span class=\"sy0\">.</span>line<span class=\"br0\">(</span> wid <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> hei<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>  branches<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> lineLen<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <br/>  branches<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> lineLen<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  canvas <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><br/>  g<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/>  createTree<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  g<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  g<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 18, "block": "<pre class=\"text highlighted_source\">fractalTree[<br/>  pt\u00a0: {_, _}, \\[Theta]orient_: \\[Pi]/2, \\[Theta]sep_: \\[Pi]/9, <br/>  depth_Integer: 9]\u00a0:= Module[{pt2},<br/>  If[depth == 0, Return[]];<br/>  pt2 = pt + {Cos[\\[Theta]orient], Sin[\\[Theta]orient]}*depth;<br/>  DeleteCases[<br/>   <a class=\"__cf_email__\" data-cfemail=\"33755f524747565d73\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<br/>     Line[{pt, pt2}],<br/>     fractalTree[pt2, \\[Theta]orient - \\[Theta]sep, \\[Theta]sep, <br/>      depth - 1],<br/>     fractalTree[pt2, \\[Theta]orient + \\[Theta]sep, \\[Theta]sep, <br/>      depth - 1]<br/>     },<br/>   Null<br/>   ]<br/>  ]<br/>Graphics[fractalTree[{0, 0}, \\[Pi]/2, \\[Pi]/9]]<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 38, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">awt</span>.<span class=\"me0\">Color</span><br/><span class=\"kw1\">import</span> java.<span class=\"me0\">awt</span>.<span class=\"me0\">Graphics</span><br/><span class=\"kw1\">import</span> javax.<span class=\"me0\">swing</span>.<span class=\"me0\">JFrame</span><br/>\u00a0<br/><span class=\"kw1\">class</span> RFractalTree <span class=\"kw2\">public</span> <span class=\"kw2\">extends</span> JFrame<br/>  <span class=\"kw1\">properties</span> <span class=\"kw2\">constant</span><br/>    isTrue  = <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    isFalse = <span class=\"sy0\">\\</span>isTrue<br/>  <span class=\"co1\">-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><br/>  method RFractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    <span class=\"kw4\">super</span><span class=\"br0\">(</span><span class=\"st0\">'Fractal Tree'</span><span class=\"br0\">)</span><br/>    setBounds<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">800</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/>    setResizable<span class=\"br0\">(</span>isFalse<span class=\"br0\">)</span><br/>    setDefaultCloseOperation<span class=\"br0\">(</span>JFrame.<span class=\"me0\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"co1\">-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><br/>  method drawTree<span class=\"br0\">(</span>g = Graphics, x1 = int, y1 = int, angle = double, depth = int<span class=\"br0\">)</span> <span class=\"kw2\">private</span><br/>    <span class=\"kw1\">if</span> depth <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      x2 = x1 + <span class=\"br0\">(</span>int Math.<span class=\"me0\">cos</span><span class=\"br0\">(</span>Math.<span class=\"me0\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>      y2 = y1 + <span class=\"br0\">(</span>int Math.<span class=\"me0\">sin</span><span class=\"br0\">(</span>Math.<span class=\"me0\">toRadians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>      g.<span class=\"me0\">drawLine</span><span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><br/>      drawTree<span class=\"br0\">(</span>g, x2, y2, angle - <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      drawTree<span class=\"br0\">(</span>g, x2, y2, angle + <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"co1\">-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><br/>  method paint<span class=\"br0\">(</span>g = Graphics<span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    g.<span class=\"me0\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me0\">BLACK</span><span class=\"br0\">)</span><br/>    drawTree<span class=\"br0\">(</span>g, <span class=\"nu0\">400</span>, <span class=\"nu0\">500</span>, -<span class=\"nu0\">90</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    RFractalTree<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">setVisible</span><span class=\"br0\">(</span>isTrue<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 77, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>directory <span class=\"st0\">\"+cairo\"</span><br/><span class=\"sy0\">#</span>load <span class=\"st0\">\"bigarray.cma\"</span><br/><span class=\"sy0\">#</span>load <span class=\"st0\">\"cairo.cma\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> img_name <span class=\"sy0\">=</span> <span class=\"st0\">\"/tmp/fractree.png\"</span><br/><span class=\"kw1\">let</span> width  <span class=\"sy0\">=</span> <span class=\"nu0\">480</span><br/><span class=\"kw1\">let</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><br/>\u00a0<br/><span class=\"kw1\">let</span> level <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/><span class=\"kw1\">let</span> line_width <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> color <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.5</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALatan\"><span class=\"kw3\">atan</span></a> <span class=\"nu0\">1.0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> angle_split <span class=\"sy0\">=</span> pi <span class=\"sy0\">*.</span> <span class=\"nu0\">0.12</span><br/><span class=\"kw1\">let</span> angle_rand  <span class=\"sy0\">=</span> pi <span class=\"sy0\">*.</span> <span class=\"nu0\">0.12</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> surf <span class=\"sy0\">=</span> Cairo<span class=\"sy0\">.</span>image_surface_create Cairo<span class=\"sy0\">.</span>FORMAT_RGB24 <span class=\"re1\">~width</span> <span class=\"re1\">~height</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ctx <span class=\"sy0\">=</span> Cairo<span class=\"sy0\">.</span>create surf <span class=\"kw1\">in</span><br/>  Cairo<span class=\"sy0\">.</span>set_antialias ctx Cairo<span class=\"sy0\">.</span>ANTIALIAS_SUBPIXEL<span class=\"sy0\">;</span><br/>  Cairo<span class=\"sy0\">.</span>set_line_cap ctx Cairo<span class=\"sy0\">.</span>LINE_CAP_ROUND<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> draw_line <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">(</span>dx,dy<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    Cairo<span class=\"sy0\">.</span>move_to ctx x  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> height <span class=\"sy0\">-.</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Cairo<span class=\"sy0\">.</span>line_to ctx dx <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> height <span class=\"sy0\">-.</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Cairo<span class=\"sy0\">.</span>stroke ctx<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> set_color <span class=\"br0\">(</span>r,g,b<span class=\"br0\">)</span> v <span class=\"sy0\">=</span><br/>    Cairo<span class=\"sy0\">.</span>set_source_rgb ctx <span class=\"re1\">~red</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>r <span class=\"sy0\">*.</span> v<span class=\"br0\">)</span> <span class=\"re1\">~green</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>g <span class=\"sy0\">*.</span> v<span class=\"br0\">)</span> <span class=\"re1\">~blue</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>b <span class=\"sy0\">*.</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> trans_pos <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> len angle <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> _x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a> angle<br/>    <span class=\"kw1\">and</span> _y <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsin\"><span class=\"kw3\">sin</span></a> angle <span class=\"kw1\">in</span><br/>    <span class=\"br0\">(</span>x <span class=\"sy0\">+.</span> <span class=\"br0\">(</span>_x <span class=\"sy0\">*.</span> len<span class=\"br0\">)</span>,<br/>     y <span class=\"sy0\">+.</span> <span class=\"br0\">(</span>_y <span class=\"sy0\">*.</span> len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop <span class=\"re1\">~level</span> <span class=\"re1\">~pos</span> <span class=\"re1\">~line_width</span> <span class=\"re1\">~line_len</span><br/>               <span class=\"re1\">~angle</span> <span class=\"re1\">~angle_split</span> <span class=\"re1\">~angle_rand</span> <span class=\"re1\">~intc</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> level <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">(* draw the current segment *)</span><br/>      Cairo<span class=\"sy0\">.</span>set_line_width ctx line_width<span class=\"sy0\">;</span><br/>      set_color color intc<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">let</span> pos_to <span class=\"sy0\">=</span> trans_pos pos line_len angle <span class=\"kw1\">in</span><br/>      draw_line pos pos_to<span class=\"sy0\">;</span><br/>      <span class=\"co1\">(* evolution of the parameters *)</span><br/>      <span class=\"kw1\">let</span> line_width <span class=\"sy0\">=</span> line_width <span class=\"sy0\">*.</span> <span class=\"nu0\">0.8</span><br/>      <span class=\"kw1\">and</span> line_len   <span class=\"sy0\">=</span> line_len   <span class=\"sy0\">*.</span> <span class=\"nu0\">0.62</span><br/>      <span class=\"kw1\">and</span> angle_split <span class=\"sy0\">=</span> angle_split <span class=\"sy0\">*.</span> <span class=\"nu0\">1.02</span><br/>      <span class=\"kw1\">and</span> angle_rand  <span class=\"sy0\">=</span> angle_rand  <span class=\"sy0\">*.</span> <span class=\"nu0\">1.02</span><br/>      <span class=\"kw1\">and</span> intc <span class=\"sy0\">=</span> intc <span class=\"sy0\">*.</span> <span class=\"nu0\">0.9</span><br/>      <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> next_loop <span class=\"sy0\">=</span><br/>        loop <span class=\"re1\">~level</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> level<span class=\"br0\">)</span> <span class=\"re1\">~pos</span><span class=\"sy0\">:</span>pos_to <span class=\"re1\">~intc</span><br/>             <span class=\"re1\">~line_width</span> <span class=\"re1\">~line_len</span> <span class=\"re1\">~angle_split</span> <span class=\"re1\">~angle_rand</span><br/>      <span class=\"kw1\">in</span><br/>      <span class=\"co1\">(* split *)</span><br/>      <span class=\"kw1\">let</span> angle_left  <span class=\"sy0\">=</span> angle <span class=\"sy0\">+.</span> angle_split <span class=\"sy0\">+.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> angle_rand<br/>      <span class=\"kw1\">and</span> angle_right <span class=\"sy0\">=</span> angle <span class=\"sy0\">-.</span> angle_split <span class=\"sy0\">-.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> angle_rand<br/>      <span class=\"kw1\">in</span><br/>      next_loop <span class=\"re1\">~angle</span><span class=\"sy0\">:</span>angle_left<span class=\"sy0\">;</span><br/>      next_loop <span class=\"re1\">~angle</span><span class=\"sy0\">:</span>angle_right<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> width <span class=\"sy0\">*.</span> <span class=\"nu0\">0.5</span>, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> height <span class=\"sy0\">*.</span> <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> line_len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> height <span class=\"sy0\">*.</span> <span class=\"nu0\">0.3</span><br/>  <span class=\"kw1\">in</span><br/>  loop <span class=\"re1\">~level</span> <span class=\"re1\">~pos</span> <span class=\"re1\">~angle</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>pi <span class=\"sy0\">/.</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>       <span class=\"re1\">~angle_split</span> <span class=\"re1\">~angle_rand</span><br/>       <span class=\"re1\">~line_width</span> <span class=\"re1\">~line_len</span> <span class=\"re1\">~intc</span><span class=\"sy0\">:</span><span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  Cairo_png<span class=\"sy0\">.</span>surface_write_to_file surf img_name<br/>  <span class=\"co1\">(*Cairo_png.surface_write_to_channel surf stdout*)</span></pre>"}, {"lang": "PARI/GP", "loc": 35, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Fractal tree (w/recursion)</span><br/><span class=\"co1\">\\\\ 4/10/16 aev</span><br/>plotline<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw1\">plotmove</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> x1<span class=\"sy0\">,</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">plotrline</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>x2<span class=\"sy0\">-</span>x1<span class=\"sy0\">,</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>plottree<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span>d2r<span class=\"sy0\">=</span><span class=\"kw1\">Pi</span><span class=\"sy0\">/</span><span class=\"nu2\">180.0</span><span class=\"sy0\">,</span>a1<span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>d2r<span class=\"sy0\">,</span>d1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>d<span class=\"sy0\">&lt;=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>d<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> d1<span class=\"sy0\">=</span>d<span class=\"sy0\">*</span><span class=\"nu2\">10.0</span><span class=\"sy0\">;</span><br/>    x2<span class=\"sy0\">=</span>x<span class=\"sy0\">+</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span>d1<span class=\"sy0\">;</span><br/>    y2<span class=\"sy0\">=</span>y<span class=\"sy0\">+</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>a1<span class=\"br0\">)</span><span class=\"sy0\">*</span>d1<span class=\"sy0\">;</span><br/>    plotline<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>x2<span class=\"sy0\">,</span>y2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    plottree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span>a<span class=\"sy0\">-</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span>d<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    plottree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span>a<span class=\"sy0\">+</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span>d<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>FractalTree<span class=\"br0\">(</span>depth<span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>dx<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>dy<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>ttlb<span class=\"sy0\">=</span><span class=\"st0\">\"Fractal Tree, depth \"</span><span class=\"sy0\">,</span>ttl<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>ttlb<span class=\"sy0\">,</span>depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\" *** \"</span><span class=\"sy0\">,</span>ttl<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\", size \"</span><span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotinit</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotcolor</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\green</span><br/><span class=\"kw1\">plotscale</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>size<span class=\"sy0\">,</span>size<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">plotmove</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>plottree<span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">90</span><span class=\"sy0\">,</span>depth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">plotdraw</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>size<span class=\"sy0\">,</span>size<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Executing:</span><br/>FractalTree<span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">\\\\FracTree1.png</span><br/>FractalTree<span class=\"br0\">(</span><span class=\"nu1\">12</span><span class=\"sy0\">,</span><span class=\"nu1\">1100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">\\\\FracTree2.png</span><br/>FractalTree<span class=\"br0\">(</span><span class=\"nu1\">15</span><span class=\"sy0\">,</span><span class=\"nu1\">1500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">\\\\FracTree3.png</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 30, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> GD<span class=\"sy0\">::</span><span class=\"me2\">Simple</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># image dimension</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$scale</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"co1\"># branch scale relative to trunk</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span> <span class=\"co1\"># trunk size</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> GD<span class=\"sy0\">::</span><span class=\"me2\">Simple</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span><span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fgcolor</span><span class=\"br0\">(</span><span class=\"st_h\">'black'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">penSize</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>tree<span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span><span class=\"sy0\">,</span> <span class=\"nu0\">270</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">png</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> tree<br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$len</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">moveTo</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">angle</span><span class=\"br0\">(</span><span class=\"re0\">$angle</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">line</span><span class=\"br0\">(</span><span class=\"re0\">$len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">curPos</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        tree<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"re0\">*$scale</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"sy0\">+</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tree<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"re0\">*$scale</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"sy0\">-</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 22, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># image dimension</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$scale</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"co1\"># branch scale relative to trunk</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span> <span class=\"co1\"># trunk size</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"&lt;?xml version='1.0' encoding='utf-8' standalone='no'?&gt;<br/>&lt;!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' <br/>'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'&gt;<br/>&lt;svg width='100%' height='100%' version='1.1'<br/>xmlns='http://www.w3.org/2000/svg'&gt;\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>tree<span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"&lt;/svg&gt;\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> tree<span class=\"br0\">(</span>$<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"re0\">$length</span> <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"re0\">$length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> tree<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$length</span> <span class=\"sy0\">*</span> <span class=\"re0\">$angle</span><span class=\"sy0\">.</span><span class=\"me1\">cos</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$length</span> <span class=\"sy0\">*</span> <span class=\"re0\">$angle</span><span class=\"sy0\">.</span><span class=\"me1\">sin</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">say</span> <span class=\"st0\">\"&lt;line x1='$x' y1='$y' x2='$x2' y2='$y2' style='stroke:rgb(0,0,0);stroke-width:1'/&gt;\"</span><span class=\"sy0\">;</span><br/>\ttree<span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span><span class=\"sy0\">*</span><span class=\"re0\">$scale</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">+</span> pi<span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttree<span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span><span class=\"sy0\">*</span><span class=\"re0\">$scale</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">-</span> pi<span class=\"sy0\">/</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 60, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\FractalTree.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>procedure drawTree(integer level, atom angle, atom len, integer x, integer y)<br/>integer xn = x + floor(len*cos(angle))<br/>integer yn = y + floor(len*sin(angle))<br/>integer red = 255-level*8<br/>integer grn = level*12+100<br/>    cdCanvasSetForeground(cddbuffer, red*#10000 + grn*#100)<br/>    cdCanvasLineWidth(cddbuffer,floor(5-level/3))<br/>    cdCanvasLine(cddbuffer, x, 480-y, xn, 480-yn)<br/>    if level&lt;12 then<br/>        drawTree(level+1, angle-0.4, len*0.8, xn, yn)   --left<br/>        drawTree(level+1, angle+0.1, len*0.8, xn, yn)   --right<br/>    end if<br/>end procedure<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>    cdCanvasActivate(cddbuffer)<br/>    cdCanvasClear(cddbuffer)<br/>    drawTree(0, -PI/2.0, 80.0, 360, 460)<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_PARCHMENT)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"640x480\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas,\"RESIZE=NO\")<br/>    IupSetAttribute(dlg, \"TITLE\", \"Fractal Tree\")<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"esc_close\"))<br/>\u00a0<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PHP", "loc": 32, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/><a href=\"http://www.php.net/header\"><span class=\"kw3\">header</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Content-type: image/png\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$img</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecreatetruecolor\"><span class=\"kw3\">imagecreatetruecolor</span></a><span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">,</span><span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$bg</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/imagefilledrectangle\"><span class=\"kw3\">imagefilledrectangle</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"sy0\">,</span> <span class=\"re0\">$bg</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$depth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">function</span> drawTree<span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">global</span> <span class=\"re0\">$img</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$depth</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://www.php.net/cos\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/deg2rad\"><span class=\"kw3\">deg2rad</span></a><span class=\"br0\">(</span><span class=\"re0\">$angle</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">*</span> <span class=\"nu19\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$y2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/deg2rad\"><span class=\"kw3\">deg2rad</span></a><span class=\"br0\">(</span><span class=\"re0\">$angle</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">*</span> <span class=\"nu19\">10.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.php.net/imageline\"><span class=\"kw3\">imageline</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span> <span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/imagecolorallocate\"><span class=\"kw3\">imagecolorallocate</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawTree<span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawTree<span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>drawTree<span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/imagepng\"><span class=\"kw3\">imagepng</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/imagedestroy\"><span class=\"kw3\">imagedestroy</span></a><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>(de fractalTree (Img X Y A D)<br/>   (unless (=0 D)<br/>      (let (R (*/ A pi 180.0)  DX (*/ (cos R) D 0.2)  DY (*/ (sin R) D 0.2))<br/>         (brez Img X Y DX DY)<br/>         (fractalTree Img (+ X DX) (+ Y DY) (+ A 30.0) (dec D))<br/>         (fractalTree Img (+ X DX) (+ Y DY) (- A 30.0) (dec D)) ) ) )<br/>\u00a0<br/>(let Img (make (do 300 (link (need 400 0))))       # Create image 400 x 300<br/>   (fractalTree Img 200 300 -90.0 10)              # Draw tree<br/>   (out \"img.pbm\"                                  # Write to bitmap file<br/>      (prinl \"P1\")<br/>      (prinl 400 \" \" 300)<br/>      (mapc prinl Img) ) )</pre>"}, {"lang": "PostScript", "loc": 46, "block": "<pre class=\"text highlighted_source\">%!PS<br/>%%BoundingBox: 0 0 300 300<br/>%%EndComments<br/>/origstate save def<br/>/ld {load def} bind def<br/>/m /moveto ld /g /setgray ld /t /translate ld<br/>/r /rotate ld /l /lineto ld<br/>/rl /rlineto ld /s /scale ld<br/>%%EndProlog<br/>/PerturbateAngle {} def<br/>/PerturbateLength {} def<br/>% ** To add perturbations, define properly PerturbateAngle and PerturbateLength, e.g.<br/>% /PerturbateAngle {realtime 20 mod realtime 2 mod 1 eq {add} {sub} ifelse} def<br/>% /PerturbateLength {realtime 10 mod 100 div realtime 2 mod 1 eq {add} {sub} ifelse} def<br/>/fractree {\u00a0% [INITLENGTH, SPLIT, SFACTOR, BRANCHES]<br/>  dup 3 get 0 gt<br/>  {<br/>    0 0 m dup 0 get 0 exch l<br/>    gsave<br/>      dup 0 get 0 exch t<br/>      dup 1 get PerturbateAngle r<br/>      dup 2 get dup PerturbateLength s<br/>      dup aload pop 1 sub 4 array astore fractree stroke<br/>    grestore<br/>    gsave<br/>      dup 0 get 0 exch t<br/>      dup 1 get neg PerturbateAngle r<br/>      dup 2 get dup PerturbateLength s<br/>      dup aload pop 1 sub 4 array astore fractree stroke<br/>    grestore<br/>  } if pop<br/>} def<br/>%<br/>/BRANCHES 14 def<br/>/INITLENGTH 50 def<br/>/SPLIT 35 def<br/>/SFACTOR .75 def<br/>%<br/>% BB check<br/>%0 0 m 300 0 rl 0 300 rl -300 0 rl closepath stroke<br/>%<br/>0 g 150 0 t<br/>[INITLENGTH SPLIT SFACTOR BRANCHES] fractree stroke<br/>%<br/>showpage origstate restore<br/>%%EOF</pre>"}, {"lang": "POV-Ray", "loc": 43, "block": "<pre class=\"povray highlighted_source\"><span class=\"re1\">#include</span> <span class=\"st0\">\"colors.inc\"</span><br/><span class=\"re1\">#include</span> <span class=\"st0\">\"transforms.inc\"</span><br/>\u00a0<br/><span class=\"re1\">#declare</span> CamLoc <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span>;<br/><span class=\"re1\">#declare</span> CamLook <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span>;<br/><span class=\"kw4\">camera</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">location</span> CamLoc<br/>  <span class=\"kw1\">look_at</span> CamLook<br/>  <span class=\"kw1\">rotate</span> <span class=\"kw3\">y</span><span class=\"sy0\">*</span><span class=\"nu0\">90</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">light_source</span><br/><span class=\"br0\">{</span><br/>  CamLoc<br/>  <span class=\"kw1\">color</span> White<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re1\">#declare</span> Init_Height    <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>;<br/><span class=\"re1\">#declare</span> Spread_Ang     <span class=\"sy0\">=</span> <span class=\"nu0\">35</span>;<br/><span class=\"re1\">#declare</span> Branches       <span class=\"sy0\">=</span> <span class=\"nu0\">14</span>;<br/><span class=\"re1\">#declare</span> Scaling_Factor <span class=\"sy0\">=</span> <span class=\"nu0\">0.75</span>;<br/>\u00a0<br/><span class=\"re1\">#macro</span> Stick<span class=\"br0\">(</span>P0, P1<span class=\"br0\">)</span><br/>  <span class=\"kw4\">cylinder</span> <span class=\"br0\">{</span> <br/>    P0, P1, <span class=\"nu0\">0.02</span><br/>    <span class=\"kw4\">texture</span> <span class=\"br0\">{</span> <span class=\"kw4\">pigment</span> <span class=\"br0\">{</span> <span class=\"kw3\">Green</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"re0\"><span class=\"re1\">#end</span></span><br/>\u00a0<br/><span class=\"re1\">#macro</span> FractalTree<span class=\"br0\">(</span>O, D, S, R, B<span class=\"br0\">)</span><br/>  <span class=\"re1\">#if</span> <span class=\"br0\">(</span>B <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    Stick<span class=\"br0\">(</span>O, O<span class=\"sy0\">+</span>D<span class=\"sy0\">*</span>S<span class=\"br0\">)</span><br/>    FractalTree<span class=\"br0\">(</span>O<span class=\"sy0\">+</span>D<span class=\"sy0\">*</span>S, vtransform<span class=\"br0\">(</span>D, <span class=\"kw1\">transform</span><span class=\"br0\">{</span><span class=\"kw1\">rotate</span> <span class=\"kw3\">y</span><span class=\"sy0\">*</span>R<span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>      S<span class=\"sy0\">*</span>Scaling_Factor, R, B<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    FractalTree<span class=\"br0\">(</span>O<span class=\"sy0\">+</span>D<span class=\"sy0\">*</span>S, vtransform<span class=\"br0\">(</span>D, <span class=\"kw1\">transform</span><span class=\"br0\">{</span><span class=\"kw1\">rotate</span> <span class=\"sy0\">-</span><span class=\"kw3\">y</span><span class=\"sy0\">*</span>R<span class=\"br0\">}</span><span class=\"br0\">)</span>,<br/>      S<span class=\"sy0\">*</span>Scaling_Factor, R, B<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"re0\"><span class=\"re1\">#end</span></span><br/><span class=\"re0\"><span class=\"re1\">#end</span></span><br/>\u00a0<br/><span class=\"kw4\">union</span> <span class=\"br0\">{</span><br/>  FractalTree<span class=\"br0\">(</span><span class=\"sy0\">&lt;-</span><span class=\"nu0\">2</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span>, <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span>, <span class=\"nu0\">1</span>, Spread_Ang, Branches<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 21, "block": "<pre class=\"prolog highlighted_source\">fractal <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Fractal'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">800</span><span class=\"sy4\">,</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdrawTree<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <span class=\"nu0\">400</span><span class=\"sy4\">,</span> <span class=\"nu0\">500</span><span class=\"sy4\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">90</span><span class=\"sy4\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>drawTree<span class=\"br0\">(</span>_D<span class=\"sy4\">,</span> _X<span class=\"sy4\">,</span> _Y<span class=\"sy4\">,</span> _Angle<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>drawTree<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X1<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> Angle<span class=\"sy4\">,</span> Depth<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        X2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X1 <span class=\"sy3\">+</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">cos</span></a><span class=\"br0\">(</span>Angle <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">180.0</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> Depth <span class=\"sy3\">*</span> <span class=\"nu0\">10.0</span><span class=\"sy4\">,</span><br/>        Y2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y1 <span class=\"sy3\">+</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sin</span></a><span class=\"br0\">(</span>Angle <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> <span class=\"nu0\">180.0</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> Depth <span class=\"sy3\">*</span> <span class=\"nu0\">10.0</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Line<span class=\"sy4\">,</span> line<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> none<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tA1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Angle <span class=\"sy3\">-</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\tA2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Angle <span class=\"sy3\">+</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\tDe <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Depth <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>        drawTree<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> A1<span class=\"sy4\">,</span> De<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        drawTree<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X2<span class=\"sy4\">,</span> Y2<span class=\"sy4\">,</span> A2<span class=\"sy4\">,</span> De<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\">#Spread_Ang     <span class=\"sy0\">=</span> <span class=\"nu0\">35</span><br/>#Scaling_Factor <span class=\"sy0\">=</span> <span class=\"nu0\">0.75</span><br/>#Deg_to_Rad <span class=\"sy0\">=</span> #PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><br/>#SizeH <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><br/>#SizeV <span class=\"sy0\">=</span> <span class=\"nu0\">375</span><br/>#Init_Size <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> drawTree<span class=\"br0\">(</span>x1, y1, Size, theta, depth<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x2 <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"kw2\">Cos</span><span class=\"br0\">(</span>theta <span class=\"sy0\">*</span> #Deg_to_Rad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Size, y2 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"kw2\">Sin</span><span class=\"br0\">(</span>theta <span class=\"sy0\">*</span> #Deg_to_Rad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Size<br/>  <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>x1, y1, x2, y2, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">255</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> depth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">ProcedureReturn</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"co1\">;draw left branch</span><br/>  drawTree<span class=\"br0\">(</span>x2, y2, Size <span class=\"sy0\">*</span> #Scaling_Factor, theta <span class=\"sy0\">-</span> #Spread_Ang, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;draw right branch</span><br/>  drawTree<span class=\"br0\">(</span>x2, y2, Size <span class=\"sy0\">*</span> #Scaling_Factor, theta <span class=\"sy0\">+</span> #Spread_Ang, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, #SizeH, #SizeV, <span class=\"st0\">\"Fractal Tree\"</span>, #PB_Window_SystemMenu<span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span> fractal <span class=\"sy0\">=</span> <span class=\"kw2\">CreateImage</span><span class=\"br0\">(</span>#PB_Any, #SizeH, #SizeV, <span class=\"nu0\">32</span><span class=\"br0\">)</span><br/><span class=\"kw2\">ImageGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span>fractal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span>fractal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    drawTree<span class=\"br0\">(</span>#SizeH <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, #SizeV, #Init_Size, <span class=\"sy0\">-</span><span class=\"nu0\">90</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">SetGadgetState</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw2\">ImageID</span><span class=\"br0\">(</span>fractal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span> <br/>\u00a0<br/><span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #PB_Event_CloseWindow</pre>"}, {"lang": "Python", "loc": 23, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> pygame<span class=\"sy0\">,</span> <span class=\"kw3\">math</span><br/>\u00a0<br/>pygame.<span class=\"me1\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>window <span class=\"sy0\">=</span> pygame.<span class=\"me1\">display</span>.<span class=\"me1\">set_mode</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">600</span><span class=\"sy0\">,</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>pygame.<span class=\"me1\">display</span>.<span class=\"me1\">set_caption</span><span class=\"br0\">(</span><span class=\"st0\">\"Fractal Tree\"</span><span class=\"br0\">)</span><br/>screen <span class=\"sy0\">=</span> pygame.<span class=\"me1\">display</span>.<span class=\"me1\">get_surface</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> drawTree<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> angle<span class=\"sy0\">,</span> depth<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> depth:<br/>        x2 <span class=\"sy0\">=</span> x1 + <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">radians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> * depth * <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>        y2 <span class=\"sy0\">=</span> y1 + <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">radians</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> * depth * <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>        pygame.<span class=\"me1\">draw</span>.<span class=\"me1\">line</span><span class=\"br0\">(</span>screen<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle - <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle + <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span>event<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> event.<span class=\"kw2\">type</span> <span class=\"sy0\">==</span> pygame.<span class=\"me1\">QUIT</span>:<br/>        exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>drawTree<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">550</span><span class=\"sy0\">,</span> -<span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>pygame.<span class=\"me1\">display</span>.<span class=\"me1\">flip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>    <span class=\"kw2\">input</span><span class=\"br0\">(</span>pygame.<span class=\"me1\">event</span>.<span class=\"me1\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## Recursive FT plotting<br/>plotftree &lt;- function(x, y, a, d, c) {<br/>x2=y2=0; d2r=pi/180.0; a1 &lt;- a*d2r; d1=0;<br/>if(d&lt;=0) {return()}<br/>if(d&gt;0)<br/>  { d1=d*10.0;<br/>    x2=x+cos(a1)*d1;<br/>    y2=y+sin(a1)*d1;<br/>    segments(x*c, y*c, x2*c, y2*c, col='darkgreen');<br/>    plotftree(x2,y2,a-20,d-1,c);<br/>    plotftree(x2,y2,a+20,d-1,c);<br/>    #return(2);<br/>  }<br/>}<br/>## Plotting Fractal Tree. aev 3/27/17<br/>## ord - order/depth, c - scale, xsh - x-shift, fn - file name,<br/>##  ttl - plot title.<br/>pFractalTree &lt;- function(ord, c=1, xsh=0, fn=\"\", ttl=\"\") {<br/>  cat(\" *** START FRT:\", date(), \"\\n\");<br/>  m=640;<br/>  if(fn==\"\") {pf=paste0(\"FRTR\", ord, \".png\")} else {pf=paste0(fn, \".png\")};<br/>  if(ttl==\"\") {ttl=paste0(\"Fractal tree, order - \", ord)};<br/>  cat(\" *** Plot file -\", pf, \"title:\", ttl, \"\\n\");<br/>  ##plot(NA, xlim=c(0,m), ylim=c(-m,0), xlab=\"\", ylab=\"\", main=ttl);<br/>  plot(NA, xlim=c(0,m), ylim=c(0,m), xlab=\"\", ylab=\"\", main=ttl);<br/>  plotftree(m/2+xsh,100,90,ord,c);<br/>  dev.copy(png, filename=pf, width=m, height=m);<br/>  dev.off(); graphics.off();<br/>  cat(\" *** END FRT:\",date(),\"\\n\");<br/>}<br/>## Executing:<br/>pFractalTree(9);<br/>pFractalTree(12,0.6,210);<br/>pFractalTree(15,0.35,600);<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require graphics/turtles)<br/>\u00a0<br/>(define (tree n)<br/>  (when (&gt; n 1)<br/>    (draw (/ n 2))<br/>    (tprompt (split* (turn 60) (turn -60))<br/>             (tree (/ n 2)))<br/>    (draw (/ n 2))<br/>    (turn 5)<br/>    (tree (- n 1))))<br/>\u00a0<br/>(turtles #t) (move 100) (turn 90) (move -200)<br/>(tree 35)    <br/>(save-turtle-bitmap \"tree.png\" 'png)<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>               setwindowtitle(\"drawing using qpainter\")<br/>               setgeometry(100,100,500,500)<br/>               label1 = new qlabel(win1) {<br/>                        setgeometry(10,10,400,400)<br/>                        settext(\"\")<br/>               }<br/>               draw()<br/>               show()<br/>         }<br/>         exec()<br/>         }<br/>\u00a0<br/>func draw<br/>     p1 = new qpicture()<br/>             color = new qcolor() {<br/>             setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>              setcolor(color)<br/>              setwidth(1)<br/>        }<br/>        new qpainter() {<br/>            begin(p1)<br/>            setpen(pen)<br/>\u00a0<br/>        sizex = 400<br/>        sizey = 200<br/>        depth = 10<br/>\u00a0<br/>        tree(self, sizex, 0, sizey/2, 90, depth)<br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>\u00a0<br/>        func tree myObj, x1, y1, size, angle, depth<br/>             myObj{<br/>             scale = 0.76<br/>             spread = 25<br/>             x2 = x1 + size * cos(angle)<br/>             y2 = y1 + size * sin(angle)<br/>             drawline(x1, y1, x2, y2)<br/>             if depth &gt; 0 <br/>             tree(self, x2, y2, size * scale, angle - spread, depth - 1)<br/>             tree(self, x2, y2, size * scale, angle + spread, depth - 1) ok}<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 19, "block": "<pre class=\"ruby highlighted_source\">Shoes.<span class=\"me1\">app</span><span class=\"br0\">(</span><span class=\"re3\">:title</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Fractal Tree\"</span>, <span class=\"re3\">:width</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">600</span>, <span class=\"re3\">:height</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  background <span class=\"st0\">\"#fff\"</span><br/>  stroke <span class=\"st0\">\"#000\"</span><br/>  <span class=\"re1\">@deg_to_rad</span> = <span class=\"kw4\">Math</span>::PI <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> drawTree<span class=\"br0\">(</span>x1, y1, angle, depth<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> depth\u00a0!= <span class=\"nu0\">0</span><br/>      x2 = x1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> <span class=\"re1\">@deg_to_rad</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><br/>      y2 = y1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> <span class=\"re1\">@deg_to_rad</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><br/>\u00a0<br/>      line x1, y1, x2, y2<br/>\u00a0<br/>      drawTree<span class=\"br0\">(</span>x2, y2, angle <span class=\"sy0\">-</span> <span class=\"nu0\">20</span>, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      drawTree<span class=\"br0\">(</span>x2, y2, angle <span class=\"sy0\">+</span> <span class=\"nu0\">20</span>, depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>      <br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  drawTree<span class=\"br0\">(</span><span class=\"nu0\">300</span>,<span class=\"nu0\">550</span>,<span class=\"sy0\">-</span><span class=\"nu0\">90</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 58, "block": "<pre class=\"text highlighted_source\">//Cargo deps\u00a0:<br/>//  piston = \"0.35.0\"<br/>//  piston2d-graphics = \"0.23.0\"<br/>//  piston2d-opengl_graphics = \"0.49.0\"<br/>//  pistoncore-glutin_window = \"0.42.0\"<br/>\u00a0<br/>extern crate piston;<br/>extern crate graphics;<br/>extern crate opengl_graphics;<br/>extern crate glutin_window;<br/>\u00a0<br/>use piston::window::WindowSettings;<br/>use piston::event_loop::{Events, EventSettings};<br/>use piston::input::RenderEvent;<br/>use glutin_window::GlutinWindow as Window;<br/>use opengl_graphics::{GlGraphics, OpenGL};<br/>use graphics::{clear, line, Context};<br/>\u00a0<br/>const ANG: f64 = 20.0;<br/>const COLOR: [f32; 4] = [1.0, 0.0, 0.5, 1.0];<br/>const LINE_THICKNESS: f64 = 5.0;<br/>const DEPTH: u32 = 11;<br/>\u00a0<br/>fn main() {<br/>    let mut window: Window = WindowSettings::new(\"Fractal Tree\", [1024, 768])<br/>        .opengl(OpenGL::V3_2)<br/>        .exit_on_esc(true)<br/>        .build()<br/>        .unwrap();<br/>    let mut gl = GlGraphics::new(OpenGL::V3_2);<br/>\u00a0<br/>    let mut events = Events::new(EventSettings::new());<br/>    while let Some(e) = events.next(&amp;mut window) {<br/>        if let Some(args) = e.render_args() {<br/>            gl.draw(args.viewport(), |c, g| {<br/>                clear([1.0, 1.0, 1.0, 1.0], g);<br/>                draw_fractal_tree(512.0, 700.0, 0.0, DEPTH, c, g);<br/>            });<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn draw_fractal_tree(x1: f64, y1: f64, angle: f64, depth: u32, c: Context, g: &amp;mut GlGraphics) {<br/>    let x2 = x1 + angle.to_radians().sin() * depth as f64 * 10.0;<br/>    let y2 = y1 - angle.to_radians().cos() * depth as f64 * 10.0;<br/>    line(<br/>        COLOR,<br/>        LINE_THICKNESS * depth as f64 * 0.2,<br/>        [x1, y1, x2, y2],<br/>        c.transform,<br/>        g,<br/>    );<br/>    if depth &gt; 0 {<br/>        draw_fractal_tree(x2, y2, angle - ANG, depth - 1, c, g);<br/>        draw_fractal_tree(x2, y2, angle + ANG, depth - 1, c, g);<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> swing.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"br0\">{</span>RenderingHints, BasicStroke, Color<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> FractalTree <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> SimpleSwingApplication <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> DEPTH <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> top <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MainFrame <span class=\"br0\">{</span><br/>    contents <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Panel <span class=\"br0\">{</span><br/>      preferredSize <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        draw<span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">460</span>, -<span class=\"nu0\">90</span>, DEPTH<span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> draw<span class=\"br0\">(</span>x1<span class=\"sy0\">:</span> Int, y1<span class=\"sy0\">:</span> Int, angle<span class=\"sy0\">:</span> Double, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> x1 + <span class=\"br0\">(</span>math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle.<span class=\"me1\">toRadians</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> y1 + <span class=\"br0\">(</span>math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle.<span class=\"me1\">toRadians</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">getHSBColor</span><span class=\"br0\">(</span>0.25f - depth <span class=\"sy0\">*</span> 0.125f / DEPTH, 0.9f, 0.6f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> BasicStroke<span class=\"br0\">(</span>depth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><br/>\u00a0<br/>            draw<span class=\"br0\">(</span>x2, y2, angle - <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            draw<span class=\"br0\">(</span>x2, y2, angle + <span class=\"nu0\">20</span>, depth - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 53, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme file<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme inexact<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>scale<span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; controls overall size of tree</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>split<span class=\"sy0\">*</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"co1\">; controls angle of split (in degrees)</span><br/>\u00a0<br/><span class=\"co1\">;; construct lines for tree as list of 5-tuples (x1 y1 x2 y2 depth)</span><br/><span class=\"co1\">;; - x1 y1 is start point</span><br/><span class=\"co1\">;; - angle of this line, in radians</span><br/><span class=\"co1\">;; - depth, depth within tree (controls length of line)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>tree x1 y1 <span class=\"kw1\">angle</span> depth<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>degrees<span class=\"sy0\">-&gt;</span>radians <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pi <span class=\"nu0\">3.14159265358979323846264338327950288419716939937510582097</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"kw1\">d</span> pi <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> depth<span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> x1 <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> <span class=\"br0\">(</span>degrees<span class=\"sy0\">-&gt;</span>radians <span class=\"kw1\">angle</span><span class=\"br0\">)</span><span class=\"br0\">)</span> depth <span class=\"sy0\">*</span>scale<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>y2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> y1 <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span>degrees<span class=\"sy0\">-&gt;</span>radians <span class=\"kw1\">angle</span><span class=\"br0\">)</span><span class=\"br0\">)</span> depth <span class=\"sy0\">*</span>scale<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">truncate</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> x1 y1 x2 y2 depth<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>tree x2 y2 <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">angle</span> <span class=\"sy0\">*</span>split<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> depth <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>tree x2 y2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">angle</span> <span class=\"sy0\">*</span>split<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> depth <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; output the tree to an eps file</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>output<span class=\"sy0\">-</span>tree<span class=\"sy0\">-</span>as<span class=\"sy0\">-</span>eps filename tree<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>when <span class=\"br0\">(</span>file<span class=\"sy0\">-</span>exists? filename<span class=\"br0\">)</span> <span class=\"br0\">(</span>delete<span class=\"sy0\">-</span>file filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-output-to-file</span><br/>    filename<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"%!PS-Adobe-3.0 EPSF-3.0<span class=\"es0\">\\n</span>%%BoundingBox: 0 0 800 800<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/>      <span class=\"co1\">;; add each line - sets linewidth based on depth in tree</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">display</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"newpath<span class=\"es0\">\\n</span>\"</span><br/>                                   <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> line <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>                                   <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> line <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>                                   <span class=\"st0\">\"moveto<span class=\"es0\">\\n</span>\"</span><br/>                                   <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> line <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>                                   <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> line <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>                                   <span class=\"st0\">\"lineto<span class=\"es0\">\\n</span>\"</span><br/>                                   <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> line <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                   <span class=\"st0\">\" setlinewidth<span class=\"es0\">\\n</span>\"</span><br/>                                   <span class=\"st0\">\"stroke<span class=\"es0\">\\n</span>\"</span><br/>                                   <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                tree<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>%%EOF\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>output<span class=\"sy0\">-</span>tree<span class=\"sy0\">-</span>as<span class=\"sy0\">-</span>eps <span class=\"st0\">\"fractal.eps\"</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>tree <span class=\"nu0\">400</span> <span class=\"nu0\">200</span> <span class=\"nu0\">90</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scilab", "loc": 80, "block": "<pre class=\"text highlighted_source\">trunk = 1;                  //trunk length<br/>ratio = 0.8;                //size ratio between two consecutive branches<br/>depth = 9;                  //final number of branch levels<br/>orign = 0;                  //origin of the tree (should be complex)<br/>angle = 45*%pi/180;         //angle between two branches [rad]<br/>trunk_angle = 90*%pi/180;   //angle between trunk and X-axis [rad]<br/>\u00a0<br/>right_angle = angle/2;      //angles to the right or to the left<br/>left_angle = 0.8*angle;     //can be set independently or <br/>                            //as function of 'angle'<br/>\u00a0<br/>//L-system definition:<br/>//Alphabet: FBD[]+-<br/>    //F: go forward             B: go backwards<br/>    //[: start new branch       ]: end current branch<br/>    //+: branch to the right    -: branch to the left<br/>    //D: double line (forward then backward)<br/>//Axiom:    D<br/>//Rule:     D -&gt; F[+D-D]B<br/>\u00a0<br/>//L-system sentence generation<br/>sentence = 'D'<br/>rule = 'F[+D-D]B';<br/>for i=1:depth<br/>    sentence = strsubst(sentence,'D',rule);<br/>end<br/>sentence = strsplit(sentence)';<br/>\u00a0<br/>//Empty tree<br/>tree_size = 1.0...<br/>            + length(find(sentence=='F'|sentence=='B'))...<br/>            + 2 * length(find(sentence=='D'));<br/>tree=zeros(tree_size,1);<br/>\u00a0<br/>//Drawing the tree<br/>branch_level = 0;<br/>curr_angle = trunk_angle;<br/>curr_pos = 1;<br/>\u00a0<br/>for ind = 1:size(sentence,'c')<br/>    charac = sentence(ind);<br/>\u00a0<br/>    select charac<br/>        case 'F' then //Draw line forward<br/>            tree(curr_pos+1) = tree(curr_pos)...<br/>                               + trunk * ratio^branch_level * exp(curr_angle*%i);<br/>            curr_pos = curr_pos + 1;<br/>\u00a0<br/>        case 'B' then //Draw line backwards<br/>            tree(curr_pos+1) = tree(curr_pos)...<br/>                               + trunk * ratio^branch_level * exp((%pi+curr_angle)*%i);<br/>            curr_pos = curr_pos + 1;<br/>\u00a0<br/>        case '[' then //New branch<br/>            branch_level = branch_level + 1;<br/>\u00a0<br/>        case '+' then //Turn right<br/>            curr_angle = curr_angle - right_angle;<br/>\u00a0<br/>        case '-' then //Turn left<br/>            curr_angle = curr_angle + right_angle + left_angle;<br/>\u00a0<br/>        case ']' then //End of branch<br/>            branch_level = branch_level - 1;<br/>            curr_angle = curr_angle - left_angle;<br/>\u00a0<br/>        case 'D' then //Double line<br/>            tree(curr_pos+1) = tree(curr_pos)...<br/>                               + trunk * ratio^branch_level * exp(curr_angle*%i);<br/>            tree(curr_pos+2) = tree(curr_pos+1)...<br/>                               + trunk * ratio^branch_level * exp((%pi+curr_angle)*%i);<br/>            curr_pos = curr_pos + 2;<br/>    end<br/>end<br/>\u00a0<br/>scf(); clf();<br/>xname('Fractal tree: '+string(depth)+' levels')<br/>plot2d(real(tree),imag(tree),14);<br/>set(gca(),'isoview','on');<br/>set(gca(),'axes_visible',['off','off','off']);</pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>  include \"draw.s7i\";<br/>  include \"keybd.s7i\";<br/>\u00a0<br/>const float: DEG_TO_RAD is PI / 180.0;<br/>\u00a0<br/>const proc: drawTree (in integer: x1, in integer: y1, in float: angle, in integer: depth) is func<br/>  local<br/>    var integer: x2 is 0;<br/>    var integer: y2 is 0;<br/>  begin<br/>    if depth &lt;&gt; 0 then<br/>      x2\u00a0:= x1 + trunc(cos(angle * DEG_TO_RAD) * flt(depth * 10));<br/>      y2\u00a0:= y1 + trunc(sin(angle * DEG_TO_RAD) * flt(depth * 10));<br/>      lineTo(x1, y1, x2, y2, white);<br/>      drawTree(x2, y2, angle - 20.0, depth - 1);<br/>      drawTree(x2, y2, angle + 20.0, depth - 1);<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    screen(600, 500);<br/>    clear(curr_win, black);<br/>    KEYBOARD\u00a0:= GRAPH_KEYBOARD;<br/>    drawTree(300, 470, -90.0, 9);<br/>    ignore(getc(KEYBOARD));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 23, "block": "<pre class=\"ruby highlighted_source\">func tree<span class=\"br0\">(</span>img, x, y, scale=<span class=\"nu0\">6</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span>, len=<span class=\"nu0\">400</span>, angle=<span class=\"nu0\">270</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    img.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    img.<span class=\"me1\">angle</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><br/>    img.<span class=\"me1\">line</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span><br/>\u00a0<br/>    var <span class=\"br0\">(</span>x1, y1<span class=\"br0\">)</span> = img.<span class=\"me1\">curPos</span><br/>    tree<span class=\"br0\">(</span>img, x1, y1, scale, len<span class=\"sy0\">*</span>scale, angle<span class=\"sy0\">+</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><br/>    tree<span class=\"br0\">(</span>img, x1, y1, scale, len<span class=\"sy0\">*</span>scale, angle<span class=\"sy0\">-</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'GD::Simple'</span><span class=\"br0\">)</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>width=<span class=\"nu0\">1000</span>, height=<span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>var img = <span class=\"sy0\">%</span>s<span class=\"sy0\">|</span><span class=\"re2\">GD::Simple</span><span class=\"sy0\">|</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>img.<span class=\"me1\">fgcolor</span><span class=\"br0\">(</span><span class=\"st0\">'black'</span><span class=\"br0\">)</span><br/>img.<span class=\"me1\">penSize</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>tree<span class=\"br0\">(</span>img, width<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, height<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw4\">File</span><span class=\"br0\">(</span><span class=\"st0\">'tree.png'</span><span class=\"br0\">)</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span>img.<span class=\"me1\">png</span>, <span class=\"re3\">:raw</span><span class=\"br0\">)</span></pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#FractalTree</span><br/>    instanceVariableNames: <span class=\"st0\">''</span><br/>    classVariableNames: <span class=\"st0\">''</span><br/>    poolDictionaries: <span class=\"st0\">''</span><br/>    category: <span class=\"st0\">'RosettaCode'</span><br/>\u00a0</pre>"}, {"lang": "SVG", "loc": 50, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;?xml</span> <span class=\"re0\">version</span>=<span class=\"st0\">\"1.0\"</span> <span class=\"re0\">standalone</span>=<span class=\"st0\">\"yes\"</span><span class=\"re2\">?&gt;</span></span><br/><span class=\"sc0\">&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"</span><br/><span class=\"sc0\"> \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"&gt;</span><br/><span class=\"sc3\"><span class=\"re1\">&lt;svg</span> <span class=\"re0\">xmlns</span>=<span class=\"st0\">\"http://www.w3.org/2000/svg\"</span> </span><br/><span class=\"sc3\">     <span class=\"re0\">xmlns:xlink</span>=<span class=\"st0\">\"http://www.w3.org/1999/xlink\"</span></span><br/><span class=\"sc3\">     <span class=\"re0\">width</span>=<span class=\"st0\">\"400\"</span> <span class=\"re0\">height</span>=<span class=\"st0\">\"320\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;style</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"text/css\"</span><span class=\"re2\">&gt;</span></span><span class=\"sc2\">&lt;![CDATA[</span><br/><span class=\"sc2\">    line { stroke: black; stroke-width: .05; }</span><br/><span class=\"sc2\">    circle { fill: black; }</span><br/><span class=\"sc2\">  ]]&gt;</span><span class=\"sc3\"><span class=\"re1\">&lt;/style<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;defs<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"stem\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;line</span> <span class=\"re0\">x1</span>=<span class=\"st0\">\"0\"</span> <span class=\"re0\">y1</span>=<span class=\"st0\">\"0\"</span> <span class=\"re0\">x2</span>=<span class=\"st0\">\"0\"</span> <span class=\"re0\">y2</span>=<span class=\"st0\">\"-1\"</span><span class=\"re2\">/&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l0\"</span><span class=\"re2\">&gt;</span><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc-1\">&lt;!-- These are identical except for the id and href. --&gt;</span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l1\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l0\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l0\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l2\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l1\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l1\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l3\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l2\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l2\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l4\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l3\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l3\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l5\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l4\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l4\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l6\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l5\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l5\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l7\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l6\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l6\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l8\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l7\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l7\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">id</span>=<span class=\"st0\">\"l9\"</span><span class=\"re2\">&gt;</span></span> <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l8\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(-35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l8\"</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(0, -1) rotate(+35) scale(.7)\"</span><span class=\"re2\">/&gt;</span></span><br/>              <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#stem\"</span><span class=\"re2\">/&gt;</span><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/defs<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;g</span> <span class=\"re0\">transform</span>=<span class=\"st0\">\"translate(200, 320) scale(100)\"</span><span class=\"re2\">&gt;</span></span><br/>  <span class=\"sc3\"><span class=\"re1\">&lt;use</span> <span class=\"re0\">xlink:href</span>=<span class=\"st0\">\"#l9\"</span><span class=\"re2\">/&gt;</span></span><br/><span class=\"sc3\"><span class=\"re1\">&lt;/g<span class=\"re2\">&gt;</span></span></span><br/>\u00a0<br/><span class=\"sc3\"><span class=\"re1\">&lt;/svg<span class=\"re2\">&gt;</span></span></span></pre>"}, {"lang": "Swift", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import UIKit<br/>\u00a0<br/>extension CGFloat {<br/>  func degrees_to_radians() -&gt; CGFloat {<br/>    return CGFloat(M_PI) * self / 180.0<br/>  }<br/>}<br/>\u00a0<br/>extension Double {<br/>  func degrees_to_radians() -&gt; Double {<br/>    return Double(M_PI) * self / 180.0<br/>  }<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0<br/>class Tree: UIView {<br/>\u00a0<br/>\u00a0<br/>  func drawTree(x1: CGFloat, y1: CGFloat, angle: CGFloat, depth:Int){<br/>    if depth == 0 {<br/>      return<br/>    }<br/>    let ang = angle.degrees_to_radians()<br/>    let x2:CGFloat = x1 + ( cos(ang) as CGFloat) * CGFloat(depth) * (self.frame.width / 60)<br/>    let y2:CGFloat = y1 + ( sin(ang) as CGFloat) * CGFloat(depth) * (self.frame.width / 60)<br/>\u00a0<br/>    let line = drawLine(x1, y1: y1, x2: x2, y2: y2)<br/>\u00a0<br/>    line.stroke()<br/>    drawTree(x2, y1: y2, angle: angle - 20, depth: depth - 1)<br/>    drawTree(x2, y1: y2, angle: angle + 20, depth: depth - 1)<br/>  }<br/>\u00a0<br/>  func drawLine(x1:CGFloat, y1:CGFloat, x2:CGFloat, y2:CGFloat) -&gt; UIBezierPath<br/>  {<br/>\u00a0<br/>    let path = UIBezierPath()<br/>    path.moveToPoint(CGPoint(x: x1,y: y1))<br/>    path.addLineToPoint(CGPoint(x: x2,y: y2))<br/>    path.lineWidth = 1<br/>    return path<br/>  }<br/>\u00a0<br/>  override func drawRect(rect: CGRect) {<br/>\u00a0<br/>    let color = UIColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0)<br/>    color.set()<br/>    drawTree(self.frame.width / 2 , y1: self.frame.height * 0.8, angle: -90 , depth: 9 )<br/>  }<br/>\u00a0<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0<br/>let tree = Tree(frame: CGRectMake(0, 0, 300, 300))<br/>tree<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 32, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"kw1\">set</span> SIZE\t<span class=\"nu0\">800</span><br/><span class=\"kw1\">set</span> SCALE\t<span class=\"nu0\">4.0</span><br/><span class=\"kw1\">set</span> BRANCHES\t<span class=\"nu0\">14</span><br/><span class=\"kw1\">set</span> ROTATION_SCALE <span class=\"nu0\">0.85</span><br/><span class=\"kw1\">set</span> INITIAL_LENGTH <span class=\"nu0\">50.0</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> draw_tree <span class=\"br0\">{</span>w x y dx dy size theta depth<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> SCALE ROTATION_SCALE<br/>    <span class=\"re0\">$w</span> create line <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"sy0\">*</span><span class=\"re0\">$size</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> + <span class=\"re0\">$dy</span><span class=\"sy0\">*</span><span class=\"re0\">$size</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> depth -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"sy0\">*</span><span class=\"re0\">$size</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> + <span class=\"re0\">$dy</span><span class=\"sy0\">*</span><span class=\"re0\">$size</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> ntheta <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$theta</span> <span class=\"sy0\">*</span> <span class=\"re0\">$ROTATION_SCALE</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"co1\"># Draw left branch</span><br/>\tdraw_tree <span class=\"re0\">$w</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dx</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> + <span class=\"re0\">$dy</span><span class=\"sy0\">*</span>sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dy</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> - <span class=\"re0\">$dx</span><span class=\"sy0\">*</span>sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$size</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"re0\">$SCALE</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"re0\">$SCALE</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$ntheta</span> <span class=\"re0\">$depth</span><br/>\t<span class=\"co1\"># Draw right branch</span><br/>\tdraw_tree <span class=\"re0\">$w</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dx</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span>-<span class=\"re0\">$theta</span><span class=\"br0\">)</span> + <span class=\"re0\">$dy</span><span class=\"sy0\">*</span>sin<span class=\"br0\">(</span>-<span class=\"re0\">$theta</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$dy</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span>-<span class=\"re0\">$theta</span><span class=\"br0\">)</span> - <span class=\"re0\">$dx</span><span class=\"sy0\">*</span>sin<span class=\"br0\">(</span>-<span class=\"re0\">$theta</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$size</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"re0\">$SCALE</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"re0\">$SCALE</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$ntheta</span> <span class=\"re0\">$depth</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>pack <span class=\"br0\">[</span>canvas .c -width <span class=\"re0\">$SIZE</span> -height <span class=\"re0\">$SIZE</span><span class=\"br0\">]</span><br/>draw_tree .c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$SIZE</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$SIZE</span>-<span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0.0</span> -<span class=\"nu0\">1.0</span> <span class=\"re0\">$INITIAL_LENGTH</span> \\<br/>    <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">3.1415927</span> / <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$BRANCHES</span></pre>"}, {"lang": "TUSCRIPT", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>dest=\"fracaltree.svg\"<br/>ERROR/STOP CREATE (dest,fdf-o,-std-)<br/>ACCESS d: WRITE/ERASE/RECORDS/UTF8 $dest s,text<br/>MODE DATA<br/>$$ header=*<br/>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;<br/>&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"<br/> \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"&gt;<br/>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" <br/> xmlns:xlink=\"http://www.w3.org/1999/xlink\"<br/> width=\"400\" height=\"320\"&gt;<br/>  &lt;style type=\"text/css\"&gt;&lt;![CDATA[<br/>  line { stroke: brown; stroke-width: .05; }<br/>  ]]&gt;&lt;/style&gt;<br/>$$ WRITE/NEXT d header<br/>$$ defsbeg=* <br/>&lt;defs&gt;<br/>  &lt;g id=\"stem\"&gt; &lt;line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"-1\"/&gt; &lt;/g&gt;<br/>  &lt;g id=\"l\"&gt;&lt;use xlink:href=\"#stem\"/&gt;&lt;/g&gt;<br/>$$ WRITE/NEXT d defsbeg<br/>$$ LOOP n=10,21<br/>$$ id=n+1,lastnr=VALUE(n)<br/>$$ g=*<br/>  &lt;g id=\"{id}\"&gt; &lt;use xlink:href=\"#{n}\" transform=\"translate(0, -1) rotate(-35) scale(.7)\"/&gt;<br/>  &lt;use xlink:href=\"#{n}\" transform=\"translate(0, -1) rotate(+35) scale(.7)\"/&gt; &lt;use xlink:href=\"#stem\"/&gt;&lt;/g&gt;<br/>$$ WRITE/NEXT d g<br/>$$ ENDLOOP<br/>$$ defsend = *<br/>&lt;/defs&gt;<br/>&lt;g transform=\"translate(200, 320) scale(100)\"&gt;<br/>  &lt;use xlink:href=\"#{lastnr}\"/&gt;<br/>&lt;/g&gt;<br/>$$ MODE TUSCRIPT<br/>WRITE/NEXT d defsend<br/>WRITE/NEXT d \"&lt;/svg&gt;\"<br/>ENDACCESS d<br/>\u00a0</pre>"}, {"lang": "TypeScript", "loc": 37, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// Set up canvas for drawing</span><br/><span class=\"kw1\">var</span> canvas<span class=\"sy0\">:</span> HTMLCanvasElement <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><br/>canvas.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">600</span><br/>canvas.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><br/>document.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>canvas<span class=\"br0\">)</span><br/><span class=\"kw1\">var</span> ctx<span class=\"sy0\">:</span> CanvasRenderingContext2D <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><br/>ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'#000'</span><br/>ctx.<span class=\"me1\">lineWidth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">// constants</span><br/><span class=\"kw1\">const</span> degToRad<span class=\"sy0\">:</span> number <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><br/><span class=\"kw1\">const</span> totalDepth<span class=\"sy0\">:</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Helper function that draws a line on the canvas */</span><br/><span class=\"kw1\">function</span> drawLine<span class=\"br0\">(</span>x1<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> y1<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> x2<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> y2<span class=\"sy0\">:</span> number<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>    ctx.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"br0\">)</span><br/>    ctx.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Draws a branch at the given point and angle and then calls itself twice */</span><br/><span class=\"kw1\">function</span> drawTree<span class=\"br0\">(</span>x1<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> y1<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> angle<span class=\"sy0\">:</span> number<span class=\"sy0\">,</span> depth<span class=\"sy0\">:</span> number<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>depth <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        let x2<span class=\"sy0\">:</span> number <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> degToRad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>        let y2<span class=\"sy0\">:</span> number <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle <span class=\"sy0\">*</span> degToRad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> depth <span class=\"sy0\">*</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>        drawLine<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle <span class=\"sy0\">-</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        drawTree<span class=\"br0\">(</span>x2<span class=\"sy0\">,</span> y2<span class=\"sy0\">,</span> angle <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> depth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// actual drawing of tree</span><br/>ctx.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>drawTree<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> totalDepth<span class=\"br0\">)</span><br/>ctx.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ctx.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc DrawBranch(Lev, Dir, Len, X, Y);<br/>int  Lev; real Dir, Len; int X, Y;<br/>int  Red, Grn;<br/>[Move(X, Y);<br/>X:= X + fix(Len*Cos(Dir));<br/>Y:= Y + fix(Len*Sin(Dir));<br/>Red:= 255-Lev*8;  Grn:= Lev*12+100;<br/>Line(X, Y, Red&lt;&lt;16+Grn&lt;&lt;8);<br/>if Lev &lt; 12 then                \\limit level of recursion<br/>        [DrawBranch(Lev+1, Dir-0.4, Len*0.8, X, Y);     \\left<br/>         DrawBranch(Lev+1, Dir+0.1, Len*0.8, X, Y);     \\right<br/>        ];<br/>];<br/>\u00a0<br/>[SetVid($112);                  \\set 640x480x24 video graphics mode<br/>DrawBranch(0, -3.14159/2.0, 80.0, 360, 460);<br/>if ChIn(1) then [];             \\wait for keystroke<br/>SetVid(3);                      \\restore normal text mode<br/>]</pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">fcn fractalTree(){<br/>   scale:=0.76;<br/>   sizeX:=400; sizeY:=300;<br/>   bitmap:=PPM(sizeX*2,sizeY*2,0xFF|FF|FF);<br/>   branch:='wrap(x1,y1,size,angle,depth){<br/>      ar:=angle.toRad();<br/>      x2:=x1 - size*ar.cos();<br/>      y2:=y1 + size*ar.sin();<br/>      color:=(0xff-depth*8).shiftLeft(16) + (depth*12+100).shiftLeft(8);<br/>      bitmap.line(x1,y1, x2,y2, color);<br/>      if(depth){<br/>         self.fcn(x2,y2,scale*size,angle - 30,depth - 1,vm.pasteArgs(5));<br/>\t self.fcn(x2,y2,scale*size,angle + 8, depth - 1,vm.pasteArgs(5));<br/>      }<br/>   };<br/>   branch(sizeX,0,sizeY/2,90.0,10);<br/>   bitmap.write(File(\"foo.ppm\",\"wb\"));<br/>}();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 31, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> level=<span class=\"nu0\">12</span>: <span class=\"kw1\">LET</span> <span class=\"kw2\">LONG</span>=<span class=\"nu0\">45</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> x=<span class=\"nu0\">127</span>: <span class=\"kw1\">LET</span> y=<span class=\"nu0\">0</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> rotation=<span class=\"kw1\">PI</span>/<span class=\"nu0\">2</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> a1=<span class=\"kw1\">PI</span>/<span class=\"nu0\">9</span>: <span class=\"kw1\">LET</span> a2=<span class=\"kw1\">PI</span>/<span class=\"nu0\">9</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> c1=<span class=\"nu0\">0.75</span>: <span class=\"kw1\">LET</span> c2=<span class=\"nu0\">0.75</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">DIM</span> x<span class=\"br0\">(</span>level<span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> y<span class=\"br0\">(</span>level<span class=\"br0\">)</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">BORDER</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">PAPER</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">INK</span> <span class=\"nu0\">4</span>: <span class=\"kw1\">CLS</span> <br/><span class=\"nu0\">80</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">90</span> STOP <br/><span class=\"nu0\">100</span> <span class=\"co3\">REM Tree</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">LET</span> x<span class=\"br0\">(</span>level<span class=\"br0\">)</span>=x: <span class=\"kw1\">LET</span> y<span class=\"br0\">(</span>level<span class=\"br0\">)</span>=y<br/><span class=\"nu0\">120</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">IF</span> level=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">240</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">LET</span> level=level-<span class=\"nu0\">1</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">LET</span> <span class=\"kw2\">LONG</span>=<span class=\"kw2\">LONG</span>*c1<br/><span class=\"nu0\">160</span> <span class=\"kw1\">LET</span> rotation=rotation-a1<br/><span class=\"nu0\">170</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">180</span> <span class=\"kw1\">LET</span> <span class=\"kw2\">LONG</span>=<span class=\"kw2\">LONG</span>/c1*c2<br/><span class=\"nu0\">190</span> <span class=\"kw1\">LET</span> rotation=rotation+a1+a2<br/><span class=\"nu0\">200</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">210</span> <span class=\"kw1\">LET</span> rotation=rotation-a2<br/><span class=\"nu0\">220</span> <span class=\"kw1\">LET</span> <span class=\"kw2\">LONG</span>=<span class=\"kw2\">LONG</span>/c2<br/><span class=\"nu0\">230</span> <span class=\"kw1\">LET</span> level=level+<span class=\"nu0\">1</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">LET</span> x=x<span class=\"br0\">(</span>level<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> y=y<span class=\"br0\">(</span>level<span class=\"br0\">)</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Draw</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> yn=-<span class=\"kw3\">SIN</span> rotation*<span class=\"kw2\">LONG</span>+y<br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> xn=<span class=\"kw3\">COS</span> rotation*<span class=\"kw2\">LONG</span>+x<br/><span class=\"nu0\">1030</span> <span class=\"kw1\">PLOT</span> x,y: <span class=\"kw1\">DRAW</span> xn-x,y-yn<br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> x=xn: <span class=\"kw1\">LET</span> y=yn<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">RETURN</span> </pre>"}]}