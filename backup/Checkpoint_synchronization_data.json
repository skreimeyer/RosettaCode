{"task": "Checkpoint_synchronization", "blocks": [{"lang": "Ada", "loc": 103, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Calendar</span>;               <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Calendar</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Checkpoint <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> FR <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>   No_Of_Cubicles: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">3</span>;<br/>     <span class=\"co1\">-- That many workers can work in parallel</span><br/>   No_Of_Workers: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">6</span>;<br/>     <span class=\"co1\">-- That many workers are potentially available</span><br/>     <span class=\"co1\">-- some will join the team when others quit the job</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Activity_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>     <span class=\"co1\">-- we want to know who is currently working</span><br/>\u00a0<br/>   <span class=\"kw3\">protected</span> Checkpoint <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">entry</span> Deliver;<br/>      <span class=\"kw3\">entry</span> Join <span class=\"br0\">(</span>Label\u00a0: <span class=\"kw3\">out</span> Character; Tolerance: <span class=\"kw3\">out</span> Float<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Leave<span class=\"br0\">(</span>Label\u00a0: <span class=\"kw3\">in</span> Character<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">private</span><br/>      Signaling    \u00a0: Boolean  \u00a0:= False;<br/>      Ready_Count  \u00a0: Natural  \u00a0:= <span class=\"nu0\">0</span>;<br/>      Worker_Count \u00a0: Natural  \u00a0:= <span class=\"nu0\">0</span>;<br/>      Unused_Label \u00a0: Character\u00a0:= 'A';<br/>      Likelyhood_To_Quit: Float\u00a0:= <span class=\"nu0\">1.0</span>;<br/>      Active       \u00a0: Activity_Array\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; false<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Lodge;<br/>   <span class=\"kw1\">end</span> Checkpoint;<br/>\u00a0<br/>   <span class=\"kw3\">protected</span> <span class=\"kw3\">body</span> Checkpoint <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">entry</span> Join <span class=\"br0\">(</span>Label\u00a0: <span class=\"kw3\">out</span> Character; Tolerance: <span class=\"kw3\">out</span> Float<span class=\"br0\">)</span><br/>      <span class=\"kw3\">when</span> <span class=\"kw2\">not</span> Signaling <span class=\"kw2\">and</span> Worker_Count &lt; No_Of_Cubicles <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         Label       \u00a0:= Unused_Label;<br/>         Active<span class=\"br0\">(</span>Label<span class=\"br0\">)</span>:= True;<br/>         Unused_Label\u00a0:= Character'Succ <span class=\"br0\">(</span>Unused_Label<span class=\"br0\">)</span>;<br/>         Worker_Count\u00a0:= Worker_Count + <span class=\"nu0\">1</span>;<br/>         Likelyhood_To_Quit\u00a0:= Likelyhood_To_Quit / <span class=\"nu0\">2.0</span>;<br/>         Tolerance   \u00a0:= Likelyhood_To_Quit;<br/>      <span class=\"kw1\">end</span> Join;<br/>\u00a0<br/>      <span class=\"kw3\">entry</span> Leave<span class=\"br0\">(</span>Label: <span class=\"kw3\">in</span> Character<span class=\"br0\">)</span> <span class=\"kw3\">when</span> <span class=\"kw2\">not</span> Signaling <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         Worker_Count \u00a0:= Worker_Count - <span class=\"nu0\">1</span>;<br/>         Active<span class=\"br0\">(</span>Label<span class=\"br0\">)</span>\u00a0:= False;<br/>      <span class=\"kw1\">end</span> Leave;<br/>\u00a0<br/>      <span class=\"kw3\">entry</span> Deliver <span class=\"kw3\">when</span> <span class=\"kw2\">not</span> Signaling <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         Ready_Count\u00a0:= Ready_Count + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw3\">requeue</span> Lodge;<br/>      <span class=\"kw1\">end</span> Deliver;<br/>\u00a0<br/>      <span class=\"kw3\">entry</span> Lodge <span class=\"kw3\">when</span> Ready_Count = Worker_Count <span class=\"kw2\">or</span> Signaling <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> Ready_Count = Worker_Count <span class=\"kw1\">then</span><br/>            Put<span class=\"br0\">(</span><span class=\"st0\">\"---Sync Point [\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">for</span> C <span class=\"kw3\">in</span> Character <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> Active<span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Put<span class=\"br0\">(</span>C<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"]---\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Ready_Count\u00a0:= Ready_Count - <span class=\"nu0\">1</span>;<br/>         Signaling  \u00a0:= Ready_Count /= <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">end</span> Lodge;<br/>   <span class=\"kw1\">end</span> Checkpoint;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">type</span> Worker;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">body</span> Worker <span class=\"kw1\">is</span><br/>      Dice     \u00a0: FR.<span class=\"me1\">Generator</span>;<br/>      Label    \u00a0: Character;<br/>      Tolerance\u00a0: Float;<br/>      Shift_End\u00a0: Time\u00a0:= Clock + <span class=\"nu0\">2.0</span>;<br/>        <span class=\"co1\">-- Trade unions are hard!</span><br/>   <span class=\"kw1\">begin</span><br/>      FR.<span class=\"me1\">Reset</span> <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span>;<br/>      Checkpoint.<span class=\"me1\">Join</span> <span class=\"br0\">(</span>Label, Tolerance<span class=\"br0\">)</span>;<br/>      Put_Line<span class=\"br0\">(</span>Label &amp; <span class=\"st0\">\" joins the team\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">loop</span><br/>         Put_Line <span class=\"br0\">(</span>Label &amp; <span class=\"st0\">\" is working\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">delay</span> Duration <span class=\"br0\">(</span>FR.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> * <span class=\"nu0\">0.500</span><span class=\"br0\">)</span>;<br/>         Put_Line <span class=\"br0\">(</span>Label &amp; <span class=\"st0\">\" is ready\"</span><span class=\"br0\">)</span>;<br/>         Checkpoint.<span class=\"me1\">Deliver</span>;<br/>         <span class=\"kw1\">if</span> FR.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> &lt; Tolerance <span class=\"kw1\">then</span><br/>            Put_Line<span class=\"br0\">(</span>Label &amp; <span class=\"st0\">\" leaves the team\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">exit</span>;<br/>         <span class=\"kw1\">elsif</span> Clock &gt;= Shift_End <span class=\"kw1\">then</span><br/>            Put_Line<span class=\"br0\">(</span>Label &amp; <span class=\"st0\">\" ends shift\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">exit</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Checkpoint.<span class=\"me1\">Leave</span><span class=\"br0\">(</span>Label<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Worker;<br/>   Set\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">No_Of_Workers</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Worker;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw3\">null</span>; <span class=\"co1\">-- Nothing to do here</span><br/><span class=\"kw1\">end</span> Test_Checkpoint;<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 59, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"TIMERLIB\"<br/>      nWorkers% = 3<br/>      DIM tID%(nWorkers%)<br/>\u00a0<br/>      tID%(1) = FN_ontimer(10, PROCworker1, 1)<br/>      tID%(2) = FN_ontimer(11, PROCworker2, 1)<br/>      tID%(3) = FN_ontimer(12, PROCworker3, 1)<br/>\u00a0<br/>      DEF PROCworker1\u00a0: PROCtask(1)\u00a0: ENDPROC<br/>      DEF PROCworker2\u00a0: PROCtask(2)\u00a0: ENDPROC<br/>      DEF PROCworker3\u00a0: PROCtask(3)\u00a0: ENDPROC<br/>\u00a0<br/>      ON ERROR PROCcleanup\u00a0: REPORT\u00a0: PRINT\u00a0: END<br/>      ON CLOSE PROCcleanup\u00a0: QUIT<br/>\u00a0<br/>      REPEAT<br/>        WAIT 0<br/>      UNTIL FALSE<br/>      END<br/>\u00a0<br/>      DEF PROCtask(worker%)<br/>      PRIVATE cnt%()<br/>      DIM cnt%(nWorkers%)<br/>      CASE cnt%(worker%) OF<br/>        WHEN 0:<br/>          cnt%(worker%) = RND(30)<br/>          PRINT \"Worker \"; worker% \" starting (\"\u00a0;cnt%(worker%) \" ticks)\"<br/>        WHEN -1:<br/>        OTHERWISE:<br/>          cnt%(worker%) -= 1<br/>          IF cnt%(worker%) = 0 THEN<br/>            PRINT \"Worker \"; worker% \" ready and waiting\"<br/>            cnt%(worker%) = -1<br/>            PROCcheckpoint<br/>            cnt%(worker%) = 0<br/>          ENDIF<br/>      ENDCASE<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcheckpoint<br/>      PRIVATE checked%, sync%<br/>      IF checked% = 0 sync% = FALSE<br/>      checked% += 1<br/>      WHILE NOT sync%<br/>        WAIT 0<br/>        IF checked% = nWorkers% THEN<br/>          sync% = TRUE<br/>          PRINT \"--Sync Point--\"<br/>        ENDIF<br/>      ENDWHILE<br/>      checked% -= 1<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcleanup<br/>      LOCAL I%<br/>      FOR I% = 1 TO nWorkers%<br/>        PROC_killtimer(tID%(I%))<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;omp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> jobs <span class=\"sy0\">=</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> tid<span class=\"sy0\">;</span><br/>        omp_set_num_threads<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co2\">#pragma omp parallel shared(jobs) private(tid)</span><br/>        <span class=\"br0\">{</span><br/>                tid <span class=\"sy0\">=</span> omp_get_thread_num<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>jobs <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"coMULTI\">/* this is the checkpoint */</span><br/>                        <span class=\"co2\">#pragma omp barrier</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>jobs<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d: taking job\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tid<span class=\"sy0\">,</span> jobs<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        usleep<span class=\"br0\">(</span><span class=\"nu0\">100000</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> RAND_MAX <span class=\"sy0\">*</span> <span class=\"nu0\">3000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d: done job<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[%d] leaving<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"coMULTI\">/* this stops jobless thread from exiting early and killing workers */</span><br/>                <span class=\"co2\">#pragma omp barrier</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 51, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;chrono&gt;</span><br/><span class=\"co2\">#include &lt;atomic&gt;</span><br/><span class=\"co2\">#include &lt;mutex&gt;</span><br/><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;thread&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span> cout_lock<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Latch<br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">atomic</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> semafor<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Latch<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span> <span class=\"sy4\">:</span> semafor<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> wait<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        semafor.<span class=\"me1\">fetch_sub</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>semafor.<span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">this_thread</span><span class=\"sy4\">::</span><span class=\"me2\">yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Worker<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> do_work<span class=\"br0\">(</span><span class=\"kw4\">int</span> how_long, Latch<span class=\"sy3\">&amp;</span> barrier, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> name<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">this_thread</span><span class=\"sy4\">::</span><span class=\"me2\">sleep_for</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">chrono</span><span class=\"sy4\">::</span><span class=\"me2\">milliseconds</span><span class=\"br0\">(</span>how_long<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">{</span>   std<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy1\">&gt;</span> lock<span class=\"br0\">(</span>cout_lock<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Worker \"</span> <span class=\"sy1\">&lt;&lt;</span> name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" finished work<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>   <span class=\"br0\">}</span><br/>        barrier.<span class=\"me1\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">{</span>   std<span class=\"sy4\">::</span><span class=\"me2\">lock_guard</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">mutex</span><span class=\"sy1\">&gt;</span> lock<span class=\"br0\">(</span>cout_lock<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Worker \"</span> <span class=\"sy1\">&lt;&lt;</span> name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" finished assembly<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span>   <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Latch latch<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">mt19937</span> rng<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">random_device</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">uniform_int_distribution</span><span class=\"sy1\">&lt;&gt;</span> dist<span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">3000</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">thread</span> threads<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>Worker<span class=\"sy4\">::</span><span class=\"me2\">do_work</span>, dist<span class=\"br0\">(</span>rng<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>latch<span class=\"br0\">)</span>, <span class=\"st0\">\"John\"</span><span class=\"br0\">)</span>,<br/>        std<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>Worker<span class=\"sy4\">::</span><span class=\"me2\">do_work</span>, dist<span class=\"br0\">(</span>rng<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>latch<span class=\"br0\">)</span>, <span class=\"st0\">\"Henry\"</span><span class=\"br0\">}</span>,<br/>        std<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>Worker<span class=\"sy4\">::</span><span class=\"me2\">do_work</span>, dist<span class=\"br0\">(</span>rng<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>latch<span class=\"br0\">)</span>, <span class=\"st0\">\"Smith\"</span><span class=\"br0\">}</span>,<br/>        std<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>Worker<span class=\"sy4\">::</span><span class=\"me2\">do_work</span>, dist<span class=\"br0\">(</span>rng<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>latch<span class=\"br0\">)</span>, <span class=\"st0\">\"Jane\"</span><span class=\"br0\">}</span>,<br/>        std<span class=\"sy4\">::</span><span class=\"me2\">thread</span><span class=\"br0\">{</span><span class=\"sy3\">&amp;</span>Worker<span class=\"sy4\">::</span><span class=\"me2\">do_work</span>, dist<span class=\"br0\">(</span>rng<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ref</span><span class=\"br0\">(</span>latch<span class=\"br0\">)</span>, <span class=\"st0\">\"Mary\"</span><span class=\"br0\">}</span>,<br/>    <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> t<span class=\"sy4\">:</span> threads<span class=\"br0\">)</span> t.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Assembly is finished\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 72, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> checkpoint<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>core<span class=\"sy0\">.</span>async\u00a0:<span class=\"me1\">as</span> async\u00a0:<span class=\"kw1\">refer</span> <span class=\"br0\">[</span>go <span class=\"sy0\">&lt;!</span> <span class=\"sy0\">&gt;!</span> <span class=\"sy0\">&lt;!!</span> <span class=\"sy0\">&gt;!!</span> alts<span class=\"sy0\">!</span> close<span class=\"sy0\">!</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> string<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> coordinate <span class=\"br0\">[</span>ctl<span class=\"sy0\">-</span>ch resp<span class=\"sy0\">-</span>ch combine<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>go<br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>timeout <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;delay a bit to allow worker setup</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>members <span class=\"br0\">{</span><span class=\"br0\">}</span>, received <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"co1\">;maps by in-channel of out-channels &amp; received data resp.</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rcvd<span class=\"sy0\">-</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> received<span class=\"br0\">)</span><br/>            release   #<span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>outch <span class=\"br0\">(</span><span class=\"kw1\">vals</span> members<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>go <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> outch <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            received  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">pos?</span> rcvd<span class=\"sy0\">-</span><span class=\"kw1\">count</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> rcvd<span class=\"sy0\">-</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> members<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> received <span class=\"kw1\">vals</span> combine release<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                        received<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>v ch<span class=\"br0\">]</span> <span class=\"br0\">(</span>alts<span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> ctl<span class=\"sy0\">-</span>ch <span class=\"br0\">(</span><span class=\"kw1\">keys</span> members<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>              <span class=\"co1\">;receive a message on ctrl-ch or any member input channel</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> ch ctl<span class=\"sy0\">-</span>ch<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>op inch outch<span class=\"br0\">]</span> v<span class=\"br0\">]</span> <span class=\"co1\">;only a Checkpoint (see below) sends on ctl-ch</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">condp</span> <span class=\"sy0\">=</span> op<br/>             \u00a0:<span class=\"me1\">join</span> <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> resp<span class=\"sy0\">-</span>ch\u00a0:<span class=\"me1\">ok</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> members inch outch<span class=\"br0\">)</span> received<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             \u00a0:<span class=\"me1\">part</span> <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> resp<span class=\"sy0\">-</span>ch\u00a0:<span class=\"me1\">ok</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>close<span class=\"sy0\">!</span> inch<span class=\"br0\">)</span> <span class=\"br0\">(</span>close<span class=\"sy0\">!</span> outch<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>dissoc members inch<span class=\"br0\">)</span> <span class=\"br0\">(</span>dissoc received inch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             \u00a0:<span class=\"me1\">exit</span>\u00a0:<span class=\"me1\">exit</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> v<span class=\"br0\">)</span> <span class=\"co1\">;is the channel closed?</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span>close<span class=\"sy0\">!</span> <span class=\"br0\">(</span>get members ch<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>dissoc members ch<span class=\"br0\">)</span> <span class=\"br0\">(</span>dissoc received ch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> members <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> received ch v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defprotocol ICheckpoint<br/>  <span class=\"br0\">(</span>join <span class=\"br0\">[</span>this<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>part <span class=\"br0\">[</span>this inch outch<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftype Checkpoint <span class=\"br0\">[</span>ctl<span class=\"sy0\">-</span>ch resp<span class=\"sy0\">-</span>ch <span class=\"kw1\">sync</span><span class=\"br0\">]</span><br/>  ICheckpoint<br/>  <span class=\"br0\">(</span>join <span class=\"br0\">[</span>this<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>inch <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>chan<span class=\"br0\">)</span>, outch <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>chan <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>go<br/>        <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> ctl<span class=\"sy0\">-</span>ch <span class=\"br0\">[</span>:<span class=\"me1\">join</span> inch outch<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> resp<span class=\"sy0\">-</span>ch<span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span>inch outch<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>part <span class=\"br0\">[</span>this inch outch<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>go<br/>      <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> ctl<span class=\"sy0\">-</span>ch <span class=\"br0\">[</span>:<span class=\"me1\">part</span> inch outch<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> checkpoint <span class=\"br0\">[</span>combine<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ctl<span class=\"sy0\">-</span>ch <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>chan<span class=\"br0\">)</span>, resp<span class=\"sy0\">-</span>ch <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>chan <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span>Checkpoint ctl<span class=\"sy0\">-</span>ch resp<span class=\"sy0\">-</span>ch <span class=\"br0\">(</span>coordinate ctl<span class=\"sy0\">-</span>ch resp<span class=\"sy0\">-</span>ch combine<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> worker<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>ckpt repeats<span class=\"br0\">]</span> <span class=\"br0\">(</span>worker ckpt repeats <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span> nil<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>ckpt repeats mon<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>go<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw1\">send</span> recv<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> <span class=\"br0\">(</span>join ckpt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> repeats<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> <span class=\"br0\">(</span>async<span class=\"sy0\">/</span>timeout <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">5000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">&gt;!</span> <span class=\"kw1\">send</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>mon <span class=\"st0\">\"sent\"</span> n<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">&lt;!</span> recv<span class=\"br0\">)</span>  <span class=\"br0\">(</span>mon <span class=\"st0\">\"recvd\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>part ckpt <span class=\"kw1\">send</span> recv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">-</span>main<br/>  <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ckpt <span class=\"br0\">(</span>checkpoint identity<span class=\"br0\">)</span><br/>        monitor <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>id<span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"st0\">\"worker\"</span> id <span class=\"st0\">\":\"</span> <span class=\"br0\">(</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\" \"</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>worker ckpt <span class=\"nu0\">10</span> <span class=\"br0\">(</span>monitor <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>worker ckpt <span class=\"nu0\">10</span> <span class=\"br0\">(</span>monitor <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">parallelism</span><span class=\"sy0\">:</span> taskPool<span class=\"sy0\">,</span> defaultPoolThreads<span class=\"sy0\">,</span> totalCPUs<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> buildMechanism<span class=\"br0\">(</span><span class=\"kw4\">uint</span> nparts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> details <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span>nparts<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> detail<span class=\"sy0\">;</span> taskPool.<span class=\"me1\">parallel</span><span class=\"br0\">(</span>details<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Build detail \"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        detail <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// This could be written more concisely via std.parallelism.reduce,</span><br/>    <span class=\"co1\">// but we want to see the checkpoint explicitly.</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Checkpoint reached. Assemble details ...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> detail<span class=\"sy0\">;</span> details<span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">+=</span> detail<span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Mechanism with \"</span><span class=\"sy0\">,</span> nparts<span class=\"sy0\">,</span> <span class=\"st0\">\" parts finished: \"</span><span class=\"sy0\">,</span> sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    defaultPoolThreads <span class=\"sy0\">=</span> totalCPUs <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// totalCPUs - 1 on default.</span><br/>    buildMechanism<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    buildMechanism<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 114, "block": "<pre class=\"e highlighted_source\"><span class=\"coMULTI\">/** A flagSet solves this problem: There are N things, each in a true or false<br/>  * state, and we want to know whether they are all true (or all false), and be<br/>  * able to bulk-change all of them, and all this without allowing double-<br/>  * counting -- setting a flag twice is idempotent.<br/>  */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeFlagSet<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\"># Each flag object is either in the true set or the false set.</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> trues <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> falses <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flagSet <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/** Add a flag to the set. */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> join<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flag <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/** Get the value of this flag. */</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>        <span class=\"coMULTI\">/** Set the value of this flag. */</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> put<span class=\"br0\">(</span>v <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>del<span class=\"sy0\">,</span>add<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span>falses<span class=\"sy0\">,</span>trues<span class=\"br0\">]</span> <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span>trues<span class=\"sy0\">,</span>falses<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>          <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>del.<span class=\"me1\">contains</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            del.<span class=\"me1\">remove</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>            add.<span class=\"me1\">addElement</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"coMULTI\">/** Remove this flag from the set. */</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> leave<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/void\"><span class=\"kw6\">void</span></a> <span class=\"br0\">{</span><br/>          trues.<span class=\"me1\">remove</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>          falses.<span class=\"me1\">remove</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      falses.<span class=\"me1\">addElement</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>      return flag<br/>    <span class=\"br0\">}</span><br/>    <span class=\"coMULTI\">/** Are all the flags true (none false)? */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> allTrue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return falses.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"coMULTI\">/** Are all the flags false (none true)? */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> allFalse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return trues.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"coMULTI\">/** Set all the flags to the same value. */</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> setAll<span class=\"br0\">(</span>v <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>del<span class=\"sy0\">,</span>add<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span>falses<span class=\"sy0\">,</span>trues<span class=\"br0\">]</span> <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span>trues<span class=\"sy0\">,</span>falses<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>      add.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>del<span class=\"br0\">)</span><br/>      del.<span class=\"me1\">removeAll</span><span class=\"br0\">(</span>del<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeCheckpoint<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> continueSignal<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> continueRes<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/Ref\"><span class=\"kw6\">Ref</span></a>.<span class=\"me1\">promise</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> readies <span class=\"sy0\">:=</span> makeFlagSet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Check whether all tasks have reached the checkpoint, and if so send the<br/>    * signal and go to the next round. */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> check<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>readies.<span class=\"me1\">allTrue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      readies.<span class=\"me1\">setAll</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>      continueRes.<span class=\"me1\">resolve</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span>    <span class=\"co1\"># send the continue signal</span><br/>\u00a0<br/>      <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>p<span class=\"sy0\">,</span> r<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/Ref\"><span class=\"kw6\">Ref</span></a>.<span class=\"me1\">promise</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># prepare a new continue signal</span><br/>      continueSignal <span class=\"sy0\">:=</span> p<br/>      continueRes <span class=\"sy0\">:=</span> r<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> checkpoint <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> join<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"sy0\">&amp;</span>flag <span class=\"sy0\">:=</span> readies.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> membership <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> leave<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>flag<span class=\"br0\">)</span>.<span class=\"me1\">leave</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          check <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> deliver<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          flag <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>          check <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          return continueSignal<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeWorker<span class=\"br0\">(</span>piece<span class=\"sy0\">,</span> checkpoint<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> stops <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3000</span> <span class=\"sy0\">+</span> <a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> checkpointMember <span class=\"sy0\">:=</span> checkpoint <span class=\"sy0\">&lt;-</span> join<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> stopped<br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Pretend to do something lengthy; up to 1000 ms.</span><br/>    <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">whenPast</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> stops<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        checkpointMember <span class=\"sy0\">&lt;-</span> leave<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/bind\"><span class=\"kw4\">bind</span></a> stopped <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>      <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`Delivering $piece#$count`</span><span class=\"br0\">)</span><br/>        when <span class=\"br0\">(</span>checkpointMember <span class=\"sy0\">&lt;-</span> deliver<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>          <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`Delivered $piece#$count`</span><span class=\"br0\">)</span><br/>          run<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  run<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  return stopped<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> checkpoint <span class=\"sy0\">:=</span> makeCheckpoint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> waits <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> piece <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>  waits with<span class=\"sy0\">=</span> makeWorker<span class=\"br0\">(</span>piece<span class=\"sy0\">,</span> checkpoint<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/interp\"><span class=\"kw7\">interp</span></a>.<span class=\"me1\">waitAtTop</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/promiseAllFulfilled\"><span class=\"kw6\">promiseAllFulfilled</span></a><span class=\"br0\">(</span>waits<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 37, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> checkpoint_synchronization <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>      <span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">checkpoint_loop</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">seed</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">worker_loop</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>      <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">exit</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> normal <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">checkpoint_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Assemblings</span><span class=\"sy1\">,</span> <span class=\"re5\">Completes</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>starting<span class=\"sy1\">,</span> <span class=\"re5\">Worker</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">checkpoint_loop</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Worker</span> | <span class=\"re5\">Assemblings</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Completes</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>done<span class=\"sy1\">,</span> <span class=\"re5\">Worker</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>               <span class=\"re5\">New_assemblings</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">delete</span><span class=\"br0\">(</span> <span class=\"re5\">Worker</span><span class=\"sy1\">,</span> <span class=\"re5\">Assemblings</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>               <span class=\"re5\">New_completes</span> <span class=\"sy3\">=</span> <span class=\"re3\">checkpoint_loop_release</span><span class=\"br0\">(</span> <span class=\"re5\">New_assemblings</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Worker</span> | <span class=\"re5\">Completes</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>               <span class=\"re3\">checkpoint_loop</span><span class=\"br0\">(</span> <span class=\"re5\">New_assemblings</span><span class=\"sy1\">,</span> <span class=\"re5\">New_completes</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">checkpoint_loop_release</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Completes</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> all_complete <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Completes</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">checkpoint_loop_release</span><span class=\"br0\">(</span> <span class=\"re5\">_Assemblings</span><span class=\"sy1\">,</span> <span class=\"re5\">Completes</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Completes</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">worker_loop</span><span class=\"br0\">(</span> <span class=\"re5\">_Worker</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">_Checkpoint</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">worker_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Worker</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Checkpoint</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Checkpoint</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>starting<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Worker ~p ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Worker</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"kw3\">time</span>r:<span class=\"re3\">sleep</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Checkpoint</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>done<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <span class=\"kw1\">receive</span><br/>        all_complete <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">worker_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Worker</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Checkpoint</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 34, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"sync\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> worker<span class=\"sy1\">(</span>part <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>part<span class=\"sy1\">,</span> <span class=\"st0\">\"worker begins part\"</span><span class=\"sy1\">)</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Duration<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Int63n<span class=\"sy1\">(</span><span class=\"nu1\">1e6</span><span class=\"sy1\">)))</span><br/>    log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>part<span class=\"sy1\">,</span> <span class=\"st0\">\"worker completes part\"</span><span class=\"sy1\">)</span><br/>    wg<span class=\"sy3\">.</span>Done<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    partList    <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy1\">}</span><br/>    nAssemblies <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>    wg          sync<span class=\"sy3\">.</span>WaitGroup<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> nAssemblies<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"begin assembly cycle\"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>        wg<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>partList<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> part <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> partList <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">go</span> worker<span class=\"sy1\">(</span>part<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        wg<span class=\"sy3\">.</span>Wait<span class=\"sy1\">()</span><br/>        log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"assemble.  cycle\"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> <span class=\"st0\">\"complete\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 83, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Parallel<br/>\u00a0<br/><span class=\"kw1\">data</span> Task a <span class=\"sy0\">=</span> Idle <span class=\"sy0\">|</span> Make a<br/><span class=\"kw1\">type</span> TaskList a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> Results a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> TaskGroups a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>TaskList a<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> WorkerList a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Worker a<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> Worker a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Task a<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- run tasks in parallel and collect their results</span><br/><span class=\"co1\">-- the function doesn't return until all tasks are done, therefore</span><br/><span class=\"co1\">-- finished threads wait for the others to finish.</span><br/>runTasks <span class=\"sy0\">::</span> TaskList a <span class=\"sy0\">-&gt;</span> Results a<br/>runTasks <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>runTasks <span class=\"br0\">(</span>x:<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>runTasks <span class=\"br0\">(</span>x:y:<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> y `par` x\u00a0: y\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>runTasks <span class=\"br0\">(</span>x:y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> y `par` x\u00a0: y\u00a0: runTasks ys<br/>\u00a0<br/><span class=\"co1\">-- take a list of workers with different numbers of tasks and group</span><br/><span class=\"co1\">-- them: first the first task of each worker, then the second one etc.</span><br/>groupTasks <span class=\"sy0\">::</span> WorkerList a <span class=\"sy0\">-&gt;</span> TaskGroups a<br/>groupTasks <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>groupTasks xs<br/>    <span class=\"sy0\">|</span> allWorkersIdle xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> extractTask xs\u00a0: groupTasks <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> removeTask xs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- return a task as a plain value</span><br/>extractTask <span class=\"sy0\">::</span> Worker a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>extractTask <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>extractTask <span class=\"br0\">(</span>Idle:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>extractTask <span class=\"br0\">(</span>Make a:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- remove the foremost task of each worker</span><br/>removeTask <span class=\"sy0\">::</span> Worker a <span class=\"sy0\">-&gt;</span> Worker a<br/>removeTask <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">-- checks whether all workers are idle in this task</span><br/>allWorkersIdle <span class=\"sy0\">::</span> WorkerList a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>allWorkersIdle <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> extractTask<br/>\u00a0<br/><span class=\"co1\">-- the workers must calculate big sums. the first sum of each worker</span><br/><span class=\"co1\">-- belongs to the first task, and so on.</span><br/><span class=\"co1\">-- because of laziness, nothing is computed yet.</span><br/>\u00a0<br/><span class=\"co1\">-- worker1 has 5 tasks to do</span><br/>worker1 <span class=\"sy0\">::</span> Worker <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>worker1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> Make <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">*</span><span class=\"nu0\">1000000</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- worker2 has 4 tasks to do</span><br/>worker2 <span class=\"sy0\">::</span> Worker <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>worker2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> Make <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">*</span><span class=\"nu0\">100000</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- worker3 has 3 tasks to do</span><br/>worker3 <span class=\"sy0\">::</span> Worker <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>worker3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> Make <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">*</span><span class=\"nu0\">1000000</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- worker4 has 5 tasks to do</span><br/>worker4 <span class=\"sy0\">::</span> Worker <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>worker4 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> Make <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">*</span><span class=\"nu0\">300000</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- worker5 has 4 tasks to do, but starts at the second task.</span><br/>worker5 <span class=\"sy0\">::</span> Worker <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>worker5 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Idle<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> Make <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"sy0\">*</span><span class=\"nu0\">400000</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- group the workers' tasks</span><br/>tasks <span class=\"sy0\">::</span> TaskGroups <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>tasks <span class=\"sy0\">=</span> groupTasks <span class=\"br0\">[</span>worker1<span class=\"sy0\">,</span> worker2<span class=\"sy0\">,</span> worker3<span class=\"sy0\">,</span> worker4<span class=\"sy0\">,</span> worker5<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- a workshop: take a function to operate the results and a group of tasks,</span><br/><span class=\"co1\">-- execute the tasks showing the process and process the results</span><br/>workshop <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> b<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>workshop func a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> doWork <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> a<span class=\"br0\">]</span> a<br/>    <span class=\"kw1\">where</span><br/>        doWork <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Doing task \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\".\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"There are \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> y<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" workers for this task.\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Waiting for all workers...\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> func <span class=\"sy0\">$</span> runTasks y<br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Task \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\" done.\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> workshop <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> tasks<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 28, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> nWorkers<span class=\"sy0\">,</span> workers<span class=\"sy0\">,</span> cv<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    nWorkers <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><br/>    cv  <span class=\"sy0\">:=</span> condvar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>workers <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> worker<span class=\"br0\">(</span><span class=\"sy0\">!</span>nWorkers<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> wait<span class=\"br0\">(</span><span class=\"sy0\">!</span>workers<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> worker<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> thread <span class=\"kw1\">every</span> <span class=\"sy0\">!</span><span class=\"nu0\">3</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>       <span class=\"co1\"># Union limits each worker to 3 pieces</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" is working\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"sy0\">?</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" is done\"</span><span class=\"br0\">)</span><br/>        countdown<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> countdown<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    critical cv<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nWorkers <span class=\"sy0\">-:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>All done\"</span><span class=\"br0\">)</span><br/>            nWorkers <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span>workers<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>unlock<span class=\"br0\">(</span>cv<span class=\"br0\">)</span><span class=\"sy0\">,</span>signal<span class=\"br0\">(</span>cv<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        wait<span class=\"br0\">(</span>cv<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 89, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CheckpointSync<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of workers to use: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tScanner in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tWorker.<span class=\"me1\">nWorkers</span> <span class=\"sy0\">=</span> in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of tasks to complete:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trunTasks<span class=\"br0\">(</span>in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Informs that workers started working on the task and<br/>\t * starts running threads. Prior to proceeding with next<br/>\t * task syncs using static Worker.checkpoint() method.<br/>\t */</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> runTasks<span class=\"br0\">(</span><span class=\"kw4\">int</span> nTasks<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nTasks<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Starting task number \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\trunThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tWorker.<span class=\"me1\">checkpoint</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Creates a thread for each worker and runs it.<br/>\t */</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> runThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> Worker.<span class=\"me1\">nWorkers</span><span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> Worker<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Worker inner static class.<br/>\t */</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Worker <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> Worker<span class=\"br0\">(</span><span class=\"kw4\">int</span> threadID<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">threadID</span> <span class=\"sy0\">=</span> threadID<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\twork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t *  Notifies that thread started running for 100 to 1000 msec.<br/>\t\t *  Once finished increments static counter 'nFinished'<br/>\t\t *  that counts number of workers finished their work.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> work<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> workTime <span class=\"sy0\">=</span> rgen.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">900</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">+</span> threadID <span class=\"sy0\">+</span> <span class=\"st0\">\" will work for \"</span> <span class=\"sy0\">+</span> workTime <span class=\"sy0\">+</span> <span class=\"st0\">\" msec.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>workTime<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//work for 'workTime'</span><br/>\t\t\t\tnFinished<span class=\"sy0\">++;</span> <span class=\"co1\">//increases work finished counter</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">+</span> threadID <span class=\"sy0\">+</span> <span class=\"st0\">\" is ready\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Used to synchronize Worker threads using 'nFinished' static integer.<br/>\t\t * Waits (with step of 10 msec) until 'nFinished' equals to 'nWorkers'.<br/>\t\t * Once they are equal resets 'nFinished' counter.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> checkpoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>nFinished <span class=\"sy0\">!=</span> nWorkers<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tnFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* inner class instance variables */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> threadID<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* static variables */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rgen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nWorkers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 89, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CheckpointSync<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of workers to use: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tScanner in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tWorker.<span class=\"me1\">nWorkers</span> <span class=\"sy0\">=</span> in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of tasks to complete:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\trunTasks<span class=\"br0\">(</span>in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Informs that workers started working on the task and<br/>\t * starts running threads. Prior to proceeding with next<br/>\t * task syncs using static Worker.checkpoint() method.<br/>\t */</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> runTasks<span class=\"br0\">(</span><span class=\"kw4\">int</span> nTasks<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nTasks<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Starting task number \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\trunThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tWorker.<span class=\"me1\">checkpoint</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Creates a thread for each worker and runs it.<br/>\t */</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> runThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> Worker.<span class=\"me1\">nWorkers</span><span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> Worker<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Worker inner static class.<br/>\t */</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Worker <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> Worker<span class=\"br0\">(</span><span class=\"kw4\">int</span> threadID<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">threadID</span> <span class=\"sy0\">=</span> threadID<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\twork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t *  Notifies that thread started running for 100 to 1000 msec.<br/>\t\t *  Once finished increments static counter 'nFinished'<br/>\t\t *  that counts number of workers finished their work.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> work<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> workTime <span class=\"sy0\">=</span> rgen.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">900</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">+</span> threadID <span class=\"sy0\">+</span> <span class=\"st0\">\" will work for \"</span> <span class=\"sy0\">+</span> workTime <span class=\"sy0\">+</span> <span class=\"st0\">\" msec.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>workTime<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//work for 'workTime'</span><br/>\t\t\t\tnFinished<span class=\"sy0\">++;</span> <span class=\"co1\">//increases work finished counter</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">+</span> threadID <span class=\"sy0\">+</span> <span class=\"st0\">\" is ready\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Used to synchronize Worker threads using 'nFinished' static integer.<br/>\t\t * Waits (with step of 10 msec) until 'nFinished' equals to 'nWorkers'.<br/>\t\t * Once they are equal resets 'nFinished' counter.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> checkpoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>nFinished <span class=\"sy0\">!=</span> nWorkers<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tnFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* inner class instance variables */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> threadID<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* static variables */</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rgen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nWorkers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 60, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.41</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgen <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nWorkers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nTasks <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Worker<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> threadID<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Runnable <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"sy0\">@</span>Synchronized<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> workTime <span class=\"sy0\">=</span> rgen.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">900</span><span class=\"br0\">)</span> + 100L  <span class=\"co1\">// 100..999 msec.</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Worker $threadID will work for $workTime msec.\"</span><span class=\"br0\">)</span><br/>            Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>workTime<span class=\"br0\">)</span><br/>            nFinished++<br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Worker $threadID is ready\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> InterruptedException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><br/>            e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"sy0\">@</span>Synchronized<br/>        fun checkPoint<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nFinished <span class=\"sy0\">!=</span> nWorkers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>                    Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> InterruptedException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    println<span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><br/>                    e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"co1\">// reset</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun runTasks<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">nTasks</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Starting task number $i.\"</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">// Create a thread for each worker and run it.</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">1</span>..<span class=\"me1\">nWorkers</span><span class=\"br0\">)</span> Thread<span class=\"br0\">(</span>Worker<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        Worker.<span class=\"me1\">checkPoint</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// wait for all workers to finish the task</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Enter number of workers to use: \"</span><span class=\"br0\">)</span><br/>    nWorkers <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Enter number of tasks to complete: \"</span><span class=\"br0\">)</span><br/>    nTasks <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    runTasks<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 67, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(checkpoint).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">3</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(run(<span class=\"sy1\">+</span>integer,<span class=\"sy1\">+</span>integer,<span class=\"sy1\">+</span>float), one).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">3</span>, [<br/>        comment <span class=\"kw5\">is</span> <span class=\"st0\">'Assemble items using a team of workers with a maximum time per item assembly.'</span>,<br/>        arguments <span class=\"kw5\">is</span> [<span class=\"st0\">'Workers'</span><span class=\"sy1\">-</span><span class=\"st0\">'Number of workers'</span>, <span class=\"st0\">'Items'</span><span class=\"sy1\">-</span><span class=\"st0\">'Number of items to assemble'</span>, <span class=\"st0\">'Time'</span><span class=\"sy1\">-</span><span class=\"st0\">'Maximum time in seconds to assemble one item'</span>]<br/>    ]).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(run, one).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">0</span>, [<br/>        comment <span class=\"kw5\">is</span> <span class=\"st0\">'Assemble three items using a team of five workers with a maximum of 0.1 seconds per item assembly.'</span><br/>    ]).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">uses</span>(integer, [between<span class=\"sy1\">/</span><span class=\"nu0\">3</span>]).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">uses</span>(random,  [random<span class=\"sy1\">/</span><span class=\"nu0\">3</span>]).<br/>\u00a0<br/>    run(<span class=\"re0\">Workers</span>, <span class=\"re0\">Items</span>, <span class=\"re0\">Time</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% start the workers</span><br/>        <span class=\"kw4\">forall</span>(<br/>            between(<span class=\"nu0\">1</span>, <span class=\"re0\">Workers</span>, <span class=\"re0\">Worker</span>),<br/>            <span class=\"kw4\">threaded_ignore</span>(worker(<span class=\"re0\">Worker</span>, <span class=\"re0\">Items</span>, <span class=\"re0\">Time</span>))<br/>        ),<br/>        <span class=\"co1\">% assemble the items</span><br/>        checkpoint_loop(<span class=\"re0\">Workers</span>, <span class=\"re0\">Items</span>).<br/>\u00a0<br/>    run <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% default values</span><br/>        run(<span class=\"nu0\">5</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0.100</span>).<br/>\u00a0<br/>    checkpoint_loop(<span class=\"re0\">_</span>, <span class=\"nu0\">0</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">!</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'All assemblies done.'</span>), <span class=\"kw5\">nl</span>.<br/>    checkpoint_loop(<span class=\"re0\">Workers</span>, <span class=\"re0\">Item</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% wait for all threads to reach the checkpoint</span><br/>        <span class=\"kw4\">forall</span>(<br/>            between(<span class=\"nu0\">1</span>, <span class=\"re0\">Workers</span>, <span class=\"re0\">Worker</span>),<br/>            <span class=\"kw4\">threaded_wait</span>(done(<span class=\"re0\">Worker</span>, <span class=\"re0\">Item</span>))<br/>        ),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Assembly of item '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Item</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' done.'</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"co1\">% signal the workers to procede to the next assembly</span><br/>        <span class=\"re0\">NextItem</span> <span class=\"kw5\">is</span> <span class=\"re0\">Item</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span>,<br/>        <span class=\"kw4\">forall</span>(<br/>            between(<span class=\"nu0\">1</span>, <span class=\"re0\">Workers</span>, <span class=\"re0\">Worker</span>),<br/>            <span class=\"kw4\">threaded_notify</span>(next(<span class=\"re0\">Worker</span>, <span class=\"re0\">NextItem</span>))<br/>        ),<br/>        checkpoint_loop(<span class=\"re0\">Workers</span>, <span class=\"re0\">NextItem</span>).<br/>\u00a0<br/>    worker(<span class=\"re0\">_</span>, <span class=\"nu0\">0</span>, <span class=\"re0\">_</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">!</span>.<br/>    worker(<span class=\"re0\">Worker</span>, <span class=\"re0\">Item</span>, <span class=\"re0\">Time</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% the time necessary to assemble one item varies between 0.0 and Time seconds</span><br/>        random(<span class=\"nu0\">0.0</span>, <span class=\"re0\">Time</span>, <span class=\"re0\">AssemblyTime</span>), thread_sleep(<span class=\"re0\">AssemblyTime</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Worker '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Worker</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' item '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Item</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"co1\">% notify checkpoint that the worker have done his/her part of this item</span><br/>        <span class=\"kw4\">threaded_notify</span>(done(<span class=\"re0\">Worker</span>, <span class=\"re0\">Item</span>)),<br/>        <span class=\"co1\">% wait for green light to move to the next item</span><br/>        <span class=\"re0\">NextItem</span> <span class=\"kw5\">is</span> <span class=\"re0\">Item</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span>,<br/>        <span class=\"kw4\">threaded_wait</span>(next(<span class=\"re0\">Worker</span>, <span class=\"re0\">NextItem</span>)),<br/>        worker(<span class=\"re0\">Worker</span>, <span class=\"re0\">NextItem</span>, <span class=\"re0\">Time</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 23, "block": "<pre class=\"text highlighted_source\">: task(n, jobs, myChannel)<br/>   while(true) [<br/>      System.Out \"TASK \" &lt;&lt; n &lt;&lt; \"\u00a0: Beginning my work...\" &lt;&lt; cr<br/>      System sleep(1000 rand)<br/>      System.Out \"TASK \" &lt;&lt; n &lt;&lt; \"\u00a0: Finish, sendind done and waiting for others...\" &lt;&lt; cr<br/>      jobs send($jobDone) drop<br/>      myChannel receive drop<br/>      ]\u00a0;<br/>\u00a0<br/>: checkPoint(n, jobs, channels)<br/>   while(true) [<br/>      #[ jobs receive drop ] times(n)<br/>      \"CHECKPOINT\u00a0: All jobs done, sending done to all tasks\" println<br/>      channels apply(#[ send($allDone) drop ])<br/>      ]\u00a0;<br/>\u00a0<br/>: testCheckPoint(n) <br/>| jobs channels i |<br/>   ListBuffer init(n, #[ Channel new ]) dup freeze -&gt;channels   <br/>   Channel new -&gt;jobs <br/>\u00a0<br/>   #[ checkPoint(n, jobs, channels) ] &amp;<br/>   n loop: i [ #[ task(i, jobs, channels at(i)) ] &amp; ]\u00a0;</pre>"}, {"lang": "Perl", "loc": 69, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> v5<span class=\"sy0\">.</span>10<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Socket<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$nr_items</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> short_sleep<span class=\"br0\">(</span><span class=\"co5\">$)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$seconds</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/select.html\"><span class=\"kw3\">select</span></a> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$seconds</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># This is run in a worker thread.  It repeatedly waits for a character from</span><br/><span class=\"co1\"># the main thread, and sends a value back to the main thread.  A short</span><br/><span class=\"co1\"># sleep introduces random timing, just to keep us honest.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> be_worker<span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$socket</span><span class=\"sy0\">,</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nr_items</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/sysread.html\"><span class=\"kw3\">sysread</span></a> <span class=\"re0\">$socket</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dummy</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        short_sleep <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/syswrite.html\"><span class=\"kw3\">syswrite</span></a> <span class=\"re0\">$socket</span><span class=\"sy0\">,</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">++</span><span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># This function forks a worker and sends it a socket on which to talk to</span><br/><span class=\"co1\"># the main thread, as well as an initial value to work with.  It returns</span><br/><span class=\"co1\"># (to the main thread) a socket on which to talk to the worker.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fork_worker<span class=\"br0\">(</span><span class=\"co5\">$)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/socketpair.html\"><span class=\"kw3\">socketpair</span></a> <span class=\"kw1\">my</span> <span class=\"re0\">$kidsock</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dadsock</span><span class=\"sy0\">,</span> AF_UNIX<span class=\"sy0\">,</span> SOCK_STREAM<span class=\"sy0\">,</span> PF_UNSPEC<br/>        <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"socketpair: $!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/fork.html\"><span class=\"kw3\">fork</span></a> <span class=\"sy0\">//</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"fork: $!\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># We're the parent</span><br/>        <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$dadsock</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$kidsock</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># We're the child</span><br/>        <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> <span class=\"re0\">$kidsock</span><span class=\"sy0\">;</span><br/>        be_worker <span class=\"re0\">$dadsock</span><span class=\"sy0\">,</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\"># Never returns</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Fork two workers, send them start signals, retrieve the values they send</span><br/><span class=\"co1\"># back, and print them</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$alpha_sock</span> <span class=\"sy0\">=</span> fork_worker <span class=\"st_h\">'A'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$digit_sock</span> <span class=\"sy0\">=</span> fork_worker <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nr_items</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/syswrite.html\"><span class=\"kw3\">syswrite</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"st_h\">'x'</span>   <span class=\"kw1\">for</span> <span class=\"re0\">$alpha_sock</span><span class=\"sy0\">,</span> <span class=\"re0\">$digit_sock</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/sysread.html\"><span class=\"kw3\">sysread</span></a> <span class=\"re0\">$alpha_sock</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$alpha</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/sysread.html\"><span class=\"kw3\">sysread</span></a> <span class=\"re0\">$digit_sock</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$digit</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    say <span class=\"re0\">$alpha</span><span class=\"sy0\">,</span> <span class=\"re0\">$digit</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># If the main thread were planning to run for a long time after the</span><br/><span class=\"co1\"># workers had terminate, it would need to reap them to avoid zombies:</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/wait.html\"><span class=\"kw3\">wait</span></a><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/wait.html\"><span class=\"kw3\">wait</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(de checkpoints (Projects Workers)<br/>   (for P Projects<br/>      (prinl \"Starting project number \" P \":\")<br/>      (for<br/>         (Staff<br/>            (mapcar<br/>               '((I) (worker (format I) (rand 2 5)))  # Create staff of workers<br/>               (range 1 Workers) )<br/>            Staff                                     # While still busy<br/>            (filter worker Staff) ) )                 # Remove finished workers<br/>      (prinl \"Project number \" P \" is done.\") ) )<br/>\u00a0<br/>(de worker (ID Steps)<br/>   (co ID<br/>      (prinl \"Worker \" ID \" has \" Steps \" steps to do\")<br/>      (for N Steps<br/>         (yield ID)<br/>         (prinl \"Worker \" ID \" step \" N) )<br/>      NIL ) )</pre>"}, {"lang": "PureBasic", "loc": 87, "block": "<pre class=\"purebasic highlighted_source\">#MaxWorktime<span class=\"sy0\">=</span><span class=\"nu0\">8000</span> <span class=\"co1\">; \"Workday\" in msec</span><br/>\u00a0<br/><span class=\"co1\">; Structure that each thread uses</span><br/><span class=\"kw1\">Structure</span> MyIO<br/>  <span class=\"kw2\">ThreadID</span>.i<br/>  Semaphore_Joining.i<br/>  Semaphore_Release.i<br/>  Semaphore_Deliver.i<br/>  Semaphore_Leaving.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"co1\">; Array of used threads</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> Comm.MyIO<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Master loop synchronizing the threads via semaphores</span><br/><span class=\"kw1\">Procedure</span> CheckPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j, maxthreads<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>Comm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Worker_count, Deliver_count<br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> maxthreads<br/>      <span class=\"kw1\">With</span> Comm<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> TrySemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Leaving<span class=\"br0\">)</span><br/>          Worker_count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">ElseIf</span> TrySemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Deliver<span class=\"br0\">)</span><br/>          Deliver_count<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          <span class=\"kw1\">If</span> Deliver_count<span class=\"sy0\">=</span>Worker_count<br/>            <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"All Workers reported in, starting next task.\"</span><span class=\"br0\">)</span><br/>            Deliver_count<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>            <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> maxthreads<br/>              SignalSemaphore<span class=\"br0\">(</span>Comm<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Semaphore_Release<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Next</span> j<br/>          <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">ElseIf</span> TrySemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Joining<span class=\"br0\">)</span><br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"A new Worker joined the force.\"</span><span class=\"br0\">)</span><br/>          Worker_count<span class=\"sy0\">+</span><span class=\"nu0\">1</span>: SignalSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Release<span class=\"br0\">)</span><br/>        <span class=\"kw1\">ElseIf</span> Worker_count<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>          <span class=\"kw1\">ProcedureReturn</span> <br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">EndWith</span><br/>  <span class=\"kw1\">ForEver</span><br/>  StartAll<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; A worker thread, all orchestrated by the Checkpoint() routine</span><br/><span class=\"kw1\">Procedure</span> Worker<span class=\"br0\">(</span>ID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> EndTime<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#MaxWorktime, n<br/>  <span class=\"kw1\">With</span> Comm<span class=\"br0\">(</span>ID<span class=\"br0\">)</span><br/>    SignalSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Joining<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Repeat</span><br/>      <span class=\"kw1\">Repeat</span> <span class=\"co1\">; Use a non-blocking semaphore check to avoid dead-locking at shutdown.</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>EndTime<br/>          SignalSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Leaving<span class=\"br0\">)</span><br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Thread #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ID<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" is done.\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">ProcedureReturn</span><br/>        <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Until</span> TrySemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Release<span class=\"br0\">)</span><br/>      n<span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Thread #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ID<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" will work for \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" msec.\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Delay</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Thread #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ID<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" delivering\"</span><span class=\"br0\">)</span><br/>      SignalSemaphore<span class=\"br0\">(</span><span class=\"sy0\">\\</span>Semaphore_Deliver<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ForEver</span><br/>  <span class=\"kw1\">EndWith</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; User IO &amp; init</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, j<br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of workers to use [2-2000]: \"</span><span class=\"br0\">)</span><br/>    j<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Until</span> j<span class=\"sy0\">&gt;=</span><span class=\"nu0\">2</span> <span class=\"kw1\">And</span> j<span class=\"sy0\">&lt;=</span><span class=\"nu0\">2000</span><br/>  <span class=\"kw1\">ReDim</span> Comm<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> j<br/>    <span class=\"kw1\">With</span> Comm<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span>Semaphore_Release <span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span>Semaphore_Joining <span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span>Semaphore_Deliver <span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span>Semaphore_Leaving <span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">\\</span><span class=\"kw2\">ThreadID</span> <span class=\"sy0\">=</span> <span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@Worker<span class=\"br0\">(</span><span class=\"br0\">)</span>,i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndWith</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Work started, \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" workers has been called.\"</span><span class=\"br0\">)</span><br/>  CheckPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Racket", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define t 5)    \u00a0; total number of threads<br/>(define count 0)\u00a0; number of threads arrived at rendezvous<br/>(define mutex      (make-semaphore 1))\u00a0; exclusive access to count<br/>(define turnstile  (make-semaphore 0))<br/>(define turnstile2 (make-semaphore 1))<br/>(define ch (make-channel))<br/>\u00a0<br/>(define (make-producer name start)<br/>  (\u03bb ()<br/>    (let loop ([n start])<br/>      (sleep (* 0.01 (random 10)))\u00a0; \"compute\" something<br/>     \u00a0;; rendezvous<br/>      (semaphore-wait mutex)<br/>      (set! count (+ count 1))\u00a0; we have arrived<br/>      (when (= count t)\u00a0; are we the last to arrive?<br/>        (semaphore-wait turnstile2)<br/>        (semaphore-post turnstile))      <br/>      (semaphore-post mutex)<br/>     \u00a0; avoid deadlock problem:<br/>      (semaphore-wait turnstile)<br/>      (semaphore-post turnstile)<br/>     \u00a0; critical point <br/>      (channel-put ch n)\u00a0; send result to controller<br/>     \u00a0; leave properly<br/>      (semaphore-wait mutex)<br/>      (set! count (- count 1))<br/>      (when (= count 0)\u00a0; are we the last to leave?<br/>        (semaphore-wait turnstile)<br/>        (semaphore-post turnstile2))<br/>      (semaphore-post mutex)<br/>\u00a0<br/>      (semaphore-wait turnstile2)<br/>      (semaphore-post turnstile2)<br/>\u00a0<br/>      (loop (+ n t)))))<br/>\u00a0<br/>; start t workers:<br/>(map (\u03bb(start) (thread (make-producer start start)))<br/>     (range 0 t))<br/>\u00a0<br/>(let loop ()<br/>  (displayln (for/list ([_ t]) (channel-get ch)))<br/>  (loop))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 158, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'socket'</span><br/>\u00a0<br/><span class=\"co1\"># A Workshop runs all of its workers, then collects their results. Use</span><br/><span class=\"co1\"># Workshop#add to add workers and Workshop#work to run them.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># This implementation forks some processes to run the workers in</span><br/><span class=\"co1\"># parallel. Ruby must provide Kernel#fork and 'socket' library must</span><br/><span class=\"co1\"># provide UNIXSocket.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Why processes and not threads? C Ruby still has a Global VM Lock,</span><br/><span class=\"co1\"># where only one thread can hold the lock. One platform, OpenBSD, still</span><br/><span class=\"co1\"># has userspace threads, with all threads on one cpu core. Multiple</span><br/><span class=\"co1\"># processes will not compete for a single Global VM Lock and can run</span><br/><span class=\"co1\"># on multiple cpu cores.</span><br/><span class=\"kw1\">class</span> Workshop<br/>  <span class=\"co1\"># Creates a Workshop.</span><br/>  <span class=\"kw1\">def</span> initialize<br/>    <span class=\"re1\">@sockets</span> = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Adds a worker to this Workshop. Returns a worker id _wid_ for this</span><br/>  <span class=\"co1\"># worker. The worker is a block that takes some _args_ and returns</span><br/>  <span class=\"co1\"># some value. Workshop#work will run the block.</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># This implementation forks a process for the worker. This process</span><br/>  <span class=\"co1\"># will use Marshal with UNIXSocket to receive the _args_ and to send</span><br/>  <span class=\"co1\"># the return value. The _wid_ is a process id. The worker also</span><br/>  <span class=\"co1\"># inherits _IO_ objects, which might be a problem if the worker holds</span><br/>  <span class=\"co1\"># open a pipe or socket, and the other end never reads EOF.</span><br/>  <span class=\"kw1\">def</span> add<br/>    child, parent = UNIXSocket.<span class=\"me1\">pair</span><br/>\u00a0<br/>    wid = <span class=\"kw3\">fork</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\"># I am the child.</span><br/>      child.<span class=\"me1\">close</span><br/>      <span class=\"re1\">@sockets</span>.<span class=\"me1\">each_value</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>sibling<span class=\"sy0\">|</span> sibling.<span class=\"me1\">close</span> <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\"># Prevent that all the children print their backtraces (to a mess</span><br/>      <span class=\"co1\"># of mixed lines) when user presses Control-C.</span><br/>      <span class=\"kw4\">Signal</span>.<span class=\"kw3\">trap</span><span class=\"br0\">(</span><span class=\"st0\">\"INT\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">exit!</span> <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>        <span class=\"co1\"># Wait for a command.</span><br/>        <span class=\"kw1\">begin</span><br/>          command, args = <span class=\"kw4\">Marshal</span>.<span class=\"kw3\">load</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><br/>        <span class=\"kw1\">rescue</span> <span class=\"kw4\">EOFError</span><br/>          <span class=\"co1\"># Parent probably died.</span><br/>          <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> command<br/>        <span class=\"kw1\">when</span> <span class=\"re3\">:work</span><br/>          <span class=\"co1\"># Do work. Send result to parent.</span><br/>          result = <span class=\"kw1\">yield</span> <span class=\"sy0\">*</span>args<br/>          <span class=\"kw4\">Marshal</span>.<span class=\"me1\">dump</span><span class=\"br0\">(</span>result, parent<span class=\"br0\">)</span><br/>        <span class=\"kw1\">when</span> <span class=\"re3\">:remove</span><br/>          <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw3\">fail</span> <span class=\"st0\">\"bad command from workshop\"</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># I am the parent.</span><br/>    parent.<span class=\"me1\">close</span><br/>    <span class=\"re1\">@sockets</span><span class=\"br0\">[</span>wid<span class=\"br0\">]</span> = child<br/>    wid<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Runs all of the workers, and collects the results in a Hash. Passes</span><br/>  <span class=\"co1\"># the same _args_ to each of the workers. Returns a Hash that pairs</span><br/>  <span class=\"co1\"># _wid_ =&gt; _result_, where _wid_ is the worker id and _result_ is the</span><br/>  <span class=\"co1\"># return value from the worker.</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># This implementation runs the workers in parallel, and waits until</span><br/>  <span class=\"co1\"># _all_ of the workers finish their results. Workshop provides no way</span><br/>  <span class=\"co1\"># to start the work without waiting for the work to finish. If a</span><br/>  <span class=\"co1\"># worker dies (for example, by raising an Exception), then</span><br/>  <span class=\"co1\"># Workshop#work raises a RuntimeError.</span><br/>  <span class=\"kw1\">def</span> work<span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span><br/>    message = <span class=\"br0\">[</span><span class=\"re3\">:work</span>, args<span class=\"br0\">]</span><br/>    <span class=\"re1\">@sockets</span>.<span class=\"me1\">each_pair</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>wid, child<span class=\"sy0\">|</span><br/>      <span class=\"kw4\">Marshal</span>.<span class=\"me1\">dump</span><span class=\"br0\">(</span>message, child<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># Checkpoint! Wait for all workers to finish.</span><br/>    result = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"re1\">@sockets</span>.<span class=\"me1\">each_pair</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>wid, child<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"co1\"># This waits until the child finishes a result.</span><br/>        result<span class=\"br0\">[</span>wid<span class=\"br0\">]</span> = <span class=\"kw4\">Marshal</span>.<span class=\"kw3\">load</span><span class=\"br0\">(</span>child<span class=\"br0\">)</span><br/>      <span class=\"kw1\">rescue</span> <span class=\"kw4\">EOFError</span><br/>        <span class=\"kw3\">fail</span> <span class=\"st0\">\"Worker #{wid} died\"</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    result<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Removes a worker from the Workshop, who has a worker id _wid_.</span><br/>  <span class=\"co1\"># If there is no such worker, raises ArgumentError.</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># This implementation kills and reaps the process for the worker.</span><br/>  <span class=\"kw1\">def</span> remove<span class=\"br0\">(</span>wid<span class=\"br0\">)</span><br/>    <span class=\"kw1\">unless</span> child = <span class=\"re1\">@sockets</span>.<span class=\"me1\">delete</span><span class=\"br0\">(</span>wid<span class=\"br0\">)</span><br/>      <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"No worker #{wid}\"</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw4\">Marshal</span>.<span class=\"me1\">dump</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">:remove</span>, <span class=\"kw2\">nil</span><span class=\"br0\">]</span>, child<span class=\"br0\">)</span><br/>      child.<span class=\"me1\">close</span><br/>      <span class=\"kw4\">Process</span>.<span class=\"me1\">wait</span><span class=\"br0\">(</span>wid<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># First create a Workshop.</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'pp'</span><br/>shop = Workshop.<span class=\"me1\">new</span><br/>wids = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Our workers must not use the same random numbers after the fork.</span><br/><span class=\"re1\">@fixed_rand</span> = <span class=\"kw2\">false</span><br/><span class=\"kw1\">def</span> fix_rand<br/>  <span class=\"kw1\">unless</span> <span class=\"re1\">@fixed_rand</span>; <span class=\"kw3\">srand</span>; <span class=\"re1\">@fixed_rand</span> = <span class=\"kw2\">true</span>; <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Start with some workers.</span><br/><span class=\"nu0\">6</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>  wids <span class=\"sy0\">&lt;&lt;</span> shop.<span class=\"me1\">add</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"co1\"># This worker slowly calculates a Fibonacci number.</span><br/>    fix_rand<br/>    f = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span> f<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span>i, f<span class=\"br0\">[</span><span class=\"nu0\">25</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"nu0\">6</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  <span class=\"co1\"># Do one cycle of work, and print the result. </span><br/>  pp shop.<span class=\"me1\">work</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Remove a worker.</span><br/>  victim = <span class=\"kw3\">rand</span><span class=\"br0\">(</span>wids.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>  shop.<span class=\"me1\">remove</span> wids<span class=\"br0\">[</span>victim<span class=\"br0\">]</span><br/>  wids.<span class=\"me1\">slice</span>! victim<br/>\u00a0<br/>  <span class=\"co1\"># Add another worker.</span><br/>  wids <span class=\"sy0\">&lt;&lt;</span> shop.<span class=\"me1\">add</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>    <span class=\"co1\"># This worker slowly calculates a number from</span><br/>    <span class=\"co1\"># the sequence 0, 1, 2, 3, 6, 11, 20, 37, 68, 125, ...</span><br/>    fix_rand<br/>    f = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span> f<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">[</span>j, i, f<span class=\"br0\">[</span><span class=\"nu0\">20</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Remove all workers.</span><br/>wids.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>wid<span class=\"sy0\">|</span> shop.<span class=\"me1\">remove</span> wid <span class=\"br0\">}</span><br/>pp shop.<span class=\"me1\">work</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 84, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"br0\">{</span>Random, Scanner<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CheckpointSync <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> in <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Scanner<span class=\"br0\">(</span>System.<span class=\"me1\">in</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*<br/>   * Informs that workers started working on the task and<br/>   * starts running threads. Prior to proceeding with next<br/>   * task syncs using static Worker.checkpoint() method.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> runTasks<span class=\"br0\">(</span>nTasks<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until nTasks<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Starting task number \"</span> + <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>      runThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      Worker.<span class=\"me1\">checkpoint</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*<br/>   * Creates a thread for each worker and runs it.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> runThreads<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until Worker.<span class=\"me1\">nWorkers</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Thread<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Worker<span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Worker<span class=\"br0\">(</span><span class=\"coMULTI\">/* inner class instance variables */</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> threadID<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Runnable <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      work<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>     *  Notifies that thread started running for 100 to 1000 msec.<br/>     *  Once finished increments static counter 'nFinished'<br/>     *  that counts number of workers finished their work.<br/>     */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> work<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> workTime <span class=\"sy0\">=</span> Worker.<span class=\"me1\">rgen</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">900</span><span class=\"br0\">)</span> + <span class=\"nu0\">100</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> + threadID + <span class=\"st0\">\" will work for \"</span> + workTime + <span class=\"st0\">\" msec.\"</span><span class=\"br0\">)</span><br/>        Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>workTime<span class=\"br0\">)</span> <span class=\"co1\">//work for 'workTime'</span><br/>\u00a0<br/>        Worker.<span class=\"me1\">nFinished</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"co1\">//increases work finished counter</span><br/>\u00a0<br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> + threadID + <span class=\"st0\">\" is ready\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> InterruptedException <span class=\"sy0\">=&gt;</span><br/>          System.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><br/>          e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*<br/>   * Worker inner static class.<br/>   */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Worker <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgen <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Random<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nWorkers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>     * Used to synchronize Worker threads using 'nFinished' static integer.<br/>     * Waits (with step of 10 msec) until 'nFinished' equals to 'nWorkers'.<br/>     * Once they are equal resets 'nFinished' counter.<br/>     */</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> checkpoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nFinished <span class=\"sy0\">!=</span> nWorkers<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> InterruptedException <span class=\"sy0\">=&gt;</span><br/>            System.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: thread execution interrupted\"</span><span class=\"br0\">)</span><br/>            e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      nFinished <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  print<span class=\"br0\">(</span><span class=\"st0\">\"Enter number of workers to use: \"</span><span class=\"br0\">)</span><br/>  Worker.<span class=\"me1\">nWorkers</span> <span class=\"sy0\">=</span> in.<span class=\"me1\">nextInt</span><br/>  print<span class=\"br0\">(</span><span class=\"st0\">\"Enter number of tasks to complete:\"</span><span class=\"br0\">)</span><br/>  runTasks<span class=\"br0\">(</span>in.<span class=\"me1\">nextInt</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 97, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require Thread<br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> checkpoint <span class=\"br0\">{</span><br/>    <span class=\"kw1\">namespace</span> export <span class=\"br0\">{</span><span class=\"br0\">[</span>a-z<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">namespace</span> ensemble create<br/>    <span class=\"kw1\">variable</span> members <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">variable</span> waiting <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">variable</span> event<br/>    <span class=\"co1\"># Back-end of join operation</span><br/>    <span class=\"kw1\">proc</span> Join <span class=\"br0\">{</span>id<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> members<br/>\t<span class=\"kw1\">variable</span> counter<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$id</span> ni <span class=\"re0\">$members</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> members <span class=\"re0\">$id</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$id</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Back-end of leave operation</span><br/>    <span class=\"kw1\">proc</span> Leave <span class=\"br0\">{</span>id<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> members<br/>\t<span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact <span class=\"re0\">$members</span> <span class=\"re0\">$id</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> members <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$members</span> <span class=\"re0\">$idx</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">variable</span> event<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists event<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> event <span class=\"br0\">[</span>after idle\u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Release</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Back-end of deliver operation</span><br/>    <span class=\"kw1\">proc</span> Deliver <span class=\"br0\">{</span>id<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> waiting<br/>\t<span class=\"kw2\">lappend</span> waiting <span class=\"re0\">$id</span><br/>\u00a0<br/>\t<span class=\"kw1\">variable</span> event<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists event<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> event <span class=\"br0\">[</span>after idle\u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Release</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Releasing is done as an \"idle\" action to prevent deadlocks</span><br/>    <span class=\"kw1\">proc</span> Release <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> members<br/>\t<span class=\"kw1\">variable</span> waiting<br/>\t<span class=\"kw1\">variable</span> event<br/>\tunset event<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$members</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$waiting</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>\t<span class=\"kw1\">set</span> w <span class=\"re0\">$waiting</span><br/>\t<span class=\"kw1\">set</span> waiting <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> id <span class=\"re0\">$w</span> <span class=\"br0\">{</span><br/>\t    thread::<span class=\"me1\">send</span> -async <span class=\"re0\">$id</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Delivered</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Make a thread and attach it to the public API of the checkpoint</span><br/>    <span class=\"kw1\">proc</span> makeThread <span class=\"br0\">{</span><span class=\"br0\">{</span>script <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> id <span class=\"br0\">[</span>thread::<span class=\"me1\">create</span> thread::<span class=\"me1\">wait</span><span class=\"br0\">]</span><br/>\tthread::<span class=\"me1\">send</span> <span class=\"re0\">$id</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> checkpoint <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">namespace</span> export <span class=\"br0\">{</span><span class=\"br0\">[</span>a-z<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">namespace</span> ensemble create<br/>\u00a0<br/>\t\t<span class=\"co1\"># Call to actually join the checkpoint group</span><br/>\t\t<span class=\"kw1\">proc</span> <span class=\"kw2\">join</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">variable</span> checkpoint<br/>\t\t    thread::<span class=\"me1\">send</span> <span class=\"re0\">$checkpoint</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t\t\t   \u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Join</span> <span class=\"br0\">[</span>thread::<span class=\"me1\">id</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\"># Call to actually leave the checkpoint group</span><br/>\t\t<span class=\"kw1\">proc</span> leave <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">variable</span> checkpoint<br/>\t\t    thread::<span class=\"me1\">send</span> <span class=\"re0\">$checkpoint</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t\t\t   \u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Leave</span> <span class=\"br0\">[</span>thread::<span class=\"me1\">id</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\"># Call to wait for checkpoint synchronization</span><br/>\t\t<span class=\"kw1\">proc</span> deliver <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">variable</span> checkpoint<br/>\t\t    <span class=\"co1\"># Do this from within the [vwait] to ensure that we're already waiting</span><br/>\t\t    after <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> thread::<span class=\"me1\">send</span> <span class=\"re0\">$checkpoint</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>\t\t\t   \u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Deliver</span> <span class=\"br0\">[</span>thread::<span class=\"me1\">id</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t    vwait\u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">Delivered</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tthread::<span class=\"me1\">send</span> <span class=\"re0\">$id</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">checkpoint</span>::<span class=\"me1\">checkpoint</span> <span class=\"br0\">[</span>thread::<span class=\"me1\">id</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\tthread::<span class=\"me1\">send</span> <span class=\"re0\">$id</span> <span class=\"re0\">$script</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$id</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Utility to help determine whether the checkpoint is in use</span><br/>    <span class=\"kw1\">proc</span> anyJoined <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">variable</span> members<br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$members</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 26, "block": "<pre class=\"text highlighted_source\">const NUM_PARTS=5;  // number of parts used to make the product<br/>var requested=Atomic.Int(-1); // the id of the part the consumer needs<br/>var pipe=Thread.Pipe();       // \"conveyor belt\" of parts to consumer<br/>\u00a0<br/>fcn producer(id,pipe){<br/>   while(True){ // make part forever<br/>      requested.waitFor(id);  // wait for consumer to ask for my part<br/>      requested.set(-1);      // I'm making the part<br/>      pipe.write(id);         // ship my part<br/>   }<br/>   println(id,\" stopped\");<br/>}<br/>\u00a0<br/>foreach id in (NUM_PARTS){ producer.launch(id,pipe) } // start workers/threads<br/>\u00a0<br/>product:=NUM_PARTS.pump(List(),0);  // parts I have on hand<br/>do(10){\t  // make 10 products<br/>   while(False!=(id:=product.filter1n('==(0)))){ // gather parts to make product<br/>      requested.set(id);<br/>      part:=pipe.read();  // get requested part<br/>      product[part]+=1; // assemble part into product<br/>   }<br/>   println(\"product made: \",product);<br/>   foreach n in (NUM_PARTS){ product[n]-=1 } // remove parts from bin<br/>}<br/>println(\"Done\");\t// but workers are still waiting</pre>"}]}