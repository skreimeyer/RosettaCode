{"task": "Sierpinski_triangle", "blocks": [{"lang": "ACL2", "loc": 39, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-row <span class=\"br0\">(</span>prev<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest prev<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first prev<span class=\"br0\">)</span> <span class=\"br0\">(</span>second prev<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>pascal-row <span class=\"br0\">(</span>rest prev<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-triangle-r <span class=\"br0\">(</span>rows prev<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp rows<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>curr <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>pascal-row prev<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> curr <span class=\"br0\">(</span>pascal-triangle-r <span class=\"br0\">(</span><span class=\"nu0\">1</span>- rows<span class=\"br0\">)</span> curr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-triangle <span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>pascal-triangle-r rows <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-odds-row <span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp row<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cw <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">prog2</span>$ <span class=\"br0\">(</span>cw <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> <span class=\"br0\">(</span>first row<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"[]\"</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-odds-row <span class=\"br0\">(</span>rest row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-spaces <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">prog2</span>$ <span class=\"br0\">(</span>cw <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-spaces <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-odds <span class=\"br0\">(</span>triangle height<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp triangle<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">progn</span>$ <span class=\"br0\">(</span>print-spaces height<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-odds-row <span class=\"br0\">(</span>first triangle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-odds <span class=\"br0\">(</span>rest triangle<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-sierpenski <span class=\"br0\">(</span>levels<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>height <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> levels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>print-odds <span class=\"br0\">(</span>pascal-triangle height<span class=\"br0\">)</span><br/>                  height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 53, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Interfaces; <span class=\"kw3\">use</span> Interfaces;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sieteri_Triangles <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Practical_Order <span class=\"kw1\">is</span> Unsigned_32 <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span>;<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Pow<span class=\"br0\">(</span>X\u00a0: Unsigned_32; N\u00a0: Unsigned_32<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Unsigned_32 <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> X * Pow<span class=\"br0\">(</span>X, N - <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Pow;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Item\u00a0: Unsigned_32<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/>      <span class=\"kw3\">package</span> Ord_Io <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">Modular_Io</span><span class=\"br0\">(</span>Unsigned_32<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">use</span> Ord_Io;<br/>      Temp\u00a0: String<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">36</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; ' '<span class=\"br0\">)</span>;<br/>      First\u00a0: Positive;<br/>      Last \u00a0: Positive;<br/>   <span class=\"kw1\">begin</span><br/>      Put<span class=\"br0\">(</span>To =&gt; Temp, Item =&gt; Item, Base =&gt; <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      First\u00a0:= Index<span class=\"br0\">(</span>Temp, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>      Last \u00a0:= Index<span class=\"br0\">(</span>Temp<span class=\"br0\">(</span>First..<span class=\"me1\">Temp</span>'Last<span class=\"br0\">)</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> First..<span class=\"me1\">Last</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Temp<span class=\"br0\">(</span>I<span class=\"br0\">)</span> = '<span class=\"nu0\">0</span>' <span class=\"kw1\">then</span><br/>            Put<span class=\"br0\">(</span>' '<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Put<span class=\"br0\">(</span>Temp<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      New_Line;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Sierpinski <span class=\"br0\">(</span>N\u00a0: Practical_Order<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Size\u00a0: Unsigned_32\u00a0:= Pow<span class=\"br0\">(</span><span class=\"nu0\">2</span>, N<span class=\"br0\">)</span>;<br/>      V\u00a0: Unsigned_32\u00a0:= Pow<span class=\"br0\">(</span><span class=\"nu0\">2</span>, Size<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">Size</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Print<span class=\"br0\">(</span>V<span class=\"br0\">)</span>;<br/>         V\u00a0:= Shift_Left<span class=\"br0\">(</span>V, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">xor</span> Shift_Right<span class=\"br0\">(</span>V,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Sierpinski;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> Practical_Order <span class=\"kw1\">loop</span><br/>      Sierpinski<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Sieteri_Triangles;</pre>"}, {"lang": "ALGOL 68", "loc": 16, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> sierpinski <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> d <span class=\"sy1\">:=</span> <span class=\"st0\">\"*\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>        <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> d <span class=\"sy1\">*</span> 2<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> next<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">STRING</span> sp <span class=\"sy1\">:=</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>2 <span class=\"sy1\">**</span> <span class=\"br0\">(</span>i<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> x <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> d <span class=\"kw2\">DO</span><br/>          <span class=\"kw3\">STRING</span> dx <span class=\"sy1\">=</span> d<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          next<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sp<span class=\"sy1\">+</span>dx<span class=\"sy1\">+</span>sp<span class=\"sy1\">;</span><br/>          next<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> d<span class=\"sy1\">+</span>x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> dx<span class=\"sy1\">+</span><span class=\"st0\">\" \"</span><span class=\"sy1\">+</span>dx<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        d <span class=\"sy1\">:=</span> next<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    d<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span>sierpinski<span class=\"br0\">(</span>4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 103, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- SIERPINKSI TRIANGLE -------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- sierpinski\u00a0:: Int -&gt; [String]</span><br/><span class=\"kw3\">on</span> sierpinski<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> previous <span class=\"kw3\">to</span> sierpinski<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> padding <span class=\"kw3\">to</span> replicate<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">space</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">script</span> alignedCentre<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>                concat<span class=\"br0\">(</span>padding <span class=\"sy0\">&amp;</span> s <span class=\"sy0\">&amp;</span> padding<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"kw3\">script</span> adjacentDuplicates<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>                unwords<span class=\"br0\">(</span>replicate<span class=\"br0\">(</span><span class=\"nu0\">2</span>, s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- Previous triangle block centered,</span><br/>        <span class=\"co1\">-- and placed on 2 adjacent duplicates.</span><br/>        map<span class=\"br0\">(</span>alignedCentre, previous<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>adjacentDuplicates, previous<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"st0\">\"*\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> sierpinski<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    unlines<span class=\"br0\">(</span>sierpinski<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    acc<br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper</span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- unlines, unwords\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"kw3\">on</span> unwords<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span><span class=\"kw1\">space</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unwords</pre>"}, {"lang": "ATS", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>// How to compile:<br/>//<br/>// patscc -DATS_MEMALLOC_LIBC -o sierpinski sierpinski.dats<br/>//<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>#define SIZE 16<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>var x: int<br/>//<br/>val () =<br/>for (x\u00a0:= SIZE-1; x &gt;= 0; x\u00a0:= x-1)<br/>{<br/>  var i: int<br/>  val () =<br/>  for (i\u00a0:= 0; i &lt; x; i\u00a0:= i+1)<br/>  {<br/>    val () = print_char(' ')<br/>  }<br/>  var y: int<br/>  val () =<br/>  for (y\u00a0:= 0; y + x &lt; SIZE; y\u00a0:= y+1)<br/>  {<br/>    val y = g0int2uint_int_uint(y)<br/>    val x = g0int2uint_int_uint(x)<br/>    val () = print_string(if (x land y)\u00a0!= 0 then \"  \" else \"* \")<br/>  }<br/>  val ((*flushed*)) = print_newline()<br/>}<br/>//<br/>} (* end of [main0] *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">6</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Triangle<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>Triangle<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>y<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Triangle(n) -&gt; string of dots and spaces of Sierpinski triangle</span><br/>   Static t<span class=\"sy0\">,</span> l                                  <span class=\"co1\">; put chars in a static string</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                                 <span class=\"co1\">; when called with one parameter</span><br/>      l <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                      <span class=\"co1\">; - compute location, string size</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>l<span class=\"sy0\">*</span>x<span class=\"sy0\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span>                  <span class=\"co1\">; - allocate memory filled with spaces</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%x%</span><br/>         <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span>t<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">*</span>l<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"char\"</span><span class=\"br0\">)</span>        <span class=\"co1\">; - new lines in the end of rows</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>                                   <span class=\"co1\">; at the bottom of recursion</span><br/>      <span class=\"kw1\">Return</span> t<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><span class=\"nu0\">46</span><span class=\"sy0\">,</span>t<span class=\"sy0\">,</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>l<span class=\"sy0\">,</span><span class=\"st0\">\"char\"</span><span class=\"br0\">)</span> <span class=\"co1\">; - write \".\" (better at proportional fonts)</span><br/>   u <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   Triangle<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>                            <span class=\"co1\">; draw smaller triangle here</span><br/>   Triangle<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>x<span class=\"sy0\">-</span>u<span class=\"sy0\">,</span>y<span class=\"sy0\">+</span>u<span class=\"br0\">)</span>                        <span class=\"co1\">; smaller triangle down-left</span><br/>   Triangle<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>x<span class=\"sy0\">+</span>u<span class=\"sy0\">,</span>y<span class=\"sy0\">+</span>u<span class=\"br0\">)</span>                        <span class=\"co1\">; smaller triangle down right</span><br/>   <span class=\"kw1\">Return</span> t<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 23, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># WST.AWK - Waclaw Sierpinski's triangle contributed by Dan Nielsen</span><br/><span class=\"co1\"># syntax: GAWK -f WST.AWK [-v X=anychar] iterations</span><br/><span class=\"co1\"># example: GAWK -f WST.AWK -v X=* 2</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0</span> <span class=\"co1\"># iterations</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> width = <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>    row = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"X,X X,X   X,X X X X\"</span>,A,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"co1\"># seed the array</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># build triangle</span><br/>      width = <span class=\"kw4\">length</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>row; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        str = A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        A<span class=\"br0\">[</span>j<span class=\"sy3\">+</span>row<span class=\"br0\">]</span> = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-*s\u00a0%-*s\"</span>,width,str,width,str<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      row <span class=\"sy3\">*</span>= <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>row; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># print triangle</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>X <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>X<span class=\"sy3\">/</span>,<span class=\"kw4\">substr</span><span class=\"br0\">(</span>X,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"sy3\">+</span>$<span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*s%s<span class=\"es0\">\\n</span>\"</span>,width<span class=\"sy3\">-</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span>,<span class=\"st0\">\"\"</span>,A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASH (feat. sed & tr)", "loc": 25, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"co0\"># Basic principle:</span><br/><span class=\"co0\"># </span><br/><span class=\"co0\">#</span><br/><span class=\"co0\">#  x -&gt;  dxd       d -&gt; dd      s -&gt; s</span><br/><span class=\"co0\">#        xsx            dd           s</span><br/><span class=\"co0\">#</span><br/><span class=\"co0\"># In the end all 'd' and 's' are removed.</span><br/><span class=\"co0\"># 0x7F800000</span><br/><span class=\"kw1\">function</span> rec<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"re4\">$1</span> == <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">then</span> <br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"x\"</span><br/>  <span class=\"kw1\">else</span><br/>    rec $<span class=\"br0\">[</span> <span class=\"re4\">$1</span> - <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> line\u00a0; <span class=\"kw1\">do</span> <br/>      <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$line</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st0\">\"s/d/dd/g\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st0\">\"s/x/dxd/g\"</span><br/>      <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$line</span>\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st0\">\"s/d/dd/g\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st0\">\"s/x/xsx/g\"</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>rec <span class=\"re4\">$1</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st_h\">'dsx'</span> <span class=\"st_h\">'  *'</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 14, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> triangle <span class=\"br0\">(</span>x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> y <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> length <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/>triangle <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> triangle <span class=\"br0\">(</span>x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> y <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> length <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qcklocate.shtml\"><span class=\"kw3\">LOCATE</span></a> y<span class=\"sy0\">,</span> x: <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"*\"</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>        triangle x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> length<span class=\"sy0\">,</span> length <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        triangle x <span class=\"sy0\">+</span> length<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> length <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        triangle x <span class=\"sy0\">+</span> length <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> length<span class=\"sy0\">,</span> length <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      MODE 8<br/>      OFF<br/>\u00a0<br/>      order% = 5<br/>      PROCsierpinski(0, 0, 2^(order%-1))<br/>      REPEAT UNTIL GET<br/>      END<br/>\u00a0<br/>      DEF PROCsierpinski(x%, y%, l%)<br/>      IF l% = 0 THEN<br/>        PRINT TAB(x%,y%) \"*\";<br/>      ELSE<br/>        PROCsierpinski(x%, y%+l%, l% DIV 2)<br/>        PROCsierpinski(x%+l%, y%, l% DIV 2)<br/>        PROCsierpinski(x%+l%+l%, y%+l%, l% DIV 2)<br/>      ENDIF<br/>      ENDPROC</pre>"}, {"lang": "Befunge", "loc": 7, "block": "<pre class=\"text highlighted_source\">41+2&gt;\\#*1#2-#&lt;:#\\_$:1+v<br/>v:$_:#`0#\\\\#00#:p#-&gt;#1&lt;<br/>&gt;2/1\\0p:2/\\::&gt;1-:&gt;#v_1v<br/>&gt;8#4*#*+#+,#5^#5g0:&lt;  1<br/>vg11&lt;\\*g11!:g 0-1:::&lt;p&lt;<br/>&gt;!*+!!\\0g11p\\ 0p1-:#^_v<br/>@$$_\\#!:#::#-^#1\\$,+55&lt;</pre>"}, {"lang": "C", "loc": 13, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define SIZE (1 &lt;&lt; 4)</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> SIZE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y<span class=\"sy0\">--,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> y<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;</span> SIZE<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"* \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> SierpinskiTriangle <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> len<span class=\"sy0\">;</span><br/>        BitArray b<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> SierpinskiTriangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"Order must be greater than zero\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            len <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span>len<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b<span class=\"br0\">[</span>len<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> len <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}\"</span>, b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"*\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                NextGen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> NextGen<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BitArray next <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span>b<span class=\"sy0\">.</span><span class=\"me1\">Count</span>, <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    next<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                    next<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            b <span class=\"sy0\">=</span> next<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 35, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;list&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> OutIt<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> sierpinski<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, OutIt result<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> n <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"sy2\">*</span>result<span class=\"sy2\">++</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"*\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>        list<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> prev<span class=\"sy4\">;</span><br/>        sierpinski<span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span>, back_inserter<span class=\"br0\">(</span>prev<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        string sp<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        result <span class=\"sy1\">=</span> transform<span class=\"br0\">(</span>prev.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, prev.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>            result,<br/>            <span class=\"br0\">[</span>sp<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> string<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> sp <span class=\"sy2\">+</span> x <span class=\"sy2\">+</span> sp<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        transform<span class=\"br0\">(</span>prev.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, prev.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>            result,<br/>            <span class=\"br0\">[</span>sp<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> string<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x <span class=\"sy2\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy2\">+</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    sierpinski<span class=\"br0\">(</span><span class=\"nu0\">4</span>, ostream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> example<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>math\u00a0:<span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Length of integer in binary</span><br/><span class=\"co1\">; (copied from a private multimethod in clojure.contrib.math)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmulti</span> #<span class=\"sy0\">^</span><span class=\"br0\">{</span>:<span class=\"me1\">private</span> true<span class=\"br0\">}</span> integer<span class=\"sy0\">-</span>length class<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmethod</span> integer<span class=\"sy0\">-</span>length java<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>Integer <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>Integer<span class=\"sy0\">/</span>toBinaryString n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmethod</span> integer<span class=\"sy0\">-</span>length java<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>Long <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>toBinaryString n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmethod</span> integer<span class=\"sy0\">-</span>length java<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>BigInteger <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>toString n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sierpinski<span class=\"sy0\">-</span>triangle <span class=\"br0\">[</span>order<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>size <span class=\"br0\">(</span>math<span class=\"sy0\">/</span>expt <span class=\"nu0\">2</span> order<span class=\"br0\">)</span><br/>         v    <span class=\"br0\">(</span>math<span class=\"sy0\">/</span>expt <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> size <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">pos?</span> size<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>println<br/>       <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>test v <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>integer<span class=\"sy0\">-</span>length v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <br/>       <span class=\"br0\">(</span><span class=\"kw1\">dec</span> size<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>xor <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left v <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>right v <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>sierpinski<span class=\"sy0\">-</span>triangle <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 36, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> sierpinski-triangle-<span class=\"kw3\">program</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  sierpinski<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> n              <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> i              <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> k              <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> m              <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> c              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> i-<span class=\"kw3\">limit</span>        <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> q              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> r              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>control-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">4</span> <span class=\"kw2\">to</span> n<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">multiply</span> n <span class=\"kw3\">by</span> <span class=\"nu0\">4</span> <span class=\"kw2\">giving</span> i-<span class=\"kw3\">limit</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> i-<span class=\"kw3\">limit</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> sierpinski-paragraph<br/>    <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">0</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> i <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> i-<span class=\"kw3\">limit</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>sierpinski-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">subtract</span> i <span class=\"kw3\">from</span> i-<span class=\"kw3\">limit</span> <span class=\"kw2\">giving</span> m<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">multiply</span> m <span class=\"kw3\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">giving</span> m<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> m <span class=\"kw2\">times</span><span class=\"sy0\">,</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><span class=\"sy0\">,</span><br/>    end-<span class=\"kw2\">perform</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> c<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> inner-loop-paragraph<br/>    <span class=\"kw2\">varying</span> k <span class=\"kw3\">from</span> <span class=\"nu0\">0</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> k <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> i<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">''</span><span class=\"sy0\">.</span><br/>inner-loop-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">divide</span> c <span class=\"kw3\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">giving</span> q <span class=\"kw2\">remainder</span> r<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> r <span class=\"kw3\">is</span> <span class=\"kw3\">equal</span> <span class=\"kw2\">to</span> <span class=\"kw3\">zero</span> <span class=\"kw3\">then</span> <span class=\"kw2\">display</span> <span class=\"st0\">'  * '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> r <span class=\"kw3\">is</span> <span class=\"kw3\">not</span> <span class=\"kw3\">equal</span> <span class=\"kw2\">to</span> <span class=\"kw3\">zero</span> <span class=\"kw3\">then</span> <span class=\"kw2\">display</span> <span class=\"st0\">'    '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">compute</span> c <span class=\"sy0\">=</span> c<span class=\"sy0\"> * </span><span class=\"br0\">(</span>i<span class=\"sy0\"> - </span>k<span class=\"br0\">)</span><span class=\"sy0\"> / </span><span class=\"br0\">(</span>k<span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-sierpinski <span class=\"br0\">(</span>order<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with size <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> order<span class=\"br0\">)</span><br/>        repeat size<br/>        for v <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- size<span class=\"br0\">)</span><span class=\"br0\">)</span> then <span class=\"br0\">(</span><span class=\"kw1\">logxor</span> <span class=\"br0\">(</span>ash v -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ash v <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>fresh-line<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>loop for i below <span class=\"br0\">(</span>integer-<span class=\"kw1\">length</span> v<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">logbitp</span> i v<span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> level <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">level</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> sp <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        d <span class=\"sy0\">=</span> d.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> sp <span class=\"sy0\">~</span> a <span class=\"sy0\">~</span> sp<span class=\"br0\">)</span>.<span class=\"me1\">array</span> <span class=\"sy0\">~</span><br/>            d.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">~</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">~</span> a<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    d.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 26, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SierpinskiTriangle<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PrintSierpinski<span class=\"br0\">(</span>order<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> size<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  size <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> order<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> size <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"kw3\">StringOfChar</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size <span class=\"sy3\">-</span> y <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"kw1\">and</span> y<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'* '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Writeln<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  PrintSierpinski<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> PrintSierpinski<span class=\"br0\">(</span>order <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> size <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   size <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> order<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> y<span class=\"sy1\">:</span><span class=\"sy3\">=</span>size <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      Print<span class=\"br0\">(</span><span class=\"kw3\">StringOfChar</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> x<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size<span class=\"sy3\">-</span>y <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"kw1\">and</span> y<span class=\"br0\">)</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Print<span class=\"br0\">(</span><span class=\"st0\">'* '</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> Print<span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintSierpinski<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> printSierpinski<span class=\"br0\">(</span>order<span class=\"sy0\">,</span> out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> size <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>order<br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>size<span class=\"br0\">)</span>.<span class=\"me1\">descending</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"br0\">(</span>size<span class=\"sy0\">-</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span>.<span class=\"me1\">isZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">pick</span><span class=\"br0\">(</span><span class=\"st0\">\"* \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def sierpinski_triangle(n) do<br/>    f = fn(x) -&gt; IO.puts \"#{x}\" end<br/>    Enum.each(triangle(n, [\"*\"], \" \"), f)<br/>  end<br/>\u00a0<br/>  defp triangle(0, down, _), do: down<br/>  defp triangle(n, down, sp) do<br/>    newDown = (for x &lt;- down, do: sp&lt;&gt;x&lt;&gt;sp) ++ (for x &lt;- down, do: x&lt;&gt;\" \"&lt;&gt;x)<br/>    triangle(n-1, newDown, sp&lt;&gt;sp)<br/>  end<br/>end<br/>\u00a0<br/>RC.sierpinski_triangle(4)</pre>"}, {"lang": "Elm", "loc": 52, "block": "<pre class=\"text highlighted_source\">import String exposing (..)<br/>import Html exposing (..)<br/>import Html.Attributes as A exposing (..)<br/>import Html.Events exposing (..)<br/>import Html.App exposing (beginnerProgram)<br/>import Result exposing (..)<br/>\u00a0<br/>sierpinski\u00a0: Int -&gt; List String<br/>sierpinski n =<br/>  let down n = sierpinski (n - 1)<br/>      space n = repeat (2 ^ (n - 1)) \" \"<br/>  in case n of<br/>       0 -&gt; [\"*\"]<br/>       _ -&gt;    List.map ((\\st -&gt; space n ++ st) &lt;&lt; (\\st -&gt; st ++ space n)) (down n) <br/>            ++ List.map (join \" \" &lt;&lt; List.repeat 2) (down n)<br/>\u00a0<br/>main = beginnerProgram { model = \"4\", view = view, update = update }<br/>\u00a0<br/>update newStr oldStr = newStr<br/>\u00a0<br/>view\u00a0: String -&gt; Html String<br/>view levelString =<br/>  div []<br/>    ([ Html.form <br/>          [] <br/>          [ label [ myStyle ] [ text \"Level: \"]<br/>          , input<br/>            [ placeholder \"triangle level.\"<br/>            , value levelString<br/>            , on \"input\" targetValue <br/>            , type' \"number\"<br/>            , A.min \"0\"<br/>            , myStyle<br/>            ]<br/>            []<br/>          ]<br/>     ] ++ <br/>     [ pre [] (levelString <br/>               |&gt; toInt <br/>               |&gt; withDefault 0 <br/>               |&gt; sierpinski  <br/>               |&gt; List.map (\\s -&gt; div [] [text s]))<br/>     ])<br/>\u00a0<br/>myStyle\u00a0: Attribute msg<br/>myStyle =<br/>  style<br/>    [ (\"height\", \"20px\")<br/>    , (\"padding\", \"5px 0 0 5px\")<br/>    , (\"font-size\", \"1em\")<br/>    , (\"text-align\", \"left\")<br/>    ]</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>sierpinski<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>triangle<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">triangle</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">F</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re3\">triangle</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">triangle</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Down</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Down</span><span class=\"sy1\">;</span><br/><span class=\"re3\">triangle</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Down</span><span class=\"sy1\">,</span> <span class=\"re5\">Sp</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">NewDown</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Sp</span><span class=\"sy3\">++</span><span class=\"re5\">X</span><span class=\"sy3\">++</span><span class=\"re5\">Sp</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span><span class=\"sy3\">&lt;-</span><span class=\"re5\">Down</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy3\">++</span><span class=\"st0\">\" \"</span><span class=\"sy3\">++</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Down</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">triangle</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">NewDown</span><span class=\"sy1\">,</span> <span class=\"re5\">Sp</span><span class=\"sy3\">++</span><span class=\"re5\">Sp</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 12, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">procedure</span> triangle<span class=\"br0\">(</span><span class=\"kw2\">integer</span> x<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> y<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> len<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">position</span><span class=\"br0\">(</span>y<span class=\"sy2\">,</span>x<span class=\"br0\">)</span> <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        triangle <span class=\"br0\">(</span>x<span class=\"sy2\">,</span>       y<span class=\"sy1\">+</span>len<span class=\"sy2\">,</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>len<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        triangle <span class=\"br0\">(</span>x<span class=\"sy1\">+</span>len<span class=\"sy2\">,</span>   y<span class=\"sy2\">,</span>     <span class=\"kw2\">floor</span><span class=\"br0\">(</span>len<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        triangle <span class=\"br0\">(</span>x<span class=\"sy1\">+</span>len<span class=\"sy1\">*</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span> y<span class=\"sy1\">+</span>len<span class=\"sy2\">,</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>len<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">clear_screen</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>triangle<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">8</span><span class=\"sy2\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> sierpinski n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop down space n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      down<br/>    <span class=\"kw1\">else</span><br/>      loop <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> space <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> space<span class=\"br0\">)</span> down @<br/>              <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> down<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>space <span class=\"sy0\">+</span> space<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> loop <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span> n<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>i:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> System.<span class=\"me1\">Console</span>.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sierpinski <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">USING: io kernel math sequences\u00a0;<br/>IN: sierpinski<br/>\u00a0<br/>: iterate-triangle ( triange spaces -- triangle' )<br/>    [ [ dup surround ] curry map ]<br/>    [ drop [ dup \" \" glue ] map ] 2bi append\u00a0;<br/>\u00a0<br/>: (sierpinski) ( triangle spaces n -- triangle' )<br/>    dup 0 = [ 2drop \"\\n\" join ] [<br/>        [<br/>            [ iterate-triangle ]<br/>            [ nip dup append ] 2bi<br/>        ] dip 1 - (sierpinski)<br/>    ] if\u00a0;<br/>\u00a0<br/>: sierpinski ( n -- )<br/>    [ { \"*\" } \" \" ] dip (sierpinski) print\u00a0;</pre>"}, {"lang": "FALSE", "loc": 6, "block": "<pre class=\"text highlighted_source\">[[$][$1&amp;[\"*\"]?$~1&amp;[\" \"]?2/]#%\"<br/>\"]s:                 { stars }<br/>[<a class=\"__cf_email__\" data-cfemail=\"486c08\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"96b2d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>|@@&amp;~&amp;]x:        { xor }<br/>[1\\[$][1-\\2*\\]#%]e:   { 2^n }<br/>[e;!1\\[$][\\$s;!$2*x;!\\1-]#%%]t:<br/>4t;!</pre>"}, {"lang": "Forth", "loc": 14, "block": "<pre class=\"text highlighted_source\">: stars ( mask -- )<br/>  begin<br/>    dup 1 and if [char] * else bl then emit<br/>    1 rshift  dup<br/>  while space repeat drop\u00a0;<br/>\u00a0<br/>: triangle ( order -- )<br/>  1 swap lshift   ( 2^order )<br/>  1 over 0 do<br/>    cr  over i - spaces  dup stars<br/>    dup 2* xor<br/>  loop 2drop\u00a0;<br/>\u00a0<br/>5 triangle</pre>"}, {"lang": "Fortran", "loc": 29, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Sierpinski_triangle<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> Triangle<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i64</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, k<br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, n<span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"kw4\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"nu0\">4</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, i<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>c, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"    \"</span><br/>      <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"  * \"</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> k<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> Triangle<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Sierpinski_triangle</pre>"}, {"lang": "GAP", "loc": 38, "block": "<pre class=\"text highlighted_source\"># Using parity of binomial coefficients<br/>SierpinskiTriangle\u00a0:= function(n)<br/>\tlocal i, j, s, b;<br/>\tn\u00a0:= 2^n - 1;<br/>\tb\u00a0:= \" \";<br/>\twhile Size(b) &lt; n do<br/>\t\tb\u00a0:= Concatenation(b, b);<br/>\tod;<br/>\tfor i in [0 .. n] do<br/>\t\ts\u00a0:= \"\";<br/>\t\tfor j in [0 .. i] do<br/>\t\t\tif IsEvenInt(Binomial(i, j)) then<br/>\t\t\t\tAppend(s, \"  \");<br/>\t\t\telse<br/>\t\t\t\tAppend(s, \"* \");<br/>\t\t\tfi;<br/>\t\tod;<br/>\t\tPrint(b{[1 .. n - i]}, s, \"\\n\");<br/>\tod;<br/>end;<br/>\u00a0<br/>SierpinskiTriangle(4);<br/>               * <br/>              * * <br/>             *   * <br/>            * * * * <br/>           *       * <br/>          * *     * * <br/>         *   *   *   * <br/>        * * * * * * * * <br/>       *               * <br/>      * *             * * <br/>     *   *           *   * <br/>    * * * *         * * * * <br/>   *       *       *       * <br/>  * *     * *     * *     * * <br/> *   *   *   *   *   *   *   * <br/>* * * * * * * * * * * * * * * * </pre>"}, {"lang": "gnuplot", "loc": 16, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"co1\"># Return a string space or star to print at x,y.</span><br/><span class=\"co1\"># Must have x&lt;y.  x&lt;0 is the left side of the triangle.</span><br/><span class=\"co1\"># If x&lt;-y then it's before the left edge and the return is a space.</span><br/>char<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"sy0\">+</span>x<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"sy0\">+</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"sy0\">+</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\"*\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Return a string which is row y of the triangle from character</span><br/><span class=\"co1\"># position x through to the right hand end x==y, inclusive.</span><br/>row<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">&lt;=</span><span class=\"kw5\">y</span>\u00a0? char<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>row<span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Return a string of stars, spaces and newlines which is the</span><br/><span class=\"co1\"># Sierpinski triangle from row y to limit, inclusive.</span><br/><span class=\"co1\"># The first row is y=0.</span><br/>triangle<span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"sy0\">,</span>limit<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw5\">y</span> <span class=\"sy0\">&lt;=</span> limit\u00a0? row<span class=\"br0\">(</span><span class=\"sy0\">-</span>limit<span class=\"sy0\">,</span><span class=\"kw5\">y</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>triangle<span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>limit<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Print rows 0 to 15, which is the order 4 triangle per the task.</span><br/><span class=\"kw1\">print</span> triangle<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 26, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/>    <span class=\"st0\">\"unicode/utf8\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> order <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/><span class=\"kw1\">var</span> grain <span class=\"sy2\">=</span> <span class=\"st0\">\"*\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    t <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>grain <span class=\"sy3\">+</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> utf8<span class=\"sy3\">.</span>RuneCountInString<span class=\"sy1\">(</span>grain<span class=\"sy1\">))}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> order &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> order<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        sp <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> utf8<span class=\"sy3\">.</span>RuneCountInString<span class=\"sy1\">(</span>t<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        top <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> t <span class=\"sy1\">{</span><br/>            top<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> sp <span class=\"sy3\">+</span> s <span class=\"sy3\">+</span> sp<br/>            t<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> s<br/>        <span class=\"sy1\">}</span><br/>        t <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>top<span class=\"sy1\">,</span> t<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> t <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 16, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stPoints<span class=\"sy0\">;</span><br/>stPoints <span class=\"sy0\">=</span> <span class=\"br0\">{</span> order, base<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> right <span class=\"sy0\">=</span> <span class=\"br0\">[</span>base<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, base<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>order<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> up <span class=\"sy0\">=</span> <span class=\"br0\">[</span>base<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, base<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>order <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \\<br/>        <span class=\"sy0\">?</span> <span class=\"br0\">[</span>base<span class=\"br0\">]</span><br/>       \u00a0: <span class=\"br0\">(</span>stPoints<span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, base<span class=\"br0\">)</span> <span class=\"sy0\">+</span> stPoints<span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, right<span class=\"br0\">)</span> <span class=\"sy0\">+</span> stPoints<span class=\"br0\">(</span>order<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, up<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stGrid <span class=\"sy0\">=</span> <span class=\"br0\">{</span> order <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> h <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>order<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> w <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>order<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> grid <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>h<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>w<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"st0\">' '</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    stPoints<span class=\"br0\">(</span>order<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> grid<span class=\"br0\">[</span>it<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>it<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>order<span class=\"sy0\">%</span>10<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    grid<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">sierpinski <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><br/>sierpinski n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>space <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span> space<span class=\"br0\">)</span><span class=\"br0\">)</span> down <span class=\"sy0\">++</span><br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> replicate <span class=\"nu0\">2</span><span class=\"br0\">)</span> down<br/>    <span class=\"kw1\">where</span> down <span class=\"sy0\">=</span> sierpinski <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          space <span class=\"sy0\">=</span> replicate <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">' '</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> sierpinski <span class=\"nu0\">4</span></pre>"}, {"lang": "Haxe", "loc": 35, "block": "<pre class=\"text highlighted_source\">class Main <br/>{<br/>\tstatic function main() <br/>\t{<br/>\t\ttriangle(3);<br/>\t}<br/>\u00a0<br/>\tstatic inline var SPACE = ' ';<br/>\tstatic inline var STAR = '*';<br/>\u00a0<br/>\tstatic function triangle(o) {<br/>\t\tvar n = 1 &lt;&lt; o;<br/>\t\tvar line = new Array&lt;String&gt;();<br/>\u00a0<br/>\t\tfor (i in 0...(n*2)) line[i] = SPACE;<br/>\u00a0<br/>\t\tline[n] = '*';<br/>\u00a0<br/>\t\tfor (i in 0...n) {<br/>\t\t\tSys.println(line.join(''));<br/>\t\t\tvar u ='*';<br/>\t\t\tvar start = n - i;<br/>\t\t\tvar end = n + i + 1;<br/>\t\t\tvar t = SPACE;<br/>\t\t\tfor (j in start...end) {<br/>\t\t\t\tt = (line[j-1] == line[j+1]\u00a0? SPACE\u00a0: STAR);<br/>\t\t\t\tline[j-1] = u;<br/>\t\t\t\tu = t;<br/>\t\t\t}<br/>\u00a0<br/>\t\t\tline[n+i] = t;<br/>\t\t\tline[n+i+1] = STAR;<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"co1\"># text based adaptaion of </span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>\u00a0<br/>   width <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">^</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>order <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># order of arg[1] or 4</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Triangle order= \"</span><span class=\"sy1\">,</span>order<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>canvas <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>width<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>      <span class=\"co1\"># prime the canvas</span><br/>   <span class=\"kw1\">every</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"sy1\">&amp;</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"kw1\">do</span>             <span class=\"co1\"># traverse it</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>x <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> y <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> canvas<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"*\"</span>   <span class=\"co1\"># fill</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"sy1\">&amp;</span> y <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> width <span class=\"kw1\">do</span><br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"br0\">(</span>y<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span>canvas<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>               <span class=\"co1\"># print</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 8, "block": "<pre class=\"idl highlighted_source\">pro sierp,n<br/>  s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t <span class=\"sy0\">=</span> bytarr<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>32b<span class=\"br0\">)</span><br/>  t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">^</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 42b  <br/>  for lines <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"sy0\">^</span>n do begin<br/>        print,<span class=\"kw4\">string</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> t<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        for i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n_elements<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> do if s<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> eq s<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> then t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>32b else t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>42b<br/>  end<br/>end</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   |. <span class=\"nu0\">_31</span>]\\ ,<span class=\"sy0\">(</span>,.~ , ]<span class=\"sy0\">)</span>^:<span class=\"nu0\">4</span> ,: <span class=\"st_h\">'* '</span></pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> triangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        n<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> n<span class=\"sy0\">;</span><br/>        StringBuilder line<span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//use a \"mutable String\"</span><br/>        <span class=\"kw4\">char</span> t<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> u<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// avoid warnings</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;++</span>i<span class=\"br0\">)</span><br/>                line.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//start empty</span><br/>        line.<span class=\"me1\">setCharAt</span><span class=\"br0\">(</span>n, <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//with the top point of the triangle</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;++</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                u<span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span>j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;++</span>j<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        t<span class=\"sy0\">=</span> <span class=\"br0\">(</span>line.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> line.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        line.<span class=\"me1\">setCharAt</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        u<span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                line.<span class=\"me1\">setCharAt</span><span class=\"br0\">(</span>n <span class=\"sy0\">+</span> i, t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                line.<span class=\"me1\">setCharAt</span><span class=\"br0\">(</span>n <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaFX Script", "loc": 14, "block": "<pre class=\"text highlighted_source\">function sierpinski(n\u00a0: Integer) {<br/>  var down = [\"*\"];<br/>  var space = \" \";<br/>  for (i in [1..n]) {<br/>    down = [for (x in down) \"{space}{x}{space}\", for (x in down) \"{x} {x}\"];<br/>    space = \"{space}{space}\";<br/>  }<br/>\u00a0<br/>  for (x in down) {<br/>    println(\"{x}\")<br/>  }<br/>}<br/>\u00a0<br/>sierpinski(4);</pre>"}, {"lang": "JavaScript", "loc": 59, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// Sierpinski triangle of order N constructed as</span><br/>    <span class=\"co1\">// Pascal triangle of 2^N rows mod 2</span><br/>    <span class=\"co1\">// with 1 encoded as \"\u25b2\"</span><br/>    <span class=\"co1\">// and 0 encoded as \" \"</span><br/>    <span class=\"kw1\">function</span> sierpinski<span class=\"br0\">(</span>intOrder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> asciiPascalMod2<span class=\"br0\">(</span>intRows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> intRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">var</span> lstPrevRow <span class=\"sy0\">=</span> lstRows.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"co1\">// Each new row is a function of the previous row</span><br/>                    <span class=\"kw1\">return</span> lstRows.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>zipWith<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"co1\">// The composition ( asciiBinary . mod 2 . add )</span><br/>                        <span class=\"co1\">// reduces to a rule from 2 parent characters</span><br/>                        <span class=\"co1\">// to a single child character</span><br/>\u00a0<br/>                        <span class=\"co1\">// Rule 90 also reduces to the same XOR </span><br/>                        <span class=\"co1\">// relationship between left and right neighbours  </span><br/>\u00a0<br/>                        <span class=\"kw1\">return</span> left <span class=\"sy0\">===</span> right <span class=\"sy0\">?</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\u25b2\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">' '</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>lstPrevRow<span class=\"br0\">)</span><span class=\"sy0\">,</span> lstPrevRow.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>                    <span class=\"br0\">[</span><span class=\"st0\">\"\u25b2\"</span><span class=\"br0\">]</span> <span class=\"co1\">// Tip of triangle</span><br/>                <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> intOrder<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// As centred lines, from bottom (0 indent) up (indent below + 1)</span><br/>        .<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>sofar<span class=\"sy0\">,</span> lstLine<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                triangle<span class=\"sy0\">:</span> sofar.<span class=\"me1\">indent</span> <span class=\"sy0\">+</span> lstLine.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span><br/>                    sofar.<span class=\"me1\">triangle</span><span class=\"sy0\">,</span><br/>                indent<span class=\"sy0\">:</span> sofar.<span class=\"me1\">indent</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>            triangle<span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br/>            indent<span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">triangle</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> zipWith <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> ys.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs<br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        range <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST</span><br/>    <span class=\"kw1\">return</span> sierpinski<span class=\"br0\">(</span>order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">function sierpinski(n, token::AbstractString=\"*\")<br/>\tx = fill(token, 1, 1)<br/>\tfor _ in 1:n<br/>\t\th, w = size(x)<br/>\t\ts = fill(\" \", h,(w + 1) \u00f7 2)<br/>\t\tt = fill(\" \", h,1)<br/>\t\tx = [[s x s]\u00a0; [x t x]]<br/>\tend<br/>\treturn x<br/>end<br/>\u00a0<br/>function printsierpinski(m::Matrix)<br/>    for r in 1:size(m, 1)<br/>        println(join(m[r,\u00a0:]))<br/>    end<br/>end<br/>\u00a0<br/>sierpinski(4) |&gt; printsierpinski</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ORDER <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SIZE  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> shl ORDER<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in SIZE - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until y<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until SIZE - y<span class=\"br0\">)</span> print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x and y<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"  \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"* \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 15, "block": "<pre class=\"lb highlighted_source\">nOrder<span class=\"sy0\">=</span><span class=\"nu0\">4</span><br/><span class=\"kw1\">call</span> triangle <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nOrder<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> triangle x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">LOCATE</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"*\"</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>        n<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        length<span class=\"sy0\">=</span><span class=\"nu0\">2</span>^n<br/>        <span class=\"kw1\">call</span> triangle x<span class=\"sy0\">,</span> y<span class=\"sy0\">+</span>length<span class=\"sy0\">,</span> n<br/>        <span class=\"kw1\">call</span> triangle x<span class=\"sy0\">+</span>length<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<br/>        <span class=\"kw1\">call</span> triangle x<span class=\"sy0\">+</span>length<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> y<span class=\"sy0\">+</span>length<span class=\"sy0\">,</span> n<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "Logo", "loc": 14, "block": "<pre class=\"text highlighted_source\">; Print rows of the triangle from 0 to\u00a0:limit inclusive.<br/>; limit=15 gives the order 4 form per the task.<br/>; The range of\u00a0:y is arbitrary, any rows of the triangle can be printed.<br/>\u00a0<br/>make \"limit 15<br/>for [y 0\u00a0:limit] [<br/>  for [x -:limit\u00a0:y] [<br/>    type ifelse (and\u00a0:y+:x &gt;= 0               \u00a0; blank left of triangle<br/>                     (remainder\u00a0:y+:x 2) = 0  \u00a0; only \"even\" squares<br/>                     (bitand\u00a0:y+:x\u00a0:y-:x) = 0 \u00a0; Sierpinski bit test<br/>                ) [\"*] [\"| |]                 \u00a0; star or space<br/>  ]<br/>  print []<br/>]</pre>"}, {"lang": "Maple", "loc": 15, "block": "<pre class=\"text highlighted_source\">S\u00a0:= proc(n)<br/>    local i, j, values, position;<br/>    values\u00a0:= [ seq(\" \",i=1..2^n-1), \"*\" ];<br/>    printf(\"%s\\n\",cat(op(values)));<br/>    for i from 2 to 2^n do<br/>        position\u00a0:= [ ListTools:-SearchAll( \"*\", values ) ];<br/>        values\u00a0:= Array([ seq(0, i=1..2^n+i-1) ]);<br/>        for j to numelems(position) do<br/>            values[position[j]-1]\u00a0:= values[position[j]-1] + 1;<br/>            values[position[j]+1]\u00a0:= values[position[j]+1] + 1;<br/>        end do;<br/>        values\u00a0:= subs( { 2 = \" \", 0 = \" \", 1 = \"*\"}, values );  <br/>        printf(\"%s\\n\",cat(op(convert(values, list))));<br/>    end do:<br/>end proc:</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">n=4;Grid[CellularAutomaton[90,{{1},0},2^n-1]/.{0-&gt;\" \",1-&gt;\"*\"},ItemSize-&gt;All]</pre>"}, {"lang": "MATLAB", "loc": 8, "block": "<pre class=\"matlab highlighted_source\">n = <span class=\"nu0\">4</span>;<br/>d = string<span class=\"br0\">(</span><span class=\"co2\">'*'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">for</span> k = <span class=\"nu0\">0</span>\u00a0: n - <span class=\"nu0\">1</span><br/>  sp = repelem<span class=\"br0\">(</span><span class=\"co2\">' '</span>, <span class=\"nu0\">2</span> ^ k<span class=\"br0\">)</span>;<br/>  d = <span class=\"br0\">[</span>sp + d + sp, d + <span class=\"co2\">' '</span> + d<span class=\"br0\">]</span>;<br/><span class=\"kw1\">end</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>d.<span class=\"me1\">join</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 40, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">1000</span><br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  BLACK_UPPOINTING_TRIANGLE = <span class=\"st0\">'\\u25b2'</span><br/>  <span class=\"kw1\">parse</span> arg ordr filr .<br/>  <span class=\"kw1\">if</span> ordr = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> ordr = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> ordr = <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">if</span> filr = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> filr = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> filler = BLACK_UPPOINTING_TRIANGLE<br/>  <span class=\"kw3\">else</span>                           filler = filr<br/>  drawSierpinskiTriangle<span class=\"br0\">(</span>ordr, filler<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method drawSierpinskiTriangle<span class=\"br0\">(</span>ordr, filler = Rexx <span class=\"st0\">'^'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  n = <span class=\"nu0\">1</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">**</span> ordr<span class=\"br0\">)</span><br/>  line = <span class=\"st0\">' '</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/>  line = line.<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>filler, n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- set the top point of the triangle</span><br/>  <span class=\"kw1\">loop</span> row = <span class=\"nu0\">1</span> to n <span class=\"co1\">-- NetRexx arrays, lists etc. index from 1</span><br/>    <span class=\"kw1\">say</span> line.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"st0\">'t'</span><span class=\"br0\">)</span><br/>    u = filler<br/>    <span class=\"kw1\">loop</span> col = <span class=\"nu0\">2</span> + n - row to n + row<br/>      cl = line.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>col - <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      cr = line.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>col + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> cl == cr <span class=\"kw3\">then</span> t = <span class=\"st0\">' '</span><br/>      <span class=\"kw3\">else</span>             t = filler<br/>      line = line.<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>u, col - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      u = t<br/>      <span class=\"kw3\">end</span> col<br/>      j2 = n + row - <span class=\"nu0\">1</span><br/>      j3 = n + row<br/>      line = line.<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>t, j2 + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      line = line.<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>filler, j3 + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> row<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 11, "block": "<pre class=\"text highlighted_source\">const size = 1 shl 4 - 1<br/>\u00a0<br/>for y in countdown(size, 0):<br/>  for i in 0 .. &lt;y:<br/>    stdout.write \" \"<br/>  for x in 0 .. size-y:<br/>    if (x and y)\u00a0!= 0:<br/>      stdout.write \"  \"<br/>    else:<br/>      stdout.write \"* \"<br/>  stdout.write \"\\n\"</pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sierpinski n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop down space n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      down<br/>    <span class=\"kw1\">else</span><br/>      loop <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> space <span class=\"sy0\">^</span> x <span class=\"sy0\">^</span> space<span class=\"br0\">)</span> down @<br/>              <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">^</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">^</span> x<span class=\"br0\">)</span> down<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>space <span class=\"sy0\">^</span> space<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> loop <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span> n<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>sierpinski <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 16, "block": "<pre class=\"text highlighted_source\">: nextGen(l, r)<br/>| i |<br/>   StringBuffer new<br/>   l size loop: i [<br/>      l at(i 1 -) '*' == 4 *<br/>      l at(i)     '*' == 2 * +<br/>      l at(i 1 +) '*' == +<br/>      2 swap pow r bitAnd ifTrue: [ '*' ] else: [ ' ' ] over addChar<br/>      ]\u00a0;<br/>\u00a0<br/>: automat(rule, n)<br/>   StringBuffer new \" \" &lt;&lt;n(n) \"*\" over + +<br/>   #[ dup println rule nextGen ] times(n) drop\u00a0;<br/>\u00a0<br/>: sierpinskiTriangle(n) <br/>   90 4 n * automat\u00a0;</pre>"}, {"lang": "Oz", "loc": 19, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NextTriangle</span> Triangle<span class=\"br0\">}</span><br/>     Sp = <span class=\"br0\">{</span>Spaces <span class=\"br0\">{</span>Length Triangle<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>   <span class=\"br0\">{</span>Flatten<br/>      <span class=\"br0\">[</span><span class=\"br0\">{</span>Map Triangle <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span> Sp<span class=\"sy0\">#</span>X<span class=\"sy0\">#</span>Sp <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>       <span class=\"br0\">{</span>Map Triangle <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span> X<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"sy0\">#</span>X <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Spaces</span> N<span class=\"br0\">}</span> <span class=\"kw1\">if</span> N <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> nil <span class=\"kw1\">else</span> <span class=\"re3\">&amp; </span><span class=\"sy0\">|</span><span class=\"br0\">{</span>Spaces N<span class=\"sy0\">-</span>1<span class=\"br0\">}</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Iterate</span> F X<span class=\"br0\">}</span><br/>     X<span class=\"sy0\">|</span><span class=\"br0\">{</span>Iterate F <span class=\"br0\">{</span>F X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  SierpinskiTriangles = <span class=\"br0\">{</span>Iterate NextTriangle <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Nth SierpinskiTriangles 5<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"parigp highlighted_source\">Sierpinski<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>s<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>y<span class=\"sy0\">=</span>s<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>s<span class=\"sy0\">-</span>y<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">bitand</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Sierpinski<span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 18, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Sierpinski<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ipow<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> n\t<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span> <br/>   ipow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      ipow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ipow <span class=\"sy3\">*</span> b<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> truth<span class=\"br0\">(</span>a <span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> a <span class=\"sy3\">=</span> <span class=\"st0\">'*'</span> <span class=\"kw1\">then</span><br/>      truth <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>   <span class=\"kw1\">else</span><br/>      truth <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> sierpinski <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@down</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'*'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$space</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@down</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"$space$_$space\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@down</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"$_ $_\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@down</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$space</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$space$space\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@down</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">foreach</span> sierpinski <span class=\"nu0\">4</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> sierpinski <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@down</span>  <span class=\"sy0\">=</span> <span class=\"st_h\">'*'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$space</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@down</span> <span class=\"sy0\">=</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"st0\">\"$space$_$space\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">@down</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"st0\">\"$_ $_\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">@down</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$space</span> <span class=\"kw1\">x</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@down</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> sierpinski <span class=\"nu0\">4</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 14, "block": "<pre class=\"text highlighted_source\">procedure sierpinski(integer n)<br/>integer lim = power(2,n)-1<br/>    for y=lim to 0 by -1 do<br/>        puts(1,repeat(' ',y))<br/>        for x=0 to lim-y do<br/>            puts(1,iff(and_bits(x,y)?\"  \":\"* \"))<br/>        end for<br/>        puts(1,\"\\n\")<br/>    end for<br/>end procedure<br/>\u00a0<br/>for i=1 to 5 do<br/>    sierpinski(i)<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de sierpinski (N)<br/>   (let (D '(\"*\")  S \" \")<br/>      (do N<br/>         (setq<br/>            D (conc<br/>               (mapcar '((X) (pack S X S)) D)<br/>               (mapcar '((X) (pack X \" \" X)) D) )<br/>            S (pack S S) ) )<br/>      D ) )<br/>\u00a0<br/>(mapc prinl (sierpinski 4))</pre>"}, {"lang": "PL/I", "loc": 49, "block": "<pre class=\"text highlighted_source\">sierpinski: procedure options (main); /* 2010-03-30 */<br/>   declare t (79,79) char (1);<br/>   declare (i, j, k) fixed binary;<br/>   declare (y, xs, ys, xll, xrr, ixrr, limit) fixed binary;<br/>\u00a0<br/>   t = ' ';<br/>   xs = 40; ys = 1;<br/>   /* Make initial triangle */<br/>   call make_triangle (xs, ys);<br/>   y = ys + 4;<br/>   xll = xs-4; xrr = xs+4;<br/>   do k = 1 to 3;<br/>      limit = 0;<br/>      do forever;<br/>         ixrr = xrr;<br/>         do i = xll to xll+limit by 8;<br/>            if t(y-1, i) = ' ' then<br/>               do;<br/>                  call make_triangle (i, y);<br/>                  if t(y+3,i-5) = '*' then<br/>                     t(y+3,i-4), t(y+3,ixrr+4) = '*';<br/>                  call make_triangle (ixrr, y);<br/>               end;<br/>            ixrr = ixrr - 8;<br/>         end;<br/>         xll = xll - 4; xrr = xrr + 4;<br/>         y = y + 4;<br/>         limit = limit + 8;<br/>         if xll+limit &gt; xs-1 then leave;<br/>      end;<br/>      t(y-1,xs) = '*';<br/>   end;<br/>\u00a0<br/>   /* Finished generation; now print the Sierpinski triangle. */<br/>   put edit (t) (skip, (hbound(t,2)) a);<br/>\u00a0<br/>make_triangle: procedure (x, y);<br/>   declare (x, y) fixed binary;<br/>   declare i fixed binary;<br/>\u00a0<br/>   do i = 0 to 3;<br/>      t(y+i, x-i), t(y+i, x+i) = '*';<br/>   end;<br/>   do i = x-2 to x+2;  /* The base of the triangle. */<br/>      t(y+3, i) = '*';<br/>   end;<br/>end make_triangle;<br/>\u00a0<br/>end sierpinski;</pre>"}, {"lang": "Pop11", "loc": 21, "block": "<pre class=\"text highlighted_source\">define triangle(n);<br/>    lvars k = 2**n, j, l, oline, nline;<br/>    initv(2*k+3) -&gt; oline;<br/>    initv(2*k+3) -&gt; nline;<br/>    for l from 1 to 2*k+3 do 0 -&gt; oline(l)\u00a0; endfor;<br/>    1 -&gt; oline(k+2);<br/>    0 -&gt; nline(1);<br/>    0 -&gt; nline(2*k+3);<br/>    for j from 1 to k do<br/>        for l from 1 to 2*k+3 do<br/>            printf(if oline(l) = 0 then ' ' else '*' endif);<br/>        endfor;<br/>        printf('\\n');<br/>        for l from 2 to 2*k+2 do<br/>            (oline(l-1) + oline(l+1)) rem 2 -&gt; nline(l);<br/>        endfor;<br/>        (oline, nline) -&gt; (nline, oline);<br/>    endfor;<br/>enddefine;<br/>\u00a0<br/>triangle(4);</pre>"}, {"lang": "PostScript", "loc": 15, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox 0 0 300 300<br/>\u00a0<br/>/F { 1 0 rlineto } def<br/>/+ { 120 rotate } def<br/>/- {-120 rotate } def<br/>/v {.5 .5 scale } def<br/>/^ { 2  2 scale } def<br/>/!0{ dup 1 sub dup -1 eq not } def<br/>\u00a0<br/>/X {\u00a0!0 { v X + F - X - F + X ^ } { F } ifelse pop } def<br/>\u00a0<br/>0 1 8 { 300 300 scale 0 1 12 div moveto<br/>        X + F + F fill showpage         } for<br/>%%EOF</pre>"}, {"lang": "PowerShell", "loc": 21, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> triangle<span class=\"br0\">(</span><span class=\"re0\">$o</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$o</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$line</span> <span class=\"sy0\">=</span> <span class=\"sy0\">,</span><span class=\"st0\">' '</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'\u2588'</span><br/>    <a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Host</span> <span class=\"re0\">$line</span><br/>        <span class=\"re0\">$u</span> <span class=\"sy0\">=</span> <span class=\"st0\">'\u2588'</span><br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span>; <span class=\"re0\">$j</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>            <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"st0\">'\u2588'</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$u</span><br/>            <span class=\"re0\">$u</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><br/>        <span class=\"re0\">$line</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'\u2588'</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 41, "block": "<pre class=\"prolog highlighted_source\">sierpinski_triangle<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tLen <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span> <span class=\"sy3\">**</span> <span class=\"br0\">(</span>N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> LN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LN<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tatomic_list_concat<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tNbTours <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span><span class=\"sy3\">**</span>N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tloop<span class=\"br0\">(</span>NbTours<span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Cell<span class=\"sy4\">,</span> Num<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   Num <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span> <span class=\"sy3\">**</span> N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>  <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Cell <span class=\"sy6\">=</span> <span class=\"sy3\">*</span><span class=\"sy4\">;</span> Cell <span class=\"sy6\">=</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>loop<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>loop<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>compute_next_line<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tatomic_list_concat<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tloop<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> LN<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>compute_next_line<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tI1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tI2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   I <span class=\"sy6\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  V0 <span class=\"sy6\">=</span> <span class=\"st_h\">' '</span><span class=\"sy4\">;</span> nth1<span class=\"br0\">(</span>I1<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> V0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth1<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   I <span class=\"sy6\">=</span> Len <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> V2 <span class=\"sy6\">=</span> <span class=\"st_h\">' '</span><span class=\"sy4\">;</span> nth1<span class=\"br0\">(</span>I2<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> V2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\trule_90<span class=\"br0\">(</span>V0<span class=\"sy4\">,</span> V1<span class=\"sy4\">,</span> V2<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> <span class=\"st_h\">'*'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> <span class=\"st_h\">'*'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'*'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">'*'</span><span class=\"sy4\">,</span> <span class=\"st_h\">'*'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>rule_90<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Triangle <span class=\"br0\">(</span>X,Y, Length, N<span class=\"br0\">)</span><br/>   <span class=\"kw1\">If</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>      <span class=\"kw2\">DrawText</span><span class=\"br0\">(</span> Y,X, <span class=\"st0\">\"*\"</span>,#Blue<span class=\"br0\">)</span><br/>   <span class=\"kw1\">Else</span><br/>      Triangle <span class=\"br0\">(</span>X<span class=\"sy0\">+</span>Length,          Y, Length<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      Triangle <span class=\"br0\">(</span>X,   Y<span class=\"sy0\">+</span>Length,        Length<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      Triangle <span class=\"br0\">(</span>X<span class=\"sy0\">+</span>Length, Y<span class=\"sy0\">+</span>Length<span class=\"sy0\">*</span><span class=\"nu0\">2</span>, Length<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>,<span class=\"nu0\">700</span>,<span class=\"nu0\">500</span> ,<span class=\"st0\">\"Sierpinski triangle\"</span>,  #PB_Window_SystemMenu <span class=\"sy0\">|</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/><span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">WindowOutput</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">DrawingMode</span><span class=\"br0\">(</span>#PB_2DDrawing_Transparent <span class=\"br0\">)</span><br/>   Triangle<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">120</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/><span class=\"kw1\">Until</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>#PB_Event_CloseWindow<br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> sierpinski<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        sp <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span> * <span class=\"br0\">(</span><span class=\"nu0\">2</span> ** i<span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> <span class=\"br0\">[</span>sp+x+sp <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> d<span class=\"br0\">]</span> + <span class=\"br0\">[</span>x+<span class=\"st0\">\" \"</span>+x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> d<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> d<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>sierpinski<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\">sierpinski.triangle = function(n) {<br/>\tlen &lt;- 2^(n+1)<br/>\tb &lt;- c(rep(FALSE,len/2),TRUE,rep(FALSE,len/2))<br/>\tfor (i in 1:(len/2))<br/>\t{<br/>\t\tcat(paste(ifelse(b,\"*\",\" \"),collapse=\"\"),\"\\n\")<br/>\t\tn &lt;- rep(FALSE,len+1)<br/>\t\tn[which(b)-1]&lt;-TRUE<br/>\t\tn[which(b)+1]&lt;-xor(n[which(b)+1],TRUE)<br/>\t\tb &lt;- n<br/>\t}<br/>}<br/>sierpinski.triangle(5)</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (sierpinski n)<br/>  (if (zero? n)<br/>    '(\"*\")<br/>    (let ([spaces (make-string (expt 2 (sub1 n)) #\\space)]<br/>          [prev   (sierpinski (sub1 n))])<br/>      (append (map (\u03bb(x) (~a spaces x spaces)) prev)<br/>              (map (\u03bb(x) (~a x \" \" x)) prev)))))<br/>(for-each displayln (sierpinski 5))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program constructs and displays a  Sierpinski triangle of up to around order 10k.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n mark <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*get the order of Sierpinski triangle.*/</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span>   <span class=\"sy0\">|</span> n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">4</span>                    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> mark==<span class=\"st0\">''</span>          <span class=\"kw3\">then</span> mark=  <span class=\"st0\">\"*\"</span>             <span class=\"coMULTI\">/*MARK  was specified as  a character. */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>mark<span class=\"br0\">)</span>==<span class=\"nu0\">2</span>   <span class=\"kw3\">then</span> mark=<span class=\"kw6\">x2c</span><span class=\"br0\">(</span>mark<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*  \"    \"      \"     in  hexadecimal. */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>mark<span class=\"br0\">)</span>==<span class=\"nu0\">3</span>   <span class=\"kw3\">then</span> mark=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>mark<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*  \"    \"      \"      \"      decimal. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">12000</span>                             <span class=\"coMULTI\">/*this should handle the biggy numbers.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  the blood-'n-guts of the pgm.  */</span><br/>   <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> n<span class=\"sy0\">*</span><span class=\"nu0\">4</span>; \u00a0!=<span class=\"nu0\">1</span>;  z=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, n<span class=\"sy0\">*</span><span class=\"nu0\">4</span> -<span class=\"nu0\">1</span>-j<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*indent the line to be displayed.     */</span><br/>         <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> j+<span class=\"nu0\">1</span>                         <span class=\"coMULTI\">/*construct the line with  J+1  parts. */</span><br/>         <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> z=z<span class=\"st0\">'  '</span>                <span class=\"coMULTI\">/*it's either a    blank,   or    \u00b7\u00b7\u00b7  */</span><br/>                     <span class=\"kw3\">else</span> z=z mark               <span class=\"coMULTI\">/* \u00b7\u00b7\u00b7 it's one of 'em thar characters.*/</span><br/>        \u00a0!=! <span class=\"sy0\">*</span> <span class=\"br0\">(</span>j-k<span class=\"br0\">)</span>\u00a0% <span class=\"br0\">(</span>k+<span class=\"nu0\">1</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*calculate handy-dandy thing-a-ma-jig.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                             <span class=\"coMULTI\">/* [\u2191]  finished constructing a line.  */</span><br/>   <span class=\"kw1\">say</span> z                                         <span class=\"coMULTI\">/*display a line of the triangle.      */</span><br/>   <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span>                             <span class=\"coMULTI\">/* [\u2191]  finished showing triangle.     */</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Sierpinski triangle<br/>\u00a0<br/>norder=4<br/>xy = list(40)<br/>for i = 1 to 40<br/>    xy[i] = \"                               \"<br/>next <br/>triangle(1, 1, norder)<br/>for i = 1 to 36<br/>    see xy[i] + nl<br/>next <br/>\u00a0<br/>func triangle(x, y, n)<br/>     if n = 0<br/>        xy[y] = left(xy[y],x-1) + \"*\" + substr(xy[y],x+1)<br/>     else<br/>        n=n-1<br/>        length=pow(2,n)<br/>        triangle(x, y+length, n)<br/>        triangle(x+length, y, n)<br/>        triangle(x+length*2, y+length, n)<br/>     ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">ruby <span class=\"sy0\">-</span>le<span class=\"st0\">'16.times{|y|print\" \"*(15-y),*(0..y).map{|x|~y&amp;x&gt;0?\"  \":\" *\"}}'</span></pre>"}, {"lang": "Run BASIC", "loc": 22, "block": "<pre class=\"text highlighted_source\">nOrder=4<br/>dim xy$(40)<br/>for i = 1 to 40<br/>    xy$(i) = \"                               \"<br/>next i<br/>call triangle 1, 1, nOrder<br/>for i = 1 to 36<br/>    print xy$(i)<br/>next i<br/>end<br/>\u00a0<br/>SUB triangle x, y, n<br/>    IF n = 0 THEN<br/>        xy$(y) = left$(xy$(y),x-1) + \"*\" + mid$(xy$(y),x+1)<br/>    ELSE<br/>        n=n-1<br/>        length=2^n<br/>        call triangle x, y+length, n<br/>        call triangle x+length, y, n<br/>        call triangle x+length*2, y+length, n<br/>    END IF<br/>END SUB</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">scala -e <span class=\"st0\">\"for(y&lt;-0 to 15){println(<span class=\"es1\">\\\"</span> <span class=\"es1\">\\\"</span>*(15-y)++(0 to y).map(x=&gt;if((~y&amp;x)&gt;0)<span class=\"es1\">\\\"</span>  <span class=\"es1\">\\\"</span>else<span class=\"es1\">\\\"</span> *<span class=\"es1\">\\\"</span>)mkString)}\"</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sierpinski n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>acc <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> #\\<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>spaces <span class=\"br0\">(</span><span class=\"kw1\">list</span> #\\ <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>         acc<br/>         <span class=\"br0\">(</span>loop<br/>          <span class=\"br0\">(</span><span class=\"kw1\">append</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> spaces x spaces<span class=\"br0\">)</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> x <span class=\"br0\">(</span><span class=\"kw1\">list</span> #\\ <span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">append</span> spaces spaces<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 28, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array string: sierpinski (in integer: n) is func<br/>  result<br/>    var array string: parts is 1 times \"*\";<br/>  local<br/>    var integer: i is 0;<br/>    var string: space is \" \";<br/>    var array string: parts2 is 0 times \"\";<br/>    var string: x is \"\";<br/>  begin<br/>    for i range 1 to n do<br/>      parts2\u00a0:= 0 times \"\";<br/>      for x range parts do<br/>        parts2 &amp;:= [] (space &amp; x &amp; space);<br/>      end for;<br/>      for x range parts do<br/>        parts2 &amp;:= [] (x &amp; \" \" &amp; x);<br/>      end for;<br/>      parts\u00a0:= parts2;<br/>      space &amp;:= space;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(join(sierpinski(4), \"\\n\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func sierpinski_triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var triangle = <span class=\"br0\">[</span><span class=\"st0\">'*'</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        var sp = <span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>i<span class=\"br0\">)</span><br/>        triangle = <span class=\"br0\">(</span>triangle.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> sp <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> sp<span class=\"br0\">}</span> <span class=\"sy0\">+</span><br/>                    triangle.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">*</span> n<br/>    triangle.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say sierpinski_triangle<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Swift", "loc": 44, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>// Easy get/set of charAt<br/>extension String {<br/>    subscript(index:Int) -&gt; String {<br/>        get {<br/>            var array = Array(self)<br/>            var charAtIndex = array[index]<br/>            return String(charAtIndex)<br/>        }<br/>\u00a0<br/>        set(newValue) {<br/>            var asChar = Character(newValue)<br/>            var array = Array(self)<br/>            array[index] = asChar<br/>            self = String(array)<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>func triangle(var n:Int) {<br/>    n = 1 &lt;&lt; n<br/>    var line = \"\"<br/>    var t = \"\"<br/>    var u = \"\"<br/>\u00a0<br/>    for (var i = 0; i &lt;= 2 * n; i++) {<br/>        line += \" \"<br/>    }<br/>\u00a0<br/>    line[n] = \"*\"<br/>\u00a0<br/>    for (var i = 0; i &lt; n; i++) {<br/>        println(line)<br/>        u = \"*\"<br/>        for (var j = n - i; j &lt; n + i + 1; j++) {<br/>            t = line[j-1] == line[j + 1]\u00a0? \" \"\u00a0: \"*\"<br/>            line[j - 1] = u<br/>            u = t<br/>        }<br/>        line[n + i] = t<br/>        line[n + i + 1] = \"*\"<br/>    }<br/>}</pre>"}, {"lang": "Tcl", "loc": 23, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> map <span class=\"br0\">{</span>lambda <span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> elem <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$elem</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> sierpinski_triangle n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> down <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> space <span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> down <span class=\"br0\">[</span><span class=\"kw2\">concat</span> \\<br/>            <span class=\"br0\">[</span>map <span class=\"br0\">[</span><span class=\"kw2\">subst</span> -nocommands <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"st0\">\"$space[set x]$space\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$down</span><span class=\"br0\">]</span> \\<br/>            <span class=\"br0\">[</span>map <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"st0\">\"$x $x\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$down</span><span class=\"br0\">]</span> \\<br/>        <span class=\"br0\">]</span><br/>        <span class=\"kw2\">append</span> space <span class=\"re0\">$space</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$down</span> \\n<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>sierpinski_triangle <span class=\"nu0\">4</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 31, "block": "<pre class=\"text highlighted_source\">PROGRAM:SIRPNSKI<br/>:ClrHome<br/>:Output(1,8,\"^\")<br/>:{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}\u2192L1<br/>:{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}\u2192L2<br/>:L2\u2192L3<br/>:For(X,2,8,1)<br/>:For(Y,2,17,1)<br/>:If L1(Y-1)<br/>:Then<br/>:4\u2192N<br/>:End<br/>:If L1(Y)<br/>:Then<br/>:N+2\u2192N<br/>:End<br/>:If L1(Y+1)<br/>:Then<br/>:N+1\u2192N<br/>:End<br/>:If N=1 or N=3 or N=4 or N=6<br/>:Then<br/>:1\u2192L2(Y)<br/>:Output(X,Y-1,\"^\")<br/>:End<br/>:0\u2192N<br/>:End<br/>:L2\u2192L1<br/>:L3\u2192L2<br/>:End<br/>\u00a0</pre>"}, {"lang": "uBasic/4tH", "loc": 22, "block": "<pre class=\"text highlighted_source\">Input \"Triangle order: \";n<br/>n = 2^n<br/>\u00a0<br/>For y = n - 1 To 0 Step -1<br/>\u00a0<br/>  For i = 0 To y<br/>    Print \" \";<br/>  Next<br/>\u00a0<br/>  x = 0<br/>\u00a0<br/>  For x = 0 Step 1 While ((x + y) &lt; n)<br/>     If AND (x,y) Then<br/>        Print \"  \";<br/>     Else<br/>        Print \"* \";<br/>     EndIf<br/>  Next<br/>\u00a0<br/>  Print<br/>Next<br/>End</pre>"}, {"lang": "Unlambda", "loc": 5, "block": "<pre class=\"text highlighted_source\">```ci``s``s`ks``s`k`s``s`kc``s``s``si`kr`k. `k.*k<br/>`k``s``s``s``s`s`k`s``s`ksk`k``s``si`kk`k``s`kkk<br/>`k``s`k`s``si`kk``s`kk``s``s``s``si`kk`k`s`k`s``s`ksk`k`s`k`s`k`si``si`k`ki<br/>`k``s`k`s``si`k`ki``s`kk``s``s``s``si`kk`k`s`k`s`k`si`k`s`k`s``s`ksk``si`k`ki<br/>`k`ki``s`k`s`k`si``s`kkk</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>triangle = ~&amp;a^?\\&lt;&lt;&amp;&gt;&gt;! ^|RNSiDlrTSPxSxNiCK9xSx4NiCSplrTSPT/~&amp; predecessor</pre>"}, {"lang": "VBScript", "loc": 29, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> triangle(o)<br/>\tn = 2 ^ o<br/>\t<span class=\"kw4\">Dim</span> <span class=\"kw4\">line</span>()<br/>\t<span class=\"kw4\">ReDim</span> <span class=\"kw4\">line</span>(2*n)<br/>\t<span class=\"kw4\">line</span>(n) = <span class=\"st0\">\"*\"</span><br/>\ti = 0<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> i &lt; n<br/>\t\tWScript.StdOut.WriteLine Join(<span class=\"kw4\">line</span>,<span class=\"st0\">\"\"</span>)<br/>\t\tu = <span class=\"st0\">\"*\"</span><br/>\t\tj = n - i<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> j &lt; (n+i+1)<br/>\t\t\t<span class=\"kw3\">If</span> <span class=\"kw4\">line</span>(j-1) = <span class=\"kw4\">line</span>(j+1) <span class=\"kw3\">Then</span><br/>\t\t\t\tt = <span class=\"st0\">\" \"</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tt = <span class=\"st0\">\"*\"</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw4\">line</span>(j-1) = u<br/>\t\t\tu = t<br/>\t\t\tj = j + 1<br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\t<span class=\"kw4\">line</span>(n+i) = t<br/>\t\t<span class=\"kw4\">line</span>(n+i+1) = <span class=\"st0\">\"*\"</span><br/>\t\ti = i + 1<br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>triangle(4)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 18, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">16</span>    <span class=\"co1\">// size (height) of the triangle</span><br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">// Open a new buffer for output</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> #<span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// fill first line with spaces</span><br/>Ins_Newline<br/>Line<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// the top of triangle</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">10</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">10</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BOL Reg_Copy<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">// duplicate the line</span><br/>    #<span class=\"nu0\">20</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">11</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">3</span><span class=\"sy0\">-</span>#<span class=\"nu0\">10</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">+</span>#<span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Cur_Char<span class=\"sy0\">==</span>Cur_Char<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> #<span class=\"nu0\">21</span><span class=\"sy0\">=</span><span class=\"st0\">' '</span> <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> #<span class=\"nu0\">21</span><span class=\"sy0\">=</span><span class=\"st0\">'*'</span> <span class=\"br0\">}</span><br/>\tIns_Char<span class=\"br0\">(</span>#<span class=\"nu0\">20</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span><br/>\t#<span class=\"nu0\">20</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">21</span><br/>    <span class=\"br0\">}</span><br/>    Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">21</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span><br/>    Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "X86 Assembly", "loc": 28, "block": "<pre class=\"asm highlighted_source\">        <span class=\"sy1\">.</span>model  tiny<br/>        <span class=\"sy1\">.</span><span class=\"kw5\">code</span><br/>        <span class=\"nu0\">.486</span><br/>        org     <span class=\"nu0\">100h</span><br/><span class=\"kw5\">start</span><span class=\"sy1\">:</span>  <span class=\"kw1\">xor</span>     <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ebx</span>        <span class=\"co1\">;S1:= 0</span><br/>        <span class=\"kw1\">mov</span>     <span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"nu0\">8000h</span>      <span class=\"co1\">;S2:= $8000</span><br/>        <span class=\"kw1\">mov</span>     <span class=\"kw4\">cx</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span>          <span class=\"co1\">;for I:= Size downto 1</span><br/>tri10<span class=\"sy1\">:</span>  <span class=\"kw1\">mov</span>     <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">edx</span>        <span class=\"co1\">; S1:= S2</span><br/>tri15<span class=\"sy1\">:</span>  <span class=\"kw1\">test</span>    <span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"kw4\">edx</span>        <span class=\"co1\">; while S2#0</span><br/>        <span class=\"kw1\">je</span>      tri20<br/>         <span class=\"kw1\">mov</span>    <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"st0\">'*'</span>         <span class=\"co1\">; ChOut</span><br/>         <span class=\"kw1\">test</span>   <span class=\"kw4\">dl</span><span class=\"sy1\">,</span> <span class=\"nu0\">01h</span>         <span class=\"co1\">;  if S2&amp;1 then '*' else ' '</span><br/>         <span class=\"kw1\">jne</span>    tri18<br/>          <span class=\"kw1\">mov</span>   <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><br/>tri18<span class=\"sy1\">:</span>   <span class=\"kw1\">int</span>    <span class=\"nu0\">29h</span><br/>         <span class=\"kw1\">shr</span>    <span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>          <span class=\"co1\">; S2&gt;&gt;1</span><br/>         <span class=\"kw1\">jmp</span>    tri15<br/>tri20<span class=\"sy1\">:</span>  <span class=\"kw1\">mov</span>     <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"nu0\">0Dh</span>         <span class=\"co1\">;new line</span><br/>        <span class=\"kw1\">int</span>     <span class=\"nu0\">29h</span><br/>        <span class=\"kw1\">mov</span>     <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"nu0\">0Ah</span><br/>        <span class=\"kw1\">int</span>     <span class=\"nu0\">29h</span><br/>        <span class=\"kw1\">shl</span>     <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>          <span class=\"co1\">;S2:= S2 xor S1&lt;&lt;1</span><br/>        <span class=\"kw1\">xor</span>     <span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ebx</span><br/>        <span class=\"kw1\">shr</span>     <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span>          <span class=\"co1\">;S2:= S2 xor S1&gt;&gt;1</span><br/>        <span class=\"kw1\">xor</span>     <span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ebx</span><br/>        <span class=\"kw1\">loop</span>    tri10           <span class=\"co1\">;next I</span><br/>        <span class=\"kw1\">ret</span><br/>        end     <span class=\"kw5\">start</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9;<br/>def Order=4, Size=1&lt;&lt;Order;<br/>int S1, S2, I;<br/>[S1:= 0;  S2:= $8000;<br/>for I:= 0 to Size-1 do<br/>    [S1:= S2;<br/>    while S2 do<br/>        [ChOut(0, if S2&amp;1 then ^* else ^ );  S2:= S2&gt;&gt;1];<br/>    CrLf(0);<br/>    S2:= S2 xor S1&lt;&lt;1;<br/>    S2:= S2 xor S1&gt;&gt;1;<br/>    ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 26, "block": "<pre class=\"text highlighted_source\">sub rep$(n, c$)<br/>    local i, s$<br/>\u00a0<br/>    for i = 1 to n<br/>\ts$ = s$ + c$ <br/>    next<br/>    return s$<br/>end sub<br/>\u00a0<br/>sub sierpinski(n)<br/>    local lim, y, x<br/>\u00a0<br/>    lim = 2**n - 1<br/>    for y = lim to 0 step -1<br/>        print rep$(y, \" \");<br/>        for x = 0 to lim-y<br/>            if and(x, y) then print \"  \"; else print \"* \"; end if<br/>        next<br/>        print<br/>    next<br/>end sub<br/>\u00a0<br/>for i = 1 to 5<br/>    sierpinski(i)<br/>next<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">level,d\u00a0:= 3,T(\"*\");<br/>foreach n in (level + 1){<br/>   sp:=\" \"*(2).pow(n);<br/>   d=d.apply('wrap(a){ String(sp,a,sp) }).extend(<br/>     d.apply(fcn(a){ String(a,\" \",a) }));<br/>}<br/>d.concat(\"\\n\").println();</pre>"}]}