{"task": "Named_parameters", "blocks": [{"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">procedure</span> Foo <span class=\"br0\">(</span>Arg_1\u00a0: Integer; Arg_2\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 28, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> OPTNAME <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     OPTSPECIES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> species<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     OPTBREED <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> breed<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     OWNER<span class=\"sy1\">=</span><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> first name<span class=\"sy1\">,</span> middle name<span class=\"sy1\">,</span> last name<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># due to the Yoneda ambiguity simple arguments must have an unique operator defined #</span><br/><span class=\"kw4\">OP</span> NAME <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"br0\">)</span>OPTNAME<span class=\"sy1\">:</span> <span class=\"br0\">(</span>OPTNAME opt<span class=\"sy1\">;</span> name <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> name<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   SPECIES <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> species<span class=\"br0\">)</span>OPTSPECIES<span class=\"sy1\">:</span> <span class=\"br0\">(</span>OPTSPECIES opt<span class=\"sy1\">;</span> species <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> species<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   BREED <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> breed<span class=\"br0\">)</span>OPTBREED<span class=\"sy1\">:</span> <span class=\"br0\">(</span>OPTBREED opt<span class=\"sy1\">;</span> breed <span class=\"kw6\">OF</span> opt <span class=\"sy1\">:=</span> breed<span class=\"sy1\">;</span> opt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> pet <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw6\">UNION</span><span class=\"br0\">(</span>OPTNAME<span class=\"sy1\">,</span>OPTSPECIES<span class=\"sy1\">,</span>OPTBREED<span class=\"sy1\">,</span>OWNER<span class=\"br0\">)</span> option<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> name<span class=\"sy1\">:=</span><span class=\"st0\">\"Rex\"</span><span class=\"sy1\">,</span> species<span class=\"sy1\">:=</span><span class=\"st0\">\"Dinosaur\"</span><span class=\"sy1\">,</span> breed<span class=\"sy1\">:=</span><span class=\"st0\">\"Tyrannosaurus\"</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># Defaults #</span><br/>  OWNER owner <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"st0\">\"George\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"W.\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Bush\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> option <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">CASE</span> option<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span>OPTNAME option<span class=\"br0\">)</span><span class=\"sy1\">:</span> name <span class=\"sy1\">:=</span> name <span class=\"kw6\">OF</span> option<span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>OPTSPECIES option<span class=\"br0\">)</span><span class=\"sy1\">:</span> species <span class=\"sy1\">:=</span> species <span class=\"kw6\">OF</span> option<span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>OPTBREED option<span class=\"br0\">)</span><span class=\"sy1\">:</span> breed <span class=\"sy1\">:=</span> breed <span class=\"kw6\">OF</span> option<span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>OWNER option<span class=\"br0\">)</span><span class=\"sy1\">:</span> owner <span class=\"sy1\">:=</span> option<br/>    <span class=\"kw2\">ESAC</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gx$<span class=\"sy1\">,</span><span class=\"st0\">\"Details: a\"</span><span class=\"sy1\">,</span>breed<span class=\"sy1\">,</span>species<span class=\"sy1\">,</span><span class=\"st0\">\"named\"</span><span class=\"sy1\">,</span>name<span class=\"sy1\">,</span><span class=\"st0\">\"owned by\"</span><span class=\"sy1\">,</span>owner<span class=\"sy1\">,</span>$l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> pet<span class=\"br0\">(</span><span class=\"br0\">(</span>NAME <span class=\"st0\">\"Mike\"</span><span class=\"sy1\">,</span> SPECIES <span class=\"st0\">\"Dog\"</span><span class=\"sy1\">,</span> BREED <span class=\"st0\">\"Irish Setter\"</span><span class=\"sy1\">,</span> OWNER<span class=\"br0\">(</span><span class=\"st0\">\"Harry\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"S.\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Truman\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> pet<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 9, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> getName<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">set</span> <span class=\"br0\">{</span>firstName, lastName<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"st0\">\"?\"</span>, <span class=\"st0\">\"?\"</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">try</span><br/>\t\t<span class=\"kw3\">set</span> firstName <span class=\"kw3\">to</span> x<span class=\"co2\">'</span>s firstName<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>\t<span class=\"kw3\">try</span><br/>\t\t<span class=\"kw3\">set</span> lastName <span class=\"kw3\">to</span> x<span class=\"co2\">'</span>s lastName<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> getName</pre>"}, {"lang": "Applesoft BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\"> 100  IF LAST$ = \"\" THEN  PRINT \"?\";<br/> 110  IF LAST$ &lt;  &gt; \"\" THEN  PRINT LAST$;<br/> 120  IF FIRST$ &lt;  &gt; \"\" THEN  PRINT \", \"FIRST$;<br/> 200 FIRST$ = \"\"<br/> 210 LAST$ = \"\"<br/> 220  RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\">MyFunc<span class=\"br0\">(</span> <span class=\"st0\">\"Val=0, w=1024, Text=The Quick Brown Fox, newVar=I'm New\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>MyFunc<span class=\"br0\">(</span> _overrides<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> Static x<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> y<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> w<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> h<span class=\"sy0\">=</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> Count<br/> Name<span class=\"sy0\">:=</span><span class=\"st0\">\"AutoHotkey\"</span><span class=\"sy0\">,</span> Type<span class=\"sy0\">:=</span><span class=\"st0\">\"Scripting\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">:=</span><span class=\"st0\">\"qwerty\"</span><span class=\"sy0\">,</span> Val<span class=\"sy0\">:=</span>True<br/>\u00a0<br/> <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> _overrides<span class=\"sy0\">,</span>`<span class=\"sy0\">,=,</span> <span class=\"re0\">%A_Space%</span>  <span class=\"co1\">; Override routine for Local/Static variables</span><br/>   <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> \u00a0? <span class=\"br0\">(</span>_<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span><span class=\"re0\">%_%</span><span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/ListVars.htm\"><span class=\"kw3\">Listvars</span></a><br/> <a href=\"http://www.autohotkey.com/docs/commands/WinWaitClose.htm\"><span class=\"kw3\">WinWaitClose</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptFullPath%</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Bracmat", "loc": 20, "block": "<pre class=\"text highlighted_source\">( ( testproc<br/>  =   i x y z<br/>    .   out$\"Calling testproc\"<br/>      &amp; (=~):(=?i:?x:?y:?z)     { initialise variables to 'failure' }<br/>      &amp;  \u00a0!arg<br/>       \u00a0: (? (i,?i)\u00a0?|?)        { if \"i\" found, assign value to i. Otherwise just match with no side effect. }<br/>       \u00a0: (? (x,?x)\u00a0?|?)        { if \"x\" found, assign value to x. Otherwise just match with no side effect. }<br/>       \u00a0: (? (y,?y)\u00a0?|?)        { likewise }<br/>       \u00a0: (? (z,?z)\u00a0?|?)        { likewise }<br/>      &amp; (~!i|put$(\"   i:=\"\u00a0!i)) { if variable doesn't fail, show its value }<br/>      &amp; (~!x|put$(\"   x:=\"\u00a0!x))<br/>      &amp; (~!y|put$(\"   y:=\"\u00a0!y))<br/>      &amp; (~!z|put$(\"   z:=\"\u00a0!z))<br/>      &amp; put$\\n                  { add new line }<br/>  )<br/>&amp; testproc$((x,1) (y,2) (z,3))<br/>&amp; testproc$((x,3) (y,1) (z,2))<br/>&amp; testproc$((z,4) (x,2) (y,3))  { order is not important }<br/>&amp; testproc$((i,1) (y,2) (z,3))<br/>);</pre>"}, {"lang": "C", "loc": 48, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// 1. Named parameters</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"sy0\">;</span> <span class=\"br0\">}</span> FTest_args<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> FTest <span class=\"br0\">(</span>FTest_args args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"x:\u00a0%d, y:\u00a0%d, z:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> args.<span class=\"me1\">x</span><span class=\"sy0\">,</span> args.<span class=\"me1\">y</span><span class=\"sy0\">,</span> args.<span class=\"me1\">z</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define FT(...) FTest((FTest_args){ __VA_ARGS__ })</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// 2. Default parameters</span><br/>\u00a0<br/><span class=\"co2\">#define DFT(...) FTest((FTest_args){ .x = 142, .y = 143, .z = 144, __VA_ARGS__ })</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// 3. Convenience wrapper to avoid accessing args as \"args.name\"</span><br/>\u00a0<br/><span class=\"kw4\">void</span> FTest2 <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"x:\u00a0%d, y:\u00a0%d, z:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> FTest2_default_wrapper <span class=\"br0\">(</span>FTest_args args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> FTest2<span class=\"br0\">(</span>args.<span class=\"me1\">x</span><span class=\"sy0\">,</span> args.<span class=\"me1\">y</span><span class=\"sy0\">,</span> args.<span class=\"me1\">z</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define DF2(...) FTest2_default_wrapper((FTest_args){ .x = 142, .y = 143, .z = 144, __VA_ARGS__ })</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Named parameters</span><br/>\tFTest<span class=\"br0\">(</span><span class=\"br0\">(</span>FTest_args<span class=\"br0\">)</span><span class=\"br0\">{</span> .<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tFTest<span class=\"br0\">(</span><span class=\"br0\">(</span>FTest_args<span class=\"br0\">)</span><span class=\"br0\">{</span> .<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> .<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tFT<span class=\"br0\">(</span> .<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">47</span><span class=\"sy0\">,</span> .<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> .<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Default parameters</span><br/>\tDFT<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tDFT<span class=\"br0\">(</span> .<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">99</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Default parameters with wrapper</span><br/>\tDF2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tDF2<span class=\"br0\">(</span> .<span class=\"me1\">z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">99</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 27, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> foo_params<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">friend</span> <span class=\"kw4\">void</span> foo<span class=\"br0\">(</span>foo_params p<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    foo_params<span class=\"br0\">(</span><span class=\"kw4\">int</span> r<span class=\"br0\">)</span><span class=\"sy4\">:</span><br/>        required_param_<span class=\"br0\">(</span>r<span class=\"br0\">)</span>,<br/>\toptional_x_<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>\toptional_y_<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>\toptional_z_<span class=\"br0\">(</span><span class=\"nu16\">3.1415</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">}</span><br/>     foo_params<span class=\"sy3\">&amp;</span> x<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\toptional_x_<span class=\"sy1\">=</span>i<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     foo_params<span class=\"sy3\">&amp;</span> y<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\toptional_y_<span class=\"sy1\">=</span>i<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     foo_params<span class=\"sy3\">&amp;</span> z<span class=\"br0\">(</span><span class=\"kw4\">float</span> f<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\toptional_z_<span class=\"sy1\">=</span>f<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>        <span class=\"kw4\">int</span> \trequired_param_<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> \toptional_x_<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> \toptional_y_<span class=\"sy4\">;</span> <br/>\t<span class=\"kw4\">float</span> \toptional_z_<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> NamedParams<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> AddWidget<span class=\"br0\">(</span><span class=\"kw4\">string</span> parent, <span class=\"kw4\">float</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">float</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">string</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"Default\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"parent = {0}, x = {1}, y = {2}, text = {3}\"</span>, parent, x, y, text<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            AddWidget<span class=\"br0\">(</span><span class=\"st0\">\"root\"</span>, <span class=\"nu0\">320</span>, <span class=\"nu0\">240</span>, <span class=\"st0\">\"First\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            AddWidget<span class=\"br0\">(</span><span class=\"st0\">\"root\"</span>, text<span class=\"sy0\">:</span> <span class=\"st0\">\"Origin\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            AddWidget<span class=\"br0\">(</span><span class=\"st0\">\"root\"</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            AddWidget<span class=\"br0\">(</span><span class=\"st0\">\"root\"</span>, text<span class=\"sy0\">:</span> <span class=\"st0\">\"Footer\"</span>, y<span class=\"sy0\">:</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> foo <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> opts<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>opts <span class=\"br0\">(</span><span class=\"kw1\">merge</span> <span class=\"br0\">{</span>:<span class=\"me1\">bar</span> <span class=\"nu0\">1</span>\u00a0:<span class=\"me1\">baz</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">hash-map</span> opts<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span>:<span class=\"kw1\">keys</span> <span class=\"br0\">[</span>bar baz<span class=\"br0\">]</span><span class=\"br0\">}</span> opts<span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>bar baz<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-<span class=\"kw1\">name</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>key first <span class=\"br0\">(</span><span class=\"kw1\">last</span> <span class=\"st0\">\"?\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"kw1\">last</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> first<br/>    <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">princ</span> first<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elixir", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def fun(bar: bar, baz: baz), do: IO.puts \"#{bar}, #{baz}.\"<br/>\u00a0<br/>fun(bar: \"bar\", baz: \"baz\")<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"re5\">Fun</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span> <span class=\"re5\">Proplists</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Argument1</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/proplists.html\"><span class=\"kw5\">proplists</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span> argument1<span class=\"sy1\">,</span> <span class=\"re5\">Proplists</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Kalle</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/proplists.html\"><span class=\"kw5\">proplists</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">value</span><span class=\"br0\">(</span> kalle<span class=\"sy1\">,</span> <span class=\"re5\">Proplists</span><span class=\"sy1\">,</span> <span class=\"st0\">\"hobbe\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Argument1</span><span class=\"sy1\">,</span> <span class=\"re5\">Kalle</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 11, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> printName<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">=&gt;</span> first <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">=&gt;</span> last <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>last <span class=\"sy0\">==</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"?\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first <span class=\"sy0\">!=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>first<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:: my-named-params ( a b -- c ) a b *\u00a0;<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 21, "block": "<pre class=\"text highlighted_source\">256 buffer: first-name<br/>256 buffer: last-name<br/>: is ( a \"name\" -- )  parse-name rot place\u00a0;<br/>\u00a0<br/>: greet ( -- ) <br/>  cr .\" Hello, \" first-name count type space  last-name count type .\"\u00a0!\"\u00a0;<br/>\u00a0<br/>first-name is Bob  last-name is Hall  greet<br/>\u00a0<br/>\u00a0<br/>require mini-oof2.fs<br/>require string.fs<br/>object class <br/>  field: given-name<br/>  field: surname<br/>end-class Person<br/>\u00a0<br/>: hiya ( -- ) <br/>  cr .\" Hiya, \" given-name $. space surname $. .\"\u00a0!\"\u00a0;<br/>\u00a0<br/>Person new &gt;o s\" Bob\" given-name $!  s\" Hall\" surname $!  hiya o&gt;</pre>"}, {"lang": "Fortran", "loc": 5, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">subroutine</span> a_sub<span class=\"br0\">(</span>arg1, arg2, arg3<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">arg1</span>, arg2<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">arg3</span><br/>  <span class=\"co1\">! ...</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> a_sub</pre>"}, {"lang": "Go", "loc": 20, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>   <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> params <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"kw4\">int</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> myFunc<span class=\"sy1\">(</span>p params<span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy3\">.</span>x <span class=\"sy3\">+</span> p<span class=\"sy3\">.</span>y <span class=\"sy3\">+</span> p<span class=\"sy3\">.</span>z<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> myFunc<span class=\"sy1\">(</span>params<span class=\"sy1\">{</span>x<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> z<span class=\"sy1\">:</span> <span class=\"nu0\">3</span><span class=\"sy1\">})</span> <span class=\"co1\">// all fields, same order</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"r =\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>    s <span class=\"sy2\">:=</span> myFunc<span class=\"sy1\">(</span>params<span class=\"sy1\">{</span>z<span class=\"sy1\">:</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> x<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">})</span> <span class=\"co1\">// all fields, different order</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"s =\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>    t <span class=\"sy2\">:=</span> myFunc<span class=\"sy1\">(</span>params<span class=\"sy1\">{</span>y<span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">})</span>             <span class=\"co1\">// only one field, others set to zero</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"t =\"</span><span class=\"sy1\">,</span> t<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> X <span class=\"sy0\">=</span> X<br/><span class=\"kw1\">data</span> Y <span class=\"sy0\">=</span> Y<br/><span class=\"kw1\">data</span> Point <span class=\"sy0\">=</span> Point <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/>createPointAt <span class=\"sy0\">::</span> X <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Y <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Point<br/>createPointAt X x Y y <span class=\"sy0\">=</span> Point x y<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> createPointAt X <span class=\"nu0\">5</span> Y <span class=\"nu0\">3</span></pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   testproc<span class=\"br0\">(</span><span class=\"st0\">\"x:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"y:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">\"z:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   testproc<span class=\"br0\">(</span><span class=\"st0\">\"x:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">\"y:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"z:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   testproc<span class=\"br0\">(</span><span class=\"st0\">\"z:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">\"x:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">\"y:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   testproc<span class=\"br0\">(</span><span class=\"st0\">\"i:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">\"y:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"st0\">\"z:=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> testproc<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"co1\">#: demo to test named parameters</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Calling testproc\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">while</span> a <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span>               <span class=\"co1\"># implement named parameters here</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span> a <span class=\"sy1\">?</span> <span class=\"br0\">(</span>v <span class=\"sy1\">:=</span> <span class=\"sy1\">=!</span><span class=\"br0\">[</span><span class=\"st0\">\"x\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"y\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"z\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\":=\"</span><span class=\"br0\">)</span>  <span class=\"sy1\">|</span>   <span class=\"co1\">#  valid parameter name?</span><br/>         <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"No parameter \"</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span>             <span class=\"co1\">#  . . no</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">variable</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"sy1\">|</span>   <span class=\"co1\">#  assign</span><br/>               <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                  <span class=\"co1\">#  . . problem</span><br/>\u00a0<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   x:=\"</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   y:=\"</span><span class=\"sy1\">,</span>y<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   z:=\"</span><span class=\"sy1\">,</span>z<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 26, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB.  Strand notation</span><br/>myFunc[<span class=\"st_h\">'c:\\file.txt'</span>  <span class=\"nu0\">906</span>  <span class=\"st_h\">'blue'</span> fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Commas, like other langs</span><br/>myFunc[<span class=\"st_h\">'c:\\file.txt'</span>, <span class=\"nu0\">906</span>, <span class=\"st_h\">'blue'</span> fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Unspecified args are defaulted (\"optional\")</span><br/>myFunc[<span class=\"st_h\">'c:\\file.txt'</span> fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Can use named arguments, like eg VB</span><br/>myFunc[color=<span class=\"st_h\">'blue'</span>  fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Often values needn't be quoted</span><br/>myFunc[color= blue   fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Combination of comma syntax and name=value</span><br/>myFunc[max=<span class=\"nu0\">906</span>, color=blue fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Spelling of names is flexible</span><br/>myFunc[MAX=<span class=\"nu0\">906</span>, COLOR=blue fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Order of names is flexible</span><br/>myFunc[COLOR=blue, MAX=<span class=\"nu0\">906</span>  fs]<br/>\u00a0<br/><span class=\"co1\">NB.  Even the delimiters are flexible...</span><br/>myFunc&lt;MAX=<span class=\"nu0\">906</span>, COLOR=blue fs&gt;</pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\">processNutritionFacts<span class=\"br0\">(</span><span class=\"kw1\">new</span> NutritionFacts.<span class=\"me1\">Builder</span><span class=\"br0\">(</span><span class=\"nu0\">240</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>.<span class=\"me1\">calories</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">sodium</span><span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"br0\">)</span>.<span class=\"me1\">carbohydrate</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span>.<span class=\"me1\">build</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 12, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> example<span class=\"br0\">(</span>options<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// assign some defaults where the user's has not provided a value</span><br/>  opts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  opts.<span class=\"me1\">foo</span> <span class=\"sy0\">=</span> options.<span class=\"me1\">foo</span> <span class=\"sy0\">||</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  opts.<span class=\"me1\">bar</span> <span class=\"sy0\">=</span> options.<span class=\"me1\">bar</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  opts.<span class=\"me1\">grill</span> <span class=\"sy0\">=</span> options.<span class=\"me1\">grill</span> <span class=\"sy0\">||</span> <span class=\"st0\">'pork chops'</span><br/>\u00a0<br/>  alert<span class=\"br0\">(</span><span class=\"st0\">\"foo is \"</span> <span class=\"sy0\">+</span> opts.<span class=\"me1\">foo</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", bar is \"</span> <span class=\"sy0\">+</span> opts.<span class=\"me1\">bar</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", and grill is \"</span> <span class=\"sy0\">+</span> opts.<span class=\"me1\">grill</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>example<span class=\"br0\">(</span><span class=\"br0\">{</span>grill<span class=\"sy0\">:</span> <span class=\"st0\">\"lamb kebab\"</span><span class=\"sy0\">,</span> bar<span class=\"sy0\">:</span> <span class=\"nu0\">3.14</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// =&gt; \"foo is 0, bar is 3.14, and grill is lamb kebab\"</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def formatName(obj):<br/>  ({ \"name\": \"?\"} + obj) as $obj  # the default default value is null<br/>  | ($obj|.name) as $name<br/>  | ($obj|.first) as $first <br/>  | if ($first == null) then $name<br/>    else $name + \", \" + $first<br/>    end;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">function surround(string\u00a0; border =\u00a0:default, padding = 0)<br/>\u00a0<br/> ve, ho, ul, ur, dl, dr = <br/>   border ==\u00a0:round\u00a0? (\"\\u2502\",\"\\u2500\",\"\\u256d\",\"\\u256e\",\"\\u2570\",\"\\u256f\")\u00a0:<br/>   border ==\u00a0:bold \u00a0? (\"\\u2503\",\"\\u2501\",\"\\u250F\",\"\\u2513\",\"\\u2517\",\"\\u251b\")\u00a0:<br/>   border ==\u00a0:double? (\"\\u2551\",\"\\u2550\",\"\\u2554\",\"\\u2557\",\"\\u255a\",\"\\u255d\")\u00a0:<br/>   border ==\u00a0:dotted? (\"\\u254e\",\"\\u254c\",\"\\u250c\",\"\\u2510\",\"\\u2514\",\"\\u2518\")\u00a0:<br/>   border ==\u00a0:cross\u00a0? (\"\\u2502\",\"\\u2500\",\"\\u253c\",\"\\u253c\",\"\\u253c\",\"\\u253c\")\u00a0:<br/>                      (\"\\u2502\",\"\\u2500\",\"\\u250c\",\"\\u2510\",\"\\u2514\",\"\\u2518\") <br/>\u00a0<br/> println(ul, ho^(length(string) + 2padding),  ur, \"\\n\",<br/>         ve, \" \"^padding, string,\" \"^padding, ve, \"\\n\",<br/>         dl, ho^(length(string) + 2padding),  dr)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun someFunction<span class=\"br0\">(</span>first<span class=\"sy0\">:</span> String, second<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, third<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"First = ${first.padEnd(10)}, Second = $second, Third = $third\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// using positional parameters</span><br/>    someFunction<span class=\"br0\">(</span><span class=\"st0\">\"positional\"</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>    <br/>\u00a0<br/>    <span class=\"co1\">// using named parameters</span><br/>    someFunction<span class=\"br0\">(</span>first <span class=\"sy0\">=</span> <span class=\"st0\">\"named\"</span>, second <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, third <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// omitting 2nd parameter which is optional because it has a default value</span><br/>    someFunction<span class=\"br0\">(</span>first <span class=\"sy0\">=</span> <span class=\"st0\">\"omitted\"</span>, third <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// using first and third parameters in reverse</span><br/>    someFunction<span class=\"br0\">(</span>third <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span>, first <span class=\"sy0\">=</span> <span class=\"st0\">\"reversed\"</span><span class=\"br0\">)</span>   <br/><span class=\"br0\">}</span></pre>"}, {"lang": " LabVIEW", "loc": 16, "block": "<pre class=\"text highlighted_source\">define mymethod(<br/>\t-first::integer, // with no default value the param is required<br/>\t-second::integer,<br/>\t-delimiter::string = ':' // when given a default value the param becomes optional<br/>) =&gt; #first + #delimiter + #second<br/>\u00a0<br/>mymethod(<br/>\t-first = 54,<br/>\t-second = 45<br/>)<br/>'&lt;br /&gt;'<br/>mymethod(<br/>\t-second = 45, // named params can be given in any order<br/>\t-first = 54,<br/>\t-delimiter = '#'<br/>)</pre>"}, {"lang": "Lasso", "loc": 16, "block": "<pre class=\"text highlighted_source\">define mymethod(<br/>\t-first::integer, // with no default value the param is required<br/>\t-second::integer,<br/>\t-delimiter::string = ':' // when given a default value the param becomes optional<br/>) =&gt; #first + #delimiter + #second<br/>\u00a0<br/>mymethod(<br/>\t-first = 54,<br/>\t-second = 45<br/>)<br/>'&lt;br /&gt;'<br/>mymethod(<br/>\t-second = 45, // named params can be given in any order<br/>\t-first = 54,<br/>\t-delimiter = '#'<br/>)</pre>"}, {"lang": "Lingo", "loc": 22, "block": "<pre class=\"text highlighted_source\">-- accepts either 3 integers or a single property list<br/>on foo (arg1, arg2, arg3)<br/>  if ilk(arg1)=#propList then<br/>    args = arg1<br/>    arg1 = args[#arg1]<br/>    arg2 = args[#arg2]<br/>    arg3 = args[#arg3]<br/>  end if<br/>  put \"arg1=\"&amp;arg1<br/>  put \"arg2=\"&amp;arg2<br/>  put \"arg3=\"&amp;arg3<br/>end<br/>\u00a0<br/>foo(1,2) -- 3rd argument omitted<br/>-- \"arg1=1\"<br/>-- \"arg2=2\"<br/>-- \"arg3=\"<br/>\u00a0<br/>foo([#arg3:3]) -- only 3rd argument specified<br/>-- \"arg1=\"<br/>-- \"arg2=\"<br/>-- \"arg3=3\"</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> CreatePet<span class=\"br0\">(</span>options<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> name<span class=\"sy0\">=</span>options<span class=\"sy0\">.</span>name<br/>  <span class=\"kw1\">local</span> species<span class=\"sy0\">=</span>options<span class=\"sy0\">.</span>species<br/>  <span class=\"kw1\">local</span> breed<span class=\"sy0\">=</span>options<span class=\"sy0\">.</span>breed<br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Created a '</span><span class=\"sy0\">..</span>breed<span class=\"sy0\">..</span><span class=\"st0\">' '</span><span class=\"sy0\">..</span>species<span class=\"sy0\">..</span><span class=\"st0\">' named '</span><span class=\"sy0\">..</span>name<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>CreatePet<span class=\"br0\">{</span>name<span class=\"sy0\">=</span><span class=\"st0\">'Rex'</span><span class=\"sy0\">,</span>species<span class=\"sy0\">=</span><span class=\"st0\">'Dog'</span><span class=\"sy0\">,</span>breed<span class=\"sy0\">=</span><span class=\"st0\">'Irish Setter'</span><span class=\"br0\">}</span><br/><span class=\"co1\">--position does not matter here.</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module namedparam (x as decimal=10, y as integer=50) {<br/>      Print type$(x), x<br/>      Print type$(y), y<br/>}<br/>namedparam 10, 20<br/>namedparam \u00a0?,\u00a0?<br/>Push 1, 2\u00a0: namedparam<br/>Stack New {<br/>      \\\\ it is empty<br/>      namedparam<br/>      namedparam \u00a0%y=500<br/>      namedparam \u00a0%x=20<br/>}<br/>namedparam\u00a0%x=1,\u00a0%y=1<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">f\u00a0:= proc(a, {b:= 1, c:= 1})<br/>    print (a*(c+b));<br/>end proc:<br/>#a is a mandatory positional parameter, b and c are optional named parameters<br/>f(1);#you must have a value for a for the procedure to work<br/>                                                                                 2<br/>f(1, c = 1, b = 2);<br/>                                                                                 3<br/>f(2, b = 5, c = 3);#b and c can be put in any order<br/>                                                                                16</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">Options[fn]={Add-&gt;False,Offset-&gt; 0};<br/>fn[x_,y_,OptionsPattern[]]:=If[OptionValue[Add]==True,x+y+OptionValue[Offset],{x,y,OptionValue[Offset]}]<br/>\u00a0<br/>fn[3,4,{Add-&gt;True,Offset-&gt;2}]<br/>-&gt;9<br/>fn[3,4,{Offset-&gt;2,Add-&gt;True}]<br/>-&gt;9</pre>"}, {"lang": "MATLAB / Octave", "loc": 15, "block": "<pre class=\"matlab highlighted_source\">   <span class=\"kw1\">function</span> foo<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span> <br/>      <span class=\"kw1\">for</span> k= <span class=\"nu0\">1</span>:<span class=\"nu0\">2</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">case</span> <span class=\"br0\">{</span><span class=\"co2\">'param1'</span><span class=\"br0\">}</span><br/>            param1 = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span>k+<span class=\"nu0\">1</span><span class=\"br0\">}</span>;<br/>         <span class=\"kw1\">case</span> <span class=\"br0\">{</span><span class=\"co2\">'param2'</span><span class=\"br0\">}</span><br/>            param2 = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span>k+<span class=\"nu0\">1</span><span class=\"br0\">}</span>;<br/>\t <span class=\"kw1\">end</span>; <br/>      <span class=\"kw1\">end</span>; <br/>      printf<span class=\"br0\">(</span><span class=\"co2\">'param1:\u00a0%s\\n'</span>,param1<span class=\"br0\">)</span>;\t <br/>      printf<span class=\"br0\">(</span><span class=\"co2\">'param2:\u00a0%s\\n'</span>,param2<span class=\"br0\">)</span>;\t <br/>   <span class=\"kw1\">end</span>;  <br/>\u00a0<br/>   foo<span class=\"br0\">(</span><span class=\"co2\">'param1'</span>,<span class=\"co2\">'a1'</span>,<span class=\"co2\">'param2'</span>,<span class=\"co2\">'b2'</span><span class=\"br0\">)</span>; <br/>   foo<span class=\"br0\">(</span><span class=\"co2\">'param2'</span>,<span class=\"co2\">'b2'</span>,<span class=\"co2\">'param1'</span>,<span class=\"co2\">'a1'</span><span class=\"br0\">)</span>;  </pre>"}, {"lang": "Modula-3", "loc": 1, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Foo<span class=\"br0\">(</span>Arg1<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; Arg2<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Nemerle", "loc": 5, "block": "<pre class=\"text highlighted_source\">Foo(number\u00a0: int, word = \"Default\", option = true)\u00a0: void // note type inference with default values<br/>\u00a0<br/>Foo(word = \"Bird\", number = 3)        // an argument with a default value can be omitted from function call<br/>Foo(3, option = false, word = \"Bird\") // unnamed arguments must be in same order as function definition and precede named arguments<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">proc subtract(x, y): auto = x - y<br/>\u00a0<br/>echo subtract(5, 3)         # used as positional parameters<br/>echo subtract(y = 3, x = 5) # used as named parameters</pre>"}, {"lang": "Objective-C", "loc": 8, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> Demo <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>    <span class=\"co2\">// Omitted ...</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> hypotenuseOfX<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x andY<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>y;<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> hypotenuseOfX<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x andY<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>y andZ<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>z;<br/>\u00a0<br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> foo <span class=\"re1\">~arg1</span> <span class=\"re1\">~arg2</span> <span class=\"sy0\">=</span> arg1 <span class=\"sy0\">+</span> arg2<span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> foo <span class=\"sy0\">:</span> arg1<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> arg2<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> foo <span class=\"re1\">~arg1</span><span class=\"sy0\">:</span>x <span class=\"re1\">~arg2</span><span class=\"sy0\">:</span>y <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y<span class=\"sy0\">;;</span> <span class=\"co1\">(* you can also use different variable names internally if you want *)</span><br/><span class=\"kw1\">val</span> foo <span class=\"sy0\">:</span> arg1<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> arg2<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> foo <span class=\"re1\">~arg2</span><span class=\"sy0\">:</span><span class=\"nu0\">17</span> <span class=\"re1\">~arg1</span><span class=\"sy0\">:</span><span class=\"nu0\">42</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">59</span></pre>"}, {"lang": "Oz", "loc": 15, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/><span class=\"kw1\">class</span> <span class=\"re2\">Foo</span><br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">init</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">bar</span><span class=\"br0\">(</span>PP <span class=\"co1\">%% positional parameter</span><br/>\t    named1:N1<br/>\t    named2:N2<br/>\t    namedWithDefault:NWD <span class=\"sy0\">&lt;=</span> 42<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"PP: \"</span><span class=\"sy0\">#</span>PP<span class=\"sy0\">#</span><span class=\"st0\">\", N1: \"</span><span class=\"sy0\">#</span>N1<span class=\"sy0\">#</span><span class=\"st0\">\", N2: \"</span><span class=\"sy0\">#</span>N2<span class=\"sy0\">#</span><span class=\"st0\">\", NWD: \"</span><span class=\"sy0\">#</span>NWD<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>O = <span class=\"br0\">{</span>New Foo init<span class=\"br0\">}</span><br/><span class=\"br0\">{</span>O bar<span class=\"br0\">(</span>1 named1:2 named2:3 namedWithDefault:4<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">%% ok</span><br/><span class=\"br0\">{</span>O bar<span class=\"br0\">(</span>1 named2:2 named1:3<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">%% ok</span><br/><span class=\"br0\">{</span>O bar<span class=\"br0\">(</span>1 named1:2<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">%% not ok, \"missing message feature in object application\"</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> funkshun <span class=\"br0\">{</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%h</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># Print every argument and its value.</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/qq.html\"><span class=\"kw3\">qq</span></a><span class=\"br0\">(</span>Argument <span class=\"st0\">\"$_\"</span> has value <span class=\"st0\">\"$h{$_}\"</span><span class=\"sy0\">.</span><span class=\"re0\">\\n</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%h</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># If a 'verbosity' argument was passed in, print its value</span><br/>  <span class=\"co1\"># whatever that value may be.</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Verbosity specified as $h{verbosity}.<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$h</span><span class=\"br0\">{</span>verbosity<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># Say that safe mode is on if 'safe' is set to a true value.</span><br/>  <span class=\"co1\"># Otherwise, say that it's off.</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Safe mode \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"br0\">{</span>safe<span class=\"br0\">}</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'on'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'off'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\".<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> funkshun <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">?,</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">@e</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"re0\">%f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"sy0\">...</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">global function timedelta(atom weeks=0, atom days=0, atom hours=0, atom minutes=0, atom seconds=0, atom milliseconds=0, atom microseconds=0)<br/>-- can be invoked as:<br/>constant fourdays = timedelta(days:=4)<br/>--       fourdays = timedelta(0,4) -- equivalent<br/>-- **NB** a plain '=' is a very different thing<br/>constant oneday = timedelta(days=1) -- equivalent to timedelta([weeks:=]iff((equal(days,1)?true:false))<br/>                                    -- - with an error if no local variable days exists.<br/>constant shift = timedelta(hours:=hours) -- perfectly valid (param hours:=local hours)<br/>-- timedelta(0,hours:=15,3) -- illegal (it is not clear whether you meant days:=3 or minutes:=3)</pre>"}, {"lang": "PHP", "loc": 8, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> named<span class=\"br0\">(</span><span class=\"re0\">$args</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$args</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"st0\">\"gbv\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"motor\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"away\"</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">\"teenage\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"fbi\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">echo</span> <span class=\"re0\">$args</span><span class=\"br0\">[</span><span class=\"st0\">\"gbv\"</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" men running \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$args</span><span class=\"br0\">[</span><span class=\"st_h\">'motor'</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" from the \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$args</span><span class=\"br0\">[</span><span class=\"st_h\">'teenage'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>named<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"teenage\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"cia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gbv\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(de foo @<br/>   (bind (rest)  # Bind symbols in CARs to values in CDRs<br/>      (println 'Bar 'is Bar)<br/>      (println 'Mumble 'is Mumble) ) )<br/>\u00a0<br/>(foo '(Bar . 123) '(Mumble . \"def\"))</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Host</span> Argument <span class=\"nu0\">1</span> is <a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> subtract<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> x - y<br/>\u00a0<br/>subtract<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>         <span class=\"co1\"># used as positional parameters; evaluates to 2</span><br/>subtract<span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\"># used as named parameters;      evaluates to 2</span></pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"rsplus highlighted_source\">divide <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>numerator, denominator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  numerator <span class=\"sy0\">/</span> denominator<br/><span class=\"br0\">}</span><br/>\u00a0<br/>divide<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                       <span class=\"co1\"># 1.5</span><br/>divide<span class=\"br0\">(</span>numerator<span class=\"sy0\">=</span><span class=\"nu0\">3</span>, denominator<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\"># 1.5</span><br/>divide<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">3</span>, d<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                   <span class=\"co1\"># 1.5</span><br/>divide<span class=\"br0\">(</span>den<span class=\"sy0\">=</span><span class=\"nu0\">3</span>, num<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>               <span class=\"co1\"># 0.66</span><br/>divide<span class=\"br0\">(</span>den<span class=\"sy0\">=</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                   <span class=\"co1\"># 0.66</span><br/>divide<span class=\"br0\">(</span><span class=\"nu0\">3</span>, num<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                   <span class=\"co1\"># 0.66</span></pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (pizza sauce<br/>              \u00a0;; mandatory keyword argument<br/>               #:topping topping <br/>              \u00a0;; optional keyword argument with default<br/>               #:type [type \"deep dish\"])<br/>  (printf \"~a pizza with ~a sauce topped with ~a~n\"<br/>          type sauce topping))<br/>\u00a0<br/>(pizza \"tomato\" #:topping \"onion\")<br/>(pizza #:topping \"onion\" \"garlic\" #:type \"pan\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 76, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm shows named parameters when called as a subroutine/function*/</span><br/><span class=\"coMULTI\">/*\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>  \u2502 The syntax of:   xxx = func1(parmName2=arg2, parmName1=arg1)       \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 in the REXX language is interpreted specifically as:               \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                  xxx = func1(    yyy       ,       zzz     )       \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 where  yyy  is the logical result of comparing (the REXX variables)\u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                    parmName2   with   arg2                   and   \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 where  zzz  is the logical result of comparing (the REXX variables)\u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                    parmName1   with   arg1                         \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 (either as two strings,  or arithmetically if both \"parmName2\" and \u2502<br/>  \u2502 \"arg2\"  are both valid REXX numbers.   In the REXX language, there \u2502<br/>  \u2502 is no way to declare (define) what a variable is [or its type], as \u2502<br/>  \u2502 each literal that can be a variable is assumed to be one.  If it's \u2502<br/>  \u2502 not defined, then its uppercase name is used for the value.        \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 Consider the one-line REXX program:    say Where are you?          \u2502<br/>  \u2502 causes REXX to consider that four-word expression as a  \"SAY\"      \u2502<br/>  \u2502 statement, followed by three REXX variables,  each of which aren't \u2502<br/>  \u2502 defined (that is, have a value), so REXX uses a value which is the \u2502<br/>  \u2502 uppercased value of the REXX variable name, namely three values in \u2502<br/>  \u2502 this case,  so the following is displayed:   WHERE ARE YOU?        \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 [There is a mechanism in REXX to catch this behavior and raise the \u2502<br/>  \u2502 NOVALUE  condition.]                                               \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 To allow a solution to be used for this task's requirement,  and   \u2502<br/>  \u2502 and not get tangled up with the legal REXX syntactical expressions \u2502<br/>  \u2502 shown,  this REXX  programming example  uses a  variation  of the  \u2502<br/>  \u2502 task's illustration  to allow a  method in REXX  of using  named   \u2502<br/>  \u2502 parameters:      xxx = func1('parmName2=' arg2, \"parmName1=\" arg1) \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 Also,  REXX allows the omitting of arguments by just specifying a  \u2502<br/>  \u2502 comma  (or nothing at all,  in the case of a single argument):     \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                  xxx = func1(,zzz)                                 \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 would indicate that the 1st argument has been omitted.             \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                  xxx = func1(yyy)                                  \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 would indicate that the 2nd argument  (and all other subsequent    \u2502<br/>  \u2502 arguments)  has/have been omitted.                                 \u2502<br/>  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518*/</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> count,itemX                  <span class=\"coMULTI\">/*assume 2 values have been used,*/</span><br/>                                       <span class=\"coMULTI\">/*or whatever ... just to show...*/</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;      _=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*now, lets examine each argument*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span>j,<span class=\"st0\">'Omitted'</span><span class=\"br0\">)</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*skip examining if argJ omitted.*/</span><br/>                                       <span class=\"coMULTI\">/*(above)   This is superfluous, */</span><br/>                                       <span class=\"coMULTI\">/* but it demonstrates a method. */</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span>j,<span class=\"st0\">\"Exists\"</span><span class=\"br0\">)</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*exactly the same as previous.  */</span><br/>                                       <span class=\"coMULTI\">/*Only 1st char (2nd arg) is used*/</span><br/>  first=<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>_,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*extract the 1st word in arg(j).*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>first,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"st0\">'='</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*skip if 1st word isn't:  xxx=  */</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> _ varname <span class=\"st0\">'= '</span> <span class=\"kw2\">value</span>       <span class=\"coMULTI\">/*parse the named variable &amp;value*/</span><br/>  <span class=\"kw1\">if</span> varname==<span class=\"st0\">''</span>          <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*not the correct format, so skip*/</span><br/>                                       <span class=\"coMULTI\">/*(above) fix this for real pgm. */</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> varname,<span class=\"kw2\">value</span>             <span class=\"coMULTI\">/*use BIF to set REXX variable.  */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"coMULTI\">/* \u2219\u2219\u2219 perform some REXX magic here with specified parameters and stuff:*/</span><br/><span class=\"coMULTI\">/*     do this,  do that,  perform dis &amp; dat, compute, gears whiz, cogs */</span><br/><span class=\"coMULTI\">/*     turn,  wheels spin,  belts move, things get assigned, stuff gets */</span><br/><span class=\"coMULTI\">/*     computed,  wheels spin,  belts move,  things get assigned, motors*/</span><br/><span class=\"coMULTI\">/*     humm, engines roar, coal gets burned, water turns to steam, real */</span><br/><span class=\"coMULTI\">/*     work (some of it useful)  gets done,  and something is produced. */</span><br/>\u00a0<br/><span class=\"kw1\">return</span>  <span class=\"st0\">'the final meaning of life, or 42  --- whichever is appropriate.'</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> example<span class=\"br0\">(</span>foo: <span class=\"nu0\">0</span>, bar: <span class=\"nu0\">1</span>, grill: <span class=\"st0\">\"pork chops\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"foo is #{foo}, bar is #{bar}, and grill is #{grill}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Note that\u00a0:foo is omitted and\u00a0:grill precedes\u00a0:bar</span><br/>example<span class=\"br0\">(</span>grill: <span class=\"st0\">\"lamb kebab\"</span>, bar: <span class=\"nu0\">3.14</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> add<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x + y<br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 23, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>keyarg<span class=\"sy0\">-</span>parser argdefs args kont<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply kont<br/>\t <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>argdef<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>args args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> args<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> argdef<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> argdef<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>\t\t\t <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      argdefs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>print<span class=\"sy0\">-</span>name . args<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>keyarg<span class=\"sy0\">-</span>parser '<span class=\"br0\">(</span><span class=\"br0\">(</span>first #f<span class=\"br0\">)</span><span class=\"br0\">(</span>last <span class=\"st0\">\"?\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t args<br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>first last<span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">display</span> last<span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>first<br/>\t\t\t  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t\t\t  <span class=\"br0\">(</span><span class=\"kw1\">display</span> first<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">func example<span class=\"br0\">(</span>foo: <span class=\"nu0\">0</span>, bar: <span class=\"nu0\">1</span>, grill: <span class=\"st0\">\"pork chops\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"foo is #{foo}, bar is #{bar}, and grill is #{grill}\"</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Note that\u00a0:foo is omitted and\u00a0:grill precedes\u00a0:bar</span><br/>example<span class=\"br0\">(</span>grill: <span class=\"st0\">\"lamb kebab\"</span>, bar: <span class=\"nu0\">3.14</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 9, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re0\">AnotherClass</span> <span class=\"br0\">[</span><br/>   <span class=\"coMULTI\">\"...\"</span><br/>   initWithArray: <span class=\"re5\">anArray</span> <span class=\"br0\">[</span> <span class=\"coMULTI\">\"single argument\"</span> <span class=\"br0\">]</span><br/>   initWithArray: <span class=\"re5\">anArray</span> andString: <span class=\"re5\">aString</span> <span class=\"br0\">[</span> <br/>        <span class=\"coMULTI\">\"two args; these two methods in usage resemble<br/>         a named argument, with optional andString argument\"</span><br/>   <span class=\"br0\">]</span><br/>   <span class=\"coMULTI\">\"...\"</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">fun dosomething (a, b, c) = print (\"a = \" ^ a ^ \"\\nb = \" ^ Real.toString b ^ \"\\nc = \" ^ Int.toString c ^ \"\\n\")<br/>\u00a0<br/>fun example {a, b, c} = dosomething (a, b, c)</pre>"}, {"lang": "Suneido", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>test = function (one, two, three = '', four = '', five = '')<br/>    {<br/>    Print('one: ' $ one $ ', two: ' $ two $ ', three: ' $ three $ <br/>        ', four: ' $ four $ ', five: ' $ five)<br/>    }<br/>test('1', '2', five: '5', three: '3')<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">func isGreater(x x:Int, thanY y:Int) -&gt; Bool {<br/>    return x &gt; y<br/>}<br/>assert(isGreater(x: 5, thanY: 10) == false)</pre>"}, {"lang": "Tcl", "loc": 11, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> example args <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Set the defaults</span><br/>    array <span class=\"kw1\">set</span> opts <span class=\"br0\">{</span>-foo <span class=\"nu0\">0</span> -bar <span class=\"nu0\">1</span> -grill <span class=\"st0\">\"hamburger\"</span><span class=\"br0\">}</span><br/>    <span class=\"co1\"># Merge in the values from the caller</span><br/>    array <span class=\"kw1\">set</span> opts <span class=\"re0\">$args</span><br/>    <span class=\"co1\"># Use the arguments</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"foo is $opts(-foo), bar is $opts(-bar), and grill is $opts(-grill)\"</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Note that -foo is omitted and -grill precedes -bar</span><br/>example -grill <span class=\"st0\">\"lamb kebab\"</span> -bar <span class=\"nu0\">3.14</span><br/><span class=\"co1\"># =&gt; \u2018foo is 0, bar is 3.14, and grill is lamb kebab\u2019</span></pre>"}, {"lang": "Visual Basic", "loc": 8, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'the function<br/></span><span class=\"kw2\">Sub</span> whatever(foo <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, bar <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, baz <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, qux <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/>    <span class=\"co1\">'...<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/><span class=\"co1\">'calling the function -- note the Pascal-style assignment operator<br/></span><span class=\"kw2\">Sub</span> crap()<br/>    whatever bar:=1, baz:=2, foo:=-1, qux:=<span class=\"st0\">\"Why is ev'rybody always pickin' on me?\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XSLT", "loc": 4, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc3\"><span class=\"re1\">&lt;xsl:template</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"table-header\"</span><span class=\"re2\">&gt;</span></span><br/>    <span class=\"sc3\"><span class=\"re1\">&lt;xsl:param</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"title\"</span><span class=\"re2\">/&gt;</span></span><br/>    ...<br/><span class=\"sc3\"><span class=\"re1\">&lt;/xsl:template<span class=\"re2\">&gt;</span></span></span></pre>"}]}