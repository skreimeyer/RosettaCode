{"task": "Flow-control_structures", "blocks": [{"lang": "360 Assembly", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>         B      TESTPX     goto label TESTPX<br/>         BR     14         goto to the address found in register 14<br/>\u00a0</pre>"}, {"lang": "6502 Assembly", "loc": 2, "block": "<pre class=\"text highlighted_source\">\t\tJMP $8000\t\t;immediately JuMP to $8000 and begin executing<br/>\t\t\t\t\t;instructions there.</pre>"}, {"lang": "Ada", "loc": 3, "block": "<pre class=\"ada highlighted_source\">&lt;&lt;Top&gt;&gt;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Hello, World\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">goto</span> Top;</pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"br0\">(</span><br/>   <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> 1000 <span class=\"kw2\">DO</span><br/>     <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> j<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>       <span class=\"kw2\">IF</span> random <span class=\"sy1\">&gt;</span> <span class=\"re1\">0.999</span> <span class=\"kw2\">THEN</span><br/>         <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Exited when: i=\"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"st0\">\", j=\"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         done<br/>       <span class=\"kw2\">FI</span><br/>       <span class=\"coMULTI\"># etc. #</span><br/>     <span class=\"kw2\">OD</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/> done<span class=\"sy1\">:</span> <span class=\"kw7\">EMPTY</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "ALGOL W", "loc": 18, "block": "<pre class=\"text highlighted_source\">begin<br/>    integer i;<br/>    integer procedure getNumber\u00a0;<br/>    begin<br/>        integer n;<br/>        write( \"n&gt; \" );<br/>        read( i );<br/>        if i&lt; 0 then goto negativeNumber;<br/>        i<br/>    end getNumber\u00a0;<br/>\u00a0<br/>    i\u00a0:= getNumber;<br/>    write( \"positive or zero\" );<br/>    go to endProgram;<br/>negativeNumber:<br/>    writeon( \"negative\" );<br/>endProgram:<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> calling Label1<br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> Label1 <br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> Label1 subroutine finished <br/><a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">Goto</span></a> Label2<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> calling Label2 <span class=\"co1\">; this part is never reached</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">Label1:<br/></span>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> Label1 <br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">Label2:<br/></span>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> Label2 will not <span class=\"kw1\">return</span> to calling routine<br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy3\">%</span>2<span class=\"br0\">)</span><span class=\"kw1\">continue</span>; <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy2\">&gt;=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"kw1\">break</span>; <span class=\"kw5\">print</span> i<span class=\"br0\">}</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">2</span><br/><span class=\"nu0\">4</span><br/><span class=\"nu0\">6</span><br/><span class=\"nu0\">8</span></pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      GOSUB subroutine<br/>\u00a0<br/>      (loop)<br/>      PRINT \"Infinite loop\"<br/>      GOTO loop<br/>      END<br/>\u00a0<br/>      (subroutine)<br/>      PRINT \"In subroutine\"<br/>      WAIT 100<br/>      RETURN</pre>"}, {"lang": "Bracmat", "loc": 6, "block": "<pre class=\"text highlighted_source\">  ( LOOP<br/>  =   out$\"Hi again!\"<br/>    &amp;\u00a0!LOOP<br/>  )<br/>&amp; out$Hi!<br/>&amp;\u00a0!LOOP</pre>"}, {"lang": "C", "loc": 13, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">1000</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>j<span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>exit_early<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">goto</span> out<span class=\"sy0\">;</span><br/>      <span class=\"coMULTI\">/* etc. */</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>out<span class=\"sy0\">:</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt; </span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> LOOP<span class=\"sy4\">:</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Hello, World!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/> <span class=\"kw1\">goto</span> LOOP<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "COBOL", "loc": 8, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> Go-To-Example<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       Foo<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Just a reminder: GO TOs are evil.\"</span><br/>\u00a0<br/>           <span class=\"kw2\">GO</span> <span class=\"kw2\">TO</span> Foo<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Comal", "loc": 5, "block": "<pre class=\"text highlighted_source\">myprocedure<br/>END // End of main program<br/>PROC myprocedure<br/>PRINT \"Hello, this is a procedure\"<br/>ENDPROC myprocedure</pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    label1<span class=\"sy0\">:</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"I'm in your infinite loop.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">goto</span> label1<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre>escape <i>ej</i> {\n  <i>...body...</i>\n}\n</pre>"}, {"lang": "Erlang", "loc": 13, "block": "<pre class=\"text highlighted_source\">: checked-array<br/>  CREATE ( size -- ) DUP , CELLS ALLOT<br/>  DOES&gt; ( i -- a+i )<br/>    2DUP @ 0 SWAP WITHIN IF<br/>      SWAP 1+ CELLS +<br/>    ELSE<br/>      1 THROW<br/>    THEN\u00a0;<br/>\u00a0<br/>8 checked-array myarray<br/>\u00a0<br/>: safe-access ( i -- a[i] )<br/>  ['] myarray CATCH 1 = IF .\" Out of bounds!\" 0 THEN\u00a0;</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">: checked-array<br/>  CREATE ( size -- ) DUP , CELLS ALLOT<br/>  DOES&gt; ( i -- a+i )<br/>    2DUP @ 0 SWAP WITHIN IF<br/>      SWAP 1+ CELLS +<br/>    ELSE<br/>      1 THROW<br/>    THEN\u00a0;<br/>\u00a0<br/>8 checked-array myarray<br/>\u00a0<br/>: safe-access ( i -- a[i] )<br/>  ['] myarray CATCH 1 = IF .\" Out of bounds!\" 0 THEN\u00a0;</pre>"}, {"lang": "Fortran", "loc": 12, "block": "<pre class=\"fortran highlighted_source\">      ...<br/>      <span class=\"me1\">ASSIGN</span> <span class=\"nu0\">1101</span> <span class=\"kw1\">to</span> WHENCE   <span class=\"co1\">!Remember my return point.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span>              <span class=\"co1\">!Dive into a \"subroutine\"</span><br/> <span class=\"nu0\">1101</span> <span class=\"kw1\">CONTINUE</span>                <span class=\"co1\">!Resume.</span><br/>      ... <br/>      <span class=\"me1\">ASSIGN</span> <span class=\"nu0\">1102</span> <span class=\"kw1\">to</span> WHENCE   <span class=\"co1\">!Prepare for another invocation.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span>              <span class=\"co1\">!Like GOSUB in BASIC.</span><br/> <span class=\"nu0\">1102</span> <span class=\"kw1\">CONTINUE</span>                <span class=\"co1\">!Carry on.</span><br/>      ...<br/><span class=\"co1\">Common code, far away.</span><br/> <span class=\"nu0\">1000</span> <span class=\"kw1\">do</span> something            <span class=\"co1\">!This has all the context available.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> WHENCE            <span class=\"co1\">!Return whence I came.</span></pre>"}, {"lang": "Gambas", "loc": 11, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/>LOOPIT:<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> siCount;;<br/><a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siCount<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">100</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/quit\"><span class=\"kw1\">Quit</span></a><br/><a href=\"http://gambasdoc.org/help/lang/goto\"><span class=\"kw1\">Goto</span></a> LoopIt<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 4, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>inf<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">goto</span> inf<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 7, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"co3\">20</span> <span class=\"kw1\">IF</span> a<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"This is a conditional statement\"</span><br/><span class=\"co3\">30</span> <span class=\"kw1\">IF</span> a<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">50</span>: REM a conditional jump<br/><span class=\"co3\">40</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"This statement will be skipped\"</span><br/><span class=\"co3\">50</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: REM This does <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"co3\">100</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Endless loop\"</span><br/><span class=\"co3\">110</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">100</span>:<span class=\"co2\">REM an unconditional jump</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Trans<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Exit<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    runExitTMaybe <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>        forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\y <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>                lift <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>                when <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>                    exitWith <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Done.\"</span></pre>"}, {"lang": "HicEst", "loc": 17, "block": "<pre class=\"hicest highlighted_source\"><span class=\"nu0\">1</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">2</span> <span class=\"co1\">! branch to label</span><br/>\u00a0<br/><span class=\"nu0\">2</span> <span class=\"kw1\">READ</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>name<span class=\"sy1\">,</span> IOStat<span class=\"sy1\">=</span>ios<span class=\"sy1\">,</span> ERror<span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> something <span class=\"co1\">! on error branch to label 3</span><br/>\u00a0<br/><span class=\"nu0\">3</span> <span class=\"kw1\">ALARM</span><span class=\"br0\">(</span>delay<span class=\"sy1\">,</span> n<span class=\"br0\">)</span> <span class=\"co1\">! n=2...9 simulate F2 to F9 keys: call asynchronously \"Alarm\"-SUBROUTINES F2...F9 with a delay</span><br/>\u00a0<br/><span class=\"nu0\">4</span> <span class=\"kw1\">ALARM</span><span class=\"br0\">(</span>  <span class=\"nu0\">1</span>  <span class=\"br0\">)</span> <span class=\"co1\">! lets HicEst wait at this statement for any keyboard or mouse event</span><br/>\u00a0<br/><span class=\"nu0\">5</span> <span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>WAIT<span class=\"sy1\">=</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"co1\">! msec</span><br/>\u00a0<br/><span class=\"nu0\">6</span> <span class=\"kw1\">XEQ</span><span class=\"br0\">(</span><span class=\"st0\">'CALL my_subroutine'</span><span class=\"sy1\">,</span> <span class=\"sy1\">*</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"co1\">! executes command string, on error branch to label 7</span><br/>\u00a0<br/><span class=\"nu0\">7</span> y <span class=\"sy1\">=</span> <span class=\"kw1\">EXP</span><span class=\"br0\">(</span>1E100<span class=\"sy1\">,</span> <span class=\"sy1\">*</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"co1\">! on error branch to label 8</span><br/>\u00a0<br/><span class=\"nu0\">8</span> y <span class=\"sy1\">=</span> <span class=\"kw1\">LOG</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy1\">,</span> <span class=\"sy1\">*</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>   <span class=\"co1\">! on error branch to label 9</span><br/>\u00a0<br/><span class=\"nu0\">9</span> <span class=\"kw1\">ALARM</span><span class=\"br0\">(</span> <span class=\"nu0\">999</span> <span class=\"br0\">)</span> <span class=\"co1\">! quit HicEst immediately</span></pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/>    <span class=\"kw1\">if</span> x <span class=\"sy1\">:=</span> <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>container <span class=\"kw1\">do</span> <span class=\"br0\">{</span>     <span class=\"co1\"># * is the 'length' operator</span><br/>        <span class=\"kw1\">if</span> container<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">~==</span> y <span class=\"kw1\">then</span><br/>            <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"item \"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> <span class=\"st0\">\" is not interesting\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">break</span> a<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"found item \"</span><span class=\"sy1\">,</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"did not find an item\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">test<span class=\"sy0\">:</span><br/>..some code here<br/>goto, test</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">2</span> * <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">switch</span> <span class=\"br0\">(</span>xx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    <span class=\"coMULTI\">/* 1 &amp; 2 both come here... */</span><br/>    ...<br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span><br/>    <span class=\"coMULTI\">/* 4 comes here... */</span><br/>    ...<br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span><br/>    <span class=\"coMULTI\">/* 5 comes here... */</span><br/>    ...<br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>    <span class=\"coMULTI\">/* everything else */</span><br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  ...<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>some_condition<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  ...<br/><span class=\"br0\">}</span><br/>\u00a0<br/>_Time_<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ...<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>some_condition<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">break</span> _Time_<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* terminate the do-while loop */</span><span class=\"br0\">}</span><br/>    ...<br/>    <span class=\"br0\">}</span><br/>  ...<br/><span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>thisCondition<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre>$ jq -n '1, (2 | label $foo | debug | 3 | break $foo | debug), 4'\n1\n[\"DEBUG:\",2]\n4</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>$ jq -n '1, (2 | label $foo | debug | 3 | break $foo | debug), 4'\n1\n[\"DEBUG:\",2]\n4</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function example()<br/>    println(\"Hello \")<br/>    @goto world<br/>    println(\"Never printed\")<br/>    @label world<br/>    println(\"world\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i + j <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> continue<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i + j <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> break<br/>            println<span class=\"br0\">(</span>i + j<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"No command line arguments should be supplied\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Goodbye!\"</span><span class=\"br0\">)</span>  <span class=\"co1\">// won't be executed</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>    i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"kw1\">try</span> <br/>   <span class=\"co1\">% do some stuff</span><br/><span class=\"kw1\">catch</span><br/>   <span class=\"co1\">% in case of error, continue here</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"kw1\">try</span> <br/>   <span class=\"co1\">% do some stuff</span><br/><span class=\"kw1\">catch</span><br/>   <span class=\"co1\">% in case of error, continue here</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">/* goto */<br/>block(..., label, ..., go(label), ...);<br/>\u00a0<br/>/* throw, which is like trapping errors, and can do non-local jumps to return a value */<br/>catch(..., throw(value), ...);<br/>\u00a0<br/>/* error trapping */<br/>errcatch(..., error(\"Bad luck!\"), ...);</pre>"}, {"lang": "MUMPS", "loc": 1, "block": "<pre class=\"text highlighted_source\">GOTO LABEL^ROUTINE</pre>"}, {"lang": "Nemerle", "loc": 4, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"kw1\">loop</span> xx = <span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">if</span> xx = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> <span class=\"co1\">-- loop terminated by leave</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'unreachable'</span><br/>  <span class=\"kw3\">end</span></pre>"}, {"lang": "NetRexx", "loc": 4, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"kw1\">loop</span> xx = <span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">if</span> xx = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> <span class=\"co1\">-- loop terminated by leave</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'unreachable'</span><br/>  <span class=\"kw3\">end</span></pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">block outer:<br/>  for i in 0..1000:<br/>    for j in 0..1000:<br/>      if i + j == 3:<br/>        break outer</pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">exception</span> Found <span class=\"kw1\">of</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"co1\">(* search the first number in a list greater than 50 *)</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">let</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">36</span><span class=\"sy0\">;</span> <span class=\"nu0\">23</span><span class=\"sy0\">;</span> <span class=\"nu0\">44</span><span class=\"sy0\">;</span> <span class=\"nu0\">51</span><span class=\"sy0\">;</span> <span class=\"nu0\">28</span><span class=\"sy0\">;</span> <span class=\"nu0\">63</span><span class=\"sy0\">;</span> <span class=\"nu0\">17</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> v <span class=\"sy0\">&gt;</span> <span class=\"nu0\">50</span> <span class=\"kw1\">then</span> <span class=\"kw1\">raise</span><span class=\"br0\">(</span>Found v<span class=\"br0\">)</span><span class=\"br0\">)</span> nums<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"nothing found\"</span><br/>  <span class=\"kw1\">with</span> Found res <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"found\u00a0%d\\n\"</span> res</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">break</pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">case</span> <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> 3<br/><span class=\"kw1\">of</span> 0 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Foo<span class=\"br0\">}</span><br/><span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> 1 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Bar<span class=\"br0\">}</span><br/><span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> 2 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Buzz<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">label</span><br/>  jumpto<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"sy1\">...</span> <br/><span class=\"me1\">jumpto</span><span class=\"sy1\">:</span><br/>  some statement<span class=\"sy1\">;</span><br/>  <span class=\"sy1\">...</span><br/>  <span class=\"kw1\">goto</span> jumpto<span class=\"sy1\">;</span><br/>  <span class=\"sy1\">...</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Pascal", "loc": 10, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">label</span><br/>  jumpto<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"sy1\">...</span> <br/><span class=\"me1\">jumpto</span><span class=\"sy1\">:</span><br/>  some statement<span class=\"sy1\">;</span><br/>  <span class=\"sy1\">...</span><br/>  <span class=\"kw1\">goto</span> jumpto<span class=\"sy1\">;</span><br/>  <span class=\"sy1\">...</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\">FORK<span class=\"sy0\">:</span><br/><span class=\"co1\"># some code</span><br/><a href=\"http://perldoc.perl.org/functions/goto.html\"><span class=\"kw3\">goto</span></a> FORK<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\">TOWN<span class=\"sy0\">:</span> goto TOWN<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">#ilASM{ jmp\u00a0:label }<br/>...<br/>#ilASM{\u00a0::label }</pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>goto a<span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st_h\">'Foo'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>a<span class=\"sy0\">:</span><br/><span class=\"kw1\">echo</span> <span class=\"st_h\">'Bar'</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LEAVE<br/>   The LEAVE statement terminates execution of a loop.<br/>   Execution resumes at the next statement after the loop.<br/>ITERATE<br/>   The ITERATE statement causes the next iteration of the loop to<br/>   commence.  Any statements between ITERATE and the end of the loop<br/>   are not executed.<br/>STOP<br/>   Terminates execution of either a task or the entire program.<br/>SIGNAL FINISH<br/>   Terminates execution of a program in a nice way.<br/>SIGNAL statement<br/>   SIGNAL &lt;condition&gt; raises the named condition.  The condition may<br/>   be one of the hardware or software conditions such as OVERFLOW,<br/>   UNDERFLOW, ZERODIVIDE, SUBSCRIPTRANGE, STRINGRANGE, etc, or a<br/>   user-defined condition.<br/>CALL<br/>   The CALL statement causes control to transfer to the named <br/>   subroutine.<br/>SELECT<br/>   The SELECT statement permits the execution of just one of a<br/>   list of statements (or groups of statements).<br/>   It is sort of like a computed GOTO.<br/>GO TO<br/>   The GO TO statement causes control to be transferred to the named<br/>   statement.<br/>   It can also be used to transfer control to any one of an array of<br/>   labelled statements. (This form is superseded by SELECT, above.)<br/>   [GO TO  can also be spelled as  GOTO].<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LEAVE<br/>   The LEAVE statement terminates execution of a loop.<br/>   Execution resumes at the next statement after the loop.<br/>ITERATE<br/>   The ITERATE statement causes the next iteration of the loop to<br/>   commence.  Any statements between ITERATE and the end of the loop<br/>   are not executed.<br/>STOP<br/>   Terminates execution of either a task or the entire program.<br/>SIGNAL FINISH<br/>   Terminates execution of a program in a nice way.<br/>SIGNAL statement<br/>   SIGNAL &lt;condition&gt; raises the named condition.  The condition may<br/>   be one of the hardware or software conditions such as OVERFLOW,<br/>   UNDERFLOW, ZERODIVIDE, SUBSCRIPTRANGE, STRINGRANGE, etc, or a<br/>   user-defined condition.<br/>CALL<br/>   The CALL statement causes control to transfer to the named <br/>   subroutine.<br/>SELECT<br/>   The SELECT statement permits the execution of just one of a<br/>   list of statements (or groups of statements).<br/>   It is sort of like a computed GOTO.<br/>GO TO<br/>   The GO TO statement causes control to be transferred to the named<br/>   statement.<br/>   It can also be used to transfer control to any one of an array of<br/>   labelled statements. (This form is superseded by SELECT, above.)<br/>   [GO TO  can also be spelled as  GOTO].<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 7, "block": "<pre class=\"text highlighted_source\">while condition1 do<br/>   while condition2 do<br/>      if condition3 then<br/>         quitloop(2);<br/>      endif;<br/>   endwhile;<br/>endwhile;</pre>"}, {"lang": "PureBasic", "loc": 12, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  top:<br/>  i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello world.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Goto</span> top<br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span> </pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Search for an odd factor of a using brute force:</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n%<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">continue</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n%i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        result <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">break</span><br/><span class=\"kw1\">else</span>:<br/>    result <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"No odd factors found\"</span></pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; some silly boilerplate to mimic the assembly code better<br/>(define r0 0)<br/>(define (cmp r1 r2) (set! r0 (sgn (- r1 r2))))<br/>(define (je true-label false-label) (if (zero? r0) (true-label) (false-label)))<br/>(define (goto label) (label))<br/>\u00a0<br/>(define (gcd\u00a0%eax\u00a0%ecx)<br/>  (define\u00a0%edx 0)<br/>  (define (main) (goto loop))<br/>  (define (loop) (cmp 0\u00a0%ecx)<br/>                 (je end cont))<br/>  (define (cont) (set!-values [%eax\u00a0%edx] (quotient/remainder\u00a0%eax\u00a0%ecx))<br/>                 (set!\u00a0%eax\u00a0%ecx)<br/>                 (set!\u00a0%ecx\u00a0%edx)<br/>                 (goto loop))<br/>  (define (end)  (printf \"result: ~s\\n\"\u00a0%eax)<br/>                 (return\u00a0%eax))<br/>  (main))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 68, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Flow Control\"<br/>\tURL: http://rosettacode.org/wiki/Flow_Control_Structures<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; return -- Return early from function (normally, functions return</span><br/><span class=\"co1\">; result of last evaluation).</span><br/>\u00a0<br/>hatefive: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Prints value unless it's the number 5.\"</span><br/>\tvalue <span class=\"st0\">\"Value to print.\"</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">if</span> value = <span class=\"nu0\">5</span> <span class=\"br0\">[</span><span class=\"kw2\">return</span> <span class=\"st0\">\"I hate five!\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw3\">print</span> value<br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Function hatefive, with various values:\"</span><br/>hatefive <span class=\"nu0\">99</span><br/>hatefive <span class=\"nu0\">13</span><br/>hatefive <span class=\"nu0\">5</span><br/>hatefive <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">; break -- Break out of current loop.</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Loop to 10, but break out at five:\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">repeat</span> i <span class=\"nu0\">10</span> <span class=\"br0\">[</span><br/>\t<span class=\"kw2\">if</span> i = <span class=\"nu0\">5</span> <span class=\"br0\">[</span><span class=\"kw2\">break</span><span class=\"br0\">]</span><br/>\t<span class=\"kw3\">print</span> i<br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; catch/throw -- throw breaks out of a code block to enclosing catch.</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Start to print two lines, but throw out after the first:\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">catch</span> <span class=\"br0\">[</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"First\"</span><br/>\t<span class=\"kw2\">throw</span> <span class=\"st0\">\"I'm done!\"</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"Second\"</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Using named catch blocks, you can select which catcher you want when throwing.</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Throw from inner code block, caught by outer:\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">catch</span><span class=\"sy0\">/</span>name <span class=\"br0\">[</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"Outer catch block.\"</span><br/>\t<span class=\"kw2\">catch</span><span class=\"sy0\">/</span>name <span class=\"br0\">[</span><br/>\t\t<span class=\"kw3\">print</span> <span class=\"st0\">\"Inner catch block.\"</span><br/>\t\t<span class=\"kw2\">throw</span><span class=\"sy0\">/</span>name <span class=\"st0\">\"I'm done!\"</span> 'Johnson<br/>\t\t<span class=\"kw3\">print</span> <span class=\"st0\">\"We never get here.\"</span><br/>\t<span class=\"br0\">]</span> 'Clemens<br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"We never get here, either.\"</span><br/><span class=\"br0\">]</span> 'Johnson<br/>\u00a0<br/><span class=\"co1\">; try</span><br/>\u00a0<br/>div: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Divide first number by second.\"</span><br/>\ta b<br/>\t<span class=\"sy0\">/</span>local r <span class=\"st0\">\"Result\"</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">if</span> <span class=\"kw3\">error?</span> <span class=\"kw2\">try</span> <span class=\"br0\">[</span>r: a <span class=\"sy0\">/</span> b<span class=\"br0\">]</span> <span class=\"br0\">[</span>r: <span class=\"st0\">\"Error!\"</span><span class=\"br0\">]</span><br/>\tr <span class=\"co1\">; Functions return last value evaluated.</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"Report error on bad division:\"</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> div <span class=\"nu0\">10</span> <span class=\"nu0\">4</span><br/><span class=\"kw3\">print</span> div <span class=\"nu0\">10</span> <span class=\"nu0\">2</span><br/><span class=\"kw3\">print</span> div <span class=\"nu0\">10</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">print</span> div <span class=\"nu0\">10</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">call</span>  routineName                      <span class=\"coMULTI\">/*no arguments passed to routine.*/</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">50</span>                  <span class=\"coMULTI\">/*one argument (fifty) passed.   */</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">50</span>,<span class=\"nu0\">60</span>               <span class=\"coMULTI\">/*two arguments        passed.   */</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">50</span>, <span class=\"nu0\">60</span>              <span class=\"coMULTI\">/*(same as above)                */</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">50</span> ,<span class=\"nu0\">60</span>              <span class=\"coMULTI\">/*(same as above)                */</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span> , <span class=\"nu0\">8</span><span class=\"sy0\">**</span><span class=\"nu0\">4</span> - <span class=\"nu0\">4</span>     <span class=\"coMULTI\">/*(same as above)                */</span><br/><span class=\"kw1\">call</span>  routineName  <span class=\"nu0\">50</span> , , , <span class=\"nu0\">70</span>         <span class=\"coMULTI\">/*4 args passed, 2nd&amp;3rd omitted.*/</span><br/>                                       <span class=\"coMULTI\">/*omitted args are   NOT  null.  */</span><br/><span class=\"kw1\">call</span>  routineName  ,,,,,,,,,,,,,,,,<span class=\"nu0\">800</span> <span class=\"coMULTI\">/*17 args passed, 16 omitted.    */</span><br/><span class=\"kw1\">call</span>   <span class=\"kw6\">date</span>                            <span class=\"coMULTI\">/*looks for DATE internally first*/</span><br/><span class=\"kw1\">call</span>  <span class=\"st0\">'DATE'</span>                           <span class=\"coMULTI\">/*  \"    \"    \"  BIF | externally*/</span></pre>"}, {"lang": "Ring", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>i = 1<br/>while true<br/>      see i + nl<br/>      if i = 10 see \"Break!\" exit ok<br/>      i = i + 1 <br/>end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">begin</span><br/>  <span class=\"co1\"># some code that may raise an exception</span><br/><span class=\"kw1\">rescue</span> ExceptionClassA <span class=\"sy0\">=&gt;</span> a<br/>  <span class=\"co1\"># handle code</span><br/><span class=\"kw1\">rescue</span> ExceptionClassB, ExceptionClassC <span class=\"sy0\">=&gt;</span> b_or_c<br/>  <span class=\"co1\"># handle ...</span><br/><span class=\"kw1\">rescue</span><br/>  <span class=\"co1\"># handle all other exceptions</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"co1\"># when no exception occurred, execute this code</span><br/><span class=\"kw1\">ensure</span><br/>  <span class=\"co1\"># execute this code always</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "SAS", "loc": 41, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* GOTO: as in other languages<br/>   STOP: to stop current data step */</span><br/><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>\t<span class=\"kw3\">n</span>=<span class=\"nu0\">1</span>;<br/>\tp=<span class=\"nu0\">1</span>;<br/>L1:<br/>\t<span class=\"kw3\">put</span> <span class=\"kw3\">n</span> p;<br/>\t<span class=\"kw3\">n</span>=<span class=\"kw3\">n</span>+<span class=\"nu0\">1</span>;<br/>\t<span class=\"kw5\">if</span> n&lt;=p <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L1;<br/>\tp=p+<span class=\"nu0\">1</span>;<br/>\t<span class=\"kw3\">n</span>=<span class=\"nu0\">1</span>;<br/>\t<span class=\"kw5\">if</span> p&gt;<span class=\"nu0\">10</span> <span class=\"kw5\">then</span> <span class=\"kw4\">stop</span>;<br/>\t<span class=\"kw4\">goto</span> L1;<br/>\u00a0<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/* LINK: equivalent of GOSUB in BASIC<br/>   RETURN: after a LINK, or to return to the beginning of data step */</span><br/><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/><span class=\"kw3\">input</span> a b;<br/><span class=\"kw4\">link</span> gcd;<br/><span class=\"kw3\">put</span> a b gcd;<br/><span class=\"kw4\">return</span>;<br/>\u00a0<br/>gcd:<br/>\t_a=a;<br/>\t_b=b;<br/>\t<span class=\"kw5\">do</span> <span class=\"kw5\">while</span><span class=\"br0\">(</span>_b&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\t_r=<span class=\"kw3\">mod</span><span class=\"br0\">(</span>_a,_b<span class=\"br0\">)</span>;<br/>\t_a=_b;<br/>\t_b=_r;<br/>\t<span class=\"kw5\">end</span>;<br/>\tgcd=_a;<br/>\t<span class=\"kw4\">return</span>;<br/>\u00a0<br/>cards;<br/><span class=\"nu0\">2</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">533</span> <span class=\"nu0\">221</span><br/><span class=\"nu0\">8</span> <span class=\"nu0\">44</span><br/>;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Goto.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">continuations</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Goto <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Label<span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Label <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> GotoThunk<span class=\"br0\">(</span>label<span class=\"sy0\">:</span> Label<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Throwable<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> label<span class=\"sy0\">:</span> Label <span class=\"sy0\">@</span>suspendable <span class=\"sy0\">=</span><br/>    shift<span class=\"br0\">(</span><span class=\"br0\">(</span>k<span class=\"sy0\">:</span> Label <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> executeFrom<span class=\"br0\">(</span>Label<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> goto<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> Label<span class=\"br0\">)</span><span class=\"sy0\">:</span> Nothing <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> GotoThunk<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> executeFrom<span class=\"br0\">(</span>label<span class=\"sy0\">:</span> Label<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nextLabel <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>      label.<span class=\"me1\">k</span><span class=\"br0\">(</span>label<span class=\"br0\">)</span><br/>      None<br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> g<span class=\"sy0\">:</span> GotoThunk <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>g.<span class=\"me1\">label</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nextLabel.<span class=\"me1\">isDefined</span><span class=\"br0\">)</span> executeFrom<span class=\"br0\">(</span>nextLabel.<span class=\"me1\">get</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SSEM", "loc": 3, "block": "<pre class=\"text highlighted_source\">00101000000000000000000000000000      20 to CI<br/>...<br/>01010000000000000000000000000000  20. 10</pre>"}, {"lang": "Stata", "loc": 16, "block": "<pre class=\"text highlighted_source\">mata<br/>function pythagorean_triple(n) {<br/>\tfor (a=1; a&lt;=n; a++) {<br/>\t\tfor (b=a; b&lt;=n-a; b++) {<br/>\t\t\tc=n-a-b<br/>\t\t\tif (c&gt;b &amp; c*c==a*a+b*b) {<br/>\t\t\t\tprintf(\"%f\u00a0%f\u00a0%f\\n\",a,b,c)<br/>\t\t\t\tgoto END<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\tEND:<br/>}<br/>\u00a0<br/>pythagorean_triple(1980)<br/>165 900 915</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\">after <span class=\"nu0\">1000</span> <span class=\"br0\">{</span>myroutine x<span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 7, "block": "<pre class=\"vbnet highlighted_source\">  <span class=\"kw1\">Sub</span> bar2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Dim</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">GoTo</span> label<br/>      x <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>label:<br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span></pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">continue; continue(n);  // continue nth nested loop<br/>break; break(n);  // break out of nth nested loop<br/>try{ ... }catch(exception){ ... } [else{ ... }]<br/>onExit(fcn);  // run fcn when enclosing function exits</pre>"}]}