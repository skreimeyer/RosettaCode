{"task": "Random_numbers", "blocks": [{"lang": "Ada", "loc": 23, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>;                       <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;          <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Normal_Random <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Normal_Distribution<br/>            <span class=\"br0\">(</span>  Seed \u00a0: Generator;<br/>               Mu   \u00a0: Float\u00a0:= <span class=\"nu0\">1.0</span>;<br/>               Sigma\u00a0: Float\u00a0:= <span class=\"nu0\">0.5</span><br/>            <span class=\"br0\">)</span>  <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span> <br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span><br/>         Mu + <span class=\"br0\">(</span>Sigma * Sqrt <span class=\"br0\">(</span>-<span class=\"nu0\">2.0</span> * Log <span class=\"br0\">(</span>Random <span class=\"br0\">(</span>Seed<span class=\"br0\">)</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> * Cos <span class=\"br0\">(</span><span class=\"nu0\">2.0</span> * Pi * Random <span class=\"br0\">(</span>Seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Normal_Distribution;<br/>\u00a0<br/>   Seed        \u00a0: Generator;<br/>   Distribution\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span>_000<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float; <br/><span class=\"kw1\">begin</span><br/>   Reset <span class=\"br0\">(</span>Seed<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Distribution'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Distribution <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Normal_Distribution <span class=\"br0\">(</span>Seed<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Normal_Random;</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> random normal <span class=\"sy1\">=</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span>  <span class=\"coMULTI\"># normal distribution, centered on 0, std dev 1 #</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>2<span class=\"sy1\">*</span><span class=\"kw24\">log</span><span class=\"br0\">(</span>random<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw24\">cos</span><span class=\"br0\">(</span>2<span class=\"sy1\">*</span><span class=\"kw23\">pi</span><span class=\"sy1\">*</span>random<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>1000<span class=\"br0\">]</span><span class=\"kw3\">REAL</span> rands<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> rands <span class=\"kw2\">DO</span><br/>    rands<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1 <span class=\"sy1\">+</span> random normal<span class=\"sy1\">/</span>2<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> limit<span class=\"sy1\">=</span>10<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>limit<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>d.6d<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">-</span>d.5d<span class=\"st0\">\" ... )\"</span>$<span class=\"sy1\">,</span> rands<span class=\"br0\">[</span><span class=\"sy1\">:</span>limit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">40</span><br/>   R <span class=\"sy0\">.=</span> RandN<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span>  <span class=\"co1\">; mean = 1.0, standard deviation = 0.5</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%R%</span><br/>\u00a0<br/>RandN<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Normally distributed random numbers of mean = m, std.dev = s by Box-Muller method</span><br/>   Static i<span class=\"sy0\">,</span> Y<br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span>\u00a0!i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; every other call</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> U<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> V<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6.2831853071795862</span><br/>      U <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">ln</span></a><span class=\"br0\">(</span>U<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>s<br/>      Y <span class=\"sy0\">:=</span> m <span class=\"sy0\">+</span> U<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sin</span></a><span class=\"br0\">(</span>V<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span> m <span class=\"sy0\">+</span> U<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">cos</span></a><span class=\"br0\">(</span>V<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">Return</span> Y<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre class=\"awk highlighted_source\">$ awk 'func r<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"kw4\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">6.2831853</span><span class=\"sy3\">*</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>;i<span class=\"sy2\">&lt;</span><span class=\"nu0\">1000</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span>s=s<span class=\"st0\">\" \"</span><span class=\"nu0\">1</span><span class=\"sy3\">+</span><span class=\"nu0\">0.5</span><span class=\"sy3\">*</span>r<span class=\"br0\">(</span><span class=\"br0\">)</span>;<span class=\"kw5\">print</span> s<span class=\"br0\">}</span>'</pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre>RANDOMIZE TIMER 'seeds random number generator with the system time\npi = 3.141592653589793#\nDIM a(1 TO 1000) AS DOUBLE\nCLS\nFOR i = 1 TO 1000\n   a(i) = 1 + SQR(-2 * LOG(RND)) * COS(2 * pi * RND)\nNEXT i\n</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      DIM array(999)<br/>      FOR number% = 0 TO 999<br/>        array(number%) = 1.0 + 0.5 * SQR(-2*LN(RND(1))) * COS(2*PI*RND(1))<br/>      NEXT<br/>\u00a0<br/>      mean = SUM(array()) / (DIM(array(),1) + 1)<br/>      array() -= mean<br/>      stdev = MOD(array()) / SQR(DIM(array(),1) + 1)<br/>\u00a0<br/>      PRINT \"Mean = \"\u00a0; mean<br/>      PRINT \"Standard deviation = \"\u00a0; stdev</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#ifndef M_PI</span><br/><span class=\"co2\">#define M_PI 3.14159265358979323846</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">double</span> drand<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/* uniform distribution, (0..1] */</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>RAND_MAX<span class=\"sy0\">+</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">double</span> random_normal<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/* normal distribution, centered on 0, std dev 1 */</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>drand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>M_PI<span class=\"sy0\">*</span>drand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">double</span> rands<span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    rands<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">*</span>random_normal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> randomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> tRand<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span><span class=\"br0\">(</span>tRand<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 17, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  random_device seed<span class=\"sy4\">;</span><br/>  mt19937 engine<span class=\"br0\">(</span>seed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  normal_distribution<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> dist<span class=\"br0\">(</span><span class=\"nu16\">1.0</span>, <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">auto</span> rnd <span class=\"sy1\">=</span> bind<span class=\"br0\">(</span>dist, engine<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> v<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  generate<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, rnd<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>import '<span class=\"br0\">(</span>java<span class=\"sy0\">.</span>util <span class=\"kw1\">Random</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def normals<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>r <span class=\"br0\">(</span><span class=\"kw1\">Random</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>take <span class=\"nu0\">1000</span> <span class=\"br0\">(</span>repeatedly #<span class=\"br0\">(</span>-<span class=\"sy0\">&gt;</span> r <span class=\"sy0\">.</span>nextGaussian <span class=\"br0\">(</span>* <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span><br/>      collect <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>* -<span class=\"nu0\">2</span> <span class=\"br0\">(</span>log <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> pi <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> NormalRandom <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> mean<span class=\"sy0\">,</span> stdDev<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Necessary because it also defines an opCall.</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span> mean_<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span> stdDev_<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">mean</span> <span class=\"sy0\">=</span> mean_<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">stdDev</span> <span class=\"sy0\">=</span> stdDev_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">double</span> opCall<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> r1 <span class=\"sy0\">=</span> uniform01<span class=\"sy0\">,</span> r2 <span class=\"sy0\">=</span> uniform01<span class=\"sy0\">;</span> <span class=\"co1\">// Not nothrow.</span><br/>        <span class=\"kw1\">return</span> mean <span class=\"sy0\">+</span> stdDev <span class=\"sy0\">*</span> sqrt<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> r1.<span class=\"me1\">log</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI <span class=\"sy0\">*</span> r2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span> array<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> nRnd <span class=\"sy0\">=</span> NormalRandom<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> x<span class=\"sy0\">;</span> array<span class=\"br0\">)</span><br/>        <span class=\"co1\">//x = nRnd;</span><br/>        x <span class=\"sy0\">=</span> nRnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 19, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Randoms<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Values<span class=\"sy1\">:</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">999</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/><span class=\"co1\">//  Randomize;   Commented to obtain reproducible results</span><br/>  <span class=\"kw1\">for</span> I<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>Values<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>Values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    Values<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">RandG</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"co1\">// Mean = 1.0, StdDev = 0.5</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Mean          = '</span><span class=\"sy1\">,</span> <span class=\"kw3\">Mean</span><span class=\"br0\">(</span>Values<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Std Deviation = '</span><span class=\"sy1\">,</span> <span class=\"kw3\">StdDev</span><span class=\"br0\">(</span>Values<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 5, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> values <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">999</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> values<span class=\"sy1\">.</span><span class=\"me1\">Low</span> <span class=\"kw1\">to</span> values<span class=\"sy1\">.</span><span class=\"me1\">High</span> <span class=\"kw1\">do</span><br/>   values<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">RandG</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextGaussian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 97, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tl_time<span class=\"sy0\">:</span> TIME<br/>\tl_seed<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\tmath<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\trnd<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+random&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">RANDOM</span></a><br/>\tSize<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">once</span><br/>\t\t\t<span class=\"kw3\">Result</span><span class=\"sy0\">:=</span> <span class=\"nu0\">1000</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tergebnis<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><span class=\"br0\">]</span><br/>\t\t\ttavg<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\t\t\tx<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\ttmp<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\t\t\ttext <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\u00a0<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"co1\">-- initialize random generator</span><br/>\t\t\t<span class=\"kw2\">create</span> l_time.<span class=\"me1\">make_now</span><br/>     \t\t        l_seed <span class=\"sy0\">:=</span> l_time.<span class=\"me1\">hour</span><br/>      \t\t        l_seed <span class=\"sy0\">:=</span> l_seed <span class=\"sy0\">*</span> <span class=\"nu0\">60</span> <span class=\"sy0\">+</span> l_time.<span class=\"me1\">minute</span><br/>      \t\t        l_seed <span class=\"sy0\">:=</span> l_seed <span class=\"sy0\">*</span> <span class=\"nu0\">60</span> <span class=\"sy0\">+</span> l_time.<span class=\"me1\">second</span><br/>      \t\t        l_seed <span class=\"sy0\">:=</span> l_seed <span class=\"sy0\">*</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">+</span> l_time.<span class=\"me1\">milli_second</span><br/>      \t\t        <span class=\"kw2\">create</span> rnd.<span class=\"me1\">set_seed</span> <span class=\"br0\">(</span>l_seed<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">-- initialize random number container and math</span><br/>\t\t\t<span class=\"kw2\">create</span> ergebnis.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1</span>, size<span class=\"br0\">)</span><br/>\t\t\ttavg <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\u00a0<br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\tx <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tx <span class=\"sy0\">&gt;</span> ergebnis.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\ttmp <span class=\"sy0\">:=</span> randomNormal <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\ttavg <span class=\"sy0\">:=</span> tavg <span class=\"sy0\">+</span> tmp<br/>\t\t\t\tergebnis.<span class=\"me1\">enter</span> <span class=\"br0\">(</span>tmp , x<span class=\"br0\">)</span><br/>\t\t\t\tx <span class=\"sy0\">:=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t\ttavg <span class=\"sy0\">:=</span> tavg <span class=\"sy0\">/</span> ergebnis.<span class=\"me1\">count</span><br/>\t\t\ttext <span class=\"sy0\">:=</span> <span class=\"st0\">\"Average: \"</span><br/>\t\t\ttext.<span class=\"me1\">append_double</span> <span class=\"br0\">(</span>tavg<span class=\"br0\">)</span><br/>\t\t\ttext.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tprint<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\ttmp <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\tx<span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tx <span class=\"sy0\">&gt;</span> ergebnis.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\ttmp <span class=\"sy0\">:=</span> tmp <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ergebnis.<span class=\"me1\">item</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> tavg<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><br/>\t\t\t\tx <span class=\"sy0\">:=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t\ttmp <span class=\"sy0\">:=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>tmp <span class=\"sy0\">/</span> ergebnis.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\ttext <span class=\"sy0\">:=</span> <span class=\"st0\">\"Standard Deviation: \"</span><br/>\t\t\ttext.<span class=\"me1\">append_double</span> <span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>\t\t\ttext.<span class=\"me1\">append</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tprint<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\trandomNormal<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\u00a0<br/>\t\t<span class=\"kw2\">local</span><br/>\u00a0<br/>      \t\t        first<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>      \t\t        second<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\u00a0<br/>\t\t<span class=\"kw2\">do</span><br/>                        rnd.<span class=\"me1\">forth</span><br/>                        first <span class=\"sy0\">:=</span> rnd.<span class=\"me1\">double_item</span><br/>                        rnd.<span class=\"me1\">forth</span><br/>                        second <span class=\"sy0\">:=</span> rnd.<span class=\"me1\">double_item</span><br/>\u00a0<br/>                        <span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> math.<span class=\"me1\">cosine</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> math.<span class=\"me1\">pi</span> <span class=\"sy0\">*</span> first<span class=\"br0\">)</span> <span class=\"sy0\">*</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> math.<span class=\"me1\">log</span> <span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 32, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import extensions'math.<br/>\u00a0<br/>randomNormal = [ ^ mathControl cos(2 * pi_value * randomGenerator nextReal) <br/>                      * mathControl sqrt(-2 * mathControl ln(randomGenerator nextReal)) ].<br/>\u00a0<br/>program =<br/>[<br/>    array&lt;real&gt; a\u00a0:= real&lt;&gt;(1000).<br/>\u00a0<br/>    real tAvg\u00a0:= 0.<br/>    0 till(a length) do(:x)<br/>    [<br/>        a[x]\u00a0:= randomNormal() / 2 + 1.<br/>        tAvg += a[x].<br/>    ].<br/>\u00a0<br/>    tAvg /= a length.<br/>    console printLine(\"Average: \", tAvg).<br/>\u00a0<br/>    real s\u00a0:= 0.<br/>    0 till(a length) do(:x)<br/>    [<br/>        s += mathControl power(a[x] - tAvg, 2)<br/>    ].<br/>\u00a0<br/>    s\u00a0:= mathControl sqrt(s / 1000).<br/>\u00a0<br/>    console printLine(\"Standard Deviation: \", s).<br/>\u00a0<br/>    console readChar.    <br/>].</pre>"}, {"lang": "Elixir", "loc": 16, "block": "<pre class=\"text highlighted_source\">defmodule Random do<br/>  def normal(mean, sd) do<br/>    {a, b} = {:rand.uniform,\u00a0:rand.uniform}<br/>    mean + sd * (:math.sqrt(-2 *\u00a0:math.log(a)) *\u00a0:math.cos(2 *\u00a0:math.pi * b)) <br/>  end <br/>end<br/>\u00a0<br/>std_dev = fn (list) -&gt;<br/>            mean = Enum.sum(list) / length(list)<br/>            sd = Enum.reduce(list, 0, fn x,acc -&gt; acc + (x-mean)*(x-mean) end) / length(list)<br/>                 |&gt;\u00a0:math.sqrt<br/>            IO.puts \"Mean: #{mean},\\tStdDev: #{sd}\"<br/>          end<br/>\u00a0<br/>xs = for _ &lt;- 1..1000, do: Random.normal(1.0, 0.5)<br/>std_dev.(xs)</pre>"}, {"lang": "Erlang", "loc": 33, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"kw3\">tl</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">hd</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Length</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span> <span class=\"sy3\">/</span> <span class=\"re5\">Length</span><span class=\"sy1\">;</span><br/><span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Length</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"kw3\">tl</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw3\">hd</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Length</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Mean</span> <span class=\"sy3\">=</span> <span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Mean</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"sy1\">,</span> <span class=\"re5\">Mean</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Diff</span> <span class=\"sy3\">=</span> <span class=\"kw3\">hd</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"re5\">Mean</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">DiffSqr</span> <span class=\"sy3\">=</span> <span class=\"re5\">Diff</span> <span class=\"sy3\">*</span> <span class=\"re5\">Diff</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"kw3\">tl</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Mean</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">+</span> <span class=\"re5\">DiffSqr</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">stddev</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re3\">variance</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">normal</span><span class=\"br0\">(</span><span class=\"re5\">Mean</span><span class=\"sy1\">,</span> <span class=\"re5\">StdDev</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">U</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">V</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Mean</span> <span class=\"sy3\">+</span> <span class=\"re5\">StdDev</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"re5\">U</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span>  <span class=\"co1\">% Erlang's math:log is the natural logarithm.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">X</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span> <span class=\"re3\">normal</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"mean = ~w<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">mean</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"stddev = ~w<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">stddev</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM DISTRIBUTION<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>! formulas taken from TI-59 Master Library manual<br/>\u00a0<br/>CONST NUM_ITEM=1000<br/>\u00a0<br/>!VAR SUMX#,SUMX2#,R1#,R2#,Z#,I%<br/>\u00a0<br/>DIM A#[1000]<br/>\u00a0<br/>BEGIN<br/>! seeds random number generator with system time<br/>   RANDOMIZE(TIMER)<br/>\u00a0<br/>   PRINT(CHR$(12);) \u00a0!CLS<br/>   SUMX#=0  SUMX2#=0<br/>\u00a0<br/>   FOR I%=1 TO NUM_ITEM DO<br/>      R1#=RND(1)  R2#=RND(1)<br/>      Z#=SQR(-2*LOG(R1#))*COS(2*\u03c0*R2#)<br/>      A#[I%]=Z#/2+1  \u00a0! I want a normal distribution with<br/>                     \u00a0!      mean=1 and std.dev=0.5<br/>      SUMX#+=A#[I%]  SUMX2#+=A#[I%]*A#[I%]<br/>   END FOR<br/>\u00a0<br/>   Z#=SUMX#/NUM_ITEM<br/>\u00a0<br/>   PRINT(\"Average is\";Z#)<br/>   PRINT(\"Standard dev. is\";SQR(SUMX2#/NUM_ITEM-Z#*Z#))<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;v=normal(1,1000)*0.5+1;<br/>&gt;mean(v), dev(v)<br/> 1.00291801071<br/> 0.498226876528<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 15, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> misc.e<br/>\u00a0<br/><span class=\"kw1\">function</span> RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> x1<span class=\"sy2\">,</span> x2<br/>    x1 <span class=\"sy1\">=</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">1000000</span><br/>    x2 <span class=\"sy1\">=</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">1000000</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"kw2\">log</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>PI<span class=\"sy1\">*</span>x2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"kw2\">sequence</span> s<br/>s <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy1\">*</span> RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> MathNet.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Distributions</span>.<span class=\"me1\">Normal</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>,<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">1000</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _<span class=\"sy0\">-&gt;</span>n.<span class=\"me1\">Sample</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: random\u00a0;<br/>1000 [ 1.0 0.5 normal-random-float ] replicate</pre>"}, {"lang": "Falcon", "loc": 7, "block": "<pre class=\"falcon highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">+=</span> norm_rand_num<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">function</span> norm_rand_num<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   pi <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><a href=\"http://falconpl.org/project_docs/core/functions.html#acos\"><span class=\"kw6\">acos</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://falconpl.org/project_docs/core/functions.html#cos\"><span class=\"kw6\">cos</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pi <span class=\"sy0\">*</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#random\"><span class=\"kw6\">random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#pow\"><span class=\"kw6\">pow</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#log\"><span class=\"kw6\">log</span></a><span class=\"br0\">(</span><a href=\"http://falconpl.org/project_docs/core/functions.html#random\"><span class=\"kw6\">random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"nu0\">2</span> <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Fantom", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static const Float PI\u00a0:= 0.0f.acos * 2  // we need to precompute PI<br/>\u00a0<br/>  static Float randomNormal ()<br/>  {<br/>    return (Float.random * PI * 2).cos * (Float.random.log * -2).sqrt<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    mean\u00a0:= 1.0f<br/>    sd\u00a0:= 0.5f<br/>    Float[] values\u00a0:= [,] // this is the collection to fill with random numbers<br/>    1000.times { values.add (randomNormal * sd + mean) }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 16, "block": "<pre class=\"text highlighted_source\">require random.fs<br/>here to seed<br/>\u00a0<br/>-1. 1 rshift 2constant MAX-D\t\\ or s\" MAX-D\" ENVIRONMENT? drop<br/>\u00a0<br/>: frnd ( -- f )\t\t\t\\ uniform distribution 0..1<br/>  rnd rnd dabs d&gt;f MAX-D d&gt;f f/\u00a0;<br/>\u00a0<br/>: frnd-normal ( -- f )\t\t\\ centered on 0, std dev 1<br/>  frnd pi f* 2e f* fcos<br/>  frnd fln -2e f* fsqrt f*\u00a0;<br/>\u00a0<br/>: ,normals ( n -- )\t\t\\ store many, centered on 1, std dev 0.5<br/>  0 do frnd-normal 0.5e f* 1e f+ f, loop\u00a0;<br/>\u00a0<br/>create rnd-array 1000 ,normals</pre>"}, {"lang": "Fortran", "loc": 24, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Random<br/>\u00a0<br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, pi, temp, mean <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>, sd <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>\u00a0<br/>  pi <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">*</span><span class=\"kw4\">ATAN</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">CALL</span> <span class=\"kw4\">RANDOM_NUMBER</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"co1\">! Uniform distribution</span><br/>\u00a0<br/><span class=\"co1\">! Now convert to normal distribution</span><br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><br/>    temp <span class=\"sy0\">=</span> sd <span class=\"sy0\">*</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2.0</span><span class=\"sy0\">*</span><span class=\"kw4\">LOG</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">COS</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span>array<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> mean<br/>    array<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sd <span class=\"sy0\">*</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2.0</span><span class=\"sy0\">*</span><span class=\"kw4\">LOG</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">SIN</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span>array<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> mean<br/>    array<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"co1\">! Check mean and standard deviation</span><br/>  mean <span class=\"sy0\">=</span> SUM<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>  sd <span class=\"sy0\">=</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>SUM<span class=\"br0\">(</span><span class=\"br0\">(</span>array <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,F8.6)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Mean = \"</span>, mean<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(A,F8.6)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Standard Deviation = \"</span>, sd<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Random</pre>"}, {"lang": "FreeBASIC", "loc": 36, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> pi <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">3.141592653589793</span><br/><span class=\"kw1\">Randomize</span><br/>\u00a0<br/><span class=\"co1\">' Generates normally distributed random numbers with mean 0 and standard deviation 1</span><br/><span class=\"kw1\">Function</span> randomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> <br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Cos</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span> * pi * <span class=\"kw1\">Rnd</span><span class=\"br0\">)</span> * <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.0</span> * <span class=\"kw1\">Log</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> r<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">0.0</span><br/>\u00a0<br/><span class=\"co1\">' Generate 1000 normally distributed random numbers</span><br/><span class=\"co1\">' with mean 1 and standard deviation 0.5</span><br/><span class=\"co1\">' and calculate their sum</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999</span> <br/>   r<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1.0</span> + randomNormal/<span class=\"nu0\">2.0</span><br/>   sum += r<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> mean <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = sum / <span class=\"nu0\">1000.0</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> sd <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>sum = <span class=\"nu0\">0.0</span><br/><span class=\"co1\">' Now calculate their standard deviation</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999</span><br/>  sum += <span class=\"br0\">(</span>r<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - mean<span class=\"br0\">)</span> ^ <span class=\"nu0\">2.0</span><br/><span class=\"kw1\">Next</span><br/>sd  = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>sum/<span class=\"nu0\">1000.0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Mean is              \"</span>; mean<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Standard Deviation is\"</span>; sd<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Free Pascal", "loc": 3, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> randg<span class=\"br0\">(</span>mean<span class=\"sy1\">,</span>stddev<span class=\"sy1\">:</span> float<span class=\"br0\">)</span><span class=\"sy1\">:</span> float<span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> gaussianRand count <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> o <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> System.<span class=\"me1\">Math</span>.<span class=\"me1\">PI</span><br/>    <span class=\"kw1\">let</span> gaussrnd <span class=\"sy0\">=</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span>. <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>. <span class=\"sy0\">*</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span>o.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>. <span class=\"sy0\">*</span> pi <span class=\"sy0\">*</span> o.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> .. <span class=\"br0\">(</span><span class=\"kw4\">int</span> count<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> gaussrnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span></pre>"}, {"lang": "Go", "loc": 46, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> mean <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">const</span> stdv <span class=\"sy2\">=</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><br/><span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">1000</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> list <span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><span class=\"kw4\">float64</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>        list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> mean <span class=\"sy3\">+</span> stdv<span class=\"sy3\">*</span>rand<span class=\"sy3\">.</span>NormFloat64<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// show computed mean and stdv of list</span><br/>    <span class=\"kw1\">var</span> s<span class=\"sy1\">,</span> sq <span class=\"kw4\">float64</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>        s <span class=\"sy2\">+=</span> v<br/>    <span class=\"sy1\">}</span><br/>    cm <span class=\"sy2\">:=</span> s <span class=\"sy3\">/</span> n<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>        d <span class=\"sy2\">:=</span> v <span class=\"sy3\">-</span> cm<br/>        sq <span class=\"sy2\">+=</span> d <span class=\"sy3\">*</span> d<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"mean\u00a0%.3f, stdv\u00a0%.3f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> cm<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>sq<span class=\"sy3\">/</span><span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)))</span><br/>    <span class=\"co1\">// show histogram by hdiv divisions per stdv over +/-hrange stdv</span><br/>    <span class=\"kw1\">const</span> hdiv <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">const</span> hrange <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">var</span> h <span class=\"sy1\">[</span><span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>hrange<span class=\"sy3\">*</span>hdiv<span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>        bin <span class=\"sy2\">:=</span> hrange<span class=\"sy3\">*</span>hdiv <span class=\"sy3\">+</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Floor<span class=\"sy1\">((</span>v<span class=\"sy3\">-</span>mean<span class=\"sy1\">)</span><span class=\"sy3\">/</span>stdv<span class=\"sy3\">*</span>hdiv<span class=\"sy3\">+.</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> bin &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; bin &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>h<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            h<span class=\"sy1\">[</span>bin<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">const</span> hscale <span class=\"sy2\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>c<span class=\"sy3\">+</span>hscale<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span>hscale<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "FutureBasic", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn RandomZeroToOne as double<br/>dim as double result<br/>BeginCCode<br/>  result = (double)( (rand()\u00a0% 100000 ) * 0.00001 );<br/>EndC<br/>end fn = result<br/>\u00a0<br/>local fn RandomGaussian as double<br/>dim as double r<br/>\u00a0<br/>r = fn RandomZeroToOne             <br/>end fn = 1 + .5 * ( sqr( -2 * log(r) ) * cos( 2 * pi * r ) )<br/>\u00a0<br/>dim as long i<br/>dim as double mean, std, a(1000)<br/>\u00a0<br/>for i = 1 to 1000<br/>  a(i) = fn RandomGaussian<br/>  mean += a(i)<br/>next<br/>mean = mean / 1000<br/>\u00a0<br/>for i = 1 to 1000<br/>  std += ( a(i) - mean )^2<br/>next<br/>std = std / 1000<br/>\u00a0<br/>print \"           Average:\"; mean<br/>print \"Standard Deviation:\"; std<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\">rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> r, i <span class=\"sy0\">-&gt;</span> r <span class=\"sy0\">&lt;&lt;</span> rnd.<span class=\"me1\">nextGaussian</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 14, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/>pairs <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>pairs <span class=\"br0\">(</span>x:y:zs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>:pairs zs<br/>pairs <span class=\"sy0\">_</span>        <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>gauss mu sigma <span class=\"br0\">(</span>r1<span class=\"sy0\">,</span>r2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>  mu <span class=\"sy0\">+</span> sigma <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:log\"><span class=\"kw3\">log</span></a> r1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span> r2<span class=\"br0\">)</span><br/>\u00a0<br/>gaussians <span class=\"sy0\">::</span> <span class=\"br0\">(</span>RandomGen g<span class=\"sy0\">,</span> Random a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> g <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>gaussians n g <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>gauss <span class=\"nu0\">1.0</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> pairs <span class=\"sy0\">$</span> randoms g<br/>\u00a0<br/>result <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">]</span><br/>result <span class=\"sy0\">=</span> getStdGen <span class=\"sy0\">&gt;&gt;=</span> \\g <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> gaussians <span class=\"nu0\">1000</span> g</pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> n<span class=\"sy1\">=</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span> m<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> s<span class=\"sy1\">=</span><span class=\"nu0\">0.5</span><span class=\"sy1\">,</span> array<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>pi <span class=\"sy1\">=</span> <span class=\"nu0\">4</span> <span class=\"sy1\">*</span> <span class=\"kw1\">ATAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>array <span class=\"sy1\">=</span> s <span class=\"sy1\">*</span> <span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"kw1\">LOG</span><span class=\"br0\">(</span><span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">0.5</span>  <span class=\"sy1\">*</span> <span class=\"kw1\">COS</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>pi<span class=\"sy1\">*</span><span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> m </pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> L<br/>    L <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> L<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1.0</span> <span class=\"sy1\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy1\">*</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2.0</span> <span class=\"sy1\">*</span> <span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span> <span class=\"sy1\">*</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">pi</span> <span class=\"sy1\">*</span> <span class=\"sy1\">?</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>L<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">result <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">*</span>randomn<span class=\"br0\">(</span>seed,<span class=\"nu0\">1000</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">urand=:\u00a0<a class=\"__cf_email__\" data-cfemail=\"cef18e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$ 0: <br/>zrand=: <span class=\"sy0\">(</span><span class=\"nu0\">2</span> o. <span class=\"nu0\">2p1</span> * urand<span class=\"sy0\">)</span> * [:\u00a0%: <span class=\"nu0\">_2</span> * [: ^. urand<br/>\u00a0<br/><span class=\"nu0\">1</span> + <span class=\"nu0\">0.5</span> * zrand <span class=\"nu0\">100</span></pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">double</span> mean <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span>, std <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rng <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>list.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mean <span class=\"sy0\">+</span> std <span class=\"sy0\">*</span> rng.<span class=\"me1\">nextGaussian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> randomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> randomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\"># 15-bit integers generated using the same formula as rand() from the Microsoft C Runtime.<br/># The random numbers are in [0 -- 32767] inclusive.<br/># Input: an array of length at least 2 interpreted as [count, state, ...]<br/># Output: [count+1, newstate, r] where r is the next pseudo-random number.<br/>def next_rand_Microsoft:<br/>  .[0] as $count | .[1] as $state<br/>  | ( (214013 * $state) + 2531011)\u00a0% 2147483648 # mod 2^31<br/>  | [$count+1 , ., (. / 65536 | floor) ]\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">randn(1000) * 0.5 + 1</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> da <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">1000</span><span class=\"br0\">)</span>  da<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span> + <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">nextGaussian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// now check actual mean and SD</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mean <span class=\"sy0\">=</span> da.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sd <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>da.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>it - mean<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>it - mean<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Mean is $mean\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"S.D. is $sd\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 6, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>mean <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>sd <span class=\"sy0\">=</span><span class=\"nu0\">0.5</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span>   <span class=\"co1\">'   throw 1000 normal variates</span><br/>   a<span class=\"br0\">(</span> i<span class=\"br0\">)</span>  <span class=\"sy0\">=</span>mean <span class=\"sy0\">+</span>sd <span class=\"sy0\">*</span><span class=\"br0\">(</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> <span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pi <span class=\"sy0\">*</span> <span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i</pre>"}, {"lang": "Liberty BASIC", "loc": 6, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>mean <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>sd <span class=\"sy0\">=</span><span class=\"nu0\">0.5</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span>   <span class=\"co1\">'   throw 1000 normal variates</span><br/>   a<span class=\"br0\">(</span> i<span class=\"br0\">)</span>  <span class=\"sy0\">=</span>mean <span class=\"sy0\">+</span>sd <span class=\"sy0\">*</span><span class=\"br0\">(</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> <span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pi <span class=\"sy0\">*</span> <span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i</pre>"}, {"lang": "Logo", "loc": 10, "block": "<pre class=\"text highlighted_source\">to random.float  \u00a0; 0..1<br/>  localmake \"max.int lshift -1 -1<br/>  output quotient random\u00a0:max.int\u00a0:max.int<br/>end<br/>\u00a0<br/>to random.gaussian<br/>  output product cos random 360  sqrt -2 / ln random.float<br/>end<br/>\u00a0<br/>make \"randoms cascade 1000 [fput random.gaussian / 2 + 1\u00a0?] []</pre>"}, {"lang": "Lingo", "loc": 5, "block": "<pre class=\"text highlighted_source\">-- Returns a random float value in range 0..1<br/>on randf ()<br/>    n = random(the maxinteger)-1<br/>    return n / float(the maxinteger-1)<br/>end</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> list <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">do</span><br/>  list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.pi</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Function StdDev (A()) {<br/>          \\\\ A()  has a copy of values<br/>            N=Len(A())<br/>            if N&lt;1 then Error \"Empty Array\"<br/>            M=Each(A()) <br/>            k=0<br/>            \\\\ make sum, dev same type as A(k)<br/>            sum=A(k)-A(k)<br/>            dev=sum<br/>            \\\\ find mean<br/>            While M {<br/>                  sum+=Array(M)<br/>            }<br/>            Mean=sum/N<br/>            \\\\ make a pointet to A()<br/>            P=A()<br/>            \\\\ subtruct from each item<br/>            P-=Mean<br/>\u00a0<br/>            M=Each(P) <br/>            While M {<br/>                  dev+=Array(M)*Array(M)<br/>            }<br/>            \\\\ as pointer to arrray<br/>             =(if(dev&gt;0-&gt;Sqrt(dev/N), 0), Mean)<br/>      }<br/>      Function randomNormal {<br/>            \\\\ by default all numbers are double<br/>            \\\\ cos() get degrees<br/>          =1+Cos(360 * rnd) * Sqrt(-2 * Ln(rnd)) /2<br/>      }  <br/>      \\\\ fill array calling  randomNormal() for each item<br/>      Dim A(1000)&lt;&lt;randomNormal()<br/>      \\\\ we can pass a pointer to array and place it to stack of values<br/>      DisplayMeanAndStdDeviation(A())  ' mean ~ 1 std deviation ~0.5<br/>      \\\\ check M2000 rnd only<br/>      Dim B(1000)&lt;&lt;rnd<br/>      DisplayMeanAndStdDeviation(B())  ' mean ~ 0.5 std deviation ~0.28<br/>\u00a0<br/>\u00a0<br/>      DisplayMeanAndStdDeviation((0,0,14,14))  ' mean = 7 std deviation = 7<br/>      DisplayMeanAndStdDeviation((0,6,8,14))  ' mean = 7 std deviation = 5<br/>      DisplayMeanAndStdDeviation((6,6,8,8))  ' mean = 7 std deviation = 1<br/>\u00a0<br/>      Sub DisplayMeanAndStdDeviation(A)<br/>            \\\\ push to stack all items of an array (need an array pointer)<br/>            Push \u00a0! StdDev(A) <br/>            \\\\ read from strack two numbers<br/>            Print \"Mean is               \"; Number<br/>            Print \"Standard Deviation is \"; Number<br/>      End Sub<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">with(Statistics):<br/>Sample(Normal(1, 0.5), 1000);</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">RandomReal[NormalDistribution[1, 1/2], 1000]</pre>"}, {"lang": "MATLAB", "loc": 3, "block": "<pre class=\"matlab highlighted_source\">    mu = <span class=\"nu0\">1</span>; sd = <span class=\"nu0\">0.5</span>; <br/>    x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randn.html\"><span class=\"kw2\">randn</span></a><span class=\"br0\">(</span><span class=\"nu0\">1000</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> * sd + mu;<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">load(distrib)$<br/>\u00a0<br/>random_normal(1.0, 0.5, 1000);</pre>"}, {"lang": "MAXScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">arr = #()<br/>for i in 1 to 1000 do <br/>(<br/>    a = random 0.0 1.0<br/>    b = random 0.0 1.0<br/>    c = 1.0 + 0.5 * sqrt (-2*log a) * cos (360*b) -- Maxscript cos takes degrees<br/>    append arr c<br/>)</pre>"}, {"lang": "Metafont", "loc": 19, "block": "<pre class=\"text highlighted_source\">numeric col[];<br/>\u00a0<br/>m\u00a0:= 0;              \u00a0% m holds the mean, for testing purposes<br/>for i = 1 upto 1000:<br/>  col[i]\u00a0:= 1 + .5normaldeviate;<br/>  m\u00a0:= m + col[i];<br/>endfor<br/>\u00a0<br/>% testing<br/>m\u00a0:= m / 1000;      \u00a0% finalize the computation of the mean<br/>\u00a0<br/>s\u00a0:= 0;             \u00a0% in s we compute the standard deviation <br/>for i = 1 upto 1000:<br/>  s\u00a0:= s + (col[i] - m)**2;<br/>endfor<br/>s\u00a0:= sqrt(s / 1000);<br/>\u00a0<br/>show m, s;   \u00a0% and let's show that really they get what we wanted<br/>end</pre>"}, {"lang": "Mirah", "loc": 10, "block": "<pre class=\"text highlighted_source\">import java.util.Random<br/>\u00a0<br/>list = double[999]<br/>mean = 1.0<br/>std = 0.5<br/>rng = Random.new<br/>0.upto(998) do | i | <br/>    list[i] = mean + std * rng.nextGaussian<br/>end<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f7\t&lt;-&gt;\t\u041f8\t1/x\t\u041f6\t\u0418\u041f6\t\u041f9\t\u0421\u0427\t\u041f6\t1/x<br/>ln\t\u0418\u041f8\t*\t2\t*\t\u041a\u0432\u041a\u043e\u0440\t\u0418\u041f9\t2\t*\t\u043f\u0438<br/>*\tsin\t*\t\u0418\u041f7\t+\t\u0421/\u041f\t\u0411\u041f\t05</pre>"}, {"lang": "Modula-3", "loc": 21, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Rand <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> Random;<br/><span class=\"kw1\">FROM</span> Math <span class=\"kw1\">IMPORT</span> log<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> sqrt<span class=\"sy0\">,</span> Pi;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> rands<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGREAL</span>;<br/>\u00a0<br/><span class=\"coMULTI\">(* Normal distribution. *)</span><br/><span class=\"kw1\">PROCEDURE</span> RandNorm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">WITH</span> rand <span class=\"sy0\">=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Random.<span class=\"me1\">Default</span><span class=\"br0\">)</span>.<span class=\"me1\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">RETURN</span> <br/>        sqrt<span class=\"br0\">(</span><span class=\"sy0\">-</span>2.0D0 <span class=\"sy0\">*</span> log<span class=\"br0\">(</span>rand.<span class=\"me1\">longreal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>2.0D0 <span class=\"sy0\">*</span> Pi <span class=\"sy0\">*</span> rand.<span class=\"me1\">longreal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> RandNorm;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>rands<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>rands<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    rands<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 1.0D0 <span class=\"sy0\">+</span> 0.5D0 <span class=\"sy0\">*</span> RandNorm<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Rand.</pre>"}, {"lang": "NetRexx", "loc": 56, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">BigDecimal</span><br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">MathContext</span><br/>\u00a0<br/><span class=\"co1\">-- prologue</span><br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"co1\">-- get input, set defaults</span><br/><span class=\"kw1\">parse</span> arg dp mu sigma ec .<br/><span class=\"kw1\">if</span> mu    = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> mu    = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> mean             =  <span class=\"nu0\">1.0</span>; <span class=\"kw3\">else</span> mean             = mu<br/><span class=\"kw1\">if</span> sigma = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> sigma = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> stdDeviation     =  <span class=\"nu0\">0.5</span>; <span class=\"kw3\">else</span> stdDeviation     = sigma<br/><span class=\"kw1\">if</span> dp    = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> dp    = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> displayPrecision =    <span class=\"nu0\">1</span>; <span class=\"kw3\">else</span> displayPrecision = dp<br/><span class=\"kw1\">if</span> ec    = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> ec    = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> elements         = <span class=\"nu0\">1000</span>; <span class=\"kw3\">else</span> elements         = ec<br/>\u00a0<br/><span class=\"co1\">-- set up</span><br/>RNG = Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>numberList = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>numberList = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- generate list of random numbers</span><br/><span class=\"kw1\">loop</span> for elements<br/>  rn = mean + stdDeviation <span class=\"sy0\">*</span> RNG.<span class=\"me0\">nextGaussian</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  numberList.<span class=\"me0\">add</span><span class=\"br0\">(</span>BigDecimal<span class=\"br0\">(</span>rn, MathContext.<span class=\"me0\">DECIMAL128</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- report</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Mean:              \"</span> mean<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Standard Deviation:\"</span> stdDeviation<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Precision:         \"</span> displayPrecision<br/><span class=\"kw1\">say</span><br/>drawBellCurve<span class=\"br0\">(</span>numberList, displayPrecision<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method drawBellCurve<span class=\"br0\">(</span>numberList = java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span>, precision<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  Collections.<span class=\"me0\">sort</span><span class=\"br0\">(</span>numberList<span class=\"br0\">)</span><br/>  val = BigDecimal<br/>  lastN = <span class=\"st0\">''</span><br/>  nextN = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> val over numberList<br/>    nextN = Rexx<span class=\"br0\">(</span>val.<span class=\"me0\">toPlainString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, precision<span class=\"br0\">)</span><br/>    <span class=\"kw1\">select</span><br/>      <span class=\"kw3\">when</span> lastN = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">nop</span><br/>      <span class=\"kw3\">when</span> lastN <span class=\"sy0\">\\</span>= nextN <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> lastN<br/>      <span class=\"kw3\">otherwise</span> <span class=\"kw1\">nop</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'*\\-'</span><br/>    lastN = nextN<br/>    <span class=\"kw3\">end</span> val<br/>  <span class=\"kw1\">say</span> lastN<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#normal\"><span class=\"kw1\">normal</span></a> <span class=\"nu0\">1</span> <span class=\"nu0\">.5</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import math, strutils<br/>\u00a0<br/>const  precisn = 5<br/>var rs: TRunningStat<br/>\u00a0<br/>proc normGauss: float {.inline.} = 1 + 0.76 * cos(2*PI*random(1.0)) * sqrt(-2*log10(random(1.0)))<br/>\u00a0<br/>randomize()<br/>\u00a0<br/>for j in 0..5:<br/>   for i in 0..1000:<br/>      rs.push(normGauss())<br/>   echo(\"mean: \", $formatFloat(rs.mean,ffDecimal,precisn), <br/>        \" stdDev: \", $formatFloat(rs.standardDeviation(),ffDecimal,precisn))</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> RandomNumbers <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      rands <span class=\"sy0\">:=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> rands<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rands<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> rands<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rands<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALatan\"><span class=\"kw3\">atan</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.;;</span><br/><span class=\"kw1\">let</span> random_gaussian <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"nu0\">1</span><span class=\"sy0\">.</span> <span class=\"sy0\">+.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> pi <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">1000</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> random_gaussian <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">p <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/normrnd.html\"><span class=\"kw6\">normrnd</span></a><span class=\"br0\">(</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span> <span class=\"nu19\">0.5</span><span class=\"sy5\">,</span> <span class=\"nu0\">1000</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/mean.html\"><span class=\"kw6\">mean</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/sqrt.html\"><span class=\"kw5\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/sum.html\"><span class=\"kw5\">sum</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy1\">-</span> <a href=\"http://octave.sourceforge.net/octave/function/mean.html\"><span class=\"kw6\">mean</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">.^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><a href=\"http://octave.sourceforge.net/octave/function/numel.html\"><span class=\"kw5\">numel</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "ooRexx", "loc": 42, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm gens 1,000 normally distributed #s: mean=1, standard dev.=0.5*/</span><br/>  pi=RxCalcPi<span class=\"br0\">(</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/* get value of pi                */</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n seed <span class=\"sy0\">.</span>                <span class=\"coMULTI\">/* allow specification of N &amp; seed*/</span><br/>  <span class=\"kw1\">If</span> n==<span class=\"st0\">''</span><span class=\"sy0\">|</span>n==<span class=\"st0\">','</span> <span class=\"kw3\">Then</span><br/>    n=<span class=\"nu0\">1000</span>                          <span class=\"coMULTI\">/* N  is the size of the array.   */</span><br/>  <span class=\"kw1\">If</span> seed<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Call</span> <span class=\"kw6\">random</span>,,seed               <span class=\"coMULTI\">/* use seed for repeatable RANDOM#*/</span><br/>  mean=<span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/* desired new mean (arith. avg.) */</span><br/>  sd=<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>                            <span class=\"coMULTI\">/* desired new standard deviation.*/</span><br/>  <span class=\"kw1\">Do</span> g=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> n                      <span class=\"coMULTI\">/* generate N uniform random nums.*/</span><br/>    n<span class=\"sy0\">.</span>g=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,1e5<span class=\"br0\">)</span><span class=\"sy0\">/</span>1e5           <span class=\"coMULTI\">/* REXX gens uniform rand integers*/</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'              old mean='</span> mean<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'old standard deviation='</span> stddev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n-<span class=\"nu0\">1</span> <span class=\"kw2\">By</span> <span class=\"nu0\">2</span><br/>    m=j+<span class=\"nu0\">1</span><br/>                                    <span class=\"coMULTI\">/*use Box-Muller method           */</span><br/>    _=sd<span class=\"sy0\">*</span>RxCalcPower<span class=\"br0\">(</span>-<span class=\"nu0\">2</span><span class=\"sy0\">*</span>RxCalcLog<span class=\"br0\">(</span>n<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>,<span class=\"sy0\">.</span>5<span class=\"br0\">)</span><span class=\"sy0\">*</span>RxCalcCos<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span>n<span class=\"sy0\">.</span>m,,<span class=\"st0\">'R'</span><span class=\"br0\">)</span>+mean<br/>    n<span class=\"sy0\">.</span>m=sd<span class=\"sy0\">*</span>RxCalcpower<span class=\"br0\">(</span>-<span class=\"nu0\">2</span><span class=\"sy0\">*</span>RxCalcLog<span class=\"br0\">(</span>n<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>,<span class=\"sy0\">.</span>5<span class=\"br0\">)</span><span class=\"sy0\">*</span>RxCalcSin<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span>n<span class=\"sy0\">.</span>m,,<span class=\"st0\">'R'</span><span class=\"br0\">)</span>+,<br/>  mean                              <span class=\"coMULTI\">/* rand # must be 0???1.          */</span><br/>    n<span class=\"sy0\">.</span>j=_<br/>    <span class=\"kw3\">End</span>                             <span class=\"coMULTI\">/* j                              */</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'              new mean='</span> mean<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'new standard deviation='</span> stddev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Exit</span><br/>mean:<br/>  _=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> k=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> n<br/>    _=_+n<span class=\"sy0\">.</span>k<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> _<span class=\"sy0\">/</span>n<br/>stddev:<br/>  _avg=mean<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  _=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> k=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> n<br/>    _=_+<span class=\"br0\">(</span>n<span class=\"sy0\">.</span>k-_avg<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> RxCalcPower<span class=\"br0\">(</span>_<span class=\"sy0\">/</span>n,<span class=\"sy0\">.</span>5<span class=\"br0\">)</span><br/>\u00a0<br/>:: requires rxmath library</pre>"}, {"lang": "PARI/GP", "loc": 6, "block": "<pre class=\"parigp highlighted_source\">rnormal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>pr<span class=\"sy0\">=</span><span class=\"nu1\">32</span><span class=\"sy0\">*</span><span class=\"kw1\">ceil</span><span class=\"br0\">(</span><span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">realprecision</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"nu1\">4294967296</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u1<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>pr<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<span class=\"sy0\">&gt;&gt;</span>pr<span class=\"sy0\">,</span>u2<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>pr<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<span class=\"sy0\">&gt;&gt;</span>pr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">log</span><span class=\"br0\">(</span>u1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">Pi</span><span class=\"sy0\">*</span>u1<span class=\"br0\">)</span><br/>\t<span class=\"co1\">\\\\ Could easily be extended with a second normal at very little cost.</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">1000</span><span class=\"sy0\">,</span>unused<span class=\"sy0\">,</span>rnormal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 11, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> rnorm <span class=\"br0\">(</span>mean<span class=\"sy1\">,</span> sd<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">{Calculates Gaussian random numbers according to the Box-M\u00fcller approach}</span><br/><span class=\"kw1\">var</span><br/>  u1<span class=\"sy1\">,</span> u2<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  u1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>  u2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>  rnorm <span class=\"sy1\">:</span><span class=\"sy3\">=</span> mean <span class=\"sy3\">*</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span>u1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">*</span> u2<span class=\"br0\">)</span> <span class=\"sy3\">*</span> sd<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$PI</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/atan2.html\"><span class=\"kw3\">atan2</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$PI</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1000</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> randnorm <span class=\"br0\">(</span><span class=\"re0\">$mean</span><span class=\"sy0\">,</span> <span class=\"re0\">$stddev</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$mean</span> <span class=\"sy0\">+</span> <span class=\"re0\">$stddev</span> <span class=\"sy0\">*</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw3\">log</span> <span class=\"kw3\">rand</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> pi <span class=\"sy0\">*</span> <span class=\"kw3\">rand</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@nums</span> <span class=\"sy0\">=</span> randnorm<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Checking</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">my</span> <span class=\"re0\">$mean</span> <span class=\"sy0\">=</span> <span class=\"re0\">@nums</span> R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@nums</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">my</span> <span class=\"re0\">$stddev</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sqrt</span> <span class=\"re0\">$mean</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> R<span class=\"sy0\">-</span> <span class=\"re0\">@nums</span> R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@nums</span> <span class=\"kw1\">X</span><span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function RandomNormal()<br/>    return sqrt(-2*log(rnd())) * cos(2*PI*rnd())<br/>end function<br/>\u00a0<br/>sequence s = repeat(0,1000)<br/>for i=1 to length(s) do<br/>    s[i] = 1 + 0.5 * RandomNormal()<br/>end for</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> random<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.php.net/mt_getrandmax\"><span class=\"kw3\">mt_getrandmax</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$pi</span> \t<span class=\"sy0\">=</span> <a href=\"http://www.php.net/pi\"><span class=\"kw3\">pi</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>          <span class=\"co1\">// Set PI</span><br/>\u00a0<br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu19\">1.0</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/cos\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$pi</span> <span class=\"sy0\">*</span> random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu19\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>(de randomNormal ()  # Normal distribution, centered on 0, std dev 1<br/>   (*/<br/>      (sqrt (* -2.0 (log (rand 0 1.0))))<br/>      (cos (*/ 2.0 pi (rand 0 1.0) `(* 1.0 1.0)))<br/>      1.0 ) )<br/>\u00a0<br/>(seed (time))                                      # Randomize<br/>\u00a0<br/>(let Result<br/>   (make                                           # Build list<br/>      (do 1000                                     # of 1000 elements<br/>         (link (+ 1.0 (/ (randomNormal) 2))) ) )<br/>   (for N (head 7 Result)                          # Print first 7 results<br/>      (prin (format N *Scl) \" \") ) )</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* CONVERTED FROM WIKI FORTRAN */<br/>Normal_Random: procedure options (main);<br/>   declare (array(1000), pi, temp,<br/>            mean initial (1.0), sd initial (0.5)) float (18);<br/>   declare (i, n) fixed binary;<br/>\u00a0<br/>   n = hbound(array, 1);<br/>   pi = 4.0*ATAN(1.0);<br/>   array = random(); /* Uniform distribution */<br/>   /* Now convert to normal distribution */<br/>   DO i = 1 to n-1 by 2;<br/>      temp = sd * SQRT(-2.0*LOG(array(i))) * COS(2*pi*array(i+1)) + mean;<br/>      array(i+1) = sd * SQRT(-2.0*LOG(array(i))) * SIN(2*pi*array(i+1)) + mean;<br/>      array(i) = temp;<br/>   END;<br/>   /* Check mean and standard deviation */<br/>   mean = SUM(array)/n;<br/>   sd = SQRT(SUM((array - mean)**2)/n);<br/>   put skip edit ( \"Mean = \", mean ) (a, F(18,16) );<br/>   put skip edit ( \"Standard Deviation = \", sd) (a, F(18,16));<br/>END Normal_Random;<br/>\u00a0</pre>"}, {"lang": "PL/SQL", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DECLARE<br/>  --The desired collection<br/>  type t_coll is table of number index by binary_integer; <br/>  l_coll t_coll;<br/>\u00a0<br/>  c_max pls_integer\u00a0:= 1000;<br/>BEGIN<br/>   FOR l_counter IN 1 .. c_max<br/>   LOOP<br/>      -- dbms_random.normal delivers normal distributed random numbers with a mean of 0 and a variance of 1<br/>      -- We just adjust the values and get the desired result:<br/>      l_coll(l_counter)\u00a0:= DBMS_RANDOM.normal * 0.5 + 1;<br/>      DBMS_OUTPUT.put_line (l_coll(l_counter));<br/>   END LOOP;<br/>END;<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 15, "block": "<pre class=\"text highlighted_source\">;;; Choose radians as arguments to trigonometic functions<br/>true -&gt; popradians;<br/>\u00a0<br/>;;; procedure generating standard normal distribution<br/>define random_normal() -&gt; result;<br/>lvars r1 = random0(1.0), r2 = random0(1.0);<br/>     cos(2*pi*r1)*sqrt(-2*log(r2)) -&gt; result<br/>enddefine;<br/>\u00a0<br/>lvars array, i;<br/>\u00a0<br/>;;; Put numbers on the stack<br/>for i from 1 to 1000 do 1.0+0.5*random_normal() endfor;<br/>;;; collect them into array<br/>consvector(1000) -&gt; array;</pre>"}, {"lang": "PowerShell", "loc": 36, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>RandomNormal<br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span><span class=\"re0\">$Mean</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span><span class=\"re0\">$StandardDeviation</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$RandomNormal</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Mean</span> <span class=\"sy0\">+</span> <span class=\"re0\">$StandardDeviation</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Log<span class=\"br0\">(</span> <span class=\"br0\">(</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0.0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Cos<span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::PI <span class=\"sy0\">*</span> <span class=\"br0\">(</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0.0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$RandomNormal</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Standard deviation function for testing</span><br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>StandardDeviation<br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">param</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$Numbers</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$Measure</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Numbers</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Average</span><br/>    <span class=\"re0\">$PopulationDeviation</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span><span class=\"re0\">$Number</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Numbers</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$PopulationDeviation</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$Number</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Measure</span>.Average <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">$StandardDeviation</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span> <span class=\"re0\">$PopulationDeviation</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"re0\">$Measure</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$StandardDeviation</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Test</span><br/><span class=\"re0\">$RandomNormalNumbers</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> Get<span class=\"sy0\">-</span>RandomNormal <span class=\"sy0\">-</span>Mean <span class=\"nu0\">1</span> <span class=\"sy0\">-</span>StandardDeviation <span class=\"nu0\">0.5</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$Measure</span> <span class=\"sy0\">=</span> <span class=\"re0\">$RandomNormalNumbers</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Average</span><br/>\u00a0<br/><span class=\"re0\">$Stats</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>    Count             <span class=\"sy0\">=</span> <span class=\"re0\">$Measure</span>.Count<br/>    Average           <span class=\"sy0\">=</span> <span class=\"re0\">$Measure</span>.Average<br/>    StandardDeviation <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>StandardDeviation <span class=\"sy0\">-</span>Numbers <span class=\"re0\">$RandomNormalNumbers</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$Stats</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-List</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 18, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.f RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">; This procedure can return any real number.</span><br/>   <span class=\"kw1\">Protected</span>.f x1, x2<br/>\u00a0<br/>   <span class=\"co1\">; random numbers from the open interval ]0, 1[</span><br/>   x1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">999998</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span>       <span class=\"co1\">; must be &gt; 0 because of Log(x1)</span><br/>   x2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">999998</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/>   <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw2\">Log</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">Cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>#PI<span class=\"sy0\">*</span>x2<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Define</span> i, n<span class=\"sy0\">=</span><span class=\"nu0\">1000</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a.q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>   a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> RandomNormal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> values <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"me1\">gauss</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.5</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">result &lt;- rnorm(1000, mean=1, sd=0.5)</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(for/list ([i 1000])<br/>  (add1 (* (sqrt (* -2 (log (random)))) (cos (* 2 pi (random))) 0.5)))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 13, "block": "<pre class=\"text highlighted_source\">define PI<br/>   -1 acos<br/>\u00a0<br/>define rand1<br/>   9999999 choose 1 + 10000000.0 /<br/>\u00a0<br/>define randNormal<br/>   rand1 PI * 2 * cos<br/>   rand1 log -2 * sqrt<br/>   *<br/>   2 / 1 +<br/>\u00a0<br/>1000 each drop randNormal \"%f\\n\" print</pre>"}, {"lang": "REXX", "loc": 45, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm generates 1,000 normally distributed numbers:  mean=1,  standard deviation=\u00bd.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*the default decimal digit precision=9*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n seed <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*allow specification of N and the seed*/</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  n==<span class=\"st0\">\",\"</span>    <span class=\"kw3\">then</span> n=<span class=\"nu0\">1000</span>               <span class=\"coMULTI\">/*N:    is the size of the array.      */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed   <span class=\"coMULTI\">/*SEED: for repeatable random numbers. */</span><br/>newMean=<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*the desired new mean (arithmetic avg)*/</span><br/>sd=<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>                                           <span class=\"coMULTI\">/*the desired new standard deviation.  */</span><br/>       <span class=\"kw1\">do</span> g=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n                             <span class=\"coMULTI\">/*generate  N uniform random #'s (0,1].*/</span><br/>       #<span class=\"sy0\">.</span>g = <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, 1e5<span class=\"br0\">)</span>  <span class=\"sy0\">/</span>  1e5              <span class=\"coMULTI\">/*REXX's RANDOM BIF generates integers.*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*g*/</span>                               <span class=\"coMULTI\">/* [\u2191]  random integers \u2500\u2500\u25ba fractions. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'              old mean='</span>   mean<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'old standard deviation='</span>   stdDev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> pi;       pi2=pi <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>                        <span class=\"coMULTI\">/*define   pi    and also    2 * pi.   */</span><br/><span class=\"kw1\">say</span><br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> n-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;    m=j+<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*step through the iterations by two.  */</span><br/>           _=sd <span class=\"sy0\">*</span>  sqrt<span class=\"br0\">(</span>ln<span class=\"br0\">(</span>#<span class=\"sy0\">.</span>j<span class=\"br0\">)</span> <span class=\"sy0\">*</span> -<span class=\"nu0\">2</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*calculate the  used-twice expression.*/</span><br/>       #<span class=\"sy0\">.</span>j=_ <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>pi2 <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>m<span class=\"br0\">)</span>  +  newMean        <span class=\"coMULTI\">/*utilize the  Box\u2500Muller method.      */</span><br/>       #<span class=\"sy0\">.</span>m=_ <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span>pi2 <span class=\"sy0\">*</span> #<span class=\"sy0\">.</span>m<span class=\"br0\">)</span>  +  newMean        <span class=\"coMULTI\">/*random number must be:      (0,1]    */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'              new mean='</span>     mean<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'new standard deviation='</span>     stdDev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mean:   _=<span class=\"nu0\">0</span>;                   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  _=_ + #<span class=\"sy0\">.</span>k;              <span class=\"kw3\">end</span>;                <span class=\"kw1\">return</span>      _<span class=\"sy0\">/</span>n<br/>stdDev: _avg=mean<span class=\"br0\">(</span><span class=\"br0\">)</span>;  _=<span class=\"nu0\">0</span>;     <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  _=_ + <span class=\"br0\">(</span>#<span class=\"sy0\">.</span>k - _avg<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>;  <span class=\"kw3\">end</span>;                <span class=\"kw1\">return</span> sqrt<span class=\"br0\">(</span>_<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><br/>e:      e =<span class=\"nu0\">2.7182818284590452353602874713526624977572470936999595749669676277240766303535</span>; <span class=\"kw1\">return</span> e   <span class=\"coMULTI\">/*digs overkill*/</span><br/>pi:     pi=<span class=\"nu0\">3.1415926535897932384626433832795028841971693993751058209749445923078164062862</span>; <span class=\"kw1\">return</span> pi  <span class=\"coMULTI\">/*  \"      \"   */</span><br/>r2r:    <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">//</span>  <span class=\"br0\">(</span>pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>                                                                 <span class=\"coMULTI\">/*normalize ang*/</span><br/>sin:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span>;<span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>=pi <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sincos<span class=\"br0\">(</span>x,x,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">.</span>sincos:<span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z,_,i; x=x<span class=\"sy0\">*</span>x; p=z;    <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span> <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>; _=-_<span class=\"sy0\">*</span>x<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>; z=z+_; <span class=\"kw1\">if</span> z=p <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>; p=z; <span class=\"kw3\">end</span>;     <span class=\"kw1\">return</span> z<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ln:     <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,f;   <span class=\"kw1\">call</span> e;   ig= x<span class=\"sy0\">&gt;</span><span class=\"nu0\">1.5</span>;     is=<span class=\"nu0\">1</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>ig<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>;           ii=<span class=\"nu0\">0</span>;             xx=x<br/>          <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> ig<span class=\"sy0\">&amp;</span>xx<span class=\"sy0\">&gt;</span><span class=\"nu0\">1.5</span><span class=\"sy0\">|\\</span>ig<span class=\"sy0\">&amp;</span>xx<span class=\"sy0\">&lt;.</span>5;_=e;<span class=\"kw1\">do</span> k=-<span class=\"nu0\">1</span>;iz=xx<span class=\"sy0\">*</span>_<span class=\"sy0\">**</span>-is;<span class=\"kw1\">if</span> k<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>ig<span class=\"sy0\">&amp;</span>iz<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">|\\</span>ig<span class=\"sy0\">&amp;</span>iz<span class=\"sy0\">&gt;.</span>5<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;_=_<span class=\"sy0\">*</span>_;izz=iz;<span class=\"kw3\">end</span><br/>        xx=izz;ii=ii+is<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>k;<span class=\"kw3\">end</span>;x=x<span class=\"sy0\">*</span>e<span class=\"sy0\">**</span>-ii-<span class=\"nu0\">1</span>;z=<span class=\"nu0\">0</span>;_=-<span class=\"nu0\">1</span>;p=z;<span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>;_=-_<span class=\"sy0\">*</span>x;z=z+_<span class=\"sy0\">/</span>k;<span class=\"kw1\">if</span> z=p <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;p=z;<span class=\"kw3\">end</span>; <span class=\"kw1\">return</span> z+ii<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;       x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;        a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;               hpi=pi <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<br/>            <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">3</span><span class=\"br0\">)</span>;      <span class=\"kw1\">if</span> a=pi    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span> a=hpi <span class=\"sy0\">|</span> a=hpi<span class=\"sy0\">*</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;      <span class=\"kw1\">if</span> a=pi<span class=\"sy0\">/</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5<br/>            <span class=\"kw1\">if</span> a=pi <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"sy0\">.</span>5;                    <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; h=d+<span class=\"nu0\">6</span><br/>        <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<span class=\"st0\">'e'</span>_\u00a0%2<br/>        m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>;     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;       m<span class=\"sy0\">.</span>j=h;                h=h%2 + <span class=\"nu0\">1</span>;      <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>                  <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;   <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;   g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span><br/>        <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;     <span class=\"kw1\">return</span> g<span class=\"sy0\">/</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = 1 to 10 <br/>    see random(i) + nl<br/>next i<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>::PI <span class=\"sy0\">*</span> <span class=\"kw3\">rand</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">dim a(1000)<br/>pi = 22/7<br/>for i = 1 to 1000                <br/>   a( i)  = 1 + .5 * (sqr(-2 * log(rnd(0))) * cos(2 * pi * rnd(0)))<br/>next i</pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>use rand::distributions::{Normal, IndependentSample};<br/>\u00a0<br/>fn main() {<br/>    let mut rands = [0.0; 1000];<br/>    let normal = Normal::new(1.0, 0.5);<br/>    let mut rng = rand::thread_rng();<br/>    for num in rands.iter_mut() {<br/>        *num = normal.ind_sample(&amp;mut rng);<br/>    }<br/>}</pre>"}, {"lang": "SAS", "loc": 14, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Generate 1000 random numbers with mean 1 and standard deviation 0.5. <br/>  SAS version 9.2 was used to create this code.*/</span><br/>\u00a0<br/><span class=\"kw6\">data</span> norm1000;<br/>  <span class=\"kw4\">call</span> streaminit<span class=\"br0\">(</span><span class=\"nu0\">123456</span><span class=\"br0\">)</span>; <br/><span class=\"coMULTI\">/* Set the starting point, so we can replicate results. <br/>   If you want different results each time, comment the above line. */</span><br/>  <span class=\"kw5\">do</span> i=<span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span>;<br/>    r=rand<span class=\"br0\">(</span><span class=\"st0\">'normal'</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0.5</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw4\">output</span>;<br/>  <span class=\"kw5\">end</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 19, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    a:ARRAY{FLTD}\u00a0:= #(1000);<br/>    i:INT;<br/>\u00a0<br/>    RND::seed(2010);<br/>    loop i\u00a0:= 1.upto!(1000) - 1;<br/>      a[i]\u00a0:= 1.0d + 0.5d * RND::standard_normal;<br/>    end;<br/>\u00a0<br/>    -- testing the distribution<br/>    mean\u00a0::= a.reduce(bind(_.plus(_))) / a.size.fltd;<br/>    #OUT + \"mean \" + mean + \"\\n\";<br/>    a.map(bind(_.minus(mean)));<br/>    a.map(bind(_.pow(2.0d)));<br/>    dev\u00a0::= (a.reduce(bind(_.plus(_))) / a.size.fltd).sqrt;<br/>    #OUT + \"dev  \" + dev + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span> + <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextGaussian</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 47, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; linear congruential generator given in C99 section 7.20.2.1</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c<span class=\"sy0\">-</span>rand seed<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> seed <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">1103515245</span> seed<span class=\"br0\">)</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"nu0\">2147483648</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> seed <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; uniform real numbers in open interval (0, 1)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>unif<span class=\"sy0\">-</span>rand seed<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span>c<span class=\"sy0\">-</span>rand seed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">32769.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Box-Muller method to generate normal distribution</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>normal<span class=\"sy0\">-</span>rand unif m <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>? #t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>twopi <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span> <span class=\"br0\">(</span><span class=\"kw1\">acos</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">set!</span>\u00a0? <span class=\"br0\">(</span><span class=\"kw1\">not</span>\u00a0?<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span>\u00a0? <span class=\"sy0\">!</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">2.0</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"br0\">(</span>unif<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"sy0\">*</span> twopi <span class=\"br0\">(</span>unif<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">set!</span> <span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> m <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"kw1\">s</span> a <span class=\"br0\">(</span><span class=\"kw1\">sin</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"sy0\">+</span> m <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"kw1\">s</span> a <span class=\"br0\">(</span><span class=\"kw1\">cos</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rnorm <span class=\"br0\">(</span>normal<span class=\"sy0\">-</span>rand <span class=\"br0\">(</span>unif<span class=\"sy0\">-</span>rand <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; auxiliary function to get a list of 'n random numbers from generator 'r</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> r n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> r <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> v <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span><span class=\"kw1\">list</span> rnorm <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>v<br/><span class=\"coMULTI\">#|<br/>(-0.27965824722565835<br/> -0.8870860825789542<br/> 0.6499618744638194<br/> 0.31336141955110863<br/> ...<br/> 0.5648743998193049<br/> 0.8282656735558756<br/> 0.6399951934564637<br/> 0.7699535302478072)<br/>|#</span><br/>\u00a0<br/><span class=\"co1\">; check mean and standard deviation</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mean<span class=\"sy0\">-</span>sdev v<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>v v<span class=\"br0\">)</span> <span class=\"br0\">(</span>a <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> v<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mean <span class=\"br0\">(</span><span class=\"sy0\">/</span> a n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">list</span> mean <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> b <span class=\"br0\">(</span><span class=\"sy0\">*</span> n mean mean<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">car</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> b <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>mean<span class=\"sy0\">-</span>sdev v<span class=\"br0\">)</span><br/><span class=\"co1\">; (0.9562156817697293 0.5097087109575911)</span></pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func float: frand is func  # Uniform distribution, (0..1]<br/>  result<br/>    var float: frand is 0.0;<br/>  begin<br/>    repeat<br/>      frand\u00a0:= rand(0.0, 1.0);<br/>    until frand &lt;&gt; 0.0;<br/>  end func;<br/>\u00a0<br/>const func float: randomNormal is  # Normal distribution, centered on 0, std dev 1<br/>  return sqrt(-2.0 * log(frand)) * cos(2.0 * PI * frand);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>    var array float: rands is 1000 times 0.0;<br/>  begin<br/>    for i range 1 to length(rands) do<br/>      rands[i]\u00a0:= 1.0 + 0.5 * randomNormal;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var arr = <span class=\"nu0\">1000</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> sqrt<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span>.<span class=\"me1\">log</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>Num.<span class=\"me1\">tau</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>arr.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">val seed = 0w42;<br/>val gen = Rand.mkRandom seed;<br/>fun random_gaussian () =<br/>  1.0 + Math.sqrt (~2.0 * Math.ln (Rand.norm (gen ()))) * Math.cos (2.0 * Math.pi * Rand.norm (gen ()));<br/>val a = List.tabulate (1000, fn _ =&gt; random_gaussian ());</pre>"}, {"lang": "Stata", "loc": 3, "block": "<pre class=\"text highlighted_source\">clear all<br/>set obs 1000<br/>gen x=rnormal(1,0.5)</pre>"}, {"lang": "Tcl", "loc": 11, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">variable</span>\u00a0::<span class=\"me1\">pi</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> acos<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">proc</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">nrand</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span>-<span class=\"nu0\">2</span><span class=\"sy0\">*</span>log<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*$</span>::<span class=\"me1\">pi</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> mean <span class=\"nu0\">1.0</span><br/><span class=\"kw1\">set</span> stddev <span class=\"nu0\">0.5</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$mean</span> + <span class=\"re0\">$stddev</span><span class=\"sy0\">*</span>nrand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre> randNorm(1,.5)\n</pre>"}, {"lang": "TorqueScript", "loc": 2, "block": "<pre class=\"text highlighted_source\">for (%i = 0;\u00a0%i &lt; 1000;\u00a0%i++)<br/>\t%list[%i] = 1 + mSqrt(-2 * mLog(getRandom())) * mCos(2 * $pi * getRandom());</pre>"}, {"lang": "Ursala", "loc": 14, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#import flo<br/>\u00a0<br/>pop_stats(\"mu\",\"sigma\") = plus/*\"mu\"+ times/*\"sigma\"+ Z*+ iota<br/>\u00a0<br/>sample_stats(\"mu\",\"sigma\") = plus^*D(minus/\"mu\"+ mean,~&amp;)+ vid^*D(div\\\"sigma\"+ stdev,~&amp;)+ Z*+ iota<br/>\u00a0<br/>#cast\u00a0%eWL<br/>\u00a0<br/>test = <br/>\u00a0<br/>^(mean,stdev)* &lt;<br/>   pop_stats(1.,0.5) 1000,<br/>   sample_stats(1.,0.5) 1000&gt;</pre>"}, {"lang": "Visual FoxPro", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL i As Integer, m As Double, n As Integer, sd As Double<br/>py = PI()<br/>SET TALK OFF <br/>SET DECIMALS TO 6<br/>CREATE CURSOR gdev (deviate B(6))<br/>RAND(-1)<br/>n = 1000<br/>m = 1<br/>sd = 0.5<br/>CLEAR<br/>FOR i = 1 TO n<br/>\tINSERT INTO gdev VALUES (GaussDev(m, 1/sd))<br/>ENDFOR<br/>CALCULATE AVG(deviate), STD(deviate) TO m, sd<br/>? \"Mean\", m, \"Std Dev\", sd<br/>SET TALK ON<br/>SET DECIMALS TO <br/>\u00a0<br/>FUNCTION GaussDev(mean As Double, sdev As Double) As Double<br/>LOCAL z As Double<br/>z = SQRT(-2*LOG(RAND()))*COS(py*RAND())<br/>IF sdev # 0<br/>\tz = mean + z/sdev<br/>ENDIF<br/>RETURN z\t<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Yorick", "loc": 3, "block": "<pre class=\"text highlighted_source\">func random_normal(count) {<br/>   return sqrt(-2*log(random(count))) * cos(2*pi*random(count));<br/>}</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn mkRand(mean,sd){ //normally distributed random w/mean &amp; standard deviation<br/>   pi:=(0.0).pi;    // using the Box\u2013Muller transform<br/>   rz1:=fcn{1.0-(0.0).random(1)}  // from [0,1) to (0,1]<br/>   return('wrap(){((-2.0*rz1().log()).sqrt() * (2.0*pi*rz1()).cos())*sd + mean })<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 6, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">RANDOMIZE</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"co3\">REM seeds random number generator based on uptime</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">DIM</span> a<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">CLS</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> + <span class=\"kw3\">SQR</span><span class=\"br0\">(</span>-<span class=\"nu0\">2</span> * <span class=\"kw3\">LN</span><span class=\"br0\">(</span><span class=\"kw3\">RND</span><span class=\"br0\">)</span><span class=\"br0\">)</span> * <span class=\"kw3\">COS</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> * <span class=\"kw1\">PI</span> * <span class=\"kw3\">RND</span><span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span> i</pre>"}]}