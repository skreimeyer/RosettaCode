{"task": "Sort_a_list_of_object_identifiers", "blocks": [{"lang": "C#", "loc": 28, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> oids <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span>,<br/>            <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span>,<br/>            <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span>,<br/>            <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span>,<br/>            <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span>,<br/>            <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> comparer <span class=\"sy0\">=</span> Comparer<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">)</span><br/>\t        <span class=\"sy0\">.</span><span class=\"me1\">Zip</span><span class=\"br0\">(</span>b<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">)</span>,<br/>                    <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">FirstOrDefault</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> c <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> c <span class=\"sy0\">:</span> a<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>b<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Array<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>oids, comparer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span>, oids<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 50, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;boost/tokenizer.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> splitOnChar <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> s , <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">tokenizer</span><span class=\"sy1\">&lt;</span>boost<span class=\"sy4\">::</span><span class=\"me2\">char_separator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> tokenizer <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> parts <span class=\"sy4\">;</span><br/>   boost<span class=\"sy4\">::</span><span class=\"me2\">char_separator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> sep<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>c <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tokenizer tokens<span class=\"br0\">(</span> s , sep <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> tokens.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> tokens.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> it<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>      parts.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> parts <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> myCompare <span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> s1 , <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> s2 <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> firstcopy<span class=\"br0\">(</span> s1 <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> secondcopy <span class=\"br0\">(</span> s2 <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> firstparts<span class=\"br0\">(</span> splitOnChar <span class=\"br0\">(</span> firstcopy, <span class=\"st0\">'.'</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> secondparts<span class=\"br0\">(</span> splitOnChar <span class=\"br0\">(</span> secondcopy, <span class=\"st0\">'.'</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> numbers1<span class=\"br0\">(</span> firstparts.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> numbers2<span class=\"br0\">(</span> secondparts.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span> firstparts.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , firstparts.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numbers1.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> st <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">stoi</span><span class=\"br0\">(</span> st , nullptr <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span> secondparts.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , secondparts.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numbers2.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> st <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">stoi</span><span class=\"br0\">(</span> st , nullptr <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">auto</span> it1 <span class=\"sy1\">=</span> numbers1.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">auto</span> it2 <span class=\"sy1\">=</span> numbers2.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it1 <span class=\"sy1\">==</span> <span class=\"sy2\">*</span>it2 <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      it1<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>      it2<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> it1 <span class=\"sy1\">==</span> numbers1.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span>  <span class=\"sy3\">||</span> it2 <span class=\"sy1\">==</span> numbers2.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span>  <span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">lexicographical_compare</span><span class=\"br0\">(</span> s1.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , s1.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , s2.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , s2.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy2\">*</span>it1 <span class=\"sy1\">&lt;</span> <span class=\"sy2\">*</span>it2 <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> arrayOID <span class=\"br0\">{</span> <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span> ,<br/>      <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span> ,<br/>      <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span> ,<br/>      <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span> ,<br/>      <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span> ,<br/>      <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span> arrayOID.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , arrayOID.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , myCompare <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy4\">:</span> arrayOID <span class=\"br0\">)</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> oid-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>oid<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ pos<span class=\"br0\">)</span><br/>        for pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>position #\\<span class=\"sy0\">.</span> oid <span class=\"sy0\">:</span><span class=\"me1\">start</span> start<span class=\"br0\">)</span><br/>        collect <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> oid <span class=\"sy0\">:</span><span class=\"me1\">start</span> start <span class=\"sy0\">:</span><span class=\"me1\">end</span> pos<span class=\"br0\">)</span><br/>        while pos<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> list<span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>list1 list2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for e1 in list1<br/>        for e2 in list2<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> e1 e2<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">return</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> e1 e2<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> list1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> list2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sort-oids <span class=\"br0\">(</span>oids<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>sort oids #'list<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'oid-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>oids <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span><br/>                    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span><br/>                    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span><br/>                    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span><br/>                    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span><br/>                    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>oid <span class=\"br0\">(</span>sort-oids oids<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>write-line oid<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule Sort_by_OID do<br/>  def numbers(list) do<br/>    Enum.sort_by(list, fn oid -&gt;<br/>      String.split(oid, \".\") |&gt; Enum.map(&amp;String.to_integer/1)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>~w[<br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.10<br/>  1.3.6.1.4.1.11.2.17.5.2.0.79<br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.4<br/>  1.3.6.1.4.1.11150.3.4.0.1<br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.1<br/>  1.3.6.1.4.1.11150.3.4.0<br/>]<br/>|&gt; Sort_by_OID.numbers<br/>|&gt; Enum.each(fn oid -&gt; IO.puts oid end)</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USING: io qw sequences sorting sorting.human\u00a0;<br/>\u00a0<br/>qw{<br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.10<br/>    1.3.6.1.4.1.11.2.17.5.2.0.79<br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.4<br/>    1.3.6.1.4.1.11150.3.4.0.1<br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.1<br/>    1.3.6.1.4.1.11150.3.4.0 <br/>} [ human&lt;=&gt; ] sort [ print ] each</pre>"}, {"lang": "Go", "loc": 72, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> testCases <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a parsed representation</span><br/><span class=\"kw1\">type</span> oid <span class=\"sy1\">[]</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>\u00a0<br/><span class=\"co1\">// \"constructor\" parses string representation</span><br/><span class=\"kw4\">func</span> newOid<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> oid <span class=\"sy1\">{</span><br/>    ns <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">)</span><br/>    os <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>oid<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ns<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ns <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> os<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">);</span> <span class=\"sy3\">!</span>ok <span class=\"sy3\">||</span> os<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Sign<span class=\"sy1\">()</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> os<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// \"stringer\" formats into string representation</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>o oid<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>o<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> o <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// parse test cases</span><br/>    os <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>oid<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>testCases<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>        os<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> newOid<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> os<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"invalid OID\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// sort</span><br/>    sort<span class=\"sy3\">.</span>Slice<span class=\"sy1\">(</span>os<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// \"less\" function must return true if os[i] &lt; os[j]</span><br/>        oi <span class=\"sy2\">:=</span> os<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> os<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"co1\">// lexicographic defintion: less if prefix or if element is &lt;</span><br/>            <span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>oi<span class=\"sy1\">)</span> <span class=\"sy3\">||</span> oi<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> oi<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>&amp;v<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">})</span><br/>    <span class=\"co1\">// output sorted list</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> o <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> os <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>o<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span> sort <span class=\"sy0\">,</span> intercalate <span class=\"br0\">)</span> <br/>\u00a0<br/>splitString <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>splitString c <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>splitString c s <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span> item <span class=\"sy0\">,</span> rest <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">==</span> c <span class=\"br0\">)</span> s<br/>                      <span class=\"br0\">(</span> <span class=\"sy0\">_</span> <span class=\"sy0\">,</span> next <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">/=</span> c <span class=\"br0\">)</span> rest<br/>\t\t  <span class=\"kw1\">in</span> item\u00a0: splitString c next<br/>\u00a0<br/>convertIntListToString <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>convertIntListToString <span class=\"sy0\">=</span> intercalate <span class=\"st0\">\".\"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><br/>\u00a0<br/>orderOID <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>orderOID <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> convertIntListToString <span class=\"sy0\">.</span> sort <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">.</span> splitString <span class=\"st0\">'.'</span> <span class=\"br0\">)</span><br/>\u00a0<br/>oid <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>oid <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span> <span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span> <span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span> <span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span> <span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span> <span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>   <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> orderOID oid</pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\">def data: [<br/> \"1.3.6.1.4.1.11.2.17.19.3.4.0.10\",<br/> \"1.3.6.1.4.1.11.2.17.5.2.0.79\",<br/> \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\",<br/> \"1.3.6.1.4.1.11150.3.4.0.1\",<br/> \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\",<br/> \"1.3.6.1.4.1.11150.3.4.0\"<br/> ];<br/>\u00a0<br/>data | map( split(\".\") | map(tonumber) ) | sort | map(join(\".\"))</pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">oids=:&lt;@-.&amp;<span class=\"st_h\">' '</span>;.<span class=\"nu0\">_2</span>]<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span><br/>  1.3.6.1.4.1.11.2.17.19.3.4.<span class=\"nu0\">0.10</span><br/>  1.3.6.1.4.1.11.2.17.5.2.<span class=\"nu0\">0.79</span><br/>  1.3.6.1.4.1.11.2.17.19.3.4.<span class=\"nu0\">0.4</span><br/>  1.3.6.1.4.1.11150.3.4.<span class=\"nu0\">0.1</span><br/>  1.3.6.1.4.1.11.2.17.19.3.4.<span class=\"nu0\">0.1</span><br/>  1.3.6.1.4.1.11150.3.<span class=\"nu0\">4.0</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 34, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">com.rosettacode</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Comparator</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.Stream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> OIDListSorting <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> dot <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">final</span> Comparator<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> oids_comparator <span class=\"sy0\">=</span> <span class=\"br0\">(</span>o1, o2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> o1Numbers <span class=\"sy0\">=</span> o1.<span class=\"me1\">split</span><span class=\"br0\">(</span>dot<span class=\"br0\">)</span>, o2Numbers <span class=\"sy0\">=</span> o2.<span class=\"me1\">split</span><span class=\"br0\">(</span>dot<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> o1Numbers.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">==</span> o2Numbers.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> o1Numbers.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> o2Numbers.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> nextO1Number <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>o1Numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>, nextO2Number <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>o2Numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">compare</span><span class=\"br0\">(</span>nextO1Number, nextO2Number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Stream.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span>, <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span>, <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span>,<br/>                  <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span>, <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span>, <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">sorted</span><span class=\"br0\">(</span>oids_comparator<span class=\"br0\">)</span><br/>                .<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">oidlist = [\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\",<br/>           \"1.3.6.1.4.1.11.2.17.5.2.0.79\",<br/>           \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\",<br/>           \"1.3.6.1.4.1.11150.3.4.0.1\",<br/>           \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\",<br/>           \"1.3.6.1.4.1.11150.3.4.0\"]<br/>\u00a0<br/>sort!(oidlist; lt=lexless,<br/>    by=x -&gt; parse.(Int, String.(split(x, \".\"))))<br/>println.(oidlist)</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Oid<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> id<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Oid<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Oid<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits1 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">id</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits2 <span class=\"sy0\">=</span> other.<span class=\"me1\">id</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> minSize <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>splits1.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> splits2.<span class=\"me1\">size</span><span class=\"br0\">)</span> splits1.<span class=\"me1\">size</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> splits2.<span class=\"me1\">size</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until minSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>splits1<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> splits2<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>splits1<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> splits2<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> splits1.<span class=\"me1\">size</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>splits2.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> id<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> oids <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span><span class=\"br0\">)</span>,<br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span><span class=\"br0\">)</span>,<br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span><span class=\"br0\">)</span>,<br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span><span class=\"br0\">)</span>,<br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span><span class=\"br0\">)</span>,<br/>        Oid<span class=\"br0\">(</span><span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>oids.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 21, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> OIDs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.5.2.0.79\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0.1\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"1.3.6.1.4.1.11150.3.4.0\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> compare <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> aList<span class=\"sy0\">,</span> bList<span class=\"sy0\">,</span> Na<span class=\"sy0\">,</span> Nb <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> num <span class=\"kw2\">in</span> a<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%d+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>aList<span class=\"sy0\">,</span> num<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> num <span class=\"kw2\">in</span> b<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%d+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>bList<span class=\"sy0\">,</span> num<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span><span class=\"sy0\">#</span>aList<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>bList<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        Na<span class=\"sy0\">,</span> Nb <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>aList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>bList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> Na <span class=\"sy0\">~=</span> Nb <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Na <span class=\"sy0\">&lt;</span> Nb <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>OIDs<span class=\"sy0\">,</span> compare<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> oid <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>OIDs<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>oid<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Flush ' empty stack of values<br/>      Data \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\" ,  \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\",  \"1.3.6.1.4.1.11150.3.4.0.1\"<br/>      Data \"1.3.6.1.4.1.11.2.17.19.3.4.0.10\", \"1.3.6.1.4.1.11.2.17.5.2.0.79\",  \"1.3.6.1.4.1.11150.3.4.0\"<br/>      \\\\ Inventories of type queue can get same keys, and have sort where numbers (float type) as part of key count as numbers<br/>      Inventory queue OID<br/>      \\\\ prepare keys (replace dot to #)<br/>      While not empty {<br/>            Append OID, Replace$(\".\",\"#\", letter$)<br/>      }<br/>      Sort Ascending OID<br/>      n=Each(OID)<br/>      a$=\"\"<br/>      While n {<br/>            \\\\ replace # to dot<br/>            a$+=Replace$(\"#\",\".\", Eval$(n))+{<br/>            }<br/>      }<br/>      Clipboard a$<br/>      Report a$<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@OIDs</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>10<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>5<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>79<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>4<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%8d\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/\\./</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">@OIDs</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"re0\">@sorted</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"kw3\">sort</span> <span class=\"sy0\">*.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\d+/</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span><br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>10<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>5<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>79<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>4<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<br/><span class=\"sy0\">&gt;;</span></pre>"}, {"lang": "Phix", "loc": 21, "block": "<pre class=\"text highlighted_source\">sequence strings = {\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\",<br/>                    \"1.3.6.1.4.1.11.2.17.5.2.0.79\",<br/>                    \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\",<br/>                    \"1.3.6.1.4.1.11150.3.4.0.1\",<br/>                    \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\",<br/>                    \"1.3.6.1.4.1.11150.3.4.0\"}<br/>\u00a0<br/>constant len = length(strings)<br/>sequence sortable = repeat(0,len)<br/>\u00a0<br/>for i=1 to len do<br/>    sequence si = split(strings[i],'.')<br/>    for j=1 to length(si) do<br/>        si[j] = to_number(si[j])<br/>    end for<br/>    sortable[i] = {si,i}<br/>end for<br/>sortable = sort(sortable)<br/>for i=1 to len do<br/>   \u00a0?strings[sortable[i][2]]<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(for I<br/>   (by<br/>      '((L) (mapcar format (split (chop L) \".\")))<br/>      sort<br/>      (quote<br/>         \"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"<br/>         \"1.3.6.1.4.1.11.2.17.5.2.0.79\"<br/>         \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"<br/>         \"1.3.6.1.4.1.11150.3.4.0.1\"<br/>         \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"<br/>         \"1.3.6.1.4.1.11150.3.4.0\" ) )<br/>   (prinl I) )</pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\">\u00a0<br/>data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11.2.17.19.3.4.0.10'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11.2.17.5.2.0.79'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11.2.17.19.3.4.0.4'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11150.3.4.0.1'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11.2.17.19.3.4.0.1'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'1.3.6.1.4.1.11150.3.4.0'</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x: <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"sy0\">,</span> x.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require data/order)<br/>\u00a0<br/>;; allows for key caching<br/>(define (oid-&gt;oid-key o)<br/>  (map string-&gt;number (string-split o \".\")))<br/>\u00a0<br/>(define oid-key&lt; (order-&lt;? datum-order))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal?<br/>   (sort<br/>    '(\"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"<br/>      \"1.3.6.1.4.1.11.2.17.5.2.0.79\"<br/>      \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"<br/>      \"1.3.6.1.4.1.11150.3.4.0.1\"<br/>      \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"<br/>      \"1.3.6.1.4.1.11150.3.4.0\")<br/>    oid-key&lt;<br/>    #:key oid-&gt;oid-key<br/>    #:cache-keys? #t)<br/>   '(\"1.3.6.1.4.1.11.2.17.5.2.0.79\"<br/>     \"1.3.6.1.4.1.11.2.17.19.3.4.0.1\"<br/>     \"1.3.6.1.4.1.11.2.17.19.3.4.0.4\"<br/>     \"1.3.6.1.4.1.11.2.17.19.3.4.0.10\"<br/>     \"1.3.6.1.4.1.11150.3.4.0\"<br/>     \"1.3.6.1.4.1.11150.3.4.0.1\")))</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs a  sort  of  OID  (Object IDentifiers \u25c4\u2500\u2500 used in Network data).*/</span><br/>          $= 1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>10 ,   <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2510                                */</span><br/>             1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>5<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>79    ,   <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2524                                */</span><br/>             1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>4  ,   <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u253c\u2500\u25c4\u2500 six OID numbers (as a list).*/</span><br/>             1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1       ,   <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2524                                */</span><br/>             1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>17<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1  ,   <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2524                                */</span><br/>             1<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>6<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>11150<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>0             <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2518                                */</span><br/><span class=\"kw1\">call</span> gen                                         <span class=\"coMULTI\">/*generate an array (@.) from the OIDs.*/</span><br/><span class=\"kw1\">call</span> show   <span class=\"st0\">'before sort \u2500\u2500\u2500\u25ba '</span>                  <span class=\"coMULTI\">/*display the  @  array before sorting.*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2591'</span>, <span class=\"nu0\">79</span><span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*display fence, separate before &amp;after*/</span><br/><span class=\"kw1\">call</span> adj <span class=\"nu0\">1</span>;   <span class=\"kw1\">call</span> bSort #;       <span class=\"kw1\">call</span> adj <span class=\"nu0\">0</span>     <span class=\"coMULTI\">/*expand/sort/shrink the internal OID's*/</span><br/><span class=\"kw1\">call</span> show   <span class=\"st0\">' after sort \u2500\u2500\u2500\u25ba '</span>                  <span class=\"coMULTI\">/*display the  @  array after sorting. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>bSort: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;  m=n-<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*N: is the number of @ array elements.*/</span><br/>         <span class=\"kw1\">do</span> m=m  <span class=\"kw2\">for</span> m  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> ok;   ok=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*keep sorting the @ array until done. */</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> m;  _=j+<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">&gt;</span>@<span class=\"sy0\">.</span>_  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> @<span class=\"sy0\">.</span>j @<span class=\"sy0\">.</span>_ <span class=\"nu0\">0</span> <span class=\"kw2\">with</span> @<span class=\"sy0\">.</span>_ @<span class=\"sy0\">.</span>j ok<br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                          <span class=\"coMULTI\">/* [\u2191]  swap two out\u2500of\u2500order elements.*/</span><br/>         <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*m*/</span>;          <span class=\"kw1\">return</span>         <span class=\"coMULTI\">/* [\u2191]  use a simple  bubble  sort.    */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>gen:   #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>; L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>;      <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;     @<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>$,i<span class=\"br0\">)</span>;    <span class=\"kw3\">end</span>;      <span class=\"kw1\">return</span><br/>                       <span class=\"coMULTI\">/*length of the  number  of words in $.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>adj:   <span class=\"kw1\">arg</span> LZ;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;       x=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, , <span class=\"sy0\">.</span><span class=\"br0\">)</span>;  y=  <span class=\"coMULTI\">/*construct X version. */</span><br/>                   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;           _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x, k<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*get a number in  X.  */</span><br/>                   <span class=\"kw1\">if</span> LZ  <span class=\"kw3\">then</span> y=y <span class=\"kw6\">right</span><span class=\"br0\">(</span>_,<span class=\"nu0\">90</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;  <span class=\"kw3\">else</span> y=y  _+<span class=\"nu0\">0</span> <span class=\"coMULTI\">/*add\u2502elide leading 0's*/</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                   <span class=\"coMULTI\">/*adjust number, append*/</span><br/>                @<span class=\"sy0\">.</span>j = <span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"sy0\">.</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*reconstitute number. */</span><br/>                <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span>                                   <span class=\"coMULTI\">/*LZ: Leading Zero(s). */</span><br/>       <span class=\"kw1\">return</span>                                                    <span class=\"coMULTI\">/*\u2500\u2500  \u2500       \u2500        */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show:  <span class=\"kw1\">do</span> a=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;  <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"OID number\"</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>a,L<span class=\"br0\">)</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  @<span class=\"sy0\">.</span>a;   <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 110, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>/*<br/> +--------------------------------------------------------------<br/> +        Program Name\u00a0: SortOIDNumeric.ring<br/> +        Date        \u00a0: 2016-07-14<br/> +        Author      \u00a0: Bert Mariani<br/> +        Purpose     \u00a0: Sort OID List in Numeric Order<br/> +--------------------------------------------------------------<br/>*/<br/>\u00a0<br/>oldOidList =<br/>[<br/>\t\".1.3.6.1.4.1.11.2.17.19.3.4.0.10\",<br/>\t\".1.3.6.1.4.1.11.2.17.5.2.0.79\",<br/>\t\".1.3.6.1.4.1.11.2.17.19.3.4.0.4\",<br/>\t\".1.3.6.1.4.1.11150.3.4.0.1\",<br/>\t\".1.3.6.1.4.1.11.2.17.19.3.4.0.1\",<br/>\t\".1.3.6.1.4.1.11150.3.4.0\"<br/>]<br/>\u00a0<br/>        ### SHOW BEFORE SORT<br/>        See nl + \"oldOIDList Before Sort\" +nl<br/>        See  oldOidList<br/>\u00a0<br/>    #---------------------<br/>\u00a0<br/>     delChar = \".\"<br/>     nulChar = \"\"<br/>     padChar = \" \"<br/>     padSize = 6<br/>     newDotPadList = []<br/>\u00a0<br/>    ### Split list into lines<br/>    for line in oldOidList<br/>\u00a0<br/>        ### Split line by . into components<br/>        noDotList  = str2list( substr(line, delChar, nl) )<br/>\u00a0<br/>        ### Pad components with left blanks to make equal size<br/>        newPadList  = PadStringList(noDotList, padChar, padSize)<br/>\u00a0<br/>        ### Join the components back to a line<br/>        newDotPadString  = JoinStringList(delChar, newPadList)<br/>\u00a0<br/>        ### Create new list - Alpha<br/>        Add(newDotPadList, newDotPadString)<br/>    next<br/>\u00a0<br/>    ### Sorts Alpha list<br/>    newDotPadListSorted = sort(newDotPadList)<br/>\u00a0<br/>         ### SHOW ALPHA INTERMEDIATE OUTPUT<br/>         See nl + \"newDotPadListSorted Intermediate Sort\" +nl<br/>         See  newDotPadListSorted<br/>\u00a0<br/>    ### Remove blanks for original look<br/>    newOidList = RemovePadCharList( newDotPadListSorted, padChar, nulChar)<br/>\u00a0<br/>    ###--------------------<br/>\u00a0<br/>        ### SHOW AFTER SORT - NUMERIC<br/>        See nl + \"newOIDList Final Sort\" +nl<br/>        See  newOidList<br/>\u00a0<br/>\u00a0<br/>###--------------------------------------------------------------------<br/>### Function: PadStringList<br/>###         newList = PadStringList(oldList, padChar, padSize )<br/>###--------------------------------------------------------------------<br/>\u00a0<br/>Func PadStringList oldList, padChar, padSize<br/>    newList = []<br/>    for line in oldList<br/>        newPadSize = padSize - len(line)<br/>        newLine = Copy( padChar, newPadSize) + line<br/>        Add(newList, newLine)<br/>    next<br/>\u00a0<br/>    ### First line in all blank because of leading dot - remove<br/>    Del(newList,1)<br/>return newList<br/>\u00a0<br/>###------------------------------------------------------------<br/>### FUNC JoinStringList<br/>###         newString = JoinStringList( joinChar, oldList)<br/>###------------------------------------------------------------<br/>\u00a0<br/>Func JoinStringList joinChar, OldList<br/>    newString = \"\"<br/>    for line in OldList<br/>        newString = newString + joinChar + line<br/>    next<br/>return newString<br/>\u00a0<br/>###---------------------------------------------------------------------<br/>### FUNC RemovePadCharList<br/>###         newOidList = RemovePadCharList( oldList, padChar, nulChar)<br/>###---------------------------------------------------------------------<br/>\u00a0<br/>Func RemovePadCharList oldList, padChar, nulChar<br/>    newList = []<br/>    for line in oldList<br/>          noPadString = substr(line, padChar, nulChar)<br/>        Add(newList, noPadString)<br/>    next<br/>return newList<br/>###-----------------------------------------------------------<br/>\u00a0<br/>&gt;;</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"sy0\">%</span>w<span class=\"br0\">[</span><br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.10<br/>  1.3.6.1.4.1.11.2.17.5.2.0.79<br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.4<br/>  1.3.6.1.4.1.11150.3.4.0.1<br/>  1.3.6.1.4.1.11.2.17.19.3.4.0.1<br/>  1.3.6.1.4.1.11150.3.4.0<br/><span class=\"br0\">]</span><br/>.<span class=\"me1\">sort_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>oid<span class=\"sy0\">|</span> oid.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>oid<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> oid<span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func sort_OIDs<span class=\"br0\">(</span>ids<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ids.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>id<span class=\"sy0\">|</span><br/>        id.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> Num<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var OIDs = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.10<br/>    1.3.6.1.4.1.11.2.17.5.2.0.79<br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.4<br/>    1.3.6.1.4.1.11150.3.4.0.1<br/>    1.3.6.1.4.1.11.2.17.19.3.4.0.1<br/>    1.3.6.1.4.1.11150.3.4.0<br/><span class=\"br0\">)</span><br/>\u00a0<br/>sort_OIDs<span class=\"br0\">(</span>OIDs<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 54, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"co1\"># Example input data:</span><br/><span class=\"kw1\">set</span> oid_list <span class=\"br0\">[</span><span class=\"kw2\">list</span> \\<br/>                  1.3.6.1.4.1.11.2.17.19.3.4.0.10 \\<br/>                  1.3.6.1.4.1.11.2.17.5.2.0.79 \\<br/>                  1.3.6.1.4.1.11.2.17.19.3.4.0.4 \\<br/>                  1.3.6.1.4.1.11150.3.4.0.1 \\<br/>                  1.3.6.1.4.1.11.2.17.19.3.4.0.1 \\<br/>                  1.3.6.1.4.1.11150.3.4.0 <span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> oid2_lists <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> dots_max <span class=\"nu0\">0</span><br/><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><br/><span class=\"kw1\">foreach</span> oid <span class=\"re0\">$oid_list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> oid_list <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$oid</span> <span class=\"st0\">\".\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dot_count <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$oid_list</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">incr</span> dot_count -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"re0\">$dot_count</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$dots_max</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> dots_max <span class=\"re0\">$dot_count</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> dots_arr<span class=\"br0\">(</span><span class=\"sy0\">$</span><span class=\"br0\">{</span>i<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"re0\">$dot_count</span><br/>    <span class=\"kw2\">lappend</span> oid2_lists <span class=\"re0\">$oid_list</span><br/>    <span class=\"kw2\">incr</span> i<br/><span class=\"br0\">}</span><br/><span class=\"co1\"># pad for strings of different dot counts</span><br/><span class=\"kw1\">set</span> oid3_lists <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> ii <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$ii</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> ii<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> oid_list <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$oid2_lists</span> <span class=\"re0\">$ii</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> add_fields <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span> <span class=\"re0\">$dots_max</span> - <span class=\"re0\">$dots_arr</span><span class=\"br0\">(</span><span class=\"sy0\">$</span><span class=\"br0\">{</span>ii<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"re0\">$add_fields</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$add_fields</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> oid_list -<span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">lappend</span> oid3_lists <span class=\"re0\">$oid_list</span><br/><span class=\"br0\">}</span>       <br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"re0\">$dots_max</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> oid3_lists <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -index <span class=\"re0\">$n</span> -increasing <span class=\"re0\">$oid3_lists</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># unpad strings of different dot counts</span><br/><span class=\"kw1\">set</span> oid4_lists <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> ii <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$ii</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> ii<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> oid_list <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$oid3_lists</span> <span class=\"re0\">$ii</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact -integer <span class=\"re0\">$oid_list</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> oid2_list <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$oid_list</span> <span class=\"nu0\">0</span> <span class=\"sy0\">$</span><span class=\"br0\">{</span>j<span class=\"br0\">}</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">lappend</span> oid4_lists <span class=\"re0\">$oid2_list</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> oid4_lists <span class=\"re0\">$oid_list</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> oid_list <span class=\"re0\">$oid4_lists</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$oid_list</span> <span class=\"st0\">\".\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn sortOIDS(oids){  // oids is not modified, a new list is created<br/>   // pad each oid with a terminal (-1) so zip won't short cut<br/>   oids=oids.pump(List(),fcn(oid){ (oid + \".-1\").split(\".\").apply(\"toInt\") });<br/>   oids.sort(  // in place sort<br/>      fcn(a,b){ // a &amp; b are (x,y,z,...-1), eg (0,4,2,54,-1), (4,6,-1)<br/>\t a.zip(b).reduce(fcn(_,[(a,b)]){  // if one list longer, zip truncates<br/>\t    if(a==b) return(True);\t // continue to next field<br/>\t    return(Void.Stop,a&lt;b);\t// OIDa&lt;OIDb == cmp this field<br/>\t },True);<br/>      });<br/>   oids.pump(List,fcn(list){ list[0,-1].concat(\".\") }) // back to strings<br/>}</pre>"}]}