{"task": "Digital_root", "blocks": [{"lang": "360 Assembly", "loc": 46, "block": "<pre class=\"text highlighted_source\">*        Digital root              21/04/2017<br/>DIGROOT  CSECT<br/>         USING  DIGROOT,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=A((PG-T)/4))  do i=1 to hbound(t)<br/>         LR     R1,R6                i<br/>         SLA    R1,2                 *4<br/>         L      R10,T-4(R1)          nn=t(i)<br/>         LR     R7,R10               n=nn<br/>         SR     R9,R9                ap=0<br/>       DO WHILE=(C,R7,GE,=A(10))     do while(n&gt;=10)<br/>         SR     R8,R8                  x=0<br/>       DO WHILE=(C,R7,GE,=A(10))       do while(n&gt;=10)<br/>         LR     R4,R7                    n<br/>         SRDA   R4,32                    &gt;&gt;r5<br/>         D      R4,=A(10)                m=n//10<br/>         LR     R7,R5                    n=n/10<br/>         AR     R8,R4                    x=x+m<br/>       ENDDO    ,                      end<br/>         AR     R7,R8                  n=x+n<br/>         LA     R9,1(R9)               ap=ap+1<br/>       ENDDO    ,                    end<br/>         XDECO  R10,XDEC             nn<br/>         MVC    PG+7(10),XDEC+2<br/>         XDECO  R9,XDEC              ap<br/>         MVC    PG+31(3),XDEC+9<br/>         XDECO  R7,XDEC              n<br/>         MVC    PG+41(1),XDEC+11<br/>         XPRNT  PG,L'PG              print<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>T        DC     F'627615',F'39390',F'588225',F'2147483647'<br/>PG       DC     CL80'number=xxxxxxxxxx  persistence=xxx  root=x'<br/>XDEC     DS     CL12<br/>         YREGS<br/>         END    DIGROOT</pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Generic_Root <span class=\"kw1\">is</span> <br/>   <span class=\"kw3\">type</span> Number <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span>;<br/>   <span class=\"kw3\">type</span> Number_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Number;<br/>   <span class=\"kw3\">type</span> Base_Type <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">2</span> .. <span class=\"nu0\">16</span>; <span class=\"co1\">-- any reasonable base to write down numb</span><br/>\u00a0<br/>   <span class=\"kw3\">generic</span><br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"&amp;\"</span><span class=\"br0\">(</span>X, Y: Number<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Number;<br/>      <span class=\"co1\">-- instantiate with \"+\" for additive digital roots</span><br/>      <span class=\"co1\">-- instantiate with \"*\" for multiplicative digital roots</span><br/>   <span class=\"kw3\">procedure</span> Compute_Root<span class=\"br0\">(</span>N: Number; <br/>                     Root, Persistence: <span class=\"kw3\">out</span> Number;<br/>                     Base: Base_Type\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- computes Root and Persistence of N;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> Generic_Root;</pre>"}, {"lang": "ALGOL 68", "loc": 34, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># calculates the digital root and persistance of n #</span><br/><span class=\"kw4\">PROC</span> digital root <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> root<span class=\"sy1\">,</span> persistance <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> number <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>         persistance <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> persistance <span class=\"kw17\">PLUSAB</span> 1<span class=\"sy1\">;</span><br/>               <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> digit sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>               <span class=\"kw2\">WHILE</span> number <span class=\"sy1\">&gt;</span> 0<br/>               <span class=\"kw2\">DO</span><br/>                   digit sum <span class=\"kw17\">PLUSAB</span> number <span class=\"kw12\">MOD</span> 10<span class=\"sy1\">;</span><br/>                   number    <span class=\"kw17\">OVERAB</span> 10<br/>               <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>               number <span class=\"sy1\">:=</span> digit sum<span class=\"sy1\">;</span><br/>               number <span class=\"sy1\">&gt;</span> 9<br/>         <span class=\"kw2\">DO</span><br/>               <span class=\"kw7\">SKIP</span><br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         root <span class=\"sy1\">:=</span> <span class=\"kw8\">SHORTEN</span> <span class=\"kw8\">SHORTEN</span> number  <br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># digital root #</span><br/>\u00a0<br/><span class=\"coMULTI\"># calculates and prints the digital root and persistace of number #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> digital root and persistance <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> number <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span>    root<span class=\"sy1\">,</span> persistance<span class=\"sy1\">;</span><br/>         digital root<span class=\"br0\">(</span> number<span class=\"sy1\">,</span> root<span class=\"sy1\">,</span> persistance <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>15 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" root: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> root<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" persistance: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> persistance<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>3 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print digital root and persistance #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the digital root proc #</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"kw22\">print</span> digital root and persistance<span class=\"br0\">(</span>       627615 <span class=\"br0\">)</span><br/>    <span class=\"sy1\">;</span> <span class=\"kw22\">print</span> digital root and persistance<span class=\"br0\">(</span>        39390 <span class=\"br0\">)</span><br/>    <span class=\"sy1\">;</span> <span class=\"kw22\">print</span> digital root and persistance<span class=\"br0\">(</span>       588225 <span class=\"br0\">)</span><br/>    <span class=\"sy1\">;</span> <span class=\"kw22\">print</span> digital root and persistance<span class=\"br0\">(</span> 393900588225 <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ALGOL W", "loc": 63, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>   \u00a0% calculates the digital root and persistence of an integer in base 10  \u00a0%<br/>   \u00a0% in order to allow for numbers larger than 2^31, the number is passed  \u00a0%<br/>   \u00a0% as the lower and upper digits e.g. 393900588225 can be processed by   \u00a0%<br/>   \u00a0% specifying upper = 393900, lower = 58825                              \u00a0%<br/>    procedure findDigitalRoot( integer value  upper, lower<br/>                            \u00a0; integer result digitalRoot, persistence<br/>                             )\u00a0;<br/>    begin<br/>\u00a0<br/>        integer procedure sumDigits( integer value n )\u00a0;<br/>        begin<br/>            integer digits, sum;<br/>\u00a0<br/>            digits\u00a0:= abs n;<br/>            sum   \u00a0:= 0;<br/>\u00a0<br/>            while digits &gt; 0<br/>            do begin<br/>                sum   \u00a0:= sum + ( digits rem 10 );<br/>                digits\u00a0:= digits div 10<br/>            end\u00a0% while digits &gt; 0\u00a0%\u00a0;<br/>\u00a0<br/>           \u00a0% result:\u00a0% sum<br/>        end sumDigits;<br/>\u00a0<br/>        digitalRoot\u00a0:= sumDigits( upper ) + sumDigits( lower );<br/>        persistence\u00a0:= 1;<br/>\u00a0<br/>        while digitalRoot &gt; 9<br/>        do begin<br/>            persistence\u00a0:= persistence + 1;<br/>            digitalRoot\u00a0:= sumDigits( digitalRoot );<br/>        end\u00a0% while digitalRoot &gt; 9\u00a0%\u00a0;<br/>\u00a0<br/>    end findDigitalRoot\u00a0;<br/>\u00a0<br/>   \u00a0% calculates and prints the digital root and persistence                \u00a0%<br/>    procedure printDigitalRootAndPersistence( integer value upper, lower )\u00a0;<br/>    begin<br/>        integer digitalRoot, persistence;<br/>        findDigitalRoot( upper, lower, digitalRoot, persistence );<br/>        write( s_w\u00a0:= 0 \u00a0% set field saeparator width for this statement\u00a0%<br/>             , i_w\u00a0:= 8 \u00a0% set integer field width for this statement   \u00a0%<br/>             , upper<br/>             , \", \"<br/>             , lower<br/>             , i_w\u00a0:= 2 \u00a0% change integer field width\u00a0%<br/>             , \": digital root: \"<br/>             , digitalRoot<br/>             , \", persistence: \"<br/>             , persistence<br/>             )<br/>    end printDigitalRootAndPersistence\u00a0;<br/>\u00a0<br/>   \u00a0% test the digital root and persistence procedures\u00a0%<br/>    printDigitalRootAndPersistence(      0, 627615 );<br/>    printDigitalRootAndPersistence(      0,  39390 );<br/>    printDigitalRootAndPersistence(      0, 588225 );<br/>    printDigitalRootAndPersistence( 393900, 588225 )<br/>\u00a0<br/>end.</pre>"}, {"lang": "Applesoft BASIC", "loc": 87, "block": "<pre class=\"text highlighted_source\">1 GOSUB 430\"BASE SETUP<br/>2 FOR E = 0 TO 1 STEP 0<br/>3     GOSUB 7\"READ<br/>4     ON E + 1 GOSUB 50, 10<br/>5 NEXT E<br/>6 END<br/>\u00a0<br/>7 READ N$<br/>8 E = N$ = \"\"<br/>9 RETURN<br/>\u00a0<br/>10 GOSUB 7\"READ BASE<br/>20 IF E THEN RETURN<br/>30 BASE = VAL(N$)<br/>40 READ N$<br/>\u00a0<br/>50 GOSUB 100\"DIGITAL ROOT<br/>60 GOSUB 420: PRINT \" HAS AD\";<br/>70 PRINT \"DITIVE PERSISTENCE\";<br/>80 PRINT \" \"P\" AND DIGITAL R\";<br/>90 PRINT \"OOT \"X$\";\"\u00a0: RETURN<br/>\u00a0<br/>REM DIGITAL ROOT OF N$, RETURNS X$ AND P<br/>\u00a0<br/>100 P = 0\u00a0: L = LEN(N$)<br/>110 X$ = MID$(N$, 2, L - 1)<br/>120 N = LEFT$(X$, 1) = \"-\"<br/>130 IF NOT N THEN X$ = N$<br/>140 FOR P = 0 TO 1E38<br/>150     L = LEN(X$)<br/>160     IF L &lt; 2 THEN RETURN<br/>170     GOSUB 200\"DIGIT SUM<br/>180     X$ = S$<br/>190 NEXT P\u00a0: STOP<br/>\u00a0<br/>REM DIGIT SUM OF X$, RETURNS S$<br/>\u00a0<br/>200 S$ = \"0\"<br/>210 R$ = X$<br/>220 L = LEN(R$)<br/>230 FOR L = L TO 1 STEP -1<br/>240     E$ = \"\"\u00a0: V$ = RIGHT$(R$, 1) <br/>250     GOSUB 400\u00a0: S = LEN(S$)<br/>260     ON R$ &lt;&gt; \"0\" GOSUB 300<br/>270     R$ = MID$(R$, 1, L - 1)<br/>280 NEXT L<br/>290 RETURN<br/>\u00a0<br/>REM ADD V TO S$<br/>\u00a0<br/>300 FOR C = V TO 0 STEP 0<br/>310     V$ = RIGHT$(S$, 1)<br/>320     GOSUB 400\u00a0: S = S - 1<br/>330     S$ = MID$(S$, 1, S)<br/>340     V = V + C\u00a0: C = V &gt;= BASE<br/>350     IF C THEN V = V - BASE<br/>360     GOSUB 410\u00a0: E$ = V$ + E$<br/>370     IF S THEN NEXT C<br/>380 IF C THEN S$ = \"1\"<br/>390 S$ = S$ + E$\u00a0: RETURN<br/>\u00a0<br/>REM BASE VAL<br/>400 V = V(ASC(V$))\u00a0: RETURN<br/>\u00a0<br/>REM BASE STR$<br/>410 V$ = V$(V)\u00a0: RETURN<br/>\u00a0<br/>REM BASE DISPLAY<br/>420 PRINT N$;<br/>421 IF BASE = 10 THEN RETURN<br/>422 PRINT \"(\"BASE\")\";<br/>423 RETURN<br/>\u00a0<br/>REM BASE SETUP<br/>430 IF BASE = 0 THEN BASE = 10<br/>440 DIM V(127), V$(35)<br/>450 FOR I = 0 TO 35<br/>460     V = 55 + I - (I &lt; 10) * 7<br/>470     V$(I) = CHR$(V)<br/>480     V(V) = I<br/>490 NEXT I\u00a0: RETURN<br/>\u00a0<br/>500  DATA627615,39390,588225<br/>510  DATA393900588225<br/>1000 DATA,30<br/>1010 DATADIGITALROOT<br/>63999DATA,</pre>"}, {"lang": "AutoHotkey", "loc": 18, "block": "<pre class=\"autohotkey highlighted_source\">p <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>for key<span class=\"sy0\">,</span> val in <span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">1597</span><span class=\"sy0\">,</span><span class=\"nu0\">381947</span><span class=\"sy0\">,</span><span class=\"nu0\">92524902</span><span class=\"sy0\">,</span><span class=\"nu0\">448944221089</span><span class=\"br0\">]</span><br/><span class=\"br0\">{</span><br/>    n <span class=\"sy0\">:=</span> val<br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><br/>    <span class=\"br0\">{</span><br/>        m <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> n<br/>            m <span class=\"sy0\">+=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>        n <span class=\"sy0\">:=</span> m<span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>    <span class=\"br0\">}</span><br/>    p<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>val<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> i<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>for key<span class=\"sy0\">,</span> val in p<br/>    Output <span class=\"sy0\">.=</span> val<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"st0\">\": Digital Root = \"</span> val<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\", Additive Persistence = \"</span> val<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"st0\">\"`n\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">524288</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span>\u00a0% Output</pre>"}, {"lang": "AWK", "loc": 25, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># syntax: GAWK -f DIGITAL_ROOT.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"627615,39390,588225,393900588225,10,199\"</span>,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dr = digitalroot<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%12.0f has additive persistence\u00a0%d and digital root of\u00a0%d<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,p,dr<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> digitalroot<span class=\"br0\">(</span>n,b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    p = <span class=\"nu0\">0</span> <span class=\"co1\"># global</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">&gt;=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      p<span class=\"sy3\">++</span><br/>      n = digitsum<span class=\"br0\">(</span>n,b<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> digitsum<span class=\"br0\">(</span>n,b,  q,s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      q = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n <span class=\"sy3\">/</span> b<span class=\"br0\">)</span><br/>      s <span class=\"sy3\">+</span>= n <span class=\"sy3\">-</span> q <span class=\"sy3\">*</span> b<br/>      n = q<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 24, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> digitalRoot <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'test inputs:</span><br/>digitalRoot <span class=\"nu0\">627615</span><br/>digitalRoot <span class=\"nu0\">39390</span><br/>digitalRoot <span class=\"nu0\">588225</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> digitalRoot <span class=\"br0\">(</span>what <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> w <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> t <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>    w <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>what<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> w <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">DO</span><br/>            c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">WHILE</span> w<br/>                t <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> <span class=\"br0\">(</span>w <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                w <span class=\"sy0\">=</span> w \\ <span class=\"nu0\">10</span><br/>            <span class=\"kw1\">WEND</span><br/>            w <span class=\"sy0\">=</span> t<br/>            t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">LOOP</span> <span class=\"kw1\">WHILE</span> w <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> what; <span class=\"st0\">\": additive persistance \"</span>; c; <span class=\"st0\">\", digital root \"</span>; w<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "Batch File", "loc": 44, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::</span><br/><span class=\"co2\">::Digital Root Task from Rosetta Code Wiki</span><br/><span class=\"co2\">::Batch File Implementation</span><br/><span class=\"co2\">::</span><br/><span class=\"co2\">::Base 10...</span><br/><span class=\"co2\">::</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>::THE MAIN THING...</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">x</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>9876543214 393900588225 1985989328582 34559<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">droot</span> <span class=\"sy0\">%%</span><span class=\"re3\">x</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\">::/THE MAIN THING...</span><br/><span class=\"co2\"><br/>::THE FUNCTION</span><br/>:<span class=\"re0\">droot</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp2sum=<span class=\"sy0\">%</span><span class=\"re3\">1</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> persist=1<br/>\u00a0<br/>:<span class=\"re0\">cyc1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> sum=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> scan_digit=0<br/>:<span class=\"re0\">cyc2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> digit=<span class=\"sy0\">!</span><span class=\"re2\">inp2sum:~%<span class=\"re3\">scan_digit</span>%,1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">digit</span><span class=\"sy0\">%</span>\"==\"\" <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">sumdone)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a sum+=<span class=\"sy0\">%</span><span class=\"re3\">digit</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a scan_digit+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">cyc2</span><br/>\u00a0<br/>:<span class=\"re0\">sumdone</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">sum</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 10 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^(</span><span class=\"sy0\">%</span><span class=\"re3\">1</span><span class=\"co3\">^)</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Additive Persistence=<span class=\"sy0\">%</span><span class=\"re3\">persist</span><span class=\"sy0\">%</span> Digital Root=<span class=\"sy0\">%</span><span class=\"re3\">sum</span><span class=\"sy0\">%</span>.<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a persist+=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inp2sum=<span class=\"sy0\">%</span><span class=\"re3\">sum</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">cyc1</span><br/><span class=\"co2\">::/THE FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">      *FLOAT64<br/>      PRINT \"Digital root of 627615 is \"; FNdigitalroot(627615, 10, p)\u00a0;<br/>      PRINT \" (additive persistence \"\u00a0; p \")\"<br/>      PRINT \"Digital root of 39390 is \"; FNdigitalroot(39390, 10, p)\u00a0;<br/>      PRINT \" (additive persistence \"\u00a0; p \")\"<br/>      PRINT \"Digital root of 588225 is \"; FNdigitalroot(588225, 10, p)\u00a0;<br/>      PRINT \" (additive persistence \"\u00a0; p \")\"<br/>      PRINT \"Digital root of 393900588225 is \"; FNdigitalroot(393900588225, 10, p)\u00a0;<br/>      PRINT \" (additive persistence \"\u00a0; p \")\"<br/>      PRINT \"Digital root of 9992 is \"; FNdigitalroot(9992, 10, p)\u00a0;<br/>      PRINT \" (additive persistence \"\u00a0; p \")\"<br/>      END<br/>\u00a0<br/>      DEF FNdigitalroot(n, b, RETURN c)<br/>      c = 0<br/>      WHILE n &gt;= b<br/>        c += 1<br/>        n = FNdigitsum(n, b)<br/>      ENDWHILE<br/>      = n<br/>\u00a0<br/>      DEF FNdigitsum(n, b)<br/>      LOCAL q, s<br/>      WHILE n &lt;&gt; 0<br/>        q = INT(n / b)<br/>        s += n - q * b<br/>        n = q<br/>      ENDWHILE<br/>      = s</pre>"}, {"lang": "Befunge", "loc": 8, "block": "<pre class=\"text highlighted_source\">0\"\u00a0:rebmun retnE\"&gt;:#,_0 0v<br/>v\\1:/+55p00&lt;v\\`\\0::-\"0\"&lt;~&lt;<br/>#&gt;:55+%00g+^&gt;9`+#v_+\\ 1+\\^<br/>&gt;|`9:p000&lt;_v#`1\\$&lt;  v\"gi\"&lt;<br/>|&gt; \\ 1 + \\ &gt;0\"\u00a0:toor lat\"^<br/>&gt;$$00g\\1+^@,+&lt;v\"Di\",&gt;#+ 5&lt;<br/>&gt;:#,_$ . 5 5 ^&gt;:#,_\\.55+,v<br/>^\"Additive Persistence: \"&lt;</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">  ( root<br/>  =   sum persistence n d<br/>    .  \u00a0!arg:(~&gt;9.?)<br/>      |  \u00a0!arg:(?n.?persistence)<br/>        &amp; 0:?sum<br/>        &amp; ( @(\u00a0!n<br/>            \u00a0:  \u00a0?<br/>                 (#%@?d&amp;!d+!sum:?sum&amp;~)<br/>                \u00a0?<br/>             )<br/>          | root$(!sum.!persistence+1)<br/>          )<br/>  )<br/>&amp; (   627615 39390 588225 393900588225 10 199<br/>   \u00a0:  \u00a0?<br/>        ( #%@?N<br/>        &amp; root$(!N.0):(?Sum.?Persistence)<br/>        &amp;   out<br/>          $ (\u00a0!N<br/>              \"has additive persistence\"<br/>             \u00a0!Persistence<br/>              \"and digital root of\"<br/>             \u00a0!Sum<br/>            )<br/>        &amp; ~<br/>        )<br/>       \u00a0?<br/>  | done<br/>  );</pre>"}, {"lang": "C", "loc": 26, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> droot<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> base<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>pers<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>pers<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>pers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&gt;=</span> base<span class=\"sy0\">;</span> x <span class=\"sy0\">=</span> d<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>pers<span class=\"br0\">)</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x<span class=\"sy0\">;</span> d <span class=\"sy0\">+=</span> x <span class=\"sy0\">%</span> base<span class=\"sy0\">,</span> x <span class=\"sy0\">/=</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>d <span class=\"sy0\">=</span> x <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\td <span class=\"sy0\">=</span> base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> pers<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">long</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">588225</span><span class=\"sy0\">,</span> 393900588225LL<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\td <span class=\"sy0\">=</span> droot<span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>pers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lld: pers\u00a0%d, root\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> pers<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> DigitalRoot<span class=\"br0\">(</span><span class=\"kw4\">long</span> num<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> additivepersistence <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            num <span class=\"sy0\">=</span> num<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            additivepersistence<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>additivepersistence, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> num <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">627615</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, <span class=\"nu0\">393900588225</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> t <span class=\"sy0\">=</span> DigitalRoot<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} has additive persistence {1} and digital root {2}\"</span>, num, t<span class=\"sy0\">.</span><span class=\"me1\">Item1</span>, t<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 30, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// Calculate the Digital Root and Additive Persistance of an Integer - Compiles with gcc4.7</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Nigel Galloway. July 23rd., 2012</span><br/><span class=\"co1\">//</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> P_<span class=\"sy1\">&gt;</span> P_ IncFirst<span class=\"br0\">(</span><span class=\"kw4\">const</span> P_<span class=\"sy3\">&amp;</span> src<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> P_<span class=\"br0\">(</span>src.<span class=\"me1\">first</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, src.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> DigitalRoot<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> digits, <span class=\"kw4\">int</span> base <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> SumDigits<span class=\"br0\">(</span>digits, base<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> x <span class=\"sy1\">&lt;</span> base <span class=\"sy4\">?</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, x<span class=\"br0\">)</span> <span class=\"sy4\">:</span> IncFirst<span class=\"br0\">(</span>DigitalRoot<span class=\"br0\">(</span>x, base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"co1\">// x is implicitly converted to unsigned long long; this is lossless</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ip<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">961038</span>,<span class=\"nu0\">923594037444</span>,<span class=\"nu0\">670033</span>,<span class=\"nu0\">448944221089</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i<span class=\"sy4\">:</span>ip<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> res <span class=\"sy1\">=</span> DigitalRoot<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" has digital root \"</span> <span class=\"sy1\">&lt;&lt;</span> res.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and additive persistance \"</span> <span class=\"sy1\">&lt;&lt;</span> res.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> hip<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu12\">0x7e0</span>,<span class=\"nu12\">0x14e344</span>,<span class=\"nu12\">0xd60141</span>,<span class=\"nu12\">0x12343210</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i<span class=\"sy4\">:</span>hip<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> res <span class=\"sy1\">=</span> DigitalRoot<span class=\"br0\">(</span>i,<span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">hex</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" has digital root \"</span> <span class=\"sy1\">&lt;&lt;</span> res.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" and additive persistance \"</span> <span class=\"sy1\">&lt;&lt;</span> res.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Component Pascal", "loc": 42, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> DigitalRoot;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span> Strings<span class=\"sy0\">,</span> TextMappers<span class=\"sy0\">,</span> DevCommanders;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> CalcDigitalRoot<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>; OUT dr<span class=\"sy0\">,</span>pers<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>\tstr<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">64</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tdr <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;pers <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">LOOP</span><br/>\t\tStrings.<span class=\"me1\">IntToString</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>str<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> dr <span class=\"sy0\">:=</span> x\u00a0;<span class=\"kw1\">EXIT</span> <span class=\"kw1\">END</span>;<br/>\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;dr <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>dr<span class=\"sy0\">,</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>pers<span class=\"br0\">)</span>;<br/>\t\tx <span class=\"sy0\">:=</span> dr<br/>\t<span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> CalcDigitalRoot;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tdr<span class=\"sy0\">,</span>pers<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\ts<span class=\"sy0\">:</span> TextMappers.<span class=\"me1\">Scanner</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ts.<span class=\"me1\">ConnectTo</span><span class=\"br0\">(</span>DevCommanders.<span class=\"me1\">par</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span>;<br/>\ts.<span class=\"me1\">SetPos</span><span class=\"br0\">(</span>DevCommanders.<span class=\"me1\">par</span>.<span class=\"me1\">beg</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">REPEAT</span><br/>\t\ts.<span class=\"me1\">Scan</span>;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> TextMappers.<span class=\"me1\">int</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> TextMappers.<span class=\"me1\">lint</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tCalcDigitalRoot<span class=\"br0\">(</span>s.<span class=\"me1\">int</span><span class=\"sy0\">,</span>dr<span class=\"sy0\">,</span>pers<span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>s.<span class=\"me1\">int</span><span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Digital root: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>dr<span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Persistence: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>pers<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">UNTIL</span> s.<span class=\"me1\">rider</span>.<span class=\"me1\">eot</span>;<br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> DigitalRoot.<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> digital-root <span class=\"br0\">(</span>number <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for n <span class=\"sy0\">=</span> number then s<br/>        for ap <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ ap<span class=\"br0\">)</span><br/>        for s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum-digits n base<span class=\"br0\">)</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> s base<span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"br0\">(</span>values s ap<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>nr base<span class=\"br0\">)</span> in '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">627615</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">393900588225</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#X14e344 <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#36Rdg9r <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>dr ap<span class=\"br0\">)</span> <span class=\"br0\">(</span>digital-root nr base<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>format T <span class=\"st0\">\"~vR (base ~a): additive persistence = ~a, digital root = ~vR~%\"</span> <br/>                   base nr base ap base dr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 36, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"sy0\">,</span> Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> digitalRoot<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T inRoot<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> base<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>base <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    Unqual<span class=\"sy0\">!</span>T root <span class=\"sy0\">=</span> inRoot.<span class=\"me1\">abs</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> persistence <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>root <span class=\"sy0\">&gt;=</span> base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> num <span class=\"sy0\">=</span> root<span class=\"sy0\">;</span><br/>        root <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>num <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            root <span class=\"sy0\">+=</span> num <span class=\"sy0\">%</span> base<span class=\"sy0\">;</span><br/>            num <span class=\"sy0\">/=</span> base<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        persistence<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>persistence<span class=\"sy0\">,</span> root<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> f1 <span class=\"sy0\">=</span> <span class=\"st0\">\"%s(%d): additive persistance=\u00a0%d, digital root=\u00a0%d\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> b<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span>f1<span class=\"sy0\">,</span> text<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n.<span class=\"me1\">digitalRoot</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> f2 <span class=\"sy0\">=</span> <span class=\"st0\">\"&lt;BIG&gt;(%d): additive persistance=\u00a0%d, digital root=\u00a0%d\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"st0\">\"581427189816730304036810394583022044713\"</span> <span class=\"sy0\">~</span><br/>                         <span class=\"st0\">\"00738980834668522257090844071443085937\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> b<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span>f2<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n.<span class=\"me1\">digitalRoot</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Shortened output.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">?[10~rd10&lt;p]sp[+z1&lt;q]sq[lpxlqxd10&lt;r]dsrxp</pre>"}, {"lang": "DCL", "loc": 18, "block": "<pre class=\"dcl highlighted_source\">$ x <span class=\"sy0\">=</span> <span class=\"kw3\">p1</span><br/>$ count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ sum <span class=\"sy0\">=</span> x<br/>$ loop1:<br/>$  length <span class=\"sy0\">=</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">if</span> length <span class=\"sy0\">.eq.</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done<br/>$  i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$  sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$  loop2:<br/>$   digit <span class=\"sy0\">=</span> <span class=\"kw2\">f$extract</span><span class=\"br0\">(</span> i, <span class=\"nu0\">1</span>, x <span class=\"br0\">)</span><br/>$   sum <span class=\"sy0\">=</span> sum + digit<br/>$   i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$   <span class=\"kw1\">if</span> i <span class=\"sy0\">.lt.</span> length <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop2<br/>$  x <span class=\"sy0\">=</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> sum <span class=\"br0\">)</span><br/>$  count <span class=\"sy0\">=</span> count + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">goto</span> loop1<br/>$<span class=\"re2\"> done:</span><br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw3\">p1</span>, <span class=\"st0\">\" has additive persistence \"</span>, count, <span class=\"st0\">\" and digital root of \"</span>, sum</pre>"}, {"lang": "Eiffel", "loc": 71, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tdigital_root_test_values<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>INTEGER_64<span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Test values.</span><br/>\t\t<span class=\"kw2\">once</span><br/>\t\t \t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">670033</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, <span class=\"nu0\">393900588225</span><span class=\"sy0\">&gt;&gt;</span> <span class=\"co1\">-- base 10</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tdigital_root_expected_result<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>INTEGER_64<span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Expected result values.</span><br/>\t\t<span class=\"kw2\">once</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">9</span><span class=\"sy0\">&gt;&gt;</span> <span class=\"co1\">-- base 10</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tresults<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>INTEGER_64<span class=\"br0\">]</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> digital_root_test_values.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tresults <span class=\"sy0\">:=</span> compute_digital_root <span class=\"br0\">(</span>digital_root_test_values <span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"kw2\">if</span> results <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> ~ digital_root_expected_result <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span> <span class=\"sy0\">+</span> digital_root_test_values <span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" has additive persistence \"</span> <span class=\"sy0\">+</span> results <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" and digital root \"</span> <span class=\"sy0\">+</span> results <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"Error in the calculation of the digital root of \"</span> <span class=\"sy0\">+</span> digital_root_test_values <span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\". Expected value: \"</span> <span class=\"sy0\">+</span> digital_root_expected_result <span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", produced value: \"</span> <span class=\"sy0\">+</span> results <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i\t<span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>compute_digital_root <span class=\"br0\">(</span>a_number<span class=\"sy0\">:</span> INTEGER_64;  a_base<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span>INTEGER_64<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"co1\">-- Returns additive persistence and digital root of `a_number' using `a_base'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>                        valid_number<span class=\"sy0\">:</span> a_number <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>                        valid_base<span class=\"sy0\">:</span> a_base <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw2\">local</span><br/>\t\t\ttemp_num<span class=\"sy0\">:</span> INTEGER_64<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a_number<br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> a_base<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\ttemp_num <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\ttemp_num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>temp_num \\\\ a_base<span class=\"br0\">)</span><br/>\t\t\t\t\ttemp_num <span class=\"sy0\">:=</span> temp_num <span class=\"sy0\">//</span> a_base<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 30, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>\u00a0<br/>extension $op<br/>{<br/>    digitalRoot<br/>    [<br/>        int  additivepersistence\u00a0:= 0.<br/>        long num\u00a0:= self.<br/>\u00a0<br/>        while (num &gt; 9)<br/>        [<br/>            num\u00a0:= num literal; toArray; selectBy(:ch)(ch toInt - 48); summarize(LongInteger new).<br/>\u00a0<br/>            additivepersistence += 1.<br/>        ].<br/>\u00a0<br/>        ^ { item1 = additivepersistence. item2 = num toInt. }.<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    (627615l, 39390l, 588225l, 393900588225l) forEach(:num)<br/>    [<br/>        var t\u00a0:= num digitalRoot.<br/>\u00a0<br/>        console printLineFormatted(\"{0} has additive persistence {1} and digital root {2}\", num, t item1, t item2).<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 22, "block": "<pre class=\"text highlighted_source\">defmodule Digital do<br/>  def root(n, base\\\\10), do: root(n, base, 0)<br/>\u00a0<br/>  defp root(n, base, ap) when n &lt; base, do: {n, ap}<br/>  defp root(n, base, ap) do<br/>    Integer.digits(n, base) |&gt; Enum.sum |&gt; root(base, ap+1)<br/>  end<br/>end<br/>\u00a0<br/>data = [627615, 39390, 588225, 393900588225]<br/>Enum.each(data, fn n -&gt;<br/>  {dr, ap} = Digital.root(n)<br/>  IO.puts \"#{n} has additive persistence #{ap} and digital root of #{dr}\"<br/>end)<br/>\u00a0<br/>base = 16<br/>IO.puts \"\\nBase = #{base}\"<br/>fmt = \"~.#{base}B(#{base}) has additive persistence ~w and digital root of ~w~n\"<br/>Enum.each(data, fn n -&gt;<br/>  {dr, ap} = Digital.root(n, base)<br/> \u00a0:io.format fmt, [n, ap, dr]<br/>end)</pre>"}, {"lang": "Erlang", "loc": 15, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> digital_root <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">627615</span><span class=\"sy1\">,</span> <span class=\"nu0\">39390</span><span class=\"sy1\">,</span> <span class=\"nu0\">588225</span><span class=\"sy1\">,</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Persistances</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">persistance_root</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span>\t<span class=\"re5\">Ns</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p has additive persistence ~p and digital root of ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Z</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Z</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Ns</span><span class=\"sy1\">,</span> <span class=\"re5\">Persistances</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">persistance_root</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">persistance_root</span><span class=\"br0\">(</span> sum_digits:<span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">persistance_root</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span>\t<span class=\"sy3\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"sy1\">-&gt;</span>\t<span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">persistance_root</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">persistance_root</span><span class=\"br0\">(</span> sum_digits:<span class=\"re3\">sum_digits</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\t<span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//Find the Digital Root of An Integer - Nigel Galloway: February 1st., 2015</span><br/><span class=\"co1\">//This code will work with any integer type</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">inline</span> digitalRoot N BASE <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> root<span class=\"br0\">(</span>p,n<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> sumDigits n BASE<br/>    <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;</span> BASE <span class=\"kw1\">then</span> <span class=\"br0\">(</span>s,p<span class=\"br0\">)</span> <span class=\"kw1\">else</span> root<span class=\"br0\">(</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, s<span class=\"br0\">)</span><br/>  root<span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">LanguagePrimitives</span></a>.<span class=\"me1\">GenericZero</span><span class=\"sy0\">&lt;</span>_<span class=\"sy0\">&gt;</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, N<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">USING: arrays formatting kernel math math.text.utils sequences\u00a0;<br/>IN: rosetta-code.digital-root<br/>\u00a0<br/>: digital-root ( n -- persistence root )<br/>    0 swap [ 1 digit-groups dup length 1 &gt; ] [ sum [ 1 + ] dip ]<br/>    while first\u00a0;<br/>\u00a0<br/>: print-root ( n -- )<br/>    dup digital-root<br/>    \"%-12d has additive persistence\u00a0%d and digital root\u00a0%d.\\n\"<br/>    printf\u00a0;<br/>\u00a0<br/>{ 627615 39390 588225 393900588225 } [ print-root ] each</pre>"}, {"lang": "Fortran", "loc": 33, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> prec<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">627615</span><br/><span class=\"co1\">call root_pers(i)</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">39390</span><br/><span class=\"co1\">call root_pers(i)</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">588225</span><br/><span class=\"co1\">call root_pers(i)</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">393900588225</span><br/><span class=\"co1\">call root_pers(i)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> root_pers<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">N</span>, s, a, i<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Number: '</span>, i<br/>n <span class=\"sy0\">=</span> i<br/>a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n.<span class=\"me1\">ge</span>.10<span class=\"br0\">)</span><br/>  a <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n.<span class=\"me1\">gt</span>.0<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> n<span class=\"sy0\">-</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>n,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>10.0D0,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>_8<br/>    n <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>n,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>,<span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  n <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'digital root = '</span>, s<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'additive persistance = '</span>, a<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (Sdigit) 0 swap begin base @ /mod &gt;r + r&gt; dup 0= until drop\u00a0;<br/>: digiroot 0 swap begin (Sdigit) &gt;r 1+ r&gt; dup base @ &lt; until\u00a0;</pre>"}, {"lang": "FreeBASIC", "loc": 27, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> digitalRoot<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, <span class=\"kw1\">ByRef</span> ap <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, base_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Dim</span> dr <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  ap = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> <br/>    dr = <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">While</span> n &gt; <span class=\"nu0\">0</span><br/>      dr += n <span class=\"kw1\">Mod</span> base_<br/>      n = n \\ base_<br/>    <span class=\"kw1\">Wend</span><br/>    ap += <span class=\"nu0\">1</span><br/>    n = dr<br/>  <span class=\"kw1\">Loop</span> <span class=\"kw1\">until</span> dr &lt; base_<br/>  <span class=\"kw1\">Return</span> dr<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> dr, ap<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"br0\">{</span><span class=\"nu0\">627615</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, <span class=\"nu0\">393900588225</span><span class=\"br0\">}</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/> ap = <span class=\"nu0\">0</span><br/> dr = digitalRoot<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, ap<span class=\"br0\">)</span><br/> <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\"Additive Persistence =\"</span>; ap, <span class=\"st0\">\"Digital root =\"</span>; dr<br/> <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 68, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Sum<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">,</span> base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>sum <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tb64 <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>base<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">/=</span> b64 <span class=\"sy1\">{</span><br/>\t\tsum <span class=\"sy2\">+=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">%</span> b64<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> DigitalRoot<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">,</span> base <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>persistence<span class=\"sy1\">,</span> root <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\troot <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> n<span class=\"sy1\">;</span> x &gt;<span class=\"sy2\">=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>base<span class=\"sy1\">);</span> x <span class=\"sy2\">=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>root<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\troot <span class=\"sy2\">=</span> Sum<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>\t\tpersistence<span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Normally the below would be moved to a *_test.go file and</span><br/><span class=\"co1\">// use the testing package to be runnable as a regular test.</span><br/>\u00a0<br/><span class=\"kw1\">var</span> testCases <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tn           <span class=\"kw4\">string</span><br/>\tbase        <span class=\"kw4\">int</span><br/>\tpersistence <span class=\"kw4\">int</span><br/>\troot        <span class=\"kw4\">int</span><br/><span class=\"sy1\">}{</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"627615\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"39390\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"588225\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"393900588225\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"11\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"e\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xe</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"87\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xf</span><span class=\"sy1\">},</span><br/>\t<span class=\"co1\">// From Applesoft BASIC example:</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"DigitalRoot\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">26</span><span class=\"sy1\">},</span> <span class=\"co1\">// 26 is Q base 30</span><br/>\t<span class=\"co1\">// From C++ example:</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"448944221089\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"7e0\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x6</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"14e344\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xf</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"d60141\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xa</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"12343210\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x1</span><span class=\"sy1\">},</span><br/>\t<span class=\"co1\">// From the D example:</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"1101122201121110011000000\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>\t\tn<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseUint<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span>n<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tp<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> DigitalRoot<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>base<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%12v (base\u00a0%2d) has additive persistence\u00a0%d and digital root\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>\t\t\ttc<span class=\"sy3\">.</span>n<span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>base<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> strconv<span class=\"sy3\">.</span>FormatInt<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>r<span class=\"sy1\">),</span> tc<span class=\"sy3\">.</span>base<span class=\"sy1\">))</span><br/>\t\t<span class=\"kw1\">if</span> p <span class=\"sy2\">!=</span> tc<span class=\"sy3\">.</span>persistence <span class=\"sy3\">||</span> r <span class=\"sy2\">!=</span> tc<span class=\"sy3\">.</span>root <span class=\"sy1\">{</span><br/>\t\t\tlog<span class=\"sy3\">.</span>Fatalln<span class=\"sy1\">(</span><span class=\"st0\">\"bad result:\"</span><span class=\"sy1\">,</span> tc<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Tuple <span class=\"br0\">(</span>swap<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/>digSum <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>digSum base <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> unfoldr f<br/>  <span class=\"kw1\">where</span><br/>    f <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> Nothing<br/>    f n <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>swap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quotRem\"><span class=\"kw3\">quotRem</span></a> n base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>digRoot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>digRoot base <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> base<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>digSum base<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"in base 10:\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> digRoot <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">]</span></pre>"}, {"lang": "Huginn", "loc": 16, "block": "<pre class=\"text highlighted_source\">main( argv_ ) {<br/>\tif ( size( argv_ ) &lt; 2 ) {<br/>\t\tthrow Exception( \"usage: digital-root {NUM}\" );<br/>\t}<br/>\tn = argv_[1];<br/>\tif ( ( size( n ) == 0 ) || ( n.find_other_than( \"0123456789\" ) &gt;= 0 ) ) {<br/>\t\tthrow Exception( \"{} is not a number\".format( n ) );<br/>\t}<br/>\tshift = integer( '0' ) + 1;<br/>\tacc = 0;<br/>\tfor ( d\u00a0: n ) {<br/>\t\tacc = 1 + ( acc + integer( d ) - shift )\u00a0% 9;<br/>\t}<br/>\tprint( \"{}\\n\".format( acc ) );<br/>\treturn ( 0 );<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> m <span class=\"sy0\">:=</span> n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>       ap <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>ap <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:=</span> sumdigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw4\">write</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span><span class=\"st0\">\" has additive persistence of \"</span><span class=\"sy0\">,</span>ap<span class=\"sy0\">,</span><span class=\"st0\">\" and digital root of \"</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>       <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> sumdigits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    n <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> s <span class=\"sy0\">+:=</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">digrot=: +/@<span class=\"sy0\">(</span>#.inv~&amp;<span class=\"nu0\">10</span><span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span><br/>addper=: <span class=\"nu0\">_1</span> + [: # +/@<span class=\"sy0\">(</span>#.inv~&amp;<span class=\"nu0\">10</span><span class=\"sy0\">)</span>^:a:</pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> DigitalRoot<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> calcDigitalRoot<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> number, <span class=\"kw4\">int</span> base<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> bi <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span>number, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> additivePersistence <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bi.<span class=\"me1\">signum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      bi <span class=\"sy0\">=</span> bi.<span class=\"me1\">negate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> biBase <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bi.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>biBase<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      number <span class=\"sy0\">=</span> bi.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      bi <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> number.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        bi <span class=\"sy0\">=</span> bi.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span>number.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      additivePersistence<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> additivePersistence, bi.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> arg <span class=\"sy0\">:</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> results <span class=\"sy0\">=</span> calcDigitalRoot<span class=\"br0\">(</span>arg, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>arg <span class=\"sy0\">+</span> <span class=\"st0\">\" has additive persistence \"</span> <span class=\"sy0\">+</span> results<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" and digital root of \"</span> <span class=\"sy0\">+</span> results<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">/// Digital root of 'x' in base 'b'.</span><br/><span class=\"co1\">/// @return {addpers, digrt}</span><br/><span class=\"kw1\">function</span> digitalRootBase<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">{</span>addpers<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> digrt<span class=\"sy0\">:</span>x<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">var</span> fauxroot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   while <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;=</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> b<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      fauxroot <span class=\"sy0\">+=</span> x <span class=\"sy0\">%</span> b<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">var</span> rootobj <span class=\"sy0\">=</span> digitalRootBase<span class=\"br0\">(</span>fauxroot<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   rootobj.<span class=\"me1\">addpers</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> rootobj<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 20, "block": "<pre class=\"text highlighted_source\">def do_until(condition; next):<br/>  def u: if condition then . else (next|u) end;<br/>  u;<br/>\u00a0<br/># n may be a decimal number or a string representing a decimal number<br/>def digital_root(n):<br/>  # string-only version<br/>  def dr:<br/>    # state: [mdr, persist]<br/>    do_until( .[0] | length == 1;<br/>              [ (.[0] | explode | map(.-48) | add | tostring), .[1] + 1 ]<br/>              );<br/>  [n|tostring, 0] | dr | .[0] |= tonumber;<br/>\u00a0<br/>def neatly:<br/>  . as $in<br/>  | range(0;length) <br/>  | \"\\(.): \\($in[.])\";<br/>\u00a0<br/>def rjust(n): tostring | (n-length)*\" \" + .;</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">function digitalroot(n::Integer, bs::Integer=10)<br/>    if n &lt; 0 || bs &lt; 2 throw(DomainError()) end<br/>    ds, pers = n, 0<br/>    while bs \u2264 ds<br/>        ds = sum(digits(ds, bs))<br/>        pers += 1<br/>    end<br/>    return pers, ds<br/>end<br/>\u00a0<br/>for i in [627615, 39390, 588225, 393900588225, big(2) ^ 100]<br/>    pers, ds = digitalroot(i)<br/>    println(i, \" has persistence \", pers, \" and digital root \", ds)<br/>end</pre>"}, {"lang": "K", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/ print digital root and additive persistence<br/>prt: {`\"Digital root = \", x, `\"Additive persistence = \",y}<br/>/ sum of digits of an integer<br/>sumdig: {d::(); (0&lt;){d::d,x!10; x%:10}/x; +/d}<br/>/ compute digital root and additive persistence<br/>digroot: {sm::sumdig x; ap::0; (9&lt;){sm::sumdig x;ap::ap+1; x:sm}/x; prt[sm;ap]}<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun sumDigits<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">&lt;</span> 0L -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>   -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn  <span class=\"sy0\">=</span> n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sum +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                nn /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>            <span class=\"br0\">}</span><br/>            sum<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun digitalRoot<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        n <span class=\"sy0\">&lt;</span> 0L  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>        n <span class=\"sy0\">&lt;</span> 10L -<span class=\"sy0\">&gt;</span> Pair<span class=\"br0\">(</span>n.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>    -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dr <span class=\"sy0\">=</span> n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ap <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>dr <span class=\"sy0\">&gt;</span> 9L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dr <span class=\"sy0\">=</span> sumDigits<span class=\"br0\">(</span>dr<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                ap++<br/>            <span class=\"br0\">}</span><br/>            Pair<span class=\"br0\">(</span>dr.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, ap<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> longArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">267</span>, <span class=\"nu0\">8128</span>, <span class=\"nu0\">627615</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, <span class=\"nu0\">393900588225</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a><span class=\"br0\">(</span>dr, ap<span class=\"br0\">)</span> <span class=\"sy0\">=</span> digitalRoot<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${n.toString().padEnd(12)} has additive persistence $ap and digital root of $dr\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> digital_root<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>    p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9.5</span> <span class=\"kw1\">do</span><br/>        n <span class=\"sy0\">=</span> sum_digits<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><br/>        p <span class=\"sy0\">=</span> p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">,</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>digital_root<span class=\"br0\">(</span><span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>digital_root<span class=\"br0\">(</span><span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>digital_root<span class=\"br0\">(</span><span class=\"nu0\">588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>digital_root<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">seq[n_, b_]\u00a0:= FixedPointList[Total[IntegerDigits[#, b]] &amp;, n];<br/>root[n_Integer, base_: 10]\u00a0:= If[base == 10, #, BaseForm[#, base]] &amp;[Last[seq[n, base]]]<br/>persistance[n_Integer, base_: 10]\u00a0:= Length[seq[n, base]] - 2;</pre>"}, {"lang": "Modula-2", "loc": 51, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> DigitalRoot;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> Root <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">RECORD</span><br/>        persistence<span class=\"sy0\">,</span>root <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> digitalRoot<span class=\"br0\">(</span>inRoot<span class=\"sy0\">,</span>base <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Root;<br/><span class=\"kw1\">VAR</span> root<span class=\"sy0\">,</span>persistence<span class=\"sy0\">,</span>num <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    root <span class=\"sy0\">:=</span> <span class=\"kw4\">ABS</span><span class=\"br0\">(</span>inRoot<span class=\"br0\">)</span>;<br/>    persistence <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> root&gt;<span class=\"sy0\">=</span>base <span class=\"kw1\">DO</span><br/>        num <span class=\"sy0\">:=</span> root;<br/>        root <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        <span class=\"kw1\">WHILE</span> num<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>            root <span class=\"sy0\">:=</span> root <span class=\"sy0\">+</span> <span class=\"br0\">(</span>num <span class=\"kw1\">MOD</span> base<span class=\"br0\">)</span>;<br/>            num <span class=\"sy0\">:=</span> num <span class=\"kw1\">DIV</span> base;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>persistence<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> Root<span class=\"br0\">{</span>persistence<span class=\"sy0\">,</span> root<span class=\"br0\">}</span><br/><span class=\"kw1\">END</span> digitalRoot;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    r <span class=\"sy0\">:</span> Root;<br/><span class=\"kw1\">BEGIN</span><br/>    r <span class=\"sy0\">:=</span> digitalRoot<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%u (base\u00a0%u): persistence=%u, digital root=%u<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r.persistence<span class=\"sy0\">,</span> r.root<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    b<span class=\"sy0\">,</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    r <span class=\"sy0\">:</span> Root;<br/><span class=\"kw1\">BEGIN</span><br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">267</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">8128</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">39390</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">627615</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">588225</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> DigitalRoot.</pre>"}, {"lang": "NetRexx", "loc": 34, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx ************************************************************<br/>* Test digroot<br/>**********************************************************************/</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'number -&gt; digital_root persistence'</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">7</span>           ,<span class=\"nu0\">7</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">627615</span>      ,<span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">39390</span>       ,<span class=\"nu0\">6</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">588225</span>      ,<span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span>,<span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>test_digroot<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span>,<span class=\"nu0\">9</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/* test error case */</span><br/>\u00a0<br/>method test_digroot<span class=\"br0\">(</span>n,dx,px<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>res=digroot<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Parse</span> res d p<br/><span class=\"kw1\">If</span> d=dx <span class=\"sy0\">&amp;</span> p=px <span class=\"kw3\">Then</span> tag=<span class=\"st0\">'ok'</span><br/>               <span class=\"kw3\">Else</span> tag=<span class=\"st0\">'expected:'</span> dx px<br/><span class=\"kw1\">Say</span> n <span class=\"st0\">'-&gt;'</span> d p tag<br/>\u00a0<br/>method digroot<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* Compute the digital root and persistence of the given decimal number<br/>* 19.08.2012 Walter Pachl derived from Rexx<br/>**************************** Bottom of Data **************************/</span><br/>p=<span class=\"nu0\">0</span>                                 <span class=\"coMULTI\">/* persistence                   */</span><br/><span class=\"kw1\">Loop</span> While n.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>             <span class=\"coMULTI\">/* more than one digit in n      */</span><br/>  s=<span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/* initialize sum                */</span><br/>  p=p+<span class=\"nu0\">1</span>                             <span class=\"coMULTI\">/* increment persistence         */</span><br/>  <span class=\"kw1\">Loop</span> while n<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span>                  <span class=\"coMULTI\">/* as long as there are digits   */</span><br/>    <span class=\"kw1\">Parse</span> n c +<span class=\"nu0\">1</span> n                  <span class=\"coMULTI\">/* pick the first one            */</span><br/>    s=s+c                           <span class=\"coMULTI\">/* add to the new sum            */</span><br/>    <span class=\"kw3\">End</span><br/>  n=s                               <span class=\"coMULTI\">/* the 'new' number              */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">return</span> n p                          <span class=\"coMULTI\">/* return root and persistence   */</span></pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc droot(n: int64): auto =<br/>  var x = @[n]<br/>  while x[x.high] &gt; 10:<br/>    var s = 0'i64<br/>    for dig in $x[x.high]:<br/>      s += parseInt(\"\" &amp; dig)<br/>    x.add s<br/>  return (x.len - 1, x[x.high])<br/>\u00a0<br/>for n in [627615'i64, 39390'i64, 588225'i64, 393900588225'i64]:<br/>  let (a, d) = droot(n)<br/>  echo align($n, 12),\" has additive persistance \",a,\" and digital root of \",d</pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: sumDigits(n, base)  0 while(n) [ n base /mod -&gt;n + ]\u00a0;<br/>\u00a0<br/>: digitalRoot(n, base)  <br/>   0 while(n 9 &gt;) [ 1 + sumDigits(n, base) -&gt;n ] n swap Pair new\u00a0;</pre>"}, {"lang": "Pascal", "loc": 70, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> DigitalRoot<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$mode objfpc}{$H+}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  <span class=\"co2\">{$IFDEF UNIX}{$IFDEF UseCThreads}</span><br/>  cthreads<span class=\"sy1\">,</span><br/>  <span class=\"co2\">{$ENDIF}{$ENDIF}</span><br/>  SysUtils<span class=\"sy1\">,</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// FPC has no Big mumbers implementation, Int64 will suffice.</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> GetDigitalRoot<span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span> Base<span class=\"sy1\">:</span> <span class=\"kw4\">Byte</span><span class=\"sy1\">;</span> <span class=\"kw1\">var</span> DRoot<span class=\"sy1\">,</span> Pers<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  DigitSum<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Pers <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    Inc<span class=\"br0\">(</span>Pers<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    DigitSum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> Value &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      Inc<span class=\"br0\">(</span>DigitSum<span class=\"sy1\">,</span> Value <span class=\"kw1\">mod</span> Base<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value <span class=\"kw1\">div</span> Base<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> DigitSum<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> Value &lt; Base<span class=\"sy1\">;</span><br/>  DRoot <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value<span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntToStrBase<span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span> Base<span class=\"sy1\">:</span> <span class=\"kw4\">Byte</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  <span class=\"co1\">// usable up to 36-Base</span><br/>  DigitSymbols <span class=\"sy3\">=</span> <span class=\"st0\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXY'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> Value &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> DigitSymbols<span class=\"br0\">[</span>Value <span class=\"kw1\">mod</span> Base<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> Result<span class=\"sy1\">;</span><br/>    Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Value <span class=\"kw1\">div</span> Base<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Display<span class=\"br0\">(</span><span class=\"kw1\">const</span> Value<span class=\"sy1\">:</span> Int64<span class=\"sy1\">;</span> Base<span class=\"sy1\">:</span> <span class=\"kw4\">Byte</span> <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  DRoot<span class=\"sy1\">,</span> Pers<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  StrValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  GetDigitalRoot<span class=\"br0\">(</span>Value<span class=\"sy1\">,</span> Base<span class=\"sy1\">,</span> DRoot<span class=\"sy1\">,</span> Pers<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Format<span class=\"br0\">(</span><span class=\"st0\">'%s(%d) has additive persistence\u00a0%d and digital root\u00a0%d.'</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span>IntToStrBase<span class=\"br0\">(</span>Value<span class=\"sy1\">,</span> Base<span class=\"br0\">)</span><span class=\"sy1\">,</span> Base<span class=\"sy1\">,</span> Pers<span class=\"sy1\">,</span> DRoot<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'--- Examples in 10-Base ---'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">627615</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">39390</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">588225</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"st0\">'--- Examples in 16-Base ---'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">627615</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">39390</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">588225</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Display<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">ReadLn</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">dsum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"sy0\">+=</span>n<span class=\"sy0\">%</span><span class=\"nu2\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">\\=</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> s<br/>additivePersistence<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span> s<span class=\"sy0\">++;</span> n<span class=\"sy0\">=</span>dsum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> s<br/>digitalRoot<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">9</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 51, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@digit</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">..</span><span class=\"st_h\">'z'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%digit</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">+</span><span class=\"re0\">$digit</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#digit</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> base <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$b</span> <span class=\"sy0\">||=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">@digit</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$result</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$digit</span><span class=\"br0\">[</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> digi_root <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$inbase</span> <span class=\"sy0\">=</span> base<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$additive_persistance</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">while</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$inbase</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"sy0\">++</span><span class=\"re0\">$additive_persistance</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> sum <span class=\"re0\">@digit</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$inbase</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$inbase</span> <span class=\"sy0\">=</span> base<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"re0\">$additive_persistance</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>MAIN<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">@numbers</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">@bases</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%25s(%2s): persistance =\u00a0%s, root =\u00a0%2s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/require.html\"><span class=\"kw3\">require</span></a> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@numbers</span><span class=\"sy0\">,</span> Math<span class=\"sy0\">::</span><span class=\"me2\">BigInt</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"5814271898167303040368\"</span><span class=\"sy0\">.</span><br/>      <span class=\"st0\">\"1039458302204471300738980834668522257090844071443085937\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$base</span> <span class=\"br0\">(</span><span class=\"re0\">@bases</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$num</span> <span class=\"br0\">(</span><span class=\"re0\">@numbers</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$inbase</span> <span class=\"sy0\">=</span> base<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$inbase</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'BIG'</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$inbase</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"re0\">$inbase</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"sy0\">,</span> digi_root<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> digroot <span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$base</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$root</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$persistence</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$root</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"nu0\">36</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"re0\">$base</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$persistence</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$root</span><span class=\"sy0\">,</span> <span class=\"re0\">$persistence</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@testnums</span> <span class=\"sy0\">=</span><br/>    <span class=\"nu0\">627615</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">39390</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">588225</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">393900588225</span><span class=\"sy0\">,</span><br/>    <span class=\"nu0\">58142718981673030403681039458302204471300738980834668522257090844071443085937</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@testnums</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">printf</span> <span class=\"st0\">\":$b<span class=\"es0\">\\&lt;</span>%s&gt;<span class=\"es0\">\\n</span>digital root\u00a0%s, persistence\u00a0%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> digroot <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>base<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">procedure digital_root(atom n, integer base=10)<br/>integer root, persistence = 1<br/>atom work = n<br/>    while 1 do<br/>        root = 0<br/>        while work!=0 do<br/>            root += remainder(work,base)<br/>            work = floor(work/base)<br/>        end while<br/>        if root&lt;base then exit end if<br/>        work = root<br/>        persistence += 1<br/>    end while<br/>    printf(1,\"%15d root:\u00a0%d persistence:\u00a0%d\\n\",{n,root,persistence})<br/>end procedure<br/>\u00a0<br/>digital_root(627615)<br/>digital_root(39390)<br/>digital_root(588225)<br/>digital_root(393900588225)</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(for N (627615 39390 588225 393900588225)<br/>   (for ((A . I) N  T  (sum format (chop I)))<br/>      (T (&gt; 10 I)<br/>         (prinl N \" has additive persistance \" (dec A) \" and digital root of \" I \";\") ) ) )</pre>"}, {"lang": "PL/I", "loc": 59, "block": "<pre class=\"pli highlighted_source\"> digrt<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* REXX ***************************************************************<br/> * Test digroot<br/> **********************************************************************/</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> digrtst<span class=\"br0\">(</span><span class=\"st0\">'7'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> digrtst<span class=\"br0\">(</span><span class=\"st0\">'627615'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> digrtst<span class=\"br0\">(</span><span class=\"st0\">'39390'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> digrtst<span class=\"br0\">(</span><span class=\"st0\">'588225'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> digrtst<span class=\"br0\">(</span><span class=\"st0\">'393900588225'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> digrtst<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> dr <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p  <span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> digroot<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>dr<span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>dr<span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"kw1\">col</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> digroot<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>dr<span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/**********************************************************************<br/> * Compute the digital root and persistence of the given decimal number<br/> * 27.07.2012 Walter Pachl (derived from REXX)<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> n <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> dr <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p  <span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s  <span class=\"kw1\">Pic</span><span class=\"st0\">'(14)Z9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> v  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> v<span class=\"sy0\">=</span>strip<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* copy the number               */</span><br/> <span class=\"kw1\">If</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>   dr<span class=\"sy0\">=</span>v<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* more than one digit in v      */</span><br/>     s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>                            <span class=\"coMULTI\">/* initialize sum                */</span><br/>     p<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                           <span class=\"coMULTI\">/* increment persistence         */</span><br/>     <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* loop over all digits          */</span><br/>       dig<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* pick a digit                  */</span><br/>       s<span class=\"sy0\">=</span>s<span class=\"sy0\">+</span>dig<span class=\"sy0\">;</span>                      <span class=\"coMULTI\">/* add to the new sum            */</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"coMULTI\">/*Put Skip Data(v,p,s);*/</span><br/>     v<span class=\"sy0\">=</span>strip<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>                     <span class=\"coMULTI\">/* the 'new' number              */</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   dr<span class=\"sy0\">=</span><span class=\"kw1\">Decimal</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> strip<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> res <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"st0\">' '</span> <span class=\"kw1\">Then</span><br/>     res<span class=\"sy0\">=</span>res<span class=\"sy0\">||</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Potion", "loc": 17, "block": "<pre class=\"text highlighted_source\">digital = (x)\u00a0:<br/>   dr = x string  # Digital Root.<br/>   ap = 0  # Additive Persistence.<br/>   while (dr length &gt; 1)\u00a0:<br/>      sum = 0<br/>      dr length times (i): sum = sum + dr(i) number integer.<br/>      dr = sum string<br/>      ap++<br/>   .<br/>   (x, \" has additive persistence \", ap,<br/>      \" and digital root \", dr, \";\\n\") join print<br/>.<br/>\u00a0<br/>digital(627615)<br/>digital(39390)<br/>digital(588225)<br/>digital(393900588225)</pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>DigitalRoot <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Digitalsum <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>DigitalSum <span class=\"br0\">(</span><span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$ap</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">do</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>DigitalSum <span class=\"re0\">$n</span>; <span class=\"re0\">$ap</span><span class=\"sy0\">++</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">until</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$DigitalRoot</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>pscustomobject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        <span class=\"st0\">'Sum'</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><br/>        <span class=\"st0\">'Additive Persistence'</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ap</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$DigitalRoot</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 49, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">; if you just want the DigitalRoot</span><br/><span class=\"co1\">; Procedure.q DigitalRoot(N.q) apparently will do</span><br/><span class=\"co1\">; i must have missed something because it seems too simple</span><br/><span class=\"co1\">; http://en.wikipedia.org/wiki/Digital_root#Congruence_formula</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.q DigitalRoot<span class=\"br0\">(</span>N.q<span class=\"br0\">)</span> <br/><span class=\"kw1\">Protected</span> M.q<span class=\"sy0\">=</span>N<span class=\"sy0\">%</span>9<br/><span class=\"kw1\">if</span> M<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">9</span><br/><span class=\"kw1\">Else</span> \u00a0:<span class=\"kw1\">ProcedureReturn</span> M:<span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; there appears to be a proof guarantying that Len(N$)&lt;=1 for some X</span><br/><span class=\"co1\">; http://en.wikipedia.org/wiki/Digital_root#Proof_that_a_constant_value_exists</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s DigitalRootandPersistance<span class=\"br0\">(</span>N.q<span class=\"br0\">)</span><br/><span class=\"kw1\">Protected</span> r.s,t.s,X.q,M.q,persistance,N$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>M<span class=\"sy0\">=</span>DigitalRoot<span class=\"br0\">(</span>N.q<span class=\"br0\">)</span> <span class=\"co1\">; just a test to see if we get the same DigitalRoot via the Congruence_formula</span><br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/>X<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:Persistance<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>N$<span class=\"br0\">)</span>       <span class=\"co1\">; finding X as the sum of the digits of N</span><br/>X<span class=\"sy0\">+</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>N$,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>N$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>N$<span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span>:<span class=\"kw1\">Break</span>:<span class=\"kw1\">EndIf</span> <span class=\"co1\">; If Len(N$)&lt;=1:Break:EndIf</span><br/><span class=\"kw1\">Forever</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"br0\">(</span>X<span class=\"sy0\">-</span>M<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>:t.s<span class=\"sy0\">=</span><span class=\"st0\">\" Error in my logic\"</span>:<span class=\"kw1\">else</span>:t.s<span class=\"sy0\">=</span><span class=\"st0\">\" ok\"</span>:<span class=\"kw1\">EndIf</span><br/>\u00a0<br/>r.s<span class=\"sy0\">=</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>,<span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" has additive persistance \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>Persistance<span class=\"br0\">)</span><br/>r.s<span class=\"sy0\">+</span><span class=\"st0\">\" and digital root of X(slow) =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" M(fast) =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">+</span>t.s<br/><span class=\"kw1\">ProcedureReturn</span> r.s<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> Nlist.q<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">627615</span><br/><span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">39390</span><br/><span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">588225</span><br/><span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">393900588225</span><br/>\u00a0<br/><span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">ForEach</span> Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>N.q<span class=\"sy0\">=</span>Nlist<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">; cw(DigitalRootandPersistance(N))</span><br/><span class=\"kw1\">Debug</span> DigitalRootandPersistance<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span></pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> digital_root <span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    ap <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">10</span>:<br/>        n <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>digit<span class=\"br0\">)</span> <span class=\"kw1\">for</span> digit <span class=\"kw1\">in</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        ap +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> ap<span class=\"sy0\">,</span> n<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">627615</span><span class=\"sy0\">,</span> <span class=\"nu0\">39390</span><span class=\"sy0\">,</span> <span class=\"nu0\">588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">393900588225</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"br0\">]</span>:<br/>        persistance<span class=\"sy0\">,</span> root <span class=\"sy0\">=</span> digital_root<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%12i has additive persistance\u00a0%2i and digital root\u00a0%i.\"</span> <br/>             \u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> persistance<span class=\"sy0\">,</span> root<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\">y=1<br/>digital_root=function(n){<br/>  x=sum(as.numeric(unlist(strsplit(as.character(n),\"\"))))<br/>  if(x&lt;10){<br/>    k=x<br/>  }else{<br/>    y=y+1<br/>    assign(\"y\",y,envir = globalenv())<br/>    k=digital_root(x)<br/>  }<br/>  return(k)<br/>}<br/>print(\"Given number has additive persistence\",y)</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define/contract (additive-persistence/digital-root n (ap 0))<br/>  (-&gt;* (natural-number/c) (natural-number/c) (values natural-number/c natural-number/c))  <br/>  (define/contract (sum-digits x (acc 0))<br/>    (-&gt;* (natural-number/c) (natural-number/c) natural-number/c)<br/>    (if (= x 0)<br/>        acc<br/>        (let-values (((q r) (quotient/remainder x 10)))<br/>          (sum-digits q (+ acc r)))))  <br/>  (if (&lt; n 10)<br/>      (values ap n)<br/>      (additive-persistence/digital-root (sum-digits n) (+ ap 1))))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>\u00a0<br/>  (for ((n (in-list '(627615 39390 588225 393900588225)))<br/>        (ap (in-list '(2 2 2 2)))<br/>        (dr (in-list '(9 6 3 9))))<br/>    (call-with-values<br/>      (lambda () (additive-persistence/digital-root n))<br/>      (lambda (a d)<br/>        (check-equal? a ap)<br/>        (check-equal? d dr)<br/>        (printf \":~a has additive persistence ~a and digital root of ~a;~%\" n a d)))))</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX *************************************************************** <br/>* Test digroot                                                          <br/>**********************************************************************/</span> <br/>                                                 <span class=\"coMULTI\">/*           n r p */</span>  <br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>           ,<span class=\"nu0\">12</span><span class=\"br0\">)</span> digroot<span class=\"br0\">(</span><span class=\"nu0\">7</span>           <span class=\"br0\">)</span> <span class=\"coMULTI\">/*           7 7 0 */</span>  <br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">627615</span>      ,<span class=\"nu0\">12</span><span class=\"br0\">)</span> digroot<span class=\"br0\">(</span><span class=\"nu0\">627615</span>      <span class=\"br0\">)</span> <span class=\"coMULTI\">/*      627615 9 2 */</span>  <br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">39390</span>       ,<span class=\"nu0\">12</span><span class=\"br0\">)</span> digroot<span class=\"br0\">(</span><span class=\"nu0\">39390</span>       <span class=\"br0\">)</span> <span class=\"coMULTI\">/*       39390 6 2 */</span>  <br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">588225</span>      ,<span class=\"nu0\">12</span><span class=\"br0\">)</span> digroot<span class=\"br0\">(</span><span class=\"nu0\">588225</span>      <span class=\"br0\">)</span> <span class=\"coMULTI\">/*      588225 3 2 */</span>  <br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">393900588225</span>,<span class=\"nu0\">12</span><span class=\"br0\">)</span> digroot<span class=\"br0\">(</span><span class=\"nu0\">393900588225</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*393900588225 9 2 */</span>  <br/>  <span class=\"kw1\">Exit</span>                                                                  <br/>digroot: <span class=\"kw1\">Procedure</span>                                                      <br/><span class=\"coMULTI\">/********************************************************************** <br/>* Compute the digital root and persistence of the given decimal number  <br/>* 25.07.2012 Walter Pachl<br/>**************************** Bottom of Data **************************/</span> <br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n                         <span class=\"coMULTI\">/* the number                    */</span> <br/>p=<span class=\"nu0\">0</span>                                 <span class=\"coMULTI\">/* persistence                   */</span> <br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>                <span class=\"coMULTI\">/* more than one digit in n      */</span> <br/>  s=<span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/* initialize sum                */</span> <br/>  p=p+<span class=\"nu0\">1</span>                             <span class=\"coMULTI\">/* increment persistence         */</span> <br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">while</span> n<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span>                    <span class=\"coMULTI\">/* as long as there are digits   */</span> <br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> n c +<span class=\"nu0\">1</span> n              <span class=\"coMULTI\">/* pick the first one            */</span> <br/>    s=s+c                           <span class=\"coMULTI\">/* add to the new sum            */</span> <br/>    <span class=\"kw3\">End</span>                                                                 <br/>  n=s                               <span class=\"coMULTI\">/* the 'new' number              */</span> <br/>  <span class=\"kw3\">End</span>                                                                   <br/><span class=\"kw1\">return</span> n p                          <span class=\"coMULTI\">/* return root and persistence   */</span></pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>c = 0<br/>see \"Digital root of 627615 is \" + digitRoot(627615, 10) + \" persistance is \" + c + nl<br/>see \"Digital root of 39390  is \" + digitRoot(39390, 10) +  \" persistance is \" + c + nl<br/>see \"Digital root of 588225 is \" + digitRoot(588225, 10) +  \" persistance is \" + c + nl<br/>see \"Digital root of 9992   is \" + digitRoot(9992, 10) +  \" persistance is \" + c + nl<br/>\u00a0<br/>func digitRoot n,b  <br/>     c = 0           <br/>     while n &gt;= b<br/>           c = c + 1<br/>           n = digSum(n, b)<br/>     end<br/>     return n             <br/>\u00a0<br/>func digSum n, b<br/>     s = 0<br/>     while n\u00a0!= 0<br/>           q = floor(n / b)<br/>           s = s + n - q * b<br/>           n = q<br/>     end<br/>     return s<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 24, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> digroot_persistence<span class=\"br0\">(</span>base=<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    num = <span class=\"kw2\">self</span>.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>    persistence = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">until</span> num <span class=\"sy0\">&lt;</span> base <span class=\"kw1\">do</span><br/>      num = num.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>.<span class=\"me1\">each_char</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>m, c<span class=\"sy0\">|</span> m <span class=\"sy0\">+</span> c.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      persistence <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"br0\">[</span>num.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>, persistence<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"--- Examples in 10-Base ---\"</span><br/><span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">627615</span> <span class=\"nu0\">39390</span> <span class=\"nu0\">588225</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>str<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%12s has a digital root of\u00a0%s and a persistence of\u00a0%s.\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>str, <span class=\"sy0\">*</span>str.<span class=\"me1\">digroot_persistence</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>--- Examples in other Base ---\"</span><br/><span class=\"kw3\">format</span> = <span class=\"st0\">\"%s base\u00a0%s has a digital root of\u00a0%s and a persistence of\u00a0%s.\"</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"101101110110110010011011111110011000001\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span> <span class=\"st0\">\"5BB64DFCC1\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span><span class=\"st0\">\"5\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span><span class=\"st0\">\"50YE8N29\"</span>, <span class=\"nu0\">36</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>str, base<span class=\"br0\">)</span><span class=\"sy0\">|</span><br/>   <span class=\"kw3\">puts</span> <span class=\"kw3\">format</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>str, base, <span class=\"sy0\">*</span>str.<span class=\"me1\">digroot_persistence</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">print \"Digital root of 627615       is \"; digitRoot$(627615, 10) <br/>print \"Digital root of 39390        is \"; digitRoot$(39390, 10) <br/>print \"Digital root of 588225       is \"; digitRoot$(588225, 10) <br/>print \"Digital root of 393900588225 is \"; digitRoot$(393900588225, 10)<br/>print \"Digital root of 9992         is \"; digitRoot$(9992, 10)<br/>END<br/>\u00a0<br/>function digitRoot$(n,b)<br/>WHILE n &gt;= b<br/>  c = c + 1<br/>  n = digSum(n, b)<br/>wend<br/>digitRoot$ = n;\" persistance is \";c<br/>end function<br/>\u00a0<br/>function digSum(n, b)<br/>WHILE n &lt;&gt; 0<br/>  q = INT(n / b)<br/>  s = s + n - q * b<br/>  n = q<br/>wend<br/>digSum = s<br/>end function</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">fn sum_digits(mut n: u64, base: u64) -&gt; u64 {<br/>    let mut sum = 0u64;<br/>    while n &gt; 0 {<br/>        sum = sum + (n\u00a0% base);<br/>        n = n / base;<br/>    }<br/>    sum<br/>}<br/>\u00a0<br/>// Returns tuple of (additive-persistence, digital-root)<br/>fn digital_root(mut num: u64, base: u64) -&gt; (u64, u64) {<br/>    let mut pers = 0;<br/>    while num &gt;= base {<br/>        pers = pers + 1;<br/>        num = sum_digits(num, base);<br/>    }<br/>    (pers, num)<br/>}<br/>\u00a0<br/>fn main() {<br/>\u00a0<br/>    // Test base 10<br/>    let values = [627615u64, 39390u64, 588225u64, 393900588225u64];<br/>    for &amp;value in values.iter() {<br/>        let (pers, root) = digital_root(value, 10);<br/>        println!(\"{} has digital root {} and additive persistance {}\",<br/>                 value,<br/>                 root,<br/>                 pers);<br/>    }<br/>\u00a0<br/>    println!(\"\");<br/>\u00a0<br/>    // Test base 16<br/>    let values_base16 = [0x7e0, 0x14e344, 0xd60141, 0x12343210];<br/>    for &amp;value in values_base16.iter() {<br/>        let (pers, root) = digital_root(value, 16);<br/>        println!(\"0x{:x} has digital root 0x{:x} and additive persistance 0x{:x}\",<br/>                 value,<br/>                 root,<br/>                 pers);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digitalRoot<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>BigInt, base<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sumDigits<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span>x.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">asDigit</span><span class=\"br0\">)</span> sum<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>s<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>s, c<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop<span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span>s<span class=\"br0\">)</span>, c+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  loop<span class=\"br0\">(</span>sumDigits<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Seq<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">627615</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"393900588225\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>x <span class=\"sy0\">=&gt;</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>s, c<span class=\"br0\">)</span><span class=\"sy0\">=</span>digitalRoot<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%d has additive persistance\u00a0%d and digital root of\u00a0%d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>x,c,s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>s, c<span class=\"br0\">)</span><span class=\"sy0\">=</span>digitalRoot<span class=\"br0\">(</span>0x7e0, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span><span class=\"st0\">\"%x has additive persistance\u00a0%d and digital root of\u00a0%d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>0x7e0,c,s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 30, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func bigInteger: digitalRoot (in var bigInteger: num, in bigInteger: base, inout bigInteger: persistence) is func<br/>  result<br/>     var bigInteger: sum is 0_;<br/>  begin<br/>    persistence\u00a0:= 0_;<br/>    while num &gt;= base do<br/>      sum\u00a0:= 0_;<br/>      while num &gt; 0_ do<br/>        sum +:= num rem base;<br/>        num\u00a0:= num div base;<br/>      end while;<br/>      num\u00a0:= sum;<br/>      incr(persistence);<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: num is 0_;<br/>    var bigInteger: root is 0_;<br/>    var bigInteger: persistence is 0_;<br/>  begin<br/>    for num range [] (627615_, 39390_, 588225_, 393900588225_) do<br/>      root\u00a0:= digitalRoot(num, 10_, persistence);<br/>      writeln(num &lt;&amp; \" has additive persistence \" &lt;&amp; persistence &lt;&amp; \" and digital root of \" &lt;&amp; root);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">func digroot <span class=\"br0\">(</span>r, base = <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var root = r.<span class=\"me1\">base</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>    var persistence = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>root.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        root = root.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> Number<span class=\"br0\">(</span>n, <span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">base</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>        <span class=\"sy0\">++</span>persistence<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span><span class=\"br0\">(</span>persistence, root<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var nums = <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">627615</span>, <span class=\"nu0\">39390</span>, <span class=\"nu0\">588225</span>, <span class=\"nu0\">393900588225</span><span class=\"br0\">]</span><br/>var bases = <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">36</span><span class=\"br0\">]</span><br/>var fmt = <span class=\"st0\">\"%25s(%2s): persistance =\u00a0%s, root =\u00a0%2s<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>nums <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">550777011503</span> <span class=\"sy0\">*</span><br/>         <span class=\"nu0\">105564897893993412813307040538786690718089963180462913406682192479</span><span class=\"br0\">)</span><br/>\u00a0<br/>bases.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>    nums.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>        var x = n.<span class=\"me1\">base</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>        x = <span class=\"st0\">'BIG'</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>        fmt.<span class=\"kw3\">printf</span><span class=\"br0\">(</span>x, b, digroot<span class=\"br0\">(</span>n, b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 12, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> digitalroot num <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> p <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$num</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> p<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> num <span class=\"br0\">[</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$num</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">list</span> <span class=\"re0\">$p</span> <span class=\"re0\">$num</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> n <span class=\"br0\">{</span><span class=\"nu0\">627615</span> <span class=\"nu0\">39390</span> <span class=\"nu0\">588225</span> <span class=\"nu0\">393900588225</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>digitalroot <span class=\"re0\">$n</span><span class=\"br0\">]</span> p r<br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"$n has additive persistence $p and digital root of $r\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 33, "block": "<pre class=\"text highlighted_source\">PRINT \"Digital root of 627615 is \"; FUNC(_FNdigitalroot(627615, 10))\u00a0;<br/>PRINT \" (additive persistence \"\u00a0; Pop(); \")\"<br/>\u00a0<br/>PRINT \"Digital root of 39390 is \"; FUNC(_FNdigitalroot(39390, 10))\u00a0;<br/>PRINT \" (additive persistence \"\u00a0; Pop(); \")\"<br/>\u00a0<br/>PRINT \"Digital root of 588225 is \"; FUNC(_FNdigitalroot(588225, 10))\u00a0;<br/>PRINT \" (additive persistence \"\u00a0; Pop(); \")\"<br/>\u00a0<br/>PRINT \"Digital root of 9992 is \"; FUNC(_FNdigitalroot(9992, 10))\u00a0;<br/>PRINT \" (additive persistence \"\u00a0; Pop(); \")\"<br/>END<br/>\u00a0<br/>\u00a0<br/>_FNdigitalroot Param(2)<br/>  Local (1)<br/>  <a class=\"__cf_email__\" data-cfemail=\"fe9dbe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>  Do Until <a class=\"__cf_email__\" data-cfemail=\"442504\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; <a class=\"__cf_email__\" data-cfemail=\"ff9dbf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"fb98bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"91f2d1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>    <a class=\"__cf_email__\" data-cfemail=\"7f1e3f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = FUNC(_FNdigitsum (<a class=\"__cf_email__\" data-cfemail=\"adcced\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"3d5f7d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>  Loop<br/>  Push (<a class=\"__cf_email__\" data-cfemail=\"cba88b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' That's how uBasic handles an extra<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"731233\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' return value: on the stack<br/>\u00a0<br/>_FNdigitsum Param (2)<br/>  Local (2)<br/>  <a class=\"__cf_email__\" data-cfemail=\"b9ddf9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =0<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"761736\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> # 0<br/>    <a class=\"__cf_email__\" data-cfemail=\"274467\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"660726\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> / <a class=\"__cf_email__\" data-cfemail=\"234163\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"bdd9fd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"c9ad89\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + <a class=\"__cf_email__\" data-cfemail=\"98f9d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - (<a class=\"__cf_email__\" data-cfemail=\"b7d4f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"6a082a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>    <a class=\"__cf_email__\" data-cfemail=\"95f4d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"640724\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  Loop<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"3a5e7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "UNIX Shell", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/usr/bin/env bash</span><br/>\u00a0<br/><span class=\"re2\">numbers</span>=<span class=\"br0\">(</span><span class=\"nu0\">627615</span> <span class=\"nu0\">39390</span> <span class=\"nu0\">588225</span> <span class=\"nu0\">393900588225</span> <span class=\"nu0\">55</span><span class=\"br0\">)</span><br/><span class=\"kw3\">declare</span> root<br/>\u00a0<br/><span class=\"kw1\">for</span> number <span class=\"kw1\">in</span> <span class=\"st0\">\"<span class=\"es3\">${numbers[@]}</span>\"</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">declare</span> <span class=\"re5\">-i</span> iterations<br/>    <span class=\"re2\">root</span>=<span class=\"st0\">\"<span class=\"es3\">${number}</span>\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${#root}</span>\"</span> <span class=\"re5\">-ne</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>        <span class=\"re2\">root</span>=<span class=\"st0\">\"<span class=\"es4\">$(( $(fold -w1 &lt;&lt;&lt;\"${root}\" | xargs | sed 's/ /+/g')</span> ))\"</span><br/>        iterations+=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re5\">-e</span> <span class=\"st0\">\"<span class=\"es3\">${number}</span> has additive persistence <span class=\"es3\">${iterations}</span> and digital root <span class=\"es3\">${root}</span>\"</span><br/>    <span class=\"kw3\">unset</span> iterations<br/><span class=\"kw1\">done</span> <span class=\"sy0\">|</span> column <span class=\"re5\">-t</span></pre>"}, {"lang": "VBScript", "loc": 15, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> digital_root(n)<br/>\tap = 0<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> Len(n) = 1<br/>\t\tx = 0<br/>\t\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(n)<br/>\t\t\tx = x + CInt(Mid(n,i,1))<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tn = x<br/>\t\tap = ap + 1<br/>\t<span class=\"kw3\">Loop</span><br/>\tdigital_root = <span class=\"st0\">\"Additive Persistence = \"</span> &amp; ap &amp; vbCrLf &amp;_<br/>\t\t<span class=\"st0\">\"Digital Root = \"</span> &amp; n &amp; vbCrLf\t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write digital_root(WScript.Arguments(0))</pre>"}, {"lang": "Wortel", "loc": 13, "block": "<pre class=\"text highlighted_source\">@let {<br/>  sumDigits ^(@sum @arr)<br/>  drootl    &amp;\\@rangef [. sumDigits ^(\\~&gt;1 #@arr)]<br/>\u00a0<br/>  droot     ^(@last drootl)<br/>  apers     ^(#-drootl)<br/>\u00a0<br/>  [<br/>   \u00a0!console.log \"[number]: [digital root] [additive persistence] [intermediate sums]\"<br/>    <a class=\"__cf_email__\" data-cfemail=\"cab48aafaba9a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [627615 39390 588225 393900588225]<br/>      &amp;n\u00a0!console.log \"{n}: {!droot n} {!apers n} {@str\u00a0!drootl n}\"<br/>  ]<br/>}</pre>"}, {"lang": "XPL0", "loc": 26, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                  \\intrinsic 'code' declarations<br/>\u00a0<br/>func DRoot(N, B, P);                    \\Return digital root and persistance P<br/>real N, B; int P;<br/>int  S;<br/>[P(0):= 0;<br/>while N &gt;= B do<br/>        [S:= 0;<br/>        repeat  S:= S + fix(Mod(N,B));  \\sum last digit<br/>                N:= N/B;                \\remove last digit<br/>                N:= N - Mod(N,1.);<br/>        until   N &lt; 0.1;                \\(beware of rounding errors)<br/>        P(0):= P(0)+1;                  \\increment persistance<br/>        N:= float(S);<br/>        ];<br/>return fix(N);<br/>];<br/>\u00a0<br/>real Tbl;<br/>int  I, Root, Pers;<br/>[Tbl:= [627615., 39390., 588225., 393900588225.];<br/>for I:= 0 to 4-1 do<br/>        [Root:= DRoot(Tbl(I), 10., @Pers);<br/>        IntOut(0, Pers);  ChOut(0, ^ );  IntOut(0, Root);  CrLf(0);<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fcn sum(n,b){ n.split(b).sum(0) }<br/>fcn droot(n,b=10,X=0) // --&gt;(digital root, additive persistence)<br/>   { if(n&lt;b)return(n,X); return(self.fcn(sum(n,b),b,X+1)) }</pre>"}, {"lang": "zonnon", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module Main;<br/>type<br/>\tlongint = integer{64};<br/>\u00a0<br/>type {public,ref}<br/>\tResponse = object (dr,p: longint)<br/>\tvar {public,immutable}<br/>\t\tdigitalRoot,persistence: longint;<br/>\u00a0<br/>\tprocedure {public} Writeln;<br/>\tbegin<br/>\t\twriteln(\"digital root: \",digitalRoot:2,\" persistence: \",persistence:2)<br/>\tend Writeln;<br/>\u00a0<br/>\tbegin<br/>\t\tself.digitalRoot\u00a0:= dr;<br/>\t\tself.persistence\u00a0:= p;<br/>\tend Response;<br/>\u00a0<br/>\tprocedure DigitalRoot(n:longint):Response;<br/>\tvar<br/>\t\tsum,p: longint;<br/>\tbegin<br/>\t\tp\u00a0:= 0;<br/>\t\tloop<br/>\t\t\tinc(p);sum\u00a0:= 0;<br/>\t\t\twhile (n &gt; 0) do<br/>\t\t\t\tinc(sum,n mod 10);<br/>\t\t\t\tn\u00a0:= n div 10;<br/>\t\t\tend;<br/>\t\t\tif sum &lt; 10 then return new Response(sum,p) else n\u00a0:= sum end<br/>\t\tend<br/>\tend DigitalRoot;<br/>\u00a0<br/>begin<br/>\twrite(627615:22,\":&gt; \");DigitalRoot(627615).Writeln;<br/>\twrite(39390:22,\":&gt; \");DigitalRoot(39390).Writeln;<br/>\twrite(588225:22,\":&gt; \");DigitalRoot(588225).Writeln;<br/>\twrite(max(integer{64}):22,\":&gt; \");DigitalRoot(max(integer{64})).Writeln;<br/>end Main.<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 18, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> DATA <span class=\"nu0\">4</span>,<span class=\"nu0\">627615</span>,<span class=\"nu0\">39390</span>,<span class=\"nu0\">588225</span>,<span class=\"nu0\">9992</span><br/><span class=\"nu0\">20</span> READ j: <span class=\"kw1\">LET</span> b=<span class=\"nu0\">10</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> j<br/><span class=\"nu0\">40</span> READ n<br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Digital root of \"</span>;n;<span class=\"st0\">\" is\"</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">80</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Digital Root</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> c=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">IF</span> n&gt;=b <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> c=c+<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">2000</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1020</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">PRINT</span> n;<span class=\"st0\">\" persistance is \"</span>;c<span class=\"co1\">''</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">2000</span> <span class=\"co3\">REM Digit sum</span><br/><span class=\"nu0\">2010</span> <span class=\"kw1\">LET</span> s=<span class=\"nu0\">0</span><br/><span class=\"nu0\">2020</span> <span class=\"kw1\">IF</span> n&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> q=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>n/b<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> s=s+n-q*b: <span class=\"kw1\">LET</span> n=q: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2020</span><br/><span class=\"nu0\">2030</span> <span class=\"kw1\">LET</span> n=s<br/><span class=\"nu0\">2040</span> <span class=\"kw1\">RETURN</span></pre>"}]}